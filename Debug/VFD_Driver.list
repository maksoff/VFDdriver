
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da40  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  0800db50  0800db50  0001db50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e294  0800e294  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800e294  0800e294  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e294  0800e294  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e294  0800e294  0001e294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e298  0800e298  0001e298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800e29c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003488  20000190  0800e42c  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003618  0800e42c  00023618  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bf81  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005dac  00000000  00000000  0004c13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de8  00000000  00000000  00051ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bd0  00000000  00000000  00053cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e707  00000000  00000000  000558a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023f07  00000000  00000000  00073fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c4c5  00000000  00000000  00097eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00134373  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bec  00000000  00000000  001343c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000190 	.word	0x20000190
 800012c:	00000000 	.word	0x00000000
 8000130:	0800db38 	.word	0x0800db38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000194 	.word	0x20000194
 800014c:	0800db38 	.word	0x0800db38

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qUSB_rcv */
  qUSB_rcvHandle = osMessageQueueNew (64, sizeof(uint8_t), &qUSB_rcv_attributes);
 8000178:	4a1a      	ldr	r2, [pc, #104]	; (80001e4 <MX_FREERTOS_Init+0x70>)
 800017a:	2101      	movs	r1, #1
 800017c:	2040      	movs	r0, #64	; 0x40
 800017e:	f00a f9bf 	bl	800a500 <osMessageQueueNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a18      	ldr	r2, [pc, #96]	; (80001e8 <MX_FREERTOS_Init+0x74>)
 8000186:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000188:	4a18      	ldr	r2, [pc, #96]	; (80001ec <MX_FREERTOS_Init+0x78>)
 800018a:	2100      	movs	r1, #0
 800018c:	4818      	ldr	r0, [pc, #96]	; (80001f0 <MX_FREERTOS_Init+0x7c>)
 800018e:	f00a f8df 	bl	800a350 <osThreadNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a17      	ldr	r2, [pc, #92]	; (80001f4 <MX_FREERTOS_Init+0x80>)
 8000196:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 8000198:	4a17      	ldr	r2, [pc, #92]	; (80001f8 <MX_FREERTOS_Init+0x84>)
 800019a:	2100      	movs	r1, #0
 800019c:	4817      	ldr	r0, [pc, #92]	; (80001fc <MX_FREERTOS_Init+0x88>)
 800019e:	f00a f8d7 	bl	800a350 <osThreadNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a16      	ldr	r2, [pc, #88]	; (8000200 <MX_FREERTOS_Init+0x8c>)
 80001a6:	6013      	str	r3, [r2, #0]

  /* creation of taskUSB_rcv */
  taskUSB_rcvHandle = osThreadNew(StartUSB_rcv, NULL, &taskUSB_rcv_attributes);
 80001a8:	4a16      	ldr	r2, [pc, #88]	; (8000204 <MX_FREERTOS_Init+0x90>)
 80001aa:	2100      	movs	r1, #0
 80001ac:	4816      	ldr	r0, [pc, #88]	; (8000208 <MX_FREERTOS_Init+0x94>)
 80001ae:	f00a f8cf 	bl	800a350 <osThreadNew>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a15      	ldr	r2, [pc, #84]	; (800020c <MX_FREERTOS_Init+0x98>)
 80001b6:	6013      	str	r3, [r2, #0]

  /* creation of UARTtask */
  UARTtaskHandle = osThreadNew(StartUARTtask, NULL, &UARTtask_attributes);
 80001b8:	4a15      	ldr	r2, [pc, #84]	; (8000210 <MX_FREERTOS_Init+0x9c>)
 80001ba:	2100      	movs	r1, #0
 80001bc:	4815      	ldr	r0, [pc, #84]	; (8000214 <MX_FREERTOS_Init+0xa0>)
 80001be:	f00a f8c7 	bl	800a350 <osThreadNew>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a14      	ldr	r2, [pc, #80]	; (8000218 <MX_FREERTOS_Init+0xa4>)
 80001c6:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(StartEncoder, NULL, &Encoder_attributes);
 80001c8:	4a14      	ldr	r2, [pc, #80]	; (800021c <MX_FREERTOS_Init+0xa8>)
 80001ca:	2100      	movs	r1, #0
 80001cc:	4814      	ldr	r0, [pc, #80]	; (8000220 <MX_FREERTOS_Init+0xac>)
 80001ce:	f00a f8bf 	bl	800a350 <osThreadNew>
 80001d2:	4603      	mov	r3, r0
 80001d4:	4a13      	ldr	r2, [pc, #76]	; (8000224 <MX_FREERTOS_Init+0xb0>)
 80001d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  qUSB_rcvQueue = qUSB_rcvHandle; // adding to freertos_inc.h
 80001d8:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <MX_FREERTOS_Init+0x74>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a12      	ldr	r2, [pc, #72]	; (8000228 <MX_FREERTOS_Init+0xb4>)
 80001de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	0800de24 	.word	0x0800de24
 80001e8:	20002488 	.word	0x20002488
 80001ec:	0800dd70 	.word	0x0800dd70
 80001f0:	0800022d 	.word	0x0800022d
 80001f4:	20002478 	.word	0x20002478
 80001f8:	0800dd94 	.word	0x0800dd94
 80001fc:	08000265 	.word	0x08000265
 8000200:	2000247c 	.word	0x2000247c
 8000204:	0800ddb8 	.word	0x0800ddb8
 8000208:	08000299 	.word	0x08000299
 800020c:	20002484 	.word	0x20002484
 8000210:	0800dddc 	.word	0x0800dddc
 8000214:	080002e1 	.word	0x080002e1
 8000218:	20002480 	.word	0x20002480
 800021c:	0800de00 	.word	0x0800de00
 8000220:	0800031d 	.word	0x0800031d
 8000224:	20002490 	.word	0x20002490
 8000228:	2000248c 	.word	0x2000248c

0800022c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000234:	f00c ff52 	bl	800d0dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */


  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 8000238:	2201      	movs	r2, #1
 800023a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800023e:	4808      	ldr	r0, [pc, #32]	; (8000260 <StartDefaultTask+0x34>)
 8000240:	f002 fefd 	bl	800303e <HAL_GPIO_WritePin>
  osDelay(10);
 8000244:	200a      	movs	r0, #10
 8000246:	f00a f92d 	bl	800a4a4 <osDelay>
  init_microrl();
 800024a:	f002 f85b 	bl	8002304 <init_microrl>
  set_CDC_ready(); // allow to send
 800024e:	f002 f893 	bl	8002378 <set_CDC_ready>

  //vTaskDelete(NULL);
  /* Infinite loop */
  for(;;)
  {
    process_encoder();
 8000252:	f000 fadd 	bl	8000810 <process_encoder>
    osDelay(1);
 8000256:	2001      	movs	r0, #1
 8000258:	f00a f924 	bl	800a4a4 <osDelay>
    process_encoder();
 800025c:	e7f9      	b.n	8000252 <StartDefaultTask+0x26>
 800025e:	bf00      	nop
 8000260:	40010800 	.word	0x40010800

08000264 <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 800026c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000270:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 8000272:	f00b fb2b 	bl	800b8cc <xTaskGetTickCount>
 8000276:	4603      	mov	r3, r0
 8000278:	60bb      	str	r3, [r7, #8]

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800027a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027e:	4805      	ldr	r0, [pc, #20]	; (8000294 <StartLEDheartbeat+0x30>)
 8000280:	f002 fef5 	bl	800306e <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000284:	f107 0308 	add.w	r3, r7, #8
 8000288:	68f9      	ldr	r1, [r7, #12]
 800028a:	4618      	mov	r0, r3
 800028c:	f00b f95a 	bl	800b544 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8000290:	e7ef      	b.n	8000272 <StartLEDheartbeat+0xe>
 8000292:	bf00      	nop
 8000294:	40011000 	.word	0x40011000

08000298 <StartUSB_rcv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSB_rcv */
void StartUSB_rcv(void *argument)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	char buf;

	UBaseType_t uxHighWaterMark, uxHighWaterMark_old;

	/* Inspect our own high water mark on entering the task. */
	uxHighWaterMark_old = uxTaskGetStackHighWaterMark( NULL );
 80002a0:	2000      	movs	r0, #0
 80002a2:	f00b fe15 	bl	800bed0 <uxTaskGetStackHighWaterMark>
 80002a6:	6178      	str	r0, [r7, #20]
	uxHighWaterMark = uxHighWaterMark_old;
 80002a8:	697b      	ldr	r3, [r7, #20]
 80002aa:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <StartUSB_rcv+0x44>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	f107 010f 	add.w	r1, r7, #15
 80002b4:	f04f 32ff 	mov.w	r2, #4294967295
 80002b8:	4618      	mov	r0, r3
 80002ba:	f00a fd5f 	bl	800ad7c <xQueueReceive>
	  microrl_print_char(buf);
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fcdb 	bl	8001c7c <microrl_print_char>
	  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80002c6:	2000      	movs	r0, #0
 80002c8:	f00b fe02 	bl	800bed0 <uxTaskGetStackHighWaterMark>
 80002cc:	6138      	str	r0, [r7, #16]
	  if (uxHighWaterMark < uxHighWaterMark_old)
 80002ce:	693a      	ldr	r2, [r7, #16]
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d2ea      	bcs.n	80002ac <StartUSB_rcv+0x14>
	  {
		  uxHighWaterMark_old = uxHighWaterMark;
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	617b      	str	r3, [r7, #20]
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80002da:	e7e7      	b.n	80002ac <StartUSB_rcv+0x14>
 80002dc:	2000248c 	.word	0x2000248c

080002e0 <StartUARTtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTtask */
void StartUARTtask(void *argument)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  uint8_t data;
  for(;;)
  {
	HAL_UART_Receive_IT(&huart2, &data, 1);
 80002e8:	f107 030f 	add.w	r3, r7, #15
 80002ec:	2201      	movs	r2, #1
 80002ee:	4619      	mov	r1, r3
 80002f0:	4809      	ldr	r0, [pc, #36]	; (8000318 <StartUARTtask+0x38>)
 80002f2:	f005 fdbc 	bl	8005e6e <HAL_UART_Receive_IT>
	/* Wait to be notified of an interrupt. */
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 80002f6:	f04f 31ff 	mov.w	r1, #4294967295
 80002fa:	2001      	movs	r0, #1
 80002fc:	f00b fee4 	bl	800c0c8 <ulTaskNotifyTake>
	if (get_nema())
 8000300:	f002 f944 	bl	800258c <get_nema>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0ee      	beq.n	80002e8 <StartUARTtask+0x8>
		CDC_Transmit_FS(&data, 1);
 800030a:	f107 030f 	add.w	r3, r7, #15
 800030e:	2101      	movs	r1, #1
 8000310:	4618      	mov	r0, r3
 8000312:	f00c ffc7 	bl	800d2a4 <CDC_Transmit_FS>
	HAL_UART_Receive_IT(&huart2, &data, 1);
 8000316:	e7e7      	b.n	80002e8 <StartUARTtask+0x8>
 8000318:	20002610 	.word	0x20002610

0800031c <StartEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoder */
void StartEncoder(void *argument)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b09a      	sub	sp, #104	; 0x68
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]

	static bool invert = true;
	static bool released = true;


  osDelay(500);
 8000324:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000328:	f00a f8bc 	bl	800a4a4 <osDelay>
  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 800032c:	2201      	movs	r2, #1
 800032e:	2120      	movs	r1, #32
 8000330:	48ad      	ldr	r0, [pc, #692]	; (80005e8 <StartEncoder+0x2cc>)
 8000332:	f002 fe84 	bl	800303e <HAL_GPIO_WritePin>
  union VFD {
	  uint8_t arr2[11][3];
	  uint8_t arr1[11*3];
  } vfd;

  for (int i = 0; i < sizeof(vfd.arr1); i++)
 8000336:	2300      	movs	r3, #0
 8000338:	667b      	str	r3, [r7, #100]	; 0x64
 800033a:	e008      	b.n	800034e <StartEncoder+0x32>
  {
	  vfd.arr1[i] = 0;
 800033c:	f107 0210 	add.w	r2, r7, #16
 8000340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000342:	4413      	add	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < sizeof(vfd.arr1); i++)
 8000348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800034a:	3301      	adds	r3, #1
 800034c:	667b      	str	r3, [r7, #100]	; 0x64
 800034e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000350:	2b20      	cmp	r3, #32
 8000352:	d9f3      	bls.n	800033c <StartEncoder+0x20>
  }
  uint8_t data;


  data = 0b01000000; // command 2, write to Display port
 8000354:	2340      	movs	r3, #64	; 0x40
 8000356:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800035e:	48a2      	ldr	r0, [pc, #648]	; (80005e8 <StartEncoder+0x2cc>)
 8000360:	f002 fe6d 	bl	800303e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000364:	f107 010f 	add.w	r1, r7, #15
 8000368:	f04f 33ff 	mov.w	r3, #4294967295
 800036c:	2201      	movs	r2, #1
 800036e:	489f      	ldr	r0, [pc, #636]	; (80005ec <StartEncoder+0x2d0>)
 8000370:	f005 f904 	bl	800557c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000374:	2201      	movs	r2, #1
 8000376:	f44f 7180 	mov.w	r1, #256	; 0x100
 800037a:	489b      	ldr	r0, [pc, #620]	; (80005e8 <StartEncoder+0x2cc>)
 800037c:	f002 fe5f 	bl	800303e <HAL_GPIO_WritePin>
  osDelay(10);
 8000380:	200a      	movs	r0, #10
 8000382:	f00a f88f 	bl	800a4a4 <osDelay>
  data = 0b11000000; // command 3, set address to 0
 8000386:	23c0      	movs	r3, #192	; 0xc0
 8000388:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800038a:	2200      	movs	r2, #0
 800038c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000390:	4895      	ldr	r0, [pc, #596]	; (80005e8 <StartEncoder+0x2cc>)
 8000392:	f002 fe54 	bl	800303e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000396:	f107 010f 	add.w	r1, r7, #15
 800039a:	f04f 33ff 	mov.w	r3, #4294967295
 800039e:	2201      	movs	r2, #1
 80003a0:	4892      	ldr	r0, [pc, #584]	; (80005ec <StartEncoder+0x2d0>)
 80003a2:	f005 f8eb 	bl	800557c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80003a6:	f107 0110 	add.w	r1, r7, #16
 80003aa:	f04f 33ff 	mov.w	r3, #4294967295
 80003ae:	2221      	movs	r2, #33	; 0x21
 80003b0:	488e      	ldr	r0, [pc, #568]	; (80005ec <StartEncoder+0x2d0>)
 80003b2:	f005 f8e3 	bl	800557c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80003b6:	2201      	movs	r2, #1
 80003b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003bc:	488a      	ldr	r0, [pc, #552]	; (80005e8 <StartEncoder+0x2cc>)
 80003be:	f002 fe3e 	bl	800303e <HAL_GPIO_WritePin>
  osDelay(10);
 80003c2:	200a      	movs	r0, #10
 80003c4:	f00a f86e 	bl	800a4a4 <osDelay>
  // init display, 11 digits 17 segments
  data = 0b00000111; // command 1, 11 digits 17 segments
 80003c8:	2307      	movs	r3, #7
 80003ca:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d2:	4885      	ldr	r0, [pc, #532]	; (80005e8 <StartEncoder+0x2cc>)
 80003d4:	f002 fe33 	bl	800303e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80003d8:	f107 010f 	add.w	r1, r7, #15
 80003dc:	f04f 33ff 	mov.w	r3, #4294967295
 80003e0:	2201      	movs	r2, #1
 80003e2:	4882      	ldr	r0, [pc, #520]	; (80005ec <StartEncoder+0x2d0>)
 80003e4:	f005 f8ca 	bl	800557c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80003e8:	2201      	movs	r2, #1
 80003ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ee:	487e      	ldr	r0, [pc, #504]	; (80005e8 <StartEncoder+0x2cc>)
 80003f0:	f002 fe25 	bl	800303e <HAL_GPIO_WritePin>
  osDelay(10);
 80003f4:	200a      	movs	r0, #10
 80003f6:	f00a f855 	bl	800a4a4 <osDelay>


  data = 0b10000000; // command 4
 80003fa:	2380      	movs	r3, #128	; 0x80
 80003fc:	73fb      	strb	r3, [r7, #15]
  data |= 1<<3; // enable/disable display
 80003fe:	7bfb      	ldrb	r3, [r7, #15]
 8000400:	f043 0308 	orr.w	r3, r3, #8
 8000404:	b2db      	uxtb	r3, r3
 8000406:	73fb      	strb	r3, [r7, #15]
  data |= 0b111; // set brightness
 8000408:	7bfb      	ldrb	r3, [r7, #15]
 800040a:	f043 0307 	orr.w	r3, r3, #7
 800040e:	b2db      	uxtb	r3, r3
 8000410:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000412:	2200      	movs	r2, #0
 8000414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000418:	4873      	ldr	r0, [pc, #460]	; (80005e8 <StartEncoder+0x2cc>)
 800041a:	f002 fe10 	bl	800303e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800041e:	f107 010f 	add.w	r1, r7, #15
 8000422:	f04f 33ff 	mov.w	r3, #4294967295
 8000426:	2201      	movs	r2, #1
 8000428:	4870      	ldr	r0, [pc, #448]	; (80005ec <StartEncoder+0x2d0>)
 800042a:	f005 f8a7 	bl	800557c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800042e:	2201      	movs	r2, #1
 8000430:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000434:	486c      	ldr	r0, [pc, #432]	; (80005e8 <StartEncoder+0x2cc>)
 8000436:	f002 fe02 	bl	800303e <HAL_GPIO_WritePin>
  osDelay(10);
 800043a:	200a      	movs	r0, #10
 800043c:	f00a f832 	bl	800a4a4 <osDelay>



  for (int i = 0; i < 11; i++)
 8000440:	2300      	movs	r3, #0
 8000442:	663b      	str	r3, [r7, #96]	; 0x60
 8000444:	e047      	b.n	80004d6 <StartEncoder+0x1ba>
  {
	  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000446:	2300      	movs	r3, #0
 8000448:	65fb      	str	r3, [r7, #92]	; 0x5c
 800044a:	e008      	b.n	800045e <StartEncoder+0x142>
	  	  vfd.arr1[a] = 0;
 800044c:	f107 0210 	add.w	r2, r7, #16
 8000450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000452:	4413      	add	r3, r2
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
	  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800045a:	3301      	adds	r3, #1
 800045c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800045e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000460:	2b20      	cmp	r3, #32
 8000462:	d9f3      	bls.n	800044c <StartEncoder+0x130>
	  for (int b = 0; b < 3; b++)
 8000464:	2300      	movs	r3, #0
 8000466:	65bb      	str	r3, [r7, #88]	; 0x58
 8000468:	e00e      	b.n	8000488 <StartEncoder+0x16c>
	  {
		  vfd.arr2[i][b] = 0xFF;
 800046a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800046c:	4613      	mov	r3, r2
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	4413      	add	r3, r2
 8000472:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000476:	441a      	add	r2, r3
 8000478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800047a:	4413      	add	r3, r2
 800047c:	3b58      	subs	r3, #88	; 0x58
 800047e:	22ff      	movs	r2, #255	; 0xff
 8000480:	701a      	strb	r2, [r3, #0]
	  for (int b = 0; b < 3; b++)
 8000482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000484:	3301      	adds	r3, #1
 8000486:	65bb      	str	r3, [r7, #88]	; 0x58
 8000488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800048a:	2b02      	cmp	r3, #2
 800048c:	dded      	ble.n	800046a <StartEncoder+0x14e>
	  }


	  data = 0b11000000; // command 3, set address to 0
 800048e:	23c0      	movs	r3, #192	; 0xc0
 8000490:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000498:	4853      	ldr	r0, [pc, #332]	; (80005e8 <StartEncoder+0x2cc>)
 800049a:	f002 fdd0 	bl	800303e <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800049e:	f107 010f 	add.w	r1, r7, #15
 80004a2:	f04f 33ff 	mov.w	r3, #4294967295
 80004a6:	2201      	movs	r2, #1
 80004a8:	4850      	ldr	r0, [pc, #320]	; (80005ec <StartEncoder+0x2d0>)
 80004aa:	f005 f867 	bl	800557c <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80004ae:	f107 0110 	add.w	r1, r7, #16
 80004b2:	f04f 33ff 	mov.w	r3, #4294967295
 80004b6:	2221      	movs	r2, #33	; 0x21
 80004b8:	484c      	ldr	r0, [pc, #304]	; (80005ec <StartEncoder+0x2d0>)
 80004ba:	f005 f85f 	bl	800557c <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80004be:	2201      	movs	r2, #1
 80004c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c4:	4848      	ldr	r0, [pc, #288]	; (80005e8 <StartEncoder+0x2cc>)
 80004c6:	f002 fdba 	bl	800303e <HAL_GPIO_WritePin>
	  osDelay(150);
 80004ca:	2096      	movs	r0, #150	; 0x96
 80004cc:	f009 ffea 	bl	800a4a4 <osDelay>
  for (int i = 0; i < 11; i++)
 80004d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80004d2:	3301      	adds	r3, #1
 80004d4:	663b      	str	r3, [r7, #96]	; 0x60
 80004d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80004d8:	2b0a      	cmp	r3, #10
 80004da:	ddb4      	ble.n	8000446 <StartEncoder+0x12a>
  }



  for (int j = 17; j >= 0; j--)
 80004dc:	2311      	movs	r3, #17
 80004de:	657b      	str	r3, [r7, #84]	; 0x54
 80004e0:	e05e      	b.n	80005a0 <StartEncoder+0x284>
  {
	  for (int a = 0; a < sizeof(vfd.arr1); a++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	653b      	str	r3, [r7, #80]	; 0x50
 80004e6:	e008      	b.n	80004fa <StartEncoder+0x1de>
		  vfd.arr1[a] = 0;
 80004e8:	f107 0210 	add.w	r2, r7, #16
 80004ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004ee:	4413      	add	r3, r2
 80004f0:	2200      	movs	r2, #0
 80004f2:	701a      	strb	r2, [r3, #0]
	  for (int a = 0; a < sizeof(vfd.arr1); a++)
 80004f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004f6:	3301      	adds	r3, #1
 80004f8:	653b      	str	r3, [r7, #80]	; 0x50
 80004fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004fc:	2b20      	cmp	r3, #32
 80004fe:	d9f3      	bls.n	80004e8 <StartEncoder+0x1cc>
	  for (int i = 0; i < 11; i++)
 8000500:	2300      	movs	r3, #0
 8000502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000504:	e025      	b.n	8000552 <StartEncoder+0x236>
	  {
		  for (int b = 0; b < 3; b++)
 8000506:	2300      	movs	r3, #0
 8000508:	64bb      	str	r3, [r7, #72]	; 0x48
 800050a:	e01c      	b.n	8000546 <StartEncoder+0x22a>
		  {
			  vfd.arr2[i][b] = j ? ((1<<(j-1))>>(b<<3))&0xFF : 0x00;
 800050c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800050e:	2b00      	cmp	r3, #0
 8000510:	d009      	beq.n	8000526 <StartEncoder+0x20a>
 8000512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000514:	3b01      	subs	r3, #1
 8000516:	2201      	movs	r2, #1
 8000518:	409a      	lsls	r2, r3
 800051a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	fa42 f303 	asr.w	r3, r2, r3
 8000522:	b2d9      	uxtb	r1, r3
 8000524:	e000      	b.n	8000528 <StartEncoder+0x20c>
 8000526:	2100      	movs	r1, #0
 8000528:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800052a:	4613      	mov	r3, r2
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	4413      	add	r3, r2
 8000530:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000534:	441a      	add	r2, r3
 8000536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000538:	4413      	add	r3, r2
 800053a:	3b58      	subs	r3, #88	; 0x58
 800053c:	460a      	mov	r2, r1
 800053e:	701a      	strb	r2, [r3, #0]
		  for (int b = 0; b < 3; b++)
 8000540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000542:	3301      	adds	r3, #1
 8000544:	64bb      	str	r3, [r7, #72]	; 0x48
 8000546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000548:	2b02      	cmp	r3, #2
 800054a:	dddf      	ble.n	800050c <StartEncoder+0x1f0>
	  for (int i = 0; i < 11; i++)
 800054c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800054e:	3301      	adds	r3, #1
 8000550:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000554:	2b0a      	cmp	r3, #10
 8000556:	ddd6      	ble.n	8000506 <StartEncoder+0x1ea>
		  }


	  }
	  data = 0b11000000; // command 3, set address to 0
 8000558:	23c0      	movs	r3, #192	; 0xc0
 800055a:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000562:	4821      	ldr	r0, [pc, #132]	; (80005e8 <StartEncoder+0x2cc>)
 8000564:	f002 fd6b 	bl	800303e <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000568:	f107 010f 	add.w	r1, r7, #15
 800056c:	f04f 33ff 	mov.w	r3, #4294967295
 8000570:	2201      	movs	r2, #1
 8000572:	481e      	ldr	r0, [pc, #120]	; (80005ec <StartEncoder+0x2d0>)
 8000574:	f005 f802 	bl	800557c <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000578:	f107 0110 	add.w	r1, r7, #16
 800057c:	f04f 33ff 	mov.w	r3, #4294967295
 8000580:	2221      	movs	r2, #33	; 0x21
 8000582:	481a      	ldr	r0, [pc, #104]	; (80005ec <StartEncoder+0x2d0>)
 8000584:	f004 fffa 	bl	800557c <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058e:	4816      	ldr	r0, [pc, #88]	; (80005e8 <StartEncoder+0x2cc>)
 8000590:	f002 fd55 	bl	800303e <HAL_GPIO_WritePin>
	  osDelay(200);
 8000594:	20c8      	movs	r0, #200	; 0xc8
 8000596:	f009 ff85 	bl	800a4a4 <osDelay>
  for (int j = 17; j >= 0; j--)
 800059a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800059c:	3b01      	subs	r3, #1
 800059e:	657b      	str	r3, [r7, #84]	; 0x54
 80005a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	da9d      	bge.n	80004e2 <StartEncoder+0x1c6>
  }

  osDelay(500);
 80005a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005aa:	f009 ff7b 	bl	800a4a4 <osDelay>

  for (int a = 0; a < sizeof(vfd.arr1); a++)
 80005ae:	2300      	movs	r3, #0
 80005b0:	647b      	str	r3, [r7, #68]	; 0x44
 80005b2:	e008      	b.n	80005c6 <StartEncoder+0x2aa>
	  vfd.arr1[a] = 0;
 80005b4:	f107 0210 	add.w	r2, r7, #16
 80005b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005ba:	4413      	add	r3, r2
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 80005c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005c2:	3301      	adds	r3, #1
 80005c4:	647b      	str	r3, [r7, #68]	; 0x44
 80005c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005c8:	2b20      	cmp	r3, #32
 80005ca:	d9f3      	bls.n	80005b4 <StartEncoder+0x298>

  for (int j = 0; j < 17; j++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
 80005d0:	e05d      	b.n	800068e <StartEncoder+0x372>
  {
	  uint32_t temp = 1<<j;
 80005d2:	2201      	movs	r2, #1
 80005d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005d6:	fa02 f303 	lsl.w	r3, r2, r3
 80005da:	637b      	str	r3, [r7, #52]	; 0x34
	  for (int i = 0; i < 11; i++)
 80005dc:	2300      	movs	r3, #0
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005e0:	e02e      	b.n	8000640 <StartEncoder+0x324>
	  {
		  for (int b = 0; b < 3; b++)
 80005e2:	2300      	movs	r3, #0
 80005e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80005e6:	e025      	b.n	8000634 <StartEncoder+0x318>
 80005e8:	40010c00 	.word	0x40010c00
 80005ec:	20002570 	.word	0x20002570
		  {
			  vfd.arr2[i][b] |= (temp>>(b<<3))&0xFF;
 80005f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80005f2:	4613      	mov	r3, r2
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	4413      	add	r3, r2
 80005f8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80005fc:	441a      	add	r2, r3
 80005fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000600:	4413      	add	r3, r2
 8000602:	3b58      	subs	r3, #88	; 0x58
 8000604:	781a      	ldrb	r2, [r3, #0]
 8000606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000608:	00db      	lsls	r3, r3, #3
 800060a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800060c:	fa21 f303 	lsr.w	r3, r1, r3
 8000610:	b2db      	uxtb	r3, r3
 8000612:	4313      	orrs	r3, r2
 8000614:	b2d9      	uxtb	r1, r3
 8000616:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000618:	4613      	mov	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4413      	add	r3, r2
 800061e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000622:	441a      	add	r2, r3
 8000624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000626:	4413      	add	r3, r2
 8000628:	3b58      	subs	r3, #88	; 0x58
 800062a:	460a      	mov	r2, r1
 800062c:	701a      	strb	r2, [r3, #0]
		  for (int b = 0; b < 3; b++)
 800062e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000630:	3301      	adds	r3, #1
 8000632:	63bb      	str	r3, [r7, #56]	; 0x38
 8000634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000636:	2b02      	cmp	r3, #2
 8000638:	ddda      	ble.n	80005f0 <StartEncoder+0x2d4>
	  for (int i = 0; i < 11; i++)
 800063a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800063c:	3301      	adds	r3, #1
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000642:	2b0a      	cmp	r3, #10
 8000644:	ddcd      	ble.n	80005e2 <StartEncoder+0x2c6>
		  }


	  }
	  data = 0b11000000; // command 3, set address to 0
 8000646:	23c0      	movs	r3, #192	; 0xc0
 8000648:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000650:	4856      	ldr	r0, [pc, #344]	; (80007ac <StartEncoder+0x490>)
 8000652:	f002 fcf4 	bl	800303e <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000656:	f107 010f 	add.w	r1, r7, #15
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
 800065e:	2201      	movs	r2, #1
 8000660:	4853      	ldr	r0, [pc, #332]	; (80007b0 <StartEncoder+0x494>)
 8000662:	f004 ff8b 	bl	800557c <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000666:	f107 0110 	add.w	r1, r7, #16
 800066a:	f04f 33ff 	mov.w	r3, #4294967295
 800066e:	2221      	movs	r2, #33	; 0x21
 8000670:	484f      	ldr	r0, [pc, #316]	; (80007b0 <StartEncoder+0x494>)
 8000672:	f004 ff83 	bl	800557c <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000676:	2201      	movs	r2, #1
 8000678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067c:	484b      	ldr	r0, [pc, #300]	; (80007ac <StartEncoder+0x490>)
 800067e:	f002 fcde 	bl	800303e <HAL_GPIO_WritePin>
	  osDelay(150);
 8000682:	2096      	movs	r0, #150	; 0x96
 8000684:	f009 ff0e 	bl	800a4a4 <osDelay>
  for (int j = 0; j < 17; j++)
 8000688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800068a:	3301      	adds	r3, #1
 800068c:	643b      	str	r3, [r7, #64]	; 0x40
 800068e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000690:	2b10      	cmp	r3, #16
 8000692:	dd9e      	ble.n	80005d2 <StartEncoder+0x2b6>

  /* Infinite loop */
  for(;;)
  {

	  if (HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin))
 8000694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000698:	4844      	ldr	r0, [pc, #272]	; (80007ac <StartEncoder+0x490>)
 800069a:	f002 fcb9 	bl	8003010 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d003      	beq.n	80006ac <StartEncoder+0x390>
	  {
		  released = true;
 80006a4:	4b43      	ldr	r3, [pc, #268]	; (80007b4 <StartEncoder+0x498>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	e015      	b.n	80006d8 <StartEncoder+0x3bc>
	  } else if (released)
 80006ac:	4b41      	ldr	r3, [pc, #260]	; (80007b4 <StartEncoder+0x498>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d011      	beq.n	80006d8 <StartEncoder+0x3bc>
	  {
		  released = false;
 80006b4:	4b3f      	ldr	r3, [pc, #252]	; (80007b4 <StartEncoder+0x498>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
		  invert = !invert;
 80006ba:	4b3f      	ldr	r3, [pc, #252]	; (80007b8 <StartEncoder+0x49c>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	bf14      	ite	ne
 80006c2:	2301      	movne	r3, #1
 80006c4:	2300      	moveq	r3, #0
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	f083 0301 	eor.w	r3, r3, #1
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b38      	ldr	r3, [pc, #224]	; (80007b8 <StartEncoder+0x49c>)
 80006d6:	701a      	strb	r2, [r3, #0]
	  }

	  data = 0b01000001; // command 2, write to LED port
 80006d8:	2341      	movs	r3, #65	; 0x41
 80006da:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e2:	4832      	ldr	r0, [pc, #200]	; (80007ac <StartEncoder+0x490>)
 80006e4:	f002 fcab 	bl	800303e <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80006e8:	f107 010f 	add.w	r1, r7, #15
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	2201      	movs	r2, #1
 80006f2:	482f      	ldr	r0, [pc, #188]	; (80007b0 <StartEncoder+0x494>)
 80006f4:	f004 ff42 	bl	800557c <HAL_SPI_Transmit>
	  osDelay(10);
 80006f8:	200a      	movs	r0, #10
 80006fa:	f009 fed3 	bl	800a4a4 <osDelay>

	  data = ~(1<<((encoder_value >> 2)&0b11));
 80006fe:	4b2f      	ldr	r3, [pc, #188]	; (80007bc <StartEncoder+0x4a0>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	089b      	lsrs	r3, r3, #2
 8000704:	b29b      	uxth	r3, r3
 8000706:	f003 0303 	and.w	r3, r3, #3
 800070a:	2201      	movs	r2, #1
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	b2db      	uxtb	r3, r3
 8000712:	43db      	mvns	r3, r3
 8000714:	b2db      	uxtb	r3, r3
 8000716:	73fb      	strb	r3, [r7, #15]
//	  if (invert)
//		  data =~data;
	  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, invert);
 8000718:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <StartEncoder+0x49c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	2120      	movs	r1, #32
 8000720:	4822      	ldr	r0, [pc, #136]	; (80007ac <StartEncoder+0x490>)
 8000722:	f002 fc8c 	bl	800303e <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000726:	f107 010f 	add.w	r1, r7, #15
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	2201      	movs	r2, #1
 8000730:	481f      	ldr	r0, [pc, #124]	; (80007b0 <StartEncoder+0x494>)
 8000732:	f004 ff23 	bl	800557c <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073c:	481b      	ldr	r0, [pc, #108]	; (80007ac <StartEncoder+0x490>)
 800073e:	f002 fc7e 	bl	800303e <HAL_GPIO_WritePin>

	  osDelay(10);
 8000742:	200a      	movs	r0, #10
 8000744:	f009 feae 	bl	800a4a4 <osDelay>
	  data = 0b10000000; // command 4
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	73fb      	strb	r3, [r7, #15]
	  data |= invert<<3; // enable/disable display
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <StartEncoder+0x49c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	b25a      	sxtb	r2, r3
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	b25b      	sxtb	r3, r3
 8000758:	4313      	orrs	r3, r2
 800075a:	b25b      	sxtb	r3, r3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	73fb      	strb	r3, [r7, #15]
	  data |= (encoder_value >> 2)&0b111; // set brightness
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <StartEncoder+0x4a0>)
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	089b      	lsrs	r3, r3, #2
 8000766:	b29b      	uxth	r3, r3
 8000768:	b25b      	sxtb	r3, r3
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	b25a      	sxtb	r2, r3
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	b25b      	sxtb	r3, r3
 8000774:	4313      	orrs	r3, r2
 8000776:	b25b      	sxtb	r3, r3
 8000778:	b2db      	uxtb	r3, r3
 800077a:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000782:	480a      	ldr	r0, [pc, #40]	; (80007ac <StartEncoder+0x490>)
 8000784:	f002 fc5b 	bl	800303e <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000788:	f107 010f 	add.w	r1, r7, #15
 800078c:	f04f 33ff 	mov.w	r3, #4294967295
 8000790:	2201      	movs	r2, #1
 8000792:	4807      	ldr	r0, [pc, #28]	; (80007b0 <StartEncoder+0x494>)
 8000794:	f004 fef2 	bl	800557c <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079e:	4803      	ldr	r0, [pc, #12]	; (80007ac <StartEncoder+0x490>)
 80007a0:	f002 fc4d 	bl	800303e <HAL_GPIO_WritePin>
	  osDelay(10);
 80007a4:	200a      	movs	r0, #10
 80007a6:	f009 fe7d 	bl	800a4a4 <osDelay>
	  if (HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin))
 80007aa:	e773      	b.n	8000694 <StartEncoder+0x378>
 80007ac:	40010c00 	.word	0x40010c00
 80007b0:	20002570 	.word	0x20002570
 80007b4:	20000000 	.word	0x20000000
 80007b8:	20000001 	.word	0x20000001
 80007bc:	200001ac 	.word	0x200001ac

080007c0 <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	if (huart != &huart2)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <HAL_UART_RxCpltCallback+0x44>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d115      	bne.n	80007fc <HAL_UART_RxCpltCallback+0x3c>
		return;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]


   /* Notify the task that the transmission is complete by setting the TX_BIT
   in the task's notification value. */
	vTaskNotifyGiveFromISR( UARTtaskHandle,
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <HAL_UART_RxCpltCallback+0x48>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f107 020c 	add.w	r2, r7, #12
 80007dc:	4611      	mov	r1, r2
 80007de:	4618      	mov	r0, r3
 80007e0:	f00b fcba 	bl	800c158 <vTaskNotifyGiveFromISR>

   /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context switch
   should be performed to ensure the interrupt returns directly to the highest
   priority task.  The macro used for this purpose is dependent on the port in
   use and may be called portEND_SWITCHING_ISR(). */
   portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d009      	beq.n	80007fe <HAL_UART_RxCpltCallback+0x3e>
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <HAL_UART_RxCpltCallback+0x4c>)
 80007ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	f3bf 8f4f 	dsb	sy
 80007f6:	f3bf 8f6f 	isb	sy
 80007fa:	e000      	b.n	80007fe <HAL_UART_RxCpltCallback+0x3e>
		return;
 80007fc:	bf00      	nop
}
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20002610 	.word	0x20002610
 8000808:	20002480 	.word	0x20002480
 800080c:	e000ed04 	.word	0xe000ed04

08000810 <process_encoder>:

void process_encoder(void)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
	static uint8_t old;
	uint8_t new;
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800081a:	483c      	ldr	r0, [pc, #240]	; (800090c <process_encoder+0xfc>)
 800081c:	f002 fbf8 	bl	8003010 <HAL_GPIO_ReadPin>
 8000820:	4603      	mov	r3, r0
 8000822:	461c      	mov	r4, r3
		   0b10*HAL_GPIO_ReadPin(enc_b_GPIO_Port, enc_b_Pin));
 8000824:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000828:	4838      	ldr	r0, [pc, #224]	; (800090c <process_encoder+0xfc>)
 800082a:	f002 fbf1 	bl	8003010 <HAL_GPIO_ReadPin>
 800082e:	4603      	mov	r3, r0
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	b2db      	uxtb	r3, r3
 8000834:	4423      	add	r3, r4
 8000836:	71fb      	strb	r3, [r7, #7]
	switch(old)
 8000838:	4b35      	ldr	r3, [pc, #212]	; (8000910 <process_encoder+0x100>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b03      	cmp	r3, #3
 800083e:	d85e      	bhi.n	80008fe <process_encoder+0xee>
 8000840:	a201      	add	r2, pc, #4	; (adr r2, 8000848 <process_encoder+0x38>)
 8000842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000846:	bf00      	nop
 8000848:	0800087f 	.word	0x0800087f
 800084c:	080008a5 	.word	0x080008a5
 8000850:	08000859 	.word	0x08000859
 8000854:	080008cb 	.word	0x080008cb
		{
		case 2:
			{
			if(new == 3) encoder_value++;
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	2b03      	cmp	r3, #3
 800085c:	d105      	bne.n	800086a <process_encoder+0x5a>
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <process_encoder+0x104>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	3301      	adds	r3, #1
 8000864:	b29a      	uxth	r2, r3
 8000866:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <process_encoder+0x104>)
 8000868:	801a      	strh	r2, [r3, #0]
			if(new == 0) encoder_value--;
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d13f      	bne.n	80008f0 <process_encoder+0xe0>
 8000870:	4b28      	ldr	r3, [pc, #160]	; (8000914 <process_encoder+0x104>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	3b01      	subs	r3, #1
 8000876:	b29a      	uxth	r2, r3
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <process_encoder+0x104>)
 800087a:	801a      	strh	r2, [r3, #0]
			break;
 800087c:	e038      	b.n	80008f0 <process_encoder+0xe0>
			}

		case 0:
			{
			if(new == 2) encoder_value++;
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b02      	cmp	r3, #2
 8000882:	d105      	bne.n	8000890 <process_encoder+0x80>
 8000884:	4b23      	ldr	r3, [pc, #140]	; (8000914 <process_encoder+0x104>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	b29a      	uxth	r2, r3
 800088c:	4b21      	ldr	r3, [pc, #132]	; (8000914 <process_encoder+0x104>)
 800088e:	801a      	strh	r2, [r3, #0]
			if(new == 1) encoder_value--;
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d12e      	bne.n	80008f4 <process_encoder+0xe4>
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <process_encoder+0x104>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	3b01      	subs	r3, #1
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <process_encoder+0x104>)
 80008a0:	801a      	strh	r2, [r3, #0]
			break;
 80008a2:	e027      	b.n	80008f4 <process_encoder+0xe4>
			}
		case 1:
			{
			if(new == 0) encoder_value++;
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d105      	bne.n	80008b6 <process_encoder+0xa6>
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <process_encoder+0x104>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	3301      	adds	r3, #1
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <process_encoder+0x104>)
 80008b4:	801a      	strh	r2, [r3, #0]
			if(new == 3) encoder_value--;
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d11d      	bne.n	80008f8 <process_encoder+0xe8>
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <process_encoder+0x104>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <process_encoder+0x104>)
 80008c6:	801a      	strh	r2, [r3, #0]
			break;
 80008c8:	e016      	b.n	80008f8 <process_encoder+0xe8>
			}
		case 3:
			{
			if(new == 1) encoder_value++;
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d105      	bne.n	80008dc <process_encoder+0xcc>
 80008d0:	4b10      	ldr	r3, [pc, #64]	; (8000914 <process_encoder+0x104>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <process_encoder+0x104>)
 80008da:	801a      	strh	r2, [r3, #0]
			if(new == 2) encoder_value--;
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d10c      	bne.n	80008fc <process_encoder+0xec>
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <process_encoder+0x104>)
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <process_encoder+0x104>)
 80008ec:	801a      	strh	r2, [r3, #0]
			break;
 80008ee:	e005      	b.n	80008fc <process_encoder+0xec>
			break;
 80008f0:	bf00      	nop
 80008f2:	e004      	b.n	80008fe <process_encoder+0xee>
			break;
 80008f4:	bf00      	nop
 80008f6:	e002      	b.n	80008fe <process_encoder+0xee>
			break;
 80008f8:	bf00      	nop
 80008fa:	e000      	b.n	80008fe <process_encoder+0xee>
			break;
 80008fc:	bf00      	nop
			}
		}
	old = new;
 80008fe:	4a04      	ldr	r2, [pc, #16]	; (8000910 <process_encoder+0x100>)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	7013      	strb	r3, [r2, #0]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bd90      	pop	{r4, r7, pc}
 800090c:	40010c00 	.word	0x40010c00
 8000910:	200001ae 	.word	0x200001ae
 8000914:	200001ac 	.word	0x200001ac

08000918 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092c:	4b49      	ldr	r3, [pc, #292]	; (8000a54 <MX_GPIO_Init+0x13c>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a48      	ldr	r2, [pc, #288]	; (8000a54 <MX_GPIO_Init+0x13c>)
 8000932:	f043 0310 	orr.w	r3, r3, #16
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b46      	ldr	r3, [pc, #280]	; (8000a54 <MX_GPIO_Init+0x13c>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0310 	and.w	r3, r3, #16
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000944:	4b43      	ldr	r3, [pc, #268]	; (8000a54 <MX_GPIO_Init+0x13c>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a42      	ldr	r2, [pc, #264]	; (8000a54 <MX_GPIO_Init+0x13c>)
 800094a:	f043 0320 	orr.w	r3, r3, #32
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b40      	ldr	r3, [pc, #256]	; (8000a54 <MX_GPIO_Init+0x13c>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0320 	and.w	r3, r3, #32
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b3d      	ldr	r3, [pc, #244]	; (8000a54 <MX_GPIO_Init+0x13c>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a3c      	ldr	r2, [pc, #240]	; (8000a54 <MX_GPIO_Init+0x13c>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b3a      	ldr	r3, [pc, #232]	; (8000a54 <MX_GPIO_Init+0x13c>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	4b37      	ldr	r3, [pc, #220]	; (8000a54 <MX_GPIO_Init+0x13c>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a36      	ldr	r2, [pc, #216]	; (8000a54 <MX_GPIO_Init+0x13c>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b34      	ldr	r3, [pc, #208]	; (8000a54 <MX_GPIO_Init+0x13c>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0308 	and.w	r3, r3, #8
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000992:	4831      	ldr	r0, [pc, #196]	; (8000a58 <MX_GPIO_Init+0x140>)
 8000994:	f002 fb53 	bl	800303e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 5189 	mov.w	r1, #4384	; 0x1120
 800099e:	482f      	ldr	r0, [pc, #188]	; (8000a5c <MX_GPIO_Init+0x144>)
 80009a0:	f002 fb4d 	bl	800303e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009aa:	482d      	ldr	r0, [pc, #180]	; (8000a60 <MX_GPIO_Init+0x148>)
 80009ac:	f002 fb47 	bl	800303e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80009b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2302      	movs	r3, #2
 80009c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 0310 	add.w	r3, r7, #16
 80009c6:	4619      	mov	r1, r3
 80009c8:	4823      	ldr	r0, [pc, #140]	; (8000a58 <MX_GPIO_Init+0x140>)
 80009ca:	f002 f99d 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ce:	2301      	movs	r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <MX_GPIO_Init+0x14c>)
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	4619      	mov	r1, r3
 80009e0:	481f      	ldr	r0, [pc, #124]	; (8000a60 <MX_GPIO_Init+0x148>)
 80009e2:	f002 f991 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin|enc_s_Pin;
 80009e6:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80009ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	4619      	mov	r1, r3
 80009fa:	4818      	ldr	r0, [pc, #96]	; (8000a5c <MX_GPIO_Init+0x144>)
 80009fc:	f002 f984 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8000a00:	f44f 5389 	mov.w	r3, #4384	; 0x1120
 8000a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	4619      	mov	r1, r3
 8000a18:	4810      	ldr	r0, [pc, #64]	; (8000a5c <MX_GPIO_Init+0x144>)
 8000a1a:	f002 f975 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	4619      	mov	r1, r3
 8000a36:	480a      	ldr	r0, [pc, #40]	; (8000a60 <MX_GPIO_Init+0x148>)
 8000a38:	f002 f966 	bl	8002d08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2105      	movs	r1, #5
 8000a40:	2006      	movs	r0, #6
 8000a42:	f002 f886 	bl	8002b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a46:	2006      	movs	r0, #6
 8000a48:	f002 f89f 	bl	8002b8a <HAL_NVIC_EnableIRQ>

}
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40011000 	.word	0x40011000
 8000a5c:	40010c00 	.word	0x40010c00
 8000a60:	40010800 	.word	0x40010800
 8000a64:	10110000 	.word	0x10110000

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f001 ff8a 	bl	8002984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 f80d 	bl	8000a8e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a74:	f7ff ff50 	bl	8000918 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000a78:	f001 fd92 	bl	80025a0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000a7c:	f001 fee0 	bl	8002840 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000a80:	f009 fc00 	bl	800a284 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000a84:	f7ff fb76 	bl	8000174 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000a88:	f009 fc2e 	bl	800a2e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <main+0x24>

08000a8e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b094      	sub	sp, #80	; 0x50
 8000a92:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a98:	2228      	movs	r2, #40	; 0x28
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f00d f82b 	bl	800daf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000ac8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000acc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ad6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ada:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000adc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f003 ffc2 	bl	8004a70 <HAL_RCC_OscConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000af2:	f000 f839 	bl	8000b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af6:	230f      	movs	r3, #15
 8000af8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b06:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2102      	movs	r1, #2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f004 fa2c 	bl	8004f70 <HAL_RCC_ClockConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b1e:	f000 f823 	bl	8000b68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b22:	2310      	movs	r3, #16
 8000b24:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f004 fbeb 	bl	8005308 <HAL_RCCEx_PeriphCLKConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b38:	f000 f816 	bl	8000b68 <Error_Handler>
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3750      	adds	r7, #80	; 0x50
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d101      	bne.n	8000b5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b56:	f001 ff2b 	bl	80029b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40012c00 	.word	0x40012c00

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>

08000b72 <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b085      	sub	sp, #20
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	5c8a      	ldrb	r2, [r1, r2]
 8000b86:	4413      	add	r3, r2
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b3f      	cmp	r3, #63	; 0x3f
 8000b90:	dd02      	ble.n	8000b98 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	3b40      	subs	r3, #64	; 0x40
 8000b96:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	5cd3      	ldrb	r3, [r2, r3]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d101      	bne.n	8000bc2 <hist_is_space_for_new+0x1a>
		return true;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e01e      	b.n	8000c00 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	db0c      	blt.n	8000be8 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4413      	add	r3, r2
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	da0c      	bge.n	8000bfe <hist_is_space_for_new+0x56>
			return true;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e00b      	b.n	8000c00 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	683a      	ldr	r2, [r7, #0]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	da01      	bge.n	8000bfe <hist_is_space_for_new+0x56>
			return true;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e000      	b.n	8000c00 <hist_is_space_for_new+0x58>
	}
	return false;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr

08000c0a <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	60f8      	str	r0, [r7, #12]
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b3e      	cmp	r3, #62	; 0x3e
 8000c1a:	dc61      	bgt.n	8000ce0 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8000c1c:	e002      	b.n	8000c24 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f7ff ffa7 	bl	8000b72 <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	f7ff ffbe 	bl	8000ba8 <hist_is_space_for_new>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0f5      	beq.n	8000c1e <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	5cd3      	ldrb	r3, [r2, r3]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d105      	bne.n	8000c4a <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	b2d1      	uxtb	r1, r2
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	da0a      	bge.n	8000c6e <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	3301      	adds	r3, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f00c ff1e 	bl	800daa8 <memcpy>
 8000c6c:	e018      	b.n	8000ca0 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000c76:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	3301      	adds	r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	68b9      	ldr	r1, [r7, #8]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f00c ff0e 	bl	800daa8 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8000c8c:	68f8      	ldr	r0, [r7, #12]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	68ba      	ldr	r2, [r7, #8]
 8000c92:	18d1      	adds	r1, r2, r3
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f00c ff04 	bl	800daa8 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	b2d1      	uxtb	r1, r2
 8000ca8:	68fa      	ldr	r2, [r7, #12]
 8000caa:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	1c5a      	adds	r2, r3, #1
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	2b3f      	cmp	r3, #63	; 0x3f
 8000cc0:	dd05      	ble.n	8000cce <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	649a      	str	r2, [r3, #72]	; 0x48
 8000cde:	e000      	b.n	8000ce2 <hist_save_line+0xd8>
		return;
 8000ce0:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	; 0x30
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 8000cfe:	e010      	b.n	8000d22 <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d04:	4413      	add	r3, r2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d0c:	4413      	add	r3, r2
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8000d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d12:	2b3f      	cmp	r3, #63	; 0x3f
 8000d14:	dd02      	ble.n	8000d1c <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 8000d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d18:	3b40      	subs	r3, #64	; 0x40
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8000d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d1e:	3301      	adds	r3, #1
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d26:	4413      	add	r3, r2
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1e8      	bne.n	8000d00 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d176      	bne.n	8000e22 <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f2c0 80d6 	blt.w	8000eec <hist_restore_line+0x204>
			int header = pThis->begin;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8000d4a:	e010      	b.n	8000d6e <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	4413      	add	r3, r2
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d58:	4413      	add	r3, r2
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5e:	2b3f      	cmp	r3, #63	; 0x3f
 8000d60:	dd02      	ble.n	8000d68 <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	3b40      	subs	r3, #64	; 0x40
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 8000d68:	6a3b      	ldr	r3, [r7, #32]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	4413      	add	r3, r2
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d007      	beq.n	8000d8a <hist_restore_line+0xa2>
 8000d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d7c:	6a3b      	ldr	r3, [r7, #32]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	1e5a      	subs	r2, r3, #1
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d1e0      	bne.n	8000d4c <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	4413      	add	r3, r2
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 80aa 	beq.w	8000eec <hist_restore_line+0x204>
					pThis->cur++;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d9c:	1c5a      	adds	r2, r3, #1
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	4413      	add	r3, r2
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	4413      	add	r3, r2
 8000db0:	2b3f      	cmp	r3, #63	; 0x3f
 8000db2:	dc11      	bgt.n	8000dd8 <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 8000db4:	2233      	movs	r2, #51	; 0x33
 8000db6:	2100      	movs	r1, #0
 8000db8:	68b8      	ldr	r0, [r7, #8]
 8000dba:	f00c fe9d 	bl	800daf8 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	18d1      	adds	r1, r2, r3
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	4413      	add	r3, r2
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68b8      	ldr	r0, [r7, #8]
 8000dd2:	f00c fe69 	bl	800daa8 <memcpy>
 8000dd6:	e01f      	b.n	8000e18 <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 8000dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dda:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000dde:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 8000de0:	2233      	movs	r2, #51	; 0x33
 8000de2:	2100      	movs	r1, #0
 8000de4:	68b8      	ldr	r0, [r7, #8]
 8000de6:	f00c fe87 	bl	800daf8 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dee:	3301      	adds	r3, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4619      	mov	r1, r3
 8000df6:	68b8      	ldr	r0, [r7, #8]
 8000df8:	f00c fe56 	bl	800daa8 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	18d0      	adds	r0, r2, r3
 8000e02:	68f9      	ldr	r1, [r7, #12]
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	4413      	add	r3, r2
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	461a      	mov	r2, r3
 8000e14:	f00c fe48 	bl	800daa8 <memcpy>
				}
				return pThis->ring_buf[header];
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	4413      	add	r3, r2
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	e066      	b.n	8000ef0 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	dd5e      	ble.n	8000ee8 <hist_restore_line+0x200>
				pThis->cur--;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e2e:	1e5a      	subs	r2, r3, #1
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	61fb      	str	r3, [r7, #28]
			int j = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8000e3e:	e010      	b.n	8000e62 <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	4413      	add	r3, r2
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	2b3f      	cmp	r3, #63	; 0x3f
 8000e54:	dd02      	ble.n	8000e5c <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b40      	subs	r3, #64	; 0x40
 8000e5a:	61fb      	str	r3, [r7, #28]
				j++;
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	4413      	add	r3, r2
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d006      	beq.n	8000e7c <hist_restore_line+0x194>
 8000e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	1ad2      	subs	r2, r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d1e1      	bne.n	8000e40 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	4413      	add	r3, r2
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	4413      	add	r3, r2
 8000e8a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e8c:	dc0c      	bgt.n	8000ea8 <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	3301      	adds	r3, #1
 8000e94:	18d1      	adds	r1, r2, r3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68b8      	ldr	r0, [r7, #8]
 8000ea2:	f00c fe01 	bl	800daa8 <memcpy>
 8000ea6:	e01a      	b.n	8000ede <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000eae:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	4413      	add	r3, r2
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	68b8      	ldr	r0, [r7, #8]
 8000ebe:	f00c fdf3 	bl	800daa8 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	18d0      	adds	r0, r2, r3
 8000ec8:	68f9      	ldr	r1, [r7, #12]
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	4413      	add	r3, r2
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	f00c fde5 	bl	800daa8 <memcpy>
			}
			return pThis->ring_buf[header];
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	e003      	b.n	8000ef0 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	e001      	b.n	8000ef0 <hist_restore_line+0x208>
		}
	}
	return -1;
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3730      	adds	r7, #48	; 0x30
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
	int ind = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8000f0c:	e002      	b.n	8000f14 <split+0x1c>
			ind++;
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	3301      	adds	r3, #1
 8000f12:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	4413      	add	r3, r2
 8000f1a:	3354      	adds	r3, #84	; 0x54
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d103      	bne.n	8000f2a <split+0x32>
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	dbf1      	blt.n	8000f0e <split+0x16>
		}
		if (!(ind < limit)) return i;
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	db01      	blt.n	8000f36 <split+0x3e>
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	e024      	b.n	8000f80 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	1c58      	adds	r0, r3, #1
 8000f42:	6178      	str	r0, [r7, #20]
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	4403      	add	r3, r0
 8000f4a:	440a      	add	r2, r1
 8000f4c:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	dd05      	ble.n	8000f60 <split+0x68>
			return -1;
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	e012      	b.n	8000f80 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4413      	add	r3, r2
 8000f66:	3354      	adds	r3, #84	; 0x54
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <split+0x7e>
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	dbf1      	blt.n	8000f5a <split+0x62>
		}
		if (!(ind < limit)) return i;
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	dbca      	blt.n	8000f14 <split+0x1c>
 8000f7e:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	371c      	adds	r7, #28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr

08000f8a <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4798      	blx	r3
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000fb6:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <terminal_backspace+0x1c>)
 8000fb8:	4798      	blx	r3
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	0800dba8 	.word	0x0800dba8

08000fc8 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <terminal_newline+0x1c>)
 8000fd8:	4798      	blx	r3
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	0800dbb0 	.word	0x0800dbb0

08000fe8 <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b087      	sub	sp, #28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001004:	d235      	bcs.n	8001072 <u16bit_to_str+0x8a>
		while (nmb > 0) {
 8001006:	e01a      	b.n	800103e <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <u16bit_to_str+0x9c>)
 800100c:	fba3 2301 	umull	r2, r3, r3, r1
 8001010:	08da      	lsrs	r2, r3, #3
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	1aca      	subs	r2, r1, r3
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	1c59      	adds	r1, r3, #1
 8001022:	6179      	str	r1, [r7, #20]
 8001024:	3230      	adds	r2, #48	; 0x30
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	f107 0118 	add.w	r1, r7, #24
 800102c:	440b      	add	r3, r1
 800102e:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a13      	ldr	r2, [pc, #76]	; (8001084 <u16bit_to_str+0x9c>)
 8001036:	fba2 2303 	umull	r2, r3, r2, r3
 800103a:	08db      	lsrs	r3, r3, #3
 800103c:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1e1      	bne.n	8001008 <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	e00f      	b.n	800106a <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	1e5a      	subs	r2, r3, #1
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	1c59      	adds	r1, r3, #1
 8001056:	6039      	str	r1, [r7, #0]
 8001058:	f107 0118 	add.w	r1, r7, #24
 800105c:	440a      	add	r2, r1
 800105e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001062:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	3301      	adds	r3, #1
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	429a      	cmp	r2, r3
 8001070:	dbeb      	blt.n	800104a <u16bit_to_str+0x62>
	}
	*buf = '\0';
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
	return buf;
 8001078:	683b      	ldr	r3, [r7, #0]
}
 800107a:	4618      	mov	r0, r3
 800107c:	371c      	adds	r7, #28
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	cccccccd 	.word	0xcccccccd

08001088 <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	4a1d      	ldr	r2, [pc, #116]	; (800111c <terminal_move_cursor+0x94>)
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	4611      	mov	r1, r2
 80010ac:	8019      	strh	r1, [r3, #0]
 80010ae:	3302      	adds	r3, #2
 80010b0:	0c12      	lsrs	r2, r2, #16
 80010b2:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	dd0f      	ble.n	80010da <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	3302      	adds	r3, #2
 80010c2:	4619      	mov	r1, r3
 80010c4:	4610      	mov	r0, r2
 80010c6:	f7ff ff8f 	bl	8000fe8 <u16bit_to_str>
 80010ca:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	4914      	ldr	r1, [pc, #80]	; (8001120 <terminal_move_cursor+0x98>)
 80010d0:	461a      	mov	r2, r3
 80010d2:	460b      	mov	r3, r1
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	8013      	strh	r3, [r2, #0]
 80010d8:	e013      	b.n	8001102 <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	da18      	bge.n	8001112 <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	425b      	negs	r3, r3
 80010e4:	461a      	mov	r2, r3
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	3302      	adds	r3, #2
 80010ec:	4619      	mov	r1, r3
 80010ee:	4610      	mov	r0, r2
 80010f0:	f7ff ff7a 	bl	8000fe8 <u16bit_to_str>
 80010f4:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	490a      	ldr	r1, [pc, #40]	; (8001124 <terminal_move_cursor+0x9c>)
 80010fa:	461a      	mov	r2, r3
 80010fc:	460b      	mov	r3, r1
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001108:	f107 020c 	add.w	r2, r7, #12
 800110c:	4610      	mov	r0, r2
 800110e:	4798      	blx	r3
 8001110:	e000      	b.n	8001114 <terminal_move_cursor+0x8c>
		return;
 8001112:	bf00      	nop
}
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	0800dbb4 	.word	0x0800dbb4
 8001120:	0800dbb8 	.word	0x0800dbb8
 8001124:	0800dbbc 	.word	0x0800dbbc

08001128 <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	4a15      	ldr	r2, [pc, #84]	; (800118c <terminal_reset_cursor+0x64>)
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	4611      	mov	r1, r2
 800113a:	8019      	strh	r1, [r3, #0]
 800113c:	3302      	adds	r3, #2
 800113e:	0c12      	lsrs	r2, r2, #16
 8001140:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	3302      	adds	r3, #2
 8001148:	4619      	mov	r1, r3
 800114a:	203a      	movs	r0, #58	; 0x3a
 800114c:	f7ff ff4c 	bl	8000fe8 <u16bit_to_str>
 8001150:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <terminal_reset_cursor+0x68>)
 8001156:	6810      	ldr	r0, [r2, #0]
 8001158:	6018      	str	r0, [r3, #0]
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3303      	adds	r3, #3
 800115e:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 8001160:	69f9      	ldr	r1, [r7, #28]
 8001162:	2005      	movs	r0, #5
 8001164:	f7ff ff40 	bl	8000fe8 <u16bit_to_str>
 8001168:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	4909      	ldr	r1, [pc, #36]	; (8001194 <terminal_reset_cursor+0x6c>)
 800116e:	461a      	mov	r2, r3
 8001170:	460b      	mov	r3, r1
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800117c:	f107 020c 	add.w	r2, r7, #12
 8001180:	4610      	mov	r0, r2
 8001182:	4798      	blx	r3
}
 8001184:	bf00      	nop
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	0800dbb4 	.word	0x0800dbb4
 8001190:	0800dbc0 	.word	0x0800dbc0
 8001194:	0800dbb8 	.word	0x0800dbb8

08001198 <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011aa:	4816      	ldr	r0, [pc, #88]	; (8001204 <terminal_print_line+0x6c>)
 80011ac:	4798      	blx	r3

	char nch [] = {0,0};
 80011ae:	2300      	movs	r3, #0
 80011b0:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	e014      	b.n	80011e2 <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	4413      	add	r3, r2
 80011be:	3354      	adds	r3, #84	; 0x54
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 80011c4:	7c3b      	ldrb	r3, [r7, #16]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <terminal_print_line+0x36>
			nch[0] = ' ';
 80011ca:	2320      	movs	r3, #32
 80011cc:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011d4:	f107 0210 	add.w	r2, r7, #16
 80011d8:	4610      	mov	r0, r2
 80011da:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3301      	adds	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	dbe4      	blt.n	80011b8 <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f7ff ff9a 	bl	8001128 <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ff46 	bl	8001088 <terminal_move_cursor>
}
 80011fc:	bf00      	nop
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	0800dbc4 	.word	0x0800dbc4

08001208 <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3354      	adds	r3, #84	; 0x54
 8001216:	2233      	movs	r2, #51	; 0x33
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f00c fc6c 	bl	800daf8 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3304      	adds	r3, #4
 8001224:	2240      	movs	r2, #64	; 0x40
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f00c fc65 	bl	800daf8 <memset>
	pThis->ring_hist.begin = 0;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pThis->execute = NULL;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	pThis->get_completion = NULL;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif
	pThis->prompt_str = prompt_default;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <microrl_init+0x78>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000004 	.word	0x20000004

08001284 <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	1d18      	adds	r0, r3, #4
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3354      	adds	r3, #84	; 0x54
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff fcfb 	bl	8000ce8 <hist_restore_line>
 80012f2:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db1a      	blt.n	8001330 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	3354      	adds	r3, #84	; 0x54
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		terminal_reset_cursor (pThis);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ff04 	bl	8001128 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001326:	461a      	mov	r2, r3
 8001328:	2100      	movs	r1, #0
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ff34 	bl	8001198 <terminal_print_line>
	}
}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	2b5b      	cmp	r3, #91	; 0x5b
 8001348:	d104      	bne.n	8001354 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	701a      	strb	r2, [r3, #0]
		return 0;
 8001350:	2300      	movs	r3, #0
 8001352:	e07b      	b.n	800144c <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d14f      	bne.n	80013fc <escape_process+0xc4>
		if (ch == 'A') {
 800135c:	78fb      	ldrb	r3, [r7, #3]
 800135e:	2b41      	cmp	r3, #65	; 0x41
 8001360:	d105      	bne.n	800136e <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 8001362:	2100      	movs	r1, #0
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ffb7 	bl	80012d8 <hist_search>
#endif
			return 1;
 800136a:	2301      	movs	r3, #1
 800136c:	e06e      	b.n	800144c <escape_process+0x114>
		} else if (ch == 'B') {
 800136e:	78fb      	ldrb	r3, [r7, #3]
 8001370:	2b42      	cmp	r3, #66	; 0x42
 8001372:	d105      	bne.n	8001380 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 8001374:	2101      	movs	r1, #1
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffae 	bl	80012d8 <hist_search>
#endif
			return 1;
 800137c:	2301      	movs	r3, #1
 800137e:	e065      	b.n	800144c <escape_process+0x114>
		} else if (ch == 'C') {
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	2b43      	cmp	r3, #67	; 0x43
 8001384:	d114      	bne.n	80013b0 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001392:	429a      	cmp	r2, r3
 8001394:	da0a      	bge.n	80013ac <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 8001396:	2101      	movs	r1, #1
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff fe75 	bl	8001088 <terminal_move_cursor>
				pThis->cursor++;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e04d      	b.n	800144c <escape_process+0x114>
		} else if (ch == 'D') {
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	2b44      	cmp	r3, #68	; 0x44
 80013b4:	d112      	bne.n	80013dc <escape_process+0xa4>
			if (pThis->cursor > 0) {
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dd0b      	ble.n	80013d8 <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fe5f 	bl	8001088 <terminal_move_cursor>
				pThis->cursor--;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013d0:	1e5a      	subs	r2, r3, #1
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 80013d8:	2301      	movs	r3, #1
 80013da:	e037      	b.n	800144c <escape_process+0x114>
		} else if (ch == '7') {
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	2b37      	cmp	r3, #55	; 0x37
 80013e0:	d104      	bne.n	80013ec <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2202      	movs	r2, #2
 80013e6:	701a      	strb	r2, [r3, #0]
			return 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	e02f      	b.n	800144c <escape_process+0x114>
		} else if (ch == '8') {
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	2b38      	cmp	r3, #56	; 0x38
 80013f0:	d12b      	bne.n	800144a <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2203      	movs	r2, #3
 80013f6:	701a      	strb	r2, [r3, #0]
			return 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	e027      	b.n	800144c <escape_process+0x114>
		} 
	} else if (ch == '~') {
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	2b7e      	cmp	r3, #126	; 0x7e
 8001400:	d123      	bne.n	800144a <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d108      	bne.n	800141c <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fe8c 	bl	8001128 <terminal_reset_cursor>
			pThis->cursor = 0;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 8001418:	2301      	movs	r3, #1
 800141a:	e017      	b.n	800144c <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b03      	cmp	r3, #3
 8001422:	d112      	bne.n	800144a <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	4619      	mov	r1, r3
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fe27 	bl	8001088 <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	2b32      	cmp	r3, #50	; 0x32
 800146c:	dc60      	bgt.n	8001530 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800147a:	4619      	mov	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	440b      	add	r3, r1
 8001480:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	3354      	adds	r3, #84	; 0x54
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor + len,
 800148c:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800149a:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 800149c:	461a      	mov	r2, r3
 800149e:	f00c fb11 	bl	800dac4 <memmove>
		for (i = 0; i < len; i++) {
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	e025      	b.n	80014f4 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	441a      	add	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	440b      	add	r3, r1
 80014b8:	7811      	ldrb	r1, [r2, #0]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	4413      	add	r3, r2
 80014be:	460a      	mov	r2, r1
 80014c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	4413      	add	r3, r2
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4413      	add	r3, r2
 80014d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80014d6:	2b20      	cmp	r3, #32
 80014d8:	d109      	bne.n	80014ee <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	4413      	add	r3, r2
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	4413      	add	r3, r2
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3301      	adds	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	dbd5      	blt.n	80014a8 <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	441a      	add	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdlen += len;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	441a      	add	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		pThis->cmdline [pThis->cmdlen] = '\0';
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	4413      	add	r3, r2
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <microrl_insert_text+0xde>
	}
	return false;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001548:	2b00      	cmp	r3, #0
 800154a:	dd31      	ble.n	80015b0 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff fd2b 	bl	8000fa8 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800155e:	3b01      	subs	r3, #1
 8001560:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3354      	adds	r3, #84	; 0x54
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor-1,
 800156c:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 800157e:	461a      	mov	r2, r3
 8001580:	f00c faa0 	bl	800dac4 <memmove>
		pThis->cursor--;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800158a:	1e5a      	subs	r2, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	4413      	add	r3, r2
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a8:	1e5a      	subs	r2, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f7fe fdcc 	bl	8000164 <strlen>
 80015cc:	4603      	mov	r3, r0
 80015ce:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	e019      	b.n	800160a <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe fdbf 	bl	8000164 <strlen>
 80015e6:	4602      	mov	r2, r0
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d20a      	bcs.n	8001604 <common_len+0x4c>
			shortest = arr[i];
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f7fe fdb2 	bl	8000164 <strlen>
 8001600:	4603      	mov	r3, r0
 8001602:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3301      	adds	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1de      	bne.n	80015d6 <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	e01f      	b.n	800165e <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	e012      	b.n	800164a <common_len+0x92>
			if (shortest[i] != arr[j][i])
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	4413      	add	r3, r2
 800162a:	781a      	ldrb	r2, [r3, #0]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	440b      	add	r3, r1
 8001634:	6819      	ldr	r1, [r3, #0]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	440b      	add	r3, r1
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <common_len+0x8c>
				return i;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	e011      	b.n	8001668 <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	3301      	adds	r3, #1
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1e5      	bne.n	8001624 <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	3301      	adds	r3, #1
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	429a      	cmp	r2, r3
 8001664:	dbdb      	blt.n	800161e <common_len+0x66>

	return i;
 8001666:	697b      	ldr	r3, [r7, #20]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 8001670:	b5b0      	push	{r4, r5, r7, lr}
 8001672:	b08c      	sub	sp, #48	; 0x30
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 809c 	beq.w	80017bc <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800168a:	f107 020c 	add.w	r2, r7, #12
 800168e:	4619      	mov	r1, r3
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fc31 	bl	8000ef8 <split>
 8001696:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800169e:	3b01      	subs	r3, #1
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	4413      	add	r3, r2
 80016a4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d109      	bne.n	80016c0 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 80016ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80016b8:	4413      	add	r3, r2
 80016ba:	4a42      	ldr	r2, [pc, #264]	; (80017c4 <microrl_get_complite+0x154>)
 80016bc:	f843 2c24 	str.w	r2, [r3, #-36]
	compl_token = pThis->get_completion (status, tkn_arr);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c6:	f107 020c 	add.w	r2, r7, #12
 80016ca:	4611      	mov	r1, r2
 80016cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016ce:	4798      	blx	r3
 80016d0:	6238      	str	r0, [r7, #32]
	if (compl_token[0] != NULL) {
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d071      	beq.n	80017be <microrl_get_complite+0x14e>
		int i = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
		int len;

		if (compl_token[1] == NULL) {
 80016de:	6a3b      	ldr	r3, [r7, #32]
 80016e0:	3304      	adds	r3, #4
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d107      	bne.n	80016f8 <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fd39 	bl	8000164 <strlen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
 80016f6:	e026      	b.n	8001746 <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 80016f8:	6a38      	ldr	r0, [r7, #32]
 80016fa:	f7ff ff5d 	bl	80015b8 <common_len>
 80016fe:	6278      	str	r0, [r7, #36]	; 0x24
			terminal_newline (pThis);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fc61 	bl	8000fc8 <terminal_newline>
			while (compl_token [i] != NULL) {
 8001706:	e011      	b.n	800172c <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800170e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	6a39      	ldr	r1, [r7, #32]
 8001714:	440a      	add	r2, r1
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	4610      	mov	r0, r2
 800171a:	4798      	blx	r3
				pThis->print (" ");
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001722:	4829      	ldr	r0, [pc, #164]	; (80017c8 <microrl_get_complite+0x158>)
 8001724:	4798      	blx	r3
				i++;
 8001726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001728:	3301      	adds	r3, #1
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
			while (compl_token [i] != NULL) {
 800172c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	6a3a      	ldr	r2, [r7, #32]
 8001732:	4413      	add	r3, r2
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1e6      	bne.n	8001708 <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff fc44 	bl	8000fc8 <terminal_newline>
			print_prompt (pThis);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fc22 	bl	8000f8a <print_prompt>
		}
		
		if (len) {
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	2b00      	cmp	r3, #0
 800174a:	d02b      	beq.n	80017a4 <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	681c      	ldr	r4, [r3, #0]
 8001750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001752:	3b01      	subs	r3, #1
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800175a:	4413      	add	r3, r2
 800175c:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fcff 	bl	8000164 <strlen>
 8001766:	4603      	mov	r3, r0
 8001768:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 800176a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176e:	3b01      	subs	r3, #1
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001776:	4413      	add	r3, r2
 8001778:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fcf1 	bl	8000164 <strlen>
 8001782:	4603      	mov	r3, r0
 8001784:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001786:	461a      	mov	r2, r3
 8001788:	4629      	mov	r1, r5
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fe62 	bl	8001454 <microrl_insert_text>
			if (compl_token[1] == NULL) 
 8001790:	6a3b      	ldr	r3, [r7, #32]
 8001792:	3304      	adds	r3, #4
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d104      	bne.n	80017a4 <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 800179a:	2201      	movs	r2, #1
 800179c:	490a      	ldr	r1, [pc, #40]	; (80017c8 <microrl_get_complite+0x158>)
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fe58 	bl	8001454 <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fcbf 	bl	8001128 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017b0:	461a      	mov	r2, r3
 80017b2:	2100      	movs	r1, #0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff fcef 	bl	8001198 <terminal_print_line>
 80017ba:	e000      	b.n	80017be <microrl_get_complite+0x14e>
		return;
 80017bc:	bf00      	nop
	} 
}
 80017be:	3730      	adds	r7, #48	; 0x30
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bdb0      	pop	{r4, r5, r7, pc}
 80017c4:	0800dbc8 	.word	0x0800dbc8
 80017c8:	0800dbcc 	.word	0x0800dbcc

080017cc <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fbf7 	bl	8000fc8 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	dd0a      	ble.n	80017fa <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	1d18      	adds	r0, r3, #4
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f4:	461a      	mov	r2, r3
 80017f6:	f7ff fa08 	bl	8000c0a <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001800:	f107 0208 	add.w	r2, r7, #8
 8001804:	4619      	mov	r1, r3
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fb76 	bl	8000ef8 <split>
 800180c:	61f8      	str	r0, [r7, #28]
	if (status == -1){
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001814:	d109      	bne.n	800182a <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800181c:	4817      	ldr	r0, [pc, #92]	; (800187c <new_line_handler+0xb0>)
 800181e:	4798      	blx	r3
		pThis->print (ENDL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001826:	4816      	ldr	r0, [pc, #88]	; (8001880 <new_line_handler+0xb4>)
 8001828:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	2b00      	cmp	r3, #0
 800182e:	dd0c      	ble.n	800184a <new_line_handler+0x7e>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001836:	2b00      	cmp	r3, #0
 8001838:	d007      	beq.n	800184a <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001840:	f107 0208 	add.w	r2, r7, #8
 8001844:	4611      	mov	r1, r2
 8001846:	69f8      	ldr	r0, [r7, #28]
 8001848:	4798      	blx	r3
	print_prompt (pThis);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff fb9d 	bl	8000f8a <print_prompt>
	pThis->cmdlen = 0;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3354      	adds	r3, #84	; 0x54
 8001864:	2233      	movs	r2, #51	; 0x33
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f00c f945 	bl	800daf8 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8001874:	bf00      	nop
 8001876:	3720      	adds	r7, #32
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	0800dbd0 	.word	0x0800dbd0
 8001880:	0800dbb0 	.word	0x0800dbb0

08001884 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	785b      	ldrb	r3, [r3, #1]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00d      	beq.n	80018b2 <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	4619      	mov	r1, r3
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff fd4b 	bl	8001338 <escape_process>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 81e3 	beq.w	8001c70 <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 80018b0:	e1de      	b.n	8001c70 <microrl_insert_char+0x3ec>
		switch (ch) {
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	2b7e      	cmp	r3, #126	; 0x7e
 80018b8:	f200 81af 	bhi.w	8001c1a <microrl_insert_char+0x396>
 80018bc:	a201      	add	r2, pc, #4	; (adr r2, 80018c4 <microrl_insert_char+0x40>)
 80018be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c2:	bf00      	nop
 80018c4:	08001b57 	.word	0x08001b57
 80018c8:	08001b8f 	.word	0x08001b8f
 80018cc:	08001c07 	.word	0x08001c07
 80018d0:	08001c1b 	.word	0x08001c1b
 80018d4:	08001b33 	.word	0x08001b33
 80018d8:	08001b67 	.word	0x08001b67
 80018dc:	08001c1b 	.word	0x08001c1b
 80018e0:	08001bc7 	.word	0x08001bc7
 80018e4:	08001ae9 	.word	0x08001ae9
 80018e8:	08001ac1 	.word	0x08001ac1
 80018ec:	08001b1b 	.word	0x08001b1b
 80018f0:	08001c1b 	.word	0x08001c1b
 80018f4:	08001ac1 	.word	0x08001ac1
 80018f8:	08001bbd 	.word	0x08001bbd
 80018fc:	08001c1b 	.word	0x08001c1b
 8001900:	08001bb3 	.word	0x08001bb3
 8001904:	08001c1b 	.word	0x08001c1b
 8001908:	08001be3 	.word	0x08001be3
 800190c:	08001c1b 	.word	0x08001c1b
 8001910:	08001c1b 	.word	0x08001c1b
 8001914:	08001aff 	.word	0x08001aff
 8001918:	08001c1b 	.word	0x08001c1b
 800191c:	08001c1b 	.word	0x08001c1b
 8001920:	08001c1b 	.word	0x08001c1b
 8001924:	08001c1b 	.word	0x08001c1b
 8001928:	08001c1b 	.word	0x08001c1b
 800192c:	08001af1 	.word	0x08001af1
 8001930:	08001c1b 	.word	0x08001c1b
 8001934:	08001c1b 	.word	0x08001c1b
 8001938:	08001c1b 	.word	0x08001c1b
 800193c:	08001c1b 	.word	0x08001c1b
 8001940:	08001c1b 	.word	0x08001c1b
 8001944:	08001c1b 	.word	0x08001c1b
 8001948:	08001c1b 	.word	0x08001c1b
 800194c:	08001c1b 	.word	0x08001c1b
 8001950:	08001c1b 	.word	0x08001c1b
 8001954:	08001c1b 	.word	0x08001c1b
 8001958:	08001c1b 	.word	0x08001c1b
 800195c:	08001c1b 	.word	0x08001c1b
 8001960:	08001c1b 	.word	0x08001c1b
 8001964:	08001c1b 	.word	0x08001c1b
 8001968:	08001c1b 	.word	0x08001c1b
 800196c:	08001c1b 	.word	0x08001c1b
 8001970:	08001c1b 	.word	0x08001c1b
 8001974:	08001c1b 	.word	0x08001c1b
 8001978:	08001c1b 	.word	0x08001c1b
 800197c:	08001c1b 	.word	0x08001c1b
 8001980:	08001c1b 	.word	0x08001c1b
 8001984:	08001c1b 	.word	0x08001c1b
 8001988:	08001c1b 	.word	0x08001c1b
 800198c:	08001c1b 	.word	0x08001c1b
 8001990:	08001c1b 	.word	0x08001c1b
 8001994:	08001c1b 	.word	0x08001c1b
 8001998:	08001c1b 	.word	0x08001c1b
 800199c:	08001c1b 	.word	0x08001c1b
 80019a0:	08001c1b 	.word	0x08001c1b
 80019a4:	08001c1b 	.word	0x08001c1b
 80019a8:	08001c1b 	.word	0x08001c1b
 80019ac:	08001c1b 	.word	0x08001c1b
 80019b0:	08001c1b 	.word	0x08001c1b
 80019b4:	08001c1b 	.word	0x08001c1b
 80019b8:	08001c1b 	.word	0x08001c1b
 80019bc:	08001c1b 	.word	0x08001c1b
 80019c0:	08001c1b 	.word	0x08001c1b
 80019c4:	08001c1b 	.word	0x08001c1b
 80019c8:	08001c1b 	.word	0x08001c1b
 80019cc:	08001c1b 	.word	0x08001c1b
 80019d0:	08001c1b 	.word	0x08001c1b
 80019d4:	08001c1b 	.word	0x08001c1b
 80019d8:	08001c1b 	.word	0x08001c1b
 80019dc:	08001c1b 	.word	0x08001c1b
 80019e0:	08001c1b 	.word	0x08001c1b
 80019e4:	08001c1b 	.word	0x08001c1b
 80019e8:	08001c1b 	.word	0x08001c1b
 80019ec:	08001c1b 	.word	0x08001c1b
 80019f0:	08001c1b 	.word	0x08001c1b
 80019f4:	08001c1b 	.word	0x08001c1b
 80019f8:	08001c1b 	.word	0x08001c1b
 80019fc:	08001c1b 	.word	0x08001c1b
 8001a00:	08001c1b 	.word	0x08001c1b
 8001a04:	08001c1b 	.word	0x08001c1b
 8001a08:	08001c1b 	.word	0x08001c1b
 8001a0c:	08001c1b 	.word	0x08001c1b
 8001a10:	08001c1b 	.word	0x08001c1b
 8001a14:	08001c1b 	.word	0x08001c1b
 8001a18:	08001c1b 	.word	0x08001c1b
 8001a1c:	08001c1b 	.word	0x08001c1b
 8001a20:	08001c1b 	.word	0x08001c1b
 8001a24:	08001c1b 	.word	0x08001c1b
 8001a28:	08001c1b 	.word	0x08001c1b
 8001a2c:	08001c1b 	.word	0x08001c1b
 8001a30:	08001c1b 	.word	0x08001c1b
 8001a34:	08001c1b 	.word	0x08001c1b
 8001a38:	08001c1b 	.word	0x08001c1b
 8001a3c:	08001c1b 	.word	0x08001c1b
 8001a40:	08001c1b 	.word	0x08001c1b
 8001a44:	08001c1b 	.word	0x08001c1b
 8001a48:	08001c1b 	.word	0x08001c1b
 8001a4c:	08001c1b 	.word	0x08001c1b
 8001a50:	08001c1b 	.word	0x08001c1b
 8001a54:	08001c1b 	.word	0x08001c1b
 8001a58:	08001c1b 	.word	0x08001c1b
 8001a5c:	08001c1b 	.word	0x08001c1b
 8001a60:	08001c1b 	.word	0x08001c1b
 8001a64:	08001c1b 	.word	0x08001c1b
 8001a68:	08001c1b 	.word	0x08001c1b
 8001a6c:	08001c1b 	.word	0x08001c1b
 8001a70:	08001c1b 	.word	0x08001c1b
 8001a74:	08001c1b 	.word	0x08001c1b
 8001a78:	08001c1b 	.word	0x08001c1b
 8001a7c:	08001c1b 	.word	0x08001c1b
 8001a80:	08001c1b 	.word	0x08001c1b
 8001a84:	08001c1b 	.word	0x08001c1b
 8001a88:	08001c1b 	.word	0x08001c1b
 8001a8c:	08001c1b 	.word	0x08001c1b
 8001a90:	08001c1b 	.word	0x08001c1b
 8001a94:	08001c1b 	.word	0x08001c1b
 8001a98:	08001c1b 	.word	0x08001c1b
 8001a9c:	08001c1b 	.word	0x08001c1b
 8001aa0:	08001c1b 	.word	0x08001c1b
 8001aa4:	08001c1b 	.word	0x08001c1b
 8001aa8:	08001c1b 	.word	0x08001c1b
 8001aac:	08001c1b 	.word	0x08001c1b
 8001ab0:	08001c1b 	.word	0x08001c1b
 8001ab4:	08001c1b 	.word	0x08001c1b
 8001ab8:	08001c1b 	.word	0x08001c1b
 8001abc:	08001bc7 	.word	0x08001bc7
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	789b      	ldrb	r3, [r3, #2]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2b0d      	cmp	r3, #13
 8001aca:	d101      	bne.n	8001ad0 <microrl_insert_char+0x24c>
 8001acc:	230a      	movs	r3, #10
 8001ace:	e000      	b.n	8001ad2 <microrl_insert_char+0x24e>
 8001ad0:	230d      	movs	r3, #13
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	f000 80c1 	beq.w	8001c5a <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff fe73 	bl	80017cc <new_line_handler>
				break;
 8001ae6:	e0c3      	b.n	8001c70 <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff fdc1 	bl	8001670 <microrl_get_complite>
			break;
 8001aee:	e0bf      	b.n	8001c70 <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	705a      	strb	r2, [r3, #1]
			break;
 8001af6:	e0bb      	b.n	8001c70 <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff fd1e 	bl	800153a <microrl_backspace>
					while (pThis->cursor > 0) {
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	dcf7      	bgt.n	8001af8 <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b0e:	461a      	mov	r2, r3
 8001b10:	2100      	movs	r1, #0
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fb40 	bl	8001198 <terminal_print_line>
			break;
 8001b18:	e0aa      	b.n	8001c70 <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b20:	4855      	ldr	r0, [pc, #340]	; (8001c78 <microrl_insert_char+0x3f4>)
 8001b22:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8001b30:	e09e      	b.n	8001c70 <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	4619      	mov	r1, r3
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff faa0 	bl	8001088 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001b54:	e08c      	b.n	8001c70 <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fae6 	bl	8001128 <terminal_reset_cursor>
				pThis->cursor = 0;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001b64:	e084      	b.n	8001c70 <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b72:	429a      	cmp	r2, r3
 8001b74:	da73      	bge.n	8001c5e <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 8001b76:	2101      	movs	r1, #1
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff fa85 	bl	8001088 <terminal_move_cursor>
				pThis->cursor++;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001b8c:	e067      	b.n	8001c5e <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d064      	beq.n	8001c62 <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff fa73 	bl	8001088 <terminal_move_cursor>
				pThis->cursor--;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ba8:	1e5a      	subs	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001bb0:	e057      	b.n	8001c62 <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff fb8f 	bl	80012d8 <hist_search>
			break;
 8001bba:	e059      	b.n	8001c70 <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fb8a 	bl	80012d8 <hist_search>
			break;
 8001bc4:	e054      	b.n	8001c70 <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff fcb7 	bl	800153a <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bd8:	461a      	mov	r2, r3
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff fadc 	bl	8001198 <terminal_print_line>
			break;
 8001be0:	e046      	b.n	8001c70 <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff f9f0 	bl	8000fc8 <terminal_newline>
				print_prompt (pThis);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff f9ce 	bl	8000f8a <print_prompt>
				terminal_reset_cursor (pThis);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fa9a 	bl	8001128 <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff faca 	bl	8001198 <terminal_print_line>
			break;
 8001c04:	e034      	b.n	8001c70 <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d02a      	beq.n	8001c66 <microrl_insert_char+0x3e2>
				pThis->sigint();
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c16:	4798      	blx	r3
			break;
 8001c18:	e025      	b.n	8001c66 <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	d104      	bne.n	8001c2a <microrl_insert_char+0x3a6>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d01f      	beq.n	8001c6a <microrl_insert_char+0x3e6>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b1f      	cmp	r3, #31
 8001c2e:	dd1c      	ble.n	8001c6a <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8001c30:	463b      	mov	r3, r7
 8001c32:	2201      	movs	r2, #1
 8001c34:	4619      	mov	r1, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fc0c 	bl	8001454 <microrl_insert_text>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d015      	beq.n	8001c6e <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c48:	1e59      	subs	r1, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c50:	461a      	mov	r2, r3
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff faa0 	bl	8001198 <terminal_print_line>
			break;
 8001c58:	e009      	b.n	8001c6e <microrl_insert_char+0x3ea>
					break;
 8001c5a:	bf00      	nop
 8001c5c:	e008      	b.n	8001c70 <microrl_insert_char+0x3ec>
			break;
 8001c5e:	bf00      	nop
 8001c60:	e006      	b.n	8001c70 <microrl_insert_char+0x3ec>
			break;
 8001c62:	bf00      	nop
 8001c64:	e004      	b.n	8001c70 <microrl_insert_char+0x3ec>
			break;
 8001c66:	bf00      	nop
 8001c68:	e002      	b.n	8001c70 <microrl_insert_char+0x3ec>
	}
 8001c6a:	bf00      	nop
 8001c6c:	e000      	b.n	8001c70 <microrl_insert_char+0x3ec>
			break;
 8001c6e:	bf00      	nop
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	0800dbc4 	.word	0x0800dbc4

08001c7c <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <microrl_print_char+0x20>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	79fa      	ldrb	r2, [r7, #7]
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fdf8 	bl	8001884 <microrl_insert_char>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000008 	.word	0x20000008

08001ca0 <print>:

void print (const char * str)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <print+0x84>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	f083 0301 	eor.w	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <print+0x1e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b1b      	cmp	r3, #27
 8001cbc:	d02b      	beq.n	8001d16 <print+0x76>
		return;
	if (!CDC_is_ready)
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <print+0x88>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	f083 0301 	eor.w	r3, r3, #1
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d126      	bne.n	8001d1a <print+0x7a>
		return;
	uint16_t len = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 8001cd0:	89fb      	ldrh	r3, [r7, #14]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	81fb      	strh	r3, [r7, #14]
 8001cd6:	89fb      	ldrh	r3, [r7, #14]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f6      	bne.n	8001cd0 <print+0x30>
	uint32_t timeout = HAL_GetTick();
 8001ce2:	f000 fe77 	bl	80029d4 <HAL_GetTick>
 8001ce6:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001ce8:	e006      	b.n	8001cf8 <print+0x58>
		if (HAL_GetTick() - timeout >= 5)
 8001cea:	f000 fe73 	bl	80029d4 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d807      	bhi.n	8001d08 <print+0x68>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <print+0x8c>)
 8001cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001cfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f1      	bne.n	8001cea <print+0x4a>
 8001d06:	e000      	b.n	8001d0a <print+0x6a>
			break;
 8001d08:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 8001d0a:	89fb      	ldrh	r3, [r7, #14]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f00b fac8 	bl	800d2a4 <CDC_Transmit_FS>
 8001d14:	e002      	b.n	8001d1c <print+0x7c>
		return;
 8001d16:	bf00      	nop
 8001d18:	e000      	b.n	8001d1c <print+0x7c>
		return;
 8001d1a:	bf00      	nop
}
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000000c 	.word	0x2000000c
 8001d28:	200001af 	.word	0x200001af
 8001d2c:	20002698 	.word	0x20002698

08001d30 <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	e010      	b.n	8001d62 <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 8001d40:	490c      	ldr	r1, [pc, #48]	; (8001d74 <find_color_by_name+0x44>)
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	440b      	add	r3, r1
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	79fa      	ldrb	r2, [r7, #7]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d101      	bne.n	8001d5c <find_color_by_name+0x2c>
		{
			return i;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	e006      	b.n	8001d6a <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2b10      	cmp	r3, #16
 8001d66:	d9eb      	bls.n	8001d40 <find_color_by_name+0x10>
		}
	}
	return 0;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	0800e1bc 	.word	0x0800e1bc

08001d78 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ffd2 	bl	8001d30 <find_color_by_name>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	4a08      	ldr	r2, [pc, #32]	; (8001dbc <print_color+0x44>)
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff7e 	bl	8001ca0 <print>
	print(str);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ff7b 	bl	8001ca0 <print>
	print(COLOR_NC);
 8001daa:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <print_color+0x48>)
 8001dac:	f7ff ff78 	bl	8001ca0 <print>
	return 0;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	0800e1bc 	.word	0x0800e1bc
 8001dc0:	0800dbe8 	.word	0x0800dbe8

08001dc4 <str_length>:

int str_length(const char * str)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8001dd0:	e002      	b.n	8001dd8 <str_length+0x14>
		i++;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f6      	bne.n	8001dd2 <str_length+0xe>
	return i;
 8001de4:	68fb      	ldr	r3, [r7, #12]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <print_help>:


int print_help(int argc, const char * const * argv)
{
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
	print(_VER);
 8001dfa:	4858      	ldr	r0, [pc, #352]	; (8001f5c <print_help+0x16c>)
 8001dfc:	f7ff ff50 	bl	8001ca0 <print>
	print(ENDL);
 8001e00:	4857      	ldr	r0, [pc, #348]	; (8001f60 <print_help+0x170>)
 8001e02:	f7ff ff4d 	bl	8001ca0 <print>
	print ("Use ");
 8001e06:	4857      	ldr	r0, [pc, #348]	; (8001f64 <print_help+0x174>)
 8001e08:	f7ff ff4a 	bl	8001ca0 <print>
	print_color("TAB", C_GREEN);
 8001e0c:	2105      	movs	r1, #5
 8001e0e:	4856      	ldr	r0, [pc, #344]	; (8001f68 <print_help+0x178>)
 8001e10:	f7ff ffb2 	bl	8001d78 <print_color>
	print(" key for completion");
 8001e14:	4855      	ldr	r0, [pc, #340]	; (8001f6c <print_help+0x17c>)
 8001e16:	f7ff ff43 	bl	8001ca0 <print>
	print (ENDL);
 8001e1a:	4851      	ldr	r0, [pc, #324]	; (8001f60 <print_help+0x170>)
 8001e1c:	f7ff ff40 	bl	8001ca0 <print>
	print ("Available commands:");
 8001e20:	4853      	ldr	r0, [pc, #332]	; (8001f70 <print_help+0x180>)
 8001e22:	f7ff ff3d 	bl	8001ca0 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	e08a      	b.n	8001f42 <print_help+0x152>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 8001e2c:	4a51      	ldr	r2, [pc, #324]	; (8001f74 <print_help+0x184>)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	019b      	lsls	r3, r3, #6
 8001e32:	4413      	add	r3, r2
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3a:	d11b      	bne.n	8001e74 <print_help+0x84>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	4a4c      	ldr	r2, [pc, #304]	; (8001f74 <print_help+0x184>)
 8001e42:	019b      	lsls	r3, r3, #6
 8001e44:	4413      	add	r3, r2
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4c:	d004      	beq.n	8001e58 <print_help+0x68>
				print_color(" aka ", C_L_PURPLE);
 8001e4e:	210c      	movs	r1, #12
 8001e50:	4849      	ldr	r0, [pc, #292]	; (8001f78 <print_help+0x188>)
 8001e52:	f7ff ff91 	bl	8001d78 <print_color>
 8001e56:	e003      	b.n	8001e60 <print_help+0x70>
			else
				print_color("/", C_L_PURPLE);
 8001e58:	210c      	movs	r1, #12
 8001e5a:	4848      	ldr	r0, [pc, #288]	; (8001f7c <print_help+0x18c>)
 8001e5c:	f7ff ff8c 	bl	8001d78 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	019b      	lsls	r3, r3, #6
 8001e64:	4a43      	ldr	r2, [pc, #268]	; (8001f74 <print_help+0x184>)
 8001e66:	4413      	add	r3, r2
 8001e68:	3304      	adds	r3, #4
 8001e6a:	210b      	movs	r1, #11
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff83 	bl	8001d78 <print_color>
 8001e72:	e063      	b.n	8001f3c <print_help+0x14c>
		}
		else
		{
			print(ENDL);
 8001e74:	483a      	ldr	r0, [pc, #232]	; (8001f60 <print_help+0x170>)
 8001e76:	f7ff ff13 	bl	8001ca0 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8001e7a:	f06f 0303 	mvn.w	r3, #3
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	e005      	b.n	8001e8e <print_help+0x9e>
				print(" ");
 8001e82:	483f      	ldr	r0, [pc, #252]	; (8001f80 <print_help+0x190>)
 8001e84:	f7ff ff0c 	bl	8001ca0 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	4a39      	ldr	r2, [pc, #228]	; (8001f74 <print_help+0x184>)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	019b      	lsls	r3, r3, #6
 8001e94:	4413      	add	r3, r2
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	dbf1      	blt.n	8001e82 <print_help+0x92>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	019b      	lsls	r3, r3, #6
 8001ea2:	4a34      	ldr	r2, [pc, #208]	; (8001f74 <print_help+0x184>)
 8001ea4:	4413      	add	r3, r2
 8001ea6:	1d1a      	adds	r2, r3, #4
 8001ea8:	4932      	ldr	r1, [pc, #200]	; (8001f74 <print_help+0x184>)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	019b      	lsls	r3, r3, #6
 8001eae:	440b      	add	r3, r1
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4934      	ldr	r1, [pc, #208]	; (8001f84 <print_help+0x194>)
 8001eb4:	5ccb      	ldrb	r3, [r1, r3]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4610      	mov	r0, r2
 8001eba:	f7ff ff5d 	bl	8001d78 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	e005      	b.n	8001ed0 <print_help+0xe0>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 8001ec4:	482e      	ldr	r0, [pc, #184]	; (8001f80 <print_help+0x190>)
 8001ec6:	f7ff feeb 	bl	8001ca0 <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	4a28      	ldr	r2, [pc, #160]	; (8001f74 <print_help+0x184>)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	019b      	lsls	r3, r3, #6
 8001ed6:	4413      	add	r3, r2
 8001ed8:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001eda:	f1c3 040c 	rsb	r4, r3, #12
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	019b      	lsls	r3, r3, #6
 8001ee2:	4a24      	ldr	r2, [pc, #144]	; (8001f74 <print_help+0x184>)
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff6b 	bl	8001dc4 <str_length>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	dbe5      	blt.n	8001ec4 <print_help+0xd4>
			switch (microrl_actions[i].level){
 8001ef8:	4a1e      	ldr	r2, [pc, #120]	; (8001f74 <print_help+0x184>)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	019b      	lsls	r3, r3, #6
 8001efe:	4413      	add	r3, r2
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <print_help+0x11c>
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d004      	beq.n	8001f14 <print_help+0x124>
 8001f0a:	e007      	b.n	8001f1c <print_help+0x12c>
			case 0:
				print ("-");
 8001f0c:	481e      	ldr	r0, [pc, #120]	; (8001f88 <print_help+0x198>)
 8001f0e:	f7ff fec7 	bl	8001ca0 <print>
				break;
 8001f12:	e007      	b.n	8001f24 <print_help+0x134>
			case 1:
				print ("^");
 8001f14:	481d      	ldr	r0, [pc, #116]	; (8001f8c <print_help+0x19c>)
 8001f16:	f7ff fec3 	bl	8001ca0 <print>
				break;
 8001f1a:	e003      	b.n	8001f24 <print_help+0x134>
			default:
				print ("#");
 8001f1c:	481c      	ldr	r0, [pc, #112]	; (8001f90 <print_help+0x1a0>)
 8001f1e:	f7ff febf 	bl	8001ca0 <print>
				break;
 8001f22:	bf00      	nop
			}
			print (" ");
 8001f24:	4816      	ldr	r0, [pc, #88]	; (8001f80 <print_help+0x190>)
 8001f26:	f7ff febb 	bl	8001ca0 <print>
			print (microrl_actions[i].help_msg);
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	019b      	lsls	r3, r3, #6
 8001f2e:	3308      	adds	r3, #8
 8001f30:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <print_help+0x184>)
 8001f32:	4413      	add	r3, r2
 8001f34:	3306      	adds	r3, #6
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff feb2 	bl	8001ca0 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b0d      	cmp	r3, #13
 8001f46:	f67f af71 	bls.w	8001e2c <print_help+0x3c>
		}
	}
	print(ENDL);
 8001f4a:	4805      	ldr	r0, [pc, #20]	; (8001f60 <print_help+0x170>)
 8001f4c:	f7ff fea8 	bl	8001ca0 <print>
	return 0;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	371c      	adds	r7, #28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd90      	pop	{r4, r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	0800dbf0 	.word	0x0800dbf0
 8001f60:	0800dc00 	.word	0x0800dc00
 8001f64:	0800dc04 	.word	0x0800dc04
 8001f68:	0800dc0c 	.word	0x0800dc0c
 8001f6c:	0800dc10 	.word	0x0800dc10
 8001f70:	0800dc24 	.word	0x0800dc24
 8001f74:	0800de3c 	.word	0x0800de3c
 8001f78:	0800dc38 	.word	0x0800dc38
 8001f7c:	0800dc40 	.word	0x0800dc40
 8001f80:	0800dc44 	.word	0x0800dc44
 8001f84:	0800e278 	.word	0x0800e278
 8001f88:	0800dc48 	.word	0x0800dc48
 8001f8c:	0800dc4c 	.word	0x0800dc4c
 8001f90:	0800dc50 	.word	0x0800dc50

08001f94 <execute>:



int execute (int argc, const char * const * argv)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	; 0x28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
//	print_help(argc, argv);
//	return 0;
	int (*func)   (int argc, const char * const * argv ) = NULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 8001faa:	2300      	movs	r3, #0
 8001fac:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	e050      	b.n	8002056 <execute+0xc2>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	e03f      	b.n	800203a <execute+0xa6>
		{
			tokens_found = false;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 8001fbe:	4a52      	ldr	r2, [pc, #328]	; (8002108 <execute+0x174>)
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	019b      	lsls	r3, r3, #6
 8001fc4:	4413      	add	r3, r2
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd0:	d001      	beq.n	8001fd6 <execute+0x42>
				synonym_level = current_level; // save the synonym level
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fdc:	d003      	beq.n	8001fe6 <execute+0x52>
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	db2d      	blt.n	8002042 <execute+0xae>
				break;
			if (current_level == i)
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d101      	bne.n	8001ff2 <execute+0x5e>
				last_main_synonym = n;
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	019b      	lsls	r3, r3, #6
 8002000:	4941      	ldr	r1, [pc, #260]	; (8002108 <execute+0x174>)
 8002002:	440b      	add	r3, r1
 8002004:	3304      	adds	r3, #4
 8002006:	4619      	mov	r1, r3
 8002008:	4610      	mov	r0, r2
 800200a:	f7fe f8a1 	bl	8000150 <strcmp>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10f      	bne.n	8002034 <execute+0xa0>
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	429a      	cmp	r2, r3
 800201a:	d10b      	bne.n	8002034 <execute+0xa0>
					(i == synonym_level))
			{
				tokens_found = true;
 800201c:	2301      	movs	r3, #1
 800201e:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	623a      	str	r2, [r7, #32]
 8002026:	4a38      	ldr	r2, [pc, #224]	; (8002108 <execute+0x174>)
 8002028:	019b      	lsls	r3, r3, #6
 800202a:	4413      	add	r3, r2
 800202c:	333c      	adds	r3, #60	; 0x3c
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8002032:	e007      	b.n	8002044 <execute+0xb0>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	3301      	adds	r3, #1
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2b0d      	cmp	r3, #13
 800203e:	d9bc      	bls.n	8001fba <execute+0x26>
 8002040:	e000      	b.n	8002044 <execute+0xb0>
				break;
 8002042:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 8002044:	7efb      	ldrb	r3, [r7, #27]
 8002046:	f083 0301 	eor.w	r3, r3, #1
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d107      	bne.n	8002060 <execute+0xcc>
	for (int i = 0; i < argc; i++)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	3301      	adds	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	429a      	cmp	r2, r3
 800205c:	dbaa      	blt.n	8001fb4 <execute+0x20>
 800205e:	e000      	b.n	8002062 <execute+0xce>
			break;
 8002060:	bf00      	nop
	}

	if (func != NULL)
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <execute+0xe0>
	{
		return func(argc, argv); // function found
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	6839      	ldr	r1, [r7, #0]
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	4798      	blx	r3
 8002070:	4603      	mov	r3, r0
 8002072:	e045      	b.n	8002100 <execute+0x16c>
	} else if (tokens_found)
 8002074:	7efb      	ldrb	r3, [r7, #27]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d021      	beq.n	80020be <execute+0x12a>
	{
		print_color ("command: '", C_L_RED);
 800207a:	210a      	movs	r1, #10
 800207c:	4823      	ldr	r0, [pc, #140]	; (800210c <execute+0x178>)
 800207e:	f7ff fe7b 	bl	8001d78 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	210a      	movs	r1, #10
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fe75 	bl	8001d78 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 800208e:	210a      	movs	r1, #10
 8002090:	481f      	ldr	r0, [pc, #124]	; (8002110 <execute+0x17c>)
 8002092:	f7ff fe71 	bl	8001d78 <print_color>
		print(ENDL);
 8002096:	481f      	ldr	r0, [pc, #124]	; (8002114 <execute+0x180>)
 8002098:	f7ff fe02 	bl	8001ca0 <print>
		print_color ("use '", C_NC);
 800209c:	2100      	movs	r1, #0
 800209e:	481e      	ldr	r0, [pc, #120]	; (8002118 <execute+0x184>)
 80020a0:	f7ff fe6a 	bl	8001d78 <print_color>
		print_color ("?", C_GREEN);
 80020a4:	2105      	movs	r1, #5
 80020a6:	481d      	ldr	r0, [pc, #116]	; (800211c <execute+0x188>)
 80020a8:	f7ff fe66 	bl	8001d78 <print_color>
		print_color ("' for help", C_NC);
 80020ac:	2100      	movs	r1, #0
 80020ae:	481c      	ldr	r0, [pc, #112]	; (8002120 <execute+0x18c>)
 80020b0:	f7ff fe62 	bl	8001d78 <print_color>
		print (ENDL);
 80020b4:	4817      	ldr	r0, [pc, #92]	; (8002114 <execute+0x180>)
 80020b6:	f7ff fdf3 	bl	8001ca0 <print>
		return 1;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e020      	b.n	8002100 <execute+0x16c>
	}
	else
	{
		print_color ("command: '", C_RED);
 80020be:	2109      	movs	r1, #9
 80020c0:	4812      	ldr	r0, [pc, #72]	; (800210c <execute+0x178>)
 80020c2:	f7ff fe59 	bl	8001d78 <print_color>
		print_color ((char*)argv[0], C_RED);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2109      	movs	r1, #9
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fe53 	bl	8001d78 <print_color>
		print_color ("' not found", C_RED);
 80020d2:	2109      	movs	r1, #9
 80020d4:	4813      	ldr	r0, [pc, #76]	; (8002124 <execute+0x190>)
 80020d6:	f7ff fe4f 	bl	8001d78 <print_color>
		print(ENDL);
 80020da:	480e      	ldr	r0, [pc, #56]	; (8002114 <execute+0x180>)
 80020dc:	f7ff fde0 	bl	8001ca0 <print>
		print_color ("use '", C_NC);
 80020e0:	2100      	movs	r1, #0
 80020e2:	480d      	ldr	r0, [pc, #52]	; (8002118 <execute+0x184>)
 80020e4:	f7ff fe48 	bl	8001d78 <print_color>
		print_color ("?", C_GREEN);
 80020e8:	2105      	movs	r1, #5
 80020ea:	480c      	ldr	r0, [pc, #48]	; (800211c <execute+0x188>)
 80020ec:	f7ff fe44 	bl	8001d78 <print_color>
		print_color ("' for help", C_NC);
 80020f0:	2100      	movs	r1, #0
 80020f2:	480b      	ldr	r0, [pc, #44]	; (8002120 <execute+0x18c>)
 80020f4:	f7ff fe40 	bl	8001d78 <print_color>
		print (ENDL);
 80020f8:	4806      	ldr	r0, [pc, #24]	; (8002114 <execute+0x180>)
 80020fa:	f7ff fdd1 	bl	8001ca0 <print>
		return 1;
 80020fe:	2301      	movs	r3, #1

	}
}
 8002100:	4618      	mov	r0, r3
 8002102:	3728      	adds	r7, #40	; 0x28
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	0800de3c 	.word	0x0800de3c
 800210c:	0800dc54 	.word	0x0800dc54
 8002110:	0800dc60 	.word	0x0800dc60
 8002114:	0800dc00 	.word	0x0800dc00
 8002118:	0800dc80 	.word	0x0800dc80
 800211c:	0800dc88 	.word	0x0800dc88
 8002120:	0800dc8c 	.word	0x0800dc8c
 8002124:	0800dc98 	.word	0x0800dc98

08002128 <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	; 0x30
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
	int j = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 8002136:	4b5b      	ldr	r3, [pc, #364]	; (80022a4 <complet+0x17c>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d11b      	bne.n	800217a <complet+0x52>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 8002142:	2300      	movs	r3, #0
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
 8002146:	e014      	b.n	8002172 <complet+0x4a>
			if (microrl_actions[i].level == 0)
 8002148:	4a57      	ldr	r2, [pc, #348]	; (80022a8 <complet+0x180>)
 800214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214c:	019b      	lsls	r3, r3, #6
 800214e:	4413      	add	r3, r2
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10a      	bne.n	800216c <complet+0x44>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 8002156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800215c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800215e:	0192      	lsls	r2, r2, #6
 8002160:	4951      	ldr	r1, [pc, #324]	; (80022a8 <complet+0x180>)
 8002162:	440a      	add	r2, r1
 8002164:	3204      	adds	r2, #4
 8002166:	494f      	ldr	r1, [pc, #316]	; (80022a4 <complet+0x17c>)
 8002168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 800216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216e:	3301      	adds	r3, #1
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
 8002172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002174:	2b0d      	cmp	r3, #13
 8002176:	d9e7      	bls.n	8002148 <complet+0x20>
 8002178:	e08a      	b.n	8002290 <complet+0x168>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002180:	3b01      	subs	r3, #1
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	4413      	add	r3, r2
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 8002194:	2300      	movs	r3, #0
 8002196:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 8002198:	2300      	movs	r3, #0
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	e072      	b.n	8002284 <complet+0x15c>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	e061      	b.n	8002268 <complet+0x140>
			{
				tokens_found = false;
 80021a4:	2300      	movs	r3, #0
 80021a6:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 80021a8:	4a3f      	ldr	r2, [pc, #252]	; (80022a8 <complet+0x180>)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	019b      	lsls	r3, r3, #6
 80021ae:	4413      	add	r3, r2
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ba:	d001      	beq.n	80021c0 <complet+0x98>
					synonym_level = current_level; // save the synonym level
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c6:	d003      	beq.n	80021d0 <complet+0xa8>
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	db4f      	blt.n	8002270 <complet+0x148>
					break;
				if (current_level == i)
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d101      	bne.n	80021dc <complet+0xb4>
					last_main_synonym = n;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d122      	bne.n	800222c <complet+0x104>
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	019b      	lsls	r3, r3, #6
 80021ea:	4a2f      	ldr	r2, [pc, #188]	; (80022a8 <complet+0x180>)
 80021ec:	4413      	add	r3, r2
 80021ee:	3304      	adds	r3, #4
 80021f0:	6939      	ldr	r1, [r7, #16]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f00b fc88 	bl	800db08 <strstr>
 80021f8:	4602      	mov	r2, r0
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	019b      	lsls	r3, r3, #6
 80021fe:	492a      	ldr	r1, [pc, #168]	; (80022a8 <complet+0x180>)
 8002200:	440b      	add	r3, r1
 8002202:	3304      	adds	r3, #4
 8002204:	429a      	cmp	r2, r3
 8002206:	d111      	bne.n	800222c <complet+0x104>
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	429a      	cmp	r2, r3
 800220e:	d10d      	bne.n	800222c <complet+0x104>
										(i == synonym_level))
				{
					tokens_found = true;
 8002210:	2301      	movs	r3, #1
 8002212:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 8002214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	62fa      	str	r2, [r7, #44]	; 0x2c
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	0192      	lsls	r2, r2, #6
 800221e:	4922      	ldr	r1, [pc, #136]	; (80022a8 <complet+0x180>)
 8002220:	440a      	add	r2, r1
 8002222:	3204      	adds	r2, #4
 8002224:	491f      	ldr	r1, [pc, #124]	; (80022a4 <complet+0x17c>)
 8002226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800222a:	e01a      	b.n	8002262 <complet+0x13a>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	4413      	add	r3, r2
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	019b      	lsls	r3, r3, #6
 800223a:	491b      	ldr	r1, [pc, #108]	; (80022a8 <complet+0x180>)
 800223c:	440b      	add	r3, r1
 800223e:	3304      	adds	r3, #4
 8002240:	4619      	mov	r1, r3
 8002242:	4610      	mov	r0, r2
 8002244:	f7fd ff84 	bl	8000150 <strcmp>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <complet+0x13a>
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	429a      	cmp	r2, r3
 8002254:	d105      	bne.n	8002262 <complet+0x13a>
				{
					last_main_synonym++;
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	3301      	adds	r3, #1
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 800225c:	2301      	movs	r3, #1
 800225e:	77fb      	strb	r3, [r7, #31]
					break;
 8002260:	e007      	b.n	8002272 <complet+0x14a>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	3301      	adds	r3, #1
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2b0d      	cmp	r3, #13
 800226c:	d99a      	bls.n	80021a4 <complet+0x7c>
 800226e:	e000      	b.n	8002272 <complet+0x14a>
					break;
 8002270:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 8002272:	7ffb      	ldrb	r3, [r7, #31]
 8002274:	f083 0301 	eor.w	r3, r3, #1
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d107      	bne.n	800228e <complet+0x166>
		for (int i = 0; i < argc; i++)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	3301      	adds	r3, #1
 8002282:	61bb      	str	r3, [r7, #24]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	db88      	blt.n	800219e <complet+0x76>
 800228c:	e000      	b.n	8002290 <complet+0x168>
				break;
 800228e:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 8002290:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <complet+0x17c>)
 8002292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002294:	2100      	movs	r1, #0
 8002296:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 800229a:	4b02      	ldr	r3, [pc, #8]	; (80022a4 <complet+0x17c>)
}
 800229c:	4618      	mov	r0, r3
 800229e:	3730      	adds	r7, #48	; 0x30
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20002494 	.word	0x20002494
 80022a8:	0800de3c 	.word	0x0800de3c

080022ac <sigint>:
#endif


void sigint (void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <sigint+0x48>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]


	print (ENDL);
 80022b8:	480f      	ldr	r0, [pc, #60]	; (80022f8 <sigint+0x4c>)
 80022ba:	f7ff fcf1 	bl	8001ca0 <print>
	print ("^C catched!");
 80022be:	480f      	ldr	r0, [pc, #60]	; (80022fc <sigint+0x50>)
 80022c0:	f7ff fcee 	bl	8001ca0 <print>
	int i = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 80022c8:	e009      	b.n	80022de <sigint+0x32>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <sigint+0x54>)
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <sigint+0x4c>)
 80022d6:	5cd3      	ldrb	r3, [r2, r3]
 80022d8:	4619      	mov	r1, r3
 80022da:	f7ff fad3 	bl	8001884 <microrl_insert_char>
	while (ENTER[i])
 80022de:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <sigint+0x4c>)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4413      	add	r3, r2
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1ef      	bne.n	80022ca <sigint+0x1e>
}
 80022ea:	bf00      	nop
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	200001b0 	.word	0x200001b0
 80022f8:	0800dc00 	.word	0x0800dc00
 80022fc:	0800dca4 	.word	0x0800dca4
 8002300:	20000008 	.word	0x20000008

08002304 <init_microrl>:

void init_microrl(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <init_microrl+0x38>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	490c      	ldr	r1, [pc, #48]	; (8002340 <init_microrl+0x3c>)
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe ff7a 	bl	8001208 <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <init_microrl+0x38>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	490a      	ldr	r1, [pc, #40]	; (8002344 <init_microrl+0x40>)
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe ffc0 	bl	80012a0 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <init_microrl+0x38>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4908      	ldr	r1, [pc, #32]	; (8002348 <init_microrl+0x44>)
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe ffac 	bl	8001284 <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <init_microrl+0x38>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4906      	ldr	r1, [pc, #24]	; (800234c <init_microrl+0x48>)
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe ffc2 	bl	80012bc <microrl_set_sigint_callback>
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000008 	.word	0x20000008
 8002340:	08001ca1 	.word	0x08001ca1
 8002344:	08001f95 	.word	0x08001f95
 8002348:	08002129 	.word	0x08002129
 800234c:	080022ad 	.word	0x080022ad

08002350 <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <clear_screen+0x20>)
 800235c:	f7ff fca0 	bl	8001ca0 <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 8002360:	4804      	ldr	r0, [pc, #16]	; (8002374 <clear_screen+0x24>)
 8002362:	f7ff fc9d 	bl	8001ca0 <print>
	return 0;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	0800dcb0 	.word	0x0800dcb0
 8002374:	0800dcb8 	.word	0x0800dcb8

08002378 <set_CDC_ready>:


void set_CDC_ready(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
	CDC_is_ready = true;
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <set_CDC_ready+0x14>)
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	200001af 	.word	0x200001af

08002390 <color_toggle>:


int color_toggle 	(int argc, const char * const * argv)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <color_toggle+0x30>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	f083 0301 	eor.w	r3, r3, #1
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	bf14      	ite	ne
 80023a8:	2301      	movne	r3, #1
 80023aa:	2300      	moveq	r3, #0
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <color_toggle+0x30>)
 80023b0:	701a      	strb	r2, [r3, #0]
	return 0;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	2000000c 	.word	0x2000000c

080023c4 <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
	color_out = 1;
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <color_on+0x28>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 80023d4:	2105      	movs	r1, #5
 80023d6:	4806      	ldr	r0, [pc, #24]	; (80023f0 <color_on+0x2c>)
 80023d8:	f7ff fcce 	bl	8001d78 <print_color>
	print(ENDL);
 80023dc:	4805      	ldr	r0, [pc, #20]	; (80023f4 <color_on+0x30>)
 80023de:	f7ff fc5f 	bl	8001ca0 <print>
	return 0;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	2000000c 	.word	0x2000000c
 80023f0:	0800dcbc 	.word	0x0800dcbc
 80023f4:	0800dc00 	.word	0x0800dc00

080023f8 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
	color_out = 0;
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <color_off+0x28>)
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 8002408:	4806      	ldr	r0, [pc, #24]	; (8002424 <color_off+0x2c>)
 800240a:	f7ff fc49 	bl	8001ca0 <print>
	print(ENDL);
 800240e:	4806      	ldr	r0, [pc, #24]	; (8002428 <color_off+0x30>)
 8002410:	f7ff fc46 	bl	8001ca0 <print>
	return 0;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	2000000c 	.word	0x2000000c
 8002424:	0800dcd0 	.word	0x0800dcd0
 8002428:	0800dc00 	.word	0x0800dc00

0800242c <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
	if (color_out)
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <color_show+0x34>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d004      	beq.n	8002448 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 800243e:	2105      	movs	r1, #5
 8002440:	4808      	ldr	r0, [pc, #32]	; (8002464 <color_show+0x38>)
 8002442:	f7ff fc99 	bl	8001d78 <print_color>
 8002446:	e002      	b.n	800244e <color_show+0x22>
	else
		print ("Color output is OFF");
 8002448:	4807      	ldr	r0, [pc, #28]	; (8002468 <color_show+0x3c>)
 800244a:	f7ff fc29 	bl	8001ca0 <print>
	print(ENDL);
 800244e:	4807      	ldr	r0, [pc, #28]	; (800246c <color_show+0x40>)
 8002450:	f7ff fc26 	bl	8001ca0 <print>
	return 0;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	2000000c 	.word	0x2000000c
 8002464:	0800dcbc 	.word	0x0800dcbc
 8002468:	0800dcd0 	.word	0x0800dcd0
 800246c:	0800dc00 	.word	0x0800dc00

08002470 <nema_toggle>:


int nema_toggle 	(int argc, const char * const * argv)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
	nema_out ^= 1;
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <nema_toggle+0x30>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	f083 0301 	eor.w	r3, r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf14      	ite	ne
 8002488:	2301      	movne	r3, #1
 800248a:	2300      	moveq	r3, #0
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <nema_toggle+0x30>)
 8002490:	701a      	strb	r2, [r3, #0]
	return 0;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	200001b0 	.word	0x200001b0

080024a4 <nema_on>:

int nema_on 		(int argc, const char * const * argv)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
	nema_out = 1;
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <nema_on+0x28>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
	print_color ("NEMA output is ON", C_GREEN);
 80024b4:	2105      	movs	r1, #5
 80024b6:	4806      	ldr	r0, [pc, #24]	; (80024d0 <nema_on+0x2c>)
 80024b8:	f7ff fc5e 	bl	8001d78 <print_color>
	print(ENDL);
 80024bc:	4805      	ldr	r0, [pc, #20]	; (80024d4 <nema_on+0x30>)
 80024be:	f7ff fbef 	bl	8001ca0 <print>
	return 0;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	200001b0 	.word	0x200001b0
 80024d0:	0800dce4 	.word	0x0800dce4
 80024d4:	0800dc00 	.word	0x0800dc00

080024d8 <nema_off>:

int nema_off 		(int argc, const char * const * argv)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
	nema_out = 0;
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <nema_off+0x28>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
	print ("NEM output is OFF");
 80024e8:	4806      	ldr	r0, [pc, #24]	; (8002504 <nema_off+0x2c>)
 80024ea:	f7ff fbd9 	bl	8001ca0 <print>
	print(ENDL);
 80024ee:	4806      	ldr	r0, [pc, #24]	; (8002508 <nema_off+0x30>)
 80024f0:	f7ff fbd6 	bl	8001ca0 <print>
	return 0;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200001b0 	.word	0x200001b0
 8002504:	0800dcf8 	.word	0x0800dcf8
 8002508:	0800dc00 	.word	0x0800dc00

0800250c <show_encoder>:


int show_encoder (int argc, const char * const * argv)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]

	uint32_t buf = encoder_value;
 8002516:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <show_encoder+0x78>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	617b      	str	r3, [r7, #20]
	char str [8];

	for (int i = 0; i < 5; i++)
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	e01d      	b.n	800255e <show_encoder+0x52>
	{
		str[4 - i] = buf % 10 + '0';
 8002522:	6979      	ldr	r1, [r7, #20]
 8002524:	4b18      	ldr	r3, [pc, #96]	; (8002588 <show_encoder+0x7c>)
 8002526:	fba3 2301 	umull	r2, r3, r3, r1
 800252a:	08da      	lsrs	r2, r3, #3
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	1aca      	subs	r2, r1, r3
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f1c3 0304 	rsb	r3, r3, #4
 800253e:	3230      	adds	r2, #48	; 0x30
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	f107 0118 	add.w	r1, r7, #24
 8002546:	440b      	add	r3, r1
 8002548:	f803 2c10 	strb.w	r2, [r3, #-16]
		buf /= 10;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	4a0e      	ldr	r2, [pc, #56]	; (8002588 <show_encoder+0x7c>)
 8002550:	fba2 2303 	umull	r2, r3, r2, r3
 8002554:	08db      	lsrs	r3, r3, #3
 8002556:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 5; i++)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	3301      	adds	r3, #1
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b04      	cmp	r3, #4
 8002562:	ddde      	ble.n	8002522 <show_encoder+0x16>
	}
	str[5] = '\r';
 8002564:	230d      	movs	r3, #13
 8002566:	737b      	strb	r3, [r7, #13]
	str[6] = '\n';
 8002568:	230a      	movs	r3, #10
 800256a:	73bb      	strb	r3, [r7, #14]
	str[7] = '\0';
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]
	print(str);
 8002570:	f107 0308 	add.w	r3, r7, #8
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fb93 	bl	8001ca0 <print>
	return 0;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	200001ac 	.word	0x200001ac
 8002588:	cccccccd 	.word	0xcccccccd

0800258c <get_nema>:


bool get_nema(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
	return nema_out;
 8002590:	4b02      	ldr	r3, [pc, #8]	; (800259c <get_nema+0x10>)
 8002592:	781b      	ldrb	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	200001b0 	.word	0x200001b0

080025a0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80025a4:	4b17      	ldr	r3, [pc, #92]	; (8002604 <MX_SPI2_Init+0x64>)
 80025a6:	4a18      	ldr	r2, [pc, #96]	; (8002608 <MX_SPI2_Init+0x68>)
 80025a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025aa:	4b16      	ldr	r3, [pc, #88]	; (8002604 <MX_SPI2_Init+0x64>)
 80025ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025b2:	4b14      	ldr	r3, [pc, #80]	; (8002604 <MX_SPI2_Init+0x64>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <MX_SPI2_Init+0x64>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <MX_SPI2_Init+0x64>)
 80025c0:	2202      	movs	r2, #2
 80025c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <MX_SPI2_Init+0x64>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <MX_SPI2_Init+0x64>)
 80025cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <MX_SPI2_Init+0x64>)
 80025d4:	2218      	movs	r2, #24
 80025d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80025d8:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <MX_SPI2_Init+0x64>)
 80025da:	2280      	movs	r2, #128	; 0x80
 80025dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <MX_SPI2_Init+0x64>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025e4:	4b07      	ldr	r3, [pc, #28]	; (8002604 <MX_SPI2_Init+0x64>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <MX_SPI2_Init+0x64>)
 80025ec:	220a      	movs	r2, #10
 80025ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025f0:	4804      	ldr	r0, [pc, #16]	; (8002604 <MX_SPI2_Init+0x64>)
 80025f2:	f002 ff3f 	bl	8005474 <HAL_SPI_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80025fc:	f7fe fab4 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20002570 	.word	0x20002570
 8002608:	40003800 	.word	0x40003800

0800260c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0310 	add.w	r3, r7, #16
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1c      	ldr	r2, [pc, #112]	; (8002698 <HAL_SPI_MspInit+0x8c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d131      	bne.n	8002690 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <HAL_SPI_MspInit+0x90>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	4a1a      	ldr	r2, [pc, #104]	; (800269c <HAL_SPI_MspInit+0x90>)
 8002632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002636:	61d3      	str	r3, [r2, #28]
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <HAL_SPI_MspInit+0x90>)
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_SPI_MspInit+0x90>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	4a14      	ldr	r2, [pc, #80]	; (800269c <HAL_SPI_MspInit+0x90>)
 800264a:	f043 0308 	orr.w	r3, r3, #8
 800264e:	6193      	str	r3, [r2, #24]
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_SPI_MspInit+0x90>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800265c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002660:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002666:	2303      	movs	r3, #3
 8002668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266a:	f107 0310 	add.w	r3, r7, #16
 800266e:	4619      	mov	r1, r3
 8002670:	480b      	ldr	r0, [pc, #44]	; (80026a0 <HAL_SPI_MspInit+0x94>)
 8002672:	f000 fb49 	bl	8002d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002676:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800267a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002684:	f107 0310 	add.w	r3, r7, #16
 8002688:	4619      	mov	r1, r3
 800268a:	4805      	ldr	r0, [pc, #20]	; (80026a0 <HAL_SPI_MspInit+0x94>)
 800268c:	f000 fb3c 	bl	8002d08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002690:	bf00      	nop
 8002692:	3720      	adds	r7, #32
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40003800 	.word	0x40003800
 800269c:	40021000 	.word	0x40021000
 80026a0:	40010c00 	.word	0x40010c00

080026a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026aa:	4b18      	ldr	r3, [pc, #96]	; (800270c <HAL_MspInit+0x68>)
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	4a17      	ldr	r2, [pc, #92]	; (800270c <HAL_MspInit+0x68>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6193      	str	r3, [r2, #24]
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <HAL_MspInit+0x68>)
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_MspInit+0x68>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	4a11      	ldr	r2, [pc, #68]	; (800270c <HAL_MspInit+0x68>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026cc:	61d3      	str	r3, [r2, #28]
 80026ce:	4b0f      	ldr	r3, [pc, #60]	; (800270c <HAL_MspInit+0x68>)
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	210f      	movs	r1, #15
 80026de:	f06f 0001 	mvn.w	r0, #1
 80026e2:	f000 fa36 	bl	8002b52 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_MspInit+0x6c>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	4a04      	ldr	r2, [pc, #16]	; (8002710 <HAL_MspInit+0x6c>)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000
 8002710:	40010000 	.word	0x40010000

08002714 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08c      	sub	sp, #48	; 0x30
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002724:	2200      	movs	r2, #0
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	2019      	movs	r0, #25
 800272a:	f000 fa12 	bl	8002b52 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800272e:	2019      	movs	r0, #25
 8002730:	f000 fa2b 	bl	8002b8a <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002734:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <HAL_InitTick+0x9c>)
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <HAL_InitTick+0x9c>)
 800273a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800273e:	6193      	str	r3, [r2, #24]
 8002740:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_InitTick+0x9c>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800274c:	f107 0210 	add.w	r2, r7, #16
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f002 fd88 	bl	800526c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800275c:	f002 fd72 	bl	8005244 <HAL_RCC_GetPCLK2Freq>
 8002760:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <HAL_InitTick+0xa0>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	0c9b      	lsrs	r3, r3, #18
 800276c:	3b01      	subs	r3, #1
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_InitTick+0xa4>)
 8002772:	4a12      	ldr	r2, [pc, #72]	; (80027bc <HAL_InitTick+0xa8>)
 8002774:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <HAL_InitTick+0xa4>)
 8002778:	f240 32e7 	movw	r2, #999	; 0x3e7
 800277c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800277e:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <HAL_InitTick+0xa4>)
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <HAL_InitTick+0xa4>)
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_InitTick+0xa4>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002790:	4809      	ldr	r0, [pc, #36]	; (80027b8 <HAL_InitTick+0xa4>)
 8002792:	f003 f8d5 	bl	8005940 <HAL_TIM_Base_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d104      	bne.n	80027a6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800279c:	4806      	ldr	r0, [pc, #24]	; (80027b8 <HAL_InitTick+0xa4>)
 800279e:	f003 f927 	bl	80059f0 <HAL_TIM_Base_Start_IT>
 80027a2:	4603      	mov	r3, r0
 80027a4:	e000      	b.n	80027a8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3730      	adds	r7, #48	; 0x30
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40021000 	.word	0x40021000
 80027b4:	431bde83 	.word	0x431bde83
 80027b8:	200025c8 	.word	0x200025c8
 80027bc:	40012c00 	.word	0x40012c00

080027c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <NMI_Handler+0x4>

080027c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ca:	e7fe      	b.n	80027ca <HardFault_Handler+0x4>

080027cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027d0:	e7fe      	b.n	80027d0 <MemManage_Handler+0x4>

080027d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027d6:	e7fe      	b.n	80027d6 <BusFault_Handler+0x4>

080027d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027dc:	e7fe      	b.n	80027dc <UsageFault_Handler+0x4>

080027de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80027ee:	2001      	movs	r0, #1
 80027f0:	f000 fc56 	bl	80030a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80027f4:	bf00      	nop
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80027fc:	4802      	ldr	r0, [pc, #8]	; (8002808 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80027fe:	f000 fda2 	bl	8003346 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	2000332c 	.word	0x2000332c

0800280c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <TIM1_UP_IRQHandler+0x10>)
 8002812:	f003 f93f 	bl	8005a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	200025c8 	.word	0x200025c8

08002820 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002824:	4802      	ldr	r0, [pc, #8]	; (8002830 <USART2_IRQHandler+0x10>)
 8002826:	f003 fb53 	bl	8005ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20002610 	.word	0x20002610

08002834 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <MX_USART2_UART_Init+0x4c>)
 8002846:	4a12      	ldr	r2, [pc, #72]	; (8002890 <MX_USART2_UART_Init+0x50>)
 8002848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <MX_USART2_UART_Init+0x4c>)
 800284c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <MX_USART2_UART_Init+0x4c>)
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <MX_USART2_UART_Init+0x4c>)
 800285a:	2200      	movs	r2, #0
 800285c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <MX_USART2_UART_Init+0x4c>)
 8002860:	2200      	movs	r2, #0
 8002862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <MX_USART2_UART_Init+0x4c>)
 8002866:	220c      	movs	r2, #12
 8002868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <MX_USART2_UART_Init+0x4c>)
 800286c:	2200      	movs	r2, #0
 800286e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <MX_USART2_UART_Init+0x4c>)
 8002872:	2200      	movs	r2, #0
 8002874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002876:	4805      	ldr	r0, [pc, #20]	; (800288c <MX_USART2_UART_Init+0x4c>)
 8002878:	f003 faac 	bl	8005dd4 <HAL_UART_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002882:	f7fe f971 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20002610 	.word	0x20002610
 8002890:	40004400 	.word	0x40004400

08002894 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0310 	add.w	r3, r7, #16
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1f      	ldr	r2, [pc, #124]	; (800292c <HAL_UART_MspInit+0x98>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d137      	bne.n	8002924 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028b4:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <HAL_UART_MspInit+0x9c>)
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	4a1d      	ldr	r2, [pc, #116]	; (8002930 <HAL_UART_MspInit+0x9c>)
 80028ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028be:	61d3      	str	r3, [r2, #28]
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_UART_MspInit+0x9c>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028cc:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_UART_MspInit+0x9c>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	4a17      	ldr	r2, [pc, #92]	; (8002930 <HAL_UART_MspInit+0x9c>)
 80028d2:	f043 0304 	orr.w	r3, r3, #4
 80028d6:	6193      	str	r3, [r2, #24]
 80028d8:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_UART_MspInit+0x9c>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028e4:	2304      	movs	r3, #4
 80028e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028ec:	2303      	movs	r3, #3
 80028ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f0:	f107 0310 	add.w	r3, r7, #16
 80028f4:	4619      	mov	r1, r3
 80028f6:	480f      	ldr	r0, [pc, #60]	; (8002934 <HAL_UART_MspInit+0xa0>)
 80028f8:	f000 fa06 	bl	8002d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028fc:	2308      	movs	r3, #8
 80028fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002908:	f107 0310 	add.w	r3, r7, #16
 800290c:	4619      	mov	r1, r3
 800290e:	4809      	ldr	r0, [pc, #36]	; (8002934 <HAL_UART_MspInit+0xa0>)
 8002910:	f000 f9fa 	bl	8002d08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002914:	2200      	movs	r2, #0
 8002916:	2105      	movs	r1, #5
 8002918:	2026      	movs	r0, #38	; 0x26
 800291a:	f000 f91a 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800291e:	2026      	movs	r0, #38	; 0x26
 8002920:	f000 f933 	bl	8002b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002924:	bf00      	nop
 8002926:	3720      	adds	r7, #32
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40004400 	.word	0x40004400
 8002930:	40021000 	.word	0x40021000
 8002934:	40010800 	.word	0x40010800

08002938 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002938:	480c      	ldr	r0, [pc, #48]	; (800296c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800293a:	490d      	ldr	r1, [pc, #52]	; (8002970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800293c:	4a0d      	ldr	r2, [pc, #52]	; (8002974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800293e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002940:	e002      	b.n	8002948 <LoopCopyDataInit>

08002942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002946:	3304      	adds	r3, #4

08002948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800294a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800294c:	d3f9      	bcc.n	8002942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800294e:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002950:	4c0a      	ldr	r4, [pc, #40]	; (800297c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002954:	e001      	b.n	800295a <LoopFillZerobss>

08002956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002958:	3204      	adds	r2, #4

0800295a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800295a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800295c:	d3fb      	bcc.n	8002956 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800295e:	f7ff ff69 	bl	8002834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002962:	f00b f87d 	bl	800da60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002966:	f7fe f87f 	bl	8000a68 <main>
  bx lr
 800296a:	4770      	bx	lr
  ldr r0, =_sdata
 800296c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002970:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8002974:	0800e29c 	.word	0x0800e29c
  ldr r2, =_sbss
 8002978:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 800297c:	20003618 	.word	0x20003618

08002980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002980:	e7fe      	b.n	8002980 <ADC1_2_IRQHandler>
	...

08002984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002988:	4b08      	ldr	r3, [pc, #32]	; (80029ac <HAL_Init+0x28>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a07      	ldr	r2, [pc, #28]	; (80029ac <HAL_Init+0x28>)
 800298e:	f043 0310 	orr.w	r3, r3, #16
 8002992:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002994:	2003      	movs	r0, #3
 8002996:	f000 f8d1 	bl	8002b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800299a:	2000      	movs	r0, #0
 800299c:	f7ff feba 	bl	8002714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a0:	f7ff fe80 	bl	80026a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40022000 	.word	0x40022000

080029b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <HAL_IncTick+0x1c>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <HAL_IncTick+0x20>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4413      	add	r3, r2
 80029c0:	4a03      	ldr	r2, [pc, #12]	; (80029d0 <HAL_IncTick+0x20>)
 80029c2:	6013      	str	r3, [r2, #0]
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	20000018 	.word	0x20000018
 80029d0:	20002654 	.word	0x20002654

080029d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return uwTick;
 80029d8:	4b02      	ldr	r3, [pc, #8]	; (80029e4 <HAL_GetTick+0x10>)
 80029da:	681b      	ldr	r3, [r3, #0]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	20002654 	.word	0x20002654

080029e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a04:	4013      	ands	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a1a:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	60d3      	str	r3, [r2, #12]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <__NVIC_GetPriorityGrouping+0x18>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	f003 0307 	and.w	r3, r3, #7
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	db0b      	blt.n	8002a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	4906      	ldr	r1, [pc, #24]	; (8002a80 <__NVIC_EnableIRQ+0x34>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	e000e100 	.word	0xe000e100

08002a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6039      	str	r1, [r7, #0]
 8002a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	db0a      	blt.n	8002aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	490c      	ldr	r1, [pc, #48]	; (8002ad0 <__NVIC_SetPriority+0x4c>)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	0112      	lsls	r2, r2, #4
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aac:	e00a      	b.n	8002ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4908      	ldr	r1, [pc, #32]	; (8002ad4 <__NVIC_SetPriority+0x50>)
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	3b04      	subs	r3, #4
 8002abc:	0112      	lsls	r2, r2, #4
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	761a      	strb	r2, [r3, #24]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000e100 	.word	0xe000e100
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f1c3 0307 	rsb	r3, r3, #7
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	bf28      	it	cs
 8002af6:	2304      	movcs	r3, #4
 8002af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d902      	bls.n	8002b08 <NVIC_EncodePriority+0x30>
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3b03      	subs	r3, #3
 8002b06:	e000      	b.n	8002b0a <NVIC_EncodePriority+0x32>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43da      	mvns	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b20:	f04f 31ff 	mov.w	r1, #4294967295
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	43d9      	mvns	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	4313      	orrs	r3, r2
         );
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3724      	adds	r7, #36	; 0x24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff ff4f 	bl	80029e8 <__NVIC_SetPriorityGrouping>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b64:	f7ff ff64 	bl	8002a30 <__NVIC_GetPriorityGrouping>
 8002b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	6978      	ldr	r0, [r7, #20]
 8002b70:	f7ff ffb2 	bl	8002ad8 <NVIC_EncodePriority>
 8002b74:	4602      	mov	r2, r0
 8002b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff81 	bl	8002a84 <__NVIC_SetPriority>
}
 8002b82:	bf00      	nop
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	4603      	mov	r3, r0
 8002b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff57 	bl	8002a4c <__NVIC_EnableIRQ>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b085      	sub	sp, #20
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d008      	beq.n	8002bce <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e020      	b.n	8002c10 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 020e 	bic.w	r2, r2, #14
 8002bdc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0201 	bic.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr
	...

08002c1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d005      	beq.n	8002c3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2204      	movs	r2, #4
 8002c36:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
 8002c3c:	e051      	b.n	8002ce2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 020e 	bic.w	r2, r2, #14
 8002c4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0201 	bic.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a22      	ldr	r2, [pc, #136]	; (8002cec <HAL_DMA_Abort_IT+0xd0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d029      	beq.n	8002cbc <HAL_DMA_Abort_IT+0xa0>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a20      	ldr	r2, [pc, #128]	; (8002cf0 <HAL_DMA_Abort_IT+0xd4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d022      	beq.n	8002cb8 <HAL_DMA_Abort_IT+0x9c>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a1f      	ldr	r2, [pc, #124]	; (8002cf4 <HAL_DMA_Abort_IT+0xd8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d01a      	beq.n	8002cb2 <HAL_DMA_Abort_IT+0x96>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <HAL_DMA_Abort_IT+0xdc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d012      	beq.n	8002cac <HAL_DMA_Abort_IT+0x90>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1c      	ldr	r2, [pc, #112]	; (8002cfc <HAL_DMA_Abort_IT+0xe0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_DMA_Abort_IT+0x8a>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a1a      	ldr	r2, [pc, #104]	; (8002d00 <HAL_DMA_Abort_IT+0xe4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d102      	bne.n	8002ca0 <HAL_DMA_Abort_IT+0x84>
 8002c9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c9e:	e00e      	b.n	8002cbe <HAL_DMA_Abort_IT+0xa2>
 8002ca0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ca4:	e00b      	b.n	8002cbe <HAL_DMA_Abort_IT+0xa2>
 8002ca6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002caa:	e008      	b.n	8002cbe <HAL_DMA_Abort_IT+0xa2>
 8002cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb0:	e005      	b.n	8002cbe <HAL_DMA_Abort_IT+0xa2>
 8002cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cb6:	e002      	b.n	8002cbe <HAL_DMA_Abort_IT+0xa2>
 8002cb8:	2310      	movs	r3, #16
 8002cba:	e000      	b.n	8002cbe <HAL_DMA_Abort_IT+0xa2>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	4a11      	ldr	r2, [pc, #68]	; (8002d04 <HAL_DMA_Abort_IT+0xe8>)
 8002cc0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	4798      	blx	r3
    } 
  }
  return status;
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40020008 	.word	0x40020008
 8002cf0:	4002001c 	.word	0x4002001c
 8002cf4:	40020030 	.word	0x40020030
 8002cf8:	40020044 	.word	0x40020044
 8002cfc:	40020058 	.word	0x40020058
 8002d00:	4002006c 	.word	0x4002006c
 8002d04:	40020000 	.word	0x40020000

08002d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b08b      	sub	sp, #44	; 0x2c
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d12:	2300      	movs	r3, #0
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d16:	2300      	movs	r3, #0
 8002d18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d1a:	e169      	b.n	8002ff0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	f040 8158 	bne.w	8002fea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4a9a      	ldr	r2, [pc, #616]	; (8002fa8 <HAL_GPIO_Init+0x2a0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d05e      	beq.n	8002e02 <HAL_GPIO_Init+0xfa>
 8002d44:	4a98      	ldr	r2, [pc, #608]	; (8002fa8 <HAL_GPIO_Init+0x2a0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d875      	bhi.n	8002e36 <HAL_GPIO_Init+0x12e>
 8002d4a:	4a98      	ldr	r2, [pc, #608]	; (8002fac <HAL_GPIO_Init+0x2a4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d058      	beq.n	8002e02 <HAL_GPIO_Init+0xfa>
 8002d50:	4a96      	ldr	r2, [pc, #600]	; (8002fac <HAL_GPIO_Init+0x2a4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d86f      	bhi.n	8002e36 <HAL_GPIO_Init+0x12e>
 8002d56:	4a96      	ldr	r2, [pc, #600]	; (8002fb0 <HAL_GPIO_Init+0x2a8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d052      	beq.n	8002e02 <HAL_GPIO_Init+0xfa>
 8002d5c:	4a94      	ldr	r2, [pc, #592]	; (8002fb0 <HAL_GPIO_Init+0x2a8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d869      	bhi.n	8002e36 <HAL_GPIO_Init+0x12e>
 8002d62:	4a94      	ldr	r2, [pc, #592]	; (8002fb4 <HAL_GPIO_Init+0x2ac>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d04c      	beq.n	8002e02 <HAL_GPIO_Init+0xfa>
 8002d68:	4a92      	ldr	r2, [pc, #584]	; (8002fb4 <HAL_GPIO_Init+0x2ac>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d863      	bhi.n	8002e36 <HAL_GPIO_Init+0x12e>
 8002d6e:	4a92      	ldr	r2, [pc, #584]	; (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d046      	beq.n	8002e02 <HAL_GPIO_Init+0xfa>
 8002d74:	4a90      	ldr	r2, [pc, #576]	; (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d85d      	bhi.n	8002e36 <HAL_GPIO_Init+0x12e>
 8002d7a:	2b12      	cmp	r3, #18
 8002d7c:	d82a      	bhi.n	8002dd4 <HAL_GPIO_Init+0xcc>
 8002d7e:	2b12      	cmp	r3, #18
 8002d80:	d859      	bhi.n	8002e36 <HAL_GPIO_Init+0x12e>
 8002d82:	a201      	add	r2, pc, #4	; (adr r2, 8002d88 <HAL_GPIO_Init+0x80>)
 8002d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d88:	08002e03 	.word	0x08002e03
 8002d8c:	08002ddd 	.word	0x08002ddd
 8002d90:	08002def 	.word	0x08002def
 8002d94:	08002e31 	.word	0x08002e31
 8002d98:	08002e37 	.word	0x08002e37
 8002d9c:	08002e37 	.word	0x08002e37
 8002da0:	08002e37 	.word	0x08002e37
 8002da4:	08002e37 	.word	0x08002e37
 8002da8:	08002e37 	.word	0x08002e37
 8002dac:	08002e37 	.word	0x08002e37
 8002db0:	08002e37 	.word	0x08002e37
 8002db4:	08002e37 	.word	0x08002e37
 8002db8:	08002e37 	.word	0x08002e37
 8002dbc:	08002e37 	.word	0x08002e37
 8002dc0:	08002e37 	.word	0x08002e37
 8002dc4:	08002e37 	.word	0x08002e37
 8002dc8:	08002e37 	.word	0x08002e37
 8002dcc:	08002de5 	.word	0x08002de5
 8002dd0:	08002df9 	.word	0x08002df9
 8002dd4:	4a79      	ldr	r2, [pc, #484]	; (8002fbc <HAL_GPIO_Init+0x2b4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002dda:	e02c      	b.n	8002e36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	623b      	str	r3, [r7, #32]
          break;
 8002de2:	e029      	b.n	8002e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	3304      	adds	r3, #4
 8002dea:	623b      	str	r3, [r7, #32]
          break;
 8002dec:	e024      	b.n	8002e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	3308      	adds	r3, #8
 8002df4:	623b      	str	r3, [r7, #32]
          break;
 8002df6:	e01f      	b.n	8002e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	623b      	str	r3, [r7, #32]
          break;
 8002e00:	e01a      	b.n	8002e38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	623b      	str	r3, [r7, #32]
          break;
 8002e0e:	e013      	b.n	8002e38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d105      	bne.n	8002e24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e18:	2308      	movs	r3, #8
 8002e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69fa      	ldr	r2, [r7, #28]
 8002e20:	611a      	str	r2, [r3, #16]
          break;
 8002e22:	e009      	b.n	8002e38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e24:	2308      	movs	r3, #8
 8002e26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	615a      	str	r2, [r3, #20]
          break;
 8002e2e:	e003      	b.n	8002e38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e30:	2300      	movs	r3, #0
 8002e32:	623b      	str	r3, [r7, #32]
          break;
 8002e34:	e000      	b.n	8002e38 <HAL_GPIO_Init+0x130>
          break;
 8002e36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	2bff      	cmp	r3, #255	; 0xff
 8002e3c:	d801      	bhi.n	8002e42 <HAL_GPIO_Init+0x13a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	e001      	b.n	8002e46 <HAL_GPIO_Init+0x13e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3304      	adds	r3, #4
 8002e46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2bff      	cmp	r3, #255	; 0xff
 8002e4c:	d802      	bhi.n	8002e54 <HAL_GPIO_Init+0x14c>
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	e002      	b.n	8002e5a <HAL_GPIO_Init+0x152>
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	3b08      	subs	r3, #8
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	210f      	movs	r1, #15
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	fa01 f303 	lsl.w	r3, r1, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	6a39      	ldr	r1, [r7, #32]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	fa01 f303 	lsl.w	r3, r1, r3
 8002e74:	431a      	orrs	r2, r3
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 80b1 	beq.w	8002fea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e88:	4b4d      	ldr	r3, [pc, #308]	; (8002fc0 <HAL_GPIO_Init+0x2b8>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	4a4c      	ldr	r2, [pc, #304]	; (8002fc0 <HAL_GPIO_Init+0x2b8>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6193      	str	r3, [r2, #24]
 8002e94:	4b4a      	ldr	r3, [pc, #296]	; (8002fc0 <HAL_GPIO_Init+0x2b8>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ea0:	4a48      	ldr	r2, [pc, #288]	; (8002fc4 <HAL_GPIO_Init+0x2bc>)
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	220f      	movs	r2, #15
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a40      	ldr	r2, [pc, #256]	; (8002fc8 <HAL_GPIO_Init+0x2c0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d013      	beq.n	8002ef4 <HAL_GPIO_Init+0x1ec>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a3f      	ldr	r2, [pc, #252]	; (8002fcc <HAL_GPIO_Init+0x2c4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00d      	beq.n	8002ef0 <HAL_GPIO_Init+0x1e8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a3e      	ldr	r2, [pc, #248]	; (8002fd0 <HAL_GPIO_Init+0x2c8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d007      	beq.n	8002eec <HAL_GPIO_Init+0x1e4>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a3d      	ldr	r2, [pc, #244]	; (8002fd4 <HAL_GPIO_Init+0x2cc>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d101      	bne.n	8002ee8 <HAL_GPIO_Init+0x1e0>
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e006      	b.n	8002ef6 <HAL_GPIO_Init+0x1ee>
 8002ee8:	2304      	movs	r3, #4
 8002eea:	e004      	b.n	8002ef6 <HAL_GPIO_Init+0x1ee>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e002      	b.n	8002ef6 <HAL_GPIO_Init+0x1ee>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <HAL_GPIO_Init+0x1ee>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef8:	f002 0203 	and.w	r2, r2, #3
 8002efc:	0092      	lsls	r2, r2, #2
 8002efe:	4093      	lsls	r3, r2
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f06:	492f      	ldr	r1, [pc, #188]	; (8002fc4 <HAL_GPIO_Init+0x2bc>)
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	089b      	lsrs	r3, r3, #2
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d006      	beq.n	8002f2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f20:	4b2d      	ldr	r3, [pc, #180]	; (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	492c      	ldr	r1, [pc, #176]	; (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]
 8002f2c:	e006      	b.n	8002f3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f2e:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	4928      	ldr	r1, [pc, #160]	; (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d006      	beq.n	8002f56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f48:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	4922      	ldr	r1, [pc, #136]	; (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]
 8002f54:	e006      	b.n	8002f64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f56:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	491e      	ldr	r1, [pc, #120]	; (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d006      	beq.n	8002f7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f70:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	4918      	ldr	r1, [pc, #96]	; (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	608b      	str	r3, [r1, #8]
 8002f7c:	e006      	b.n	8002f8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f7e:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	4914      	ldr	r1, [pc, #80]	; (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d021      	beq.n	8002fdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	490e      	ldr	r1, [pc, #56]	; (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60cb      	str	r3, [r1, #12]
 8002fa4:	e021      	b.n	8002fea <HAL_GPIO_Init+0x2e2>
 8002fa6:	bf00      	nop
 8002fa8:	10320000 	.word	0x10320000
 8002fac:	10310000 	.word	0x10310000
 8002fb0:	10220000 	.word	0x10220000
 8002fb4:	10210000 	.word	0x10210000
 8002fb8:	10120000 	.word	0x10120000
 8002fbc:	10110000 	.word	0x10110000
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40010000 	.word	0x40010000
 8002fc8:	40010800 	.word	0x40010800
 8002fcc:	40010c00 	.word	0x40010c00
 8002fd0:	40011000 	.word	0x40011000
 8002fd4:	40011400 	.word	0x40011400
 8002fd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_GPIO_Init+0x304>)
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	4909      	ldr	r1, [pc, #36]	; (800300c <HAL_GPIO_Init+0x304>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	3301      	adds	r3, #1
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f47f ae8e 	bne.w	8002d1c <HAL_GPIO_Init+0x14>
  }
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop
 8003004:	372c      	adds	r7, #44	; 0x2c
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr
 800300c:	40010400 	.word	0x40010400

08003010 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	887b      	ldrh	r3, [r7, #2]
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003028:	2301      	movs	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
 800302c:	e001      	b.n	8003032 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800302e:	2300      	movs	r3, #0
 8003030:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003032:	7bfb      	ldrb	r3, [r7, #15]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	807b      	strh	r3, [r7, #2]
 800304a:	4613      	mov	r3, r2
 800304c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800304e:	787b      	ldrb	r3, [r7, #1]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003054:	887a      	ldrh	r2, [r7, #2]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800305a:	e003      	b.n	8003064 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	041a      	lsls	r2, r3, #16
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	611a      	str	r2, [r3, #16]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr

0800306e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800306e:	b480      	push	{r7}
 8003070:	b085      	sub	sp, #20
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	460b      	mov	r3, r1
 8003078:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003080:	887a      	ldrh	r2, [r7, #2]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4013      	ands	r3, r2
 8003086:	041a      	lsls	r2, r3, #16
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	43d9      	mvns	r1, r3
 800308c:	887b      	ldrh	r3, [r7, #2]
 800308e:	400b      	ands	r3, r1
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	611a      	str	r2, [r3, #16]
}
 8003096:	bf00      	nop
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030aa:	4b08      	ldr	r3, [pc, #32]	; (80030cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d006      	beq.n	80030c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030b6:	4a05      	ldr	r2, [pc, #20]	; (80030cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030bc:	88fb      	ldrh	r3, [r7, #6]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f806 	bl	80030d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40010400 	.word	0x40010400

080030d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030e6:	b08b      	sub	sp, #44	; 0x2c
 80030e8:	af06      	add	r7, sp, #24
 80030ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e0fd      	b.n	80032f2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f00a f9fe 	bl	800d50c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2203      	movs	r2, #3
 8003114:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f003 fadb 	bl	80066d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	687e      	ldr	r6, [r7, #4]
 800312a:	466d      	mov	r5, sp
 800312c:	f106 0410 	add.w	r4, r6, #16
 8003130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	602b      	str	r3, [r5, #0]
 8003138:	1d33      	adds	r3, r6, #4
 800313a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800313c:	6838      	ldr	r0, [r7, #0]
 800313e:	f003 faa5 	bl	800668c <USB_CoreInit>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0ce      	b.n	80032f2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2100      	movs	r1, #0
 800315a:	4618      	mov	r0, r3
 800315c:	f003 fad6 	bl	800670c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003160:	2300      	movs	r3, #0
 8003162:	73fb      	strb	r3, [r7, #15]
 8003164:	e04c      	b.n	8003200 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	440b      	add	r3, r1
 8003176:	3301      	adds	r3, #1
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	440b      	add	r3, r1
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	b298      	uxth	r0, r3
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	440b      	add	r3, r1
 80031a2:	3336      	adds	r3, #54	; 0x36
 80031a4:	4602      	mov	r2, r0
 80031a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	440b      	add	r3, r1
 80031b8:	3303      	adds	r3, #3
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031be:	7bfa      	ldrb	r2, [r7, #15]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	440b      	add	r3, r1
 80031cc:	3338      	adds	r3, #56	; 0x38
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	440b      	add	r3, r1
 80031e0:	333c      	adds	r3, #60	; 0x3c
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031e6:	7bfa      	ldrb	r2, [r7, #15]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	440b      	add	r3, r1
 80031f4:	3340      	adds	r3, #64	; 0x40
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	3301      	adds	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	429a      	cmp	r2, r3
 8003208:	d3ad      	bcc.n	8003166 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]
 800320e:	e044      	b.n	800329a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003210:	7bfa      	ldrb	r2, [r7, #15]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	440b      	add	r3, r1
 800321e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003226:	7bfa      	ldrb	r2, [r7, #15]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	440b      	add	r3, r1
 8003234:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800324e:	2200      	movs	r2, #0
 8003250:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003252:	7bfa      	ldrb	r2, [r7, #15]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	440b      	add	r3, r1
 8003260:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003268:	7bfa      	ldrb	r2, [r7, #15]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	440b      	add	r3, r1
 8003276:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800327e:	7bfa      	ldrb	r2, [r7, #15]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	440b      	add	r3, r1
 800328c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	3301      	adds	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
 800329a:	7bfa      	ldrb	r2, [r7, #15]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d3b5      	bcc.n	8003210 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	687e      	ldr	r6, [r7, #4]
 80032ac:	466d      	mov	r5, sp
 80032ae:	f106 0410 	add.w	r4, r6, #16
 80032b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	602b      	str	r3, [r5, #0]
 80032ba:	1d33      	adds	r3, r6, #4
 80032bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032be:	6838      	ldr	r0, [r7, #0]
 80032c0:	f003 fa30 	bl	8006724 <USB_DevInit>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2202      	movs	r2, #2
 80032ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e00d      	b.n	80032f2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f005 fba1 	bl	8008a32 <USB_DevDisconnect>

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_PCD_Start+0x16>
 800330c:	2302      	movs	r3, #2
 800330e:	e016      	b.n	800333e <HAL_PCD_Start+0x44>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f003 f9c5 	bl	80066ac <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003322:	2101      	movs	r1, #1
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f00a fb64 	bl	800d9f2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f005 fb75 	bl	8008a1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b088      	sub	sp, #32
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f005 fb77 	bl	8008a46 <USB_ReadInterrupts>
 8003358:	4603      	mov	r3, r0
 800335a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800335e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003362:	d102      	bne.n	800336a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fb61 	bl	8003a2c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f005 fb69 	bl	8008a46 <USB_ReadInterrupts>
 8003374:	4603      	mov	r3, r0
 8003376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337e:	d112      	bne.n	80033a6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003388:	b29a      	uxth	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003392:	b292      	uxth	r2, r2
 8003394:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f00a f932 	bl	800d602 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800339e:	2100      	movs	r1, #0
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f925 	bl	80035f0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f005 fb4b 	bl	8008a46 <USB_ReadInterrupts>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ba:	d10b      	bne.n	80033d4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033ce:	b292      	uxth	r2, r2
 80033d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f005 fb34 	bl	8008a46 <USB_ReadInterrupts>
 80033de:	4603      	mov	r3, r0
 80033e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e8:	d10b      	bne.n	8003402 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033fc:	b292      	uxth	r2, r2
 80033fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f005 fb1d 	bl	8008a46 <USB_ReadInterrupts>
 800340c:	4603      	mov	r3, r0
 800340e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003416:	d126      	bne.n	8003466 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003420:	b29a      	uxth	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0204 	bic.w	r2, r2, #4
 800342a:	b292      	uxth	r2, r2
 800342c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003438:	b29a      	uxth	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0208 	bic.w	r2, r2, #8
 8003442:	b292      	uxth	r2, r2
 8003444:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f00a f913 	bl	800d674 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003456:	b29a      	uxth	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003460:	b292      	uxth	r2, r2
 8003462:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f005 faeb 	bl	8008a46 <USB_ReadInterrupts>
 8003470:	4603      	mov	r3, r0
 8003472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800347a:	f040 8084 	bne.w	8003586 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800347e:	2300      	movs	r3, #0
 8003480:	77fb      	strb	r3, [r7, #31]
 8003482:	e011      	b.n	80034a8 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	7ffb      	ldrb	r3, [r7, #31]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	441a      	add	r2, r3
 8003490:	7ffb      	ldrb	r3, [r7, #31]
 8003492:	8812      	ldrh	r2, [r2, #0]
 8003494:	b292      	uxth	r2, r2
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	f107 0120 	add.w	r1, r7, #32
 800349c:	440b      	add	r3, r1
 800349e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80034a2:	7ffb      	ldrb	r3, [r7, #31]
 80034a4:	3301      	adds	r3, #1
 80034a6:	77fb      	strb	r3, [r7, #31]
 80034a8:	7ffb      	ldrb	r3, [r7, #31]
 80034aa:	2b07      	cmp	r3, #7
 80034ac:	d9ea      	bls.n	8003484 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 0201 	orr.w	r2, r2, #1
 80034c0:	b292      	uxth	r2, r2
 80034c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	b292      	uxth	r2, r2
 80034da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80034de:	bf00      	nop
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f6      	beq.n	80034e0 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003504:	b292      	uxth	r2, r2
 8003506:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800350a:	2300      	movs	r3, #0
 800350c:	77fb      	strb	r3, [r7, #31]
 800350e:	e010      	b.n	8003532 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003510:	7ffb      	ldrb	r3, [r7, #31]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	4611      	mov	r1, r2
 8003518:	7ffa      	ldrb	r2, [r7, #31]
 800351a:	0092      	lsls	r2, r2, #2
 800351c:	440a      	add	r2, r1
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	f107 0120 	add.w	r1, r7, #32
 8003524:	440b      	add	r3, r1
 8003526:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800352a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800352c:	7ffb      	ldrb	r3, [r7, #31]
 800352e:	3301      	adds	r3, #1
 8003530:	77fb      	strb	r3, [r7, #31]
 8003532:	7ffb      	ldrb	r3, [r7, #31]
 8003534:	2b07      	cmp	r3, #7
 8003536:	d9eb      	bls.n	8003510 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003540:	b29a      	uxth	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0208 	orr.w	r2, r2, #8
 800354a:	b292      	uxth	r2, r2
 800354c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003558:	b29a      	uxth	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003562:	b292      	uxth	r2, r2
 8003564:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003570:	b29a      	uxth	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0204 	orr.w	r2, r2, #4
 800357a:	b292      	uxth	r2, r2
 800357c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f00a f85d 	bl	800d640 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f005 fa5b 	bl	8008a46 <USB_ReadInterrupts>
 8003590:	4603      	mov	r3, r0
 8003592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800359a:	d10e      	bne.n	80035ba <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035ae:	b292      	uxth	r2, r2
 80035b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f00a f816 	bl	800d5e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f005 fa41 	bl	8008a46 <USB_ReadInterrupts>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ce:	d10b      	bne.n	80035e8 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035d8:	b29a      	uxth	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035e2:	b292      	uxth	r2, r2
 80035e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80035e8:	bf00      	nop
 80035ea:	3720      	adds	r7, #32
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_PCD_SetAddress+0x1a>
 8003606:	2302      	movs	r3, #2
 8003608:	e013      	b.n	8003632 <HAL_PCD_SetAddress+0x42>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f005 f9e8 	bl	80089f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	4608      	mov	r0, r1
 8003644:	4611      	mov	r1, r2
 8003646:	461a      	mov	r2, r3
 8003648:	4603      	mov	r3, r0
 800364a:	70fb      	strb	r3, [r7, #3]
 800364c:	460b      	mov	r3, r1
 800364e:	803b      	strh	r3, [r7, #0]
 8003650:	4613      	mov	r3, r2
 8003652:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800365c:	2b00      	cmp	r3, #0
 800365e:	da0e      	bge.n	800367e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4413      	add	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	705a      	strb	r2, [r3, #1]
 800367c:	e00e      	b.n	800369c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	f003 0207 	and.w	r2, r3, #7
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	4413      	add	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036a8:	883a      	ldrh	r2, [r7, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	78ba      	ldrb	r2, [r7, #2]
 80036b2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	785b      	ldrb	r3, [r3, #1]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d004      	beq.n	80036c6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036c6:	78bb      	ldrb	r3, [r7, #2]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d102      	bne.n	80036d2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_PCD_EP_Open+0xa6>
 80036dc:	2302      	movs	r3, #2
 80036de:	e00e      	b.n	80036fe <HAL_PCD_EP_Open+0xc4>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68f9      	ldr	r1, [r7, #12]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f003 f838 	bl	8006764 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80036fc:	7afb      	ldrb	r3, [r7, #11]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	460b      	mov	r3, r1
 8003710:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003712:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003716:	2b00      	cmp	r3, #0
 8003718:	da0e      	bge.n	8003738 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	705a      	strb	r2, [r3, #1]
 8003736:	e00e      	b.n	8003756 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	f003 0207 	and.w	r2, r3, #7
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	b2da      	uxtb	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_PCD_EP_Close+0x6a>
 800376c:	2302      	movs	r3, #2
 800376e:	e00e      	b.n	800378e <HAL_PCD_EP_Close+0x88>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68f9      	ldr	r1, [r7, #12]
 800377e:	4618      	mov	r0, r3
 8003780:	f003 fb5a 	bl	8006e38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b086      	sub	sp, #24
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
 80037a2:	460b      	mov	r3, r1
 80037a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037a6:	7afb      	ldrb	r3, [r7, #11]
 80037a8:	f003 0207 	and.w	r2, r3, #7
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4413      	add	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2200      	movs	r2, #0
 80037ce:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2200      	movs	r2, #0
 80037d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037d6:	7afb      	ldrb	r3, [r7, #11]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037e2:	7afb      	ldrb	r3, [r7, #11]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d106      	bne.n	80037fa <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6979      	ldr	r1, [r7, #20]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f003 fd0c 	bl	8007210 <USB_EPStartXfer>
 80037f8:	e005      	b.n	8003806 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6979      	ldr	r1, [r7, #20]
 8003800:	4618      	mov	r0, r3
 8003802:	f003 fd05 	bl	8007210 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	f003 0207 	and.w	r2, r3, #7
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	440b      	add	r3, r1
 800382e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003832:	681b      	ldr	r3, [r3, #0]
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr

0800383e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b086      	sub	sp, #24
 8003842:	af00      	add	r7, sp, #0
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	460b      	mov	r3, r1
 800384c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800384e:	7afb      	ldrb	r3, [r7, #11]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4413      	add	r3, r2
 8003862:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2200      	movs	r2, #0
 8003882:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2201      	movs	r2, #1
 8003888:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800388a:	7afb      	ldrb	r3, [r7, #11]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	b2da      	uxtb	r2, r3
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003896:	7afb      	ldrb	r3, [r7, #11]
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	2b00      	cmp	r3, #0
 800389e:	d106      	bne.n	80038ae <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6979      	ldr	r1, [r7, #20]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f003 fcb2 	bl	8007210 <USB_EPStartXfer>
 80038ac:	e005      	b.n	80038ba <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6979      	ldr	r1, [r7, #20]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f003 fcab 	bl	8007210 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	f003 0207 	and.w	r2, r3, #7
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d901      	bls.n	80038e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e04c      	b.n	800397c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	da0e      	bge.n	8003908 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ea:	78fb      	ldrb	r3, [r7, #3]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	705a      	strb	r2, [r3, #1]
 8003906:	e00c      	b.n	8003922 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003908:	78fa      	ldrb	r2, [r7, #3]
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	b2da      	uxtb	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <HAL_PCD_EP_SetStall+0x7e>
 800393e:	2302      	movs	r3, #2
 8003940:	e01c      	b.n	800397c <HAL_PCD_EP_SetStall+0xb8>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68f9      	ldr	r1, [r7, #12]
 8003950:	4618      	mov	r0, r3
 8003952:	f004 ff54 	bl	80087fe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	2b00      	cmp	r3, #0
 800395e:	d108      	bne.n	8003972 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800396a:	4619      	mov	r1, r3
 800396c:	4610      	mov	r0, r2
 800396e:	f005 f879 	bl	8008a64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	f003 020f 	and.w	r2, r3, #15
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	429a      	cmp	r2, r3
 800399c:	d901      	bls.n	80039a2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e040      	b.n	8003a24 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	da0e      	bge.n	80039c8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	705a      	strb	r2, [r3, #1]
 80039c6:	e00e      	b.n	80039e6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	f003 0207 	and.w	r2, r3, #7
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_PCD_EP_ClrStall+0x82>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e00e      	b.n	8003a24 <HAL_PCD_EP_ClrStall+0xa0>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68f9      	ldr	r1, [r7, #12]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f004 ff42 	bl	800889e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08e      	sub	sp, #56	; 0x38
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a34:	e2ec      	b.n	8004010 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a3e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003a40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003a4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f040 8161 	bne.w	8003d18 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003a56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d152      	bne.n	8003b06 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a70:	81fb      	strh	r3, [r7, #14]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	89fb      	ldrh	r3, [r7, #14]
 8003a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3328      	adds	r3, #40	; 0x28
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	461a      	mov	r2, r3
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3302      	adds	r3, #2
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6812      	ldr	r2, [r2, #0]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	695a      	ldr	r2, [r3, #20]
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	441a      	add	r2, r3
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f009 fd73 	bl	800d5b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 829b 	beq.w	8004010 <PCD_EP_ISR_Handler+0x5e4>
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f040 8296 	bne.w	8004010 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	b292      	uxth	r2, r2
 8003af8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b04:	e284      	b.n	8004010 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003b16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d034      	beq.n	8003b8a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4413      	add	r3, r2
 8003b34:	3306      	adds	r3, #6
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	f004 ffd0 	bl	8008b04 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003b70:	4013      	ands	r3, r2
 8003b72:	823b      	strh	r3, [r7, #16]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	8a3a      	ldrh	r2, [r7, #16]
 8003b7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b7e:	b292      	uxth	r2, r2
 8003b80:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f009 fce8 	bl	800d558 <HAL_PCD_SetupStageCallback>
 8003b88:	e242      	b.n	8004010 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b8a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f280 823e 	bge.w	8004010 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	83bb      	strh	r3, [r7, #28]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	8bba      	ldrh	r2, [r7, #28]
 8003baa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bae:	b292      	uxth	r2, r2
 8003bb0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3306      	adds	r3, #6
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d019      	beq.n	8003c1a <PCD_EP_ISR_Handler+0x1ee>
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d015      	beq.n	8003c1a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	6959      	ldr	r1, [r3, #20]
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f004 ff80 	bl	8008b04 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	695a      	ldr	r2, [r3, #20]
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	441a      	add	r2, r3
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003c12:	2100      	movs	r1, #0
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f009 fcb1 	bl	800d57c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f040 81f2 	bne.w	8004010 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	4413      	add	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d112      	bne.n	8003c7a <PCD_EP_ISR_Handler+0x24e>
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	801a      	strh	r2, [r3, #0]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	801a      	strh	r2, [r3, #0]
 8003c78:	e02f      	b.n	8003cda <PCD_EP_ISR_Handler+0x2ae>
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2b3e      	cmp	r3, #62	; 0x3e
 8003c80:	d813      	bhi.n	8003caa <PCD_EP_ISR_Handler+0x27e>
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	085b      	lsrs	r3, r3, #1
 8003c88:	633b      	str	r3, [r7, #48]	; 0x30
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <PCD_EP_ISR_Handler+0x270>
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	3301      	adds	r3, #1
 8003c9a:	633b      	str	r3, [r7, #48]	; 0x30
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	029b      	lsls	r3, r3, #10
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	801a      	strh	r2, [r3, #0]
 8003ca8:	e017      	b.n	8003cda <PCD_EP_ISR_Handler+0x2ae>
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	633b      	str	r3, [r7, #48]	; 0x30
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d102      	bne.n	8003cc4 <PCD_EP_ISR_Handler+0x298>
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	029b      	lsls	r3, r3, #10
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cea:	827b      	strh	r3, [r7, #18]
 8003cec:	8a7b      	ldrh	r3, [r7, #18]
 8003cee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003cf2:	827b      	strh	r3, [r7, #18]
 8003cf4:	8a7b      	ldrh	r3, [r7, #18]
 8003cf6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003cfa:	827b      	strh	r3, [r7, #18]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	8a7b      	ldrh	r3, [r7, #18]
 8003d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	8013      	strh	r3, [r2, #0]
 8003d16:	e17b      	b.n	8004010 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d2a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f280 80ea 	bge.w	8003f08 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	853b      	strh	r3, [r7, #40]	; 0x28
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003d5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d62:	b292      	uxth	r2, r2
 8003d64:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003d66:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	4413      	add	r3, r2
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	7b1b      	ldrb	r3, [r3, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d122      	bne.n	8003dca <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	4413      	add	r3, r2
 8003d98:	3306      	adds	r3, #6
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dac:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003dae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 8087 	beq.w	8003ec4 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	6959      	ldr	r1, [r3, #20]
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	88da      	ldrh	r2, [r3, #6]
 8003dc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003dc4:	f004 fe9e 	bl	8008b04 <USB_ReadPMA>
 8003dc8:	e07c      	b.n	8003ec4 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	78db      	ldrb	r3, [r3, #3]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d108      	bne.n	8003de4 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003dd2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f927 	bl	800402c <HAL_PCD_EP_DB_Receive>
 8003dde:	4603      	mov	r3, r0
 8003de0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003de2:	e06f      	b.n	8003ec4 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfe:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	461a      	mov	r2, r3
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	441a      	add	r2, r3
 8003e0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d021      	beq.n	8003e82 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4413      	add	r3, r2
 8003e52:	3302      	adds	r3, #2
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e66:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003e68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d02a      	beq.n	8003ec4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	6959      	ldr	r1, [r3, #20]
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	891a      	ldrh	r2, [r3, #8]
 8003e7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e7c:	f004 fe42 	bl	8008b04 <USB_ReadPMA>
 8003e80:	e020      	b.n	8003ec4 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4413      	add	r3, r2
 8003e96:	3306      	adds	r3, #6
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eaa:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003eac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d008      	beq.n	8003ec4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	6959      	ldr	r1, [r3, #20]
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	895a      	ldrh	r2, [r3, #10]
 8003ebe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ec0:	f004 fe20 	bl	8008b04 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	69da      	ldr	r2, [r3, #28]
 8003ec8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003eca:	441a      	add	r2, r3
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	695a      	ldr	r2, [r3, #20]
 8003ed4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ed6:	441a      	add	r2, r3
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d004      	beq.n	8003eee <PCD_EP_ISR_Handler+0x4c2>
 8003ee4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d206      	bcs.n	8003efc <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f009 fb41 	bl	800d57c <HAL_PCD_DataOutStageCallback>
 8003efa:	e005      	b.n	8003f08 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f02:	4618      	mov	r0, r3
 8003f04:	f003 f984 	bl	8007210 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003f08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d07e      	beq.n	8004010 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003f12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	4413      	add	r3, r2
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f40:	843b      	strh	r3, [r7, #32]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	441a      	add	r2, r3
 8003f50:	8c3b      	ldrh	r3, [r7, #32]
 8003f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	78db      	ldrb	r3, [r3, #3]
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d00c      	beq.n	8003f80 <PCD_EP_ISR_Handler+0x554>
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	78db      	ldrb	r3, [r3, #3]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d008      	beq.n	8003f80 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d146      	bne.n	8004004 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003f76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d141      	bne.n	8004004 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	4413      	add	r3, r2
 8003f94:	3302      	adds	r3, #2
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fa8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	8bfb      	ldrh	r3, [r7, #30]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d906      	bls.n	8003fc2 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	699a      	ldr	r2, [r3, #24]
 8003fb8:	8bfb      	ldrh	r3, [r7, #30]
 8003fba:	1ad2      	subs	r2, r2, r3
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	619a      	str	r2, [r3, #24]
 8003fc0:	e002      	b.n	8003fc8 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d106      	bne.n	8003fde <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f009 faeb 	bl	800d5b2 <HAL_PCD_DataInStageCallback>
 8003fdc:	e018      	b.n	8004010 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	8bfb      	ldrh	r3, [r7, #30]
 8003fe4:	441a      	add	r2, r3
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	69da      	ldr	r2, [r3, #28]
 8003fee:	8bfb      	ldrh	r3, [r7, #30]
 8003ff0:	441a      	add	r2, r3
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f003 f907 	bl	8007210 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004002:	e005      	b.n	8004010 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004004:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004006:	461a      	mov	r2, r3
 8004008:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f91b 	bl	8004246 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004018:	b29b      	uxth	r3, r3
 800401a:	b21b      	sxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	f6ff ad0a 	blt.w	8003a36 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3738      	adds	r7, #56	; 0x38
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	4613      	mov	r3, r2
 8004038:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800403a:	88fb      	ldrh	r3, [r7, #6]
 800403c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d07e      	beq.n	8004142 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800404c:	b29b      	uxth	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4413      	add	r3, r2
 8004058:	3302      	adds	r3, #2
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	4413      	add	r3, r2
 8004062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800406c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	8b7b      	ldrh	r3, [r7, #26]
 8004074:	429a      	cmp	r2, r3
 8004076:	d306      	bcc.n	8004086 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	699a      	ldr	r2, [r3, #24]
 800407c:	8b7b      	ldrh	r3, [r7, #26]
 800407e:	1ad2      	subs	r2, r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	619a      	str	r2, [r3, #24]
 8004084:	e002      	b.n	800408c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2200      	movs	r2, #0
 800408a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d123      	bne.n	80040dc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ae:	833b      	strh	r3, [r7, #24]
 80040b0:	8b3b      	ldrh	r3, [r7, #24]
 80040b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040b6:	833b      	strh	r3, [r7, #24]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	441a      	add	r2, r3
 80040c6:	8b3b      	ldrh	r3, [r7, #24]
 80040c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d8:	b29b      	uxth	r3, r3
 80040da:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040dc:	88fb      	ldrh	r3, [r7, #6]
 80040de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d01f      	beq.n	8004126 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004100:	82fb      	strh	r3, [r7, #22]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	441a      	add	r2, r3
 8004110:	8afb      	ldrh	r3, [r7, #22]
 8004112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800411a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800411e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004122:	b29b      	uxth	r3, r3
 8004124:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004126:	8b7b      	ldrh	r3, [r7, #26]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8087 	beq.w	800423c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	6959      	ldr	r1, [r3, #20]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	891a      	ldrh	r2, [r3, #8]
 800413a:	8b7b      	ldrh	r3, [r7, #26]
 800413c:	f004 fce2 	bl	8008b04 <USB_ReadPMA>
 8004140:	e07c      	b.n	800423c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800414a:	b29b      	uxth	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4413      	add	r3, r2
 8004156:	3306      	adds	r3, #6
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800416a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	699a      	ldr	r2, [r3, #24]
 8004170:	8b7b      	ldrh	r3, [r7, #26]
 8004172:	429a      	cmp	r2, r3
 8004174:	d306      	bcc.n	8004184 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	8b7b      	ldrh	r3, [r7, #26]
 800417c:	1ad2      	subs	r2, r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	619a      	str	r2, [r3, #24]
 8004182:	e002      	b.n	800418a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2200      	movs	r2, #0
 8004188:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d123      	bne.n	80041da <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ac:	83fb      	strh	r3, [r7, #30]
 80041ae:	8bfb      	ldrh	r3, [r7, #30]
 80041b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041b4:	83fb      	strh	r3, [r7, #30]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	441a      	add	r2, r3
 80041c4:	8bfb      	ldrh	r3, [r7, #30]
 80041c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80041da:	88fb      	ldrh	r3, [r7, #6]
 80041dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d11f      	bne.n	8004224 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fe:	83bb      	strh	r3, [r7, #28]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	441a      	add	r2, r3
 800420e:	8bbb      	ldrh	r3, [r7, #28]
 8004210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800421c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004220:	b29b      	uxth	r3, r3
 8004222:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004224:	8b7b      	ldrh	r3, [r7, #26]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	6959      	ldr	r1, [r3, #20]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	895a      	ldrh	r2, [r3, #10]
 8004236:	8b7b      	ldrh	r3, [r7, #26]
 8004238:	f004 fc64 	bl	8008b04 <USB_ReadPMA>
    }
  }

  return count;
 800423c:	8b7b      	ldrh	r3, [r7, #26]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3720      	adds	r7, #32
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b0a2      	sub	sp, #136	; 0x88
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	4613      	mov	r3, r2
 8004252:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 81c7 	beq.w	80045ee <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004268:	b29b      	uxth	r3, r3
 800426a:	461a      	mov	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4413      	add	r3, r2
 8004274:	3302      	adds	r3, #2
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004288:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	699a      	ldr	r2, [r3, #24]
 8004290:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004294:	429a      	cmp	r2, r3
 8004296:	d907      	bls.n	80042a8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	699a      	ldr	r2, [r3, #24]
 800429c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042a0:	1ad2      	subs	r2, r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	619a      	str	r2, [r3, #24]
 80042a6:	e002      	b.n	80042ae <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2200      	movs	r2, #0
 80042ac:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f040 80b9 	bne.w	800442a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	785b      	ldrb	r3, [r3, #1]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d126      	bne.n	800430e <HAL_PCD_EP_DB_Transmit+0xc8>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	4413      	add	r3, r2
 80042d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	011a      	lsls	r2, r3, #4
 80042de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e0:	4413      	add	r3, r2
 80042e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	801a      	strh	r2, [r3, #0]
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004306:	b29a      	uxth	r2, r3
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	801a      	strh	r2, [r3, #0]
 800430c:	e01a      	b.n	8004344 <HAL_PCD_EP_DB_Transmit+0xfe>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	785b      	ldrb	r3, [r3, #1]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d116      	bne.n	8004344 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	633b      	str	r3, [r7, #48]	; 0x30
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004324:	b29b      	uxth	r3, r3
 8004326:	461a      	mov	r2, r3
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	4413      	add	r3, r2
 800432c:	633b      	str	r3, [r7, #48]	; 0x30
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	011a      	lsls	r2, r3, #4
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	4413      	add	r3, r2
 8004338:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004340:	2200      	movs	r2, #0
 8004342:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	623b      	str	r3, [r7, #32]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	785b      	ldrb	r3, [r3, #1]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d126      	bne.n	80043a0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004360:	b29b      	uxth	r3, r3
 8004362:	461a      	mov	r2, r3
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	4413      	add	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	011a      	lsls	r2, r3, #4
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	4413      	add	r3, r2
 8004374:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	b29b      	uxth	r3, r3
 8004380:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004384:	b29a      	uxth	r2, r3
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	801a      	strh	r2, [r3, #0]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b29b      	uxth	r3, r3
 8004390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004398:	b29a      	uxth	r2, r3
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	801a      	strh	r2, [r3, #0]
 800439e:	e017      	b.n	80043d0 <HAL_PCD_EP_DB_Transmit+0x18a>
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	785b      	ldrb	r3, [r3, #1]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d113      	bne.n	80043d0 <HAL_PCD_EP_DB_Transmit+0x18a>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	4413      	add	r3, r2
 80043b8:	623b      	str	r3, [r7, #32]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	011a      	lsls	r2, r3, #4
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	4413      	add	r3, r2
 80043c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	2200      	movs	r2, #0
 80043ce:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	4619      	mov	r1, r3
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f009 f8eb 	bl	800d5b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 82d4 	beq.w	8004990 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004402:	827b      	strh	r3, [r7, #18]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	441a      	add	r2, r3
 8004412:	8a7b      	ldrh	r3, [r7, #18]
 8004414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800441c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004424:	b29b      	uxth	r3, r3
 8004426:	8013      	strh	r3, [r2, #0]
 8004428:	e2b2      	b.n	8004990 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d021      	beq.n	8004478 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	461a      	mov	r2, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	b29b      	uxth	r3, r3
 8004446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800444a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	441a      	add	r2, r3
 8004460:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800446c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004474:	b29b      	uxth	r3, r3
 8004476:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800447e:	2b01      	cmp	r3, #1
 8004480:	f040 8286 	bne.w	8004990 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800448c:	441a      	add	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	69da      	ldr	r2, [r3, #28]
 8004496:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800449a:	441a      	add	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	6a1a      	ldr	r2, [r3, #32]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d309      	bcc.n	80044c0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	6a1a      	ldr	r2, [r3, #32]
 80044b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044b8:	1ad2      	subs	r2, r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	621a      	str	r2, [r3, #32]
 80044be:	e015      	b.n	80044ec <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d107      	bne.n	80044d8 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80044c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044cc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80044d6:	e009      	b.n	80044ec <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2200      	movs	r2, #0
 80044ea:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	785b      	ldrb	r3, [r3, #1]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d155      	bne.n	80045a0 <HAL_PCD_EP_DB_Transmit+0x35a>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004502:	b29b      	uxth	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	4413      	add	r3, r2
 800450a:	63bb      	str	r3, [r7, #56]	; 0x38
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	011a      	lsls	r2, r3, #4
 8004512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004514:	4413      	add	r3, r2
 8004516:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800451a:	637b      	str	r3, [r7, #52]	; 0x34
 800451c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800451e:	2b00      	cmp	r3, #0
 8004520:	d112      	bne.n	8004548 <HAL_PCD_EP_DB_Transmit+0x302>
 8004522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	b29b      	uxth	r3, r3
 8004528:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800452c:	b29a      	uxth	r2, r3
 800452e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004530:	801a      	strh	r2, [r3, #0]
 8004532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	b29b      	uxth	r3, r3
 8004538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800453c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004540:	b29a      	uxth	r2, r3
 8004542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004544:	801a      	strh	r2, [r3, #0]
 8004546:	e047      	b.n	80045d8 <HAL_PCD_EP_DB_Transmit+0x392>
 8004548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800454a:	2b3e      	cmp	r3, #62	; 0x3e
 800454c:	d811      	bhi.n	8004572 <HAL_PCD_EP_DB_Transmit+0x32c>
 800454e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004550:	085b      	lsrs	r3, r3, #1
 8004552:	64bb      	str	r3, [r7, #72]	; 0x48
 8004554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <HAL_PCD_EP_DB_Transmit+0x31e>
 800455e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004560:	3301      	adds	r3, #1
 8004562:	64bb      	str	r3, [r7, #72]	; 0x48
 8004564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004566:	b29b      	uxth	r3, r3
 8004568:	029b      	lsls	r3, r3, #10
 800456a:	b29a      	uxth	r2, r3
 800456c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800456e:	801a      	strh	r2, [r3, #0]
 8004570:	e032      	b.n	80045d8 <HAL_PCD_EP_DB_Transmit+0x392>
 8004572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004574:	095b      	lsrs	r3, r3, #5
 8004576:	64bb      	str	r3, [r7, #72]	; 0x48
 8004578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800457a:	f003 031f 	and.w	r3, r3, #31
 800457e:	2b00      	cmp	r3, #0
 8004580:	d102      	bne.n	8004588 <HAL_PCD_EP_DB_Transmit+0x342>
 8004582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004584:	3b01      	subs	r3, #1
 8004586:	64bb      	str	r3, [r7, #72]	; 0x48
 8004588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800458a:	b29b      	uxth	r3, r3
 800458c:	029b      	lsls	r3, r3, #10
 800458e:	b29b      	uxth	r3, r3
 8004590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004598:	b29a      	uxth	r2, r3
 800459a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459c:	801a      	strh	r2, [r3, #0]
 800459e:	e01b      	b.n	80045d8 <HAL_PCD_EP_DB_Transmit+0x392>
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	785b      	ldrb	r3, [r3, #1]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d117      	bne.n	80045d8 <HAL_PCD_EP_DB_Transmit+0x392>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	643b      	str	r3, [r7, #64]	; 0x40
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045bc:	4413      	add	r3, r2
 80045be:	643b      	str	r3, [r7, #64]	; 0x40
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	011a      	lsls	r2, r3, #4
 80045c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c8:	4413      	add	r3, r2
 80045ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	6959      	ldr	r1, [r3, #20]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	891a      	ldrh	r2, [r3, #8]
 80045e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f004 fa47 	bl	8008a7a <USB_WritePMA>
 80045ec:	e1d0      	b.n	8004990 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	4413      	add	r3, r2
 8004602:	3306      	adds	r3, #6
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	6812      	ldr	r2, [r2, #0]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004616:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004622:	429a      	cmp	r2, r3
 8004624:	d307      	bcc.n	8004636 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800462e:	1ad2      	subs	r2, r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	619a      	str	r2, [r3, #24]
 8004634:	e002      	b.n	800463c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2200      	movs	r2, #0
 800463a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f040 80c4 	bne.w	80047ce <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	785b      	ldrb	r3, [r3, #1]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d126      	bne.n	800469c <HAL_PCD_EP_DB_Transmit+0x456>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800465c:	b29b      	uxth	r3, r3
 800465e:	461a      	mov	r2, r3
 8004660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004662:	4413      	add	r3, r2
 8004664:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	011a      	lsls	r2, r3, #4
 800466c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466e:	4413      	add	r3, r2
 8004670:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004674:	66bb      	str	r3, [r7, #104]	; 0x68
 8004676:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	b29b      	uxth	r3, r3
 800467c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004680:	b29a      	uxth	r2, r3
 8004682:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004684:	801a      	strh	r2, [r3, #0]
 8004686:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	b29b      	uxth	r3, r3
 800468c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004694:	b29a      	uxth	r2, r3
 8004696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004698:	801a      	strh	r2, [r3, #0]
 800469a:	e01a      	b.n	80046d2 <HAL_PCD_EP_DB_Transmit+0x48c>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	785b      	ldrb	r3, [r3, #1]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d116      	bne.n	80046d2 <HAL_PCD_EP_DB_Transmit+0x48c>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	677b      	str	r3, [r7, #116]	; 0x74
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	461a      	mov	r2, r3
 80046b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046b8:	4413      	add	r3, r2
 80046ba:	677b      	str	r3, [r7, #116]	; 0x74
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	011a      	lsls	r2, r3, #4
 80046c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c4:	4413      	add	r3, r2
 80046c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046ca:	673b      	str	r3, [r7, #112]	; 0x70
 80046cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046ce:	2200      	movs	r2, #0
 80046d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	785b      	ldrb	r3, [r3, #1]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d12f      	bne.n	8004740 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046f8:	4413      	add	r3, r2
 80046fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	011a      	lsls	r2, r3, #4
 8004704:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004708:	4413      	add	r3, r2
 800470a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800470e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004712:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29b      	uxth	r3, r3
 800471a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800471e:	b29a      	uxth	r2, r3
 8004720:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004724:	801a      	strh	r2, [r3, #0]
 8004726:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29b      	uxth	r3, r3
 800472e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004736:	b29a      	uxth	r2, r3
 8004738:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800473c:	801a      	strh	r2, [r3, #0]
 800473e:	e017      	b.n	8004770 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d113      	bne.n	8004770 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004750:	b29b      	uxth	r3, r3
 8004752:	461a      	mov	r2, r3
 8004754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004756:	4413      	add	r3, r2
 8004758:	67bb      	str	r3, [r7, #120]	; 0x78
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	011a      	lsls	r2, r3, #4
 8004760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004762:	4413      	add	r3, r2
 8004764:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004768:	67fb      	str	r3, [r7, #124]	; 0x7c
 800476a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800476c:	2200      	movs	r2, #0
 800476e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	4619      	mov	r1, r3
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f008 ff1b 	bl	800d5b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800477c:	88fb      	ldrh	r3, [r7, #6]
 800477e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004782:	2b00      	cmp	r3, #0
 8004784:	f040 8104 	bne.w	8004990 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	b29b      	uxth	r3, r3
 800479a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800479e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	441a      	add	r2, r3
 80047b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80047b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	8013      	strh	r3, [r2, #0]
 80047cc:	e0e0      	b.n	8004990 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80047ce:	88fb      	ldrh	r3, [r7, #6]
 80047d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d121      	bne.n	800481c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	461a      	mov	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	441a      	add	r2, r3
 8004804:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800480c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004818:	b29b      	uxth	r3, r3
 800481a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004822:	2b01      	cmp	r3, #1
 8004824:	f040 80b4 	bne.w	8004990 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	695a      	ldr	r2, [r3, #20]
 800482c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004830:	441a      	add	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	69da      	ldr	r2, [r3, #28]
 800483a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800483e:	441a      	add	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	6a1a      	ldr	r2, [r3, #32]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	429a      	cmp	r2, r3
 800484e:	d309      	bcc.n	8004864 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	6a1a      	ldr	r2, [r3, #32]
 800485a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800485c:	1ad2      	subs	r2, r2, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	621a      	str	r2, [r3, #32]
 8004862:	e015      	b.n	8004890 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d107      	bne.n	800487c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800486c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004870:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800487a:	e009      	b.n	8004890 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2200      	movs	r2, #0
 8004886:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	667b      	str	r3, [r7, #100]	; 0x64
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	785b      	ldrb	r3, [r3, #1]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d155      	bne.n	800494a <HAL_PCD_EP_DB_Transmit+0x704>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048b2:	4413      	add	r3, r2
 80048b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	011a      	lsls	r2, r3, #4
 80048bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048be:	4413      	add	r3, r2
 80048c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80048c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d112      	bne.n	80048f2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80048cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048da:	801a      	strh	r2, [r3, #0]
 80048dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048ee:	801a      	strh	r2, [r3, #0]
 80048f0:	e044      	b.n	800497c <HAL_PCD_EP_DB_Transmit+0x736>
 80048f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048f4:	2b3e      	cmp	r3, #62	; 0x3e
 80048f6:	d811      	bhi.n	800491c <HAL_PCD_EP_DB_Transmit+0x6d6>
 80048f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048fa:	085b      	lsrs	r3, r3, #1
 80048fc:	657b      	str	r3, [r7, #84]	; 0x54
 80048fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800490a:	3301      	adds	r3, #1
 800490c:	657b      	str	r3, [r7, #84]	; 0x54
 800490e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004910:	b29b      	uxth	r3, r3
 8004912:	029b      	lsls	r3, r3, #10
 8004914:	b29a      	uxth	r2, r3
 8004916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004918:	801a      	strh	r2, [r3, #0]
 800491a:	e02f      	b.n	800497c <HAL_PCD_EP_DB_Transmit+0x736>
 800491c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	657b      	str	r3, [r7, #84]	; 0x54
 8004922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004924:	f003 031f 	and.w	r3, r3, #31
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800492c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800492e:	3b01      	subs	r3, #1
 8004930:	657b      	str	r3, [r7, #84]	; 0x54
 8004932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004934:	b29b      	uxth	r3, r3
 8004936:	029b      	lsls	r3, r3, #10
 8004938:	b29b      	uxth	r3, r3
 800493a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800493e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004942:	b29a      	uxth	r2, r3
 8004944:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004946:	801a      	strh	r2, [r3, #0]
 8004948:	e018      	b.n	800497c <HAL_PCD_EP_DB_Transmit+0x736>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	785b      	ldrb	r3, [r3, #1]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d114      	bne.n	800497c <HAL_PCD_EP_DB_Transmit+0x736>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800495a:	b29b      	uxth	r3, r3
 800495c:	461a      	mov	r2, r3
 800495e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004960:	4413      	add	r3, r2
 8004962:	667b      	str	r3, [r7, #100]	; 0x64
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	011a      	lsls	r2, r3, #4
 800496a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800496c:	4413      	add	r3, r2
 800496e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004972:	663b      	str	r3, [r7, #96]	; 0x60
 8004974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004976:	b29a      	uxth	r2, r3
 8004978:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800497a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	6959      	ldr	r1, [r3, #20]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	895a      	ldrh	r2, [r3, #10]
 8004988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800498a:	b29b      	uxth	r3, r3
 800498c:	f004 f875 	bl	8008a7a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	461a      	mov	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049aa:	823b      	strh	r3, [r7, #16]
 80049ac:	8a3b      	ldrh	r3, [r7, #16]
 80049ae:	f083 0310 	eor.w	r3, r3, #16
 80049b2:	823b      	strh	r3, [r7, #16]
 80049b4:	8a3b      	ldrh	r3, [r7, #16]
 80049b6:	f083 0320 	eor.w	r3, r3, #32
 80049ba:	823b      	strh	r3, [r7, #16]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	461a      	mov	r2, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	441a      	add	r2, r3
 80049ca:	8a3b      	ldrh	r3, [r7, #16]
 80049cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049dc:	b29b      	uxth	r3, r3
 80049de:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3788      	adds	r7, #136	; 0x88
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b087      	sub	sp, #28
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	607b      	str	r3, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	817b      	strh	r3, [r7, #10]
 80049f8:	4613      	mov	r3, r2
 80049fa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80049fc:	897b      	ldrh	r3, [r7, #10]
 80049fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00b      	beq.n	8004a20 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a08:	897b      	ldrh	r3, [r7, #10]
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	e009      	b.n	8004a34 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a20:	897a      	ldrh	r2, [r7, #10]
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4413      	add	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004a34:	893b      	ldrh	r3, [r7, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d107      	bne.n	8004a4a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	80da      	strh	r2, [r3, #6]
 8004a48:	e00b      	b.n	8004a62 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	0c1b      	lsrs	r3, r3, #16
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bc80      	pop	{r7}
 8004a6c:	4770      	bx	lr
	...

08004a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e26c      	b.n	8004f5c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 8087 	beq.w	8004b9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a90:	4b92      	ldr	r3, [pc, #584]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f003 030c 	and.w	r3, r3, #12
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d00c      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a9c:	4b8f      	ldr	r3, [pc, #572]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f003 030c 	and.w	r3, r3, #12
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d112      	bne.n	8004ace <HAL_RCC_OscConfig+0x5e>
 8004aa8:	4b8c      	ldr	r3, [pc, #560]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab4:	d10b      	bne.n	8004ace <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab6:	4b89      	ldr	r3, [pc, #548]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d06c      	beq.n	8004b9c <HAL_RCC_OscConfig+0x12c>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d168      	bne.n	8004b9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e246      	b.n	8004f5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad6:	d106      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x76>
 8004ad8:	4b80      	ldr	r3, [pc, #512]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a7f      	ldr	r2, [pc, #508]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	e02e      	b.n	8004b44 <HAL_RCC_OscConfig+0xd4>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10c      	bne.n	8004b08 <HAL_RCC_OscConfig+0x98>
 8004aee:	4b7b      	ldr	r3, [pc, #492]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a7a      	ldr	r2, [pc, #488]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	4b78      	ldr	r3, [pc, #480]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a77      	ldr	r2, [pc, #476]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	e01d      	b.n	8004b44 <HAL_RCC_OscConfig+0xd4>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b10:	d10c      	bne.n	8004b2c <HAL_RCC_OscConfig+0xbc>
 8004b12:	4b72      	ldr	r3, [pc, #456]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a71      	ldr	r2, [pc, #452]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	4b6f      	ldr	r3, [pc, #444]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a6e      	ldr	r2, [pc, #440]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	e00b      	b.n	8004b44 <HAL_RCC_OscConfig+0xd4>
 8004b2c:	4b6b      	ldr	r3, [pc, #428]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a6a      	ldr	r2, [pc, #424]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	4b68      	ldr	r3, [pc, #416]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a67      	ldr	r2, [pc, #412]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d013      	beq.n	8004b74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4c:	f7fd ff42 	bl	80029d4 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b54:	f7fd ff3e 	bl	80029d4 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b64      	cmp	r3, #100	; 0x64
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e1fa      	b.n	8004f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b66:	4b5d      	ldr	r3, [pc, #372]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f0      	beq.n	8004b54 <HAL_RCC_OscConfig+0xe4>
 8004b72:	e014      	b.n	8004b9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b74:	f7fd ff2e 	bl	80029d4 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b7c:	f7fd ff2a 	bl	80029d4 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b64      	cmp	r3, #100	; 0x64
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e1e6      	b.n	8004f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b8e:	4b53      	ldr	r3, [pc, #332]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f0      	bne.n	8004b7c <HAL_RCC_OscConfig+0x10c>
 8004b9a:	e000      	b.n	8004b9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d063      	beq.n	8004c72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004baa:	4b4c      	ldr	r3, [pc, #304]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f003 030c 	and.w	r3, r3, #12
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00b      	beq.n	8004bce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004bb6:	4b49      	ldr	r3, [pc, #292]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f003 030c 	and.w	r3, r3, #12
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d11c      	bne.n	8004bfc <HAL_RCC_OscConfig+0x18c>
 8004bc2:	4b46      	ldr	r3, [pc, #280]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d116      	bne.n	8004bfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bce:	4b43      	ldr	r3, [pc, #268]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d005      	beq.n	8004be6 <HAL_RCC_OscConfig+0x176>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d001      	beq.n	8004be6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e1ba      	b.n	8004f5c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be6:	4b3d      	ldr	r3, [pc, #244]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	4939      	ldr	r1, [pc, #228]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bfa:	e03a      	b.n	8004c72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d020      	beq.n	8004c46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c04:	4b36      	ldr	r3, [pc, #216]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004c06:	2201      	movs	r2, #1
 8004c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0a:	f7fd fee3 	bl	80029d4 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c12:	f7fd fedf 	bl	80029d4 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e19b      	b.n	8004f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c24:	4b2d      	ldr	r3, [pc, #180]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0f0      	beq.n	8004c12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c30:	4b2a      	ldr	r3, [pc, #168]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	4927      	ldr	r1, [pc, #156]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	600b      	str	r3, [r1, #0]
 8004c44:	e015      	b.n	8004c72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c46:	4b26      	ldr	r3, [pc, #152]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4c:	f7fd fec2 	bl	80029d4 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c54:	f7fd febe 	bl	80029d4 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e17a      	b.n	8004f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c66:	4b1d      	ldr	r3, [pc, #116]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1f0      	bne.n	8004c54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d03a      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d019      	beq.n	8004cba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c86:	4b17      	ldr	r3, [pc, #92]	; (8004ce4 <HAL_RCC_OscConfig+0x274>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c8c:	f7fd fea2 	bl	80029d4 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c94:	f7fd fe9e 	bl	80029d4 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e15a      	b.n	8004f5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ca6:	4b0d      	ldr	r3, [pc, #52]	; (8004cdc <HAL_RCC_OscConfig+0x26c>)
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0f0      	beq.n	8004c94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004cb2:	2001      	movs	r0, #1
 8004cb4:	f000 fb0a 	bl	80052cc <RCC_Delay>
 8004cb8:	e01c      	b.n	8004cf4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cba:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <HAL_RCC_OscConfig+0x274>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc0:	f7fd fe88 	bl	80029d4 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc6:	e00f      	b.n	8004ce8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cc8:	f7fd fe84 	bl	80029d4 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d908      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e140      	b.n	8004f5c <HAL_RCC_OscConfig+0x4ec>
 8004cda:	bf00      	nop
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	42420000 	.word	0x42420000
 8004ce4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce8:	4b9e      	ldr	r3, [pc, #632]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e9      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 80a6 	beq.w	8004e4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d02:	2300      	movs	r3, #0
 8004d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d06:	4b97      	ldr	r3, [pc, #604]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10d      	bne.n	8004d2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d12:	4b94      	ldr	r3, [pc, #592]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	4a93      	ldr	r2, [pc, #588]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d1c:	61d3      	str	r3, [r2, #28]
 8004d1e:	4b91      	ldr	r3, [pc, #580]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d26:	60bb      	str	r3, [r7, #8]
 8004d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d2e:	4b8e      	ldr	r3, [pc, #568]	; (8004f68 <HAL_RCC_OscConfig+0x4f8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d118      	bne.n	8004d6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d3a:	4b8b      	ldr	r3, [pc, #556]	; (8004f68 <HAL_RCC_OscConfig+0x4f8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a8a      	ldr	r2, [pc, #552]	; (8004f68 <HAL_RCC_OscConfig+0x4f8>)
 8004d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d46:	f7fd fe45 	bl	80029d4 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d4e:	f7fd fe41 	bl	80029d4 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b64      	cmp	r3, #100	; 0x64
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e0fd      	b.n	8004f5c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d60:	4b81      	ldr	r3, [pc, #516]	; (8004f68 <HAL_RCC_OscConfig+0x4f8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f0      	beq.n	8004d4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d106      	bne.n	8004d82 <HAL_RCC_OscConfig+0x312>
 8004d74:	4b7b      	ldr	r3, [pc, #492]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	4a7a      	ldr	r2, [pc, #488]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004d7a:	f043 0301 	orr.w	r3, r3, #1
 8004d7e:	6213      	str	r3, [r2, #32]
 8004d80:	e02d      	b.n	8004dde <HAL_RCC_OscConfig+0x36e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10c      	bne.n	8004da4 <HAL_RCC_OscConfig+0x334>
 8004d8a:	4b76      	ldr	r3, [pc, #472]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	4a75      	ldr	r2, [pc, #468]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004d90:	f023 0301 	bic.w	r3, r3, #1
 8004d94:	6213      	str	r3, [r2, #32]
 8004d96:	4b73      	ldr	r3, [pc, #460]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	4a72      	ldr	r2, [pc, #456]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004d9c:	f023 0304 	bic.w	r3, r3, #4
 8004da0:	6213      	str	r3, [r2, #32]
 8004da2:	e01c      	b.n	8004dde <HAL_RCC_OscConfig+0x36e>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	2b05      	cmp	r3, #5
 8004daa:	d10c      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x356>
 8004dac:	4b6d      	ldr	r3, [pc, #436]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	4a6c      	ldr	r2, [pc, #432]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004db2:	f043 0304 	orr.w	r3, r3, #4
 8004db6:	6213      	str	r3, [r2, #32]
 8004db8:	4b6a      	ldr	r3, [pc, #424]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	4a69      	ldr	r2, [pc, #420]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	6213      	str	r3, [r2, #32]
 8004dc4:	e00b      	b.n	8004dde <HAL_RCC_OscConfig+0x36e>
 8004dc6:	4b67      	ldr	r3, [pc, #412]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	4a66      	ldr	r2, [pc, #408]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004dcc:	f023 0301 	bic.w	r3, r3, #1
 8004dd0:	6213      	str	r3, [r2, #32]
 8004dd2:	4b64      	ldr	r3, [pc, #400]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	4a63      	ldr	r2, [pc, #396]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004dd8:	f023 0304 	bic.w	r3, r3, #4
 8004ddc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d015      	beq.n	8004e12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de6:	f7fd fdf5 	bl	80029d4 <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dec:	e00a      	b.n	8004e04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dee:	f7fd fdf1 	bl	80029d4 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e0ab      	b.n	8004f5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e04:	4b57      	ldr	r3, [pc, #348]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0ee      	beq.n	8004dee <HAL_RCC_OscConfig+0x37e>
 8004e10:	e014      	b.n	8004e3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e12:	f7fd fddf 	bl	80029d4 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e18:	e00a      	b.n	8004e30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e1a:	f7fd fddb 	bl	80029d4 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e095      	b.n	8004f5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e30:	4b4c      	ldr	r3, [pc, #304]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1ee      	bne.n	8004e1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e3c:	7dfb      	ldrb	r3, [r7, #23]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d105      	bne.n	8004e4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e42:	4b48      	ldr	r3, [pc, #288]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	4a47      	ldr	r2, [pc, #284]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 8081 	beq.w	8004f5a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e58:	4b42      	ldr	r3, [pc, #264]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f003 030c 	and.w	r3, r3, #12
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d061      	beq.n	8004f28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d146      	bne.n	8004efa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e6c:	4b3f      	ldr	r3, [pc, #252]	; (8004f6c <HAL_RCC_OscConfig+0x4fc>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e72:	f7fd fdaf 	bl	80029d4 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7a:	f7fd fdab 	bl	80029d4 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e067      	b.n	8004f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e8c:	4b35      	ldr	r3, [pc, #212]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1f0      	bne.n	8004e7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea0:	d108      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ea2:	4b30      	ldr	r3, [pc, #192]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	492d      	ldr	r1, [pc, #180]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eb4:	4b2b      	ldr	r3, [pc, #172]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a19      	ldr	r1, [r3, #32]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	4927      	ldr	r1, [pc, #156]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ecc:	4b27      	ldr	r3, [pc, #156]	; (8004f6c <HAL_RCC_OscConfig+0x4fc>)
 8004ece:	2201      	movs	r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed2:	f7fd fd7f 	bl	80029d4 <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eda:	f7fd fd7b 	bl	80029d4 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e037      	b.n	8004f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004eec:	4b1d      	ldr	r3, [pc, #116]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0f0      	beq.n	8004eda <HAL_RCC_OscConfig+0x46a>
 8004ef8:	e02f      	b.n	8004f5a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004efa:	4b1c      	ldr	r3, [pc, #112]	; (8004f6c <HAL_RCC_OscConfig+0x4fc>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f00:	f7fd fd68 	bl	80029d4 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f08:	f7fd fd64 	bl	80029d4 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e020      	b.n	8004f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f1a:	4b12      	ldr	r3, [pc, #72]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f0      	bne.n	8004f08 <HAL_RCC_OscConfig+0x498>
 8004f26:	e018      	b.n	8004f5a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e013      	b.n	8004f5c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f34:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <HAL_RCC_OscConfig+0x4f4>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d106      	bne.n	8004f56 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d001      	beq.n	8004f5a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40007000 	.word	0x40007000
 8004f6c:	42420060 	.word	0x42420060

08004f70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e0d0      	b.n	8005126 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f84:	4b6a      	ldr	r3, [pc, #424]	; (8005130 <HAL_RCC_ClockConfig+0x1c0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d910      	bls.n	8004fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f92:	4b67      	ldr	r3, [pc, #412]	; (8005130 <HAL_RCC_ClockConfig+0x1c0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f023 0207 	bic.w	r2, r3, #7
 8004f9a:	4965      	ldr	r1, [pc, #404]	; (8005130 <HAL_RCC_ClockConfig+0x1c0>)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa2:	4b63      	ldr	r3, [pc, #396]	; (8005130 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e0b8      	b.n	8005126 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d020      	beq.n	8005002 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fcc:	4b59      	ldr	r3, [pc, #356]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	4a58      	ldr	r2, [pc, #352]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004fd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0308 	and.w	r3, r3, #8
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d005      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fe4:	4b53      	ldr	r3, [pc, #332]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	4a52      	ldr	r2, [pc, #328]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8004fea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004fee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ff0:	4b50      	ldr	r3, [pc, #320]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	494d      	ldr	r1, [pc, #308]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d040      	beq.n	8005090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d107      	bne.n	8005026 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005016:	4b47      	ldr	r3, [pc, #284]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d115      	bne.n	800504e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e07f      	b.n	8005126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d107      	bne.n	800503e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800502e:	4b41      	ldr	r3, [pc, #260]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d109      	bne.n	800504e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e073      	b.n	8005126 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800503e:	4b3d      	ldr	r3, [pc, #244]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e06b      	b.n	8005126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800504e:	4b39      	ldr	r3, [pc, #228]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f023 0203 	bic.w	r2, r3, #3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	4936      	ldr	r1, [pc, #216]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 800505c:	4313      	orrs	r3, r2
 800505e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005060:	f7fd fcb8 	bl	80029d4 <HAL_GetTick>
 8005064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005066:	e00a      	b.n	800507e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005068:	f7fd fcb4 	bl	80029d4 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	f241 3288 	movw	r2, #5000	; 0x1388
 8005076:	4293      	cmp	r3, r2
 8005078:	d901      	bls.n	800507e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e053      	b.n	8005126 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800507e:	4b2d      	ldr	r3, [pc, #180]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f003 020c 	and.w	r2, r3, #12
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	429a      	cmp	r2, r3
 800508e:	d1eb      	bne.n	8005068 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005090:	4b27      	ldr	r3, [pc, #156]	; (8005130 <HAL_RCC_ClockConfig+0x1c0>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d210      	bcs.n	80050c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800509e:	4b24      	ldr	r3, [pc, #144]	; (8005130 <HAL_RCC_ClockConfig+0x1c0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f023 0207 	bic.w	r2, r3, #7
 80050a6:	4922      	ldr	r1, [pc, #136]	; (8005130 <HAL_RCC_ClockConfig+0x1c0>)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ae:	4b20      	ldr	r3, [pc, #128]	; (8005130 <HAL_RCC_ClockConfig+0x1c0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d001      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e032      	b.n	8005126 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d008      	beq.n	80050de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050cc:	4b19      	ldr	r3, [pc, #100]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	4916      	ldr	r1, [pc, #88]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d009      	beq.n	80050fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050ea:	4b12      	ldr	r3, [pc, #72]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	490e      	ldr	r1, [pc, #56]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050fe:	f000 f821 	bl	8005144 <HAL_RCC_GetSysClockFreq>
 8005102:	4602      	mov	r2, r0
 8005104:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	091b      	lsrs	r3, r3, #4
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	490a      	ldr	r1, [pc, #40]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8005110:	5ccb      	ldrb	r3, [r1, r3]
 8005112:	fa22 f303 	lsr.w	r3, r2, r3
 8005116:	4a09      	ldr	r2, [pc, #36]	; (800513c <HAL_RCC_ClockConfig+0x1cc>)
 8005118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800511a:	4b09      	ldr	r3, [pc, #36]	; (8005140 <HAL_RCC_ClockConfig+0x1d0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f7fd faf8 	bl	8002714 <HAL_InitTick>

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40022000 	.word	0x40022000
 8005134:	40021000 	.word	0x40021000
 8005138:	0800e27c 	.word	0x0800e27c
 800513c:	20000010 	.word	0x20000010
 8005140:	20000014 	.word	0x20000014

08005144 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005144:	b490      	push	{r4, r7}
 8005146:	b08a      	sub	sp, #40	; 0x28
 8005148:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800514a:	4b2a      	ldr	r3, [pc, #168]	; (80051f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800514c:	1d3c      	adds	r4, r7, #4
 800514e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005154:	f240 2301 	movw	r3, #513	; 0x201
 8005158:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	61fb      	str	r3, [r7, #28]
 800515e:	2300      	movs	r3, #0
 8005160:	61bb      	str	r3, [r7, #24]
 8005162:	2300      	movs	r3, #0
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
 8005166:	2300      	movs	r3, #0
 8005168:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800516e:	4b22      	ldr	r3, [pc, #136]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f003 030c 	and.w	r3, r3, #12
 800517a:	2b04      	cmp	r3, #4
 800517c:	d002      	beq.n	8005184 <HAL_RCC_GetSysClockFreq+0x40>
 800517e:	2b08      	cmp	r3, #8
 8005180:	d003      	beq.n	800518a <HAL_RCC_GetSysClockFreq+0x46>
 8005182:	e02d      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005184:	4b1d      	ldr	r3, [pc, #116]	; (80051fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005186:	623b      	str	r3, [r7, #32]
      break;
 8005188:	e02d      	b.n	80051e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	0c9b      	lsrs	r3, r3, #18
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005196:	4413      	add	r3, r2
 8005198:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800519c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d013      	beq.n	80051d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051a8:	4b13      	ldr	r3, [pc, #76]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	0c5b      	lsrs	r3, r3, #17
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80051b6:	4413      	add	r3, r2
 80051b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80051bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	4a0e      	ldr	r2, [pc, #56]	; (80051fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80051c2:	fb02 f203 	mul.w	r2, r2, r3
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
 80051ce:	e004      	b.n	80051da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	4a0b      	ldr	r2, [pc, #44]	; (8005200 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051d4:	fb02 f303 	mul.w	r3, r2, r3
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	623b      	str	r3, [r7, #32]
      break;
 80051de:	e002      	b.n	80051e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051e0:	4b08      	ldr	r3, [pc, #32]	; (8005204 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051e2:	623b      	str	r3, [r7, #32]
      break;
 80051e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051e6:	6a3b      	ldr	r3, [r7, #32]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3728      	adds	r7, #40	; 0x28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bc90      	pop	{r4, r7}
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	0800dd0c 	.word	0x0800dd0c
 80051f8:	40021000 	.word	0x40021000
 80051fc:	00f42400 	.word	0x00f42400
 8005200:	003d0900 	.word	0x003d0900
 8005204:	007a1200 	.word	0x007a1200

08005208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800520c:	4b02      	ldr	r3, [pc, #8]	; (8005218 <HAL_RCC_GetHCLKFreq+0x10>)
 800520e:	681b      	ldr	r3, [r3, #0]
}
 8005210:	4618      	mov	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	bc80      	pop	{r7}
 8005216:	4770      	bx	lr
 8005218:	20000010 	.word	0x20000010

0800521c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005220:	f7ff fff2 	bl	8005208 <HAL_RCC_GetHCLKFreq>
 8005224:	4602      	mov	r2, r0
 8005226:	4b05      	ldr	r3, [pc, #20]	; (800523c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	0a1b      	lsrs	r3, r3, #8
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	4903      	ldr	r1, [pc, #12]	; (8005240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005232:	5ccb      	ldrb	r3, [r1, r3]
 8005234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005238:	4618      	mov	r0, r3
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40021000 	.word	0x40021000
 8005240:	0800e28c 	.word	0x0800e28c

08005244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005248:	f7ff ffde 	bl	8005208 <HAL_RCC_GetHCLKFreq>
 800524c:	4602      	mov	r2, r0
 800524e:	4b05      	ldr	r3, [pc, #20]	; (8005264 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	0adb      	lsrs	r3, r3, #11
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	4903      	ldr	r1, [pc, #12]	; (8005268 <HAL_RCC_GetPCLK2Freq+0x24>)
 800525a:	5ccb      	ldrb	r3, [r1, r3]
 800525c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005260:	4618      	mov	r0, r3
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40021000 	.word	0x40021000
 8005268:	0800e28c 	.word	0x0800e28c

0800526c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	220f      	movs	r2, #15
 800527a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800527c:	4b11      	ldr	r3, [pc, #68]	; (80052c4 <HAL_RCC_GetClockConfig+0x58>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f003 0203 	and.w	r2, r3, #3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005288:	4b0e      	ldr	r3, [pc, #56]	; (80052c4 <HAL_RCC_GetClockConfig+0x58>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005294:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <HAL_RCC_GetClockConfig+0x58>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80052a0:	4b08      	ldr	r3, [pc, #32]	; (80052c4 <HAL_RCC_GetClockConfig+0x58>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	08db      	lsrs	r3, r3, #3
 80052a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80052ae:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <HAL_RCC_GetClockConfig+0x5c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0207 	and.w	r2, r3, #7
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr
 80052c4:	40021000 	.word	0x40021000
 80052c8:	40022000 	.word	0x40022000

080052cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052d4:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <RCC_Delay+0x34>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a0a      	ldr	r2, [pc, #40]	; (8005304 <RCC_Delay+0x38>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	0a5b      	lsrs	r3, r3, #9
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	fb02 f303 	mul.w	r3, r2, r3
 80052e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052e8:	bf00      	nop
  }
  while (Delay --);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	1e5a      	subs	r2, r3, #1
 80052ee:	60fa      	str	r2, [r7, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1f9      	bne.n	80052e8 <RCC_Delay+0x1c>
}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr
 8005300:	20000010 	.word	0x20000010
 8005304:	10624dd3 	.word	0x10624dd3

08005308 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	613b      	str	r3, [r7, #16]
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d07d      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005324:	2300      	movs	r3, #0
 8005326:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005328:	4b4f      	ldr	r3, [pc, #316]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10d      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005334:	4b4c      	ldr	r3, [pc, #304]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	4a4b      	ldr	r2, [pc, #300]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800533a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533e:	61d3      	str	r3, [r2, #28]
 8005340:	4b49      	ldr	r3, [pc, #292]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800534c:	2301      	movs	r3, #1
 800534e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005350:	4b46      	ldr	r3, [pc, #280]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005358:	2b00      	cmp	r3, #0
 800535a:	d118      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800535c:	4b43      	ldr	r3, [pc, #268]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a42      	ldr	r2, [pc, #264]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005366:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005368:	f7fd fb34 	bl	80029d4 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800536e:	e008      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005370:	f7fd fb30 	bl	80029d4 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b64      	cmp	r3, #100	; 0x64
 800537c:	d901      	bls.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e06d      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005382:	4b3a      	ldr	r3, [pc, #232]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800538e:	4b36      	ldr	r3, [pc, #216]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005396:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d02e      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d027      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053ac:	4b2e      	ldr	r3, [pc, #184]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053b6:	4b2e      	ldr	r3, [pc, #184]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053b8:	2201      	movs	r2, #1
 80053ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053bc:	4b2c      	ldr	r3, [pc, #176]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80053c2:	4a29      	ldr	r2, [pc, #164]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d014      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d2:	f7fd faff 	bl	80029d4 <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d8:	e00a      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053da:	f7fd fafb 	bl	80029d4 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e036      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f0:	4b1d      	ldr	r3, [pc, #116]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0ee      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053fc:	4b1a      	ldr	r3, [pc, #104]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	4917      	ldr	r1, [pc, #92]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540a:	4313      	orrs	r3, r2
 800540c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800540e:	7dfb      	ldrb	r3, [r7, #23]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d105      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005414:	4b14      	ldr	r3, [pc, #80]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	4a13      	ldr	r2, [pc, #76]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800541a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800541e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800542c:	4b0e      	ldr	r3, [pc, #56]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	490b      	ldr	r1, [pc, #44]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800543a:	4313      	orrs	r3, r2
 800543c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0310 	and.w	r3, r3, #16
 8005446:	2b00      	cmp	r3, #0
 8005448:	d008      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800544a:	4b07      	ldr	r3, [pc, #28]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	4904      	ldr	r1, [pc, #16]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005458:	4313      	orrs	r3, r2
 800545a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	40021000 	.word	0x40021000
 800546c:	40007000 	.word	0x40007000
 8005470:	42420440 	.word	0x42420440

08005474 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e076      	b.n	8005574 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	2b00      	cmp	r3, #0
 800548c:	d108      	bne.n	80054a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005496:	d009      	beq.n	80054ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	61da      	str	r2, [r3, #28]
 800549e:	e005      	b.n	80054ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d106      	bne.n	80054cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fd f8a0 	bl	800260c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005526:	431a      	orrs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005530:	ea42 0103 	orr.w	r1, r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005538:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	0c1a      	lsrs	r2, r3, #16
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f002 0204 	and.w	r2, r2, #4
 8005552:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69da      	ldr	r2, [r3, #28]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005562:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b088      	sub	sp, #32
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	4613      	mov	r3, r2
 800558a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_SPI_Transmit+0x22>
 800559a:	2302      	movs	r3, #2
 800559c:	e126      	b.n	80057ec <HAL_SPI_Transmit+0x270>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055a6:	f7fd fa15 	bl	80029d4 <HAL_GetTick>
 80055aa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055ac:	88fb      	ldrh	r3, [r7, #6]
 80055ae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d002      	beq.n	80055c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055bc:	2302      	movs	r3, #2
 80055be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055c0:	e10b      	b.n	80057da <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <HAL_SPI_Transmit+0x52>
 80055c8:	88fb      	ldrh	r3, [r7, #6]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d102      	bne.n	80055d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055d2:	e102      	b.n	80057da <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2203      	movs	r2, #3
 80055d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	88fa      	ldrh	r2, [r7, #6]
 80055ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	88fa      	ldrh	r2, [r7, #6]
 80055f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800561a:	d10f      	bne.n	800563c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800562a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800563a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005646:	2b40      	cmp	r3, #64	; 0x40
 8005648:	d007      	beq.n	800565a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005658:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005662:	d14b      	bne.n	80056fc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <HAL_SPI_Transmit+0xf6>
 800566c:	8afb      	ldrh	r3, [r7, #22]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d13e      	bne.n	80056f0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	881a      	ldrh	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005682:	1c9a      	adds	r2, r3, #2
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005696:	e02b      	b.n	80056f0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d112      	bne.n	80056cc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056aa:	881a      	ldrh	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	1c9a      	adds	r2, r3, #2
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80056ca:	e011      	b.n	80056f0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056cc:	f7fd f982 	bl	80029d4 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d803      	bhi.n	80056e4 <HAL_SPI_Transmit+0x168>
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e2:	d102      	bne.n	80056ea <HAL_SPI_Transmit+0x16e>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d102      	bne.n	80056f0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056ee:	e074      	b.n	80057da <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1ce      	bne.n	8005698 <HAL_SPI_Transmit+0x11c>
 80056fa:	e04c      	b.n	8005796 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <HAL_SPI_Transmit+0x18e>
 8005704:	8afb      	ldrh	r3, [r7, #22]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d140      	bne.n	800578c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	330c      	adds	r3, #12
 8005714:	7812      	ldrb	r2, [r2, #0]
 8005716:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005730:	e02c      	b.n	800578c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b02      	cmp	r3, #2
 800573e:	d113      	bne.n	8005768 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	330c      	adds	r3, #12
 800574a:	7812      	ldrb	r2, [r2, #0]
 800574c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	86da      	strh	r2, [r3, #54]	; 0x36
 8005766:	e011      	b.n	800578c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005768:	f7fd f934 	bl	80029d4 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d803      	bhi.n	8005780 <HAL_SPI_Transmit+0x204>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577e:	d102      	bne.n	8005786 <HAL_SPI_Transmit+0x20a>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d102      	bne.n	800578c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	77fb      	strb	r3, [r7, #31]
          goto error;
 800578a:	e026      	b.n	80057da <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1cd      	bne.n	8005732 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	6839      	ldr	r1, [r7, #0]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 f8b2 	bl	8005904 <SPI_EndRxTxTransaction>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057b4:	2300      	movs	r3, #0
 80057b6:	613b      	str	r3, [r7, #16]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	613b      	str	r3, [r7, #16]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	77fb      	strb	r3, [r7, #31]
 80057d6:	e000      	b.n	80057da <HAL_SPI_Transmit+0x25e>
  }

error:
 80057d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3720      	adds	r7, #32
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	4613      	mov	r3, r2
 8005802:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005804:	f7fd f8e6 	bl	80029d4 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	1a9b      	subs	r3, r3, r2
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	4413      	add	r3, r2
 8005812:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005814:	f7fd f8de 	bl	80029d4 <HAL_GetTick>
 8005818:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800581a:	4b39      	ldr	r3, [pc, #228]	; (8005900 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	015b      	lsls	r3, r3, #5
 8005820:	0d1b      	lsrs	r3, r3, #20
 8005822:	69fa      	ldr	r2, [r7, #28]
 8005824:	fb02 f303 	mul.w	r3, r2, r3
 8005828:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800582a:	e054      	b.n	80058d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005832:	d050      	beq.n	80058d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005834:	f7fd f8ce 	bl	80029d4 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	69fa      	ldr	r2, [r7, #28]
 8005840:	429a      	cmp	r2, r3
 8005842:	d902      	bls.n	800584a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d13d      	bne.n	80058c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005858:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005862:	d111      	bne.n	8005888 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800586c:	d004      	beq.n	8005878 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005876:	d107      	bne.n	8005888 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005886:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005890:	d10f      	bne.n	80058b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e017      	b.n	80058f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	4013      	ands	r3, r2
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	bf0c      	ite	eq
 80058e6:	2301      	moveq	r3, #1
 80058e8:	2300      	movne	r3, #0
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	461a      	mov	r2, r3
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d19b      	bne.n	800582c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3720      	adds	r7, #32
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000010 	.word	0x20000010

08005904 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af02      	add	r7, sp, #8
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2200      	movs	r2, #0
 8005918:	2180      	movs	r1, #128	; 0x80
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f7ff ff6a 	bl	80057f4 <SPI_WaitFlagStateUntilTimeout>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d007      	beq.n	8005936 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592a:	f043 0220 	orr.w	r2, r3, #32
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e000      	b.n	8005938 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e041      	b.n	80059d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f839 	bl	80059de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	3304      	adds	r3, #4
 800597c:	4619      	mov	r1, r3
 800597e:	4610      	mov	r0, r2
 8005980:	f000 f9b4 	bl	8005cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr

080059f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d001      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e03a      	b.n	8005a7e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a18      	ldr	r2, [pc, #96]	; (8005a88 <HAL_TIM_Base_Start_IT+0x98>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00e      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x58>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a32:	d009      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x58>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a14      	ldr	r2, [pc, #80]	; (8005a8c <HAL_TIM_Base_Start_IT+0x9c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x58>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a13      	ldr	r2, [pc, #76]	; (8005a90 <HAL_TIM_Base_Start_IT+0xa0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d111      	bne.n	8005a6c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b06      	cmp	r3, #6
 8005a58:	d010      	beq.n	8005a7c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f042 0201 	orr.w	r2, r2, #1
 8005a68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6a:	e007      	b.n	8005a7c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bc80      	pop	{r7}
 8005a86:	4770      	bx	lr
 8005a88:	40012c00 	.word	0x40012c00
 8005a8c:	40000400 	.word	0x40000400
 8005a90:	40000800 	.word	0x40000800

08005a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d122      	bne.n	8005af0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d11b      	bne.n	8005af0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0202 	mvn.w	r2, #2
 8005ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f8ed 	bl	8005cb6 <HAL_TIM_IC_CaptureCallback>
 8005adc:	e005      	b.n	8005aea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f8e0 	bl	8005ca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f8ef 	bl	8005cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d122      	bne.n	8005b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d11b      	bne.n	8005b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0204 	mvn.w	r2, #4
 8005b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f8c3 	bl	8005cb6 <HAL_TIM_IC_CaptureCallback>
 8005b30:	e005      	b.n	8005b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f8b6 	bl	8005ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f8c5 	bl	8005cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0308 	and.w	r3, r3, #8
 8005b4e:	2b08      	cmp	r3, #8
 8005b50:	d122      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0308 	and.w	r3, r3, #8
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d11b      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0208 	mvn.w	r2, #8
 8005b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2204      	movs	r2, #4
 8005b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f003 0303 	and.w	r3, r3, #3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f899 	bl	8005cb6 <HAL_TIM_IC_CaptureCallback>
 8005b84:	e005      	b.n	8005b92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f88c 	bl	8005ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f89b 	bl	8005cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0310 	and.w	r3, r3, #16
 8005ba2:	2b10      	cmp	r3, #16
 8005ba4:	d122      	bne.n	8005bec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0310 	and.w	r3, r3, #16
 8005bb0:	2b10      	cmp	r3, #16
 8005bb2:	d11b      	bne.n	8005bec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0210 	mvn.w	r2, #16
 8005bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2208      	movs	r2, #8
 8005bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f86f 	bl	8005cb6 <HAL_TIM_IC_CaptureCallback>
 8005bd8:	e005      	b.n	8005be6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f862 	bl	8005ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f871 	bl	8005cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d10e      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d107      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0201 	mvn.w	r2, #1
 8005c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fa ff96 	bl	8000b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c22:	2b80      	cmp	r3, #128	; 0x80
 8005c24:	d10e      	bne.n	8005c44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c30:	2b80      	cmp	r3, #128	; 0x80
 8005c32:	d107      	bne.n	8005c44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f8bf 	bl	8005dc2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4e:	2b40      	cmp	r3, #64	; 0x40
 8005c50:	d10e      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5c:	2b40      	cmp	r3, #64	; 0x40
 8005c5e:	d107      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f835 	bl	8005cda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b20      	cmp	r3, #32
 8005c7c:	d10e      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d107      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0220 	mvn.w	r2, #32
 8005c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f88a 	bl	8005db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c9c:	bf00      	nop
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bc80      	pop	{r7}
 8005cb4:	4770      	bx	lr

08005cb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bc80      	pop	{r7}
 8005cd8:	4770      	bx	lr

08005cda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bc80      	pop	{r7}
 8005cea:	4770      	bx	lr

08005cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a29      	ldr	r2, [pc, #164]	; (8005da4 <TIM_Base_SetConfig+0xb8>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00b      	beq.n	8005d1c <TIM_Base_SetConfig+0x30>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0a:	d007      	beq.n	8005d1c <TIM_Base_SetConfig+0x30>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a26      	ldr	r2, [pc, #152]	; (8005da8 <TIM_Base_SetConfig+0xbc>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d003      	beq.n	8005d1c <TIM_Base_SetConfig+0x30>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a25      	ldr	r2, [pc, #148]	; (8005dac <TIM_Base_SetConfig+0xc0>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d108      	bne.n	8005d2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a1c      	ldr	r2, [pc, #112]	; (8005da4 <TIM_Base_SetConfig+0xb8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00b      	beq.n	8005d4e <TIM_Base_SetConfig+0x62>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3c:	d007      	beq.n	8005d4e <TIM_Base_SetConfig+0x62>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a19      	ldr	r2, [pc, #100]	; (8005da8 <TIM_Base_SetConfig+0xbc>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d003      	beq.n	8005d4e <TIM_Base_SetConfig+0x62>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a18      	ldr	r2, [pc, #96]	; (8005dac <TIM_Base_SetConfig+0xc0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d108      	bne.n	8005d60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a07      	ldr	r2, [pc, #28]	; (8005da4 <TIM_Base_SetConfig+0xb8>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d103      	bne.n	8005d94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	615a      	str	r2, [r3, #20]
}
 8005d9a:	bf00      	nop
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bc80      	pop	{r7}
 8005da2:	4770      	bx	lr
 8005da4:	40012c00 	.word	0x40012c00
 8005da8:	40000400 	.word	0x40000400
 8005dac:	40000800 	.word	0x40000800

08005db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bc80      	pop	{r7}
 8005dc0:	4770      	bx	lr

08005dc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bc80      	pop	{r7}
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e03f      	b.n	8005e66 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7fc fd4a 	bl	8002894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2224      	movs	r2, #36	; 0x24
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fba9 	bl	8006570 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	691a      	ldr	r2, [r3, #16]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	695a      	ldr	r2, [r3, #20]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	d11d      	bne.n	8005ec4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d002      	beq.n	8005e94 <HAL_UART_Receive_IT+0x26>
 8005e8e:	88fb      	ldrh	r3, [r7, #6]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e016      	b.n	8005ec6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d101      	bne.n	8005ea6 <HAL_UART_Receive_IT+0x38>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	e00f      	b.n	8005ec6 <HAL_UART_Receive_IT+0x58>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005eb4:	88fb      	ldrh	r3, [r7, #6]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	68b9      	ldr	r1, [r7, #8]
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 f9cf 	bl	800625e <UART_Start_Receive_IT>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	e000      	b.n	8005ec6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ec4:	2302      	movs	r3, #2
  }
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08a      	sub	sp, #40	; 0x28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10d      	bne.n	8005f22 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	f003 0320 	and.w	r3, r3, #32
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <HAL_UART_IRQHandler+0x52>
 8005f10:	6a3b      	ldr	r3, [r7, #32]
 8005f12:	f003 0320 	and.w	r3, r3, #32
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fa7f 	bl	800641e <UART_Receive_IT>
      return;
 8005f20:	e17b      	b.n	800621a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 80b1 	beq.w	800608c <HAL_UART_IRQHandler+0x1bc>
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d105      	bne.n	8005f40 <HAL_UART_IRQHandler+0x70>
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 80a6 	beq.w	800608c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <HAL_UART_IRQHandler+0x90>
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d005      	beq.n	8005f60 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	f043 0201 	orr.w	r2, r3, #1
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <HAL_UART_IRQHandler+0xb0>
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	f043 0202 	orr.w	r2, r3, #2
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <HAL_UART_IRQHandler+0xd0>
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f98:	f043 0204 	orr.w	r2, r3, #4
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00f      	beq.n	8005fca <HAL_UART_IRQHandler+0xfa>
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d104      	bne.n	8005fbe <HAL_UART_IRQHandler+0xee>
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d005      	beq.n	8005fca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	f043 0208 	orr.w	r2, r3, #8
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 811e 	beq.w	8006210 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	f003 0320 	and.w	r3, r3, #32
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d007      	beq.n	8005fee <HAL_UART_IRQHandler+0x11e>
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	f003 0320 	and.w	r3, r3, #32
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fa18 	bl	800641e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	bf14      	ite	ne
 8005ffc:	2301      	movne	r3, #1
 8005ffe:	2300      	moveq	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	f003 0308 	and.w	r3, r3, #8
 800600c:	2b00      	cmp	r3, #0
 800600e:	d102      	bne.n	8006016 <HAL_UART_IRQHandler+0x146>
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d031      	beq.n	800607a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f95a 	bl	80062d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d023      	beq.n	8006072 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	695a      	ldr	r2, [r3, #20]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006038:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603e:	2b00      	cmp	r3, #0
 8006040:	d013      	beq.n	800606a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006046:	4a76      	ldr	r2, [pc, #472]	; (8006220 <HAL_UART_IRQHandler+0x350>)
 8006048:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	4618      	mov	r0, r3
 8006050:	f7fc fde4 	bl	8002c1c <HAL_DMA_Abort_IT>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d016      	beq.n	8006088 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006064:	4610      	mov	r0, r2
 8006066:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006068:	e00e      	b.n	8006088 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f8e3 	bl	8006236 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006070:	e00a      	b.n	8006088 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f8df 	bl	8006236 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006078:	e006      	b.n	8006088 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f8db 	bl	8006236 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006086:	e0c3      	b.n	8006210 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006088:	bf00      	nop
    return;
 800608a:	e0c1      	b.n	8006210 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006090:	2b01      	cmp	r3, #1
 8006092:	f040 80a1 	bne.w	80061d8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	f003 0310 	and.w	r3, r3, #16
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 809b 	beq.w	80061d8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 8095 	beq.w	80061d8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d04e      	beq.n	8006170 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80060dc:	8a3b      	ldrh	r3, [r7, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 8098 	beq.w	8006214 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060e8:	8a3a      	ldrh	r2, [r7, #16]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	f080 8092 	bcs.w	8006214 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	8a3a      	ldrh	r2, [r7, #16]
 80060f4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	2b20      	cmp	r3, #32
 80060fe:	d02b      	beq.n	8006158 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800610e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695a      	ldr	r2, [r3, #20]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0201 	bic.w	r2, r2, #1
 800611e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695a      	ldr	r2, [r3, #20]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800612e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2220      	movs	r2, #32
 8006134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68da      	ldr	r2, [r3, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0210 	bic.w	r2, r2, #16
 800614c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006152:	4618      	mov	r0, r3
 8006154:	f7fc fd27 	bl	8002ba6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006160:	b29b      	uxth	r3, r3
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	b29b      	uxth	r3, r3
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f86d 	bl	8006248 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800616e:	e051      	b.n	8006214 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006178:	b29b      	uxth	r3, r3
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006182:	b29b      	uxth	r3, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	d047      	beq.n	8006218 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006188:	8a7b      	ldrh	r3, [r7, #18]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d044      	beq.n	8006218 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800619c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695a      	ldr	r2, [r3, #20]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0201 	bic.w	r2, r2, #1
 80061ac:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68da      	ldr	r2, [r3, #12]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 0210 	bic.w	r2, r2, #16
 80061ca:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061cc:	8a7b      	ldrh	r3, [r7, #18]
 80061ce:	4619      	mov	r1, r3
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f839 	bl	8006248 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80061d6:	e01f      	b.n	8006218 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d008      	beq.n	80061f4 <HAL_UART_IRQHandler+0x324>
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f8af 	bl	8006350 <UART_Transmit_IT>
    return;
 80061f2:	e012      	b.n	800621a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00d      	beq.n	800621a <HAL_UART_IRQHandler+0x34a>
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d008      	beq.n	800621a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f8f0 	bl	80063ee <UART_EndTransmit_IT>
    return;
 800620e:	e004      	b.n	800621a <HAL_UART_IRQHandler+0x34a>
    return;
 8006210:	bf00      	nop
 8006212:	e002      	b.n	800621a <HAL_UART_IRQHandler+0x34a>
      return;
 8006214:	bf00      	nop
 8006216:	e000      	b.n	800621a <HAL_UART_IRQHandler+0x34a>
      return;
 8006218:	bf00      	nop
  }
}
 800621a:	3728      	adds	r7, #40	; 0x28
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	08006329 	.word	0x08006329

08006224 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	bc80      	pop	{r7}
 8006234:	4770      	bx	lr

08006236 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr

08006248 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	bc80      	pop	{r7}
 800625c:	4770      	bx	lr

0800625e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800625e:	b480      	push	{r7}
 8006260:	b085      	sub	sp, #20
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	4613      	mov	r3, r2
 800626a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	88fa      	ldrh	r2, [r7, #6]
 8006276:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	88fa      	ldrh	r2, [r7, #6]
 800627c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2222      	movs	r2, #34	; 0x22
 8006288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062a2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	695a      	ldr	r2, [r3, #20]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0201 	orr.w	r2, r2, #1
 80062b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0220 	orr.w	r2, r2, #32
 80062c2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr

080062d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695a      	ldr	r2, [r3, #20]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 0201 	bic.w	r2, r2, #1
 80062f6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d107      	bne.n	8006310 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0210 	bic.w	r2, r2, #16
 800630e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800631e:	bf00      	nop
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	bc80      	pop	{r7}
 8006326:	4770      	bx	lr

08006328 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f7ff ff77 	bl	8006236 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006348:	bf00      	nop
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b21      	cmp	r3, #33	; 0x21
 8006362:	d13e      	bne.n	80063e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636c:	d114      	bne.n	8006398 <UART_Transmit_IT+0x48>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d110      	bne.n	8006398 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	461a      	mov	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800638a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	1c9a      	adds	r2, r3, #2
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	621a      	str	r2, [r3, #32]
 8006396:	e008      	b.n	80063aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	1c59      	adds	r1, r3, #1
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6211      	str	r1, [r2, #32]
 80063a2:	781a      	ldrb	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	4619      	mov	r1, r3
 80063b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10f      	bne.n	80063de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68da      	ldr	r2, [r3, #12]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	e000      	b.n	80063e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063e2:	2302      	movs	r3, #2
  }
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bc80      	pop	{r7}
 80063ec:	4770      	bx	lr

080063ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b082      	sub	sp, #8
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68da      	ldr	r2, [r3, #12]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006404:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2220      	movs	r2, #32
 800640a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7ff ff08 	bl	8006224 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b086      	sub	sp, #24
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b22      	cmp	r3, #34	; 0x22
 8006430:	f040 8099 	bne.w	8006566 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643c:	d117      	bne.n	800646e <UART_Receive_IT+0x50>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d113      	bne.n	800646e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006446:	2300      	movs	r3, #0
 8006448:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	b29b      	uxth	r3, r3
 8006458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800645c:	b29a      	uxth	r2, r3
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006466:	1c9a      	adds	r2, r3, #2
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	629a      	str	r2, [r3, #40]	; 0x28
 800646c:	e026      	b.n	80064bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006472:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006474:	2300      	movs	r3, #0
 8006476:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006480:	d007      	beq.n	8006492 <UART_Receive_IT+0x74>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10a      	bne.n	80064a0 <UART_Receive_IT+0x82>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d106      	bne.n	80064a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	b2da      	uxtb	r2, r3
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	701a      	strb	r2, [r3, #0]
 800649e:	e008      	b.n	80064b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	3b01      	subs	r3, #1
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	4619      	mov	r1, r3
 80064ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d148      	bne.n	8006562 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0220 	bic.w	r2, r2, #32
 80064de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695a      	ldr	r2, [r3, #20]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 0201 	bic.w	r2, r2, #1
 80064fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2220      	movs	r2, #32
 8006504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650c:	2b01      	cmp	r3, #1
 800650e:	d123      	bne.n	8006558 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 0210 	bic.w	r2, r2, #16
 8006524:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0310 	and.w	r3, r3, #16
 8006530:	2b10      	cmp	r3, #16
 8006532:	d10a      	bne.n	800654a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff fe79 	bl	8006248 <HAL_UARTEx_RxEventCallback>
 8006556:	e002      	b.n	800655e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7fa f931 	bl	80007c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	e002      	b.n	8006568 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	e000      	b.n	8006568 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006566:	2302      	movs	r3, #2
  }
}
 8006568:	4618      	mov	r0, r3
 800656a:	3718      	adds	r7, #24
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689a      	ldr	r2, [r3, #8]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	4313      	orrs	r3, r2
 800659e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80065aa:	f023 030c 	bic.w	r3, r3, #12
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6812      	ldr	r2, [r2, #0]
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	430b      	orrs	r3, r1
 80065b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a2c      	ldr	r2, [pc, #176]	; (8006684 <UART_SetConfig+0x114>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d103      	bne.n	80065e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80065d8:	f7fe fe34 	bl	8005244 <HAL_RCC_GetPCLK2Freq>
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	e002      	b.n	80065e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80065e0:	f7fe fe1c 	bl	800521c <HAL_RCC_GetPCLK1Freq>
 80065e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4613      	mov	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	009a      	lsls	r2, r3, #2
 80065f0:	441a      	add	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fc:	4a22      	ldr	r2, [pc, #136]	; (8006688 <UART_SetConfig+0x118>)
 80065fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006602:	095b      	lsrs	r3, r3, #5
 8006604:	0119      	lsls	r1, r3, #4
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	4613      	mov	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	009a      	lsls	r2, r3, #2
 8006610:	441a      	add	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	fbb2 f2f3 	udiv	r2, r2, r3
 800661c:	4b1a      	ldr	r3, [pc, #104]	; (8006688 <UART_SetConfig+0x118>)
 800661e:	fba3 0302 	umull	r0, r3, r3, r2
 8006622:	095b      	lsrs	r3, r3, #5
 8006624:	2064      	movs	r0, #100	; 0x64
 8006626:	fb00 f303 	mul.w	r3, r0, r3
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	3332      	adds	r3, #50	; 0x32
 8006630:	4a15      	ldr	r2, [pc, #84]	; (8006688 <UART_SetConfig+0x118>)
 8006632:	fba2 2303 	umull	r2, r3, r2, r3
 8006636:	095b      	lsrs	r3, r3, #5
 8006638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800663c:	4419      	add	r1, r3
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	4613      	mov	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	009a      	lsls	r2, r3, #2
 8006648:	441a      	add	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	fbb2 f2f3 	udiv	r2, r2, r3
 8006654:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <UART_SetConfig+0x118>)
 8006656:	fba3 0302 	umull	r0, r3, r3, r2
 800665a:	095b      	lsrs	r3, r3, #5
 800665c:	2064      	movs	r0, #100	; 0x64
 800665e:	fb00 f303 	mul.w	r3, r0, r3
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	3332      	adds	r3, #50	; 0x32
 8006668:	4a07      	ldr	r2, [pc, #28]	; (8006688 <UART_SetConfig+0x118>)
 800666a:	fba2 2303 	umull	r2, r3, r2, r3
 800666e:	095b      	lsrs	r3, r3, #5
 8006670:	f003 020f 	and.w	r2, r3, #15
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	440a      	add	r2, r1
 800667a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800667c:	bf00      	nop
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	40013800 	.word	0x40013800
 8006688:	51eb851f 	.word	0x51eb851f

0800668c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800668c:	b084      	sub	sp, #16
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	f107 0014 	add.w	r0, r7, #20
 800669a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bc80      	pop	{r7}
 80066a8:	b004      	add	sp, #16
 80066aa:	4770      	bx	lr

080066ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80066bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80066c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr

080066d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80066e0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80066e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	43db      	mvns	r3, r3
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	4013      	ands	r3, r2
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	bc80      	pop	{r7}
 800670a:	4770      	bx	lr

0800670c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	460b      	mov	r3, r1
 8006716:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr

08006724 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006724:	b084      	sub	sp, #16
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	f107 0014 	add.w	r0, r7, #20
 8006732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	bc80      	pop	{r7}
 8006760:	b004      	add	sp, #16
 8006762:	4770      	bx	lr

08006764 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006764:	b480      	push	{r7}
 8006766:	b09b      	sub	sp, #108	; 0x6c
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	b29b      	uxth	r3, r3
 8006782:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	78db      	ldrb	r3, [r3, #3]
 8006792:	2b03      	cmp	r3, #3
 8006794:	d81f      	bhi.n	80067d6 <USB_ActivateEndpoint+0x72>
 8006796:	a201      	add	r2, pc, #4	; (adr r2, 800679c <USB_ActivateEndpoint+0x38>)
 8006798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679c:	080067ad 	.word	0x080067ad
 80067a0:	080067c9 	.word	0x080067c9
 80067a4:	080067df 	.word	0x080067df
 80067a8:	080067bb 	.word	0x080067bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80067ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80067b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80067b8:	e012      	b.n	80067e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80067ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80067be:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80067c2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80067c6:	e00b      	b.n	80067e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80067c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80067cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067d0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80067d4:	e004      	b.n	80067e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80067dc:	e000      	b.n	80067e0 <USB_ActivateEndpoint+0x7c>
      break;
 80067de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	441a      	add	r2, r3
 80067ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80067ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067fe:	b29b      	uxth	r3, r3
 8006800:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	b29b      	uxth	r3, r3
 8006810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006818:	b29a      	uxth	r2, r3
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	b29b      	uxth	r3, r3
 8006820:	4313      	orrs	r3, r2
 8006822:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	441a      	add	r2, r3
 8006830:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800683c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006844:	b29b      	uxth	r3, r3
 8006846:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	7b1b      	ldrb	r3, [r3, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	f040 8149 	bne.w	8006ae4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	785b      	ldrb	r3, [r3, #1]
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 8084 	beq.w	8006964 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006866:	b29b      	uxth	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	4413      	add	r3, r2
 800686e:	617b      	str	r3, [r7, #20]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	011a      	lsls	r2, r3, #4
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800687e:	613b      	str	r3, [r7, #16]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	88db      	ldrh	r3, [r3, #6]
 8006884:	085b      	lsrs	r3, r3, #1
 8006886:	b29b      	uxth	r3, r3
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	b29a      	uxth	r2, r3
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	81fb      	strh	r3, [r7, #14]
 800689e:	89fb      	ldrh	r3, [r7, #14]
 80068a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d01b      	beq.n	80068e0 <USB_ActivateEndpoint+0x17c>
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068be:	81bb      	strh	r3, [r7, #12]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	441a      	add	r2, r3
 80068ca:	89bb      	ldrh	r3, [r7, #12]
 80068cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068dc:	b29b      	uxth	r3, r3
 80068de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	78db      	ldrb	r3, [r3, #3]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d020      	beq.n	800692a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	881b      	ldrh	r3, [r3, #0]
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068fe:	813b      	strh	r3, [r7, #8]
 8006900:	893b      	ldrh	r3, [r7, #8]
 8006902:	f083 0320 	eor.w	r3, r3, #32
 8006906:	813b      	strh	r3, [r7, #8]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	441a      	add	r2, r3
 8006912:	893b      	ldrh	r3, [r7, #8]
 8006914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800691c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006924:	b29b      	uxth	r3, r3
 8006926:	8013      	strh	r3, [r2, #0]
 8006928:	e27f      	b.n	8006e2a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	b29b      	uxth	r3, r3
 8006938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006940:	817b      	strh	r3, [r7, #10]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	441a      	add	r2, r3
 800694c:	897b      	ldrh	r3, [r7, #10]
 800694e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800695a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800695e:	b29b      	uxth	r3, r3
 8006960:	8013      	strh	r3, [r2, #0]
 8006962:	e262      	b.n	8006e2a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800696e:	b29b      	uxth	r3, r3
 8006970:	461a      	mov	r2, r3
 8006972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006974:	4413      	add	r3, r2
 8006976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	011a      	lsls	r2, r3, #4
 800697e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006980:	4413      	add	r3, r2
 8006982:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006986:	62bb      	str	r3, [r7, #40]	; 0x28
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	88db      	ldrh	r3, [r3, #6]
 800698c:	085b      	lsrs	r3, r3, #1
 800698e:	b29b      	uxth	r3, r3
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	b29a      	uxth	r2, r3
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	461a      	mov	r2, r3
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	4413      	add	r3, r2
 80069aa:	627b      	str	r3, [r7, #36]	; 0x24
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	011a      	lsls	r2, r3, #4
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	4413      	add	r3, r2
 80069b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069ba:	623b      	str	r3, [r7, #32]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d112      	bne.n	80069ea <USB_ActivateEndpoint+0x286>
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	881b      	ldrh	r3, [r3, #0]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	801a      	strh	r2, [r3, #0]
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	801a      	strh	r2, [r3, #0]
 80069e8:	e02f      	b.n	8006a4a <USB_ActivateEndpoint+0x2e6>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	2b3e      	cmp	r3, #62	; 0x3e
 80069f0:	d813      	bhi.n	8006a1a <USB_ActivateEndpoint+0x2b6>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	085b      	lsrs	r3, r3, #1
 80069f8:	663b      	str	r3, [r7, #96]	; 0x60
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <USB_ActivateEndpoint+0x2a8>
 8006a06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a08:	3301      	adds	r3, #1
 8006a0a:	663b      	str	r3, [r7, #96]	; 0x60
 8006a0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	029b      	lsls	r3, r3, #10
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	801a      	strh	r2, [r3, #0]
 8006a18:	e017      	b.n	8006a4a <USB_ActivateEndpoint+0x2e6>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	095b      	lsrs	r3, r3, #5
 8006a20:	663b      	str	r3, [r7, #96]	; 0x60
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f003 031f 	and.w	r3, r3, #31
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d102      	bne.n	8006a34 <USB_ActivateEndpoint+0x2d0>
 8006a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a30:	3b01      	subs	r3, #1
 8006a32:	663b      	str	r3, [r7, #96]	; 0x60
 8006a34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	029b      	lsls	r3, r3, #10
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	83fb      	strh	r3, [r7, #30]
 8006a58:	8bfb      	ldrh	r3, [r7, #30]
 8006a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d01b      	beq.n	8006a9a <USB_ActivateEndpoint+0x336>
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a78:	83bb      	strh	r3, [r7, #28]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	441a      	add	r2, r3
 8006a84:	8bbb      	ldrh	r3, [r7, #28]
 8006a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab0:	837b      	strh	r3, [r7, #26]
 8006ab2:	8b7b      	ldrh	r3, [r7, #26]
 8006ab4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ab8:	837b      	strh	r3, [r7, #26]
 8006aba:	8b7b      	ldrh	r3, [r7, #26]
 8006abc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ac0:	837b      	strh	r3, [r7, #26]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	441a      	add	r2, r3
 8006acc:	8b7b      	ldrh	r3, [r7, #26]
 8006ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	8013      	strh	r3, [r2, #0]
 8006ae2:	e1a2      	b.n	8006e2a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	441a      	add	r2, r3
 8006b08:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b14:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b30:	4413      	add	r3, r2
 8006b32:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	011a      	lsls	r2, r3, #4
 8006b3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b42:	657b      	str	r3, [r7, #84]	; 0x54
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	891b      	ldrh	r3, [r3, #8]
 8006b48:	085b      	lsrs	r3, r3, #1
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	005b      	lsls	r3, r3, #1
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b52:	801a      	strh	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	653b      	str	r3, [r7, #80]	; 0x50
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	461a      	mov	r2, r3
 8006b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b64:	4413      	add	r3, r2
 8006b66:	653b      	str	r3, [r7, #80]	; 0x50
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	011a      	lsls	r2, r3, #4
 8006b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	895b      	ldrh	r3, [r3, #10]
 8006b7c:	085b      	lsrs	r3, r3, #1
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b86:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	785b      	ldrb	r3, [r3, #1]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f040 8091 	bne.w	8006cb4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006ba0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d01b      	beq.n	8006be2 <USB_ActivateEndpoint+0x47e>
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	441a      	add	r2, r3
 8006bcc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	873b      	strh	r3, [r7, #56]	; 0x38
 8006bf0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d01b      	beq.n	8006c32 <USB_ActivateEndpoint+0x4ce>
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c10:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	441a      	add	r2, r3
 8006c1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c48:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006c4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006c4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c50:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006c52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006c54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c58:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	441a      	add	r2, r3
 8006c64:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c90:	867b      	strh	r3, [r7, #50]	; 0x32
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	441a      	add	r2, r3
 8006c9c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	8013      	strh	r3, [r2, #0]
 8006cb2:	e0ba      	b.n	8006e2a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006cc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d01d      	beq.n	8006d0c <USB_ActivateEndpoint+0x5a8>
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	441a      	add	r2, r3
 8006cf4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006d1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d01d      	beq.n	8006d64 <USB_ActivateEndpoint+0x600>
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	441a      	add	r2, r3
 8006d4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006d50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	78db      	ldrb	r3, [r3, #3]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d024      	beq.n	8006db6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006d86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006d8a:	f083 0320 	eor.w	r3, r3, #32
 8006d8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	441a      	add	r2, r3
 8006d9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	8013      	strh	r3, [r2, #0]
 8006db4:	e01d      	b.n	8006df2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dcc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	441a      	add	r2, r3
 8006dda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e08:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	441a      	add	r2, r3
 8006e14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006e2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	376c      	adds	r7, #108	; 0x6c
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bc80      	pop	{r7}
 8006e36:	4770      	bx	lr

08006e38 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b08d      	sub	sp, #52	; 0x34
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	7b1b      	ldrb	r3, [r3, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f040 808e 	bne.w	8006f68 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	785b      	ldrb	r3, [r3, #1]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d044      	beq.n	8006ede <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	81bb      	strh	r3, [r7, #12]
 8006e62:	89bb      	ldrh	r3, [r7, #12]
 8006e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01b      	beq.n	8006ea4 <USB_DeactivateEndpoint+0x6c>
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e82:	817b      	strh	r3, [r7, #10]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	441a      	add	r2, r3
 8006e8e:	897b      	ldrh	r3, [r7, #10]
 8006e90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eba:	813b      	strh	r3, [r7, #8]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	441a      	add	r2, r3
 8006ec6:	893b      	ldrh	r3, [r7, #8]
 8006ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	8013      	strh	r3, [r2, #0]
 8006edc:	e192      	b.n	8007204 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	827b      	strh	r3, [r7, #18]
 8006eec:	8a7b      	ldrh	r3, [r7, #18]
 8006eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d01b      	beq.n	8006f2e <USB_DeactivateEndpoint+0xf6>
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0c:	823b      	strh	r3, [r7, #16]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	441a      	add	r2, r3
 8006f18:	8a3b      	ldrh	r3, [r7, #16]
 8006f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f44:	81fb      	strh	r3, [r7, #14]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	441a      	add	r2, r3
 8006f50:	89fb      	ldrh	r3, [r7, #14]
 8006f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	8013      	strh	r3, [r2, #0]
 8006f66:	e14d      	b.n	8007204 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	785b      	ldrb	r3, [r3, #1]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f040 80a5 	bne.w	80070bc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	843b      	strh	r3, [r7, #32]
 8006f80:	8c3b      	ldrh	r3, [r7, #32]
 8006f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d01b      	beq.n	8006fc2 <USB_DeactivateEndpoint+0x18a>
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa0:	83fb      	strh	r3, [r7, #30]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	441a      	add	r2, r3
 8006fac:	8bfb      	ldrh	r3, [r7, #30]
 8006fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	83bb      	strh	r3, [r7, #28]
 8006fd0:	8bbb      	ldrh	r3, [r7, #28]
 8006fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d01b      	beq.n	8007012 <USB_DeactivateEndpoint+0x1da>
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff0:	837b      	strh	r3, [r7, #26]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	441a      	add	r2, r3
 8006ffc:	8b7b      	ldrh	r3, [r7, #26]
 8006ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800700a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800700e:	b29b      	uxth	r3, r3
 8007010:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	b29b      	uxth	r3, r3
 8007020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007028:	833b      	strh	r3, [r7, #24]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	441a      	add	r2, r3
 8007034:	8b3b      	ldrh	r3, [r7, #24]
 8007036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800703a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800703e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007042:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007046:	b29b      	uxth	r3, r3
 8007048:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	b29b      	uxth	r3, r3
 8007058:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800705c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007060:	82fb      	strh	r3, [r7, #22]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	441a      	add	r2, r3
 800706c:	8afb      	ldrh	r3, [r7, #22]
 800706e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800707a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707e:	b29b      	uxth	r3, r3
 8007080:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	b29b      	uxth	r3, r3
 8007090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007098:	82bb      	strh	r3, [r7, #20]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	441a      	add	r2, r3
 80070a4:	8abb      	ldrh	r3, [r7, #20]
 80070a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	8013      	strh	r3, [r2, #0]
 80070ba:	e0a3      	b.n	8007204 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80070ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80070cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d01b      	beq.n	800710c <USB_DeactivateEndpoint+0x2d4>
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	441a      	add	r2, r3
 80070f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80070f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007100:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007108:	b29b      	uxth	r3, r3
 800710a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	857b      	strh	r3, [r7, #42]	; 0x2a
 800711a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800711c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007120:	2b00      	cmp	r3, #0
 8007122:	d01b      	beq.n	800715c <USB_DeactivateEndpoint+0x324>
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	b29b      	uxth	r3, r3
 8007132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713a:	853b      	strh	r3, [r7, #40]	; 0x28
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	441a      	add	r2, r3
 8007146:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800714c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007154:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007158:	b29b      	uxth	r3, r3
 800715a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	b29b      	uxth	r3, r3
 800716a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800716e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007172:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	441a      	add	r2, r3
 800717e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007188:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800718c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007190:	b29b      	uxth	r3, r3
 8007192:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	881b      	ldrh	r3, [r3, #0]
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	441a      	add	r2, r3
 80071b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	881b      	ldrh	r3, [r3, #0]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	441a      	add	r2, r3
 80071ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007200:	b29b      	uxth	r3, r3
 8007202:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3734      	adds	r7, #52	; 0x34
 800720a:	46bd      	mov	sp, r7
 800720c:	bc80      	pop	{r7}
 800720e:	4770      	bx	lr

08007210 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b0cc      	sub	sp, #304	; 0x130
 8007214:	af00      	add	r7, sp, #0
 8007216:	1d3b      	adds	r3, r7, #4
 8007218:	6018      	str	r0, [r3, #0]
 800721a:	463b      	mov	r3, r7
 800721c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800721e:	463b      	mov	r3, r7
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	785b      	ldrb	r3, [r3, #1]
 8007224:	2b01      	cmp	r3, #1
 8007226:	f040 872e 	bne.w	8008086 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800722a:	463b      	mov	r3, r7
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	699a      	ldr	r2, [r3, #24]
 8007230:	463b      	mov	r3, r7
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	429a      	cmp	r2, r3
 8007238:	d905      	bls.n	8007246 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800723a:	463b      	mov	r3, r7
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007244:	e004      	b.n	8007250 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007246:	463b      	mov	r3, r7
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007250:	463b      	mov	r3, r7
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	7b1b      	ldrb	r3, [r3, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d134      	bne.n	80072c4 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800725a:	463b      	mov	r3, r7
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6959      	ldr	r1, [r3, #20]
 8007260:	463b      	mov	r3, r7
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	88da      	ldrh	r2, [r3, #6]
 8007266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800726a:	b29b      	uxth	r3, r3
 800726c:	1d38      	adds	r0, r7, #4
 800726e:	6800      	ldr	r0, [r0, #0]
 8007270:	f001 fc03 	bl	8008a7a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007274:	f107 0310 	add.w	r3, r7, #16
 8007278:	1d3a      	adds	r2, r7, #4
 800727a:	6812      	ldr	r2, [r2, #0]
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	1d3b      	adds	r3, r7, #4
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007286:	b29b      	uxth	r3, r3
 8007288:	4619      	mov	r1, r3
 800728a:	f107 0310 	add.w	r3, r7, #16
 800728e:	f107 0210 	add.w	r2, r7, #16
 8007292:	6812      	ldr	r2, [r2, #0]
 8007294:	440a      	add	r2, r1
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	463b      	mov	r3, r7
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	011a      	lsls	r2, r3, #4
 80072a0:	f107 0310 	add.w	r3, r7, #16
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4413      	add	r3, r2
 80072a8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80072ac:	f107 030c 	add.w	r3, r7, #12
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	f107 030c 	add.w	r3, r7, #12
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	801a      	strh	r2, [r3, #0]
 80072c0:	f000 beac 	b.w	800801c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80072c4:	463b      	mov	r3, r7
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	78db      	ldrb	r3, [r3, #3]
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	f040 838c 	bne.w	80079e8 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80072d0:	463b      	mov	r3, r7
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6a1a      	ldr	r2, [r3, #32]
 80072d6:	463b      	mov	r3, r7
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	429a      	cmp	r2, r3
 80072de:	f240 8330 	bls.w	8007942 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80072e2:	1d3b      	adds	r3, r7, #4
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	463b      	mov	r3, r7
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007300:	1d3b      	adds	r3, r7, #4
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	463b      	mov	r3, r7
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	441a      	add	r2, r3
 800730e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800731a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800731e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007322:	b29b      	uxth	r3, r3
 8007324:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007326:	463b      	mov	r3, r7
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6a1a      	ldr	r2, [r3, #32]
 800732c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007330:	1ad2      	subs	r2, r2, r3
 8007332:	463b      	mov	r3, r7
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007338:	1d3b      	adds	r3, r7, #4
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	463b      	mov	r3, r7
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	b29b      	uxth	r3, r3
 800734a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 819e 	beq.w	8007690 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007354:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007358:	1d3a      	adds	r2, r7, #4
 800735a:	6812      	ldr	r2, [r2, #0]
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	463b      	mov	r3, r7
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	785b      	ldrb	r3, [r3, #1]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d17a      	bne.n	800745e <USB_EPStartXfer+0x24e>
 8007368:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800736c:	1d3a      	adds	r2, r7, #4
 800736e:	6812      	ldr	r2, [r2, #0]
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	1d3b      	adds	r3, r7, #4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800737a:	b29b      	uxth	r3, r3
 800737c:	4619      	mov	r1, r3
 800737e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007382:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007386:	6812      	ldr	r2, [r2, #0]
 8007388:	440a      	add	r2, r1
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	463b      	mov	r3, r7
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	011a      	lsls	r2, r3, #4
 8007394:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4413      	add	r3, r2
 800739c:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80073a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d11a      	bne.n	80073e4 <USB_EPStartXfer+0x1d4>
 80073ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073bc:	b29a      	uxth	r2, r3
 80073be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	801a      	strh	r2, [r3, #0]
 80073c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d8:	b29a      	uxth	r2, r3
 80073da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	801a      	strh	r2, [r3, #0]
 80073e2:	e062      	b.n	80074aa <USB_EPStartXfer+0x29a>
 80073e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e8:	2b3e      	cmp	r3, #62	; 0x3e
 80073ea:	d819      	bhi.n	8007420 <USB_EPStartXfer+0x210>
 80073ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f0:	085b      	lsrs	r3, r3, #1
 80073f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80073f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d004      	beq.n	800740c <USB_EPStartXfer+0x1fc>
 8007402:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007406:	3301      	adds	r3, #1
 8007408:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800740c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007410:	b29b      	uxth	r3, r3
 8007412:	029b      	lsls	r3, r3, #10
 8007414:	b29a      	uxth	r2, r3
 8007416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	801a      	strh	r2, [r3, #0]
 800741e:	e044      	b.n	80074aa <USB_EPStartXfer+0x29a>
 8007420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007424:	095b      	lsrs	r3, r3, #5
 8007426:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800742a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800742e:	f003 031f 	and.w	r3, r3, #31
 8007432:	2b00      	cmp	r3, #0
 8007434:	d104      	bne.n	8007440 <USB_EPStartXfer+0x230>
 8007436:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800743a:	3b01      	subs	r3, #1
 800743c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007440:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007444:	b29b      	uxth	r3, r3
 8007446:	029b      	lsls	r3, r3, #10
 8007448:	b29b      	uxth	r3, r3
 800744a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800744e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007452:	b29a      	uxth	r2, r3
 8007454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	801a      	strh	r2, [r3, #0]
 800745c:	e025      	b.n	80074aa <USB_EPStartXfer+0x29a>
 800745e:	463b      	mov	r3, r7
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	785b      	ldrb	r3, [r3, #1]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d120      	bne.n	80074aa <USB_EPStartXfer+0x29a>
 8007468:	1d3b      	adds	r3, r7, #4
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007470:	b29b      	uxth	r3, r3
 8007472:	4619      	mov	r1, r3
 8007474:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007478:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800747c:	6812      	ldr	r2, [r2, #0]
 800747e:	440a      	add	r2, r1
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	463b      	mov	r3, r7
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	011a      	lsls	r2, r3, #4
 800748a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4413      	add	r3, r2
 8007492:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80074aa:	463b      	mov	r3, r7
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	895b      	ldrh	r3, [r3, #10]
 80074b0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074b4:	463b      	mov	r3, r7
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6959      	ldr	r1, [r3, #20]
 80074ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074be:	b29b      	uxth	r3, r3
 80074c0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80074c4:	1d38      	adds	r0, r7, #4
 80074c6:	6800      	ldr	r0, [r0, #0]
 80074c8:	f001 fad7 	bl	8008a7a <USB_WritePMA>
            ep->xfer_buff += len;
 80074cc:	463b      	mov	r3, r7
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	695a      	ldr	r2, [r3, #20]
 80074d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d6:	441a      	add	r2, r3
 80074d8:	463b      	mov	r3, r7
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80074de:	463b      	mov	r3, r7
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6a1a      	ldr	r2, [r3, #32]
 80074e4:	463b      	mov	r3, r7
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d909      	bls.n	8007502 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80074ee:	463b      	mov	r3, r7
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6a1a      	ldr	r2, [r3, #32]
 80074f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f8:	1ad2      	subs	r2, r2, r3
 80074fa:	463b      	mov	r3, r7
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	621a      	str	r2, [r3, #32]
 8007500:	e008      	b.n	8007514 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8007502:	463b      	mov	r3, r7
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6a1b      	ldr	r3, [r3, #32]
 8007508:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800750c:	463b      	mov	r3, r7
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2200      	movs	r2, #0
 8007512:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007514:	463b      	mov	r3, r7
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	785b      	ldrb	r3, [r3, #1]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d17a      	bne.n	8007614 <USB_EPStartXfer+0x404>
 800751e:	f107 0318 	add.w	r3, r7, #24
 8007522:	1d3a      	adds	r2, r7, #4
 8007524:	6812      	ldr	r2, [r2, #0]
 8007526:	601a      	str	r2, [r3, #0]
 8007528:	1d3b      	adds	r3, r7, #4
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007530:	b29b      	uxth	r3, r3
 8007532:	4619      	mov	r1, r3
 8007534:	f107 0318 	add.w	r3, r7, #24
 8007538:	f107 0218 	add.w	r2, r7, #24
 800753c:	6812      	ldr	r2, [r2, #0]
 800753e:	440a      	add	r2, r1
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	463b      	mov	r3, r7
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	011a      	lsls	r2, r3, #4
 800754a:	f107 0318 	add.w	r3, r7, #24
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4413      	add	r3, r2
 8007552:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007556:	f107 0314 	add.w	r3, r7, #20
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007560:	2b00      	cmp	r3, #0
 8007562:	d11a      	bne.n	800759a <USB_EPStartXfer+0x38a>
 8007564:	f107 0314 	add.w	r3, r7, #20
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	881b      	ldrh	r3, [r3, #0]
 800756c:	b29b      	uxth	r3, r3
 800756e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007572:	b29a      	uxth	r2, r3
 8007574:	f107 0314 	add.w	r3, r7, #20
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	801a      	strh	r2, [r3, #0]
 800757c:	f107 0314 	add.w	r3, r7, #20
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	b29b      	uxth	r3, r3
 8007586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800758a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800758e:	b29a      	uxth	r2, r3
 8007590:	f107 0314 	add.w	r3, r7, #20
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	801a      	strh	r2, [r3, #0]
 8007598:	e067      	b.n	800766a <USB_EPStartXfer+0x45a>
 800759a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800759e:	2b3e      	cmp	r3, #62	; 0x3e
 80075a0:	d819      	bhi.n	80075d6 <USB_EPStartXfer+0x3c6>
 80075a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a6:	085b      	lsrs	r3, r3, #1
 80075a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80075ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d004      	beq.n	80075c2 <USB_EPStartXfer+0x3b2>
 80075b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80075bc:	3301      	adds	r3, #1
 80075be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80075c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	029b      	lsls	r3, r3, #10
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	f107 0314 	add.w	r3, r7, #20
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	801a      	strh	r2, [r3, #0]
 80075d4:	e049      	b.n	800766a <USB_EPStartXfer+0x45a>
 80075d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075da:	095b      	lsrs	r3, r3, #5
 80075dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80075e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e4:	f003 031f 	and.w	r3, r3, #31
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d104      	bne.n	80075f6 <USB_EPStartXfer+0x3e6>
 80075ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80075f0:	3b01      	subs	r3, #1
 80075f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80075f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	029b      	lsls	r3, r3, #10
 80075fe:	b29b      	uxth	r3, r3
 8007600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007608:	b29a      	uxth	r2, r3
 800760a:	f107 0314 	add.w	r3, r7, #20
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	801a      	strh	r2, [r3, #0]
 8007612:	e02a      	b.n	800766a <USB_EPStartXfer+0x45a>
 8007614:	463b      	mov	r3, r7
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	785b      	ldrb	r3, [r3, #1]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d125      	bne.n	800766a <USB_EPStartXfer+0x45a>
 800761e:	f107 0320 	add.w	r3, r7, #32
 8007622:	1d3a      	adds	r2, r7, #4
 8007624:	6812      	ldr	r2, [r2, #0]
 8007626:	601a      	str	r2, [r3, #0]
 8007628:	1d3b      	adds	r3, r7, #4
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007630:	b29b      	uxth	r3, r3
 8007632:	4619      	mov	r1, r3
 8007634:	f107 0320 	add.w	r3, r7, #32
 8007638:	f107 0220 	add.w	r2, r7, #32
 800763c:	6812      	ldr	r2, [r2, #0]
 800763e:	440a      	add	r2, r1
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	463b      	mov	r3, r7
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	011a      	lsls	r2, r3, #4
 800764a:	f107 0320 	add.w	r3, r7, #32
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4413      	add	r3, r2
 8007652:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007656:	f107 031c 	add.w	r3, r7, #28
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007660:	b29a      	uxth	r2, r3
 8007662:	f107 031c 	add.w	r3, r7, #28
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800766a:	463b      	mov	r3, r7
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	891b      	ldrh	r3, [r3, #8]
 8007670:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007674:	463b      	mov	r3, r7
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6959      	ldr	r1, [r3, #20]
 800767a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800767e:	b29b      	uxth	r3, r3
 8007680:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007684:	1d38      	adds	r0, r7, #4
 8007686:	6800      	ldr	r0, [r0, #0]
 8007688:	f001 f9f7 	bl	8008a7a <USB_WritePMA>
 800768c:	f000 bcc6 	b.w	800801c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007690:	463b      	mov	r3, r7
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	785b      	ldrb	r3, [r3, #1]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d164      	bne.n	8007764 <USB_EPStartXfer+0x554>
 800769a:	1d3b      	adds	r3, r7, #4
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	64bb      	str	r3, [r7, #72]	; 0x48
 80076a0:	1d3b      	adds	r3, r7, #4
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	461a      	mov	r2, r3
 80076ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ae:	4413      	add	r3, r2
 80076b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80076b2:	463b      	mov	r3, r7
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	011a      	lsls	r2, r3, #4
 80076ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076bc:	4413      	add	r3, r2
 80076be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076c2:	647b      	str	r3, [r7, #68]	; 0x44
 80076c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d112      	bne.n	80076f2 <USB_EPStartXfer+0x4e2>
 80076cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076da:	801a      	strh	r2, [r3, #0]
 80076dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ee:	801a      	strh	r2, [r3, #0]
 80076f0:	e057      	b.n	80077a2 <USB_EPStartXfer+0x592>
 80076f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f6:	2b3e      	cmp	r3, #62	; 0x3e
 80076f8:	d817      	bhi.n	800772a <USB_EPStartXfer+0x51a>
 80076fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076fe:	085b      	lsrs	r3, r3, #1
 8007700:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	d004      	beq.n	800771a <USB_EPStartXfer+0x50a>
 8007710:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007714:	3301      	adds	r3, #1
 8007716:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800771a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800771e:	b29b      	uxth	r3, r3
 8007720:	029b      	lsls	r3, r3, #10
 8007722:	b29a      	uxth	r2, r3
 8007724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007726:	801a      	strh	r2, [r3, #0]
 8007728:	e03b      	b.n	80077a2 <USB_EPStartXfer+0x592>
 800772a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800772e:	095b      	lsrs	r3, r3, #5
 8007730:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007738:	f003 031f 	and.w	r3, r3, #31
 800773c:	2b00      	cmp	r3, #0
 800773e:	d104      	bne.n	800774a <USB_EPStartXfer+0x53a>
 8007740:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007744:	3b01      	subs	r3, #1
 8007746:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800774a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800774e:	b29b      	uxth	r3, r3
 8007750:	029b      	lsls	r3, r3, #10
 8007752:	b29b      	uxth	r3, r3
 8007754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800775c:	b29a      	uxth	r2, r3
 800775e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007760:	801a      	strh	r2, [r3, #0]
 8007762:	e01e      	b.n	80077a2 <USB_EPStartXfer+0x592>
 8007764:	463b      	mov	r3, r7
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	785b      	ldrb	r3, [r3, #1]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d119      	bne.n	80077a2 <USB_EPStartXfer+0x592>
 800776e:	1d3b      	adds	r3, r7, #4
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	653b      	str	r3, [r7, #80]	; 0x50
 8007774:	1d3b      	adds	r3, r7, #4
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800777c:	b29b      	uxth	r3, r3
 800777e:	461a      	mov	r2, r3
 8007780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007782:	4413      	add	r3, r2
 8007784:	653b      	str	r3, [r7, #80]	; 0x50
 8007786:	463b      	mov	r3, r7
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	011a      	lsls	r2, r3, #4
 800778e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007790:	4413      	add	r3, r2
 8007792:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800779c:	b29a      	uxth	r2, r3
 800779e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80077a2:	463b      	mov	r3, r7
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	891b      	ldrh	r3, [r3, #8]
 80077a8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077ac:	463b      	mov	r3, r7
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6959      	ldr	r1, [r3, #20]
 80077b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80077bc:	1d38      	adds	r0, r7, #4
 80077be:	6800      	ldr	r0, [r0, #0]
 80077c0:	f001 f95b 	bl	8008a7a <USB_WritePMA>
            ep->xfer_buff += len;
 80077c4:	463b      	mov	r3, r7
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	695a      	ldr	r2, [r3, #20]
 80077ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ce:	441a      	add	r2, r3
 80077d0:	463b      	mov	r3, r7
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077d6:	463b      	mov	r3, r7
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6a1a      	ldr	r2, [r3, #32]
 80077dc:	463b      	mov	r3, r7
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d909      	bls.n	80077fa <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80077e6:	463b      	mov	r3, r7
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6a1a      	ldr	r2, [r3, #32]
 80077ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f0:	1ad2      	subs	r2, r2, r3
 80077f2:	463b      	mov	r3, r7
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	621a      	str	r2, [r3, #32]
 80077f8:	e008      	b.n	800780c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80077fa:	463b      	mov	r3, r7
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007804:	463b      	mov	r3, r7
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2200      	movs	r2, #0
 800780a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800780c:	1d3b      	adds	r3, r7, #4
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	643b      	str	r3, [r7, #64]	; 0x40
 8007812:	463b      	mov	r3, r7
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	785b      	ldrb	r3, [r3, #1]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d164      	bne.n	80078e6 <USB_EPStartXfer+0x6d6>
 800781c:	1d3b      	adds	r3, r7, #4
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	63bb      	str	r3, [r7, #56]	; 0x38
 8007822:	1d3b      	adds	r3, r7, #4
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800782a:	b29b      	uxth	r3, r3
 800782c:	461a      	mov	r2, r3
 800782e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007830:	4413      	add	r3, r2
 8007832:	63bb      	str	r3, [r7, #56]	; 0x38
 8007834:	463b      	mov	r3, r7
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	011a      	lsls	r2, r3, #4
 800783c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783e:	4413      	add	r3, r2
 8007840:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007844:	637b      	str	r3, [r7, #52]	; 0x34
 8007846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800784a:	2b00      	cmp	r3, #0
 800784c:	d112      	bne.n	8007874 <USB_EPStartXfer+0x664>
 800784e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	b29b      	uxth	r3, r3
 8007854:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007858:	b29a      	uxth	r2, r3
 800785a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785c:	801a      	strh	r2, [r3, #0]
 800785e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	b29b      	uxth	r3, r3
 8007864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800786c:	b29a      	uxth	r2, r3
 800786e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007870:	801a      	strh	r2, [r3, #0]
 8007872:	e054      	b.n	800791e <USB_EPStartXfer+0x70e>
 8007874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007878:	2b3e      	cmp	r3, #62	; 0x3e
 800787a:	d817      	bhi.n	80078ac <USB_EPStartXfer+0x69c>
 800787c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007880:	085b      	lsrs	r3, r3, #1
 8007882:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b00      	cmp	r3, #0
 8007890:	d004      	beq.n	800789c <USB_EPStartXfer+0x68c>
 8007892:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007896:	3301      	adds	r3, #1
 8007898:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800789c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	029b      	lsls	r3, r3, #10
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a8:	801a      	strh	r2, [r3, #0]
 80078aa:	e038      	b.n	800791e <USB_EPStartXfer+0x70e>
 80078ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078b0:	095b      	lsrs	r3, r3, #5
 80078b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80078b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ba:	f003 031f 	and.w	r3, r3, #31
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d104      	bne.n	80078cc <USB_EPStartXfer+0x6bc>
 80078c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078c6:	3b01      	subs	r3, #1
 80078c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80078cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	029b      	lsls	r3, r3, #10
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078de:	b29a      	uxth	r2, r3
 80078e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e2:	801a      	strh	r2, [r3, #0]
 80078e4:	e01b      	b.n	800791e <USB_EPStartXfer+0x70e>
 80078e6:	463b      	mov	r3, r7
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	785b      	ldrb	r3, [r3, #1]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d116      	bne.n	800791e <USB_EPStartXfer+0x70e>
 80078f0:	1d3b      	adds	r3, r7, #4
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	461a      	mov	r2, r3
 80078fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078fe:	4413      	add	r3, r2
 8007900:	643b      	str	r3, [r7, #64]	; 0x40
 8007902:	463b      	mov	r3, r7
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	011a      	lsls	r2, r3, #4
 800790a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800790c:	4413      	add	r3, r2
 800790e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007918:	b29a      	uxth	r2, r3
 800791a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800791c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800791e:	463b      	mov	r3, r7
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	895b      	ldrh	r3, [r3, #10]
 8007924:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007928:	463b      	mov	r3, r7
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6959      	ldr	r1, [r3, #20]
 800792e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007932:	b29b      	uxth	r3, r3
 8007934:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007938:	1d38      	adds	r0, r7, #4
 800793a:	6800      	ldr	r0, [r0, #0]
 800793c:	f001 f89d 	bl	8008a7a <USB_WritePMA>
 8007940:	e36c      	b.n	800801c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007942:	463b      	mov	r3, r7
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800794c:	1d3b      	adds	r3, r7, #4
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	463b      	mov	r3, r7
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	b29b      	uxth	r3, r3
 800795e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007966:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800796a:	1d3b      	adds	r3, r7, #4
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	463b      	mov	r3, r7
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	441a      	add	r2, r3
 8007978:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800797c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800798c:	b29b      	uxth	r3, r3
 800798e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007990:	1d3b      	adds	r3, r7, #4
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007996:	1d3b      	adds	r3, r7, #4
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800799e:	b29b      	uxth	r3, r3
 80079a0:	461a      	mov	r2, r3
 80079a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079a4:	4413      	add	r3, r2
 80079a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079a8:	463b      	mov	r3, r7
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	011a      	lsls	r2, r3, #4
 80079b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079b2:	4413      	add	r3, r2
 80079b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80079ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079be:	b29a      	uxth	r2, r3
 80079c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80079c4:	463b      	mov	r3, r7
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	891b      	ldrh	r3, [r3, #8]
 80079ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079ce:	463b      	mov	r3, r7
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6959      	ldr	r1, [r3, #20]
 80079d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079d8:	b29b      	uxth	r3, r3
 80079da:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80079de:	1d38      	adds	r0, r7, #4
 80079e0:	6800      	ldr	r0, [r0, #0]
 80079e2:	f001 f84a 	bl	8008a7a <USB_WritePMA>
 80079e6:	e319      	b.n	800801c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80079e8:	1d3b      	adds	r3, r7, #4
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	463b      	mov	r3, r7
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4413      	add	r3, r2
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a02:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007a06:	1d3b      	adds	r3, r7, #4
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	463b      	mov	r3, r7
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	441a      	add	r2, r3
 8007a14:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a20:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007a2c:	463b      	mov	r3, r7
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6a1a      	ldr	r2, [r3, #32]
 8007a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a36:	1ad2      	subs	r2, r2, r3
 8007a38:	463b      	mov	r3, r7
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007a3e:	1d3b      	adds	r3, r7, #4
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	463b      	mov	r3, r7
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	881b      	ldrh	r3, [r3, #0]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 8162 	beq.w	8007d1e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a5a:	1d3b      	adds	r3, r7, #4
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a62:	463b      	mov	r3, r7
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	785b      	ldrb	r3, [r3, #1]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d164      	bne.n	8007b36 <USB_EPStartXfer+0x926>
 8007a6c:	1d3b      	adds	r3, r7, #4
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a72:	1d3b      	adds	r3, r7, #4
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a80:	4413      	add	r3, r2
 8007a82:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a84:	463b      	mov	r3, r7
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	011a      	lsls	r2, r3, #4
 8007a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a8e:	4413      	add	r3, r2
 8007a90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a94:	677b      	str	r3, [r7, #116]	; 0x74
 8007a96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d112      	bne.n	8007ac4 <USB_EPStartXfer+0x8b4>
 8007a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aac:	801a      	strh	r2, [r3, #0]
 8007aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ac0:	801a      	strh	r2, [r3, #0]
 8007ac2:	e057      	b.n	8007b74 <USB_EPStartXfer+0x964>
 8007ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac8:	2b3e      	cmp	r3, #62	; 0x3e
 8007aca:	d817      	bhi.n	8007afc <USB_EPStartXfer+0x8ec>
 8007acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ad0:	085b      	lsrs	r3, r3, #1
 8007ad2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d004      	beq.n	8007aec <USB_EPStartXfer+0x8dc>
 8007ae2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007aec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	029b      	lsls	r3, r3, #10
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007af8:	801a      	strh	r2, [r3, #0]
 8007afa:	e03b      	b.n	8007b74 <USB_EPStartXfer+0x964>
 8007afc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b00:	095b      	lsrs	r3, r3, #5
 8007b02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b0a:	f003 031f 	and.w	r3, r3, #31
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d104      	bne.n	8007b1c <USB_EPStartXfer+0x90c>
 8007b12:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b16:	3b01      	subs	r3, #1
 8007b18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	029b      	lsls	r3, r3, #10
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b32:	801a      	strh	r2, [r3, #0]
 8007b34:	e01e      	b.n	8007b74 <USB_EPStartXfer+0x964>
 8007b36:	463b      	mov	r3, r7
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	785b      	ldrb	r3, [r3, #1]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d119      	bne.n	8007b74 <USB_EPStartXfer+0x964>
 8007b40:	1d3b      	adds	r3, r7, #4
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b50:	4413      	add	r3, r2
 8007b52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b56:	463b      	mov	r3, r7
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	011a      	lsls	r2, r3, #4
 8007b5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b62:	4413      	add	r3, r2
 8007b64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b72:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007b74:	463b      	mov	r3, r7
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	895b      	ldrh	r3, [r3, #10]
 8007b7a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b7e:	463b      	mov	r3, r7
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6959      	ldr	r1, [r3, #20]
 8007b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b8e:	1d38      	adds	r0, r7, #4
 8007b90:	6800      	ldr	r0, [r0, #0]
 8007b92:	f000 ff72 	bl	8008a7a <USB_WritePMA>
          ep->xfer_buff += len;
 8007b96:	463b      	mov	r3, r7
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	695a      	ldr	r2, [r3, #20]
 8007b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba0:	441a      	add	r2, r3
 8007ba2:	463b      	mov	r3, r7
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007ba8:	463b      	mov	r3, r7
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6a1a      	ldr	r2, [r3, #32]
 8007bae:	463b      	mov	r3, r7
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d909      	bls.n	8007bcc <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8007bb8:	463b      	mov	r3, r7
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6a1a      	ldr	r2, [r3, #32]
 8007bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc2:	1ad2      	subs	r2, r2, r3
 8007bc4:	463b      	mov	r3, r7
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	621a      	str	r2, [r3, #32]
 8007bca:	e008      	b.n	8007bde <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8007bcc:	463b      	mov	r3, r7
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007bd6:	463b      	mov	r3, r7
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f000 821a 	beq.w	800801c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007be8:	463b      	mov	r3, r7
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	785b      	ldrb	r3, [r3, #1]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d164      	bne.n	8007cbc <USB_EPStartXfer+0xaac>
 8007bf2:	1d3b      	adds	r3, r7, #4
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bf8:	1d3b      	adds	r3, r7, #4
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	461a      	mov	r2, r3
 8007c04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c06:	4413      	add	r3, r2
 8007c08:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c0a:	463b      	mov	r3, r7
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	011a      	lsls	r2, r3, #4
 8007c12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c14:	4413      	add	r3, r2
 8007c16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c1a:	667b      	str	r3, [r7, #100]	; 0x64
 8007c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d112      	bne.n	8007c4a <USB_EPStartXfer+0xa3a>
 8007c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c32:	801a      	strh	r2, [r3, #0]
 8007c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c46:	801a      	strh	r2, [r3, #0]
 8007c48:	e057      	b.n	8007cfa <USB_EPStartXfer+0xaea>
 8007c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c4e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c50:	d817      	bhi.n	8007c82 <USB_EPStartXfer+0xa72>
 8007c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c56:	085b      	lsrs	r3, r3, #1
 8007c58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d004      	beq.n	8007c72 <USB_EPStartXfer+0xa62>
 8007c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	029b      	lsls	r3, r3, #10
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c7e:	801a      	strh	r2, [r3, #0]
 8007c80:	e03b      	b.n	8007cfa <USB_EPStartXfer+0xaea>
 8007c82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c86:	095b      	lsrs	r3, r3, #5
 8007c88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c90:	f003 031f 	and.w	r3, r3, #31
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d104      	bne.n	8007ca2 <USB_EPStartXfer+0xa92>
 8007c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	029b      	lsls	r3, r3, #10
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cb8:	801a      	strh	r2, [r3, #0]
 8007cba:	e01e      	b.n	8007cfa <USB_EPStartXfer+0xaea>
 8007cbc:	463b      	mov	r3, r7
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	785b      	ldrb	r3, [r3, #1]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d119      	bne.n	8007cfa <USB_EPStartXfer+0xaea>
 8007cc6:	1d3b      	adds	r3, r7, #4
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	673b      	str	r3, [r7, #112]	; 0x70
 8007ccc:	1d3b      	adds	r3, r7, #4
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cda:	4413      	add	r3, r2
 8007cdc:	673b      	str	r3, [r7, #112]	; 0x70
 8007cde:	463b      	mov	r3, r7
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	011a      	lsls	r2, r3, #4
 8007ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ce8:	4413      	add	r3, r2
 8007cea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007cfa:	463b      	mov	r3, r7
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	891b      	ldrh	r3, [r3, #8]
 8007d00:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d04:	463b      	mov	r3, r7
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6959      	ldr	r1, [r3, #20]
 8007d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d14:	1d38      	adds	r0, r7, #4
 8007d16:	6800      	ldr	r0, [r0, #0]
 8007d18:	f000 feaf 	bl	8008a7a <USB_WritePMA>
 8007d1c:	e17e      	b.n	800801c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d1e:	463b      	mov	r3, r7
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	785b      	ldrb	r3, [r3, #1]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d16f      	bne.n	8007e08 <USB_EPStartXfer+0xbf8>
 8007d28:	1d3b      	adds	r3, r7, #4
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d30:	1d3b      	adds	r3, r7, #4
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d40:	4413      	add	r3, r2
 8007d42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d46:	463b      	mov	r3, r7
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	011a      	lsls	r2, r3, #4
 8007d4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d52:	4413      	add	r3, r2
 8007d54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d116      	bne.n	8007d92 <USB_EPStartXfer+0xb82>
 8007d64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d76:	801a      	strh	r2, [r3, #0]
 8007d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d8e:	801a      	strh	r2, [r3, #0]
 8007d90:	e05f      	b.n	8007e52 <USB_EPStartXfer+0xc42>
 8007d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d96:	2b3e      	cmp	r3, #62	; 0x3e
 8007d98:	d818      	bhi.n	8007dcc <USB_EPStartXfer+0xbbc>
 8007d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d9e:	085b      	lsrs	r3, r3, #1
 8007da0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d004      	beq.n	8007dba <USB_EPStartXfer+0xbaa>
 8007db0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007db4:	3301      	adds	r3, #1
 8007db6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007dba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	029b      	lsls	r3, r3, #10
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dc8:	801a      	strh	r2, [r3, #0]
 8007dca:	e042      	b.n	8007e52 <USB_EPStartXfer+0xc42>
 8007dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd0:	095b      	lsrs	r3, r3, #5
 8007dd2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dda:	f003 031f 	and.w	r3, r3, #31
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d104      	bne.n	8007dec <USB_EPStartXfer+0xbdc>
 8007de2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007de6:	3b01      	subs	r3, #1
 8007de8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007dec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	029b      	lsls	r3, r3, #10
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e04:	801a      	strh	r2, [r3, #0]
 8007e06:	e024      	b.n	8007e52 <USB_EPStartXfer+0xc42>
 8007e08:	463b      	mov	r3, r7
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	785b      	ldrb	r3, [r3, #1]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d11f      	bne.n	8007e52 <USB_EPStartXfer+0xc42>
 8007e12:	1d3b      	adds	r3, r7, #4
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e1a:	1d3b      	adds	r3, r7, #4
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	461a      	mov	r2, r3
 8007e26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e30:	463b      	mov	r3, r7
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	011a      	lsls	r2, r3, #4
 8007e38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e50:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e52:	463b      	mov	r3, r7
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	891b      	ldrh	r3, [r3, #8]
 8007e58:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e5c:	463b      	mov	r3, r7
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6959      	ldr	r1, [r3, #20]
 8007e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e6c:	1d38      	adds	r0, r7, #4
 8007e6e:	6800      	ldr	r0, [r0, #0]
 8007e70:	f000 fe03 	bl	8008a7a <USB_WritePMA>
          ep->xfer_buff += len;
 8007e74:	463b      	mov	r3, r7
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	695a      	ldr	r2, [r3, #20]
 8007e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e7e:	441a      	add	r2, r3
 8007e80:	463b      	mov	r3, r7
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007e86:	463b      	mov	r3, r7
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6a1a      	ldr	r2, [r3, #32]
 8007e8c:	463b      	mov	r3, r7
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d909      	bls.n	8007eaa <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8007e96:	463b      	mov	r3, r7
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6a1a      	ldr	r2, [r3, #32]
 8007e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ea0:	1ad2      	subs	r2, r2, r3
 8007ea2:	463b      	mov	r3, r7
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	621a      	str	r2, [r3, #32]
 8007ea8:	e008      	b.n	8007ebc <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8007eaa:	463b      	mov	r3, r7
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	6a1b      	ldr	r3, [r3, #32]
 8007eb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007eb4:	463b      	mov	r3, r7
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 80ab 	beq.w	800801c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ec6:	1d3b      	adds	r3, r7, #4
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ece:	463b      	mov	r3, r7
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	785b      	ldrb	r3, [r3, #1]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d16f      	bne.n	8007fb8 <USB_EPStartXfer+0xda8>
 8007ed8:	1d3b      	adds	r3, r7, #4
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ee0:	1d3b      	adds	r3, r7, #4
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	461a      	mov	r2, r3
 8007eec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ef6:	463b      	mov	r3, r7
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	011a      	lsls	r2, r3, #4
 8007efe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f02:	4413      	add	r3, r2
 8007f04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d116      	bne.n	8007f42 <USB_EPStartXfer+0xd32>
 8007f14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f26:	801a      	strh	r2, [r3, #0]
 8007f28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f2c:	881b      	ldrh	r3, [r3, #0]
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f3e:	801a      	strh	r2, [r3, #0]
 8007f40:	e05b      	b.n	8007ffa <USB_EPStartXfer+0xdea>
 8007f42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f46:	2b3e      	cmp	r3, #62	; 0x3e
 8007f48:	d818      	bhi.n	8007f7c <USB_EPStartXfer+0xd6c>
 8007f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f4e:	085b      	lsrs	r3, r3, #1
 8007f50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d004      	beq.n	8007f6a <USB_EPStartXfer+0xd5a>
 8007f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f64:	3301      	adds	r3, #1
 8007f66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	029b      	lsls	r3, r3, #10
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f78:	801a      	strh	r2, [r3, #0]
 8007f7a:	e03e      	b.n	8007ffa <USB_EPStartXfer+0xdea>
 8007f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f80:	095b      	lsrs	r3, r3, #5
 8007f82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f8a:	f003 031f 	and.w	r3, r3, #31
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d104      	bne.n	8007f9c <USB_EPStartXfer+0xd8c>
 8007f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f96:	3b01      	subs	r3, #1
 8007f98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	029b      	lsls	r3, r3, #10
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fb4:	801a      	strh	r2, [r3, #0]
 8007fb6:	e020      	b.n	8007ffa <USB_EPStartXfer+0xdea>
 8007fb8:	463b      	mov	r3, r7
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	785b      	ldrb	r3, [r3, #1]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d11b      	bne.n	8007ffa <USB_EPStartXfer+0xdea>
 8007fc2:	1d3b      	adds	r3, r7, #4
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	461a      	mov	r2, r3
 8007fce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fd8:	463b      	mov	r3, r7
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	011a      	lsls	r2, r3, #4
 8007fe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ff8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007ffa:	463b      	mov	r3, r7
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	895b      	ldrh	r3, [r3, #10]
 8008000:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008004:	463b      	mov	r3, r7
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6959      	ldr	r1, [r3, #20]
 800800a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800800e:	b29b      	uxth	r3, r3
 8008010:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008014:	1d38      	adds	r0, r7, #4
 8008016:	6800      	ldr	r0, [r0, #0]
 8008018:	f000 fd2f 	bl	8008a7a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800801c:	1d3b      	adds	r3, r7, #4
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	463b      	mov	r3, r7
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	b29b      	uxth	r3, r3
 800802e:	f107 020a 	add.w	r2, r7, #10
 8008032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800803a:	8013      	strh	r3, [r2, #0]
 800803c:	f107 030a 	add.w	r3, r7, #10
 8008040:	f107 020a 	add.w	r2, r7, #10
 8008044:	8812      	ldrh	r2, [r2, #0]
 8008046:	f082 0210 	eor.w	r2, r2, #16
 800804a:	801a      	strh	r2, [r3, #0]
 800804c:	f107 030a 	add.w	r3, r7, #10
 8008050:	f107 020a 	add.w	r2, r7, #10
 8008054:	8812      	ldrh	r2, [r2, #0]
 8008056:	f082 0220 	eor.w	r2, r2, #32
 800805a:	801a      	strh	r2, [r3, #0]
 800805c:	1d3b      	adds	r3, r7, #4
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	463b      	mov	r3, r7
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	441a      	add	r2, r3
 800806a:	f107 030a 	add.w	r3, r7, #10
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800807c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008080:	b29b      	uxth	r3, r3
 8008082:	8013      	strh	r3, [r2, #0]
 8008084:	e3b5      	b.n	80087f2 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008086:	463b      	mov	r3, r7
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	7b1b      	ldrb	r3, [r3, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	f040 8090 	bne.w	80081b2 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008092:	463b      	mov	r3, r7
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	699a      	ldr	r2, [r3, #24]
 8008098:	463b      	mov	r3, r7
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d90e      	bls.n	80080c0 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80080a2:	463b      	mov	r3, r7
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80080ac:	463b      	mov	r3, r7
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	699a      	ldr	r2, [r3, #24]
 80080b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080b6:	1ad2      	subs	r2, r2, r3
 80080b8:	463b      	mov	r3, r7
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	619a      	str	r2, [r3, #24]
 80080be:	e008      	b.n	80080d2 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80080c0:	463b      	mov	r3, r7
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80080ca:	463b      	mov	r3, r7
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2200      	movs	r2, #0
 80080d0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80080d2:	1d3b      	adds	r3, r7, #4
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080da:	1d3b      	adds	r3, r7, #4
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	461a      	mov	r2, r3
 80080e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80080ea:	4413      	add	r3, r2
 80080ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080f0:	463b      	mov	r3, r7
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	011a      	lsls	r2, r3, #4
 80080f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80080fc:	4413      	add	r3, r2
 80080fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008102:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800810a:	2b00      	cmp	r3, #0
 800810c:	d116      	bne.n	800813c <USB_EPStartXfer+0xf2c>
 800810e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	b29b      	uxth	r3, r3
 8008116:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800811a:	b29a      	uxth	r2, r3
 800811c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008120:	801a      	strh	r2, [r3, #0]
 8008122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008126:	881b      	ldrh	r3, [r3, #0]
 8008128:	b29b      	uxth	r3, r3
 800812a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800812e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008132:	b29a      	uxth	r2, r3
 8008134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008138:	801a      	strh	r2, [r3, #0]
 800813a:	e32c      	b.n	8008796 <USB_EPStartXfer+0x1586>
 800813c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008140:	2b3e      	cmp	r3, #62	; 0x3e
 8008142:	d818      	bhi.n	8008176 <USB_EPStartXfer+0xf66>
 8008144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008148:	085b      	lsrs	r3, r3, #1
 800814a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800814e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008152:	f003 0301 	and.w	r3, r3, #1
 8008156:	2b00      	cmp	r3, #0
 8008158:	d004      	beq.n	8008164 <USB_EPStartXfer+0xf54>
 800815a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800815e:	3301      	adds	r3, #1
 8008160:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008164:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008168:	b29b      	uxth	r3, r3
 800816a:	029b      	lsls	r3, r3, #10
 800816c:	b29a      	uxth	r2, r3
 800816e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008172:	801a      	strh	r2, [r3, #0]
 8008174:	e30f      	b.n	8008796 <USB_EPStartXfer+0x1586>
 8008176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800817a:	095b      	lsrs	r3, r3, #5
 800817c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008184:	f003 031f 	and.w	r3, r3, #31
 8008188:	2b00      	cmp	r3, #0
 800818a:	d104      	bne.n	8008196 <USB_EPStartXfer+0xf86>
 800818c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008190:	3b01      	subs	r3, #1
 8008192:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008196:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800819a:	b29b      	uxth	r3, r3
 800819c:	029b      	lsls	r3, r3, #10
 800819e:	b29b      	uxth	r3, r3
 80081a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081ae:	801a      	strh	r2, [r3, #0]
 80081b0:	e2f1      	b.n	8008796 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80081b2:	463b      	mov	r3, r7
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	78db      	ldrb	r3, [r3, #3]
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	f040 818f 	bne.w	80084dc <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80081be:	463b      	mov	r3, r7
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	785b      	ldrb	r3, [r3, #1]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d175      	bne.n	80082b4 <USB_EPStartXfer+0x10a4>
 80081c8:	1d3b      	adds	r3, r7, #4
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081d0:	1d3b      	adds	r3, r7, #4
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081d8:	b29b      	uxth	r3, r3
 80081da:	461a      	mov	r2, r3
 80081dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081e0:	4413      	add	r3, r2
 80081e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081e6:	463b      	mov	r3, r7
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	011a      	lsls	r2, r3, #4
 80081ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081f2:	4413      	add	r3, r2
 80081f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081fc:	463b      	mov	r3, r7
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d116      	bne.n	8008234 <USB_EPStartXfer+0x1024>
 8008206:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	b29b      	uxth	r3, r3
 800820e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008212:	b29a      	uxth	r2, r3
 8008214:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008218:	801a      	strh	r2, [r3, #0]
 800821a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800821e:	881b      	ldrh	r3, [r3, #0]
 8008220:	b29b      	uxth	r3, r3
 8008222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800822a:	b29a      	uxth	r2, r3
 800822c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008230:	801a      	strh	r2, [r3, #0]
 8008232:	e065      	b.n	8008300 <USB_EPStartXfer+0x10f0>
 8008234:	463b      	mov	r3, r7
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	2b3e      	cmp	r3, #62	; 0x3e
 800823c:	d81a      	bhi.n	8008274 <USB_EPStartXfer+0x1064>
 800823e:	463b      	mov	r3, r7
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	085b      	lsrs	r3, r3, #1
 8008246:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800824a:	463b      	mov	r3, r7
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	d004      	beq.n	8008262 <USB_EPStartXfer+0x1052>
 8008258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800825c:	3301      	adds	r3, #1
 800825e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008266:	b29b      	uxth	r3, r3
 8008268:	029b      	lsls	r3, r3, #10
 800826a:	b29a      	uxth	r2, r3
 800826c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008270:	801a      	strh	r2, [r3, #0]
 8008272:	e045      	b.n	8008300 <USB_EPStartXfer+0x10f0>
 8008274:	463b      	mov	r3, r7
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	095b      	lsrs	r3, r3, #5
 800827c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008280:	463b      	mov	r3, r7
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	f003 031f 	and.w	r3, r3, #31
 800828a:	2b00      	cmp	r3, #0
 800828c:	d104      	bne.n	8008298 <USB_EPStartXfer+0x1088>
 800828e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008292:	3b01      	subs	r3, #1
 8008294:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800829c:	b29b      	uxth	r3, r3
 800829e:	029b      	lsls	r3, r3, #10
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082b0:	801a      	strh	r2, [r3, #0]
 80082b2:	e025      	b.n	8008300 <USB_EPStartXfer+0x10f0>
 80082b4:	463b      	mov	r3, r7
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	785b      	ldrb	r3, [r3, #1]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d120      	bne.n	8008300 <USB_EPStartXfer+0x10f0>
 80082be:	1d3b      	adds	r3, r7, #4
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80082c6:	1d3b      	adds	r3, r7, #4
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	461a      	mov	r2, r3
 80082d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082d6:	4413      	add	r3, r2
 80082d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80082dc:	463b      	mov	r3, r7
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	011a      	lsls	r2, r3, #4
 80082e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082e8:	4413      	add	r3, r2
 80082ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082f2:	463b      	mov	r3, r7
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80082fe:	801a      	strh	r2, [r3, #0]
 8008300:	1d3b      	adds	r3, r7, #4
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008308:	463b      	mov	r3, r7
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	785b      	ldrb	r3, [r3, #1]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d175      	bne.n	80083fe <USB_EPStartXfer+0x11ee>
 8008312:	1d3b      	adds	r3, r7, #4
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800831a:	1d3b      	adds	r3, r7, #4
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008322:	b29b      	uxth	r3, r3
 8008324:	461a      	mov	r2, r3
 8008326:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800832a:	4413      	add	r3, r2
 800832c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008330:	463b      	mov	r3, r7
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	011a      	lsls	r2, r3, #4
 8008338:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800833c:	4413      	add	r3, r2
 800833e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008342:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008346:	463b      	mov	r3, r7
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d116      	bne.n	800837e <USB_EPStartXfer+0x116e>
 8008350:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	b29b      	uxth	r3, r3
 8008358:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800835c:	b29a      	uxth	r2, r3
 800835e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008362:	801a      	strh	r2, [r3, #0]
 8008364:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008368:	881b      	ldrh	r3, [r3, #0]
 800836a:	b29b      	uxth	r3, r3
 800836c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008374:	b29a      	uxth	r2, r3
 8008376:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800837a:	801a      	strh	r2, [r3, #0]
 800837c:	e061      	b.n	8008442 <USB_EPStartXfer+0x1232>
 800837e:	463b      	mov	r3, r7
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	2b3e      	cmp	r3, #62	; 0x3e
 8008386:	d81a      	bhi.n	80083be <USB_EPStartXfer+0x11ae>
 8008388:	463b      	mov	r3, r7
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	085b      	lsrs	r3, r3, #1
 8008390:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008394:	463b      	mov	r3, r7
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d004      	beq.n	80083ac <USB_EPStartXfer+0x119c>
 80083a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80083a6:	3301      	adds	r3, #1
 80083a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	029b      	lsls	r3, r3, #10
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083ba:	801a      	strh	r2, [r3, #0]
 80083bc:	e041      	b.n	8008442 <USB_EPStartXfer+0x1232>
 80083be:	463b      	mov	r3, r7
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	095b      	lsrs	r3, r3, #5
 80083c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083ca:	463b      	mov	r3, r7
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	f003 031f 	and.w	r3, r3, #31
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d104      	bne.n	80083e2 <USB_EPStartXfer+0x11d2>
 80083d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80083dc:	3b01      	subs	r3, #1
 80083de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	029b      	lsls	r3, r3, #10
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083fa:	801a      	strh	r2, [r3, #0]
 80083fc:	e021      	b.n	8008442 <USB_EPStartXfer+0x1232>
 80083fe:	463b      	mov	r3, r7
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	785b      	ldrb	r3, [r3, #1]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d11c      	bne.n	8008442 <USB_EPStartXfer+0x1232>
 8008408:	1d3b      	adds	r3, r7, #4
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008410:	b29b      	uxth	r3, r3
 8008412:	461a      	mov	r2, r3
 8008414:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008418:	4413      	add	r3, r2
 800841a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800841e:	463b      	mov	r3, r7
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	011a      	lsls	r2, r3, #4
 8008426:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800842a:	4413      	add	r3, r2
 800842c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008430:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008434:	463b      	mov	r3, r7
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	b29a      	uxth	r2, r3
 800843c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008440:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008442:	463b      	mov	r3, r7
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69db      	ldr	r3, [r3, #28]
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 81a4 	beq.w	8008796 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800844e:	1d3b      	adds	r3, r7, #4
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	463b      	mov	r3, r7
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008462:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d005      	beq.n	800847a <USB_EPStartXfer+0x126a>
 800846e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10d      	bne.n	8008496 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800847a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800847e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008482:	2b00      	cmp	r3, #0
 8008484:	f040 8187 	bne.w	8008796 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008488:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800848c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008490:	2b00      	cmp	r3, #0
 8008492:	f040 8180 	bne.w	8008796 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008496:	1d3b      	adds	r3, r7, #4
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	463b      	mov	r3, r7
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4413      	add	r3, r2
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80084b4:	1d3b      	adds	r3, r7, #4
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	463b      	mov	r3, r7
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	441a      	add	r2, r3
 80084c2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80084c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	8013      	strh	r3, [r2, #0]
 80084da:	e15c      	b.n	8008796 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80084dc:	463b      	mov	r3, r7
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	78db      	ldrb	r3, [r3, #3]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	f040 8155 	bne.w	8008792 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80084e8:	463b      	mov	r3, r7
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	699a      	ldr	r2, [r3, #24]
 80084ee:	463b      	mov	r3, r7
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d90e      	bls.n	8008516 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80084f8:	463b      	mov	r3, r7
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008502:	463b      	mov	r3, r7
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	699a      	ldr	r2, [r3, #24]
 8008508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800850c:	1ad2      	subs	r2, r2, r3
 800850e:	463b      	mov	r3, r7
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	619a      	str	r2, [r3, #24]
 8008514:	e008      	b.n	8008528 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8008516:	463b      	mov	r3, r7
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008520:	463b      	mov	r3, r7
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2200      	movs	r2, #0
 8008526:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008528:	463b      	mov	r3, r7
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	785b      	ldrb	r3, [r3, #1]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d16f      	bne.n	8008612 <USB_EPStartXfer+0x1402>
 8008532:	1d3b      	adds	r3, r7, #4
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800853a:	1d3b      	adds	r3, r7, #4
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008542:	b29b      	uxth	r3, r3
 8008544:	461a      	mov	r2, r3
 8008546:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800854a:	4413      	add	r3, r2
 800854c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008550:	463b      	mov	r3, r7
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	011a      	lsls	r2, r3, #4
 8008558:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800855c:	4413      	add	r3, r2
 800855e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008562:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800856a:	2b00      	cmp	r3, #0
 800856c:	d116      	bne.n	800859c <USB_EPStartXfer+0x138c>
 800856e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008572:	881b      	ldrh	r3, [r3, #0]
 8008574:	b29b      	uxth	r3, r3
 8008576:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800857a:	b29a      	uxth	r2, r3
 800857c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008580:	801a      	strh	r2, [r3, #0]
 8008582:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	b29b      	uxth	r3, r3
 800858a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800858e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008592:	b29a      	uxth	r2, r3
 8008594:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008598:	801a      	strh	r2, [r3, #0]
 800859a:	e05f      	b.n	800865c <USB_EPStartXfer+0x144c>
 800859c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085a0:	2b3e      	cmp	r3, #62	; 0x3e
 80085a2:	d818      	bhi.n	80085d6 <USB_EPStartXfer+0x13c6>
 80085a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085a8:	085b      	lsrs	r3, r3, #1
 80085aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d004      	beq.n	80085c4 <USB_EPStartXfer+0x13b4>
 80085ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085be:	3301      	adds	r3, #1
 80085c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	029b      	lsls	r3, r3, #10
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085d2:	801a      	strh	r2, [r3, #0]
 80085d4:	e042      	b.n	800865c <USB_EPStartXfer+0x144c>
 80085d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085da:	095b      	lsrs	r3, r3, #5
 80085dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085e4:	f003 031f 	and.w	r3, r3, #31
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d104      	bne.n	80085f6 <USB_EPStartXfer+0x13e6>
 80085ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085f0:	3b01      	subs	r3, #1
 80085f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	029b      	lsls	r3, r3, #10
 80085fe:	b29b      	uxth	r3, r3
 8008600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008608:	b29a      	uxth	r2, r3
 800860a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800860e:	801a      	strh	r2, [r3, #0]
 8008610:	e024      	b.n	800865c <USB_EPStartXfer+0x144c>
 8008612:	463b      	mov	r3, r7
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	785b      	ldrb	r3, [r3, #1]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d11f      	bne.n	800865c <USB_EPStartXfer+0x144c>
 800861c:	1d3b      	adds	r3, r7, #4
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008624:	1d3b      	adds	r3, r7, #4
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800862c:	b29b      	uxth	r3, r3
 800862e:	461a      	mov	r2, r3
 8008630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008634:	4413      	add	r3, r2
 8008636:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800863a:	463b      	mov	r3, r7
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	011a      	lsls	r2, r3, #4
 8008642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008646:	4413      	add	r3, r2
 8008648:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800864c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008650:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008654:	b29a      	uxth	r2, r3
 8008656:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800865a:	801a      	strh	r2, [r3, #0]
 800865c:	1d3b      	adds	r3, r7, #4
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008664:	463b      	mov	r3, r7
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	785b      	ldrb	r3, [r3, #1]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d16f      	bne.n	800874e <USB_EPStartXfer+0x153e>
 800866e:	1d3b      	adds	r3, r7, #4
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008676:	1d3b      	adds	r3, r7, #4
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800867e:	b29b      	uxth	r3, r3
 8008680:	461a      	mov	r2, r3
 8008682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008686:	4413      	add	r3, r2
 8008688:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800868c:	463b      	mov	r3, r7
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	011a      	lsls	r2, r3, #4
 8008694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008698:	4413      	add	r3, r2
 800869a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800869e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80086a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d116      	bne.n	80086d8 <USB_EPStartXfer+0x14c8>
 80086aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086bc:	801a      	strh	r2, [r3, #0]
 80086be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086c2:	881b      	ldrh	r3, [r3, #0]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086d4:	801a      	strh	r2, [r3, #0]
 80086d6:	e05e      	b.n	8008796 <USB_EPStartXfer+0x1586>
 80086d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086dc:	2b3e      	cmp	r3, #62	; 0x3e
 80086de:	d818      	bhi.n	8008712 <USB_EPStartXfer+0x1502>
 80086e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086e4:	085b      	lsrs	r3, r3, #1
 80086e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d004      	beq.n	8008700 <USB_EPStartXfer+0x14f0>
 80086f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086fa:	3301      	adds	r3, #1
 80086fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008700:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008704:	b29b      	uxth	r3, r3
 8008706:	029b      	lsls	r3, r3, #10
 8008708:	b29a      	uxth	r2, r3
 800870a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800870e:	801a      	strh	r2, [r3, #0]
 8008710:	e041      	b.n	8008796 <USB_EPStartXfer+0x1586>
 8008712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008716:	095b      	lsrs	r3, r3, #5
 8008718:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800871c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008720:	f003 031f 	and.w	r3, r3, #31
 8008724:	2b00      	cmp	r3, #0
 8008726:	d104      	bne.n	8008732 <USB_EPStartXfer+0x1522>
 8008728:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800872c:	3b01      	subs	r3, #1
 800872e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008732:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008736:	b29b      	uxth	r3, r3
 8008738:	029b      	lsls	r3, r3, #10
 800873a:	b29b      	uxth	r3, r3
 800873c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008740:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008744:	b29a      	uxth	r2, r3
 8008746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800874a:	801a      	strh	r2, [r3, #0]
 800874c:	e023      	b.n	8008796 <USB_EPStartXfer+0x1586>
 800874e:	463b      	mov	r3, r7
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	785b      	ldrb	r3, [r3, #1]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d11e      	bne.n	8008796 <USB_EPStartXfer+0x1586>
 8008758:	1d3b      	adds	r3, r7, #4
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008760:	b29b      	uxth	r3, r3
 8008762:	461a      	mov	r2, r3
 8008764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008768:	4413      	add	r3, r2
 800876a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800876e:	463b      	mov	r3, r7
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	011a      	lsls	r2, r3, #4
 8008776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800877a:	4413      	add	r3, r2
 800877c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008780:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008788:	b29a      	uxth	r2, r3
 800878a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800878e:	801a      	strh	r2, [r3, #0]
 8008790:	e001      	b.n	8008796 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e02e      	b.n	80087f4 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008796:	1d3b      	adds	r3, r7, #4
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	463b      	mov	r3, r7
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	881b      	ldrh	r3, [r3, #0]
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087b0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80087b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80087b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80087bc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80087c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80087c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80087c8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80087cc:	1d3b      	adds	r3, r7, #4
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	463b      	mov	r3, r7
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	441a      	add	r2, r3
 80087da:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80087de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087fe:	b480      	push	{r7}
 8008800:	b085      	sub	sp, #20
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	785b      	ldrb	r3, [r3, #1]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d020      	beq.n	8008852 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	881b      	ldrh	r3, [r3, #0]
 800881c:	b29b      	uxth	r3, r3
 800881e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008826:	81bb      	strh	r3, [r7, #12]
 8008828:	89bb      	ldrh	r3, [r7, #12]
 800882a:	f083 0310 	eor.w	r3, r3, #16
 800882e:	81bb      	strh	r3, [r7, #12]
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	441a      	add	r2, r3
 800883a:	89bb      	ldrh	r3, [r7, #12]
 800883c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800884c:	b29b      	uxth	r3, r3
 800884e:	8013      	strh	r3, [r2, #0]
 8008850:	e01f      	b.n	8008892 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4413      	add	r3, r2
 800885c:	881b      	ldrh	r3, [r3, #0]
 800885e:	b29b      	uxth	r3, r3
 8008860:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008868:	81fb      	strh	r3, [r7, #14]
 800886a:	89fb      	ldrh	r3, [r7, #14]
 800886c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008870:	81fb      	strh	r3, [r7, #14]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	441a      	add	r2, r3
 800887c:	89fb      	ldrh	r3, [r7, #14]
 800887e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800888a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800888e:	b29b      	uxth	r3, r3
 8008890:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	bc80      	pop	{r7}
 800889c:	4770      	bx	lr

0800889e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800889e:	b480      	push	{r7}
 80088a0:	b087      	sub	sp, #28
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	7b1b      	ldrb	r3, [r3, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f040 809d 	bne.w	80089ec <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	785b      	ldrb	r3, [r3, #1]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d04c      	beq.n	8008954 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	881b      	ldrh	r3, [r3, #0]
 80088c6:	823b      	strh	r3, [r7, #16]
 80088c8:	8a3b      	ldrh	r3, [r7, #16]
 80088ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d01b      	beq.n	800890a <USB_EPClearStall+0x6c>
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e8:	81fb      	strh	r3, [r7, #14]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	441a      	add	r2, r3
 80088f4:	89fb      	ldrh	r3, [r7, #14]
 80088f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008902:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008906:	b29b      	uxth	r3, r3
 8008908:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	78db      	ldrb	r3, [r3, #3]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d06c      	beq.n	80089ec <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	b29b      	uxth	r3, r3
 8008920:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008928:	81bb      	strh	r3, [r7, #12]
 800892a:	89bb      	ldrh	r3, [r7, #12]
 800892c:	f083 0320 	eor.w	r3, r3, #32
 8008930:	81bb      	strh	r3, [r7, #12]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	441a      	add	r2, r3
 800893c:	89bb      	ldrh	r3, [r7, #12]
 800893e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800894a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800894e:	b29b      	uxth	r3, r3
 8008950:	8013      	strh	r3, [r2, #0]
 8008952:	e04b      	b.n	80089ec <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	881b      	ldrh	r3, [r3, #0]
 8008960:	82fb      	strh	r3, [r7, #22]
 8008962:	8afb      	ldrh	r3, [r7, #22]
 8008964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008968:	2b00      	cmp	r3, #0
 800896a:	d01b      	beq.n	80089a4 <USB_EPClearStall+0x106>
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4413      	add	r3, r2
 8008976:	881b      	ldrh	r3, [r3, #0]
 8008978:	b29b      	uxth	r3, r3
 800897a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800897e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008982:	82bb      	strh	r3, [r7, #20]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	441a      	add	r2, r3
 800898e:	8abb      	ldrh	r3, [r7, #20]
 8008990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008998:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800899c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	881b      	ldrh	r3, [r3, #0]
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ba:	827b      	strh	r3, [r7, #18]
 80089bc:	8a7b      	ldrh	r3, [r7, #18]
 80089be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80089c2:	827b      	strh	r3, [r7, #18]
 80089c4:	8a7b      	ldrh	r3, [r7, #18]
 80089c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80089ca:	827b      	strh	r3, [r7, #18]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	441a      	add	r2, r3
 80089d6:	8a7b      	ldrh	r3, [r7, #18]
 80089d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	371c      	adds	r7, #28
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bc80      	pop	{r7}
 80089f6:	4770      	bx	lr

080089f8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008a04:	78fb      	ldrb	r3, [r7, #3]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d103      	bne.n	8008a12 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2280      	movs	r2, #128	; 0x80
 8008a0e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bc80      	pop	{r7}
 8008a1c:	4770      	bx	lr

08008a1e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b083      	sub	sp, #12
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bc80      	pop	{r7}
 8008a30:	4770      	bx	lr

08008a32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b083      	sub	sp, #12
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bc80      	pop	{r7}
 8008a44:	4770      	bx	lr

08008a46 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b085      	sub	sp, #20
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008a58:	68fb      	ldr	r3, [r7, #12]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bc80      	pop	{r7}
 8008a62:	4770      	bx	lr

08008a64 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bc80      	pop	{r7}
 8008a78:	4770      	bx	lr

08008a7a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b08d      	sub	sp, #52	; 0x34
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	60f8      	str	r0, [r7, #12]
 8008a82:	60b9      	str	r1, [r7, #8]
 8008a84:	4611      	mov	r1, r2
 8008a86:	461a      	mov	r2, r3
 8008a88:	460b      	mov	r3, r1
 8008a8a:	80fb      	strh	r3, [r7, #6]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008a90:	88bb      	ldrh	r3, [r7, #4]
 8008a92:	3301      	adds	r3, #1
 8008a94:	085b      	lsrs	r3, r3, #1
 8008a96:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008aa0:	88fb      	ldrh	r3, [r7, #6]
 8008aa2:	005a      	lsls	r2, r3, #1
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008aac:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008aae:	6a3b      	ldr	r3, [r7, #32]
 8008ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ab2:	e01e      	b.n	8008af2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	3301      	adds	r3, #1
 8008abe:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	021b      	lsls	r3, r3, #8
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	461a      	mov	r2, r3
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008adc:	3302      	adds	r3, #2
 8008ade:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae2:	3302      	adds	r3, #2
 8008ae4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	3301      	adds	r3, #1
 8008aea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aee:	3b01      	subs	r3, #1
 8008af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1dd      	bne.n	8008ab4 <USB_WritePMA+0x3a>
  }
}
 8008af8:	bf00      	nop
 8008afa:	bf00      	nop
 8008afc:	3734      	adds	r7, #52	; 0x34
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bc80      	pop	{r7}
 8008b02:	4770      	bx	lr

08008b04 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b08b      	sub	sp, #44	; 0x2c
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	4611      	mov	r1, r2
 8008b10:	461a      	mov	r2, r3
 8008b12:	460b      	mov	r3, r1
 8008b14:	80fb      	strh	r3, [r7, #6]
 8008b16:	4613      	mov	r3, r2
 8008b18:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008b1a:	88bb      	ldrh	r3, [r7, #4]
 8008b1c:	085b      	lsrs	r3, r3, #1
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b2a:	88fb      	ldrh	r3, [r7, #6]
 8008b2c:	005a      	lsls	r2, r3, #1
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	4413      	add	r3, r2
 8008b32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b36:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b3c:	e01b      	b.n	8008b76 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008b3e:	6a3b      	ldr	r3, [r7, #32]
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	3302      	adds	r3, #2
 8008b4a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	b2da      	uxtb	r2, r3
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	3301      	adds	r3, #1
 8008b58:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	0a1b      	lsrs	r3, r3, #8
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	3301      	adds	r3, #1
 8008b68:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
 8008b6c:	3302      	adds	r3, #2
 8008b6e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b72:	3b01      	subs	r3, #1
 8008b74:	627b      	str	r3, [r7, #36]	; 0x24
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1e0      	bne.n	8008b3e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008b7c:	88bb      	ldrh	r3, [r7, #4]
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d007      	beq.n	8008b98 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	881b      	ldrh	r3, [r3, #0]
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	b2da      	uxtb	r2, r3
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	701a      	strb	r2, [r3, #0]
  }
}
 8008b98:	bf00      	nop
 8008b9a:	372c      	adds	r7, #44	; 0x2c
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bc80      	pop	{r7}
 8008ba0:	4770      	bx	lr

08008ba2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	460b      	mov	r3, r1
 8008bac:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	7c1b      	ldrb	r3, [r3, #16]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d115      	bne.n	8008be6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	2181      	movs	r1, #129	; 0x81
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f004 fdd9 	bl	800d77a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008bce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f004 fdcf 	bl	800d77a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008be4:	e012      	b.n	8008c0c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008be6:	2340      	movs	r3, #64	; 0x40
 8008be8:	2202      	movs	r2, #2
 8008bea:	2181      	movs	r1, #129	; 0x81
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f004 fdc4 	bl	800d77a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008bf8:	2340      	movs	r3, #64	; 0x40
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	2101      	movs	r1, #1
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f004 fdbb 	bl	800d77a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c0c:	2308      	movs	r3, #8
 8008c0e:	2203      	movs	r2, #3
 8008c10:	2182      	movs	r1, #130	; 0x82
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f004 fdb1 	bl	800d77a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c1e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008c22:	f004 fed1 	bl	800d9c8 <USBD_static_malloc>
 8008c26:	4602      	mov	r2, r0
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d102      	bne.n	8008c3e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	73fb      	strb	r3, [r7, #15]
 8008c3c:	e026      	b.n	8008c8c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c44:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	7c1b      	ldrb	r3, [r3, #16]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d109      	bne.n	8008c7c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c72:	2101      	movs	r1, #1
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f004 fe71 	bl	800d95c <USBD_LL_PrepareReceive>
 8008c7a:	e007      	b.n	8008c8c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c82:	2340      	movs	r3, #64	; 0x40
 8008c84:	2101      	movs	r1, #1
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f004 fe68 	bl	800d95c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b084      	sub	sp, #16
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008ca6:	2181      	movs	r1, #129	; 0x81
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f004 fd8c 	bl	800d7c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f004 fd85 	bl	800d7c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008cc4:	2182      	movs	r1, #130	; 0x82
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f004 fd7d 	bl	800d7c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00e      	beq.n	8008cfa <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cec:	4618      	mov	r0, r3
 8008cee:	f004 fe77 	bl	800d9e0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d14:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d039      	beq.n	8008da2 <USBD_CDC_Setup+0x9e>
 8008d2e:	2b20      	cmp	r3, #32
 8008d30:	d17f      	bne.n	8008e32 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	88db      	ldrh	r3, [r3, #6]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d029      	beq.n	8008d8e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	b25b      	sxtb	r3, r3
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	da11      	bge.n	8008d68 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	683a      	ldr	r2, [r7, #0]
 8008d4e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008d50:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	88d2      	ldrh	r2, [r2, #6]
 8008d56:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008d58:	6939      	ldr	r1, [r7, #16]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	88db      	ldrh	r3, [r3, #6]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f001 fa0a 	bl	800a17a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008d66:	e06b      	b.n	8008e40 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	785a      	ldrb	r2, [r3, #1]
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	88db      	ldrh	r3, [r3, #6]
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008d7e:	6939      	ldr	r1, [r7, #16]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	88db      	ldrh	r3, [r3, #6]
 8008d84:	461a      	mov	r2, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f001 fa25 	bl	800a1d6 <USBD_CtlPrepareRx>
      break;
 8008d8c:	e058      	b.n	8008e40 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	7850      	ldrb	r0, [r2, #1]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	4798      	blx	r3
      break;
 8008da0:	e04e      	b.n	8008e40 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	785b      	ldrb	r3, [r3, #1]
 8008da6:	2b0b      	cmp	r3, #11
 8008da8:	d02e      	beq.n	8008e08 <USBD_CDC_Setup+0x104>
 8008daa:	2b0b      	cmp	r3, #11
 8008dac:	dc38      	bgt.n	8008e20 <USBD_CDC_Setup+0x11c>
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <USBD_CDC_Setup+0xb4>
 8008db2:	2b0a      	cmp	r3, #10
 8008db4:	d014      	beq.n	8008de0 <USBD_CDC_Setup+0xdc>
 8008db6:	e033      	b.n	8008e20 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dbe:	2b03      	cmp	r3, #3
 8008dc0:	d107      	bne.n	8008dd2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008dc2:	f107 030c 	add.w	r3, r7, #12
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	4619      	mov	r1, r3
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f001 f9d5 	bl	800a17a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008dd0:	e02e      	b.n	8008e30 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f001 f966 	bl	800a0a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008dda:	2302      	movs	r3, #2
 8008ddc:	75fb      	strb	r3, [r7, #23]
          break;
 8008dde:	e027      	b.n	8008e30 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	d107      	bne.n	8008dfa <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008dea:	f107 030f 	add.w	r3, r7, #15
 8008dee:	2201      	movs	r2, #1
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f001 f9c1 	bl	800a17a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008df8:	e01a      	b.n	8008e30 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f001 f952 	bl	800a0a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e02:	2302      	movs	r3, #2
 8008e04:	75fb      	strb	r3, [r7, #23]
          break;
 8008e06:	e013      	b.n	8008e30 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	d00d      	beq.n	8008e2e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f001 f946 	bl	800a0a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008e1e:	e006      	b.n	8008e2e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f001 f93f 	bl	800a0a6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e28:	2302      	movs	r3, #2
 8008e2a:	75fb      	strb	r3, [r7, #23]
          break;
 8008e2c:	e000      	b.n	8008e30 <USBD_CDC_Setup+0x12c>
          break;
 8008e2e:	bf00      	nop
      }
      break;
 8008e30:	e006      	b.n	8008e40 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f001 f936 	bl	800a0a6 <USBD_CtlError>
      ret = USBD_FAIL;
 8008e3a:	2302      	movs	r3, #2
 8008e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8008e3e:	bf00      	nop
  }

  return ret;
 8008e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3718      	adds	r7, #24
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b084      	sub	sp, #16
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	460b      	mov	r3, r1
 8008e54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e5c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e64:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d03a      	beq.n	8008ee6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008e70:	78fa      	ldrb	r2, [r7, #3]
 8008e72:	6879      	ldr	r1, [r7, #4]
 8008e74:	4613      	mov	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4413      	add	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	440b      	add	r3, r1
 8008e7e:	331c      	adds	r3, #28
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d029      	beq.n	8008eda <USBD_CDC_DataIn+0x90>
 8008e86:	78fa      	ldrb	r2, [r7, #3]
 8008e88:	6879      	ldr	r1, [r7, #4]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	440b      	add	r3, r1
 8008e94:	331c      	adds	r3, #28
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	78f9      	ldrb	r1, [r7, #3]
 8008e9a:	68b8      	ldr	r0, [r7, #8]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	440b      	add	r3, r1
 8008ea2:	00db      	lsls	r3, r3, #3
 8008ea4:	4403      	add	r3, r0
 8008ea6:	3338      	adds	r3, #56	; 0x38
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	fbb2 f1f3 	udiv	r1, r2, r3
 8008eae:	fb03 f301 	mul.w	r3, r3, r1
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d110      	bne.n	8008eda <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008eb8:	78fa      	ldrb	r2, [r7, #3]
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	440b      	add	r3, r1
 8008ec6:	331c      	adds	r3, #28
 8008ec8:	2200      	movs	r2, #0
 8008eca:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ecc:	78f9      	ldrb	r1, [r7, #3]
 8008ece:	2300      	movs	r3, #0
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f004 fd1f 	bl	800d916 <USBD_LL_Transmit>
 8008ed8:	e003      	b.n	8008ee2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	e000      	b.n	8008ee8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008ee6:	2302      	movs	r3, #2
  }
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f04:	78fb      	ldrb	r3, [r7, #3]
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f004 fd4a 	bl	800d9a2 <USBD_LL_GetRxDataSize>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00d      	beq.n	8008f3c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008f34:	4611      	mov	r1, r2
 8008f36:	4798      	blx	r3

    return USBD_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	e000      	b.n	8008f3e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008f3c:	2302      	movs	r3, #2
  }
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b084      	sub	sp, #16
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f54:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d015      	beq.n	8008f8c <USBD_CDC_EP0_RxReady+0x46>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008f66:	2bff      	cmp	r3, #255	; 0xff
 8008f68:	d010      	beq.n	8008f8c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008f78:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f80:	b292      	uxth	r2, r2
 8008f82:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	22ff      	movs	r2, #255	; 0xff
 8008f88:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
	...

08008f98 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2243      	movs	r2, #67	; 0x43
 8008fa4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008fa6:	4b03      	ldr	r3, [pc, #12]	; (8008fb4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bc80      	pop	{r7}
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	200000a4 	.word	0x200000a4

08008fb8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2243      	movs	r2, #67	; 0x43
 8008fc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008fc6:	4b03      	ldr	r3, [pc, #12]	; (8008fd4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bc80      	pop	{r7}
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	20000060 	.word	0x20000060

08008fd8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2243      	movs	r2, #67	; 0x43
 8008fe4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008fe6:	4b03      	ldr	r3, [pc, #12]	; (8008ff4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bc80      	pop	{r7}
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	200000e8 	.word	0x200000e8

08008ff8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	220a      	movs	r2, #10
 8009004:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009006:	4b03      	ldr	r3, [pc, #12]	; (8009014 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009008:	4618      	mov	r0, r3
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	bc80      	pop	{r7}
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	2000001c 	.word	0x2000001c

08009018 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009022:	2302      	movs	r3, #2
 8009024:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d005      	beq.n	8009038 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009038:	7bfb      	ldrb	r3, [r7, #15]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	bc80      	pop	{r7}
 8009042:	4770      	bx	lr

08009044 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009044:	b480      	push	{r7}
 8009046:	b087      	sub	sp, #28
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	4613      	mov	r3, r2
 8009050:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009058:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009062:	88fa      	ldrh	r2, [r7, #6]
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	371c      	adds	r7, #28
 8009070:	46bd      	mov	sp, r7
 8009072:	bc80      	pop	{r7}
 8009074:	4770      	bx	lr

08009076 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009076:	b480      	push	{r7}
 8009078:	b085      	sub	sp, #20
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009086:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	bc80      	pop	{r7}
 800909a:	4770      	bx	lr

0800909c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d01c      	beq.n	80090f0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d115      	bne.n	80090ec <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80090de:	b29b      	uxth	r3, r3
 80090e0:	2181      	movs	r1, #129	; 0x81
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f004 fc17 	bl	800d916 <USBD_LL_Transmit>

      return USBD_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	e002      	b.n	80090f2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e000      	b.n	80090f2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80090f0:	2302      	movs	r3, #2
  }
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b084      	sub	sp, #16
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009108:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009110:	2b00      	cmp	r3, #0
 8009112:	d017      	beq.n	8009144 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	7c1b      	ldrb	r3, [r3, #16]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d109      	bne.n	8009130 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009122:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009126:	2101      	movs	r1, #1
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f004 fc17 	bl	800d95c <USBD_LL_PrepareReceive>
 800912e:	e007      	b.n	8009140 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009136:	2340      	movs	r3, #64	; 0x40
 8009138:	2101      	movs	r1, #1
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f004 fc0e 	bl	800d95c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	e000      	b.n	8009146 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009144:	2302      	movs	r3, #2
  }
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b084      	sub	sp, #16
 8009152:	af00      	add	r7, sp, #0
 8009154:	60f8      	str	r0, [r7, #12]
 8009156:	60b9      	str	r1, [r7, #8]
 8009158:	4613      	mov	r3, r2
 800915a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d101      	bne.n	8009166 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009162:	2302      	movs	r3, #2
 8009164:	e01a      	b.n	800919c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800916c:	2b00      	cmp	r3, #0
 800916e:	d003      	beq.n	8009178 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d003      	beq.n	8009186 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	68ba      	ldr	r2, [r7, #8]
 8009182:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	79fa      	ldrb	r2, [r7, #7]
 8009192:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f004 fa7b 	bl	800d690 <USBD_LL_Init>

  return USBD_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d006      	beq.n	80091c6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80091c0:	2300      	movs	r3, #0
 80091c2:	73fb      	strb	r3, [r7, #15]
 80091c4:	e001      	b.n	80091ca <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80091c6:	2302      	movs	r3, #2
 80091c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bc80      	pop	{r7}
 80091d4:	4770      	bx	lr

080091d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b082      	sub	sp, #8
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f004 fab0 	bl	800d744 <USBD_LL_Start>

  return USBD_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3708      	adds	r7, #8
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b083      	sub	sp, #12
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bc80      	pop	{r7}
 8009200:	4770      	bx	lr

08009202 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b084      	sub	sp, #16
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	460b      	mov	r3, r1
 800920c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800920e:	2302      	movs	r3, #2
 8009210:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00c      	beq.n	8009236 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	78fa      	ldrb	r2, [r7, #3]
 8009226:	4611      	mov	r1, r2
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	4798      	blx	r3
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009232:	2300      	movs	r3, #0
 8009234:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009236:	7bfb      	ldrb	r3, [r7, #15]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	78fa      	ldrb	r2, [r7, #3]
 8009256:	4611      	mov	r1, r2
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	4798      	blx	r3

  return USBD_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b082      	sub	sp, #8
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009276:	6839      	ldr	r1, [r7, #0]
 8009278:	4618      	mov	r0, r3
 800927a:	f000 fed8 	bl	800a02e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2201      	movs	r2, #1
 8009282:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800928c:	461a      	mov	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800929a:	f003 031f 	and.w	r3, r3, #31
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d016      	beq.n	80092d0 <USBD_LL_SetupStage+0x6a>
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d81c      	bhi.n	80092e0 <USBD_LL_SetupStage+0x7a>
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d002      	beq.n	80092b0 <USBD_LL_SetupStage+0x4a>
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d008      	beq.n	80092c0 <USBD_LL_SetupStage+0x5a>
 80092ae:	e017      	b.n	80092e0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 f9cb 	bl	8009654 <USBD_StdDevReq>
      break;
 80092be:	e01a      	b.n	80092f6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fa2d 	bl	8009728 <USBD_StdItfReq>
      break;
 80092ce:	e012      	b.n	80092f6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80092d6:	4619      	mov	r1, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fa6d 	bl	80097b8 <USBD_StdEPReq>
      break;
 80092de:	e00a      	b.n	80092f6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80092e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f004 fa88 	bl	800d804 <USBD_LL_StallEP>
      break;
 80092f4:	bf00      	nop
  }

  return USBD_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	460b      	mov	r3, r1
 800930a:	607a      	str	r2, [r7, #4]
 800930c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800930e:	7afb      	ldrb	r3, [r7, #11]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d14b      	bne.n	80093ac <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800931a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009322:	2b03      	cmp	r3, #3
 8009324:	d134      	bne.n	8009390 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	68da      	ldr	r2, [r3, #12]
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	429a      	cmp	r2, r3
 8009330:	d919      	bls.n	8009366 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	68da      	ldr	r2, [r3, #12]
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	1ad2      	subs	r2, r2, r3
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	68da      	ldr	r2, [r3, #12]
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009348:	429a      	cmp	r2, r3
 800934a:	d203      	bcs.n	8009354 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009350:	b29b      	uxth	r3, r3
 8009352:	e002      	b.n	800935a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009358:	b29b      	uxth	r3, r3
 800935a:	461a      	mov	r2, r3
 800935c:	6879      	ldr	r1, [r7, #4]
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	f000 ff57 	bl	800a212 <USBD_CtlContinueRx>
 8009364:	e038      	b.n	80093d8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00a      	beq.n	8009388 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009378:	2b03      	cmp	r3, #3
 800937a:	d105      	bne.n	8009388 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f000 ff54 	bl	800a236 <USBD_CtlSendStatus>
 800938e:	e023      	b.n	80093d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009396:	2b05      	cmp	r3, #5
 8009398:	d11e      	bne.n	80093d8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80093a2:	2100      	movs	r1, #0
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f004 fa2d 	bl	800d804 <USBD_LL_StallEP>
 80093aa:	e015      	b.n	80093d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00d      	beq.n	80093d4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80093be:	2b03      	cmp	r3, #3
 80093c0:	d108      	bne.n	80093d4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093c8:	699b      	ldr	r3, [r3, #24]
 80093ca:	7afa      	ldrb	r2, [r7, #11]
 80093cc:	4611      	mov	r1, r2
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	4798      	blx	r3
 80093d2:	e001      	b.n	80093d8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80093d4:	2302      	movs	r3, #2
 80093d6:	e000      	b.n	80093da <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3718      	adds	r7, #24
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b086      	sub	sp, #24
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	60f8      	str	r0, [r7, #12]
 80093ea:	460b      	mov	r3, r1
 80093ec:	607a      	str	r2, [r7, #4]
 80093ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80093f0:	7afb      	ldrb	r3, [r7, #11]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d17f      	bne.n	80094f6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	3314      	adds	r3, #20
 80093fa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009402:	2b02      	cmp	r3, #2
 8009404:	d15c      	bne.n	80094c0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	68da      	ldr	r2, [r3, #12]
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	429a      	cmp	r2, r3
 8009410:	d915      	bls.n	800943e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	68da      	ldr	r2, [r3, #12]
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	1ad2      	subs	r2, r2, r3
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	b29b      	uxth	r3, r3
 8009426:	461a      	mov	r2, r3
 8009428:	6879      	ldr	r1, [r7, #4]
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f000 fec1 	bl	800a1b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009430:	2300      	movs	r3, #0
 8009432:	2200      	movs	r2, #0
 8009434:	2100      	movs	r1, #0
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f004 fa90 	bl	800d95c <USBD_LL_PrepareReceive>
 800943c:	e04e      	b.n	80094dc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	6912      	ldr	r2, [r2, #16]
 8009446:	fbb3 f1f2 	udiv	r1, r3, r2
 800944a:	fb02 f201 	mul.w	r2, r2, r1
 800944e:	1a9b      	subs	r3, r3, r2
 8009450:	2b00      	cmp	r3, #0
 8009452:	d11c      	bne.n	800948e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	689a      	ldr	r2, [r3, #8]
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800945c:	429a      	cmp	r2, r3
 800945e:	d316      	bcc.n	800948e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	689a      	ldr	r2, [r3, #8]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800946a:	429a      	cmp	r2, r3
 800946c:	d20f      	bcs.n	800948e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800946e:	2200      	movs	r2, #0
 8009470:	2100      	movs	r1, #0
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	f000 fe9d 	bl	800a1b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009480:	2300      	movs	r3, #0
 8009482:	2200      	movs	r2, #0
 8009484:	2100      	movs	r1, #0
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f004 fa68 	bl	800d95c <USBD_LL_PrepareReceive>
 800948c:	e026      	b.n	80094dc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00a      	beq.n	80094b0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80094a0:	2b03      	cmp	r3, #3
 80094a2:	d105      	bne.n	80094b0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80094b0:	2180      	movs	r1, #128	; 0x80
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f004 f9a6 	bl	800d804 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 fecf 	bl	800a25c <USBD_CtlReceiveStatus>
 80094be:	e00d      	b.n	80094dc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094c6:	2b04      	cmp	r3, #4
 80094c8:	d004      	beq.n	80094d4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d103      	bne.n	80094dc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80094d4:	2180      	movs	r1, #128	; 0x80
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f004 f994 	bl	800d804 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d11d      	bne.n	8009522 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f7ff fe81 	bl	80091ee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80094f4:	e015      	b.n	8009522 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00d      	beq.n	800951e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009508:	2b03      	cmp	r3, #3
 800950a:	d108      	bne.n	800951e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009512:	695b      	ldr	r3, [r3, #20]
 8009514:	7afa      	ldrb	r2, [r7, #11]
 8009516:	4611      	mov	r1, r2
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	4798      	blx	r3
 800951c:	e001      	b.n	8009522 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800951e:	2302      	movs	r3, #2
 8009520:	e000      	b.n	8009524 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3718      	adds	r7, #24
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009534:	2340      	movs	r3, #64	; 0x40
 8009536:	2200      	movs	r2, #0
 8009538:	2100      	movs	r1, #0
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f004 f91d 	bl	800d77a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2240      	movs	r2, #64	; 0x40
 800954c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009550:	2340      	movs	r3, #64	; 0x40
 8009552:	2200      	movs	r2, #0
 8009554:	2180      	movs	r1, #128	; 0x80
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f004 f90f 	bl	800d77a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2240      	movs	r2, #64	; 0x40
 8009566:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800958c:	2b00      	cmp	r3, #0
 800958e:	d009      	beq.n	80095a4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	6852      	ldr	r2, [r2, #4]
 800959c:	b2d2      	uxtb	r2, r2
 800959e:	4611      	mov	r1, r2
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	4798      	blx	r3
  }

  return USBD_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b083      	sub	sp, #12
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	460b      	mov	r3, r1
 80095b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	78fa      	ldrb	r2, [r7, #3]
 80095be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bc80      	pop	{r7}
 80095ca:	4770      	bx	lr

080095cc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2204      	movs	r2, #4
 80095e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bc80      	pop	{r7}
 80095f2:	4770      	bx	lr

080095f4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009602:	2b04      	cmp	r3, #4
 8009604:	d105      	bne.n	8009612 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	bc80      	pop	{r7}
 800961c:	4770      	bx	lr

0800961e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b082      	sub	sp, #8
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800962c:	2b03      	cmp	r3, #3
 800962e:	d10b      	bne.n	8009648 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009636:	69db      	ldr	r3, [r3, #28]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d005      	beq.n	8009648 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009642:	69db      	ldr	r3, [r3, #28]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
	...

08009654 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800966a:	2b40      	cmp	r3, #64	; 0x40
 800966c:	d005      	beq.n	800967a <USBD_StdDevReq+0x26>
 800966e:	2b40      	cmp	r3, #64	; 0x40
 8009670:	d84f      	bhi.n	8009712 <USBD_StdDevReq+0xbe>
 8009672:	2b00      	cmp	r3, #0
 8009674:	d009      	beq.n	800968a <USBD_StdDevReq+0x36>
 8009676:	2b20      	cmp	r3, #32
 8009678:	d14b      	bne.n	8009712 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	6839      	ldr	r1, [r7, #0]
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	4798      	blx	r3
      break;
 8009688:	e048      	b.n	800971c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	785b      	ldrb	r3, [r3, #1]
 800968e:	2b09      	cmp	r3, #9
 8009690:	d839      	bhi.n	8009706 <USBD_StdDevReq+0xb2>
 8009692:	a201      	add	r2, pc, #4	; (adr r2, 8009698 <USBD_StdDevReq+0x44>)
 8009694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009698:	080096e9 	.word	0x080096e9
 800969c:	080096fd 	.word	0x080096fd
 80096a0:	08009707 	.word	0x08009707
 80096a4:	080096f3 	.word	0x080096f3
 80096a8:	08009707 	.word	0x08009707
 80096ac:	080096cb 	.word	0x080096cb
 80096b0:	080096c1 	.word	0x080096c1
 80096b4:	08009707 	.word	0x08009707
 80096b8:	080096df 	.word	0x080096df
 80096bc:	080096d5 	.word	0x080096d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80096c0:	6839      	ldr	r1, [r7, #0]
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f9dc 	bl	8009a80 <USBD_GetDescriptor>
          break;
 80096c8:	e022      	b.n	8009710 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fb3f 	bl	8009d50 <USBD_SetAddress>
          break;
 80096d2:	e01d      	b.n	8009710 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80096d4:	6839      	ldr	r1, [r7, #0]
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fb7e 	bl	8009dd8 <USBD_SetConfig>
          break;
 80096dc:	e018      	b.n	8009710 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fc07 	bl	8009ef4 <USBD_GetConfig>
          break;
 80096e6:	e013      	b.n	8009710 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fc37 	bl	8009f5e <USBD_GetStatus>
          break;
 80096f0:	e00e      	b.n	8009710 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80096f2:	6839      	ldr	r1, [r7, #0]
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fc65 	bl	8009fc4 <USBD_SetFeature>
          break;
 80096fa:	e009      	b.n	8009710 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fc74 	bl	8009fec <USBD_ClrFeature>
          break;
 8009704:	e004      	b.n	8009710 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fccc 	bl	800a0a6 <USBD_CtlError>
          break;
 800970e:	bf00      	nop
      }
      break;
 8009710:	e004      	b.n	800971c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fcc6 	bl	800a0a6 <USBD_CtlError>
      break;
 800971a:	bf00      	nop
  }

  return ret;
 800971c:	7bfb      	ldrb	r3, [r7, #15]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop

08009728 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800973e:	2b40      	cmp	r3, #64	; 0x40
 8009740:	d005      	beq.n	800974e <USBD_StdItfReq+0x26>
 8009742:	2b40      	cmp	r3, #64	; 0x40
 8009744:	d82e      	bhi.n	80097a4 <USBD_StdItfReq+0x7c>
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <USBD_StdItfReq+0x26>
 800974a:	2b20      	cmp	r3, #32
 800974c:	d12a      	bne.n	80097a4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009754:	3b01      	subs	r3, #1
 8009756:	2b02      	cmp	r3, #2
 8009758:	d81d      	bhi.n	8009796 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	889b      	ldrh	r3, [r3, #4]
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b01      	cmp	r3, #1
 8009762:	d813      	bhi.n	800978c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	4798      	blx	r3
 8009772:	4603      	mov	r3, r0
 8009774:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	88db      	ldrh	r3, [r3, #6]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d110      	bne.n	80097a0 <USBD_StdItfReq+0x78>
 800977e:	7bfb      	ldrb	r3, [r7, #15]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10d      	bne.n	80097a0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fd56 	bl	800a236 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800978a:	e009      	b.n	80097a0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fc89 	bl	800a0a6 <USBD_CtlError>
          break;
 8009794:	e004      	b.n	80097a0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fc84 	bl	800a0a6 <USBD_CtlError>
          break;
 800979e:	e000      	b.n	80097a2 <USBD_StdItfReq+0x7a>
          break;
 80097a0:	bf00      	nop
      }
      break;
 80097a2:	e004      	b.n	80097ae <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80097a4:	6839      	ldr	r1, [r7, #0]
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fc7d 	bl	800a0a6 <USBD_CtlError>
      break;
 80097ac:	bf00      	nop
  }

  return USBD_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	889b      	ldrh	r3, [r3, #4]
 80097ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097d4:	2b40      	cmp	r3, #64	; 0x40
 80097d6:	d007      	beq.n	80097e8 <USBD_StdEPReq+0x30>
 80097d8:	2b40      	cmp	r3, #64	; 0x40
 80097da:	f200 8146 	bhi.w	8009a6a <USBD_StdEPReq+0x2b2>
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00a      	beq.n	80097f8 <USBD_StdEPReq+0x40>
 80097e2:	2b20      	cmp	r3, #32
 80097e4:	f040 8141 	bne.w	8009a6a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	6839      	ldr	r1, [r7, #0]
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	4798      	blx	r3
      break;
 80097f6:	e13d      	b.n	8009a74 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009800:	2b20      	cmp	r3, #32
 8009802:	d10a      	bne.n	800981a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	4798      	blx	r3
 8009812:	4603      	mov	r3, r0
 8009814:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009816:	7bfb      	ldrb	r3, [r7, #15]
 8009818:	e12d      	b.n	8009a76 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	785b      	ldrb	r3, [r3, #1]
 800981e:	2b03      	cmp	r3, #3
 8009820:	d007      	beq.n	8009832 <USBD_StdEPReq+0x7a>
 8009822:	2b03      	cmp	r3, #3
 8009824:	f300 811b 	bgt.w	8009a5e <USBD_StdEPReq+0x2a6>
 8009828:	2b00      	cmp	r3, #0
 800982a:	d072      	beq.n	8009912 <USBD_StdEPReq+0x15a>
 800982c:	2b01      	cmp	r3, #1
 800982e:	d03a      	beq.n	80098a6 <USBD_StdEPReq+0xee>
 8009830:	e115      	b.n	8009a5e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009838:	2b02      	cmp	r3, #2
 800983a:	d002      	beq.n	8009842 <USBD_StdEPReq+0x8a>
 800983c:	2b03      	cmp	r3, #3
 800983e:	d015      	beq.n	800986c <USBD_StdEPReq+0xb4>
 8009840:	e02b      	b.n	800989a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009842:	7bbb      	ldrb	r3, [r7, #14]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00c      	beq.n	8009862 <USBD_StdEPReq+0xaa>
 8009848:	7bbb      	ldrb	r3, [r7, #14]
 800984a:	2b80      	cmp	r3, #128	; 0x80
 800984c:	d009      	beq.n	8009862 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800984e:	7bbb      	ldrb	r3, [r7, #14]
 8009850:	4619      	mov	r1, r3
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f003 ffd6 	bl	800d804 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009858:	2180      	movs	r1, #128	; 0x80
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f003 ffd2 	bl	800d804 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009860:	e020      	b.n	80098a4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009862:	6839      	ldr	r1, [r7, #0]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 fc1e 	bl	800a0a6 <USBD_CtlError>
              break;
 800986a:	e01b      	b.n	80098a4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	885b      	ldrh	r3, [r3, #2]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10e      	bne.n	8009892 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009874:	7bbb      	ldrb	r3, [r7, #14]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00b      	beq.n	8009892 <USBD_StdEPReq+0xda>
 800987a:	7bbb      	ldrb	r3, [r7, #14]
 800987c:	2b80      	cmp	r3, #128	; 0x80
 800987e:	d008      	beq.n	8009892 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	88db      	ldrh	r3, [r3, #6]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d104      	bne.n	8009892 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009888:	7bbb      	ldrb	r3, [r7, #14]
 800988a:	4619      	mov	r1, r3
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f003 ffb9 	bl	800d804 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fccf 	bl	800a236 <USBD_CtlSendStatus>

              break;
 8009898:	e004      	b.n	80098a4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fc02 	bl	800a0a6 <USBD_CtlError>
              break;
 80098a2:	bf00      	nop
          }
          break;
 80098a4:	e0e0      	b.n	8009a68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d002      	beq.n	80098b6 <USBD_StdEPReq+0xfe>
 80098b0:	2b03      	cmp	r3, #3
 80098b2:	d015      	beq.n	80098e0 <USBD_StdEPReq+0x128>
 80098b4:	e026      	b.n	8009904 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098b6:	7bbb      	ldrb	r3, [r7, #14]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00c      	beq.n	80098d6 <USBD_StdEPReq+0x11e>
 80098bc:	7bbb      	ldrb	r3, [r7, #14]
 80098be:	2b80      	cmp	r3, #128	; 0x80
 80098c0:	d009      	beq.n	80098d6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80098c2:	7bbb      	ldrb	r3, [r7, #14]
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f003 ff9c 	bl	800d804 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80098cc:	2180      	movs	r1, #128	; 0x80
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f003 ff98 	bl	800d804 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098d4:	e01c      	b.n	8009910 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80098d6:	6839      	ldr	r1, [r7, #0]
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fbe4 	bl	800a0a6 <USBD_CtlError>
              break;
 80098de:	e017      	b.n	8009910 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	885b      	ldrh	r3, [r3, #2]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d112      	bne.n	800990e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80098e8:	7bbb      	ldrb	r3, [r7, #14]
 80098ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d004      	beq.n	80098fc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80098f2:	7bbb      	ldrb	r3, [r7, #14]
 80098f4:	4619      	mov	r1, r3
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f003 ffa3 	bl	800d842 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fc9a 	bl	800a236 <USBD_CtlSendStatus>
              }
              break;
 8009902:	e004      	b.n	800990e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009904:	6839      	ldr	r1, [r7, #0]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fbcd 	bl	800a0a6 <USBD_CtlError>
              break;
 800990c:	e000      	b.n	8009910 <USBD_StdEPReq+0x158>
              break;
 800990e:	bf00      	nop
          }
          break;
 8009910:	e0aa      	b.n	8009a68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009918:	2b02      	cmp	r3, #2
 800991a:	d002      	beq.n	8009922 <USBD_StdEPReq+0x16a>
 800991c:	2b03      	cmp	r3, #3
 800991e:	d032      	beq.n	8009986 <USBD_StdEPReq+0x1ce>
 8009920:	e097      	b.n	8009a52 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009922:	7bbb      	ldrb	r3, [r7, #14]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d007      	beq.n	8009938 <USBD_StdEPReq+0x180>
 8009928:	7bbb      	ldrb	r3, [r7, #14]
 800992a:	2b80      	cmp	r3, #128	; 0x80
 800992c:	d004      	beq.n	8009938 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800992e:	6839      	ldr	r1, [r7, #0]
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fbb8 	bl	800a0a6 <USBD_CtlError>
                break;
 8009936:	e091      	b.n	8009a5c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009938:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800993c:	2b00      	cmp	r3, #0
 800993e:	da0b      	bge.n	8009958 <USBD_StdEPReq+0x1a0>
 8009940:	7bbb      	ldrb	r3, [r7, #14]
 8009942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009946:	4613      	mov	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	3310      	adds	r3, #16
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	4413      	add	r3, r2
 8009954:	3304      	adds	r3, #4
 8009956:	e00b      	b.n	8009970 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009958:	7bbb      	ldrb	r3, [r7, #14]
 800995a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800995e:	4613      	mov	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	4413      	add	r3, r2
 800996e:	3304      	adds	r3, #4
 8009970:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	2200      	movs	r2, #0
 8009976:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	2202      	movs	r2, #2
 800997c:	4619      	mov	r1, r3
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 fbfb 	bl	800a17a <USBD_CtlSendData>
              break;
 8009984:	e06a      	b.n	8009a5c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009986:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800998a:	2b00      	cmp	r3, #0
 800998c:	da11      	bge.n	80099b2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800998e:	7bbb      	ldrb	r3, [r7, #14]
 8009990:	f003 020f 	and.w	r2, r3, #15
 8009994:	6879      	ldr	r1, [r7, #4]
 8009996:	4613      	mov	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	440b      	add	r3, r1
 80099a0:	3318      	adds	r3, #24
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d117      	bne.n	80099d8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fb7b 	bl	800a0a6 <USBD_CtlError>
                  break;
 80099b0:	e054      	b.n	8009a5c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80099b2:	7bbb      	ldrb	r3, [r7, #14]
 80099b4:	f003 020f 	and.w	r2, r3, #15
 80099b8:	6879      	ldr	r1, [r7, #4]
 80099ba:	4613      	mov	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	4413      	add	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	440b      	add	r3, r1
 80099c4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d104      	bne.n	80099d8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fb68 	bl	800a0a6 <USBD_CtlError>
                  break;
 80099d6:	e041      	b.n	8009a5c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	da0b      	bge.n	80099f8 <USBD_StdEPReq+0x240>
 80099e0:	7bbb      	ldrb	r3, [r7, #14]
 80099e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099e6:	4613      	mov	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4413      	add	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	3310      	adds	r3, #16
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	4413      	add	r3, r2
 80099f4:	3304      	adds	r3, #4
 80099f6:	e00b      	b.n	8009a10 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80099f8:	7bbb      	ldrb	r3, [r7, #14]
 80099fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099fe:	4613      	mov	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4413      	add	r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	3304      	adds	r3, #4
 8009a10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a12:	7bbb      	ldrb	r3, [r7, #14]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d002      	beq.n	8009a1e <USBD_StdEPReq+0x266>
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
 8009a1a:	2b80      	cmp	r3, #128	; 0x80
 8009a1c:	d103      	bne.n	8009a26 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	2200      	movs	r2, #0
 8009a22:	601a      	str	r2, [r3, #0]
 8009a24:	e00e      	b.n	8009a44 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009a26:	7bbb      	ldrb	r3, [r7, #14]
 8009a28:	4619      	mov	r1, r3
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f003 ff28 	bl	800d880 <USBD_LL_IsStallEP>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d003      	beq.n	8009a3e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	e002      	b.n	8009a44 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	2200      	movs	r2, #0
 8009a42:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	2202      	movs	r2, #2
 8009a48:	4619      	mov	r1, r3
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fb95 	bl	800a17a <USBD_CtlSendData>
              break;
 8009a50:	e004      	b.n	8009a5c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009a52:	6839      	ldr	r1, [r7, #0]
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fb26 	bl	800a0a6 <USBD_CtlError>
              break;
 8009a5a:	bf00      	nop
          }
          break;
 8009a5c:	e004      	b.n	8009a68 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009a5e:	6839      	ldr	r1, [r7, #0]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 fb20 	bl	800a0a6 <USBD_CtlError>
          break;
 8009a66:	bf00      	nop
      }
      break;
 8009a68:	e004      	b.n	8009a74 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fb1a 	bl	800a0a6 <USBD_CtlError>
      break;
 8009a72:	bf00      	nop
  }

  return ret;
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
	...

08009a80 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a92:	2300      	movs	r3, #0
 8009a94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	885b      	ldrh	r3, [r3, #2]
 8009a9a:	0a1b      	lsrs	r3, r3, #8
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	2b06      	cmp	r3, #6
 8009aa2:	f200 8128 	bhi.w	8009cf6 <USBD_GetDescriptor+0x276>
 8009aa6:	a201      	add	r2, pc, #4	; (adr r2, 8009aac <USBD_GetDescriptor+0x2c>)
 8009aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aac:	08009ac9 	.word	0x08009ac9
 8009ab0:	08009ae1 	.word	0x08009ae1
 8009ab4:	08009b21 	.word	0x08009b21
 8009ab8:	08009cf7 	.word	0x08009cf7
 8009abc:	08009cf7 	.word	0x08009cf7
 8009ac0:	08009c97 	.word	0x08009c97
 8009ac4:	08009cc3 	.word	0x08009cc3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	7c12      	ldrb	r2, [r2, #16]
 8009ad4:	f107 0108 	add.w	r1, r7, #8
 8009ad8:	4610      	mov	r0, r2
 8009ada:	4798      	blx	r3
 8009adc:	60f8      	str	r0, [r7, #12]
      break;
 8009ade:	e112      	b.n	8009d06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	7c1b      	ldrb	r3, [r3, #16]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10d      	bne.n	8009b04 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af0:	f107 0208 	add.w	r2, r7, #8
 8009af4:	4610      	mov	r0, r2
 8009af6:	4798      	blx	r3
 8009af8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	3301      	adds	r3, #1
 8009afe:	2202      	movs	r2, #2
 8009b00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009b02:	e100      	b.n	8009d06 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0c:	f107 0208 	add.w	r2, r7, #8
 8009b10:	4610      	mov	r0, r2
 8009b12:	4798      	blx	r3
 8009b14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	701a      	strb	r2, [r3, #0]
      break;
 8009b1e:	e0f2      	b.n	8009d06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	885b      	ldrh	r3, [r3, #2]
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b05      	cmp	r3, #5
 8009b28:	f200 80ac 	bhi.w	8009c84 <USBD_GetDescriptor+0x204>
 8009b2c:	a201      	add	r2, pc, #4	; (adr r2, 8009b34 <USBD_GetDescriptor+0xb4>)
 8009b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b32:	bf00      	nop
 8009b34:	08009b4d 	.word	0x08009b4d
 8009b38:	08009b81 	.word	0x08009b81
 8009b3c:	08009bb5 	.word	0x08009bb5
 8009b40:	08009be9 	.word	0x08009be9
 8009b44:	08009c1d 	.word	0x08009c1d
 8009b48:	08009c51 	.word	0x08009c51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00b      	beq.n	8009b70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	7c12      	ldrb	r2, [r2, #16]
 8009b64:	f107 0108 	add.w	r1, r7, #8
 8009b68:	4610      	mov	r0, r2
 8009b6a:	4798      	blx	r3
 8009b6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b6e:	e091      	b.n	8009c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fa97 	bl	800a0a6 <USBD_CtlError>
            err++;
 8009b78:	7afb      	ldrb	r3, [r7, #11]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b7e:	e089      	b.n	8009c94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00b      	beq.n	8009ba4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	7c12      	ldrb	r2, [r2, #16]
 8009b98:	f107 0108 	add.w	r1, r7, #8
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	4798      	blx	r3
 8009ba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ba2:	e077      	b.n	8009c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ba4:	6839      	ldr	r1, [r7, #0]
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 fa7d 	bl	800a0a6 <USBD_CtlError>
            err++;
 8009bac:	7afb      	ldrb	r3, [r7, #11]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	72fb      	strb	r3, [r7, #11]
          break;
 8009bb2:	e06f      	b.n	8009c94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00b      	beq.n	8009bd8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	7c12      	ldrb	r2, [r2, #16]
 8009bcc:	f107 0108 	add.w	r1, r7, #8
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	4798      	blx	r3
 8009bd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bd6:	e05d      	b.n	8009c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fa63 	bl	800a0a6 <USBD_CtlError>
            err++;
 8009be0:	7afb      	ldrb	r3, [r7, #11]
 8009be2:	3301      	adds	r3, #1
 8009be4:	72fb      	strb	r3, [r7, #11]
          break;
 8009be6:	e055      	b.n	8009c94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00b      	beq.n	8009c0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	7c12      	ldrb	r2, [r2, #16]
 8009c00:	f107 0108 	add.w	r1, r7, #8
 8009c04:	4610      	mov	r0, r2
 8009c06:	4798      	blx	r3
 8009c08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c0a:	e043      	b.n	8009c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c0c:	6839      	ldr	r1, [r7, #0]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fa49 	bl	800a0a6 <USBD_CtlError>
            err++;
 8009c14:	7afb      	ldrb	r3, [r7, #11]
 8009c16:	3301      	adds	r3, #1
 8009c18:	72fb      	strb	r3, [r7, #11]
          break;
 8009c1a:	e03b      	b.n	8009c94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c22:	695b      	ldr	r3, [r3, #20]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d00b      	beq.n	8009c40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c2e:	695b      	ldr	r3, [r3, #20]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	7c12      	ldrb	r2, [r2, #16]
 8009c34:	f107 0108 	add.w	r1, r7, #8
 8009c38:	4610      	mov	r0, r2
 8009c3a:	4798      	blx	r3
 8009c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c3e:	e029      	b.n	8009c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fa2f 	bl	800a0a6 <USBD_CtlError>
            err++;
 8009c48:	7afb      	ldrb	r3, [r7, #11]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c4e:	e021      	b.n	8009c94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00b      	beq.n	8009c74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c62:	699b      	ldr	r3, [r3, #24]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	7c12      	ldrb	r2, [r2, #16]
 8009c68:	f107 0108 	add.w	r1, r7, #8
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	4798      	blx	r3
 8009c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c72:	e00f      	b.n	8009c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fa15 	bl	800a0a6 <USBD_CtlError>
            err++;
 8009c7c:	7afb      	ldrb	r3, [r7, #11]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	72fb      	strb	r3, [r7, #11]
          break;
 8009c82:	e007      	b.n	8009c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fa0d 	bl	800a0a6 <USBD_CtlError>
          err++;
 8009c8c:	7afb      	ldrb	r3, [r7, #11]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009c92:	e038      	b.n	8009d06 <USBD_GetDescriptor+0x286>
 8009c94:	e037      	b.n	8009d06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	7c1b      	ldrb	r3, [r3, #16]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d109      	bne.n	8009cb2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca6:	f107 0208 	add.w	r2, r7, #8
 8009caa:	4610      	mov	r0, r2
 8009cac:	4798      	blx	r3
 8009cae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cb0:	e029      	b.n	8009d06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f9f6 	bl	800a0a6 <USBD_CtlError>
        err++;
 8009cba:	7afb      	ldrb	r3, [r7, #11]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	72fb      	strb	r3, [r7, #11]
      break;
 8009cc0:	e021      	b.n	8009d06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	7c1b      	ldrb	r3, [r3, #16]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10d      	bne.n	8009ce6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd2:	f107 0208 	add.w	r2, r7, #8
 8009cd6:	4610      	mov	r0, r2
 8009cd8:	4798      	blx	r3
 8009cda:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	2207      	movs	r2, #7
 8009ce2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ce4:	e00f      	b.n	8009d06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ce6:	6839      	ldr	r1, [r7, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 f9dc 	bl	800a0a6 <USBD_CtlError>
        err++;
 8009cee:	7afb      	ldrb	r3, [r7, #11]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	72fb      	strb	r3, [r7, #11]
      break;
 8009cf4:	e007      	b.n	8009d06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f9d4 	bl	800a0a6 <USBD_CtlError>
      err++;
 8009cfe:	7afb      	ldrb	r3, [r7, #11]
 8009d00:	3301      	adds	r3, #1
 8009d02:	72fb      	strb	r3, [r7, #11]
      break;
 8009d04:	bf00      	nop
  }

  if (err != 0U)
 8009d06:	7afb      	ldrb	r3, [r7, #11]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d11c      	bne.n	8009d46 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009d0c:	893b      	ldrh	r3, [r7, #8]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d011      	beq.n	8009d36 <USBD_GetDescriptor+0x2b6>
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	88db      	ldrh	r3, [r3, #6]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00d      	beq.n	8009d36 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	88da      	ldrh	r2, [r3, #6]
 8009d1e:	893b      	ldrh	r3, [r7, #8]
 8009d20:	4293      	cmp	r3, r2
 8009d22:	bf28      	it	cs
 8009d24:	4613      	movcs	r3, r2
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d2a:	893b      	ldrh	r3, [r7, #8]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	68f9      	ldr	r1, [r7, #12]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fa22 	bl	800a17a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	88db      	ldrh	r3, [r3, #6]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d104      	bne.n	8009d48 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fa79 	bl	800a236 <USBD_CtlSendStatus>
 8009d44:	e000      	b.n	8009d48 <USBD_GetDescriptor+0x2c8>
    return;
 8009d46:	bf00      	nop
    }
  }
}
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop

08009d50 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	889b      	ldrh	r3, [r3, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d130      	bne.n	8009dc4 <USBD_SetAddress+0x74>
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	88db      	ldrh	r3, [r3, #6]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d12c      	bne.n	8009dc4 <USBD_SetAddress+0x74>
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	885b      	ldrh	r3, [r3, #2]
 8009d6e:	2b7f      	cmp	r3, #127	; 0x7f
 8009d70:	d828      	bhi.n	8009dc4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	885b      	ldrh	r3, [r3, #2]
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d84:	2b03      	cmp	r3, #3
 8009d86:	d104      	bne.n	8009d92 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009d88:	6839      	ldr	r1, [r7, #0]
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f98b 	bl	800a0a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d90:	e01d      	b.n	8009dce <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	7bfa      	ldrb	r2, [r7, #15]
 8009d96:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f003 fd9a 	bl	800d8d8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 fa46 	bl	800a236 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009daa:	7bfb      	ldrb	r3, [r7, #15]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d004      	beq.n	8009dba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2202      	movs	r2, #2
 8009db4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009db8:	e009      	b.n	8009dce <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dc2:	e004      	b.n	8009dce <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009dc4:	6839      	ldr	r1, [r7, #0]
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f96d 	bl	800a0a6 <USBD_CtlError>
  }
}
 8009dcc:	bf00      	nop
 8009dce:	bf00      	nop
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
	...

08009dd8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	885b      	ldrh	r3, [r3, #2]
 8009de6:	b2da      	uxtb	r2, r3
 8009de8:	4b41      	ldr	r3, [pc, #260]	; (8009ef0 <USBD_SetConfig+0x118>)
 8009dea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009dec:	4b40      	ldr	r3, [pc, #256]	; (8009ef0 <USBD_SetConfig+0x118>)
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d904      	bls.n	8009dfe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009df4:	6839      	ldr	r1, [r7, #0]
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f955 	bl	800a0a6 <USBD_CtlError>
 8009dfc:	e075      	b.n	8009eea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d002      	beq.n	8009e0e <USBD_SetConfig+0x36>
 8009e08:	2b03      	cmp	r3, #3
 8009e0a:	d023      	beq.n	8009e54 <USBD_SetConfig+0x7c>
 8009e0c:	e062      	b.n	8009ed4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009e0e:	4b38      	ldr	r3, [pc, #224]	; (8009ef0 <USBD_SetConfig+0x118>)
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d01a      	beq.n	8009e4c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009e16:	4b36      	ldr	r3, [pc, #216]	; (8009ef0 <USBD_SetConfig+0x118>)
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2203      	movs	r2, #3
 8009e24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e28:	4b31      	ldr	r3, [pc, #196]	; (8009ef0 <USBD_SetConfig+0x118>)
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7ff f9e7 	bl	8009202 <USBD_SetClassConfig>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d104      	bne.n	8009e44 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009e3a:	6839      	ldr	r1, [r7, #0]
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 f932 	bl	800a0a6 <USBD_CtlError>
            return;
 8009e42:	e052      	b.n	8009eea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f9f6 	bl	800a236 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e4a:	e04e      	b.n	8009eea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f9f2 	bl	800a236 <USBD_CtlSendStatus>
        break;
 8009e52:	e04a      	b.n	8009eea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009e54:	4b26      	ldr	r3, [pc, #152]	; (8009ef0 <USBD_SetConfig+0x118>)
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d112      	bne.n	8009e82 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2202      	movs	r2, #2
 8009e60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009e64:	4b22      	ldr	r3, [pc, #136]	; (8009ef0 <USBD_SetConfig+0x118>)
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	461a      	mov	r2, r3
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009e6e:	4b20      	ldr	r3, [pc, #128]	; (8009ef0 <USBD_SetConfig+0x118>)
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	4619      	mov	r1, r3
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f7ff f9e3 	bl	8009240 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f9db 	bl	800a236 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e80:	e033      	b.n	8009eea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009e82:	4b1b      	ldr	r3, [pc, #108]	; (8009ef0 <USBD_SetConfig+0x118>)
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	461a      	mov	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d01d      	beq.n	8009ecc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	4619      	mov	r1, r3
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7ff f9d1 	bl	8009240 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009e9e:	4b14      	ldr	r3, [pc, #80]	; (8009ef0 <USBD_SetConfig+0x118>)
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ea8:	4b11      	ldr	r3, [pc, #68]	; (8009ef0 <USBD_SetConfig+0x118>)
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	4619      	mov	r1, r3
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f7ff f9a7 	bl	8009202 <USBD_SetClassConfig>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d104      	bne.n	8009ec4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f8f2 	bl	800a0a6 <USBD_CtlError>
            return;
 8009ec2:	e012      	b.n	8009eea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f9b6 	bl	800a236 <USBD_CtlSendStatus>
        break;
 8009eca:	e00e      	b.n	8009eea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f9b2 	bl	800a236 <USBD_CtlSendStatus>
        break;
 8009ed2:	e00a      	b.n	8009eea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f8e5 	bl	800a0a6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009edc:	4b04      	ldr	r3, [pc, #16]	; (8009ef0 <USBD_SetConfig+0x118>)
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7ff f9ac 	bl	8009240 <USBD_ClrClassConfig>
        break;
 8009ee8:	bf00      	nop
    }
  }
}
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	200001b1 	.word	0x200001b1

08009ef4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	88db      	ldrh	r3, [r3, #6]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d004      	beq.n	8009f10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f06:	6839      	ldr	r1, [r7, #0]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 f8cc 	bl	800a0a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f0e:	e022      	b.n	8009f56 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	dc02      	bgt.n	8009f20 <USBD_GetConfig+0x2c>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	dc03      	bgt.n	8009f26 <USBD_GetConfig+0x32>
 8009f1e:	e015      	b.n	8009f4c <USBD_GetConfig+0x58>
 8009f20:	2b03      	cmp	r3, #3
 8009f22:	d00b      	beq.n	8009f3c <USBD_GetConfig+0x48>
 8009f24:	e012      	b.n	8009f4c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	3308      	adds	r3, #8
 8009f30:	2201      	movs	r2, #1
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 f920 	bl	800a17a <USBD_CtlSendData>
        break;
 8009f3a:	e00c      	b.n	8009f56 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	3304      	adds	r3, #4
 8009f40:	2201      	movs	r2, #1
 8009f42:	4619      	mov	r1, r3
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 f918 	bl	800a17a <USBD_CtlSendData>
        break;
 8009f4a:	e004      	b.n	8009f56 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009f4c:	6839      	ldr	r1, [r7, #0]
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f8a9 	bl	800a0a6 <USBD_CtlError>
        break;
 8009f54:	bf00      	nop
}
 8009f56:	bf00      	nop
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b082      	sub	sp, #8
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	d81e      	bhi.n	8009fb2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	88db      	ldrh	r3, [r3, #6]
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d004      	beq.n	8009f86 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 f891 	bl	800a0a6 <USBD_CtlError>
        break;
 8009f84:	e01a      	b.n	8009fbc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d005      	beq.n	8009fa2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	f043 0202 	orr.w	r2, r3, #2
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	330c      	adds	r3, #12
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	4619      	mov	r1, r3
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f8e5 	bl	800a17a <USBD_CtlSendData>
      break;
 8009fb0:	e004      	b.n	8009fbc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009fb2:	6839      	ldr	r1, [r7, #0]
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 f876 	bl	800a0a6 <USBD_CtlError>
      break;
 8009fba:	bf00      	nop
  }
}
 8009fbc:	bf00      	nop
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	885b      	ldrh	r3, [r3, #2]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d106      	bne.n	8009fe4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f929 	bl	800a236 <USBD_CtlSendStatus>
  }
}
 8009fe4:	bf00      	nop
 8009fe6:	3708      	adds	r7, #8
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d80b      	bhi.n	800a01a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	885b      	ldrh	r3, [r3, #2]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d10c      	bne.n	800a024 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f90f 	bl	800a236 <USBD_CtlSendStatus>
      }
      break;
 800a018:	e004      	b.n	800a024 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a01a:	6839      	ldr	r1, [r7, #0]
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 f842 	bl	800a0a6 <USBD_CtlError>
      break;
 800a022:	e000      	b.n	800a026 <USBD_ClrFeature+0x3a>
      break;
 800a024:	bf00      	nop
  }
}
 800a026:	bf00      	nop
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a02e:	b480      	push	{r7}
 800a030:	b083      	sub	sp, #12
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	781a      	ldrb	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	785a      	ldrb	r2, [r3, #1]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	3302      	adds	r3, #2
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	b29a      	uxth	r2, r3
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	3303      	adds	r3, #3
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	b29b      	uxth	r3, r3
 800a058:	021b      	lsls	r3, r3, #8
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	4413      	add	r3, r2
 800a05e:	b29a      	uxth	r2, r3
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	3304      	adds	r3, #4
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	3305      	adds	r3, #5
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	b29b      	uxth	r3, r3
 800a074:	021b      	lsls	r3, r3, #8
 800a076:	b29b      	uxth	r3, r3
 800a078:	4413      	add	r3, r2
 800a07a:	b29a      	uxth	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	3306      	adds	r3, #6
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	b29a      	uxth	r2, r3
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	3307      	adds	r3, #7
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	b29b      	uxth	r3, r3
 800a090:	021b      	lsls	r3, r3, #8
 800a092:	b29b      	uxth	r3, r3
 800a094:	4413      	add	r3, r2
 800a096:	b29a      	uxth	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	80da      	strh	r2, [r3, #6]

}
 800a09c:	bf00      	nop
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bc80      	pop	{r7}
 800a0a4:	4770      	bx	lr

0800a0a6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b082      	sub	sp, #8
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a0b0:	2180      	movs	r1, #128	; 0x80
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f003 fba6 	bl	800d804 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f003 fba2 	bl	800d804 <USBD_LL_StallEP>
}
 800a0c0:	bf00      	nop
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b086      	sub	sp, #24
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d032      	beq.n	800a144 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f000 f834 	bl	800a14c <USBD_GetLen>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	005b      	lsls	r3, r3, #1
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a0f2:	7dfb      	ldrb	r3, [r7, #23]
 800a0f4:	1c5a      	adds	r2, r3, #1
 800a0f6:	75fa      	strb	r2, [r7, #23]
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	7812      	ldrb	r2, [r2, #0]
 800a102:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a104:	7dfb      	ldrb	r3, [r7, #23]
 800a106:	1c5a      	adds	r2, r3, #1
 800a108:	75fa      	strb	r2, [r7, #23]
 800a10a:	461a      	mov	r2, r3
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	4413      	add	r3, r2
 800a110:	2203      	movs	r2, #3
 800a112:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a114:	e012      	b.n	800a13c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	1c5a      	adds	r2, r3, #1
 800a11a:	60fa      	str	r2, [r7, #12]
 800a11c:	7dfa      	ldrb	r2, [r7, #23]
 800a11e:	1c51      	adds	r1, r2, #1
 800a120:	75f9      	strb	r1, [r7, #23]
 800a122:	4611      	mov	r1, r2
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	440a      	add	r2, r1
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a12c:	7dfb      	ldrb	r3, [r7, #23]
 800a12e:	1c5a      	adds	r2, r3, #1
 800a130:	75fa      	strb	r2, [r7, #23]
 800a132:	461a      	mov	r2, r3
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	4413      	add	r3, r2
 800a138:	2200      	movs	r2, #0
 800a13a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1e8      	bne.n	800a116 <USBD_GetString+0x4e>
    }
  }
}
 800a144:	bf00      	nop
 800a146:	3718      	adds	r7, #24
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a154:	2300      	movs	r3, #0
 800a156:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a158:	e005      	b.n	800a166 <USBD_GetLen+0x1a>
  {
    len++;
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
 800a15c:	3301      	adds	r3, #1
 800a15e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	3301      	adds	r3, #1
 800a164:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d1f5      	bne.n	800a15a <USBD_GetLen+0xe>
  }

  return len;
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3714      	adds	r7, #20
 800a174:	46bd      	mov	sp, r7
 800a176:	bc80      	pop	{r7}
 800a178:	4770      	bx	lr

0800a17a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b084      	sub	sp, #16
 800a17e:	af00      	add	r7, sp, #0
 800a180:	60f8      	str	r0, [r7, #12]
 800a182:	60b9      	str	r1, [r7, #8]
 800a184:	4613      	mov	r3, r2
 800a186:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2202      	movs	r2, #2
 800a18c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a190:	88fa      	ldrh	r2, [r7, #6]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a196:	88fa      	ldrh	r2, [r7, #6]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a19c:	88fb      	ldrh	r3, [r7, #6]
 800a19e:	68ba      	ldr	r2, [r7, #8]
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f003 fbb7 	bl	800d916 <USBD_LL_Transmit>

  return USBD_OK;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b084      	sub	sp, #16
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	60f8      	str	r0, [r7, #12]
 800a1ba:	60b9      	str	r1, [r7, #8]
 800a1bc:	4613      	mov	r3, r2
 800a1be:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1c0:	88fb      	ldrh	r3, [r7, #6]
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f003 fba5 	bl	800d916 <USBD_LL_Transmit>

  return USBD_OK;
 800a1cc:	2300      	movs	r3, #0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b084      	sub	sp, #16
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	60f8      	str	r0, [r7, #12]
 800a1de:	60b9      	str	r1, [r7, #8]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2203      	movs	r2, #3
 800a1e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a1ec:	88fa      	ldrh	r2, [r7, #6]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a1f4:	88fa      	ldrh	r2, [r7, #6]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1fc:	88fb      	ldrh	r3, [r7, #6]
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	2100      	movs	r1, #0
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f003 fbaa 	bl	800d95c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b084      	sub	sp, #16
 800a216:	af00      	add	r7, sp, #0
 800a218:	60f8      	str	r0, [r7, #12]
 800a21a:	60b9      	str	r1, [r7, #8]
 800a21c:	4613      	mov	r3, r2
 800a21e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a220:	88fb      	ldrh	r3, [r7, #6]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	2100      	movs	r1, #0
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f003 fb98 	bl	800d95c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b082      	sub	sp, #8
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2204      	movs	r2, #4
 800a242:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a246:	2300      	movs	r3, #0
 800a248:	2200      	movs	r2, #0
 800a24a:	2100      	movs	r1, #0
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f003 fb62 	bl	800d916 <USBD_LL_Transmit>

  return USBD_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3708      	adds	r7, #8
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2205      	movs	r2, #5
 800a268:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a26c:	2300      	movs	r3, #0
 800a26e:	2200      	movs	r2, #0
 800a270:	2100      	movs	r1, #0
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f003 fb72 	bl	800d95c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3708      	adds	r7, #8
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
	...

0800a284 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a28a:	f3ef 8305 	mrs	r3, IPSR
 800a28e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a290:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10f      	bne.n	800a2b6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a296:	f3ef 8310 	mrs	r3, PRIMASK
 800a29a:	607b      	str	r3, [r7, #4]
  return(result);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d109      	bne.n	800a2b6 <osKernelInitialize+0x32>
 800a2a2:	4b10      	ldr	r3, [pc, #64]	; (800a2e4 <osKernelInitialize+0x60>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d109      	bne.n	800a2be <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a2aa:	f3ef 8311 	mrs	r3, BASEPRI
 800a2ae:	603b      	str	r3, [r7, #0]
  return(result);
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d003      	beq.n	800a2be <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a2b6:	f06f 0305 	mvn.w	r3, #5
 800a2ba:	60fb      	str	r3, [r7, #12]
 800a2bc:	e00c      	b.n	800a2d8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a2be:	4b09      	ldr	r3, [pc, #36]	; (800a2e4 <osKernelInitialize+0x60>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d105      	bne.n	800a2d2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800a2c6:	4b07      	ldr	r3, [pc, #28]	; (800a2e4 <osKernelInitialize+0x60>)
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	60fb      	str	r3, [r7, #12]
 800a2d0:	e002      	b.n	800a2d8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3714      	adds	r7, #20
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bc80      	pop	{r7}
 800a2e2:	4770      	bx	lr
 800a2e4:	200001b4 	.word	0x200001b4

0800a2e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2ee:	f3ef 8305 	mrs	r3, IPSR
 800a2f2:	60bb      	str	r3, [r7, #8]
  return(result);
 800a2f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d10f      	bne.n	800a31a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a2fe:	607b      	str	r3, [r7, #4]
  return(result);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d109      	bne.n	800a31a <osKernelStart+0x32>
 800a306:	4b11      	ldr	r3, [pc, #68]	; (800a34c <osKernelStart+0x64>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d109      	bne.n	800a322 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a30e:	f3ef 8311 	mrs	r3, BASEPRI
 800a312:	603b      	str	r3, [r7, #0]
  return(result);
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a31a:	f06f 0305 	mvn.w	r3, #5
 800a31e:	60fb      	str	r3, [r7, #12]
 800a320:	e00e      	b.n	800a340 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800a322:	4b0a      	ldr	r3, [pc, #40]	; (800a34c <osKernelStart+0x64>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d107      	bne.n	800a33a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800a32a:	4b08      	ldr	r3, [pc, #32]	; (800a34c <osKernelStart+0x64>)
 800a32c:	2202      	movs	r2, #2
 800a32e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800a330:	f001 f9ba 	bl	800b6a8 <vTaskStartScheduler>
      stat = osOK;
 800a334:	2300      	movs	r3, #0
 800a336:	60fb      	str	r3, [r7, #12]
 800a338:	e002      	b.n	800a340 <osKernelStart+0x58>
    } else {
      stat = osError;
 800a33a:	f04f 33ff 	mov.w	r3, #4294967295
 800a33e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a340:	68fb      	ldr	r3, [r7, #12]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	200001b4 	.word	0x200001b4

0800a350 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a350:	b580      	push	{r7, lr}
 800a352:	b092      	sub	sp, #72	; 0x48
 800a354:	af04      	add	r7, sp, #16
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a35c:	2300      	movs	r3, #0
 800a35e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a360:	f3ef 8305 	mrs	r3, IPSR
 800a364:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a366:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800a368:	2b00      	cmp	r3, #0
 800a36a:	f040 8094 	bne.w	800a496 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a36e:	f3ef 8310 	mrs	r3, PRIMASK
 800a372:	623b      	str	r3, [r7, #32]
  return(result);
 800a374:	6a3b      	ldr	r3, [r7, #32]
 800a376:	2b00      	cmp	r3, #0
 800a378:	f040 808d 	bne.w	800a496 <osThreadNew+0x146>
 800a37c:	4b48      	ldr	r3, [pc, #288]	; (800a4a0 <osThreadNew+0x150>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2b02      	cmp	r3, #2
 800a382:	d106      	bne.n	800a392 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a384:	f3ef 8311 	mrs	r3, BASEPRI
 800a388:	61fb      	str	r3, [r7, #28]
  return(result);
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f040 8082 	bne.w	800a496 <osThreadNew+0x146>
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d07e      	beq.n	800a496 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800a398:	2380      	movs	r3, #128	; 0x80
 800a39a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800a39c:	2318      	movs	r3, #24
 800a39e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800a3a4:	f107 031b 	add.w	r3, r7, #27
 800a3a8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800a3aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ae:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d045      	beq.n	800a442 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d002      	beq.n	800a3c4 <osThreadNew+0x74>
        name = attr->name;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	699b      	ldr	r3, [r3, #24]
 800a3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d008      	beq.n	800a3ea <osThreadNew+0x9a>
 800a3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3da:	2b38      	cmp	r3, #56	; 0x38
 800a3dc:	d805      	bhi.n	800a3ea <osThreadNew+0x9a>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	f003 0301 	and.w	r3, r3, #1
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d001      	beq.n	800a3ee <osThreadNew+0x9e>
        return (NULL);
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e054      	b.n	800a498 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d003      	beq.n	800a3fe <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	695b      	ldr	r3, [r3, #20]
 800a3fa:	089b      	lsrs	r3, r3, #2
 800a3fc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00e      	beq.n	800a424 <osThreadNew+0xd4>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	2b5b      	cmp	r3, #91	; 0x5b
 800a40c:	d90a      	bls.n	800a424 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a412:	2b00      	cmp	r3, #0
 800a414:	d006      	beq.n	800a424 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d002      	beq.n	800a424 <osThreadNew+0xd4>
        mem = 1;
 800a41e:	2301      	movs	r3, #1
 800a420:	62bb      	str	r3, [r7, #40]	; 0x28
 800a422:	e010      	b.n	800a446 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d10c      	bne.n	800a446 <osThreadNew+0xf6>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d108      	bne.n	800a446 <osThreadNew+0xf6>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d104      	bne.n	800a446 <osThreadNew+0xf6>
          mem = 0;
 800a43c:	2300      	movs	r3, #0
 800a43e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a440:	e001      	b.n	800a446 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800a446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d110      	bne.n	800a46e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a454:	9202      	str	r2, [sp, #8]
 800a456:	9301      	str	r3, [sp, #4]
 800a458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a460:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f000 fed6 	bl	800b214 <xTaskCreateStatic>
 800a468:	4603      	mov	r3, r0
 800a46a:	617b      	str	r3, [r7, #20]
 800a46c:	e013      	b.n	800a496 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800a46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a470:	2b00      	cmp	r3, #0
 800a472:	d110      	bne.n	800a496 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a476:	b29a      	uxth	r2, r3
 800a478:	f107 0314 	add.w	r3, r7, #20
 800a47c:	9301      	str	r3, [sp, #4]
 800a47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f000 ff20 	bl	800b2cc <xTaskCreate>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d001      	beq.n	800a496 <osThreadNew+0x146>
          hTask = NULL;
 800a492:	2300      	movs	r3, #0
 800a494:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a496:	697b      	ldr	r3, [r7, #20]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3738      	adds	r7, #56	; 0x38
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	200001b4 	.word	0x200001b4

0800a4a4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b086      	sub	sp, #24
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4ac:	f3ef 8305 	mrs	r3, IPSR
 800a4b0:	613b      	str	r3, [r7, #16]
  return(result);
 800a4b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10f      	bne.n	800a4d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a4bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d109      	bne.n	800a4d8 <osDelay+0x34>
 800a4c4:	4b0d      	ldr	r3, [pc, #52]	; (800a4fc <osDelay+0x58>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d109      	bne.n	800a4e0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a4cc:	f3ef 8311 	mrs	r3, BASEPRI
 800a4d0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d003      	beq.n	800a4e0 <osDelay+0x3c>
    stat = osErrorISR;
 800a4d8:	f06f 0305 	mvn.w	r3, #5
 800a4dc:	617b      	str	r3, [r7, #20]
 800a4de:	e007      	b.n	800a4f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d002      	beq.n	800a4f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f001 f8a8 	bl	800b640 <vTaskDelay>
    }
  }

  return (stat);
 800a4f0:	697b      	ldr	r3, [r7, #20]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3718      	adds	r7, #24
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	200001b4 	.word	0x200001b4

0800a500 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a500:	b580      	push	{r7, lr}
 800a502:	b08c      	sub	sp, #48	; 0x30
 800a504:	af02      	add	r7, sp, #8
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a50c:	2300      	movs	r3, #0
 800a50e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a510:	f3ef 8305 	mrs	r3, IPSR
 800a514:	61bb      	str	r3, [r7, #24]
  return(result);
 800a516:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d16f      	bne.n	800a5fc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a51c:	f3ef 8310 	mrs	r3, PRIMASK
 800a520:	617b      	str	r3, [r7, #20]
  return(result);
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d169      	bne.n	800a5fc <osMessageQueueNew+0xfc>
 800a528:	4b37      	ldr	r3, [pc, #220]	; (800a608 <osMessageQueueNew+0x108>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d105      	bne.n	800a53c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a530:	f3ef 8311 	mrs	r3, BASEPRI
 800a534:	613b      	str	r3, [r7, #16]
  return(result);
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d15f      	bne.n	800a5fc <osMessageQueueNew+0xfc>
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d05c      	beq.n	800a5fc <osMessageQueueNew+0xfc>
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d059      	beq.n	800a5fc <osMessageQueueNew+0xfc>
    mem = -1;
 800a548:	f04f 33ff 	mov.w	r3, #4294967295
 800a54c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d029      	beq.n	800a5a8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d012      	beq.n	800a582 <osMessageQueueNew+0x82>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	2b4f      	cmp	r3, #79	; 0x4f
 800a562:	d90e      	bls.n	800a582 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00a      	beq.n	800a582 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	695a      	ldr	r2, [r3, #20]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	68b9      	ldr	r1, [r7, #8]
 800a574:	fb01 f303 	mul.w	r3, r1, r3
 800a578:	429a      	cmp	r2, r3
 800a57a:	d302      	bcc.n	800a582 <osMessageQueueNew+0x82>
        mem = 1;
 800a57c:	2301      	movs	r3, #1
 800a57e:	623b      	str	r3, [r7, #32]
 800a580:	e014      	b.n	800a5ac <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d110      	bne.n	800a5ac <osMessageQueueNew+0xac>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10c      	bne.n	800a5ac <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a596:	2b00      	cmp	r3, #0
 800a598:	d108      	bne.n	800a5ac <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	695b      	ldr	r3, [r3, #20]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d104      	bne.n	800a5ac <osMessageQueueNew+0xac>
          mem = 0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	623b      	str	r3, [r7, #32]
 800a5a6:	e001      	b.n	800a5ac <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a5ac:	6a3b      	ldr	r3, [r7, #32]
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d10b      	bne.n	800a5ca <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	691a      	ldr	r2, [r3, #16]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	9100      	str	r1, [sp, #0]
 800a5be:	68b9      	ldr	r1, [r7, #8]
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f000 f96d 	bl	800a8a0 <xQueueGenericCreateStatic>
 800a5c6:	6278      	str	r0, [r7, #36]	; 0x24
 800a5c8:	e008      	b.n	800a5dc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a5ca:	6a3b      	ldr	r3, [r7, #32]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d105      	bne.n	800a5dc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	68b9      	ldr	r1, [r7, #8]
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f000 f9da 	bl	800a98e <xQueueGenericCreate>
 800a5da:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00c      	beq.n	800a5fc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d003      	beq.n	800a5f0 <osMessageQueueNew+0xf0>
        name = attr->name;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	61fb      	str	r3, [r7, #28]
 800a5ee:	e001      	b.n	800a5f4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a5f4:	69f9      	ldr	r1, [r7, #28]
 800a5f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a5f8:	f000 fdb0 	bl	800b15c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3728      	adds	r7, #40	; 0x28
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	200001b4 	.word	0x200001b4

0800a60c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	4a06      	ldr	r2, [pc, #24]	; (800a634 <vApplicationGetIdleTaskMemory+0x28>)
 800a61c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	4a05      	ldr	r2, [pc, #20]	; (800a638 <vApplicationGetIdleTaskMemory+0x2c>)
 800a622:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2280      	movs	r2, #128	; 0x80
 800a628:	601a      	str	r2, [r3, #0]
}
 800a62a:	bf00      	nop
 800a62c:	3714      	adds	r7, #20
 800a62e:	46bd      	mov	sp, r7
 800a630:	bc80      	pop	{r7}
 800a632:	4770      	bx	lr
 800a634:	200001b8 	.word	0x200001b8
 800a638:	20000214 	.word	0x20000214

0800a63c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	4a07      	ldr	r2, [pc, #28]	; (800a668 <vApplicationGetTimerTaskMemory+0x2c>)
 800a64c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	4a06      	ldr	r2, [pc, #24]	; (800a66c <vApplicationGetTimerTaskMemory+0x30>)
 800a652:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a65a:	601a      	str	r2, [r3, #0]
}
 800a65c:	bf00      	nop
 800a65e:	3714      	adds	r7, #20
 800a660:	46bd      	mov	sp, r7
 800a662:	bc80      	pop	{r7}
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	20000414 	.word	0x20000414
 800a66c:	20000470 	.word	0x20000470

0800a670 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f103 0208 	add.w	r2, r3, #8
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f04f 32ff 	mov.w	r2, #4294967295
 800a688:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f103 0208 	add.w	r2, r3, #8
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f103 0208 	add.w	r2, r3, #8
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bc80      	pop	{r7}
 800a6ac:	4770      	bx	lr

0800a6ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b083      	sub	sp, #12
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a6bc:	bf00      	nop
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bc80      	pop	{r7}
 800a6c4:	4770      	bx	lr

0800a6c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b085      	sub	sp, #20
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	689a      	ldr	r2, [r3, #8]
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	683a      	ldr	r2, [r7, #0]
 800a6ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	1c5a      	adds	r2, r3, #1
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	601a      	str	r2, [r3, #0]
}
 800a702:	bf00      	nop
 800a704:	3714      	adds	r7, #20
 800a706:	46bd      	mov	sp, r7
 800a708:	bc80      	pop	{r7}
 800a70a:	4770      	bx	lr

0800a70c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a722:	d103      	bne.n	800a72c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	60fb      	str	r3, [r7, #12]
 800a72a:	e00c      	b.n	800a746 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	3308      	adds	r3, #8
 800a730:	60fb      	str	r3, [r7, #12]
 800a732:	e002      	b.n	800a73a <vListInsert+0x2e>
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	60fb      	str	r3, [r7, #12]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	429a      	cmp	r2, r3
 800a744:	d2f6      	bcs.n	800a734 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	685a      	ldr	r2, [r3, #4]
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	1c5a      	adds	r2, r3, #1
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	601a      	str	r2, [r3, #0]
}
 800a772:	bf00      	nop
 800a774:	3714      	adds	r7, #20
 800a776:	46bd      	mov	sp, r7
 800a778:	bc80      	pop	{r7}
 800a77a:	4770      	bx	lr

0800a77c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a77c:	b480      	push	{r7}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	6892      	ldr	r2, [r2, #8]
 800a792:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	6852      	ldr	r2, [r2, #4]
 800a79c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d103      	bne.n	800a7b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	689a      	ldr	r2, [r3, #8]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	1e5a      	subs	r2, r3, #1
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3714      	adds	r7, #20
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bc80      	pop	{r7}
 800a7cc:	4770      	bx	lr
	...

0800a7d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d10a      	bne.n	800a7fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a7f6:	bf00      	nop
 800a7f8:	e7fe      	b.n	800a7f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a7fa:	f002 f997 	bl	800cb2c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a806:	68f9      	ldr	r1, [r7, #12]
 800a808:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a80a:	fb01 f303 	mul.w	r3, r1, r3
 800a80e:	441a      	add	r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a82a:	3b01      	subs	r3, #1
 800a82c:	68f9      	ldr	r1, [r7, #12]
 800a82e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a830:	fb01 f303 	mul.w	r3, r1, r3
 800a834:	441a      	add	r2, r3
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	22ff      	movs	r2, #255	; 0xff
 800a83e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	22ff      	movs	r2, #255	; 0xff
 800a846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d114      	bne.n	800a87a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d01a      	beq.n	800a88e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	3310      	adds	r3, #16
 800a85c:	4618      	mov	r0, r3
 800a85e:	f001 f9ad 	bl	800bbbc <xTaskRemoveFromEventList>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d012      	beq.n	800a88e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a868:	4b0c      	ldr	r3, [pc, #48]	; (800a89c <xQueueGenericReset+0xcc>)
 800a86a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a86e:	601a      	str	r2, [r3, #0]
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	e009      	b.n	800a88e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	3310      	adds	r3, #16
 800a87e:	4618      	mov	r0, r3
 800a880:	f7ff fef6 	bl	800a670 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	3324      	adds	r3, #36	; 0x24
 800a888:	4618      	mov	r0, r3
 800a88a:	f7ff fef1 	bl	800a670 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a88e:	f002 f97d 	bl	800cb8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a892:	2301      	movs	r3, #1
}
 800a894:	4618      	mov	r0, r3
 800a896:	3710      	adds	r7, #16
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	e000ed04 	.word	0xe000ed04

0800a8a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b08e      	sub	sp, #56	; 0x38
 800a8a4:	af02      	add	r7, sp, #8
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
 800a8ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10a      	bne.n	800a8ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b8:	f383 8811 	msr	BASEPRI, r3
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8c6:	bf00      	nop
 800a8c8:	e7fe      	b.n	800a8c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10a      	bne.n	800a8e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d002      	beq.n	800a8f2 <xQueueGenericCreateStatic+0x52>
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d001      	beq.n	800a8f6 <xQueueGenericCreateStatic+0x56>
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e000      	b.n	800a8f8 <xQueueGenericCreateStatic+0x58>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10a      	bne.n	800a912 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a900:	f383 8811 	msr	BASEPRI, r3
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	623b      	str	r3, [r7, #32]
}
 800a90e:	bf00      	nop
 800a910:	e7fe      	b.n	800a910 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d102      	bne.n	800a91e <xQueueGenericCreateStatic+0x7e>
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d101      	bne.n	800a922 <xQueueGenericCreateStatic+0x82>
 800a91e:	2301      	movs	r3, #1
 800a920:	e000      	b.n	800a924 <xQueueGenericCreateStatic+0x84>
 800a922:	2300      	movs	r3, #0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10a      	bne.n	800a93e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92c:	f383 8811 	msr	BASEPRI, r3
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	61fb      	str	r3, [r7, #28]
}
 800a93a:	bf00      	nop
 800a93c:	e7fe      	b.n	800a93c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a93e:	2350      	movs	r3, #80	; 0x50
 800a940:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	2b50      	cmp	r3, #80	; 0x50
 800a946:	d00a      	beq.n	800a95e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94c:	f383 8811 	msr	BASEPRI, r3
 800a950:	f3bf 8f6f 	isb	sy
 800a954:	f3bf 8f4f 	dsb	sy
 800a958:	61bb      	str	r3, [r7, #24]
}
 800a95a:	bf00      	nop
 800a95c:	e7fe      	b.n	800a95c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a964:	2b00      	cmp	r3, #0
 800a966:	d00d      	beq.n	800a984 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a970:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	4613      	mov	r3, r2
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	68b9      	ldr	r1, [r7, #8]
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	f000 f843 	bl	800aa0a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a986:	4618      	mov	r0, r3
 800a988:	3730      	adds	r7, #48	; 0x30
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b08a      	sub	sp, #40	; 0x28
 800a992:	af02      	add	r7, sp, #8
 800a994:	60f8      	str	r0, [r7, #12]
 800a996:	60b9      	str	r1, [r7, #8]
 800a998:	4613      	mov	r3, r2
 800a99a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10a      	bne.n	800a9b8 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	613b      	str	r3, [r7, #16]
}
 800a9b4:	bf00      	nop
 800a9b6:	e7fe      	b.n	800a9b6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d102      	bne.n	800a9c4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	61fb      	str	r3, [r7, #28]
 800a9c2:	e004      	b.n	800a9ce <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	fb02 f303 	mul.w	r3, r2, r3
 800a9cc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	3350      	adds	r3, #80	; 0x50
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f002 f9aa 	bl	800cd2c <pvPortMalloc>
 800a9d8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00f      	beq.n	800aa00 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	3350      	adds	r3, #80	; 0x50
 800a9e4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a9ee:	79fa      	ldrb	r2, [r7, #7]
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	68b9      	ldr	r1, [r7, #8]
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f000 f805 	bl	800aa0a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800aa00:	69bb      	ldr	r3, [r7, #24]
	}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3720      	adds	r7, #32
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b084      	sub	sp, #16
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	60f8      	str	r0, [r7, #12]
 800aa12:	60b9      	str	r1, [r7, #8]
 800aa14:	607a      	str	r2, [r7, #4]
 800aa16:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d103      	bne.n	800aa26 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	69ba      	ldr	r2, [r7, #24]
 800aa22:	601a      	str	r2, [r3, #0]
 800aa24:	e002      	b.n	800aa2c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	68ba      	ldr	r2, [r7, #8]
 800aa36:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aa38:	2101      	movs	r1, #1
 800aa3a:	69b8      	ldr	r0, [r7, #24]
 800aa3c:	f7ff fec8 	bl	800a7d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	78fa      	ldrb	r2, [r7, #3]
 800aa44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aa48:	bf00      	nop
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b08e      	sub	sp, #56	; 0x38
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
 800aa5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10a      	bne.n	800aa82 <xQueueGenericSend+0x32>
	__asm volatile
 800aa6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa70:	f383 8811 	msr	BASEPRI, r3
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa7e:	bf00      	nop
 800aa80:	e7fe      	b.n	800aa80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d103      	bne.n	800aa90 <xQueueGenericSend+0x40>
 800aa88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d101      	bne.n	800aa94 <xQueueGenericSend+0x44>
 800aa90:	2301      	movs	r3, #1
 800aa92:	e000      	b.n	800aa96 <xQueueGenericSend+0x46>
 800aa94:	2300      	movs	r3, #0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10a      	bne.n	800aab0 <xQueueGenericSend+0x60>
	__asm volatile
 800aa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9e:	f383 8811 	msr	BASEPRI, r3
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	f3bf 8f4f 	dsb	sy
 800aaaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aaac:	bf00      	nop
 800aaae:	e7fe      	b.n	800aaae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d103      	bne.n	800aabe <xQueueGenericSend+0x6e>
 800aab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d101      	bne.n	800aac2 <xQueueGenericSend+0x72>
 800aabe:	2301      	movs	r3, #1
 800aac0:	e000      	b.n	800aac4 <xQueueGenericSend+0x74>
 800aac2:	2300      	movs	r3, #0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10a      	bne.n	800aade <xQueueGenericSend+0x8e>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	f383 8811 	msr	BASEPRI, r3
 800aad0:	f3bf 8f6f 	isb	sy
 800aad4:	f3bf 8f4f 	dsb	sy
 800aad8:	623b      	str	r3, [r7, #32]
}
 800aada:	bf00      	nop
 800aadc:	e7fe      	b.n	800aadc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aade:	f001 fa67 	bl	800bfb0 <xTaskGetSchedulerState>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d102      	bne.n	800aaee <xQueueGenericSend+0x9e>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d101      	bne.n	800aaf2 <xQueueGenericSend+0xa2>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e000      	b.n	800aaf4 <xQueueGenericSend+0xa4>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d10a      	bne.n	800ab0e <xQueueGenericSend+0xbe>
	__asm volatile
 800aaf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafc:	f383 8811 	msr	BASEPRI, r3
 800ab00:	f3bf 8f6f 	isb	sy
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	61fb      	str	r3, [r7, #28]
}
 800ab0a:	bf00      	nop
 800ab0c:	e7fe      	b.n	800ab0c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab0e:	f002 f80d 	bl	800cb2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d302      	bcc.n	800ab24 <xQueueGenericSend+0xd4>
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	2b02      	cmp	r3, #2
 800ab22:	d129      	bne.n	800ab78 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	68b9      	ldr	r1, [r7, #8]
 800ab28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab2a:	f000 fa07 	bl	800af3c <prvCopyDataToQueue>
 800ab2e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d010      	beq.n	800ab5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3a:	3324      	adds	r3, #36	; 0x24
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f001 f83d 	bl	800bbbc <xTaskRemoveFromEventList>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d013      	beq.n	800ab70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab48:	4b3f      	ldr	r3, [pc, #252]	; (800ac48 <xQueueGenericSend+0x1f8>)
 800ab4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab4e:	601a      	str	r2, [r3, #0]
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	e00a      	b.n	800ab70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ab5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d007      	beq.n	800ab70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ab60:	4b39      	ldr	r3, [pc, #228]	; (800ac48 <xQueueGenericSend+0x1f8>)
 800ab62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab66:	601a      	str	r2, [r3, #0]
 800ab68:	f3bf 8f4f 	dsb	sy
 800ab6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ab70:	f002 f80c 	bl	800cb8c <vPortExitCritical>
				return pdPASS;
 800ab74:	2301      	movs	r3, #1
 800ab76:	e063      	b.n	800ac40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d103      	bne.n	800ab86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab7e:	f002 f805 	bl	800cb8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ab82:	2300      	movs	r3, #0
 800ab84:	e05c      	b.n	800ac40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d106      	bne.n	800ab9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab8c:	f107 0314 	add.w	r3, r7, #20
 800ab90:	4618      	mov	r0, r3
 800ab92:	f001 f877 	bl	800bc84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab96:	2301      	movs	r3, #1
 800ab98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab9a:	f001 fff7 	bl	800cb8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab9e:	f000 fde9 	bl	800b774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aba2:	f001 ffc3 	bl	800cb2c <vPortEnterCritical>
 800aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abac:	b25b      	sxtb	r3, r3
 800abae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb2:	d103      	bne.n	800abbc <xQueueGenericSend+0x16c>
 800abb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abc2:	b25b      	sxtb	r3, r3
 800abc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc8:	d103      	bne.n	800abd2 <xQueueGenericSend+0x182>
 800abca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abcc:	2200      	movs	r2, #0
 800abce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abd2:	f001 ffdb 	bl	800cb8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abd6:	1d3a      	adds	r2, r7, #4
 800abd8:	f107 0314 	add.w	r3, r7, #20
 800abdc:	4611      	mov	r1, r2
 800abde:	4618      	mov	r0, r3
 800abe0:	f001 f866 	bl	800bcb0 <xTaskCheckForTimeOut>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d124      	bne.n	800ac34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800abea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abec:	f000 fa9e 	bl	800b12c <prvIsQueueFull>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d018      	beq.n	800ac28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800abf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf8:	3310      	adds	r3, #16
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	4611      	mov	r1, r2
 800abfe:	4618      	mov	r0, r3
 800ac00:	f000 ff8c 	bl	800bb1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac06:	f000 fa29 	bl	800b05c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac0a:	f000 fdc1 	bl	800b790 <xTaskResumeAll>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f47f af7c 	bne.w	800ab0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ac16:	4b0c      	ldr	r3, [pc, #48]	; (800ac48 <xQueueGenericSend+0x1f8>)
 800ac18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac1c:	601a      	str	r2, [r3, #0]
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	f3bf 8f6f 	isb	sy
 800ac26:	e772      	b.n	800ab0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac2a:	f000 fa17 	bl	800b05c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac2e:	f000 fdaf 	bl	800b790 <xTaskResumeAll>
 800ac32:	e76c      	b.n	800ab0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac36:	f000 fa11 	bl	800b05c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac3a:	f000 fda9 	bl	800b790 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac3e:	2300      	movs	r3, #0
		}
	}
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3738      	adds	r7, #56	; 0x38
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	e000ed04 	.word	0xe000ed04

0800ac4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b08e      	sub	sp, #56	; 0x38
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
 800ac58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d10a      	bne.n	800ac7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ac64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac68:	f383 8811 	msr	BASEPRI, r3
 800ac6c:	f3bf 8f6f 	isb	sy
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac76:	bf00      	nop
 800ac78:	e7fe      	b.n	800ac78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d103      	bne.n	800ac88 <xQueueGenericSendFromISR+0x3c>
 800ac80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d101      	bne.n	800ac8c <xQueueGenericSendFromISR+0x40>
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e000      	b.n	800ac8e <xQueueGenericSendFromISR+0x42>
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d10a      	bne.n	800aca8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ac92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac96:	f383 8811 	msr	BASEPRI, r3
 800ac9a:	f3bf 8f6f 	isb	sy
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	623b      	str	r3, [r7, #32]
}
 800aca4:	bf00      	nop
 800aca6:	e7fe      	b.n	800aca6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	2b02      	cmp	r3, #2
 800acac:	d103      	bne.n	800acb6 <xQueueGenericSendFromISR+0x6a>
 800acae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d101      	bne.n	800acba <xQueueGenericSendFromISR+0x6e>
 800acb6:	2301      	movs	r3, #1
 800acb8:	e000      	b.n	800acbc <xQueueGenericSendFromISR+0x70>
 800acba:	2300      	movs	r3, #0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10a      	bne.n	800acd6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800acc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	61fb      	str	r3, [r7, #28]
}
 800acd2:	bf00      	nop
 800acd4:	e7fe      	b.n	800acd4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acd6:	f001 ffeb 	bl	800ccb0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800acda:	f3ef 8211 	mrs	r2, BASEPRI
 800acde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	61ba      	str	r2, [r7, #24]
 800acf0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800acf2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800acf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d302      	bcc.n	800ad08 <xQueueGenericSendFromISR+0xbc>
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	2b02      	cmp	r3, #2
 800ad06:	d12c      	bne.n	800ad62 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ad08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad12:	683a      	ldr	r2, [r7, #0]
 800ad14:	68b9      	ldr	r1, [r7, #8]
 800ad16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad18:	f000 f910 	bl	800af3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ad1c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ad20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad24:	d112      	bne.n	800ad4c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d016      	beq.n	800ad5c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad30:	3324      	adds	r3, #36	; 0x24
 800ad32:	4618      	mov	r0, r3
 800ad34:	f000 ff42 	bl	800bbbc <xTaskRemoveFromEventList>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00e      	beq.n	800ad5c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00b      	beq.n	800ad5c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2201      	movs	r2, #1
 800ad48:	601a      	str	r2, [r3, #0]
 800ad4a:	e007      	b.n	800ad5c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad50:	3301      	adds	r3, #1
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	b25a      	sxtb	r2, r3
 800ad56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ad60:	e001      	b.n	800ad66 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ad62:	2300      	movs	r3, #0
 800ad64:	637b      	str	r3, [r7, #52]	; 0x34
 800ad66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad68:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ad70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3738      	adds	r7, #56	; 0x38
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b08c      	sub	sp, #48	; 0x30
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10a      	bne.n	800adac <xQueueReceive+0x30>
	__asm volatile
 800ad96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	623b      	str	r3, [r7, #32]
}
 800ada8:	bf00      	nop
 800adaa:	e7fe      	b.n	800adaa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d103      	bne.n	800adba <xQueueReceive+0x3e>
 800adb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d101      	bne.n	800adbe <xQueueReceive+0x42>
 800adba:	2301      	movs	r3, #1
 800adbc:	e000      	b.n	800adc0 <xQueueReceive+0x44>
 800adbe:	2300      	movs	r3, #0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10a      	bne.n	800adda <xQueueReceive+0x5e>
	__asm volatile
 800adc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	61fb      	str	r3, [r7, #28]
}
 800add6:	bf00      	nop
 800add8:	e7fe      	b.n	800add8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adda:	f001 f8e9 	bl	800bfb0 <xTaskGetSchedulerState>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d102      	bne.n	800adea <xQueueReceive+0x6e>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d101      	bne.n	800adee <xQueueReceive+0x72>
 800adea:	2301      	movs	r3, #1
 800adec:	e000      	b.n	800adf0 <xQueueReceive+0x74>
 800adee:	2300      	movs	r3, #0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d10a      	bne.n	800ae0a <xQueueReceive+0x8e>
	__asm volatile
 800adf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	61bb      	str	r3, [r7, #24]
}
 800ae06:	bf00      	nop
 800ae08:	e7fe      	b.n	800ae08 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae0a:	f001 fe8f 	bl	800cb2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d01f      	beq.n	800ae5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae1a:	68b9      	ldr	r1, [r7, #8]
 800ae1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae1e:	f000 f8f7 	bl	800b010 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae24:	1e5a      	subs	r2, r3, #1
 800ae26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d00f      	beq.n	800ae52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae34:	3310      	adds	r3, #16
 800ae36:	4618      	mov	r0, r3
 800ae38:	f000 fec0 	bl	800bbbc <xTaskRemoveFromEventList>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d007      	beq.n	800ae52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae42:	4b3d      	ldr	r3, [pc, #244]	; (800af38 <xQueueReceive+0x1bc>)
 800ae44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae48:	601a      	str	r2, [r3, #0]
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae52:	f001 fe9b 	bl	800cb8c <vPortExitCritical>
				return pdPASS;
 800ae56:	2301      	movs	r3, #1
 800ae58:	e069      	b.n	800af2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d103      	bne.n	800ae68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae60:	f001 fe94 	bl	800cb8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae64:	2300      	movs	r3, #0
 800ae66:	e062      	b.n	800af2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d106      	bne.n	800ae7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae6e:	f107 0310 	add.w	r3, r7, #16
 800ae72:	4618      	mov	r0, r3
 800ae74:	f000 ff06 	bl	800bc84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae7c:	f001 fe86 	bl	800cb8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae80:	f000 fc78 	bl	800b774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae84:	f001 fe52 	bl	800cb2c <vPortEnterCritical>
 800ae88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae8e:	b25b      	sxtb	r3, r3
 800ae90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae94:	d103      	bne.n	800ae9e <xQueueReceive+0x122>
 800ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aea4:	b25b      	sxtb	r3, r3
 800aea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeaa:	d103      	bne.n	800aeb4 <xQueueReceive+0x138>
 800aeac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aeb4:	f001 fe6a 	bl	800cb8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aeb8:	1d3a      	adds	r2, r7, #4
 800aeba:	f107 0310 	add.w	r3, r7, #16
 800aebe:	4611      	mov	r1, r2
 800aec0:	4618      	mov	r0, r3
 800aec2:	f000 fef5 	bl	800bcb0 <xTaskCheckForTimeOut>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d123      	bne.n	800af14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aece:	f000 f917 	bl	800b100 <prvIsQueueEmpty>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d017      	beq.n	800af08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeda:	3324      	adds	r3, #36	; 0x24
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	4611      	mov	r1, r2
 800aee0:	4618      	mov	r0, r3
 800aee2:	f000 fe1b 	bl	800bb1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aee8:	f000 f8b8 	bl	800b05c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aeec:	f000 fc50 	bl	800b790 <xTaskResumeAll>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d189      	bne.n	800ae0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aef6:	4b10      	ldr	r3, [pc, #64]	; (800af38 <xQueueReceive+0x1bc>)
 800aef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aefc:	601a      	str	r2, [r3, #0]
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	f3bf 8f6f 	isb	sy
 800af06:	e780      	b.n	800ae0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800af08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af0a:	f000 f8a7 	bl	800b05c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af0e:	f000 fc3f 	bl	800b790 <xTaskResumeAll>
 800af12:	e77a      	b.n	800ae0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800af14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af16:	f000 f8a1 	bl	800b05c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af1a:	f000 fc39 	bl	800b790 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af20:	f000 f8ee 	bl	800b100 <prvIsQueueEmpty>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	f43f af6f 	beq.w	800ae0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3730      	adds	r7, #48	; 0x30
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	e000ed04 	.word	0xe000ed04

0800af3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af48:	2300      	movs	r3, #0
 800af4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af56:	2b00      	cmp	r3, #0
 800af58:	d10d      	bne.n	800af76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d14d      	bne.n	800affe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	4618      	mov	r0, r3
 800af68:	f001 f840 	bl	800bfec <xTaskPriorityDisinherit>
 800af6c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2200      	movs	r2, #0
 800af72:	605a      	str	r2, [r3, #4]
 800af74:	e043      	b.n	800affe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d119      	bne.n	800afb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6898      	ldr	r0, [r3, #8]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af84:	461a      	mov	r2, r3
 800af86:	68b9      	ldr	r1, [r7, #8]
 800af88:	f002 fd8e 	bl	800daa8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	689a      	ldr	r2, [r3, #8]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af94:	441a      	add	r2, r3
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	689a      	ldr	r2, [r3, #8]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d32b      	bcc.n	800affe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	609a      	str	r2, [r3, #8]
 800afae:	e026      	b.n	800affe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	68d8      	ldr	r0, [r3, #12]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb8:	461a      	mov	r2, r3
 800afba:	68b9      	ldr	r1, [r7, #8]
 800afbc:	f002 fd74 	bl	800daa8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	68da      	ldr	r2, [r3, #12]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc8:	425b      	negs	r3, r3
 800afca:	441a      	add	r2, r3
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	68da      	ldr	r2, [r3, #12]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d207      	bcs.n	800afec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	685a      	ldr	r2, [r3, #4]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe4:	425b      	negs	r3, r3
 800afe6:	441a      	add	r2, r3
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d105      	bne.n	800affe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d002      	beq.n	800affe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	3b01      	subs	r3, #1
 800affc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	1c5a      	adds	r2, r3, #1
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b006:	697b      	ldr	r3, [r7, #20]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3718      	adds	r7, #24
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d018      	beq.n	800b054 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68da      	ldr	r2, [r3, #12]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02a:	441a      	add	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	68da      	ldr	r2, [r3, #12]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d303      	bcc.n	800b044 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	68d9      	ldr	r1, [r3, #12]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b04c:	461a      	mov	r2, r3
 800b04e:	6838      	ldr	r0, [r7, #0]
 800b050:	f002 fd2a 	bl	800daa8 <memcpy>
	}
}
 800b054:	bf00      	nop
 800b056:	3708      	adds	r7, #8
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b064:	f001 fd62 	bl	800cb2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b06e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b070:	e011      	b.n	800b096 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b076:	2b00      	cmp	r3, #0
 800b078:	d012      	beq.n	800b0a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	3324      	adds	r3, #36	; 0x24
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 fd9c 	bl	800bbbc <xTaskRemoveFromEventList>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d001      	beq.n	800b08e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b08a:	f000 fe73 	bl	800bd74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b08e:	7bfb      	ldrb	r3, [r7, #15]
 800b090:	3b01      	subs	r3, #1
 800b092:	b2db      	uxtb	r3, r3
 800b094:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	dce9      	bgt.n	800b072 <prvUnlockQueue+0x16>
 800b09e:	e000      	b.n	800b0a2 <prvUnlockQueue+0x46>
					break;
 800b0a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	22ff      	movs	r2, #255	; 0xff
 800b0a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b0aa:	f001 fd6f 	bl	800cb8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b0ae:	f001 fd3d 	bl	800cb2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0ba:	e011      	b.n	800b0e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d012      	beq.n	800b0ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3310      	adds	r3, #16
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f000 fd77 	bl	800bbbc <xTaskRemoveFromEventList>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d001      	beq.n	800b0d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b0d4:	f000 fe4e 	bl	800bd74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b0d8:	7bbb      	ldrb	r3, [r7, #14]
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	dce9      	bgt.n	800b0bc <prvUnlockQueue+0x60>
 800b0e8:	e000      	b.n	800b0ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b0ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	22ff      	movs	r2, #255	; 0xff
 800b0f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b0f4:	f001 fd4a 	bl	800cb8c <vPortExitCritical>
}
 800b0f8:	bf00      	nop
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b108:	f001 fd10 	bl	800cb2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b110:	2b00      	cmp	r3, #0
 800b112:	d102      	bne.n	800b11a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b114:	2301      	movs	r3, #1
 800b116:	60fb      	str	r3, [r7, #12]
 800b118:	e001      	b.n	800b11e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b11a:	2300      	movs	r3, #0
 800b11c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b11e:	f001 fd35 	bl	800cb8c <vPortExitCritical>

	return xReturn;
 800b122:	68fb      	ldr	r3, [r7, #12]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b134:	f001 fcfa 	bl	800cb2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b140:	429a      	cmp	r2, r3
 800b142:	d102      	bne.n	800b14a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b144:	2301      	movs	r3, #1
 800b146:	60fb      	str	r3, [r7, #12]
 800b148:	e001      	b.n	800b14e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b14a:	2300      	movs	r3, #0
 800b14c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b14e:	f001 fd1d 	bl	800cb8c <vPortExitCritical>

	return xReturn;
 800b152:	68fb      	ldr	r3, [r7, #12]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3710      	adds	r7, #16
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b166:	2300      	movs	r3, #0
 800b168:	60fb      	str	r3, [r7, #12]
 800b16a:	e014      	b.n	800b196 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b16c:	4a0e      	ldr	r2, [pc, #56]	; (800b1a8 <vQueueAddToRegistry+0x4c>)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d10b      	bne.n	800b190 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b178:	490b      	ldr	r1, [pc, #44]	; (800b1a8 <vQueueAddToRegistry+0x4c>)
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b182:	4a09      	ldr	r2, [pc, #36]	; (800b1a8 <vQueueAddToRegistry+0x4c>)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	00db      	lsls	r3, r3, #3
 800b188:	4413      	add	r3, r2
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b18e:	e006      	b.n	800b19e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	3301      	adds	r3, #1
 800b194:	60fb      	str	r3, [r7, #12]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2b07      	cmp	r3, #7
 800b19a:	d9e7      	bls.n	800b16c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b19c:	bf00      	nop
 800b19e:	bf00      	nop
 800b1a0:	3714      	adds	r7, #20
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bc80      	pop	{r7}
 800b1a6:	4770      	bx	lr
 800b1a8:	20002658 	.word	0x20002658

0800b1ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b086      	sub	sp, #24
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b1bc:	f001 fcb6 	bl	800cb2c <vPortEnterCritical>
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1c6:	b25b      	sxtb	r3, r3
 800b1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1cc:	d103      	bne.n	800b1d6 <vQueueWaitForMessageRestricted+0x2a>
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1dc:	b25b      	sxtb	r3, r3
 800b1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e2:	d103      	bne.n	800b1ec <vQueueWaitForMessageRestricted+0x40>
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1ec:	f001 fcce 	bl	800cb8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d106      	bne.n	800b206 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	3324      	adds	r3, #36	; 0x24
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	68b9      	ldr	r1, [r7, #8]
 800b200:	4618      	mov	r0, r3
 800b202:	f000 fcaf 	bl	800bb64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b206:	6978      	ldr	r0, [r7, #20]
 800b208:	f7ff ff28 	bl	800b05c <prvUnlockQueue>
	}
 800b20c:	bf00      	nop
 800b20e:	3718      	adds	r7, #24
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b214:	b580      	push	{r7, lr}
 800b216:	b08e      	sub	sp, #56	; 0x38
 800b218:	af04      	add	r7, sp, #16
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	607a      	str	r2, [r7, #4]
 800b220:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b224:	2b00      	cmp	r3, #0
 800b226:	d10a      	bne.n	800b23e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22c:	f383 8811 	msr	BASEPRI, r3
 800b230:	f3bf 8f6f 	isb	sy
 800b234:	f3bf 8f4f 	dsb	sy
 800b238:	623b      	str	r3, [r7, #32]
}
 800b23a:	bf00      	nop
 800b23c:	e7fe      	b.n	800b23c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b240:	2b00      	cmp	r3, #0
 800b242:	d10a      	bne.n	800b25a <xTaskCreateStatic+0x46>
	__asm volatile
 800b244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b248:	f383 8811 	msr	BASEPRI, r3
 800b24c:	f3bf 8f6f 	isb	sy
 800b250:	f3bf 8f4f 	dsb	sy
 800b254:	61fb      	str	r3, [r7, #28]
}
 800b256:	bf00      	nop
 800b258:	e7fe      	b.n	800b258 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b25a:	235c      	movs	r3, #92	; 0x5c
 800b25c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	2b5c      	cmp	r3, #92	; 0x5c
 800b262:	d00a      	beq.n	800b27a <xTaskCreateStatic+0x66>
	__asm volatile
 800b264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b268:	f383 8811 	msr	BASEPRI, r3
 800b26c:	f3bf 8f6f 	isb	sy
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	61bb      	str	r3, [r7, #24]
}
 800b276:	bf00      	nop
 800b278:	e7fe      	b.n	800b278 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d01e      	beq.n	800b2be <xTaskCreateStatic+0xaa>
 800b280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b282:	2b00      	cmp	r3, #0
 800b284:	d01b      	beq.n	800b2be <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b288:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b28e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b292:	2202      	movs	r2, #2
 800b294:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b298:	2300      	movs	r3, #0
 800b29a:	9303      	str	r3, [sp, #12]
 800b29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29e:	9302      	str	r3, [sp, #8]
 800b2a0:	f107 0314 	add.w	r3, r7, #20
 800b2a4:	9301      	str	r3, [sp, #4]
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a8:	9300      	str	r3, [sp, #0]
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	68b9      	ldr	r1, [r7, #8]
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f000 f850 	bl	800b356 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2b8:	f000 f8d4 	bl	800b464 <prvAddNewTaskToReadyList>
 800b2bc:	e001      	b.n	800b2c2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b2c2:	697b      	ldr	r3, [r7, #20]
	}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3728      	adds	r7, #40	; 0x28
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b08c      	sub	sp, #48	; 0x30
 800b2d0:	af04      	add	r7, sp, #16
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	603b      	str	r3, [r7, #0]
 800b2d8:	4613      	mov	r3, r2
 800b2da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2dc:	88fb      	ldrh	r3, [r7, #6]
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f001 fd23 	bl	800cd2c <pvPortMalloc>
 800b2e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d00e      	beq.n	800b30c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b2ee:	205c      	movs	r0, #92	; 0x5c
 800b2f0:	f001 fd1c 	bl	800cd2c <pvPortMalloc>
 800b2f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d003      	beq.n	800b304 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	697a      	ldr	r2, [r7, #20]
 800b300:	631a      	str	r2, [r3, #48]	; 0x30
 800b302:	e005      	b.n	800b310 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b304:	6978      	ldr	r0, [r7, #20]
 800b306:	f001 fdd5 	bl	800ceb4 <vPortFree>
 800b30a:	e001      	b.n	800b310 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b30c:	2300      	movs	r3, #0
 800b30e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d017      	beq.n	800b346 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	2200      	movs	r2, #0
 800b31a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b31e:	88fa      	ldrh	r2, [r7, #6]
 800b320:	2300      	movs	r3, #0
 800b322:	9303      	str	r3, [sp, #12]
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	9302      	str	r3, [sp, #8]
 800b328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32a:	9301      	str	r3, [sp, #4]
 800b32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	68b9      	ldr	r1, [r7, #8]
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f000 f80e 	bl	800b356 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b33a:	69f8      	ldr	r0, [r7, #28]
 800b33c:	f000 f892 	bl	800b464 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b340:	2301      	movs	r3, #1
 800b342:	61bb      	str	r3, [r7, #24]
 800b344:	e002      	b.n	800b34c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b346:	f04f 33ff 	mov.w	r3, #4294967295
 800b34a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b34c:	69bb      	ldr	r3, [r7, #24]
	}
 800b34e:	4618      	mov	r0, r3
 800b350:	3720      	adds	r7, #32
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}

0800b356 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b356:	b580      	push	{r7, lr}
 800b358:	b088      	sub	sp, #32
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	60f8      	str	r0, [r7, #12]
 800b35e:	60b9      	str	r1, [r7, #8]
 800b360:	607a      	str	r2, [r7, #4]
 800b362:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b366:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	461a      	mov	r2, r3
 800b36e:	21a5      	movs	r1, #165	; 0xa5
 800b370:	f002 fbc2 	bl	800daf8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b37e:	3b01      	subs	r3, #1
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	f023 0307 	bic.w	r3, r3, #7
 800b38c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	f003 0307 	and.w	r3, r3, #7
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00a      	beq.n	800b3ae <prvInitialiseNewTask+0x58>
	__asm volatile
 800b398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39c:	f383 8811 	msr	BASEPRI, r3
 800b3a0:	f3bf 8f6f 	isb	sy
 800b3a4:	f3bf 8f4f 	dsb	sy
 800b3a8:	617b      	str	r3, [r7, #20]
}
 800b3aa:	bf00      	nop
 800b3ac:	e7fe      	b.n	800b3ac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	61fb      	str	r3, [r7, #28]
 800b3b2:	e012      	b.n	800b3da <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b3b4:	68ba      	ldr	r2, [r7, #8]
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	4413      	add	r3, r2
 800b3ba:	7819      	ldrb	r1, [r3, #0]
 800b3bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	3334      	adds	r3, #52	; 0x34
 800b3c4:	460a      	mov	r2, r1
 800b3c6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b3c8:	68ba      	ldr	r2, [r7, #8]
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d006      	beq.n	800b3e2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	61fb      	str	r3, [r7, #28]
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	2b0f      	cmp	r3, #15
 800b3de:	d9e9      	bls.n	800b3b4 <prvInitialiseNewTask+0x5e>
 800b3e0:	e000      	b.n	800b3e4 <prvInitialiseNewTask+0x8e>
		{
			break;
 800b3e2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ee:	2b37      	cmp	r3, #55	; 0x37
 800b3f0:	d901      	bls.n	800b3f6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b3f2:	2337      	movs	r3, #55	; 0x37
 800b3f4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3fa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b400:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b404:	2200      	movs	r2, #0
 800b406:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40a:	3304      	adds	r3, #4
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7ff f94e 	bl	800a6ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b414:	3318      	adds	r3, #24
 800b416:	4618      	mov	r0, r3
 800b418:	f7ff f949 	bl	800a6ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b420:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b424:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b42a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b42e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b430:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b434:	2200      	movs	r2, #0
 800b436:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43a:	2200      	movs	r2, #0
 800b43c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	68f9      	ldr	r1, [r7, #12]
 800b444:	69b8      	ldr	r0, [r7, #24]
 800b446:	f001 fa81 	bl	800c94c <pxPortInitialiseStack>
 800b44a:	4602      	mov	r2, r0
 800b44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b452:	2b00      	cmp	r3, #0
 800b454:	d002      	beq.n	800b45c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b45a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b45c:	bf00      	nop
 800b45e:	3720      	adds	r7, #32
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b46c:	f001 fb5e 	bl	800cb2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b470:	4b2d      	ldr	r3, [pc, #180]	; (800b528 <prvAddNewTaskToReadyList+0xc4>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	3301      	adds	r3, #1
 800b476:	4a2c      	ldr	r2, [pc, #176]	; (800b528 <prvAddNewTaskToReadyList+0xc4>)
 800b478:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b47a:	4b2c      	ldr	r3, [pc, #176]	; (800b52c <prvAddNewTaskToReadyList+0xc8>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d109      	bne.n	800b496 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b482:	4a2a      	ldr	r2, [pc, #168]	; (800b52c <prvAddNewTaskToReadyList+0xc8>)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b488:	4b27      	ldr	r3, [pc, #156]	; (800b528 <prvAddNewTaskToReadyList+0xc4>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d110      	bne.n	800b4b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b490:	f000 fc94 	bl	800bdbc <prvInitialiseTaskLists>
 800b494:	e00d      	b.n	800b4b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b496:	4b26      	ldr	r3, [pc, #152]	; (800b530 <prvAddNewTaskToReadyList+0xcc>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d109      	bne.n	800b4b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b49e:	4b23      	ldr	r3, [pc, #140]	; (800b52c <prvAddNewTaskToReadyList+0xc8>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d802      	bhi.n	800b4b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b4ac:	4a1f      	ldr	r2, [pc, #124]	; (800b52c <prvAddNewTaskToReadyList+0xc8>)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b4b2:	4b20      	ldr	r3, [pc, #128]	; (800b534 <prvAddNewTaskToReadyList+0xd0>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	4a1e      	ldr	r2, [pc, #120]	; (800b534 <prvAddNewTaskToReadyList+0xd0>)
 800b4ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b4bc:	4b1d      	ldr	r3, [pc, #116]	; (800b534 <prvAddNewTaskToReadyList+0xd0>)
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4c8:	4b1b      	ldr	r3, [pc, #108]	; (800b538 <prvAddNewTaskToReadyList+0xd4>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d903      	bls.n	800b4d8 <prvAddNewTaskToReadyList+0x74>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d4:	4a18      	ldr	r2, [pc, #96]	; (800b538 <prvAddNewTaskToReadyList+0xd4>)
 800b4d6:	6013      	str	r3, [r2, #0]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4dc:	4613      	mov	r3, r2
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	4413      	add	r3, r2
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	4a15      	ldr	r2, [pc, #84]	; (800b53c <prvAddNewTaskToReadyList+0xd8>)
 800b4e6:	441a      	add	r2, r3
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	3304      	adds	r3, #4
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	4610      	mov	r0, r2
 800b4f0:	f7ff f8e9 	bl	800a6c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b4f4:	f001 fb4a 	bl	800cb8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b4f8:	4b0d      	ldr	r3, [pc, #52]	; (800b530 <prvAddNewTaskToReadyList+0xcc>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d00e      	beq.n	800b51e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b500:	4b0a      	ldr	r3, [pc, #40]	; (800b52c <prvAddNewTaskToReadyList+0xc8>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d207      	bcs.n	800b51e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b50e:	4b0c      	ldr	r3, [pc, #48]	; (800b540 <prvAddNewTaskToReadyList+0xdc>)
 800b510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b514:	601a      	str	r2, [r3, #0]
 800b516:	f3bf 8f4f 	dsb	sy
 800b51a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b51e:	bf00      	nop
 800b520:	3708      	adds	r7, #8
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	20000d44 	.word	0x20000d44
 800b52c:	20000870 	.word	0x20000870
 800b530:	20000d50 	.word	0x20000d50
 800b534:	20000d60 	.word	0x20000d60
 800b538:	20000d4c 	.word	0x20000d4c
 800b53c:	20000874 	.word	0x20000874
 800b540:	e000ed04 	.word	0xe000ed04

0800b544 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b544:	b580      	push	{r7, lr}
 800b546:	b08a      	sub	sp, #40	; 0x28
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b54e:	2300      	movs	r3, #0
 800b550:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d10a      	bne.n	800b56e <vTaskDelayUntil+0x2a>
	__asm volatile
 800b558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55c:	f383 8811 	msr	BASEPRI, r3
 800b560:	f3bf 8f6f 	isb	sy
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	617b      	str	r3, [r7, #20]
}
 800b56a:	bf00      	nop
 800b56c:	e7fe      	b.n	800b56c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d10a      	bne.n	800b58a <vTaskDelayUntil+0x46>
	__asm volatile
 800b574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b578:	f383 8811 	msr	BASEPRI, r3
 800b57c:	f3bf 8f6f 	isb	sy
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	613b      	str	r3, [r7, #16]
}
 800b586:	bf00      	nop
 800b588:	e7fe      	b.n	800b588 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b58a:	4b2a      	ldr	r3, [pc, #168]	; (800b634 <vTaskDelayUntil+0xf0>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00a      	beq.n	800b5a8 <vTaskDelayUntil+0x64>
	__asm volatile
 800b592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b596:	f383 8811 	msr	BASEPRI, r3
 800b59a:	f3bf 8f6f 	isb	sy
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	60fb      	str	r3, [r7, #12]
}
 800b5a4:	bf00      	nop
 800b5a6:	e7fe      	b.n	800b5a6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b5a8:	f000 f8e4 	bl	800b774 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b5ac:	4b22      	ldr	r3, [pc, #136]	; (800b638 <vTaskDelayUntil+0xf4>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	683a      	ldr	r2, [r7, #0]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	6a3a      	ldr	r2, [r7, #32]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d20b      	bcs.n	800b5de <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	69fa      	ldr	r2, [r7, #28]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d211      	bcs.n	800b5f4 <vTaskDelayUntil+0xb0>
 800b5d0:	69fa      	ldr	r2, [r7, #28]
 800b5d2:	6a3b      	ldr	r3, [r7, #32]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d90d      	bls.n	800b5f4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	627b      	str	r3, [r7, #36]	; 0x24
 800b5dc:	e00a      	b.n	800b5f4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	69fa      	ldr	r2, [r7, #28]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d303      	bcc.n	800b5f0 <vTaskDelayUntil+0xac>
 800b5e8:	69fa      	ldr	r2, [r7, #28]
 800b5ea:	6a3b      	ldr	r3, [r7, #32]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d901      	bls.n	800b5f4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	69fa      	ldr	r2, [r7, #28]
 800b5f8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d006      	beq.n	800b60e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b600:	69fa      	ldr	r2, [r7, #28]
 800b602:	6a3b      	ldr	r3, [r7, #32]
 800b604:	1ad3      	subs	r3, r2, r3
 800b606:	2100      	movs	r1, #0
 800b608:	4618      	mov	r0, r3
 800b60a:	f000 fe39 	bl	800c280 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b60e:	f000 f8bf 	bl	800b790 <xTaskResumeAll>
 800b612:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b614:	69bb      	ldr	r3, [r7, #24]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d107      	bne.n	800b62a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b61a:	4b08      	ldr	r3, [pc, #32]	; (800b63c <vTaskDelayUntil+0xf8>)
 800b61c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b620:	601a      	str	r2, [r3, #0]
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b62a:	bf00      	nop
 800b62c:	3728      	adds	r7, #40	; 0x28
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	20000d6c 	.word	0x20000d6c
 800b638:	20000d48 	.word	0x20000d48
 800b63c:	e000ed04 	.word	0xe000ed04

0800b640 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b648:	2300      	movs	r3, #0
 800b64a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d017      	beq.n	800b682 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b652:	4b13      	ldr	r3, [pc, #76]	; (800b6a0 <vTaskDelay+0x60>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d00a      	beq.n	800b670 <vTaskDelay+0x30>
	__asm volatile
 800b65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65e:	f383 8811 	msr	BASEPRI, r3
 800b662:	f3bf 8f6f 	isb	sy
 800b666:	f3bf 8f4f 	dsb	sy
 800b66a:	60bb      	str	r3, [r7, #8]
}
 800b66c:	bf00      	nop
 800b66e:	e7fe      	b.n	800b66e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b670:	f000 f880 	bl	800b774 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b674:	2100      	movs	r1, #0
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 fe02 	bl	800c280 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b67c:	f000 f888 	bl	800b790 <xTaskResumeAll>
 800b680:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d107      	bne.n	800b698 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b688:	4b06      	ldr	r3, [pc, #24]	; (800b6a4 <vTaskDelay+0x64>)
 800b68a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b68e:	601a      	str	r2, [r3, #0]
 800b690:	f3bf 8f4f 	dsb	sy
 800b694:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b698:	bf00      	nop
 800b69a:	3710      	adds	r7, #16
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	20000d6c 	.word	0x20000d6c
 800b6a4:	e000ed04 	.word	0xe000ed04

0800b6a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b08a      	sub	sp, #40	; 0x28
 800b6ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b6b6:	463a      	mov	r2, r7
 800b6b8:	1d39      	adds	r1, r7, #4
 800b6ba:	f107 0308 	add.w	r3, r7, #8
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7fe ffa4 	bl	800a60c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b6c4:	6839      	ldr	r1, [r7, #0]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	68ba      	ldr	r2, [r7, #8]
 800b6ca:	9202      	str	r2, [sp, #8]
 800b6cc:	9301      	str	r3, [sp, #4]
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	9300      	str	r3, [sp, #0]
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	460a      	mov	r2, r1
 800b6d6:	4921      	ldr	r1, [pc, #132]	; (800b75c <vTaskStartScheduler+0xb4>)
 800b6d8:	4821      	ldr	r0, [pc, #132]	; (800b760 <vTaskStartScheduler+0xb8>)
 800b6da:	f7ff fd9b 	bl	800b214 <xTaskCreateStatic>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	4a20      	ldr	r2, [pc, #128]	; (800b764 <vTaskStartScheduler+0xbc>)
 800b6e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b6e4:	4b1f      	ldr	r3, [pc, #124]	; (800b764 <vTaskStartScheduler+0xbc>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d002      	beq.n	800b6f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	617b      	str	r3, [r7, #20]
 800b6f0:	e001      	b.n	800b6f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d102      	bne.n	800b702 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b6fc:	f000 fe14 	bl	800c328 <xTimerCreateTimerTask>
 800b700:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	2b01      	cmp	r3, #1
 800b706:	d116      	bne.n	800b736 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70c:	f383 8811 	msr	BASEPRI, r3
 800b710:	f3bf 8f6f 	isb	sy
 800b714:	f3bf 8f4f 	dsb	sy
 800b718:	613b      	str	r3, [r7, #16]
}
 800b71a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b71c:	4b12      	ldr	r3, [pc, #72]	; (800b768 <vTaskStartScheduler+0xc0>)
 800b71e:	f04f 32ff 	mov.w	r2, #4294967295
 800b722:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b724:	4b11      	ldr	r3, [pc, #68]	; (800b76c <vTaskStartScheduler+0xc4>)
 800b726:	2201      	movs	r2, #1
 800b728:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b72a:	4b11      	ldr	r3, [pc, #68]	; (800b770 <vTaskStartScheduler+0xc8>)
 800b72c:	2200      	movs	r2, #0
 800b72e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b730:	f001 f98a 	bl	800ca48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b734:	e00e      	b.n	800b754 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b73c:	d10a      	bne.n	800b754 <vTaskStartScheduler+0xac>
	__asm volatile
 800b73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	60fb      	str	r3, [r7, #12]
}
 800b750:	bf00      	nop
 800b752:	e7fe      	b.n	800b752 <vTaskStartScheduler+0xaa>
}
 800b754:	bf00      	nop
 800b756:	3718      	adds	r7, #24
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	0800dd1c 	.word	0x0800dd1c
 800b760:	0800bd8d 	.word	0x0800bd8d
 800b764:	20000d68 	.word	0x20000d68
 800b768:	20000d64 	.word	0x20000d64
 800b76c:	20000d50 	.word	0x20000d50
 800b770:	20000d48 	.word	0x20000d48

0800b774 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b774:	b480      	push	{r7}
 800b776:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b778:	4b04      	ldr	r3, [pc, #16]	; (800b78c <vTaskSuspendAll+0x18>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	3301      	adds	r3, #1
 800b77e:	4a03      	ldr	r2, [pc, #12]	; (800b78c <vTaskSuspendAll+0x18>)
 800b780:	6013      	str	r3, [r2, #0]
}
 800b782:	bf00      	nop
 800b784:	46bd      	mov	sp, r7
 800b786:	bc80      	pop	{r7}
 800b788:	4770      	bx	lr
 800b78a:	bf00      	nop
 800b78c:	20000d6c 	.word	0x20000d6c

0800b790 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b796:	2300      	movs	r3, #0
 800b798:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b79a:	2300      	movs	r3, #0
 800b79c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b79e:	4b42      	ldr	r3, [pc, #264]	; (800b8a8 <xTaskResumeAll+0x118>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d10a      	bne.n	800b7bc <xTaskResumeAll+0x2c>
	__asm volatile
 800b7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	603b      	str	r3, [r7, #0]
}
 800b7b8:	bf00      	nop
 800b7ba:	e7fe      	b.n	800b7ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b7bc:	f001 f9b6 	bl	800cb2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b7c0:	4b39      	ldr	r3, [pc, #228]	; (800b8a8 <xTaskResumeAll+0x118>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	4a38      	ldr	r2, [pc, #224]	; (800b8a8 <xTaskResumeAll+0x118>)
 800b7c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7ca:	4b37      	ldr	r3, [pc, #220]	; (800b8a8 <xTaskResumeAll+0x118>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d162      	bne.n	800b898 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b7d2:	4b36      	ldr	r3, [pc, #216]	; (800b8ac <xTaskResumeAll+0x11c>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d05e      	beq.n	800b898 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7da:	e02f      	b.n	800b83c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b7dc:	4b34      	ldr	r3, [pc, #208]	; (800b8b0 <xTaskResumeAll+0x120>)
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	3318      	adds	r3, #24
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fe ffc7 	bl	800a77c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	3304      	adds	r3, #4
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fe ffc2 	bl	800a77c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fc:	4b2d      	ldr	r3, [pc, #180]	; (800b8b4 <xTaskResumeAll+0x124>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	429a      	cmp	r2, r3
 800b802:	d903      	bls.n	800b80c <xTaskResumeAll+0x7c>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b808:	4a2a      	ldr	r2, [pc, #168]	; (800b8b4 <xTaskResumeAll+0x124>)
 800b80a:	6013      	str	r3, [r2, #0]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b810:	4613      	mov	r3, r2
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	4413      	add	r3, r2
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	4a27      	ldr	r2, [pc, #156]	; (800b8b8 <xTaskResumeAll+0x128>)
 800b81a:	441a      	add	r2, r3
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	3304      	adds	r3, #4
 800b820:	4619      	mov	r1, r3
 800b822:	4610      	mov	r0, r2
 800b824:	f7fe ff4f 	bl	800a6c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b82c:	4b23      	ldr	r3, [pc, #140]	; (800b8bc <xTaskResumeAll+0x12c>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b832:	429a      	cmp	r2, r3
 800b834:	d302      	bcc.n	800b83c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b836:	4b22      	ldr	r3, [pc, #136]	; (800b8c0 <xTaskResumeAll+0x130>)
 800b838:	2201      	movs	r2, #1
 800b83a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b83c:	4b1c      	ldr	r3, [pc, #112]	; (800b8b0 <xTaskResumeAll+0x120>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d1cb      	bne.n	800b7dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b84a:	f000 fb8d 	bl	800bf68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b84e:	4b1d      	ldr	r3, [pc, #116]	; (800b8c4 <xTaskResumeAll+0x134>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d010      	beq.n	800b87c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b85a:	f000 f845 	bl	800b8e8 <xTaskIncrementTick>
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d002      	beq.n	800b86a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b864:	4b16      	ldr	r3, [pc, #88]	; (800b8c0 <xTaskResumeAll+0x130>)
 800b866:	2201      	movs	r2, #1
 800b868:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	3b01      	subs	r3, #1
 800b86e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1f1      	bne.n	800b85a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b876:	4b13      	ldr	r3, [pc, #76]	; (800b8c4 <xTaskResumeAll+0x134>)
 800b878:	2200      	movs	r2, #0
 800b87a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b87c:	4b10      	ldr	r3, [pc, #64]	; (800b8c0 <xTaskResumeAll+0x130>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d009      	beq.n	800b898 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b884:	2301      	movs	r3, #1
 800b886:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b888:	4b0f      	ldr	r3, [pc, #60]	; (800b8c8 <xTaskResumeAll+0x138>)
 800b88a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b88e:	601a      	str	r2, [r3, #0]
 800b890:	f3bf 8f4f 	dsb	sy
 800b894:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b898:	f001 f978 	bl	800cb8c <vPortExitCritical>

	return xAlreadyYielded;
 800b89c:	68bb      	ldr	r3, [r7, #8]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	20000d6c 	.word	0x20000d6c
 800b8ac:	20000d44 	.word	0x20000d44
 800b8b0:	20000d04 	.word	0x20000d04
 800b8b4:	20000d4c 	.word	0x20000d4c
 800b8b8:	20000874 	.word	0x20000874
 800b8bc:	20000870 	.word	0x20000870
 800b8c0:	20000d58 	.word	0x20000d58
 800b8c4:	20000d54 	.word	0x20000d54
 800b8c8:	e000ed04 	.word	0xe000ed04

0800b8cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b8d2:	4b04      	ldr	r3, [pc, #16]	; (800b8e4 <xTaskGetTickCount+0x18>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b8d8:	687b      	ldr	r3, [r7, #4]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	370c      	adds	r7, #12
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bc80      	pop	{r7}
 800b8e2:	4770      	bx	lr
 800b8e4:	20000d48 	.word	0x20000d48

0800b8e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b086      	sub	sp, #24
 800b8ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8f2:	4b51      	ldr	r3, [pc, #324]	; (800ba38 <xTaskIncrementTick+0x150>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	f040 808e 	bne.w	800ba18 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b8fc:	4b4f      	ldr	r3, [pc, #316]	; (800ba3c <xTaskIncrementTick+0x154>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	3301      	adds	r3, #1
 800b902:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b904:	4a4d      	ldr	r2, [pc, #308]	; (800ba3c <xTaskIncrementTick+0x154>)
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d120      	bne.n	800b952 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b910:	4b4b      	ldr	r3, [pc, #300]	; (800ba40 <xTaskIncrementTick+0x158>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00a      	beq.n	800b930 <xTaskIncrementTick+0x48>
	__asm volatile
 800b91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91e:	f383 8811 	msr	BASEPRI, r3
 800b922:	f3bf 8f6f 	isb	sy
 800b926:	f3bf 8f4f 	dsb	sy
 800b92a:	603b      	str	r3, [r7, #0]
}
 800b92c:	bf00      	nop
 800b92e:	e7fe      	b.n	800b92e <xTaskIncrementTick+0x46>
 800b930:	4b43      	ldr	r3, [pc, #268]	; (800ba40 <xTaskIncrementTick+0x158>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	60fb      	str	r3, [r7, #12]
 800b936:	4b43      	ldr	r3, [pc, #268]	; (800ba44 <xTaskIncrementTick+0x15c>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4a41      	ldr	r2, [pc, #260]	; (800ba40 <xTaskIncrementTick+0x158>)
 800b93c:	6013      	str	r3, [r2, #0]
 800b93e:	4a41      	ldr	r2, [pc, #260]	; (800ba44 <xTaskIncrementTick+0x15c>)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6013      	str	r3, [r2, #0]
 800b944:	4b40      	ldr	r3, [pc, #256]	; (800ba48 <xTaskIncrementTick+0x160>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	3301      	adds	r3, #1
 800b94a:	4a3f      	ldr	r2, [pc, #252]	; (800ba48 <xTaskIncrementTick+0x160>)
 800b94c:	6013      	str	r3, [r2, #0]
 800b94e:	f000 fb0b 	bl	800bf68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b952:	4b3e      	ldr	r3, [pc, #248]	; (800ba4c <xTaskIncrementTick+0x164>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	693a      	ldr	r2, [r7, #16]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d34e      	bcc.n	800b9fa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b95c:	4b38      	ldr	r3, [pc, #224]	; (800ba40 <xTaskIncrementTick+0x158>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d101      	bne.n	800b96a <xTaskIncrementTick+0x82>
 800b966:	2301      	movs	r3, #1
 800b968:	e000      	b.n	800b96c <xTaskIncrementTick+0x84>
 800b96a:	2300      	movs	r3, #0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d004      	beq.n	800b97a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b970:	4b36      	ldr	r3, [pc, #216]	; (800ba4c <xTaskIncrementTick+0x164>)
 800b972:	f04f 32ff 	mov.w	r2, #4294967295
 800b976:	601a      	str	r2, [r3, #0]
					break;
 800b978:	e03f      	b.n	800b9fa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b97a:	4b31      	ldr	r3, [pc, #196]	; (800ba40 <xTaskIncrementTick+0x158>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	68db      	ldr	r3, [r3, #12]
 800b982:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b98a:	693a      	ldr	r2, [r7, #16]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d203      	bcs.n	800b99a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b992:	4a2e      	ldr	r2, [pc, #184]	; (800ba4c <xTaskIncrementTick+0x164>)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6013      	str	r3, [r2, #0]
						break;
 800b998:	e02f      	b.n	800b9fa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	3304      	adds	r3, #4
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fe feec 	bl	800a77c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d004      	beq.n	800b9b6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	3318      	adds	r3, #24
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7fe fee3 	bl	800a77c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ba:	4b25      	ldr	r3, [pc, #148]	; (800ba50 <xTaskIncrementTick+0x168>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d903      	bls.n	800b9ca <xTaskIncrementTick+0xe2>
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c6:	4a22      	ldr	r2, [pc, #136]	; (800ba50 <xTaskIncrementTick+0x168>)
 800b9c8:	6013      	str	r3, [r2, #0]
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	4413      	add	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4a1f      	ldr	r2, [pc, #124]	; (800ba54 <xTaskIncrementTick+0x16c>)
 800b9d8:	441a      	add	r2, r3
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	3304      	adds	r3, #4
 800b9de:	4619      	mov	r1, r3
 800b9e0:	4610      	mov	r0, r2
 800b9e2:	f7fe fe70 	bl	800a6c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ea:	4b1b      	ldr	r3, [pc, #108]	; (800ba58 <xTaskIncrementTick+0x170>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d3b3      	bcc.n	800b95c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9f8:	e7b0      	b.n	800b95c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b9fa:	4b17      	ldr	r3, [pc, #92]	; (800ba58 <xTaskIncrementTick+0x170>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba00:	4914      	ldr	r1, [pc, #80]	; (800ba54 <xTaskIncrementTick+0x16c>)
 800ba02:	4613      	mov	r3, r2
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	4413      	add	r3, r2
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	440b      	add	r3, r1
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d907      	bls.n	800ba22 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ba12:	2301      	movs	r3, #1
 800ba14:	617b      	str	r3, [r7, #20]
 800ba16:	e004      	b.n	800ba22 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ba18:	4b10      	ldr	r3, [pc, #64]	; (800ba5c <xTaskIncrementTick+0x174>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	4a0f      	ldr	r2, [pc, #60]	; (800ba5c <xTaskIncrementTick+0x174>)
 800ba20:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ba22:	4b0f      	ldr	r3, [pc, #60]	; (800ba60 <xTaskIncrementTick+0x178>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d001      	beq.n	800ba2e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ba2e:	697b      	ldr	r3, [r7, #20]
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3718      	adds	r7, #24
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	20000d6c 	.word	0x20000d6c
 800ba3c:	20000d48 	.word	0x20000d48
 800ba40:	20000cfc 	.word	0x20000cfc
 800ba44:	20000d00 	.word	0x20000d00
 800ba48:	20000d5c 	.word	0x20000d5c
 800ba4c:	20000d64 	.word	0x20000d64
 800ba50:	20000d4c 	.word	0x20000d4c
 800ba54:	20000874 	.word	0x20000874
 800ba58:	20000870 	.word	0x20000870
 800ba5c:	20000d54 	.word	0x20000d54
 800ba60:	20000d58 	.word	0x20000d58

0800ba64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ba64:	b480      	push	{r7}
 800ba66:	b085      	sub	sp, #20
 800ba68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba6a:	4b27      	ldr	r3, [pc, #156]	; (800bb08 <vTaskSwitchContext+0xa4>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d003      	beq.n	800ba7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba72:	4b26      	ldr	r3, [pc, #152]	; (800bb0c <vTaskSwitchContext+0xa8>)
 800ba74:	2201      	movs	r2, #1
 800ba76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba78:	e041      	b.n	800bafe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ba7a:	4b24      	ldr	r3, [pc, #144]	; (800bb0c <vTaskSwitchContext+0xa8>)
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ba80:	4b23      	ldr	r3, [pc, #140]	; (800bb10 <vTaskSwitchContext+0xac>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	60fb      	str	r3, [r7, #12]
 800ba86:	e010      	b.n	800baaa <vTaskSwitchContext+0x46>
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d10a      	bne.n	800baa4 <vTaskSwitchContext+0x40>
	__asm volatile
 800ba8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba92:	f383 8811 	msr	BASEPRI, r3
 800ba96:	f3bf 8f6f 	isb	sy
 800ba9a:	f3bf 8f4f 	dsb	sy
 800ba9e:	607b      	str	r3, [r7, #4]
}
 800baa0:	bf00      	nop
 800baa2:	e7fe      	b.n	800baa2 <vTaskSwitchContext+0x3e>
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	3b01      	subs	r3, #1
 800baa8:	60fb      	str	r3, [r7, #12]
 800baaa:	491a      	ldr	r1, [pc, #104]	; (800bb14 <vTaskSwitchContext+0xb0>)
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	4613      	mov	r3, r2
 800bab0:	009b      	lsls	r3, r3, #2
 800bab2:	4413      	add	r3, r2
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	440b      	add	r3, r1
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d0e4      	beq.n	800ba88 <vTaskSwitchContext+0x24>
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	4613      	mov	r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	4413      	add	r3, r2
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	4a12      	ldr	r2, [pc, #72]	; (800bb14 <vTaskSwitchContext+0xb0>)
 800baca:	4413      	add	r3, r2
 800bacc:	60bb      	str	r3, [r7, #8]
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	685a      	ldr	r2, [r3, #4]
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	605a      	str	r2, [r3, #4]
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	685a      	ldr	r2, [r3, #4]
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	3308      	adds	r3, #8
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d104      	bne.n	800baee <vTaskSwitchContext+0x8a>
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	685a      	ldr	r2, [r3, #4]
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	605a      	str	r2, [r3, #4]
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	4a08      	ldr	r2, [pc, #32]	; (800bb18 <vTaskSwitchContext+0xb4>)
 800baf6:	6013      	str	r3, [r2, #0]
 800baf8:	4a05      	ldr	r2, [pc, #20]	; (800bb10 <vTaskSwitchContext+0xac>)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	6013      	str	r3, [r2, #0]
}
 800bafe:	bf00      	nop
 800bb00:	3714      	adds	r7, #20
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bc80      	pop	{r7}
 800bb06:	4770      	bx	lr
 800bb08:	20000d6c 	.word	0x20000d6c
 800bb0c:	20000d58 	.word	0x20000d58
 800bb10:	20000d4c 	.word	0x20000d4c
 800bb14:	20000874 	.word	0x20000874
 800bb18:	20000870 	.word	0x20000870

0800bb1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d10a      	bne.n	800bb42 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bb2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb30:	f383 8811 	msr	BASEPRI, r3
 800bb34:	f3bf 8f6f 	isb	sy
 800bb38:	f3bf 8f4f 	dsb	sy
 800bb3c:	60fb      	str	r3, [r7, #12]
}
 800bb3e:	bf00      	nop
 800bb40:	e7fe      	b.n	800bb40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb42:	4b07      	ldr	r3, [pc, #28]	; (800bb60 <vTaskPlaceOnEventList+0x44>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	3318      	adds	r3, #24
 800bb48:	4619      	mov	r1, r3
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f7fe fdde 	bl	800a70c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb50:	2101      	movs	r1, #1
 800bb52:	6838      	ldr	r0, [r7, #0]
 800bb54:	f000 fb94 	bl	800c280 <prvAddCurrentTaskToDelayedList>
}
 800bb58:	bf00      	nop
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	20000870 	.word	0x20000870

0800bb64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d10a      	bne.n	800bb8c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	617b      	str	r3, [r7, #20]
}
 800bb88:	bf00      	nop
 800bb8a:	e7fe      	b.n	800bb8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb8c:	4b0a      	ldr	r3, [pc, #40]	; (800bbb8 <vTaskPlaceOnEventListRestricted+0x54>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	3318      	adds	r3, #24
 800bb92:	4619      	mov	r1, r3
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f7fe fd96 	bl	800a6c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bba0:	f04f 33ff 	mov.w	r3, #4294967295
 800bba4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bba6:	6879      	ldr	r1, [r7, #4]
 800bba8:	68b8      	ldr	r0, [r7, #8]
 800bbaa:	f000 fb69 	bl	800c280 <prvAddCurrentTaskToDelayedList>
	}
 800bbae:	bf00      	nop
 800bbb0:	3718      	adds	r7, #24
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	20000870 	.word	0x20000870

0800bbbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b086      	sub	sp, #24
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d10a      	bne.n	800bbe8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	60fb      	str	r3, [r7, #12]
}
 800bbe4:	bf00      	nop
 800bbe6:	e7fe      	b.n	800bbe6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	3318      	adds	r3, #24
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7fe fdc5 	bl	800a77c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbf2:	4b1e      	ldr	r3, [pc, #120]	; (800bc6c <xTaskRemoveFromEventList+0xb0>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d11d      	bne.n	800bc36 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	3304      	adds	r3, #4
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7fe fdbc 	bl	800a77c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc08:	4b19      	ldr	r3, [pc, #100]	; (800bc70 <xTaskRemoveFromEventList+0xb4>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d903      	bls.n	800bc18 <xTaskRemoveFromEventList+0x5c>
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc14:	4a16      	ldr	r2, [pc, #88]	; (800bc70 <xTaskRemoveFromEventList+0xb4>)
 800bc16:	6013      	str	r3, [r2, #0]
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	4413      	add	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4a13      	ldr	r2, [pc, #76]	; (800bc74 <xTaskRemoveFromEventList+0xb8>)
 800bc26:	441a      	add	r2, r3
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	4610      	mov	r0, r2
 800bc30:	f7fe fd49 	bl	800a6c6 <vListInsertEnd>
 800bc34:	e005      	b.n	800bc42 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	3318      	adds	r3, #24
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	480e      	ldr	r0, [pc, #56]	; (800bc78 <xTaskRemoveFromEventList+0xbc>)
 800bc3e:	f7fe fd42 	bl	800a6c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc46:	4b0d      	ldr	r3, [pc, #52]	; (800bc7c <xTaskRemoveFromEventList+0xc0>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d905      	bls.n	800bc5c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bc50:	2301      	movs	r3, #1
 800bc52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bc54:	4b0a      	ldr	r3, [pc, #40]	; (800bc80 <xTaskRemoveFromEventList+0xc4>)
 800bc56:	2201      	movs	r2, #1
 800bc58:	601a      	str	r2, [r3, #0]
 800bc5a:	e001      	b.n	800bc60 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800bc60:	697b      	ldr	r3, [r7, #20]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3718      	adds	r7, #24
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	20000d6c 	.word	0x20000d6c
 800bc70:	20000d4c 	.word	0x20000d4c
 800bc74:	20000874 	.word	0x20000874
 800bc78:	20000d04 	.word	0x20000d04
 800bc7c:	20000870 	.word	0x20000870
 800bc80:	20000d58 	.word	0x20000d58

0800bc84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc8c:	4b06      	ldr	r3, [pc, #24]	; (800bca8 <vTaskInternalSetTimeOutState+0x24>)
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc94:	4b05      	ldr	r3, [pc, #20]	; (800bcac <vTaskInternalSetTimeOutState+0x28>)
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	605a      	str	r2, [r3, #4]
}
 800bc9c:	bf00      	nop
 800bc9e:	370c      	adds	r7, #12
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bc80      	pop	{r7}
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	20000d5c 	.word	0x20000d5c
 800bcac:	20000d48 	.word	0x20000d48

0800bcb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b088      	sub	sp, #32
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10a      	bne.n	800bcd6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc4:	f383 8811 	msr	BASEPRI, r3
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	613b      	str	r3, [r7, #16]
}
 800bcd2:	bf00      	nop
 800bcd4:	e7fe      	b.n	800bcd4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10a      	bne.n	800bcf2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bcdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce0:	f383 8811 	msr	BASEPRI, r3
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	60fb      	str	r3, [r7, #12]
}
 800bcee:	bf00      	nop
 800bcf0:	e7fe      	b.n	800bcf0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bcf2:	f000 ff1b 	bl	800cb2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bcf6:	4b1d      	ldr	r3, [pc, #116]	; (800bd6c <xTaskCheckForTimeOut+0xbc>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	69ba      	ldr	r2, [r7, #24]
 800bd02:	1ad3      	subs	r3, r2, r3
 800bd04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd0e:	d102      	bne.n	800bd16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bd10:	2300      	movs	r3, #0
 800bd12:	61fb      	str	r3, [r7, #28]
 800bd14:	e023      	b.n	800bd5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	4b15      	ldr	r3, [pc, #84]	; (800bd70 <xTaskCheckForTimeOut+0xc0>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d007      	beq.n	800bd32 <xTaskCheckForTimeOut+0x82>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	69ba      	ldr	r2, [r7, #24]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d302      	bcc.n	800bd32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	61fb      	str	r3, [r7, #28]
 800bd30:	e015      	b.n	800bd5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	697a      	ldr	r2, [r7, #20]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d20b      	bcs.n	800bd54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	1ad2      	subs	r2, r2, r3
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f7ff ff9b 	bl	800bc84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	61fb      	str	r3, [r7, #28]
 800bd52:	e004      	b.n	800bd5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	2200      	movs	r2, #0
 800bd58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd5e:	f000 ff15 	bl	800cb8c <vPortExitCritical>

	return xReturn;
 800bd62:	69fb      	ldr	r3, [r7, #28]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3720      	adds	r7, #32
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	20000d48 	.word	0x20000d48
 800bd70:	20000d5c 	.word	0x20000d5c

0800bd74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd74:	b480      	push	{r7}
 800bd76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd78:	4b03      	ldr	r3, [pc, #12]	; (800bd88 <vTaskMissedYield+0x14>)
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	601a      	str	r2, [r3, #0]
}
 800bd7e:	bf00      	nop
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bc80      	pop	{r7}
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop
 800bd88:	20000d58 	.word	0x20000d58

0800bd8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd94:	f000 f852 	bl	800be3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd98:	4b06      	ldr	r3, [pc, #24]	; (800bdb4 <prvIdleTask+0x28>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d9f9      	bls.n	800bd94 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bda0:	4b05      	ldr	r3, [pc, #20]	; (800bdb8 <prvIdleTask+0x2c>)
 800bda2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bda6:	601a      	str	r2, [r3, #0]
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bdb0:	e7f0      	b.n	800bd94 <prvIdleTask+0x8>
 800bdb2:	bf00      	nop
 800bdb4:	20000874 	.word	0x20000874
 800bdb8:	e000ed04 	.word	0xe000ed04

0800bdbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	607b      	str	r3, [r7, #4]
 800bdc6:	e00c      	b.n	800bde2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	4613      	mov	r3, r2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4413      	add	r3, r2
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	4a12      	ldr	r2, [pc, #72]	; (800be1c <prvInitialiseTaskLists+0x60>)
 800bdd4:	4413      	add	r3, r2
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7fe fc4a 	bl	800a670 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	3301      	adds	r3, #1
 800bde0:	607b      	str	r3, [r7, #4]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2b37      	cmp	r3, #55	; 0x37
 800bde6:	d9ef      	bls.n	800bdc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bde8:	480d      	ldr	r0, [pc, #52]	; (800be20 <prvInitialiseTaskLists+0x64>)
 800bdea:	f7fe fc41 	bl	800a670 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bdee:	480d      	ldr	r0, [pc, #52]	; (800be24 <prvInitialiseTaskLists+0x68>)
 800bdf0:	f7fe fc3e 	bl	800a670 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bdf4:	480c      	ldr	r0, [pc, #48]	; (800be28 <prvInitialiseTaskLists+0x6c>)
 800bdf6:	f7fe fc3b 	bl	800a670 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bdfa:	480c      	ldr	r0, [pc, #48]	; (800be2c <prvInitialiseTaskLists+0x70>)
 800bdfc:	f7fe fc38 	bl	800a670 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be00:	480b      	ldr	r0, [pc, #44]	; (800be30 <prvInitialiseTaskLists+0x74>)
 800be02:	f7fe fc35 	bl	800a670 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800be06:	4b0b      	ldr	r3, [pc, #44]	; (800be34 <prvInitialiseTaskLists+0x78>)
 800be08:	4a05      	ldr	r2, [pc, #20]	; (800be20 <prvInitialiseTaskLists+0x64>)
 800be0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be0c:	4b0a      	ldr	r3, [pc, #40]	; (800be38 <prvInitialiseTaskLists+0x7c>)
 800be0e:	4a05      	ldr	r2, [pc, #20]	; (800be24 <prvInitialiseTaskLists+0x68>)
 800be10:	601a      	str	r2, [r3, #0]
}
 800be12:	bf00      	nop
 800be14:	3708      	adds	r7, #8
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	20000874 	.word	0x20000874
 800be20:	20000cd4 	.word	0x20000cd4
 800be24:	20000ce8 	.word	0x20000ce8
 800be28:	20000d04 	.word	0x20000d04
 800be2c:	20000d18 	.word	0x20000d18
 800be30:	20000d30 	.word	0x20000d30
 800be34:	20000cfc 	.word	0x20000cfc
 800be38:	20000d00 	.word	0x20000d00

0800be3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be42:	e019      	b.n	800be78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be44:	f000 fe72 	bl	800cb2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800be48:	4b10      	ldr	r3, [pc, #64]	; (800be8c <prvCheckTasksWaitingTermination+0x50>)
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	68db      	ldr	r3, [r3, #12]
 800be4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	3304      	adds	r3, #4
 800be54:	4618      	mov	r0, r3
 800be56:	f7fe fc91 	bl	800a77c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be5a:	4b0d      	ldr	r3, [pc, #52]	; (800be90 <prvCheckTasksWaitingTermination+0x54>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	3b01      	subs	r3, #1
 800be60:	4a0b      	ldr	r2, [pc, #44]	; (800be90 <prvCheckTasksWaitingTermination+0x54>)
 800be62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be64:	4b0b      	ldr	r3, [pc, #44]	; (800be94 <prvCheckTasksWaitingTermination+0x58>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	3b01      	subs	r3, #1
 800be6a:	4a0a      	ldr	r2, [pc, #40]	; (800be94 <prvCheckTasksWaitingTermination+0x58>)
 800be6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be6e:	f000 fe8d 	bl	800cb8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 f848 	bl	800bf08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be78:	4b06      	ldr	r3, [pc, #24]	; (800be94 <prvCheckTasksWaitingTermination+0x58>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1e1      	bne.n	800be44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be80:	bf00      	nop
 800be82:	bf00      	nop
 800be84:	3708      	adds	r7, #8
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	20000d18 	.word	0x20000d18
 800be90:	20000d44 	.word	0x20000d44
 800be94:	20000d2c 	.word	0x20000d2c

0800be98 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800bea0:	2300      	movs	r3, #0
 800bea2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800bea4:	e005      	b.n	800beb2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	3301      	adds	r3, #1
 800beaa:	607b      	str	r3, [r7, #4]
			ulCount++;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	3301      	adds	r3, #1
 800beb0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	2ba5      	cmp	r3, #165	; 0xa5
 800beb8:	d0f5      	beq.n	800bea6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	089b      	lsrs	r3, r3, #2
 800bebe:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	b29b      	uxth	r3, r3
	}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3714      	adds	r7, #20
 800bec8:	46bd      	mov	sp, r7
 800beca:	bc80      	pop	{r7}
 800becc:	4770      	bx	lr
	...

0800bed0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b086      	sub	sp, #24
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d102      	bne.n	800bee4 <uxTaskGetStackHighWaterMark+0x14>
 800bede:	4b09      	ldr	r3, [pc, #36]	; (800bf04 <uxTaskGetStackHighWaterMark+0x34>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	e000      	b.n	800bee6 <uxTaskGetStackHighWaterMark+0x16>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beec:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800beee:	6938      	ldr	r0, [r7, #16]
 800bef0:	f7ff ffd2 	bl	800be98 <prvTaskCheckFreeStackSpace>
 800bef4:	4603      	mov	r3, r0
 800bef6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800bef8:	68fb      	ldr	r3, [r7, #12]
	}
 800befa:	4618      	mov	r0, r3
 800befc:	3718      	adds	r7, #24
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	20000870 	.word	0x20000870

0800bf08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d108      	bne.n	800bf2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f000 ffc8 	bl	800ceb4 <vPortFree>
				vPortFree( pxTCB );
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 ffc5 	bl	800ceb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bf2a:	e018      	b.n	800bf5e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d103      	bne.n	800bf3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 ffbc 	bl	800ceb4 <vPortFree>
	}
 800bf3c:	e00f      	b.n	800bf5e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	d00a      	beq.n	800bf5e <prvDeleteTCB+0x56>
	__asm volatile
 800bf48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4c:	f383 8811 	msr	BASEPRI, r3
 800bf50:	f3bf 8f6f 	isb	sy
 800bf54:	f3bf 8f4f 	dsb	sy
 800bf58:	60fb      	str	r3, [r7, #12]
}
 800bf5a:	bf00      	nop
 800bf5c:	e7fe      	b.n	800bf5c <prvDeleteTCB+0x54>
	}
 800bf5e:	bf00      	nop
 800bf60:	3710      	adds	r7, #16
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
	...

0800bf68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf6e:	4b0e      	ldr	r3, [pc, #56]	; (800bfa8 <prvResetNextTaskUnblockTime+0x40>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d101      	bne.n	800bf7c <prvResetNextTaskUnblockTime+0x14>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e000      	b.n	800bf7e <prvResetNextTaskUnblockTime+0x16>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d004      	beq.n	800bf8c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf82:	4b0a      	ldr	r3, [pc, #40]	; (800bfac <prvResetNextTaskUnblockTime+0x44>)
 800bf84:	f04f 32ff 	mov.w	r2, #4294967295
 800bf88:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bf8a:	e008      	b.n	800bf9e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bf8c:	4b06      	ldr	r3, [pc, #24]	; (800bfa8 <prvResetNextTaskUnblockTime+0x40>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	4a04      	ldr	r2, [pc, #16]	; (800bfac <prvResetNextTaskUnblockTime+0x44>)
 800bf9c:	6013      	str	r3, [r2, #0]
}
 800bf9e:	bf00      	nop
 800bfa0:	370c      	adds	r7, #12
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bc80      	pop	{r7}
 800bfa6:	4770      	bx	lr
 800bfa8:	20000cfc 	.word	0x20000cfc
 800bfac:	20000d64 	.word	0x20000d64

0800bfb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bfb6:	4b0b      	ldr	r3, [pc, #44]	; (800bfe4 <xTaskGetSchedulerState+0x34>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d102      	bne.n	800bfc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	607b      	str	r3, [r7, #4]
 800bfc2:	e008      	b.n	800bfd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfc4:	4b08      	ldr	r3, [pc, #32]	; (800bfe8 <xTaskGetSchedulerState+0x38>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d102      	bne.n	800bfd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bfcc:	2302      	movs	r3, #2
 800bfce:	607b      	str	r3, [r7, #4]
 800bfd0:	e001      	b.n	800bfd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bfd6:	687b      	ldr	r3, [r7, #4]
	}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bc80      	pop	{r7}
 800bfe0:	4770      	bx	lr
 800bfe2:	bf00      	nop
 800bfe4:	20000d50 	.word	0x20000d50
 800bfe8:	20000d6c 	.word	0x20000d6c

0800bfec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bff8:	2300      	movs	r3, #0
 800bffa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d056      	beq.n	800c0b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c002:	4b2e      	ldr	r3, [pc, #184]	; (800c0bc <xTaskPriorityDisinherit+0xd0>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	693a      	ldr	r2, [r7, #16]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d00a      	beq.n	800c022 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c010:	f383 8811 	msr	BASEPRI, r3
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	60fb      	str	r3, [r7, #12]
}
 800c01e:	bf00      	nop
 800c020:	e7fe      	b.n	800c020 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c026:	2b00      	cmp	r3, #0
 800c028:	d10a      	bne.n	800c040 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02e:	f383 8811 	msr	BASEPRI, r3
 800c032:	f3bf 8f6f 	isb	sy
 800c036:	f3bf 8f4f 	dsb	sy
 800c03a:	60bb      	str	r3, [r7, #8]
}
 800c03c:	bf00      	nop
 800c03e:	e7fe      	b.n	800c03e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c044:	1e5a      	subs	r2, r3, #1
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c052:	429a      	cmp	r2, r3
 800c054:	d02c      	beq.n	800c0b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d128      	bne.n	800c0b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	3304      	adds	r3, #4
 800c062:	4618      	mov	r0, r3
 800c064:	f7fe fb8a 	bl	800a77c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c074:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c080:	4b0f      	ldr	r3, [pc, #60]	; (800c0c0 <xTaskPriorityDisinherit+0xd4>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	429a      	cmp	r2, r3
 800c086:	d903      	bls.n	800c090 <xTaskPriorityDisinherit+0xa4>
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08c:	4a0c      	ldr	r2, [pc, #48]	; (800c0c0 <xTaskPriorityDisinherit+0xd4>)
 800c08e:	6013      	str	r3, [r2, #0]
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c094:	4613      	mov	r3, r2
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	4413      	add	r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	4a09      	ldr	r2, [pc, #36]	; (800c0c4 <xTaskPriorityDisinherit+0xd8>)
 800c09e:	441a      	add	r2, r3
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	3304      	adds	r3, #4
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	4610      	mov	r0, r2
 800c0a8:	f7fe fb0d 	bl	800a6c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c0b0:	697b      	ldr	r3, [r7, #20]
	}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3718      	adds	r7, #24
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	20000870 	.word	0x20000870
 800c0c0:	20000d4c 	.word	0x20000d4c
 800c0c4:	20000874 	.word	0x20000874

0800c0c8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c0d2:	f000 fd2b 	bl	800cb2c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c0d6:	4b1e      	ldr	r3, [pc, #120]	; (800c150 <ulTaskNotifyTake+0x88>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d113      	bne.n	800c108 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c0e0:	4b1b      	ldr	r3, [pc, #108]	; (800c150 <ulTaskNotifyTake+0x88>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00b      	beq.n	800c108 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	6838      	ldr	r0, [r7, #0]
 800c0f4:	f000 f8c4 	bl	800c280 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c0f8:	4b16      	ldr	r3, [pc, #88]	; (800c154 <ulTaskNotifyTake+0x8c>)
 800c0fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0fe:	601a      	str	r2, [r3, #0]
 800c100:	f3bf 8f4f 	dsb	sy
 800c104:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c108:	f000 fd40 	bl	800cb8c <vPortExitCritical>

		taskENTER_CRITICAL();
 800c10c:	f000 fd0e 	bl	800cb2c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c110:	4b0f      	ldr	r3, [pc, #60]	; (800c150 <ulTaskNotifyTake+0x88>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c116:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00c      	beq.n	800c138 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d004      	beq.n	800c12e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c124:	4b0a      	ldr	r3, [pc, #40]	; (800c150 <ulTaskNotifyTake+0x88>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2200      	movs	r2, #0
 800c12a:	655a      	str	r2, [r3, #84]	; 0x54
 800c12c:	e004      	b.n	800c138 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c12e:	4b08      	ldr	r3, [pc, #32]	; (800c150 <ulTaskNotifyTake+0x88>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	68fa      	ldr	r2, [r7, #12]
 800c134:	3a01      	subs	r2, #1
 800c136:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c138:	4b05      	ldr	r3, [pc, #20]	; (800c150 <ulTaskNotifyTake+0x88>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2200      	movs	r2, #0
 800c13e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800c142:	f000 fd23 	bl	800cb8c <vPortExitCritical>

		return ulReturn;
 800c146:	68fb      	ldr	r3, [r7, #12]
	}
 800c148:	4618      	mov	r0, r3
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	20000870 	.word	0x20000870
 800c154:	e000ed04 	.word	0xe000ed04

0800c158 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b08a      	sub	sp, #40	; 0x28
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d10a      	bne.n	800c17e <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800c168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16c:	f383 8811 	msr	BASEPRI, r3
 800c170:	f3bf 8f6f 	isb	sy
 800c174:	f3bf 8f4f 	dsb	sy
 800c178:	61bb      	str	r3, [r7, #24]
}
 800c17a:	bf00      	nop
 800c17c:	e7fe      	b.n	800c17c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c17e:	f000 fd97 	bl	800ccb0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800c186:	f3ef 8211 	mrs	r2, BASEPRI
 800c18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18e:	f383 8811 	msr	BASEPRI, r3
 800c192:	f3bf 8f6f 	isb	sy
 800c196:	f3bf 8f4f 	dsb	sy
 800c19a:	617a      	str	r2, [r7, #20]
 800c19c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c19e:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1a0:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c1a8:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ac:	2202      	movs	r2, #2
 800c1ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1b6:	1c5a      	adds	r2, r3, #1
 800c1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ba:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c1bc:	7ffb      	ldrb	r3, [r7, #31]
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d147      	bne.n	800c252 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d00a      	beq.n	800c1e0 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 800c1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ce:	f383 8811 	msr	BASEPRI, r3
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	60fb      	str	r3, [r7, #12]
}
 800c1dc:	bf00      	nop
 800c1de:	e7fe      	b.n	800c1de <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1e0:	4b21      	ldr	r3, [pc, #132]	; (800c268 <vTaskNotifyGiveFromISR+0x110>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d11d      	bne.n	800c224 <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ea:	3304      	adds	r3, #4
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7fe fac5 	bl	800a77c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f6:	4b1d      	ldr	r3, [pc, #116]	; (800c26c <vTaskNotifyGiveFromISR+0x114>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d903      	bls.n	800c206 <vTaskNotifyGiveFromISR+0xae>
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c202:	4a1a      	ldr	r2, [pc, #104]	; (800c26c <vTaskNotifyGiveFromISR+0x114>)
 800c204:	6013      	str	r3, [r2, #0]
 800c206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c20a:	4613      	mov	r3, r2
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	4413      	add	r3, r2
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	4a17      	ldr	r2, [pc, #92]	; (800c270 <vTaskNotifyGiveFromISR+0x118>)
 800c214:	441a      	add	r2, r3
 800c216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c218:	3304      	adds	r3, #4
 800c21a:	4619      	mov	r1, r3
 800c21c:	4610      	mov	r0, r2
 800c21e:	f7fe fa52 	bl	800a6c6 <vListInsertEnd>
 800c222:	e005      	b.n	800c230 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c226:	3318      	adds	r3, #24
 800c228:	4619      	mov	r1, r3
 800c22a:	4812      	ldr	r0, [pc, #72]	; (800c274 <vTaskNotifyGiveFromISR+0x11c>)
 800c22c:	f7fe fa4b 	bl	800a6c6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c234:	4b10      	ldr	r3, [pc, #64]	; (800c278 <vTaskNotifyGiveFromISR+0x120>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d909      	bls.n	800c252 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d003      	beq.n	800c24c <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	2201      	movs	r2, #1
 800c248:	601a      	str	r2, [r3, #0]
 800c24a:	e002      	b.n	800c252 <vTaskNotifyGiveFromISR+0xfa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800c24c:	4b0b      	ldr	r3, [pc, #44]	; (800c27c <vTaskNotifyGiveFromISR+0x124>)
 800c24e:	2201      	movs	r2, #1
 800c250:	601a      	str	r2, [r3, #0]
 800c252:	6a3b      	ldr	r3, [r7, #32]
 800c254:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	f383 8811 	msr	BASEPRI, r3
}
 800c25c:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800c25e:	bf00      	nop
 800c260:	3728      	adds	r7, #40	; 0x28
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	20000d6c 	.word	0x20000d6c
 800c26c:	20000d4c 	.word	0x20000d4c
 800c270:	20000874 	.word	0x20000874
 800c274:	20000d04 	.word	0x20000d04
 800c278:	20000870 	.word	0x20000870
 800c27c:	20000d58 	.word	0x20000d58

0800c280 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c28a:	4b21      	ldr	r3, [pc, #132]	; (800c310 <prvAddCurrentTaskToDelayedList+0x90>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c290:	4b20      	ldr	r3, [pc, #128]	; (800c314 <prvAddCurrentTaskToDelayedList+0x94>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	3304      	adds	r3, #4
 800c296:	4618      	mov	r0, r3
 800c298:	f7fe fa70 	bl	800a77c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2a2:	d10a      	bne.n	800c2ba <prvAddCurrentTaskToDelayedList+0x3a>
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d007      	beq.n	800c2ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2aa:	4b1a      	ldr	r3, [pc, #104]	; (800c314 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	3304      	adds	r3, #4
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	4819      	ldr	r0, [pc, #100]	; (800c318 <prvAddCurrentTaskToDelayedList+0x98>)
 800c2b4:	f7fe fa07 	bl	800a6c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c2b8:	e026      	b.n	800c308 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	4413      	add	r3, r2
 800c2c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c2c2:	4b14      	ldr	r3, [pc, #80]	; (800c314 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	68ba      	ldr	r2, [r7, #8]
 800c2c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c2ca:	68ba      	ldr	r2, [r7, #8]
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d209      	bcs.n	800c2e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2d2:	4b12      	ldr	r3, [pc, #72]	; (800c31c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	4b0f      	ldr	r3, [pc, #60]	; (800c314 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	3304      	adds	r3, #4
 800c2dc:	4619      	mov	r1, r3
 800c2de:	4610      	mov	r0, r2
 800c2e0:	f7fe fa14 	bl	800a70c <vListInsert>
}
 800c2e4:	e010      	b.n	800c308 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2e6:	4b0e      	ldr	r3, [pc, #56]	; (800c320 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	4b0a      	ldr	r3, [pc, #40]	; (800c314 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	4610      	mov	r0, r2
 800c2f4:	f7fe fa0a 	bl	800a70c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c2f8:	4b0a      	ldr	r3, [pc, #40]	; (800c324 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	68ba      	ldr	r2, [r7, #8]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d202      	bcs.n	800c308 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c302:	4a08      	ldr	r2, [pc, #32]	; (800c324 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	6013      	str	r3, [r2, #0]
}
 800c308:	bf00      	nop
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	20000d48 	.word	0x20000d48
 800c314:	20000870 	.word	0x20000870
 800c318:	20000d30 	.word	0x20000d30
 800c31c:	20000d00 	.word	0x20000d00
 800c320:	20000cfc 	.word	0x20000cfc
 800c324:	20000d64 	.word	0x20000d64

0800c328 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b08a      	sub	sp, #40	; 0x28
 800c32c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c32e:	2300      	movs	r3, #0
 800c330:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c332:	f000 facb 	bl	800c8cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c336:	4b1c      	ldr	r3, [pc, #112]	; (800c3a8 <xTimerCreateTimerTask+0x80>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d021      	beq.n	800c382 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c33e:	2300      	movs	r3, #0
 800c340:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c342:	2300      	movs	r3, #0
 800c344:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c346:	1d3a      	adds	r2, r7, #4
 800c348:	f107 0108 	add.w	r1, r7, #8
 800c34c:	f107 030c 	add.w	r3, r7, #12
 800c350:	4618      	mov	r0, r3
 800c352:	f7fe f973 	bl	800a63c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c356:	6879      	ldr	r1, [r7, #4]
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	68fa      	ldr	r2, [r7, #12]
 800c35c:	9202      	str	r2, [sp, #8]
 800c35e:	9301      	str	r3, [sp, #4]
 800c360:	2302      	movs	r3, #2
 800c362:	9300      	str	r3, [sp, #0]
 800c364:	2300      	movs	r3, #0
 800c366:	460a      	mov	r2, r1
 800c368:	4910      	ldr	r1, [pc, #64]	; (800c3ac <xTimerCreateTimerTask+0x84>)
 800c36a:	4811      	ldr	r0, [pc, #68]	; (800c3b0 <xTimerCreateTimerTask+0x88>)
 800c36c:	f7fe ff52 	bl	800b214 <xTaskCreateStatic>
 800c370:	4603      	mov	r3, r0
 800c372:	4a10      	ldr	r2, [pc, #64]	; (800c3b4 <xTimerCreateTimerTask+0x8c>)
 800c374:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c376:	4b0f      	ldr	r3, [pc, #60]	; (800c3b4 <xTimerCreateTimerTask+0x8c>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d001      	beq.n	800c382 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c37e:	2301      	movs	r3, #1
 800c380:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d10a      	bne.n	800c39e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c38c:	f383 8811 	msr	BASEPRI, r3
 800c390:	f3bf 8f6f 	isb	sy
 800c394:	f3bf 8f4f 	dsb	sy
 800c398:	613b      	str	r3, [r7, #16]
}
 800c39a:	bf00      	nop
 800c39c:	e7fe      	b.n	800c39c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c39e:	697b      	ldr	r3, [r7, #20]
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3718      	adds	r7, #24
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	20000da0 	.word	0x20000da0
 800c3ac:	0800dd24 	.word	0x0800dd24
 800c3b0:	0800c4d5 	.word	0x0800c4d5
 800c3b4:	20000da4 	.word	0x20000da4

0800c3b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b08a      	sub	sp, #40	; 0x28
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	607a      	str	r2, [r7, #4]
 800c3c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d10a      	bne.n	800c3e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	623b      	str	r3, [r7, #32]
}
 800c3e2:	bf00      	nop
 800c3e4:	e7fe      	b.n	800c3e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c3e6:	4b1a      	ldr	r3, [pc, #104]	; (800c450 <xTimerGenericCommand+0x98>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d02a      	beq.n	800c444 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	2b05      	cmp	r3, #5
 800c3fe:	dc18      	bgt.n	800c432 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c400:	f7ff fdd6 	bl	800bfb0 <xTaskGetSchedulerState>
 800c404:	4603      	mov	r3, r0
 800c406:	2b02      	cmp	r3, #2
 800c408:	d109      	bne.n	800c41e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c40a:	4b11      	ldr	r3, [pc, #68]	; (800c450 <xTimerGenericCommand+0x98>)
 800c40c:	6818      	ldr	r0, [r3, #0]
 800c40e:	f107 0110 	add.w	r1, r7, #16
 800c412:	2300      	movs	r3, #0
 800c414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c416:	f7fe fb1b 	bl	800aa50 <xQueueGenericSend>
 800c41a:	6278      	str	r0, [r7, #36]	; 0x24
 800c41c:	e012      	b.n	800c444 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c41e:	4b0c      	ldr	r3, [pc, #48]	; (800c450 <xTimerGenericCommand+0x98>)
 800c420:	6818      	ldr	r0, [r3, #0]
 800c422:	f107 0110 	add.w	r1, r7, #16
 800c426:	2300      	movs	r3, #0
 800c428:	2200      	movs	r2, #0
 800c42a:	f7fe fb11 	bl	800aa50 <xQueueGenericSend>
 800c42e:	6278      	str	r0, [r7, #36]	; 0x24
 800c430:	e008      	b.n	800c444 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c432:	4b07      	ldr	r3, [pc, #28]	; (800c450 <xTimerGenericCommand+0x98>)
 800c434:	6818      	ldr	r0, [r3, #0]
 800c436:	f107 0110 	add.w	r1, r7, #16
 800c43a:	2300      	movs	r3, #0
 800c43c:	683a      	ldr	r2, [r7, #0]
 800c43e:	f7fe fc05 	bl	800ac4c <xQueueGenericSendFromISR>
 800c442:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c446:	4618      	mov	r0, r3
 800c448:	3728      	adds	r7, #40	; 0x28
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	20000da0 	.word	0x20000da0

0800c454 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b088      	sub	sp, #32
 800c458:	af02      	add	r7, sp, #8
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c45e:	4b1c      	ldr	r3, [pc, #112]	; (800c4d0 <prvProcessExpiredTimer+0x7c>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	3304      	adds	r3, #4
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7fe f985 	bl	800a77c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	69db      	ldr	r3, [r3, #28]
 800c476:	2b01      	cmp	r3, #1
 800c478:	d122      	bne.n	800c4c0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	699a      	ldr	r2, [r3, #24]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	18d1      	adds	r1, r2, r3
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	683a      	ldr	r2, [r7, #0]
 800c486:	6978      	ldr	r0, [r7, #20]
 800c488:	f000 f8c8 	bl	800c61c <prvInsertTimerInActiveList>
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d016      	beq.n	800c4c0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c492:	2300      	movs	r3, #0
 800c494:	9300      	str	r3, [sp, #0]
 800c496:	2300      	movs	r3, #0
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	2100      	movs	r1, #0
 800c49c:	6978      	ldr	r0, [r7, #20]
 800c49e:	f7ff ff8b 	bl	800c3b8 <xTimerGenericCommand>
 800c4a2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d10a      	bne.n	800c4c0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ae:	f383 8811 	msr	BASEPRI, r3
 800c4b2:	f3bf 8f6f 	isb	sy
 800c4b6:	f3bf 8f4f 	dsb	sy
 800c4ba:	60fb      	str	r3, [r7, #12]
}
 800c4bc:	bf00      	nop
 800c4be:	e7fe      	b.n	800c4be <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c4:	6978      	ldr	r0, [r7, #20]
 800c4c6:	4798      	blx	r3
}
 800c4c8:	bf00      	nop
 800c4ca:	3718      	adds	r7, #24
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	20000d98 	.word	0x20000d98

0800c4d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c4dc:	f107 0308 	add.w	r3, r7, #8
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f000 f857 	bl	800c594 <prvGetNextExpireTime>
 800c4e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	f000 f803 	bl	800c4f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c4f2:	f000 f8d5 	bl	800c6a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c4f6:	e7f1      	b.n	800c4dc <prvTimerTask+0x8>

0800c4f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c502:	f7ff f937 	bl	800b774 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c506:	f107 0308 	add.w	r3, r7, #8
 800c50a:	4618      	mov	r0, r3
 800c50c:	f000 f866 	bl	800c5dc <prvSampleTimeNow>
 800c510:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d130      	bne.n	800c57a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d10a      	bne.n	800c534 <prvProcessTimerOrBlockTask+0x3c>
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	429a      	cmp	r2, r3
 800c524:	d806      	bhi.n	800c534 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c526:	f7ff f933 	bl	800b790 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c52a:	68f9      	ldr	r1, [r7, #12]
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7ff ff91 	bl	800c454 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c532:	e024      	b.n	800c57e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d008      	beq.n	800c54c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c53a:	4b13      	ldr	r3, [pc, #76]	; (800c588 <prvProcessTimerOrBlockTask+0x90>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	bf0c      	ite	eq
 800c544:	2301      	moveq	r3, #1
 800c546:	2300      	movne	r3, #0
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c54c:	4b0f      	ldr	r3, [pc, #60]	; (800c58c <prvProcessTimerOrBlockTask+0x94>)
 800c54e:	6818      	ldr	r0, [r3, #0]
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	1ad3      	subs	r3, r2, r3
 800c556:	683a      	ldr	r2, [r7, #0]
 800c558:	4619      	mov	r1, r3
 800c55a:	f7fe fe27 	bl	800b1ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c55e:	f7ff f917 	bl	800b790 <xTaskResumeAll>
 800c562:	4603      	mov	r3, r0
 800c564:	2b00      	cmp	r3, #0
 800c566:	d10a      	bne.n	800c57e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c568:	4b09      	ldr	r3, [pc, #36]	; (800c590 <prvProcessTimerOrBlockTask+0x98>)
 800c56a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c56e:	601a      	str	r2, [r3, #0]
 800c570:	f3bf 8f4f 	dsb	sy
 800c574:	f3bf 8f6f 	isb	sy
}
 800c578:	e001      	b.n	800c57e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c57a:	f7ff f909 	bl	800b790 <xTaskResumeAll>
}
 800c57e:	bf00      	nop
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	20000d9c 	.word	0x20000d9c
 800c58c:	20000da0 	.word	0x20000da0
 800c590:	e000ed04 	.word	0xe000ed04

0800c594 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c594:	b480      	push	{r7}
 800c596:	b085      	sub	sp, #20
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c59c:	4b0e      	ldr	r3, [pc, #56]	; (800c5d8 <prvGetNextExpireTime+0x44>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	bf0c      	ite	eq
 800c5a6:	2301      	moveq	r3, #1
 800c5a8:	2300      	movne	r3, #0
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d105      	bne.n	800c5c6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5ba:	4b07      	ldr	r3, [pc, #28]	; (800c5d8 <prvGetNextExpireTime+0x44>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	60fb      	str	r3, [r7, #12]
 800c5c4:	e001      	b.n	800c5ca <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3714      	adds	r7, #20
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bc80      	pop	{r7}
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop
 800c5d8:	20000d98 	.word	0x20000d98

0800c5dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c5e4:	f7ff f972 	bl	800b8cc <xTaskGetTickCount>
 800c5e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c5ea:	4b0b      	ldr	r3, [pc, #44]	; (800c618 <prvSampleTimeNow+0x3c>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	68fa      	ldr	r2, [r7, #12]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d205      	bcs.n	800c600 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c5f4:	f000 f908 	bl	800c808 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	601a      	str	r2, [r3, #0]
 800c5fe:	e002      	b.n	800c606 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2200      	movs	r2, #0
 800c604:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c606:	4a04      	ldr	r2, [pc, #16]	; (800c618 <prvSampleTimeNow+0x3c>)
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c60c:	68fb      	ldr	r3, [r7, #12]
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3710      	adds	r7, #16
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	20000da8 	.word	0x20000da8

0800c61c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b086      	sub	sp, #24
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
 800c628:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c62a:	2300      	movs	r3, #0
 800c62c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	68ba      	ldr	r2, [r7, #8]
 800c632:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c63a:	68ba      	ldr	r2, [r7, #8]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d812      	bhi.n	800c668 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	1ad2      	subs	r2, r2, r3
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	699b      	ldr	r3, [r3, #24]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d302      	bcc.n	800c656 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c650:	2301      	movs	r3, #1
 800c652:	617b      	str	r3, [r7, #20]
 800c654:	e01b      	b.n	800c68e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c656:	4b10      	ldr	r3, [pc, #64]	; (800c698 <prvInsertTimerInActiveList+0x7c>)
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	3304      	adds	r3, #4
 800c65e:	4619      	mov	r1, r3
 800c660:	4610      	mov	r0, r2
 800c662:	f7fe f853 	bl	800a70c <vListInsert>
 800c666:	e012      	b.n	800c68e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d206      	bcs.n	800c67e <prvInsertTimerInActiveList+0x62>
 800c670:	68ba      	ldr	r2, [r7, #8]
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	429a      	cmp	r2, r3
 800c676:	d302      	bcc.n	800c67e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c678:	2301      	movs	r3, #1
 800c67a:	617b      	str	r3, [r7, #20]
 800c67c:	e007      	b.n	800c68e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c67e:	4b07      	ldr	r3, [pc, #28]	; (800c69c <prvInsertTimerInActiveList+0x80>)
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	3304      	adds	r3, #4
 800c686:	4619      	mov	r1, r3
 800c688:	4610      	mov	r0, r2
 800c68a:	f7fe f83f 	bl	800a70c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c68e:	697b      	ldr	r3, [r7, #20]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3718      	adds	r7, #24
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	20000d9c 	.word	0x20000d9c
 800c69c:	20000d98 	.word	0x20000d98

0800c6a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b08e      	sub	sp, #56	; 0x38
 800c6a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6a6:	e09d      	b.n	800c7e4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	da18      	bge.n	800c6e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c6ae:	1d3b      	adds	r3, r7, #4
 800c6b0:	3304      	adds	r3, #4
 800c6b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d10a      	bne.n	800c6d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6be:	f383 8811 	msr	BASEPRI, r3
 800c6c2:	f3bf 8f6f 	isb	sy
 800c6c6:	f3bf 8f4f 	dsb	sy
 800c6ca:	61fb      	str	r3, [r7, #28]
}
 800c6cc:	bf00      	nop
 800c6ce:	e7fe      	b.n	800c6ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6d6:	6850      	ldr	r0, [r2, #4]
 800c6d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6da:	6892      	ldr	r2, [r2, #8]
 800c6dc:	4611      	mov	r1, r2
 800c6de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	db7d      	blt.n	800c7e2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ec:	695b      	ldr	r3, [r3, #20]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d004      	beq.n	800c6fc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f4:	3304      	adds	r3, #4
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7fe f840 	bl	800a77c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c6fc:	463b      	mov	r3, r7
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7ff ff6c 	bl	800c5dc <prvSampleTimeNow>
 800c704:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2b09      	cmp	r3, #9
 800c70a:	d86b      	bhi.n	800c7e4 <prvProcessReceivedCommands+0x144>
 800c70c:	a201      	add	r2, pc, #4	; (adr r2, 800c714 <prvProcessReceivedCommands+0x74>)
 800c70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c712:	bf00      	nop
 800c714:	0800c73d 	.word	0x0800c73d
 800c718:	0800c73d 	.word	0x0800c73d
 800c71c:	0800c73d 	.word	0x0800c73d
 800c720:	0800c7e5 	.word	0x0800c7e5
 800c724:	0800c799 	.word	0x0800c799
 800c728:	0800c7d1 	.word	0x0800c7d1
 800c72c:	0800c73d 	.word	0x0800c73d
 800c730:	0800c73d 	.word	0x0800c73d
 800c734:	0800c7e5 	.word	0x0800c7e5
 800c738:	0800c799 	.word	0x0800c799
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c73c:	68ba      	ldr	r2, [r7, #8]
 800c73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c740:	699b      	ldr	r3, [r3, #24]
 800c742:	18d1      	adds	r1, r2, r3
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c74a:	f7ff ff67 	bl	800c61c <prvInsertTimerInActiveList>
 800c74e:	4603      	mov	r3, r0
 800c750:	2b00      	cmp	r3, #0
 800c752:	d047      	beq.n	800c7e4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c75a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75e:	69db      	ldr	r3, [r3, #28]
 800c760:	2b01      	cmp	r3, #1
 800c762:	d13f      	bne.n	800c7e4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c764:	68ba      	ldr	r2, [r7, #8]
 800c766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c768:	699b      	ldr	r3, [r3, #24]
 800c76a:	441a      	add	r2, r3
 800c76c:	2300      	movs	r3, #0
 800c76e:	9300      	str	r3, [sp, #0]
 800c770:	2300      	movs	r3, #0
 800c772:	2100      	movs	r1, #0
 800c774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c776:	f7ff fe1f 	bl	800c3b8 <xTimerGenericCommand>
 800c77a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c77c:	6a3b      	ldr	r3, [r7, #32]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d130      	bne.n	800c7e4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800c782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c786:	f383 8811 	msr	BASEPRI, r3
 800c78a:	f3bf 8f6f 	isb	sy
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	61bb      	str	r3, [r7, #24]
}
 800c794:	bf00      	nop
 800c796:	e7fe      	b.n	800c796 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c798:	68ba      	ldr	r2, [r7, #8]
 800c79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a0:	699b      	ldr	r3, [r3, #24]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d10a      	bne.n	800c7bc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800c7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7aa:	f383 8811 	msr	BASEPRI, r3
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	f3bf 8f4f 	dsb	sy
 800c7b6:	617b      	str	r3, [r7, #20]
}
 800c7b8:	bf00      	nop
 800c7ba:	e7fe      	b.n	800c7ba <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7be:	699a      	ldr	r2, [r3, #24]
 800c7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c2:	18d1      	adds	r1, r2, r3
 800c7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7ca:	f7ff ff27 	bl	800c61c <prvInsertTimerInActiveList>
					break;
 800c7ce:	e009      	b.n	800c7e4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d104      	bne.n	800c7e4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800c7da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7dc:	f000 fb6a 	bl	800ceb4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c7e0:	e000      	b.n	800c7e4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c7e2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7e4:	4b07      	ldr	r3, [pc, #28]	; (800c804 <prvProcessReceivedCommands+0x164>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	1d39      	adds	r1, r7, #4
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7fe fac5 	bl	800ad7c <xQueueReceive>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f47f af57 	bne.w	800c6a8 <prvProcessReceivedCommands+0x8>
	}
}
 800c7fa:	bf00      	nop
 800c7fc:	bf00      	nop
 800c7fe:	3730      	adds	r7, #48	; 0x30
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}
 800c804:	20000da0 	.word	0x20000da0

0800c808 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b088      	sub	sp, #32
 800c80c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c80e:	e045      	b.n	800c89c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c810:	4b2c      	ldr	r3, [pc, #176]	; (800c8c4 <prvSwitchTimerLists+0xbc>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c81a:	4b2a      	ldr	r3, [pc, #168]	; (800c8c4 <prvSwitchTimerLists+0xbc>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	3304      	adds	r3, #4
 800c828:	4618      	mov	r0, r3
 800c82a:	f7fd ffa7 	bl	800a77c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c832:	68f8      	ldr	r0, [r7, #12]
 800c834:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	69db      	ldr	r3, [r3, #28]
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	d12e      	bne.n	800c89c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	699b      	ldr	r3, [r3, #24]
 800c842:	693a      	ldr	r2, [r7, #16]
 800c844:	4413      	add	r3, r2
 800c846:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c848:	68ba      	ldr	r2, [r7, #8]
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d90e      	bls.n	800c86e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	68fa      	ldr	r2, [r7, #12]
 800c85a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c85c:	4b19      	ldr	r3, [pc, #100]	; (800c8c4 <prvSwitchTimerLists+0xbc>)
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	3304      	adds	r3, #4
 800c864:	4619      	mov	r1, r3
 800c866:	4610      	mov	r0, r2
 800c868:	f7fd ff50 	bl	800a70c <vListInsert>
 800c86c:	e016      	b.n	800c89c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c86e:	2300      	movs	r3, #0
 800c870:	9300      	str	r3, [sp, #0]
 800c872:	2300      	movs	r3, #0
 800c874:	693a      	ldr	r2, [r7, #16]
 800c876:	2100      	movs	r1, #0
 800c878:	68f8      	ldr	r0, [r7, #12]
 800c87a:	f7ff fd9d 	bl	800c3b8 <xTimerGenericCommand>
 800c87e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d10a      	bne.n	800c89c <prvSwitchTimerLists+0x94>
	__asm volatile
 800c886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88a:	f383 8811 	msr	BASEPRI, r3
 800c88e:	f3bf 8f6f 	isb	sy
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	603b      	str	r3, [r7, #0]
}
 800c898:	bf00      	nop
 800c89a:	e7fe      	b.n	800c89a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c89c:	4b09      	ldr	r3, [pc, #36]	; (800c8c4 <prvSwitchTimerLists+0xbc>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d1b4      	bne.n	800c810 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c8a6:	4b07      	ldr	r3, [pc, #28]	; (800c8c4 <prvSwitchTimerLists+0xbc>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c8ac:	4b06      	ldr	r3, [pc, #24]	; (800c8c8 <prvSwitchTimerLists+0xc0>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a04      	ldr	r2, [pc, #16]	; (800c8c4 <prvSwitchTimerLists+0xbc>)
 800c8b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c8b4:	4a04      	ldr	r2, [pc, #16]	; (800c8c8 <prvSwitchTimerLists+0xc0>)
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	6013      	str	r3, [r2, #0]
}
 800c8ba:	bf00      	nop
 800c8bc:	3718      	adds	r7, #24
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
 800c8c2:	bf00      	nop
 800c8c4:	20000d98 	.word	0x20000d98
 800c8c8:	20000d9c 	.word	0x20000d9c

0800c8cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c8d2:	f000 f92b 	bl	800cb2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c8d6:	4b15      	ldr	r3, [pc, #84]	; (800c92c <prvCheckForValidListAndQueue+0x60>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d120      	bne.n	800c920 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c8de:	4814      	ldr	r0, [pc, #80]	; (800c930 <prvCheckForValidListAndQueue+0x64>)
 800c8e0:	f7fd fec6 	bl	800a670 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c8e4:	4813      	ldr	r0, [pc, #76]	; (800c934 <prvCheckForValidListAndQueue+0x68>)
 800c8e6:	f7fd fec3 	bl	800a670 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c8ea:	4b13      	ldr	r3, [pc, #76]	; (800c938 <prvCheckForValidListAndQueue+0x6c>)
 800c8ec:	4a10      	ldr	r2, [pc, #64]	; (800c930 <prvCheckForValidListAndQueue+0x64>)
 800c8ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c8f0:	4b12      	ldr	r3, [pc, #72]	; (800c93c <prvCheckForValidListAndQueue+0x70>)
 800c8f2:	4a10      	ldr	r2, [pc, #64]	; (800c934 <prvCheckForValidListAndQueue+0x68>)
 800c8f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	4b11      	ldr	r3, [pc, #68]	; (800c940 <prvCheckForValidListAndQueue+0x74>)
 800c8fc:	4a11      	ldr	r2, [pc, #68]	; (800c944 <prvCheckForValidListAndQueue+0x78>)
 800c8fe:	2110      	movs	r1, #16
 800c900:	200a      	movs	r0, #10
 800c902:	f7fd ffcd 	bl	800a8a0 <xQueueGenericCreateStatic>
 800c906:	4603      	mov	r3, r0
 800c908:	4a08      	ldr	r2, [pc, #32]	; (800c92c <prvCheckForValidListAndQueue+0x60>)
 800c90a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c90c:	4b07      	ldr	r3, [pc, #28]	; (800c92c <prvCheckForValidListAndQueue+0x60>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d005      	beq.n	800c920 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c914:	4b05      	ldr	r3, [pc, #20]	; (800c92c <prvCheckForValidListAndQueue+0x60>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	490b      	ldr	r1, [pc, #44]	; (800c948 <prvCheckForValidListAndQueue+0x7c>)
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fe fc1e 	bl	800b15c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c920:	f000 f934 	bl	800cb8c <vPortExitCritical>
}
 800c924:	bf00      	nop
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	20000da0 	.word	0x20000da0
 800c930:	20000d70 	.word	0x20000d70
 800c934:	20000d84 	.word	0x20000d84
 800c938:	20000d98 	.word	0x20000d98
 800c93c:	20000d9c 	.word	0x20000d9c
 800c940:	20000e4c 	.word	0x20000e4c
 800c944:	20000dac 	.word	0x20000dac
 800c948:	0800dd2c 	.word	0x0800dd2c

0800c94c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c94c:	b480      	push	{r7}
 800c94e:	b085      	sub	sp, #20
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	3b04      	subs	r3, #4
 800c95c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	3b04      	subs	r3, #4
 800c96a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	f023 0201 	bic.w	r2, r3, #1
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	3b04      	subs	r3, #4
 800c97a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c97c:	4a08      	ldr	r2, [pc, #32]	; (800c9a0 <pxPortInitialiseStack+0x54>)
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	3b14      	subs	r3, #20
 800c986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	3b20      	subs	r3, #32
 800c992:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c994:	68fb      	ldr	r3, [r7, #12]
}
 800c996:	4618      	mov	r0, r3
 800c998:	3714      	adds	r7, #20
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bc80      	pop	{r7}
 800c99e:	4770      	bx	lr
 800c9a0:	0800c9a5 	.word	0x0800c9a5

0800c9a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c9ae:	4b12      	ldr	r3, [pc, #72]	; (800c9f8 <prvTaskExitError+0x54>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b6:	d00a      	beq.n	800c9ce <prvTaskExitError+0x2a>
	__asm volatile
 800c9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9bc:	f383 8811 	msr	BASEPRI, r3
 800c9c0:	f3bf 8f6f 	isb	sy
 800c9c4:	f3bf 8f4f 	dsb	sy
 800c9c8:	60fb      	str	r3, [r7, #12]
}
 800c9ca:	bf00      	nop
 800c9cc:	e7fe      	b.n	800c9cc <prvTaskExitError+0x28>
	__asm volatile
 800c9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d2:	f383 8811 	msr	BASEPRI, r3
 800c9d6:	f3bf 8f6f 	isb	sy
 800c9da:	f3bf 8f4f 	dsb	sy
 800c9de:	60bb      	str	r3, [r7, #8]
}
 800c9e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c9e2:	bf00      	nop
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d0fc      	beq.n	800c9e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c9ea:	bf00      	nop
 800c9ec:	bf00      	nop
 800c9ee:	3714      	adds	r7, #20
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bc80      	pop	{r7}
 800c9f4:	4770      	bx	lr
 800c9f6:	bf00      	nop
 800c9f8:	2000012c 	.word	0x2000012c
 800c9fc:	00000000 	.word	0x00000000

0800ca00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ca00:	4b07      	ldr	r3, [pc, #28]	; (800ca20 <pxCurrentTCBConst2>)
 800ca02:	6819      	ldr	r1, [r3, #0]
 800ca04:	6808      	ldr	r0, [r1, #0]
 800ca06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ca0a:	f380 8809 	msr	PSP, r0
 800ca0e:	f3bf 8f6f 	isb	sy
 800ca12:	f04f 0000 	mov.w	r0, #0
 800ca16:	f380 8811 	msr	BASEPRI, r0
 800ca1a:	f04e 0e0d 	orr.w	lr, lr, #13
 800ca1e:	4770      	bx	lr

0800ca20 <pxCurrentTCBConst2>:
 800ca20:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca24:	bf00      	nop
 800ca26:	bf00      	nop

0800ca28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800ca28:	4806      	ldr	r0, [pc, #24]	; (800ca44 <prvPortStartFirstTask+0x1c>)
 800ca2a:	6800      	ldr	r0, [r0, #0]
 800ca2c:	6800      	ldr	r0, [r0, #0]
 800ca2e:	f380 8808 	msr	MSP, r0
 800ca32:	b662      	cpsie	i
 800ca34:	b661      	cpsie	f
 800ca36:	f3bf 8f4f 	dsb	sy
 800ca3a:	f3bf 8f6f 	isb	sy
 800ca3e:	df00      	svc	0
 800ca40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ca42:	bf00      	nop
 800ca44:	e000ed08 	.word	0xe000ed08

0800ca48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ca4e:	4b32      	ldr	r3, [pc, #200]	; (800cb18 <xPortStartScheduler+0xd0>)
 800ca50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	22ff      	movs	r2, #255	; 0xff
 800ca5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ca68:	78fb      	ldrb	r3, [r7, #3]
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ca70:	b2da      	uxtb	r2, r3
 800ca72:	4b2a      	ldr	r3, [pc, #168]	; (800cb1c <xPortStartScheduler+0xd4>)
 800ca74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ca76:	4b2a      	ldr	r3, [pc, #168]	; (800cb20 <xPortStartScheduler+0xd8>)
 800ca78:	2207      	movs	r2, #7
 800ca7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca7c:	e009      	b.n	800ca92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ca7e:	4b28      	ldr	r3, [pc, #160]	; (800cb20 <xPortStartScheduler+0xd8>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	3b01      	subs	r3, #1
 800ca84:	4a26      	ldr	r2, [pc, #152]	; (800cb20 <xPortStartScheduler+0xd8>)
 800ca86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ca88:	78fb      	ldrb	r3, [r7, #3]
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	005b      	lsls	r3, r3, #1
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca92:	78fb      	ldrb	r3, [r7, #3]
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca9a:	2b80      	cmp	r3, #128	; 0x80
 800ca9c:	d0ef      	beq.n	800ca7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ca9e:	4b20      	ldr	r3, [pc, #128]	; (800cb20 <xPortStartScheduler+0xd8>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f1c3 0307 	rsb	r3, r3, #7
 800caa6:	2b04      	cmp	r3, #4
 800caa8:	d00a      	beq.n	800cac0 <xPortStartScheduler+0x78>
	__asm volatile
 800caaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caae:	f383 8811 	msr	BASEPRI, r3
 800cab2:	f3bf 8f6f 	isb	sy
 800cab6:	f3bf 8f4f 	dsb	sy
 800caba:	60bb      	str	r3, [r7, #8]
}
 800cabc:	bf00      	nop
 800cabe:	e7fe      	b.n	800cabe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cac0:	4b17      	ldr	r3, [pc, #92]	; (800cb20 <xPortStartScheduler+0xd8>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	021b      	lsls	r3, r3, #8
 800cac6:	4a16      	ldr	r2, [pc, #88]	; (800cb20 <xPortStartScheduler+0xd8>)
 800cac8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800caca:	4b15      	ldr	r3, [pc, #84]	; (800cb20 <xPortStartScheduler+0xd8>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cad2:	4a13      	ldr	r2, [pc, #76]	; (800cb20 <xPortStartScheduler+0xd8>)
 800cad4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	b2da      	uxtb	r2, r3
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cade:	4b11      	ldr	r3, [pc, #68]	; (800cb24 <xPortStartScheduler+0xdc>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4a10      	ldr	r2, [pc, #64]	; (800cb24 <xPortStartScheduler+0xdc>)
 800cae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cae8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800caea:	4b0e      	ldr	r3, [pc, #56]	; (800cb24 <xPortStartScheduler+0xdc>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4a0d      	ldr	r2, [pc, #52]	; (800cb24 <xPortStartScheduler+0xdc>)
 800caf0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800caf4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800caf6:	f000 f8b9 	bl	800cc6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cafa:	4b0b      	ldr	r3, [pc, #44]	; (800cb28 <xPortStartScheduler+0xe0>)
 800cafc:	2200      	movs	r2, #0
 800cafe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cb00:	f7ff ff92 	bl	800ca28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cb04:	f7fe ffae 	bl	800ba64 <vTaskSwitchContext>
	prvTaskExitError();
 800cb08:	f7ff ff4c 	bl	800c9a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cb0c:	2300      	movs	r3, #0
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	bf00      	nop
 800cb18:	e000e400 	.word	0xe000e400
 800cb1c:	20000e9c 	.word	0x20000e9c
 800cb20:	20000ea0 	.word	0x20000ea0
 800cb24:	e000ed20 	.word	0xe000ed20
 800cb28:	2000012c 	.word	0x2000012c

0800cb2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
	__asm volatile
 800cb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb36:	f383 8811 	msr	BASEPRI, r3
 800cb3a:	f3bf 8f6f 	isb	sy
 800cb3e:	f3bf 8f4f 	dsb	sy
 800cb42:	607b      	str	r3, [r7, #4]
}
 800cb44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cb46:	4b0f      	ldr	r3, [pc, #60]	; (800cb84 <vPortEnterCritical+0x58>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	4a0d      	ldr	r2, [pc, #52]	; (800cb84 <vPortEnterCritical+0x58>)
 800cb4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cb50:	4b0c      	ldr	r3, [pc, #48]	; (800cb84 <vPortEnterCritical+0x58>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d10f      	bne.n	800cb78 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cb58:	4b0b      	ldr	r3, [pc, #44]	; (800cb88 <vPortEnterCritical+0x5c>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d00a      	beq.n	800cb78 <vPortEnterCritical+0x4c>
	__asm volatile
 800cb62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb66:	f383 8811 	msr	BASEPRI, r3
 800cb6a:	f3bf 8f6f 	isb	sy
 800cb6e:	f3bf 8f4f 	dsb	sy
 800cb72:	603b      	str	r3, [r7, #0]
}
 800cb74:	bf00      	nop
 800cb76:	e7fe      	b.n	800cb76 <vPortEnterCritical+0x4a>
	}
}
 800cb78:	bf00      	nop
 800cb7a:	370c      	adds	r7, #12
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bc80      	pop	{r7}
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	2000012c 	.word	0x2000012c
 800cb88:	e000ed04 	.word	0xe000ed04

0800cb8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cb92:	4b11      	ldr	r3, [pc, #68]	; (800cbd8 <vPortExitCritical+0x4c>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d10a      	bne.n	800cbb0 <vPortExitCritical+0x24>
	__asm volatile
 800cb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9e:	f383 8811 	msr	BASEPRI, r3
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	607b      	str	r3, [r7, #4]
}
 800cbac:	bf00      	nop
 800cbae:	e7fe      	b.n	800cbae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cbb0:	4b09      	ldr	r3, [pc, #36]	; (800cbd8 <vPortExitCritical+0x4c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	3b01      	subs	r3, #1
 800cbb6:	4a08      	ldr	r2, [pc, #32]	; (800cbd8 <vPortExitCritical+0x4c>)
 800cbb8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cbba:	4b07      	ldr	r3, [pc, #28]	; (800cbd8 <vPortExitCritical+0x4c>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d105      	bne.n	800cbce <vPortExitCritical+0x42>
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	f383 8811 	msr	BASEPRI, r3
}
 800cbcc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cbce:	bf00      	nop
 800cbd0:	370c      	adds	r7, #12
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bc80      	pop	{r7}
 800cbd6:	4770      	bx	lr
 800cbd8:	2000012c 	.word	0x2000012c
 800cbdc:	00000000 	.word	0x00000000

0800cbe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cbe0:	f3ef 8009 	mrs	r0, PSP
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	4b0d      	ldr	r3, [pc, #52]	; (800cc20 <pxCurrentTCBConst>)
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cbf0:	6010      	str	r0, [r2, #0]
 800cbf2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800cbf6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cbfa:	f380 8811 	msr	BASEPRI, r0
 800cbfe:	f7fe ff31 	bl	800ba64 <vTaskSwitchContext>
 800cc02:	f04f 0000 	mov.w	r0, #0
 800cc06:	f380 8811 	msr	BASEPRI, r0
 800cc0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cc0e:	6819      	ldr	r1, [r3, #0]
 800cc10:	6808      	ldr	r0, [r1, #0]
 800cc12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cc16:	f380 8809 	msr	PSP, r0
 800cc1a:	f3bf 8f6f 	isb	sy
 800cc1e:	4770      	bx	lr

0800cc20 <pxCurrentTCBConst>:
 800cc20:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cc24:	bf00      	nop
 800cc26:	bf00      	nop

0800cc28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc32:	f383 8811 	msr	BASEPRI, r3
 800cc36:	f3bf 8f6f 	isb	sy
 800cc3a:	f3bf 8f4f 	dsb	sy
 800cc3e:	607b      	str	r3, [r7, #4]
}
 800cc40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cc42:	f7fe fe51 	bl	800b8e8 <xTaskIncrementTick>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d003      	beq.n	800cc54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc4c:	4b06      	ldr	r3, [pc, #24]	; (800cc68 <SysTick_Handler+0x40>)
 800cc4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc52:	601a      	str	r2, [r3, #0]
 800cc54:	2300      	movs	r3, #0
 800cc56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	f383 8811 	msr	BASEPRI, r3
}
 800cc5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cc60:	bf00      	nop
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	e000ed04 	.word	0xe000ed04

0800cc6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cc70:	4b0a      	ldr	r3, [pc, #40]	; (800cc9c <vPortSetupTimerInterrupt+0x30>)
 800cc72:	2200      	movs	r2, #0
 800cc74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cc76:	4b0a      	ldr	r3, [pc, #40]	; (800cca0 <vPortSetupTimerInterrupt+0x34>)
 800cc78:	2200      	movs	r2, #0
 800cc7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cc7c:	4b09      	ldr	r3, [pc, #36]	; (800cca4 <vPortSetupTimerInterrupt+0x38>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a09      	ldr	r2, [pc, #36]	; (800cca8 <vPortSetupTimerInterrupt+0x3c>)
 800cc82:	fba2 2303 	umull	r2, r3, r2, r3
 800cc86:	099b      	lsrs	r3, r3, #6
 800cc88:	4a08      	ldr	r2, [pc, #32]	; (800ccac <vPortSetupTimerInterrupt+0x40>)
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cc8e:	4b03      	ldr	r3, [pc, #12]	; (800cc9c <vPortSetupTimerInterrupt+0x30>)
 800cc90:	2207      	movs	r2, #7
 800cc92:	601a      	str	r2, [r3, #0]
}
 800cc94:	bf00      	nop
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bc80      	pop	{r7}
 800cc9a:	4770      	bx	lr
 800cc9c:	e000e010 	.word	0xe000e010
 800cca0:	e000e018 	.word	0xe000e018
 800cca4:	20000010 	.word	0x20000010
 800cca8:	10624dd3 	.word	0x10624dd3
 800ccac:	e000e014 	.word	0xe000e014

0800ccb0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b085      	sub	sp, #20
 800ccb4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ccb6:	f3ef 8305 	mrs	r3, IPSR
 800ccba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2b0f      	cmp	r3, #15
 800ccc0:	d914      	bls.n	800ccec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ccc2:	4a16      	ldr	r2, [pc, #88]	; (800cd1c <vPortValidateInterruptPriority+0x6c>)
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	4413      	add	r3, r2
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cccc:	4b14      	ldr	r3, [pc, #80]	; (800cd20 <vPortValidateInterruptPriority+0x70>)
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	7afa      	ldrb	r2, [r7, #11]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d20a      	bcs.n	800ccec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ccd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccda:	f383 8811 	msr	BASEPRI, r3
 800ccde:	f3bf 8f6f 	isb	sy
 800cce2:	f3bf 8f4f 	dsb	sy
 800cce6:	607b      	str	r3, [r7, #4]
}
 800cce8:	bf00      	nop
 800ccea:	e7fe      	b.n	800ccea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ccec:	4b0d      	ldr	r3, [pc, #52]	; (800cd24 <vPortValidateInterruptPriority+0x74>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ccf4:	4b0c      	ldr	r3, [pc, #48]	; (800cd28 <vPortValidateInterruptPriority+0x78>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d90a      	bls.n	800cd12 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ccfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd00:	f383 8811 	msr	BASEPRI, r3
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	603b      	str	r3, [r7, #0]
}
 800cd0e:	bf00      	nop
 800cd10:	e7fe      	b.n	800cd10 <vPortValidateInterruptPriority+0x60>
	}
 800cd12:	bf00      	nop
 800cd14:	3714      	adds	r7, #20
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bc80      	pop	{r7}
 800cd1a:	4770      	bx	lr
 800cd1c:	e000e3f0 	.word	0xe000e3f0
 800cd20:	20000e9c 	.word	0x20000e9c
 800cd24:	e000ed0c 	.word	0xe000ed0c
 800cd28:	20000ea0 	.word	0x20000ea0

0800cd2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b08a      	sub	sp, #40	; 0x28
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cd34:	2300      	movs	r3, #0
 800cd36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cd38:	f7fe fd1c 	bl	800b774 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cd3c:	4b58      	ldr	r3, [pc, #352]	; (800cea0 <pvPortMalloc+0x174>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d101      	bne.n	800cd48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cd44:	f000 f910 	bl	800cf68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cd48:	4b56      	ldr	r3, [pc, #344]	; (800cea4 <pvPortMalloc+0x178>)
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4013      	ands	r3, r2
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	f040 808e 	bne.w	800ce72 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d01d      	beq.n	800cd98 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cd5c:	2208      	movs	r2, #8
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4413      	add	r3, r2
 800cd62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f003 0307 	and.w	r3, r3, #7
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d014      	beq.n	800cd98 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f023 0307 	bic.w	r3, r3, #7
 800cd74:	3308      	adds	r3, #8
 800cd76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f003 0307 	and.w	r3, r3, #7
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d00a      	beq.n	800cd98 <pvPortMalloc+0x6c>
	__asm volatile
 800cd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd86:	f383 8811 	msr	BASEPRI, r3
 800cd8a:	f3bf 8f6f 	isb	sy
 800cd8e:	f3bf 8f4f 	dsb	sy
 800cd92:	617b      	str	r3, [r7, #20]
}
 800cd94:	bf00      	nop
 800cd96:	e7fe      	b.n	800cd96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d069      	beq.n	800ce72 <pvPortMalloc+0x146>
 800cd9e:	4b42      	ldr	r3, [pc, #264]	; (800cea8 <pvPortMalloc+0x17c>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d864      	bhi.n	800ce72 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cda8:	4b40      	ldr	r3, [pc, #256]	; (800ceac <pvPortMalloc+0x180>)
 800cdaa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cdac:	4b3f      	ldr	r3, [pc, #252]	; (800ceac <pvPortMalloc+0x180>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cdb2:	e004      	b.n	800cdbe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d903      	bls.n	800cdd0 <pvPortMalloc+0xa4>
 800cdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d1f1      	bne.n	800cdb4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cdd0:	4b33      	ldr	r3, [pc, #204]	; (800cea0 <pvPortMalloc+0x174>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d04b      	beq.n	800ce72 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cdda:	6a3b      	ldr	r3, [r7, #32]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2208      	movs	r2, #8
 800cde0:	4413      	add	r3, r2
 800cde2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	6a3b      	ldr	r3, [r7, #32]
 800cdea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdee:	685a      	ldr	r2, [r3, #4]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	1ad2      	subs	r2, r2, r3
 800cdf4:	2308      	movs	r3, #8
 800cdf6:	005b      	lsls	r3, r3, #1
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d91f      	bls.n	800ce3c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cdfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	4413      	add	r3, r2
 800ce02:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce04:	69bb      	ldr	r3, [r7, #24]
 800ce06:	f003 0307 	and.w	r3, r3, #7
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d00a      	beq.n	800ce24 <pvPortMalloc+0xf8>
	__asm volatile
 800ce0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce12:	f383 8811 	msr	BASEPRI, r3
 800ce16:	f3bf 8f6f 	isb	sy
 800ce1a:	f3bf 8f4f 	dsb	sy
 800ce1e:	613b      	str	r3, [r7, #16]
}
 800ce20:	bf00      	nop
 800ce22:	e7fe      	b.n	800ce22 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ce24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce26:	685a      	ldr	r2, [r3, #4]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	1ad2      	subs	r2, r2, r3
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ce30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ce36:	69b8      	ldr	r0, [r7, #24]
 800ce38:	f000 f8f8 	bl	800d02c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ce3c:	4b1a      	ldr	r3, [pc, #104]	; (800cea8 <pvPortMalloc+0x17c>)
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	1ad3      	subs	r3, r2, r3
 800ce46:	4a18      	ldr	r2, [pc, #96]	; (800cea8 <pvPortMalloc+0x17c>)
 800ce48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ce4a:	4b17      	ldr	r3, [pc, #92]	; (800cea8 <pvPortMalloc+0x17c>)
 800ce4c:	681a      	ldr	r2, [r3, #0]
 800ce4e:	4b18      	ldr	r3, [pc, #96]	; (800ceb0 <pvPortMalloc+0x184>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d203      	bcs.n	800ce5e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ce56:	4b14      	ldr	r3, [pc, #80]	; (800cea8 <pvPortMalloc+0x17c>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4a15      	ldr	r2, [pc, #84]	; (800ceb0 <pvPortMalloc+0x184>)
 800ce5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce60:	685a      	ldr	r2, [r3, #4]
 800ce62:	4b10      	ldr	r3, [pc, #64]	; (800cea4 <pvPortMalloc+0x178>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	431a      	orrs	r2, r3
 800ce68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ce6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6e:	2200      	movs	r2, #0
 800ce70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ce72:	f7fe fc8d 	bl	800b790 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce76:	69fb      	ldr	r3, [r7, #28]
 800ce78:	f003 0307 	and.w	r3, r3, #7
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00a      	beq.n	800ce96 <pvPortMalloc+0x16a>
	__asm volatile
 800ce80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce84:	f383 8811 	msr	BASEPRI, r3
 800ce88:	f3bf 8f6f 	isb	sy
 800ce8c:	f3bf 8f4f 	dsb	sy
 800ce90:	60fb      	str	r3, [r7, #12]
}
 800ce92:	bf00      	nop
 800ce94:	e7fe      	b.n	800ce94 <pvPortMalloc+0x168>
	return pvReturn;
 800ce96:	69fb      	ldr	r3, [r7, #28]
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3728      	adds	r7, #40	; 0x28
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	20002248 	.word	0x20002248
 800cea4:	20002254 	.word	0x20002254
 800cea8:	2000224c 	.word	0x2000224c
 800ceac:	20002240 	.word	0x20002240
 800ceb0:	20002250 	.word	0x20002250

0800ceb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b086      	sub	sp, #24
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d048      	beq.n	800cf58 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cec6:	2308      	movs	r3, #8
 800cec8:	425b      	negs	r3, r3
 800ceca:	697a      	ldr	r2, [r7, #20]
 800cecc:	4413      	add	r3, r2
 800cece:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	685a      	ldr	r2, [r3, #4]
 800ced8:	4b21      	ldr	r3, [pc, #132]	; (800cf60 <vPortFree+0xac>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	4013      	ands	r3, r2
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d10a      	bne.n	800cef8 <vPortFree+0x44>
	__asm volatile
 800cee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee6:	f383 8811 	msr	BASEPRI, r3
 800ceea:	f3bf 8f6f 	isb	sy
 800ceee:	f3bf 8f4f 	dsb	sy
 800cef2:	60fb      	str	r3, [r7, #12]
}
 800cef4:	bf00      	nop
 800cef6:	e7fe      	b.n	800cef6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d00a      	beq.n	800cf16 <vPortFree+0x62>
	__asm volatile
 800cf00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf04:	f383 8811 	msr	BASEPRI, r3
 800cf08:	f3bf 8f6f 	isb	sy
 800cf0c:	f3bf 8f4f 	dsb	sy
 800cf10:	60bb      	str	r3, [r7, #8]
}
 800cf12:	bf00      	nop
 800cf14:	e7fe      	b.n	800cf14 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	685a      	ldr	r2, [r3, #4]
 800cf1a:	4b11      	ldr	r3, [pc, #68]	; (800cf60 <vPortFree+0xac>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4013      	ands	r3, r2
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d019      	beq.n	800cf58 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d115      	bne.n	800cf58 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	685a      	ldr	r2, [r3, #4]
 800cf30:	4b0b      	ldr	r3, [pc, #44]	; (800cf60 <vPortFree+0xac>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	43db      	mvns	r3, r3
 800cf36:	401a      	ands	r2, r3
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cf3c:	f7fe fc1a 	bl	800b774 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	685a      	ldr	r2, [r3, #4]
 800cf44:	4b07      	ldr	r3, [pc, #28]	; (800cf64 <vPortFree+0xb0>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4413      	add	r3, r2
 800cf4a:	4a06      	ldr	r2, [pc, #24]	; (800cf64 <vPortFree+0xb0>)
 800cf4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cf4e:	6938      	ldr	r0, [r7, #16]
 800cf50:	f000 f86c 	bl	800d02c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cf54:	f7fe fc1c 	bl	800b790 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cf58:	bf00      	nop
 800cf5a:	3718      	adds	r7, #24
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	20002254 	.word	0x20002254
 800cf64:	2000224c 	.word	0x2000224c

0800cf68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b085      	sub	sp, #20
 800cf6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf6e:	f241 339c 	movw	r3, #5020	; 0x139c
 800cf72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf74:	4b27      	ldr	r3, [pc, #156]	; (800d014 <prvHeapInit+0xac>)
 800cf76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f003 0307 	and.w	r3, r3, #7
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d00c      	beq.n	800cf9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	3307      	adds	r3, #7
 800cf86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f023 0307 	bic.w	r3, r3, #7
 800cf8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf90:	68ba      	ldr	r2, [r7, #8]
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	1ad3      	subs	r3, r2, r3
 800cf96:	4a1f      	ldr	r2, [pc, #124]	; (800d014 <prvHeapInit+0xac>)
 800cf98:	4413      	add	r3, r2
 800cf9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cfa0:	4a1d      	ldr	r2, [pc, #116]	; (800d018 <prvHeapInit+0xb0>)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cfa6:	4b1c      	ldr	r3, [pc, #112]	; (800d018 <prvHeapInit+0xb0>)
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	68ba      	ldr	r2, [r7, #8]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cfb4:	2208      	movs	r2, #8
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	1a9b      	subs	r3, r3, r2
 800cfba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f023 0307 	bic.w	r3, r3, #7
 800cfc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	4a15      	ldr	r2, [pc, #84]	; (800d01c <prvHeapInit+0xb4>)
 800cfc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cfca:	4b14      	ldr	r3, [pc, #80]	; (800d01c <prvHeapInit+0xb4>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cfd2:	4b12      	ldr	r3, [pc, #72]	; (800d01c <prvHeapInit+0xb4>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	68fa      	ldr	r2, [r7, #12]
 800cfe2:	1ad2      	subs	r2, r2, r3
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cfe8:	4b0c      	ldr	r3, [pc, #48]	; (800d01c <prvHeapInit+0xb4>)
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	4a0a      	ldr	r2, [pc, #40]	; (800d020 <prvHeapInit+0xb8>)
 800cff6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	4a09      	ldr	r2, [pc, #36]	; (800d024 <prvHeapInit+0xbc>)
 800cffe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d000:	4b09      	ldr	r3, [pc, #36]	; (800d028 <prvHeapInit+0xc0>)
 800d002:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d006:	601a      	str	r2, [r3, #0]
}
 800d008:	bf00      	nop
 800d00a:	3714      	adds	r7, #20
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bc80      	pop	{r7}
 800d010:	4770      	bx	lr
 800d012:	bf00      	nop
 800d014:	20000ea4 	.word	0x20000ea4
 800d018:	20002240 	.word	0x20002240
 800d01c:	20002248 	.word	0x20002248
 800d020:	20002250 	.word	0x20002250
 800d024:	2000224c 	.word	0x2000224c
 800d028:	20002254 	.word	0x20002254

0800d02c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d02c:	b480      	push	{r7}
 800d02e:	b085      	sub	sp, #20
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d034:	4b27      	ldr	r3, [pc, #156]	; (800d0d4 <prvInsertBlockIntoFreeList+0xa8>)
 800d036:	60fb      	str	r3, [r7, #12]
 800d038:	e002      	b.n	800d040 <prvInsertBlockIntoFreeList+0x14>
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	60fb      	str	r3, [r7, #12]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	429a      	cmp	r2, r3
 800d048:	d8f7      	bhi.n	800d03a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	68ba      	ldr	r2, [r7, #8]
 800d054:	4413      	add	r3, r2
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d108      	bne.n	800d06e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	685a      	ldr	r2, [r3, #4]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	441a      	add	r2, r3
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	68ba      	ldr	r2, [r7, #8]
 800d078:	441a      	add	r2, r3
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	429a      	cmp	r2, r3
 800d080:	d118      	bne.n	800d0b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	4b14      	ldr	r3, [pc, #80]	; (800d0d8 <prvInsertBlockIntoFreeList+0xac>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d00d      	beq.n	800d0aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	685a      	ldr	r2, [r3, #4]
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	441a      	add	r2, r3
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	601a      	str	r2, [r3, #0]
 800d0a8:	e008      	b.n	800d0bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d0aa:	4b0b      	ldr	r3, [pc, #44]	; (800d0d8 <prvInsertBlockIntoFreeList+0xac>)
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	601a      	str	r2, [r3, #0]
 800d0b2:	e003      	b.n	800d0bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681a      	ldr	r2, [r3, #0]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d0bc:	68fa      	ldr	r2, [r7, #12]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d002      	beq.n	800d0ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	687a      	ldr	r2, [r7, #4]
 800d0c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0ca:	bf00      	nop
 800d0cc:	3714      	adds	r7, #20
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bc80      	pop	{r7}
 800d0d2:	4770      	bx	lr
 800d0d4:	20002240 	.word	0x20002240
 800d0d8:	20002248 	.word	0x20002248

0800d0dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	4912      	ldr	r1, [pc, #72]	; (800d12c <MX_USB_DEVICE_Init+0x50>)
 800d0e4:	4812      	ldr	r0, [pc, #72]	; (800d130 <MX_USB_DEVICE_Init+0x54>)
 800d0e6:	f7fc f832 	bl	800914e <USBD_Init>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d001      	beq.n	800d0f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d0f0:	f7f3 fd3a 	bl	8000b68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d0f4:	490f      	ldr	r1, [pc, #60]	; (800d134 <MX_USB_DEVICE_Init+0x58>)
 800d0f6:	480e      	ldr	r0, [pc, #56]	; (800d130 <MX_USB_DEVICE_Init+0x54>)
 800d0f8:	f7fc f854 	bl	80091a4 <USBD_RegisterClass>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d001      	beq.n	800d106 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d102:	f7f3 fd31 	bl	8000b68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d106:	490c      	ldr	r1, [pc, #48]	; (800d138 <MX_USB_DEVICE_Init+0x5c>)
 800d108:	4809      	ldr	r0, [pc, #36]	; (800d130 <MX_USB_DEVICE_Init+0x54>)
 800d10a:	f7fb ff85 	bl	8009018 <USBD_CDC_RegisterInterface>
 800d10e:	4603      	mov	r3, r0
 800d110:	2b00      	cmp	r3, #0
 800d112:	d001      	beq.n	800d118 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d114:	f7f3 fd28 	bl	8000b68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d118:	4805      	ldr	r0, [pc, #20]	; (800d130 <MX_USB_DEVICE_Init+0x54>)
 800d11a:	f7fc f85c 	bl	80091d6 <USBD_Start>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b00      	cmp	r3, #0
 800d122:	d001      	beq.n	800d128 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d124:	f7f3 fd20 	bl	8000b68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d128:	bf00      	nop
 800d12a:	bd80      	pop	{r7, pc}
 800d12c:	20000140 	.word	0x20000140
 800d130:	20002698 	.word	0x20002698
 800d134:	20000028 	.word	0x20000028
 800d138:	20000130 	.word	0x20000130

0800d13c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d140:	2200      	movs	r2, #0
 800d142:	4905      	ldr	r1, [pc, #20]	; (800d158 <CDC_Init_FS+0x1c>)
 800d144:	4805      	ldr	r0, [pc, #20]	; (800d15c <CDC_Init_FS+0x20>)
 800d146:	f7fb ff7d 	bl	8009044 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d14a:	4905      	ldr	r1, [pc, #20]	; (800d160 <CDC_Init_FS+0x24>)
 800d14c:	4803      	ldr	r0, [pc, #12]	; (800d15c <CDC_Init_FS+0x20>)
 800d14e:	f7fb ff92 	bl	8009076 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d152:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d154:	4618      	mov	r0, r3
 800d156:	bd80      	pop	{r7, pc}
 800d158:	20002d44 	.word	0x20002d44
 800d15c:	20002698 	.word	0x20002698
 800d160:	2000295c 	.word	0x2000295c

0800d164 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d164:	b480      	push	{r7}
 800d166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d168:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bc80      	pop	{r7}
 800d170:	4770      	bx	lr
	...

0800d174 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	4603      	mov	r3, r0
 800d17c:	6039      	str	r1, [r7, #0]
 800d17e:	71fb      	strb	r3, [r7, #7]
 800d180:	4613      	mov	r3, r2
 800d182:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d184:	79fb      	ldrb	r3, [r7, #7]
 800d186:	2b23      	cmp	r3, #35	; 0x23
 800d188:	d84a      	bhi.n	800d220 <CDC_Control_FS+0xac>
 800d18a:	a201      	add	r2, pc, #4	; (adr r2, 800d190 <CDC_Control_FS+0x1c>)
 800d18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d190:	0800d221 	.word	0x0800d221
 800d194:	0800d221 	.word	0x0800d221
 800d198:	0800d221 	.word	0x0800d221
 800d19c:	0800d221 	.word	0x0800d221
 800d1a0:	0800d221 	.word	0x0800d221
 800d1a4:	0800d221 	.word	0x0800d221
 800d1a8:	0800d221 	.word	0x0800d221
 800d1ac:	0800d221 	.word	0x0800d221
 800d1b0:	0800d221 	.word	0x0800d221
 800d1b4:	0800d221 	.word	0x0800d221
 800d1b8:	0800d221 	.word	0x0800d221
 800d1bc:	0800d221 	.word	0x0800d221
 800d1c0:	0800d221 	.word	0x0800d221
 800d1c4:	0800d221 	.word	0x0800d221
 800d1c8:	0800d221 	.word	0x0800d221
 800d1cc:	0800d221 	.word	0x0800d221
 800d1d0:	0800d221 	.word	0x0800d221
 800d1d4:	0800d221 	.word	0x0800d221
 800d1d8:	0800d221 	.word	0x0800d221
 800d1dc:	0800d221 	.word	0x0800d221
 800d1e0:	0800d221 	.word	0x0800d221
 800d1e4:	0800d221 	.word	0x0800d221
 800d1e8:	0800d221 	.word	0x0800d221
 800d1ec:	0800d221 	.word	0x0800d221
 800d1f0:	0800d221 	.word	0x0800d221
 800d1f4:	0800d221 	.word	0x0800d221
 800d1f8:	0800d221 	.word	0x0800d221
 800d1fc:	0800d221 	.word	0x0800d221
 800d200:	0800d221 	.word	0x0800d221
 800d204:	0800d221 	.word	0x0800d221
 800d208:	0800d221 	.word	0x0800d221
 800d20c:	0800d221 	.word	0x0800d221
 800d210:	0800d221 	.word	0x0800d221
 800d214:	0800d221 	.word	0x0800d221
 800d218:	0800d221 	.word	0x0800d221
 800d21c:	0800d221 	.word	0x0800d221
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d220:	bf00      	nop
  }

  return (USBD_OK);
 800d222:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d224:	4618      	mov	r0, r3
 800d226:	370c      	adds	r7, #12
 800d228:	46bd      	mov	sp, r7
 800d22a:	bc80      	pop	{r7}
 800d22c:	4770      	bx	lr
 800d22e:	bf00      	nop

0800d230 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 800d23a:	2300      	movs	r3, #0
 800d23c:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < (*Len); i++)
 800d23e:	2300      	movs	r3, #0
 800d240:	60fb      	str	r3, [r7, #12]
 800d242:	e00c      	b.n	800d25e <CDC_Receive_FS+0x2e>
	{
		xQueueSendToBackFromISR(qUSB_rcvQueue, &Buf[i], &xHigherPriorityTaskWoken );
 800d244:	4b14      	ldr	r3, [pc, #80]	; (800d298 <CDC_Receive_FS+0x68>)
 800d246:	6818      	ldr	r0, [r3, #0]
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	18d1      	adds	r1, r2, r3
 800d24e:	f107 0208 	add.w	r2, r7, #8
 800d252:	2300      	movs	r3, #0
 800d254:	f7fd fcfa 	bl	800ac4c <xQueueGenericSendFromISR>
	for (uint32_t i = 0; i < (*Len); i++)
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	3301      	adds	r3, #1
 800d25c:	60fb      	str	r3, [r7, #12]
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	68fa      	ldr	r2, [r7, #12]
 800d264:	429a      	cmp	r2, r3
 800d266:	d3ed      	bcc.n	800d244 <CDC_Receive_FS+0x14>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d268:	6879      	ldr	r1, [r7, #4]
 800d26a:	480c      	ldr	r0, [pc, #48]	; (800d29c <CDC_Receive_FS+0x6c>)
 800d26c:	f7fb ff03 	bl	8009076 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d270:	480a      	ldr	r0, [pc, #40]	; (800d29c <CDC_Receive_FS+0x6c>)
 800d272:	f7fb ff42 	bl	80090fa <USBD_CDC_ReceivePacket>
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d007      	beq.n	800d28c <CDC_Receive_FS+0x5c>
 800d27c:	4b08      	ldr	r3, [pc, #32]	; (800d2a0 <CDC_Receive_FS+0x70>)
 800d27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d282:	601a      	str	r2, [r3, #0]
 800d284:	f3bf 8f4f 	dsb	sy
 800d288:	f3bf 8f6f 	isb	sy
  return (USBD_OK);
 800d28c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3710      	adds	r7, #16
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	2000248c 	.word	0x2000248c
 800d29c:	20002698 	.word	0x20002698
 800d2a0:	e000ed04 	.word	0xe000ed04

0800d2a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d2b4:	4b0d      	ldr	r3, [pc, #52]	; (800d2ec <CDC_Transmit_FS+0x48>)
 800d2b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d001      	beq.n	800d2ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	e00b      	b.n	800d2e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d2ca:	887b      	ldrh	r3, [r7, #2]
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	6879      	ldr	r1, [r7, #4]
 800d2d0:	4806      	ldr	r0, [pc, #24]	; (800d2ec <CDC_Transmit_FS+0x48>)
 800d2d2:	f7fb feb7 	bl	8009044 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d2d6:	4805      	ldr	r0, [pc, #20]	; (800d2ec <CDC_Transmit_FS+0x48>)
 800d2d8:	f7fb fee0 	bl	800909c <USBD_CDC_TransmitPacket>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3710      	adds	r7, #16
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	20002698 	.word	0x20002698

0800d2f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b083      	sub	sp, #12
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	6039      	str	r1, [r7, #0]
 800d2fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	2212      	movs	r2, #18
 800d300:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d302:	4b03      	ldr	r3, [pc, #12]	; (800d310 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d304:	4618      	mov	r0, r3
 800d306:	370c      	adds	r7, #12
 800d308:	46bd      	mov	sp, r7
 800d30a:	bc80      	pop	{r7}
 800d30c:	4770      	bx	lr
 800d30e:	bf00      	nop
 800d310:	2000015c 	.word	0x2000015c

0800d314 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	4603      	mov	r3, r0
 800d31c:	6039      	str	r1, [r7, #0]
 800d31e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	2204      	movs	r2, #4
 800d324:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d326:	4b03      	ldr	r3, [pc, #12]	; (800d334 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d328:	4618      	mov	r0, r3
 800d32a:	370c      	adds	r7, #12
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bc80      	pop	{r7}
 800d330:	4770      	bx	lr
 800d332:	bf00      	nop
 800d334:	20000170 	.word	0x20000170

0800d338 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	4603      	mov	r3, r0
 800d340:	6039      	str	r1, [r7, #0]
 800d342:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d344:	79fb      	ldrb	r3, [r7, #7]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d105      	bne.n	800d356 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d34a:	683a      	ldr	r2, [r7, #0]
 800d34c:	4907      	ldr	r1, [pc, #28]	; (800d36c <USBD_FS_ProductStrDescriptor+0x34>)
 800d34e:	4808      	ldr	r0, [pc, #32]	; (800d370 <USBD_FS_ProductStrDescriptor+0x38>)
 800d350:	f7fc feba 	bl	800a0c8 <USBD_GetString>
 800d354:	e004      	b.n	800d360 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d356:	683a      	ldr	r2, [r7, #0]
 800d358:	4904      	ldr	r1, [pc, #16]	; (800d36c <USBD_FS_ProductStrDescriptor+0x34>)
 800d35a:	4805      	ldr	r0, [pc, #20]	; (800d370 <USBD_FS_ProductStrDescriptor+0x38>)
 800d35c:	f7fc feb4 	bl	800a0c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d360:	4b02      	ldr	r3, [pc, #8]	; (800d36c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d362:	4618      	mov	r0, r3
 800d364:	3708      	adds	r7, #8
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	2000312c 	.word	0x2000312c
 800d370:	0800dd34 	.word	0x0800dd34

0800d374 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	4603      	mov	r3, r0
 800d37c:	6039      	str	r1, [r7, #0]
 800d37e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d380:	683a      	ldr	r2, [r7, #0]
 800d382:	4904      	ldr	r1, [pc, #16]	; (800d394 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d384:	4804      	ldr	r0, [pc, #16]	; (800d398 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d386:	f7fc fe9f 	bl	800a0c8 <USBD_GetString>
  return USBD_StrDesc;
 800d38a:	4b02      	ldr	r3, [pc, #8]	; (800d394 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3708      	adds	r7, #8
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	2000312c 	.word	0x2000312c
 800d398:	0800dd40 	.word	0x0800dd40

0800d39c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	6039      	str	r1, [r7, #0]
 800d3a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	221a      	movs	r2, #26
 800d3ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d3ae:	f000 f843 	bl	800d438 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d3b2:	4b02      	ldr	r3, [pc, #8]	; (800d3bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3708      	adds	r7, #8
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}
 800d3bc:	20000174 	.word	0x20000174

0800d3c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	6039      	str	r1, [r7, #0]
 800d3ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d3cc:	79fb      	ldrb	r3, [r7, #7]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d105      	bne.n	800d3de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d3d2:	683a      	ldr	r2, [r7, #0]
 800d3d4:	4907      	ldr	r1, [pc, #28]	; (800d3f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d3d6:	4808      	ldr	r0, [pc, #32]	; (800d3f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d3d8:	f7fc fe76 	bl	800a0c8 <USBD_GetString>
 800d3dc:	e004      	b.n	800d3e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d3de:	683a      	ldr	r2, [r7, #0]
 800d3e0:	4904      	ldr	r1, [pc, #16]	; (800d3f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d3e2:	4805      	ldr	r0, [pc, #20]	; (800d3f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d3e4:	f7fc fe70 	bl	800a0c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3e8:	4b02      	ldr	r3, [pc, #8]	; (800d3f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3708      	adds	r7, #8
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	2000312c 	.word	0x2000312c
 800d3f8:	0800dd54 	.word	0x0800dd54

0800d3fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
 800d402:	4603      	mov	r3, r0
 800d404:	6039      	str	r1, [r7, #0]
 800d406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d408:	79fb      	ldrb	r3, [r7, #7]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d105      	bne.n	800d41a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d40e:	683a      	ldr	r2, [r7, #0]
 800d410:	4907      	ldr	r1, [pc, #28]	; (800d430 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d412:	4808      	ldr	r0, [pc, #32]	; (800d434 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d414:	f7fc fe58 	bl	800a0c8 <USBD_GetString>
 800d418:	e004      	b.n	800d424 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d41a:	683a      	ldr	r2, [r7, #0]
 800d41c:	4904      	ldr	r1, [pc, #16]	; (800d430 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d41e:	4805      	ldr	r0, [pc, #20]	; (800d434 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d420:	f7fc fe52 	bl	800a0c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d424:	4b02      	ldr	r3, [pc, #8]	; (800d430 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d426:	4618      	mov	r0, r3
 800d428:	3708      	adds	r7, #8
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
 800d42e:	bf00      	nop
 800d430:	2000312c 	.word	0x2000312c
 800d434:	0800dd60 	.word	0x0800dd60

0800d438 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d43e:	4b0f      	ldr	r3, [pc, #60]	; (800d47c <Get_SerialNum+0x44>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d444:	4b0e      	ldr	r3, [pc, #56]	; (800d480 <Get_SerialNum+0x48>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d44a:	4b0e      	ldr	r3, [pc, #56]	; (800d484 <Get_SerialNum+0x4c>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d450:	68fa      	ldr	r2, [r7, #12]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	4413      	add	r3, r2
 800d456:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d009      	beq.n	800d472 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d45e:	2208      	movs	r2, #8
 800d460:	4909      	ldr	r1, [pc, #36]	; (800d488 <Get_SerialNum+0x50>)
 800d462:	68f8      	ldr	r0, [r7, #12]
 800d464:	f000 f814 	bl	800d490 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d468:	2204      	movs	r2, #4
 800d46a:	4908      	ldr	r1, [pc, #32]	; (800d48c <Get_SerialNum+0x54>)
 800d46c:	68b8      	ldr	r0, [r7, #8]
 800d46e:	f000 f80f 	bl	800d490 <IntToUnicode>
  }
}
 800d472:	bf00      	nop
 800d474:	3710      	adds	r7, #16
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	1ffff7e8 	.word	0x1ffff7e8
 800d480:	1ffff7ec 	.word	0x1ffff7ec
 800d484:	1ffff7f0 	.word	0x1ffff7f0
 800d488:	20000176 	.word	0x20000176
 800d48c:	20000186 	.word	0x20000186

0800d490 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d490:	b480      	push	{r7}
 800d492:	b087      	sub	sp, #28
 800d494:	af00      	add	r7, sp, #0
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	60b9      	str	r1, [r7, #8]
 800d49a:	4613      	mov	r3, r2
 800d49c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	75fb      	strb	r3, [r7, #23]
 800d4a6:	e027      	b.n	800d4f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	0f1b      	lsrs	r3, r3, #28
 800d4ac:	2b09      	cmp	r3, #9
 800d4ae:	d80b      	bhi.n	800d4c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	0f1b      	lsrs	r3, r3, #28
 800d4b4:	b2da      	uxtb	r2, r3
 800d4b6:	7dfb      	ldrb	r3, [r7, #23]
 800d4b8:	005b      	lsls	r3, r3, #1
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	440b      	add	r3, r1
 800d4c0:	3230      	adds	r2, #48	; 0x30
 800d4c2:	b2d2      	uxtb	r2, r2
 800d4c4:	701a      	strb	r2, [r3, #0]
 800d4c6:	e00a      	b.n	800d4de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	0f1b      	lsrs	r3, r3, #28
 800d4cc:	b2da      	uxtb	r2, r3
 800d4ce:	7dfb      	ldrb	r3, [r7, #23]
 800d4d0:	005b      	lsls	r3, r3, #1
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	440b      	add	r3, r1
 800d4d8:	3237      	adds	r2, #55	; 0x37
 800d4da:	b2d2      	uxtb	r2, r2
 800d4dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	011b      	lsls	r3, r3, #4
 800d4e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d4e4:	7dfb      	ldrb	r3, [r7, #23]
 800d4e6:	005b      	lsls	r3, r3, #1
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	68ba      	ldr	r2, [r7, #8]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d4f2:	7dfb      	ldrb	r3, [r7, #23]
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	75fb      	strb	r3, [r7, #23]
 800d4f8:	7dfa      	ldrb	r2, [r7, #23]
 800d4fa:	79fb      	ldrb	r3, [r7, #7]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d3d3      	bcc.n	800d4a8 <IntToUnicode+0x18>
  }
}
 800d500:	bf00      	nop
 800d502:	bf00      	nop
 800d504:	371c      	adds	r7, #28
 800d506:	46bd      	mov	sp, r7
 800d508:	bc80      	pop	{r7}
 800d50a:	4770      	bx	lr

0800d50c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4a0d      	ldr	r2, [pc, #52]	; (800d550 <HAL_PCD_MspInit+0x44>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d113      	bne.n	800d546 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d51e:	4b0d      	ldr	r3, [pc, #52]	; (800d554 <HAL_PCD_MspInit+0x48>)
 800d520:	69db      	ldr	r3, [r3, #28]
 800d522:	4a0c      	ldr	r2, [pc, #48]	; (800d554 <HAL_PCD_MspInit+0x48>)
 800d524:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d528:	61d3      	str	r3, [r2, #28]
 800d52a:	4b0a      	ldr	r3, [pc, #40]	; (800d554 <HAL_PCD_MspInit+0x48>)
 800d52c:	69db      	ldr	r3, [r3, #28]
 800d52e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d532:	60fb      	str	r3, [r7, #12]
 800d534:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800d536:	2200      	movs	r2, #0
 800d538:	2105      	movs	r1, #5
 800d53a:	2014      	movs	r0, #20
 800d53c:	f7f5 fb09 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800d540:	2014      	movs	r0, #20
 800d542:	f7f5 fb22 	bl	8002b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d546:	bf00      	nop
 800d548:	3710      	adds	r7, #16
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
 800d54e:	bf00      	nop
 800d550:	40005c00 	.word	0x40005c00
 800d554:	40021000 	.word	0x40021000

0800d558 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d56c:	4619      	mov	r1, r3
 800d56e:	4610      	mov	r0, r2
 800d570:	f7fb fe79 	bl	8009266 <USBD_LL_SetupStage>
}
 800d574:	bf00      	nop
 800d576:	3708      	adds	r7, #8
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	460b      	mov	r3, r1
 800d586:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d58e:	78fa      	ldrb	r2, [r7, #3]
 800d590:	6879      	ldr	r1, [r7, #4]
 800d592:	4613      	mov	r3, r2
 800d594:	009b      	lsls	r3, r3, #2
 800d596:	4413      	add	r3, r2
 800d598:	00db      	lsls	r3, r3, #3
 800d59a:	440b      	add	r3, r1
 800d59c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	78fb      	ldrb	r3, [r7, #3]
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	f7fb feab 	bl	8009300 <USBD_LL_DataOutStage>
}
 800d5aa:	bf00      	nop
 800d5ac:	3708      	adds	r7, #8
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}

0800d5b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5b2:	b580      	push	{r7, lr}
 800d5b4:	b082      	sub	sp, #8
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d5c4:	78fa      	ldrb	r2, [r7, #3]
 800d5c6:	6879      	ldr	r1, [r7, #4]
 800d5c8:	4613      	mov	r3, r2
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	4413      	add	r3, r2
 800d5ce:	00db      	lsls	r3, r3, #3
 800d5d0:	440b      	add	r3, r1
 800d5d2:	333c      	adds	r3, #60	; 0x3c
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	78fb      	ldrb	r3, [r7, #3]
 800d5d8:	4619      	mov	r1, r3
 800d5da:	f7fb ff02 	bl	80093e2 <USBD_LL_DataInStage>
}
 800d5de:	bf00      	nop
 800d5e0:	3708      	adds	r7, #8
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}

0800d5e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b082      	sub	sp, #8
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7fc f812 	bl	800961e <USBD_LL_SOF>
}
 800d5fa:	bf00      	nop
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d602:	b580      	push	{r7, lr}
 800d604:	b084      	sub	sp, #16
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d60a:	2301      	movs	r3, #1
 800d60c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	689b      	ldr	r3, [r3, #8]
 800d612:	2b02      	cmp	r3, #2
 800d614:	d001      	beq.n	800d61a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d616:	f7f3 faa7 	bl	8000b68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d620:	7bfa      	ldrb	r2, [r7, #15]
 800d622:	4611      	mov	r1, r2
 800d624:	4618      	mov	r0, r3
 800d626:	f7fb ffc2 	bl	80095ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d630:	4618      	mov	r0, r3
 800d632:	f7fb ff7b 	bl	800952c <USBD_LL_Reset>
}
 800d636:	bf00      	nop
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
	...

0800d640 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fb ffbc 	bl	80095cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	699b      	ldr	r3, [r3, #24]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d005      	beq.n	800d668 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d65c:	4b04      	ldr	r3, [pc, #16]	; (800d670 <HAL_PCD_SuspendCallback+0x30>)
 800d65e:	691b      	ldr	r3, [r3, #16]
 800d660:	4a03      	ldr	r2, [pc, #12]	; (800d670 <HAL_PCD_SuspendCallback+0x30>)
 800d662:	f043 0306 	orr.w	r3, r3, #6
 800d666:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d668:	bf00      	nop
 800d66a:	3708      	adds	r7, #8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	e000ed00 	.word	0xe000ed00

0800d674 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d682:	4618      	mov	r0, r3
 800d684:	f7fb ffb6 	bl	80095f4 <USBD_LL_Resume>
}
 800d688:	bf00      	nop
 800d68a:	3708      	adds	r7, #8
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d698:	4a28      	ldr	r2, [pc, #160]	; (800d73c <USBD_LL_Init+0xac>)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	4a26      	ldr	r2, [pc, #152]	; (800d73c <USBD_LL_Init+0xac>)
 800d6a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d6a8:	4b24      	ldr	r3, [pc, #144]	; (800d73c <USBD_LL_Init+0xac>)
 800d6aa:	4a25      	ldr	r2, [pc, #148]	; (800d740 <USBD_LL_Init+0xb0>)
 800d6ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d6ae:	4b23      	ldr	r3, [pc, #140]	; (800d73c <USBD_LL_Init+0xac>)
 800d6b0:	2208      	movs	r2, #8
 800d6b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d6b4:	4b21      	ldr	r3, [pc, #132]	; (800d73c <USBD_LL_Init+0xac>)
 800d6b6:	2202      	movs	r2, #2
 800d6b8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d6ba:	4b20      	ldr	r3, [pc, #128]	; (800d73c <USBD_LL_Init+0xac>)
 800d6bc:	2200      	movs	r2, #0
 800d6be:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d6c0:	4b1e      	ldr	r3, [pc, #120]	; (800d73c <USBD_LL_Init+0xac>)
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d6c6:	4b1d      	ldr	r3, [pc, #116]	; (800d73c <USBD_LL_Init+0xac>)
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d6cc:	481b      	ldr	r0, [pc, #108]	; (800d73c <USBD_LL_Init+0xac>)
 800d6ce:	f7f5 fd09 	bl	80030e4 <HAL_PCD_Init>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d001      	beq.n	800d6dc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d6d8:	f7f3 fa46 	bl	8000b68 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d6e2:	2318      	movs	r3, #24
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	2100      	movs	r1, #0
 800d6e8:	f7f7 f97f 	bl	80049ea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d6f2:	2358      	movs	r3, #88	; 0x58
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	2180      	movs	r1, #128	; 0x80
 800d6f8:	f7f7 f977 	bl	80049ea <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d702:	23c0      	movs	r3, #192	; 0xc0
 800d704:	2200      	movs	r2, #0
 800d706:	2181      	movs	r1, #129	; 0x81
 800d708:	f7f7 f96f 	bl	80049ea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d712:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d716:	2200      	movs	r2, #0
 800d718:	2101      	movs	r1, #1
 800d71a:	f7f7 f966 	bl	80049ea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d724:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d728:	2200      	movs	r2, #0
 800d72a:	2182      	movs	r1, #130	; 0x82
 800d72c:	f7f7 f95d 	bl	80049ea <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d730:	2300      	movs	r3, #0
}
 800d732:	4618      	mov	r0, r3
 800d734:	3708      	adds	r7, #8
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	2000332c 	.word	0x2000332c
 800d740:	40005c00 	.word	0x40005c00

0800d744 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d74c:	2300      	movs	r3, #0
 800d74e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d750:	2300      	movs	r3, #0
 800d752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7f5 fdcd 	bl	80032fa <HAL_PCD_Start>
 800d760:	4603      	mov	r3, r0
 800d762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d764:	7bfb      	ldrb	r3, [r7, #15]
 800d766:	4618      	mov	r0, r3
 800d768:	f000 f94e 	bl	800da08 <USBD_Get_USB_Status>
 800d76c:	4603      	mov	r3, r0
 800d76e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d770:	7bbb      	ldrb	r3, [r7, #14]
}
 800d772:	4618      	mov	r0, r3
 800d774:	3710      	adds	r7, #16
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b084      	sub	sp, #16
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
 800d782:	4608      	mov	r0, r1
 800d784:	4611      	mov	r1, r2
 800d786:	461a      	mov	r2, r3
 800d788:	4603      	mov	r3, r0
 800d78a:	70fb      	strb	r3, [r7, #3]
 800d78c:	460b      	mov	r3, r1
 800d78e:	70bb      	strb	r3, [r7, #2]
 800d790:	4613      	mov	r3, r2
 800d792:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d794:	2300      	movs	r3, #0
 800d796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d798:	2300      	movs	r3, #0
 800d79a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d7a2:	78bb      	ldrb	r3, [r7, #2]
 800d7a4:	883a      	ldrh	r2, [r7, #0]
 800d7a6:	78f9      	ldrb	r1, [r7, #3]
 800d7a8:	f7f5 ff47 	bl	800363a <HAL_PCD_EP_Open>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7b0:	7bfb      	ldrb	r3, [r7, #15]
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f000 f928 	bl	800da08 <USBD_Get_USB_Status>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3710      	adds	r7, #16
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}

0800d7c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7c6:	b580      	push	{r7, lr}
 800d7c8:	b084      	sub	sp, #16
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
 800d7ce:	460b      	mov	r3, r1
 800d7d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7e0:	78fa      	ldrb	r2, [r7, #3]
 800d7e2:	4611      	mov	r1, r2
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7f5 ff8e 	bl	8003706 <HAL_PCD_EP_Close>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7ee:	7bfb      	ldrb	r3, [r7, #15]
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f000 f909 	bl	800da08 <USBD_Get_USB_Status>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3710      	adds	r7, #16
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b084      	sub	sp, #16
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	460b      	mov	r3, r1
 800d80e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d810:	2300      	movs	r3, #0
 800d812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d814:	2300      	movs	r3, #0
 800d816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d81e:	78fa      	ldrb	r2, [r7, #3]
 800d820:	4611      	mov	r1, r2
 800d822:	4618      	mov	r0, r3
 800d824:	f7f6 f84e 	bl	80038c4 <HAL_PCD_EP_SetStall>
 800d828:	4603      	mov	r3, r0
 800d82a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d82c:	7bfb      	ldrb	r3, [r7, #15]
 800d82e:	4618      	mov	r0, r3
 800d830:	f000 f8ea 	bl	800da08 <USBD_Get_USB_Status>
 800d834:	4603      	mov	r3, r0
 800d836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d838:	7bbb      	ldrb	r3, [r7, #14]
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3710      	adds	r7, #16
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d842:	b580      	push	{r7, lr}
 800d844:	b084      	sub	sp, #16
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
 800d84a:	460b      	mov	r3, r1
 800d84c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d84e:	2300      	movs	r3, #0
 800d850:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d852:	2300      	movs	r3, #0
 800d854:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d85c:	78fa      	ldrb	r2, [r7, #3]
 800d85e:	4611      	mov	r1, r2
 800d860:	4618      	mov	r0, r3
 800d862:	f7f6 f88f 	bl	8003984 <HAL_PCD_EP_ClrStall>
 800d866:	4603      	mov	r3, r0
 800d868:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d86a:	7bfb      	ldrb	r3, [r7, #15]
 800d86c:	4618      	mov	r0, r3
 800d86e:	f000 f8cb 	bl	800da08 <USBD_Get_USB_Status>
 800d872:	4603      	mov	r3, r0
 800d874:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d876:	7bbb      	ldrb	r3, [r7, #14]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3710      	adds	r7, #16
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d880:	b480      	push	{r7}
 800d882:	b085      	sub	sp, #20
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	460b      	mov	r3, r1
 800d88a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d892:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d894:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	da0c      	bge.n	800d8b6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d89c:	78fb      	ldrb	r3, [r7, #3]
 800d89e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8a2:	68f9      	ldr	r1, [r7, #12]
 800d8a4:	1c5a      	adds	r2, r3, #1
 800d8a6:	4613      	mov	r3, r2
 800d8a8:	009b      	lsls	r3, r3, #2
 800d8aa:	4413      	add	r3, r2
 800d8ac:	00db      	lsls	r3, r3, #3
 800d8ae:	440b      	add	r3, r1
 800d8b0:	3302      	adds	r3, #2
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	e00b      	b.n	800d8ce <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d8b6:	78fb      	ldrb	r3, [r7, #3]
 800d8b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d8bc:	68f9      	ldr	r1, [r7, #12]
 800d8be:	4613      	mov	r3, r2
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	4413      	add	r3, r2
 800d8c4:	00db      	lsls	r3, r3, #3
 800d8c6:	440b      	add	r3, r1
 800d8c8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d8cc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3714      	adds	r7, #20
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bc80      	pop	{r7}
 800d8d6:	4770      	bx	lr

0800d8d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b084      	sub	sp, #16
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	460b      	mov	r3, r1
 800d8e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d8f2:	78fa      	ldrb	r2, [r7, #3]
 800d8f4:	4611      	mov	r1, r2
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7f5 fe7a 	bl	80035f0 <HAL_PCD_SetAddress>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d900:	7bfb      	ldrb	r3, [r7, #15]
 800d902:	4618      	mov	r0, r3
 800d904:	f000 f880 	bl	800da08 <USBD_Get_USB_Status>
 800d908:	4603      	mov	r3, r0
 800d90a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d90c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}

0800d916 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d916:	b580      	push	{r7, lr}
 800d918:	b086      	sub	sp, #24
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	60f8      	str	r0, [r7, #12]
 800d91e:	607a      	str	r2, [r7, #4]
 800d920:	461a      	mov	r2, r3
 800d922:	460b      	mov	r3, r1
 800d924:	72fb      	strb	r3, [r7, #11]
 800d926:	4613      	mov	r3, r2
 800d928:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d92a:	2300      	movs	r3, #0
 800d92c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d92e:	2300      	movs	r3, #0
 800d930:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d938:	893b      	ldrh	r3, [r7, #8]
 800d93a:	7af9      	ldrb	r1, [r7, #11]
 800d93c:	687a      	ldr	r2, [r7, #4]
 800d93e:	f7f5 ff7e 	bl	800383e <HAL_PCD_EP_Transmit>
 800d942:	4603      	mov	r3, r0
 800d944:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d946:	7dfb      	ldrb	r3, [r7, #23]
 800d948:	4618      	mov	r0, r3
 800d94a:	f000 f85d 	bl	800da08 <USBD_Get_USB_Status>
 800d94e:	4603      	mov	r3, r0
 800d950:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d952:	7dbb      	ldrb	r3, [r7, #22]
}
 800d954:	4618      	mov	r0, r3
 800d956:	3718      	adds	r7, #24
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b086      	sub	sp, #24
 800d960:	af00      	add	r7, sp, #0
 800d962:	60f8      	str	r0, [r7, #12]
 800d964:	607a      	str	r2, [r7, #4]
 800d966:	461a      	mov	r2, r3
 800d968:	460b      	mov	r3, r1
 800d96a:	72fb      	strb	r3, [r7, #11]
 800d96c:	4613      	mov	r3, r2
 800d96e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d970:	2300      	movs	r3, #0
 800d972:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d974:	2300      	movs	r3, #0
 800d976:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d97e:	893b      	ldrh	r3, [r7, #8]
 800d980:	7af9      	ldrb	r1, [r7, #11]
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	f7f5 ff07 	bl	8003796 <HAL_PCD_EP_Receive>
 800d988:	4603      	mov	r3, r0
 800d98a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d98c:	7dfb      	ldrb	r3, [r7, #23]
 800d98e:	4618      	mov	r0, r3
 800d990:	f000 f83a 	bl	800da08 <USBD_Get_USB_Status>
 800d994:	4603      	mov	r3, r0
 800d996:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d998:	7dbb      	ldrb	r3, [r7, #22]
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3718      	adds	r7, #24
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b082      	sub	sp, #8
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d9b4:	78fa      	ldrb	r2, [r7, #3]
 800d9b6:	4611      	mov	r1, r2
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7f5 ff29 	bl	8003810 <HAL_PCD_EP_GetRxCount>
 800d9be:	4603      	mov	r3, r0
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3708      	adds	r7, #8
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b083      	sub	sp, #12
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d9d0:	4b02      	ldr	r3, [pc, #8]	; (800d9dc <USBD_static_malloc+0x14>)
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	370c      	adds	r7, #12
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bc80      	pop	{r7}
 800d9da:	4770      	bx	lr
 800d9dc:	20002258 	.word	0x20002258

0800d9e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]

}
 800d9e8:	bf00      	nop
 800d9ea:	370c      	adds	r7, #12
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bc80      	pop	{r7}
 800d9f0:	4770      	bx	lr

0800d9f2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9f2:	b480      	push	{r7}
 800d9f4:	b083      	sub	sp, #12
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d9fe:	bf00      	nop
 800da00:	370c      	adds	r7, #12
 800da02:	46bd      	mov	sp, r7
 800da04:	bc80      	pop	{r7}
 800da06:	4770      	bx	lr

0800da08 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800da08:	b480      	push	{r7}
 800da0a:	b085      	sub	sp, #20
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	4603      	mov	r3, r0
 800da10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da12:	2300      	movs	r3, #0
 800da14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800da16:	79fb      	ldrb	r3, [r7, #7]
 800da18:	2b03      	cmp	r3, #3
 800da1a:	d817      	bhi.n	800da4c <USBD_Get_USB_Status+0x44>
 800da1c:	a201      	add	r2, pc, #4	; (adr r2, 800da24 <USBD_Get_USB_Status+0x1c>)
 800da1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da22:	bf00      	nop
 800da24:	0800da35 	.word	0x0800da35
 800da28:	0800da3b 	.word	0x0800da3b
 800da2c:	0800da41 	.word	0x0800da41
 800da30:	0800da47 	.word	0x0800da47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800da34:	2300      	movs	r3, #0
 800da36:	73fb      	strb	r3, [r7, #15]
    break;
 800da38:	e00b      	b.n	800da52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800da3a:	2302      	movs	r3, #2
 800da3c:	73fb      	strb	r3, [r7, #15]
    break;
 800da3e:	e008      	b.n	800da52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800da40:	2301      	movs	r3, #1
 800da42:	73fb      	strb	r3, [r7, #15]
    break;
 800da44:	e005      	b.n	800da52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800da46:	2302      	movs	r3, #2
 800da48:	73fb      	strb	r3, [r7, #15]
    break;
 800da4a:	e002      	b.n	800da52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800da4c:	2302      	movs	r3, #2
 800da4e:	73fb      	strb	r3, [r7, #15]
    break;
 800da50:	bf00      	nop
  }
  return usb_status;
 800da52:	7bfb      	ldrb	r3, [r7, #15]
}
 800da54:	4618      	mov	r0, r3
 800da56:	3714      	adds	r7, #20
 800da58:	46bd      	mov	sp, r7
 800da5a:	bc80      	pop	{r7}
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop

0800da60 <__libc_init_array>:
 800da60:	b570      	push	{r4, r5, r6, lr}
 800da62:	2600      	movs	r6, #0
 800da64:	4d0c      	ldr	r5, [pc, #48]	; (800da98 <__libc_init_array+0x38>)
 800da66:	4c0d      	ldr	r4, [pc, #52]	; (800da9c <__libc_init_array+0x3c>)
 800da68:	1b64      	subs	r4, r4, r5
 800da6a:	10a4      	asrs	r4, r4, #2
 800da6c:	42a6      	cmp	r6, r4
 800da6e:	d109      	bne.n	800da84 <__libc_init_array+0x24>
 800da70:	f000 f862 	bl	800db38 <_init>
 800da74:	2600      	movs	r6, #0
 800da76:	4d0a      	ldr	r5, [pc, #40]	; (800daa0 <__libc_init_array+0x40>)
 800da78:	4c0a      	ldr	r4, [pc, #40]	; (800daa4 <__libc_init_array+0x44>)
 800da7a:	1b64      	subs	r4, r4, r5
 800da7c:	10a4      	asrs	r4, r4, #2
 800da7e:	42a6      	cmp	r6, r4
 800da80:	d105      	bne.n	800da8e <__libc_init_array+0x2e>
 800da82:	bd70      	pop	{r4, r5, r6, pc}
 800da84:	f855 3b04 	ldr.w	r3, [r5], #4
 800da88:	4798      	blx	r3
 800da8a:	3601      	adds	r6, #1
 800da8c:	e7ee      	b.n	800da6c <__libc_init_array+0xc>
 800da8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800da92:	4798      	blx	r3
 800da94:	3601      	adds	r6, #1
 800da96:	e7f2      	b.n	800da7e <__libc_init_array+0x1e>
 800da98:	0800e294 	.word	0x0800e294
 800da9c:	0800e294 	.word	0x0800e294
 800daa0:	0800e294 	.word	0x0800e294
 800daa4:	0800e298 	.word	0x0800e298

0800daa8 <memcpy>:
 800daa8:	440a      	add	r2, r1
 800daaa:	4291      	cmp	r1, r2
 800daac:	f100 33ff 	add.w	r3, r0, #4294967295
 800dab0:	d100      	bne.n	800dab4 <memcpy+0xc>
 800dab2:	4770      	bx	lr
 800dab4:	b510      	push	{r4, lr}
 800dab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800daba:	4291      	cmp	r1, r2
 800dabc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dac0:	d1f9      	bne.n	800dab6 <memcpy+0xe>
 800dac2:	bd10      	pop	{r4, pc}

0800dac4 <memmove>:
 800dac4:	4288      	cmp	r0, r1
 800dac6:	b510      	push	{r4, lr}
 800dac8:	eb01 0402 	add.w	r4, r1, r2
 800dacc:	d902      	bls.n	800dad4 <memmove+0x10>
 800dace:	4284      	cmp	r4, r0
 800dad0:	4623      	mov	r3, r4
 800dad2:	d807      	bhi.n	800dae4 <memmove+0x20>
 800dad4:	1e43      	subs	r3, r0, #1
 800dad6:	42a1      	cmp	r1, r4
 800dad8:	d008      	beq.n	800daec <memmove+0x28>
 800dada:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dade:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dae2:	e7f8      	b.n	800dad6 <memmove+0x12>
 800dae4:	4601      	mov	r1, r0
 800dae6:	4402      	add	r2, r0
 800dae8:	428a      	cmp	r2, r1
 800daea:	d100      	bne.n	800daee <memmove+0x2a>
 800daec:	bd10      	pop	{r4, pc}
 800daee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800daf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800daf6:	e7f7      	b.n	800dae8 <memmove+0x24>

0800daf8 <memset>:
 800daf8:	4603      	mov	r3, r0
 800dafa:	4402      	add	r2, r0
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d100      	bne.n	800db02 <memset+0xa>
 800db00:	4770      	bx	lr
 800db02:	f803 1b01 	strb.w	r1, [r3], #1
 800db06:	e7f9      	b.n	800dafc <memset+0x4>

0800db08 <strstr>:
 800db08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db0a:	780c      	ldrb	r4, [r1, #0]
 800db0c:	b164      	cbz	r4, 800db28 <strstr+0x20>
 800db0e:	4603      	mov	r3, r0
 800db10:	781a      	ldrb	r2, [r3, #0]
 800db12:	4618      	mov	r0, r3
 800db14:	1c5e      	adds	r6, r3, #1
 800db16:	b90a      	cbnz	r2, 800db1c <strstr+0x14>
 800db18:	4610      	mov	r0, r2
 800db1a:	e005      	b.n	800db28 <strstr+0x20>
 800db1c:	4294      	cmp	r4, r2
 800db1e:	d108      	bne.n	800db32 <strstr+0x2a>
 800db20:	460d      	mov	r5, r1
 800db22:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800db26:	b902      	cbnz	r2, 800db2a <strstr+0x22>
 800db28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db2a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800db2e:	4297      	cmp	r7, r2
 800db30:	d0f7      	beq.n	800db22 <strstr+0x1a>
 800db32:	4633      	mov	r3, r6
 800db34:	e7ec      	b.n	800db10 <strstr+0x8>
	...

0800db38 <_init>:
 800db38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db3a:	bf00      	nop
 800db3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db3e:	bc08      	pop	{r3}
 800db40:	469e      	mov	lr, r3
 800db42:	4770      	bx	lr

0800db44 <_fini>:
 800db44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db46:	bf00      	nop
 800db48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db4a:	bc08      	pop	{r3}
 800db4c:	469e      	mov	lr, r3
 800db4e:	4770      	bx	lr
