
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee90  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  0800efa0  0800efa0  0001efa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7ac  0800f7ac  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800f7ac  0800f7ac  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f7ac  0800f7ac  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7ac  0800f7ac  0001f7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7b0  0800f7b0  0001f7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800f7b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034c4  20000190  0800f944  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003654  0800f944  00023654  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d5bb  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e2c  00000000  00000000  0004d774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e58  00000000  00000000  000535a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c28  00000000  00000000  000553f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eaa3  00000000  00000000  00057020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000263d4  00000000  00000000  00075ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c6cd  00000000  00000000  0009be97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00138564  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007de4  00000000  00000000  001385b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000190 	.word	0x20000190
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ef88 	.word	0x0800ef88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000194 	.word	0x20000194
 800014c:	0800ef88 	.word	0x0800ef88

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <d3231_get_time>:

#define D3231_ADDRESS (0b1101000 << 1)
uint8_t d3231_mem[19];

uint8_t * d3231_get_time(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b084      	sub	sp, #16
 8000178:	af04      	add	r7, sp, #16
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 800017a:	4b0f      	ldr	r3, [pc, #60]	; (80001b8 <d3231_get_time+0x44>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	f04f 31ff 	mov.w	r1, #4294967295
 8000182:	4618      	mov	r0, r3
 8000184:	f00b ffb4 	bl	800c0f0 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(&hi2c1, D3231_ADDRESS, 0, 1, d3231_mem, 3, 10);
 8000188:	230a      	movs	r3, #10
 800018a:	9302      	str	r3, [sp, #8]
 800018c:	2303      	movs	r3, #3
 800018e:	9301      	str	r3, [sp, #4]
 8000190:	4b0a      	ldr	r3, [pc, #40]	; (80001bc <d3231_get_time+0x48>)
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2301      	movs	r3, #1
 8000196:	2200      	movs	r2, #0
 8000198:	21d0      	movs	r1, #208	; 0xd0
 800019a:	4809      	ldr	r0, [pc, #36]	; (80001c0 <d3231_get_time+0x4c>)
 800019c:	f003 fe2e 	bl	8003dfc <HAL_I2C_Mem_Read>
	xSemaphoreGive(muI2CHandle);
 80001a0:	4b05      	ldr	r3, [pc, #20]	; (80001b8 <d3231_get_time+0x44>)
 80001a2:	6818      	ldr	r0, [r3, #0]
 80001a4:	2300      	movs	r3, #0
 80001a6:	2200      	movs	r2, #0
 80001a8:	2100      	movs	r1, #0
 80001aa:	f00b fd2b 	bl	800bc04 <xQueueGenericSend>
	return d3231_mem;
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <d3231_get_time+0x48>)
}
 80001b0:	4618      	mov	r0, r3
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	2000248c 	.word	0x2000248c
 80001bc:	20002478 	.word	0x20002478
 80001c0:	200024ac 	.word	0x200024ac

080001c4 <d3231_get_temp>:

uint8_t * d3231_get_temp(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af04      	add	r7, sp, #16
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 80001ca:	4b0f      	ldr	r3, [pc, #60]	; (8000208 <d3231_get_temp+0x44>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	f04f 31ff 	mov.w	r1, #4294967295
 80001d2:	4618      	mov	r0, r3
 80001d4:	f00b ff8c 	bl	800c0f0 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(&hi2c1, D3231_ADDRESS, 0x11, 1, d3231_mem+0x11, 2, 10);
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <d3231_get_temp+0x48>)
 80001da:	220a      	movs	r2, #10
 80001dc:	9202      	str	r2, [sp, #8]
 80001de:	2202      	movs	r2, #2
 80001e0:	9201      	str	r2, [sp, #4]
 80001e2:	9300      	str	r3, [sp, #0]
 80001e4:	2301      	movs	r3, #1
 80001e6:	2211      	movs	r2, #17
 80001e8:	21d0      	movs	r1, #208	; 0xd0
 80001ea:	4809      	ldr	r0, [pc, #36]	; (8000210 <d3231_get_temp+0x4c>)
 80001ec:	f003 fe06 	bl	8003dfc <HAL_I2C_Mem_Read>
	xSemaphoreGive(muI2CHandle);
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <d3231_get_temp+0x44>)
 80001f2:	6818      	ldr	r0, [r3, #0]
 80001f4:	2300      	movs	r3, #0
 80001f6:	2200      	movs	r2, #0
 80001f8:	2100      	movs	r1, #0
 80001fa:	f00b fd03 	bl	800bc04 <xQueueGenericSend>
	return d3231_mem+0x11;
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <d3231_get_temp+0x48>)
}
 8000200:	4618      	mov	r0, r3
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	2000248c 	.word	0x2000248c
 800020c:	20002489 	.word	0x20002489
 8000210:	200024ac 	.word	0x200024ac

08000214 <d3231_get_all>:

uint8_t * d3231_get_all(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af04      	add	r7, sp, #16
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 800021a:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <d3231_get_all+0x44>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f04f 31ff 	mov.w	r1, #4294967295
 8000222:	4618      	mov	r0, r3
 8000224:	f00b ff64 	bl	800c0f0 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(&hi2c1, D3231_ADDRESS, 0, 1, d3231_mem, 19, 100);
 8000228:	2364      	movs	r3, #100	; 0x64
 800022a:	9302      	str	r3, [sp, #8]
 800022c:	2313      	movs	r3, #19
 800022e:	9301      	str	r3, [sp, #4]
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <d3231_get_all+0x48>)
 8000232:	9300      	str	r3, [sp, #0]
 8000234:	2301      	movs	r3, #1
 8000236:	2200      	movs	r2, #0
 8000238:	21d0      	movs	r1, #208	; 0xd0
 800023a:	4809      	ldr	r0, [pc, #36]	; (8000260 <d3231_get_all+0x4c>)
 800023c:	f003 fdde 	bl	8003dfc <HAL_I2C_Mem_Read>
	xSemaphoreGive(muI2CHandle);
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <d3231_get_all+0x44>)
 8000242:	6818      	ldr	r0, [r3, #0]
 8000244:	2300      	movs	r3, #0
 8000246:	2200      	movs	r2, #0
 8000248:	2100      	movs	r1, #0
 800024a:	f00b fcdb 	bl	800bc04 <xQueueGenericSend>
	return d3231_mem;
 800024e:	4b03      	ldr	r3, [pc, #12]	; (800025c <d3231_get_all+0x48>)
}
 8000250:	4618      	mov	r0, r3
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	2000248c 	.word	0x2000248c
 800025c:	20002478 	.word	0x20002478
 8000260:	200024ac 	.word	0x200024ac

08000264 <d3231_get_A2M2>:

uint8_t d3231_get_A2M2(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	return d3231_get_all()[0xB];
 8000268:	f7ff ffd4 	bl	8000214 <d3231_get_all>
 800026c:	4603      	mov	r3, r0
 800026e:	7adb      	ldrb	r3, [r3, #11]
}
 8000270:	4618      	mov	r0, r3
 8000272:	bd80      	pop	{r7, pc}

08000274 <d3231_set_A2M2>:

void d3231_set_A2M2(uint8_t data)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b086      	sub	sp, #24
 8000278:	af04      	add	r7, sp, #16
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 800027e:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <d3231_set_A2M2+0x48>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f04f 31ff 	mov.w	r1, #4294967295
 8000286:	4618      	mov	r0, r3
 8000288:	f00b ff32 	bl	800c0f0 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Write(&hi2c1, D3231_ADDRESS, 0xB, 1, &data, 1, 100);
 800028c:	2364      	movs	r3, #100	; 0x64
 800028e:	9302      	str	r3, [sp, #8]
 8000290:	2301      	movs	r3, #1
 8000292:	9301      	str	r3, [sp, #4]
 8000294:	1dfb      	adds	r3, r7, #7
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	2301      	movs	r3, #1
 800029a:	220b      	movs	r2, #11
 800029c:	21d0      	movs	r1, #208	; 0xd0
 800029e:	4808      	ldr	r0, [pc, #32]	; (80002c0 <d3231_set_A2M2+0x4c>)
 80002a0:	f003 fcb2 	bl	8003c08 <HAL_I2C_Mem_Write>
	xSemaphoreGive(muI2CHandle);
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <d3231_set_A2M2+0x48>)
 80002a6:	6818      	ldr	r0, [r3, #0]
 80002a8:	2300      	movs	r3, #0
 80002aa:	2200      	movs	r2, #0
 80002ac:	2100      	movs	r1, #0
 80002ae:	f00b fca9 	bl	800bc04 <xQueueGenericSend>
}
 80002b2:	bf00      	nop
 80002b4:	3708      	adds	r7, #8
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	2000248c 	.word	0x2000248c
 80002c0:	200024ac 	.word	0x200024ac

080002c4 <d3231_set>:

void d3231_set(uint8_t * arr, bool date)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af04      	add	r7, sp, #16
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	70fb      	strb	r3, [r7, #3]
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 80002d0:	4b10      	ldr	r3, [pc, #64]	; (8000314 <d3231_set+0x50>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f04f 31ff 	mov.w	r1, #4294967295
 80002d8:	4618      	mov	r0, r3
 80002da:	f00b ff09 	bl	800c0f0 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Write(&hi2c1, D3231_ADDRESS, date<<2, 1, arr, 3, 100);
 80002de:	78fb      	ldrb	r3, [r7, #3]
 80002e0:	b29b      	uxth	r3, r3
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	b29a      	uxth	r2, r3
 80002e6:	2364      	movs	r3, #100	; 0x64
 80002e8:	9302      	str	r3, [sp, #8]
 80002ea:	2303      	movs	r3, #3
 80002ec:	9301      	str	r3, [sp, #4]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	9300      	str	r3, [sp, #0]
 80002f2:	2301      	movs	r3, #1
 80002f4:	21d0      	movs	r1, #208	; 0xd0
 80002f6:	4808      	ldr	r0, [pc, #32]	; (8000318 <d3231_set+0x54>)
 80002f8:	f003 fc86 	bl	8003c08 <HAL_I2C_Mem_Write>
	xSemaphoreGive(muI2CHandle);
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <d3231_set+0x50>)
 80002fe:	6818      	ldr	r0, [r3, #0]
 8000300:	2300      	movs	r3, #0
 8000302:	2200      	movs	r2, #0
 8000304:	2100      	movs	r1, #0
 8000306:	f00b fc7d 	bl	800bc04 <xQueueGenericSend>
}
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	2000248c 	.word	0x2000248c
 8000318:	200024ac 	.word	0x200024ac

0800031c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of muI2C */
  muI2CHandle = osMutexNew(&muI2C_attributes);
 8000320:	481d      	ldr	r0, [pc, #116]	; (8000398 <MX_FREERTOS_Init+0x7c>)
 8000322:	f00b f8df 	bl	800b4e4 <osMutexNew>
 8000326:	4603      	mov	r3, r0
 8000328:	4a1c      	ldr	r2, [pc, #112]	; (800039c <MX_FREERTOS_Init+0x80>)
 800032a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qUSB_rcv */
  qUSB_rcvHandle = osMessageQueueNew (32, sizeof(uint8_t), &qUSB_rcv_attributes);
 800032c:	4a1c      	ldr	r2, [pc, #112]	; (80003a0 <MX_FREERTOS_Init+0x84>)
 800032e:	2101      	movs	r1, #1
 8000330:	2020      	movs	r0, #32
 8000332:	f00b f971 	bl	800b618 <osMessageQueueNew>
 8000336:	4603      	mov	r3, r0
 8000338:	4a1a      	ldr	r2, [pc, #104]	; (80003a4 <MX_FREERTOS_Init+0x88>)
 800033a:	6013      	str	r3, [r2, #0]

  /* creation of qVFD */
  qVFDHandle = osMessageQueueNew (16, sizeof(uint16_t), &qVFD_attributes);
 800033c:	4a1a      	ldr	r2, [pc, #104]	; (80003a8 <MX_FREERTOS_Init+0x8c>)
 800033e:	2102      	movs	r1, #2
 8000340:	2010      	movs	r0, #16
 8000342:	f00b f969 	bl	800b618 <osMessageQueueNew>
 8000346:	4603      	mov	r3, r0
 8000348:	4a18      	ldr	r2, [pc, #96]	; (80003ac <MX_FREERTOS_Init+0x90>)
 800034a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800034c:	4a18      	ldr	r2, [pc, #96]	; (80003b0 <MX_FREERTOS_Init+0x94>)
 800034e:	2100      	movs	r1, #0
 8000350:	4818      	ldr	r0, [pc, #96]	; (80003b4 <MX_FREERTOS_Init+0x98>)
 8000352:	f00a ffef 	bl	800b334 <osThreadNew>
 8000356:	4603      	mov	r3, r0
 8000358:	4a17      	ldr	r2, [pc, #92]	; (80003b8 <MX_FREERTOS_Init+0x9c>)
 800035a:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 800035c:	4a17      	ldr	r2, [pc, #92]	; (80003bc <MX_FREERTOS_Init+0xa0>)
 800035e:	2100      	movs	r1, #0
 8000360:	4817      	ldr	r0, [pc, #92]	; (80003c0 <MX_FREERTOS_Init+0xa4>)
 8000362:	f00a ffe7 	bl	800b334 <osThreadNew>
 8000366:	4603      	mov	r3, r0
 8000368:	4a16      	ldr	r2, [pc, #88]	; (80003c4 <MX_FREERTOS_Init+0xa8>)
 800036a:	6013      	str	r3, [r2, #0]

  /* creation of taskUSB_rcv */
  taskUSB_rcvHandle = osThreadNew(StartUSB_rcv, NULL, &taskUSB_rcv_attributes);
 800036c:	4a16      	ldr	r2, [pc, #88]	; (80003c8 <MX_FREERTOS_Init+0xac>)
 800036e:	2100      	movs	r1, #0
 8000370:	4816      	ldr	r0, [pc, #88]	; (80003cc <MX_FREERTOS_Init+0xb0>)
 8000372:	f00a ffdf 	bl	800b334 <osThreadNew>
 8000376:	4603      	mov	r3, r0
 8000378:	4a15      	ldr	r2, [pc, #84]	; (80003d0 <MX_FREERTOS_Init+0xb4>)
 800037a:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(StartEncoder, NULL, &Encoder_attributes);
 800037c:	4a15      	ldr	r2, [pc, #84]	; (80003d4 <MX_FREERTOS_Init+0xb8>)
 800037e:	2100      	movs	r1, #0
 8000380:	4815      	ldr	r0, [pc, #84]	; (80003d8 <MX_FREERTOS_Init+0xbc>)
 8000382:	f00a ffd7 	bl	800b334 <osThreadNew>
 8000386:	4603      	mov	r3, r0
 8000388:	4a14      	ldr	r2, [pc, #80]	; (80003dc <MX_FREERTOS_Init+0xc0>)
 800038a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  qUSB_rcvQueue = qUSB_rcvHandle; // adding to freertos_inc.h
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <MX_FREERTOS_Init+0x88>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a13      	ldr	r2, [pc, #76]	; (80003e0 <MX_FREERTOS_Init+0xc4>)
 8000392:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	0800f2b4 	.word	0x0800f2b4
 800039c:	2000248c 	.word	0x2000248c
 80003a0:	0800f284 	.word	0x0800f284
 80003a4:	200024a4 	.word	0x200024a4
 80003a8:	0800f29c 	.word	0x0800f29c
 80003ac:	20002490 	.word	0x20002490
 80003b0:	0800f1f4 	.word	0x0800f1f4
 80003b4:	080003e5 	.word	0x080003e5
 80003b8:	20002498 	.word	0x20002498
 80003bc:	0800f218 	.word	0x0800f218
 80003c0:	08000419 	.word	0x08000419
 80003c4:	2000249c 	.word	0x2000249c
 80003c8:	0800f23c 	.word	0x0800f23c
 80003cc:	08000475 	.word	0x08000475
 80003d0:	200024a0 	.word	0x200024a0
 80003d4:	0800f260 	.word	0x0800f260
 80003d8:	080004bd 	.word	0x080004bd
 80003dc:	200024a8 	.word	0x200024a8
 80003e0:	20002494 	.word	0x20002494

080003e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80003ec:	f00e f89e 	bl	800e52c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */


  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003f6:	4807      	ldr	r0, [pc, #28]	; (8000414 <StartDefaultTask+0x30>)
 80003f8:	f003 fa6f 	bl	80038da <HAL_GPIO_WritePin>
  osDelay(10);
 80003fc:	200a      	movs	r0, #10
 80003fe:	f00b f843 	bl	800b488 <osDelay>
  init_microrl();
 8000402:	f002 fb5d 	bl	8002ac0 <init_microrl>
  set_CDC_ready(); // allow to send
 8000406:	f002 fb95 	bl	8002b34 <set_CDC_ready>
  for(;;)
  {
#if USE_ENCODER
    process_encoder();
#endif
    osDelay(1);
 800040a:	2001      	movs	r0, #1
 800040c:	f00b f83c 	bl	800b488 <osDelay>
 8000410:	e7fb      	b.n	800040a <StartDefaultTask+0x26>
 8000412:	bf00      	nop
 8000414:	40010800 	.word	0x40010800

08000418 <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 8000420:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000424:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 8000426:	f00c fc4f 	bl	800ccc8 <xTaskGetTickCount>
 800042a:	4603      	mov	r3, r0
 800042c:	60bb      	str	r3, [r7, #8]

		if (use_leds)
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <StartLEDheartbeat+0x50>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d005      	beq.n	8000442 <StartLEDheartbeat+0x2a>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000436:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043a:	480c      	ldr	r0, [pc, #48]	; (800046c <StartLEDheartbeat+0x54>)
 800043c:	f003 fa65 	bl	800390a <HAL_GPIO_TogglePin>
 8000440:	e005      	b.n	800044e <StartLEDheartbeat+0x36>
		else
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000442:	2201      	movs	r2, #1
 8000444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000448:	4808      	ldr	r0, [pc, #32]	; (800046c <StartLEDheartbeat+0x54>)
 800044a:	f003 fa46 	bl	80038da <HAL_GPIO_WritePin>

		tick_counter++;
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <StartLEDheartbeat+0x58>)
 8000450:	881b      	ldrh	r3, [r3, #0]
 8000452:	3301      	adds	r3, #1
 8000454:	b29a      	uxth	r2, r3
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <StartLEDheartbeat+0x58>)
 8000458:	801a      	strh	r2, [r3, #0]

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800045a:	f107 0308 	add.w	r3, r7, #8
 800045e:	68f9      	ldr	r1, [r7, #12]
 8000460:	4618      	mov	r0, r3
 8000462:	f00c fa6d 	bl	800c940 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8000466:	e7de      	b.n	8000426 <StartLEDheartbeat+0xe>
 8000468:	200001b0 	.word	0x200001b0
 800046c:	40011000 	.word	0x40011000
 8000470:	200001ac 	.word	0x200001ac

08000474 <StartUSB_rcv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSB_rcv */
void StartUSB_rcv(void *argument)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	char buf;

	UBaseType_t uxHighWaterMark, uxHighWaterMark_old;

	/* Inspect our own high water mark on entering the task. */
	uxHighWaterMark_old = uxTaskGetStackHighWaterMark( NULL );
 800047c:	2000      	movs	r0, #0
 800047e:	f00c ff25 	bl	800d2cc <uxTaskGetStackHighWaterMark>
 8000482:	6178      	str	r0, [r7, #20]
	uxHighWaterMark = uxHighWaterMark_old;
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 8000488:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <StartUSB_rcv+0x44>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f107 010f 	add.w	r1, r7, #15
 8000490:	f04f 32ff 	mov.w	r2, #4294967295
 8000494:	4618      	mov	r0, r3
 8000496:	f00b fd4b 	bl	800bf30 <xQueueReceive>
	  microrl_print_char(buf);
 800049a:	7bfb      	ldrb	r3, [r7, #15]
 800049c:	4618      	mov	r0, r3
 800049e:	f001 ff9b 	bl	80023d8 <microrl_print_char>
	  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80004a2:	2000      	movs	r0, #0
 80004a4:	f00c ff12 	bl	800d2cc <uxTaskGetStackHighWaterMark>
 80004a8:	6138      	str	r0, [r7, #16]
	  if (uxHighWaterMark < uxHighWaterMark_old)
 80004aa:	693a      	ldr	r2, [r7, #16]
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d2ea      	bcs.n	8000488 <StartUSB_rcv+0x14>
	  {
		  uxHighWaterMark_old = uxHighWaterMark;
 80004b2:	693b      	ldr	r3, [r7, #16]
 80004b4:	617b      	str	r3, [r7, #20]
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80004b6:	e7e7      	b.n	8000488 <StartUSB_rcv+0x14>
 80004b8:	20002494 	.word	0x20002494

080004bc <StartEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoder */
void StartEncoder(void *argument)
{
 80004bc:	b5b0      	push	{r4, r5, r7, lr}
 80004be:	b0b2      	sub	sp, #200	; 0xc8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]

	static bool invert = true;
	static bool released = true;


  osDelay(500);
 80004c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004c8:	f00a ffde 	bl	800b488 <osDelay>
  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2120      	movs	r1, #32
 80004d0:	48d8      	ldr	r0, [pc, #864]	; (8000834 <StartEncoder+0x378>)
 80004d2:	f003 fa02 	bl	80038da <HAL_GPIO_WritePin>
  union VFD {
	  uint8_t arr2[11][3];
	  uint8_t arr1[11*3];
  } vfd;

  for (int i = 0; i < sizeof(vfd.arr1); i++)
 80004d6:	2300      	movs	r3, #0
 80004d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80004dc:	e00b      	b.n	80004f6 <StartEncoder+0x3a>
  {
	  vfd.arr1[i] = 0xFF;
 80004de:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80004e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80004e6:	4413      	add	r3, r2
 80004e8:	22ff      	movs	r2, #255	; 0xff
 80004ea:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < sizeof(vfd.arr1); i++)
 80004ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80004f0:	3301      	adds	r3, #1
 80004f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80004f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80004fa:	2b20      	cmp	r3, #32
 80004fc:	d9ef      	bls.n	80004de <StartEncoder+0x22>
  }
  uint8_t data;

  data = 0b01000001; // command 2, write to LED port
 80004fe:	2341      	movs	r3, #65	; 0x41
 8000500:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800050a:	48ca      	ldr	r0, [pc, #808]	; (8000834 <StartEncoder+0x378>)
 800050c:	f003 f9e5 	bl	80038da <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000510:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8000514:	f04f 33ff 	mov.w	r3, #4294967295
 8000518:	2201      	movs	r2, #1
 800051a:	48c7      	ldr	r0, [pc, #796]	; (8000838 <StartEncoder+0x37c>)
 800051c:	f006 fc7c 	bl	8006e18 <HAL_SPI_Transmit>
  osDelay(10);
 8000520:	200a      	movs	r0, #10
 8000522:	f00a ffb1 	bl	800b488 <osDelay>

  data = 0b1111; // disable LEDs
 8000526:	230f      	movs	r3, #15
 8000528:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800052c:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8000530:	f04f 33ff 	mov.w	r3, #4294967295
 8000534:	2201      	movs	r2, #1
 8000536:	48c0      	ldr	r0, [pc, #768]	; (8000838 <StartEncoder+0x37c>)
 8000538:	f006 fc6e 	bl	8006e18 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000542:	48bc      	ldr	r0, [pc, #752]	; (8000834 <StartEncoder+0x378>)
 8000544:	f003 f9c9 	bl	80038da <HAL_GPIO_WritePin>


  data = 0b01000000; // command 2, write to Display port
 8000548:	2340      	movs	r3, #64	; 0x40
 800054a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000554:	48b7      	ldr	r0, [pc, #732]	; (8000834 <StartEncoder+0x378>)
 8000556:	f003 f9c0 	bl	80038da <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800055a:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 800055e:	f04f 33ff 	mov.w	r3, #4294967295
 8000562:	2201      	movs	r2, #1
 8000564:	48b4      	ldr	r0, [pc, #720]	; (8000838 <StartEncoder+0x37c>)
 8000566:	f006 fc57 	bl	8006e18 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000570:	48b0      	ldr	r0, [pc, #704]	; (8000834 <StartEncoder+0x378>)
 8000572:	f003 f9b2 	bl	80038da <HAL_GPIO_WritePin>
  osDelay(10);
 8000576:	200a      	movs	r0, #10
 8000578:	f00a ff86 	bl	800b488 <osDelay>
  data = 0b11000000; // command 3, set address to 0
 800057c:	23c0      	movs	r3, #192	; 0xc0
 800057e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000588:	48aa      	ldr	r0, [pc, #680]	; (8000834 <StartEncoder+0x378>)
 800058a:	f003 f9a6 	bl	80038da <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800058e:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	2201      	movs	r2, #1
 8000598:	48a7      	ldr	r0, [pc, #668]	; (8000838 <StartEncoder+0x37c>)
 800059a:	f006 fc3d 	bl	8006e18 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 800059e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	2221      	movs	r2, #33	; 0x21
 80005a8:	48a3      	ldr	r0, [pc, #652]	; (8000838 <StartEncoder+0x37c>)
 80005aa:	f006 fc35 	bl	8006e18 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b4:	489f      	ldr	r0, [pc, #636]	; (8000834 <StartEncoder+0x378>)
 80005b6:	f003 f990 	bl	80038da <HAL_GPIO_WritePin>
  osDelay(10);
 80005ba:	200a      	movs	r0, #10
 80005bc:	f00a ff64 	bl	800b488 <osDelay>
  // init display, 11 digits 17 segments
  data = 0b00000111; // command 1, 11 digits 17 segments
 80005c0:	2307      	movs	r3, #7
 80005c2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005cc:	4899      	ldr	r0, [pc, #612]	; (8000834 <StartEncoder+0x378>)
 80005ce:	f003 f984 	bl	80038da <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80005d2:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	2201      	movs	r2, #1
 80005dc:	4896      	ldr	r0, [pc, #600]	; (8000838 <StartEncoder+0x37c>)
 80005de:	f006 fc1b 	bl	8006e18 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	4892      	ldr	r0, [pc, #584]	; (8000834 <StartEncoder+0x378>)
 80005ea:	f003 f976 	bl	80038da <HAL_GPIO_WritePin>
  osDelay(10);
 80005ee:	200a      	movs	r0, #10
 80005f0:	f00a ff4a 	bl	800b488 <osDelay>

  for (uint8_t i = 0; i <= 0b111; i++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 80005fa:	e02d      	b.n	8000658 <StartEncoder+0x19c>
  {
	  data = 0b10000000; // command 4
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	  data |= 1<<3; // enable/disable display
 8000602:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000606:	f043 0308 	orr.w	r3, r3, #8
 800060a:	b2db      	uxtb	r3, r3
 800060c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	  data |= i; // set brightness
 8000610:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000614:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8000618:	4313      	orrs	r3, r2
 800061a:	b2db      	uxtb	r3, r3
 800061c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000626:	4883      	ldr	r0, [pc, #524]	; (8000834 <StartEncoder+0x378>)
 8000628:	f003 f957 	bl	80038da <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800062c:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	2201      	movs	r2, #1
 8000636:	4880      	ldr	r0, [pc, #512]	; (8000838 <StartEncoder+0x37c>)
 8000638:	f006 fbee 	bl	8006e18 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000642:	487c      	ldr	r0, [pc, #496]	; (8000834 <StartEncoder+0x378>)
 8000644:	f003 f949 	bl	80038da <HAL_GPIO_WritePin>
	  osDelay(250);
 8000648:	20fa      	movs	r0, #250	; 0xfa
 800064a:	f00a ff1d 	bl	800b488 <osDelay>
  for (uint8_t i = 0; i <= 0b111; i++)
 800064e:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8000652:	3301      	adds	r3, #1
 8000654:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8000658:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800065c:	2b07      	cmp	r3, #7
 800065e:	d9cd      	bls.n	80005fc <StartEncoder+0x140>
  }



  for (int i = 0; i < 11; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000666:	e041      	b.n	80006ec <StartEncoder+0x230>
  {
	  for (int b = 0; b < 3; b++) // erasing from right to left
 8000668:	2300      	movs	r3, #0
 800066a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800066e:	e012      	b.n	8000696 <StartEncoder+0x1da>
	  {
		  vfd.arr2[i][b] = 0;
 8000670:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000674:	4613      	mov	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800067e:	441a      	add	r2, r3
 8000680:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000684:	4413      	add	r3, r2
 8000686:	3b7c      	subs	r3, #124	; 0x7c
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
	  for (int b = 0; b < 3; b++) // erasing from right to left
 800068c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000690:	3301      	adds	r3, #1
 8000692:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000696:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800069a:	2b02      	cmp	r3, #2
 800069c:	dde8      	ble.n	8000670 <StartEncoder+0x1b4>
	  }
	  data = 0b11000000; // command 3, set address to 0
 800069e:	23c0      	movs	r3, #192	; 0xc0
 80006a0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006aa:	4862      	ldr	r0, [pc, #392]	; (8000834 <StartEncoder+0x378>)
 80006ac:	f003 f915 	bl	80038da <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80006b0:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	2201      	movs	r2, #1
 80006ba:	485f      	ldr	r0, [pc, #380]	; (8000838 <StartEncoder+0x37c>)
 80006bc:	f006 fbac 	bl	8006e18 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80006c0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
 80006c8:	2221      	movs	r2, #33	; 0x21
 80006ca:	485b      	ldr	r0, [pc, #364]	; (8000838 <StartEncoder+0x37c>)
 80006cc:	f006 fba4 	bl	8006e18 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d6:	4857      	ldr	r0, [pc, #348]	; (8000834 <StartEncoder+0x378>)
 80006d8:	f003 f8ff 	bl	80038da <HAL_GPIO_WritePin>
	  osDelay(150);
 80006dc:	2096      	movs	r0, #150	; 0x96
 80006de:	f00a fed3 	bl	800b488 <osDelay>
  for (int i = 0; i < 11; i++)
 80006e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80006e6:	3301      	adds	r3, #1
 80006e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80006ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80006f0:	2b0a      	cmp	r3, #10
 80006f2:	ddb9      	ble.n	8000668 <StartEncoder+0x1ac>
  }
  osDelay (500);
 80006f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f8:	f00a fec6 	bl	800b488 <osDelay>

  //erase everything... just in case
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000702:	e00b      	b.n	800071c <StartEncoder+0x260>
	  vfd.arr1[a] = 0;
 8000704:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000708:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800070c:	4413      	add	r3, r2
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000712:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000716:	3301      	adds	r3, #1
 8000718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800071c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000720:	2b20      	cmp	r3, #32
 8000722:	d9ef      	bls.n	8000704 <StartEncoder+0x248>


  // fill everything
    for (int j = 1; j < 15; j++)
 8000724:	2301      	movs	r3, #1
 8000726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800072a:	e06a      	b.n	8000802 <StartEncoder+0x346>
    {
  	  uint32_t temp = 1<<j;
 800072c:	2201      	movs	r2, #1
 800072e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	673b      	str	r3, [r7, #112]	; 0x70
  	  for (int i = 1; i < 11; i++)
 8000738:	2301      	movs	r3, #1
 800073a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800073e:	e035      	b.n	80007ac <StartEncoder+0x2f0>
  	  {
  		  for (int b = 0; b < 3; b++)
 8000740:	2300      	movs	r3, #0
 8000742:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000746:	e028      	b.n	800079a <StartEncoder+0x2de>
  		  {
  			  vfd.arr2[i][b] |= (temp>>(b<<3))&0xFF;
 8000748:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800074c:	4613      	mov	r3, r2
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	4413      	add	r3, r2
 8000752:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000756:	441a      	add	r2, r3
 8000758:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800075c:	4413      	add	r3, r2
 800075e:	3b7c      	subs	r3, #124	; 0x7c
 8000760:	781a      	ldrb	r2, [r3, #0]
 8000762:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800076a:	fa21 f303 	lsr.w	r3, r1, r3
 800076e:	b2db      	uxtb	r3, r3
 8000770:	4313      	orrs	r3, r2
 8000772:	b2d9      	uxtb	r1, r3
 8000774:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000778:	4613      	mov	r3, r2
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	4413      	add	r3, r2
 800077e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000782:	441a      	add	r2, r3
 8000784:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000788:	4413      	add	r3, r2
 800078a:	3b7c      	subs	r3, #124	; 0x7c
 800078c:	460a      	mov	r2, r1
 800078e:	701a      	strb	r2, [r3, #0]
  		  for (int b = 0; b < 3; b++)
 8000790:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000794:	3301      	adds	r3, #1
 8000796:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800079a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800079e:	2b02      	cmp	r3, #2
 80007a0:	ddd2      	ble.n	8000748 <StartEncoder+0x28c>
  	  for (int i = 1; i < 11; i++)
 80007a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80007a6:	3301      	adds	r3, #1
 80007a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80007ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80007b0:	2b0a      	cmp	r3, #10
 80007b2:	ddc5      	ble.n	8000740 <StartEncoder+0x284>
  		  }
  	  }
  	  data = 0b11000000; // command 3, set address to 0
 80007b4:	23c0      	movs	r3, #192	; 0xc0
 80007b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c0:	481c      	ldr	r0, [pc, #112]	; (8000834 <StartEncoder+0x378>)
 80007c2:	f003 f88a 	bl	80038da <HAL_GPIO_WritePin>
  	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80007c6:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	2201      	movs	r2, #1
 80007d0:	4819      	ldr	r0, [pc, #100]	; (8000838 <StartEncoder+0x37c>)
 80007d2:	f006 fb21 	bl	8006e18 <HAL_SPI_Transmit>
  	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80007d6:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	2221      	movs	r2, #33	; 0x21
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <StartEncoder+0x37c>)
 80007e2:	f006 fb19 	bl	8006e18 <HAL_SPI_Transmit>
  	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ec:	4811      	ldr	r0, [pc, #68]	; (8000834 <StartEncoder+0x378>)
 80007ee:	f003 f874 	bl	80038da <HAL_GPIO_WritePin>
  	  osDelay(100);
 80007f2:	2064      	movs	r0, #100	; 0x64
 80007f4:	f00a fe48 	bl	800b488 <osDelay>
    for (int j = 1; j < 15; j++)
 80007f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80007fc:	3301      	adds	r3, #1
 80007fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000802:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000806:	2b0e      	cmp	r3, #14
 8000808:	dd90      	ble.n	800072c <StartEncoder+0x270>
    }

    const uint8_t arr[][2] = {{6, 0},
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <StartEncoder+0x380>)
 800080c:	f107 0418 	add.w	r4, r7, #24
 8000810:	461d      	mov	r5, r3
 8000812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800081c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081e:	682b      	ldr	r3, [r5, #0]
 8000820:	8023      	strh	r3, [r4, #0]
					   {9, 16},
					   {10, 16},
					   {10, 15},
    };

    for (int j = 0; j < sizeof(arr)/2; j++)
 8000822:	2300      	movs	r3, #0
 8000824:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000828:	e079      	b.n	800091e <StartEncoder+0x462>
    {
		for (int b = 0; b < 3; b++)
 800082a:	2300      	movs	r3, #0
 800082c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000830:	e04a      	b.n	80008c8 <StartEncoder+0x40c>
 8000832:	bf00      	nop
 8000834:	40010c00 	.word	0x40010c00
 8000838:	200025f0 	.word	0x200025f0
 800083c:	0800eff8 	.word	0x0800eff8
		  vfd.arr2[arr[j][0]][b] |= ((1<<arr[j][1])>>(b<<3))&0xFF;
 8000840:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800084a:	4413      	add	r3, r2
 800084c:	f813 3cb0 	ldrb.w	r3, [r3, #-176]
 8000850:	461a      	mov	r2, r3
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800085c:	441a      	add	r2, r3
 800085e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000862:	4413      	add	r3, r2
 8000864:	3b7c      	subs	r3, #124	; 0x7c
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b25a      	sxtb	r2, r3
 800086a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000874:	440b      	add	r3, r1
 8000876:	f813 3caf 	ldrb.w	r3, [r3, #-175]
 800087a:	4619      	mov	r1, r3
 800087c:	2301      	movs	r3, #1
 800087e:	fa03 f101 	lsl.w	r1, r3, r1
 8000882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	fa41 f303 	asr.w	r3, r1, r3
 800088c:	b25b      	sxtb	r3, r3
 800088e:	4313      	orrs	r3, r2
 8000890:	b259      	sxtb	r1, r3
 8000892:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800089c:	4413      	add	r3, r2
 800089e:	f813 3cb0 	ldrb.w	r3, [r3, #-176]
 80008a2:	461a      	mov	r2, r3
 80008a4:	b2c9      	uxtb	r1, r1
 80008a6:	4613      	mov	r3, r2
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	4413      	add	r3, r2
 80008ac:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80008b0:	441a      	add	r2, r3
 80008b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80008b6:	4413      	add	r3, r2
 80008b8:	3b7c      	subs	r3, #124	; 0x7c
 80008ba:	460a      	mov	r2, r1
 80008bc:	701a      	strb	r2, [r3, #0]
		for (int b = 0; b < 3; b++)
 80008be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80008c2:	3301      	adds	r3, #1
 80008c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80008c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	ddb7      	ble.n	8000840 <StartEncoder+0x384>
		data = 0b11000000; // command 3, set address to 0
 80008d0:	23c0      	movs	r3, #192	; 0xc0
 80008d2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008dc:	4887      	ldr	r0, [pc, #540]	; (8000afc <StartEncoder+0x640>)
 80008de:	f002 fffc 	bl	80038da <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80008e2:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ea:	2201      	movs	r2, #1
 80008ec:	4884      	ldr	r0, [pc, #528]	; (8000b00 <StartEncoder+0x644>)
 80008ee:	f006 fa93 	bl	8006e18 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80008f2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	2221      	movs	r2, #33	; 0x21
 80008fc:	4880      	ldr	r0, [pc, #512]	; (8000b00 <StartEncoder+0x644>)
 80008fe:	f006 fa8b 	bl	8006e18 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000908:	487c      	ldr	r0, [pc, #496]	; (8000afc <StartEncoder+0x640>)
 800090a:	f002 ffe6 	bl	80038da <HAL_GPIO_WritePin>
		osDelay(100);
 800090e:	2064      	movs	r0, #100	; 0x64
 8000910:	f00a fdba 	bl	800b488 <osDelay>
    for (int j = 0; j < sizeof(arr)/2; j++)
 8000914:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000918:	3301      	adds	r3, #1
 800091a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800091e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000922:	2b18      	cmp	r3, #24
 8000924:	d981      	bls.n	800082a <StartEncoder+0x36e>
    }

    osDelay(500);
 8000926:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800092a:	f00a fdad 	bl	800b488 <osDelay>

    //erase everything... just in case
    for (int a = 0; a < sizeof(vfd.arr1); a++)
 800092e:	2300      	movs	r3, #0
 8000930:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000934:	e00b      	b.n	800094e <StartEncoder+0x492>
  	  vfd.arr1[a] = 0;
 8000936:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800093a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800093e:	4413      	add	r3, r2
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
    for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000944:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000948:	3301      	adds	r3, #1
 800094a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800094e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000952:	2b20      	cmp	r3, #32
 8000954:	d9ef      	bls.n	8000936 <StartEncoder+0x47a>
//    {
//        vfd.arr2[i+1][0] = vfd_digits[i]&0xFF;
//        vfd.arr2[i+1][1] = (vfd_digits[i]>>8)&0xFF;
//    }

	data = 0b11000000; // command 3, set address to 0
 8000956:	23c0      	movs	r3, #192	; 0xc0
 8000958:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000962:	4866      	ldr	r0, [pc, #408]	; (8000afc <StartEncoder+0x640>)
 8000964:	f002 ffb9 	bl	80038da <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000968:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 800096c:	f04f 33ff 	mov.w	r3, #4294967295
 8000970:	2201      	movs	r2, #1
 8000972:	4863      	ldr	r0, [pc, #396]	; (8000b00 <StartEncoder+0x644>)
 8000974:	f006 fa50 	bl	8006e18 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000978:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800097c:	f04f 33ff 	mov.w	r3, #4294967295
 8000980:	2221      	movs	r2, #33	; 0x21
 8000982:	485f      	ldr	r0, [pc, #380]	; (8000b00 <StartEncoder+0x644>)
 8000984:	f006 fa48 	bl	8006e18 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000988:	2201      	movs	r2, #1
 800098a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098e:	485b      	ldr	r0, [pc, #364]	; (8000afc <StartEncoder+0x640>)
 8000990:	f002 ffa3 	bl	80038da <HAL_GPIO_WritePin>
	//osDelay(100);


	const char * demo = "VFD FV651G";
 8000994:	4b5b      	ldr	r3, [pc, #364]	; (8000b04 <StartEncoder+0x648>)
 8000996:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	while (*demo)
 800099a:	e012      	b.n	80009c2 <StartEncoder+0x506>
	{
		uint16_t temp = get_char(*(demo++));
 800099c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80009a0:	1c5a      	adds	r2, r3, #1
 80009a2:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 fc57 	bl	800325c <get_char>
 80009ae:	4603      	mov	r3, r0
 80009b0:	82fb      	strh	r3, [r7, #22]
		xQueueSendToBack(qVFDHandle, &temp, 100);
 80009b2:	4b55      	ldr	r3, [pc, #340]	; (8000b08 <StartEncoder+0x64c>)
 80009b4:	6818      	ldr	r0, [r3, #0]
 80009b6:	f107 0116 	add.w	r1, r7, #22
 80009ba:	2300      	movs	r3, #0
 80009bc:	2264      	movs	r2, #100	; 0x64
 80009be:	f00b f921 	bl	800bc04 <xQueueGenericSend>
	while (*demo)
 80009c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1e7      	bne.n	800099c <StartEncoder+0x4e0>
	}


  d3231_get_all();
 80009cc:	f7ff fc22 	bl	8000214 <d3231_get_all>

  uint8_t brightness = 0b111-d3231_get_A2M2(); // alarm2 minutes as EEPROM, default max
 80009d0:	f7ff fc48 	bl	8000264 <d3231_get_A2M2>
 80009d4:	4603      	mov	r3, r0
 80009d6:	f1c3 0307 	rsb	r3, r3, #7
 80009da:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  data = 0b10000000; // command 4
 80009de:	2380      	movs	r3, #128	; 0x80
 80009e0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  data |= 1<<3; // enable/disable display
 80009e4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  data |= brightness&0b111; // set brightness
 80009f2:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	b25a      	sxtb	r2, r3
 80009fc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b25b      	sxtb	r3, r3
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a12:	483a      	ldr	r0, [pc, #232]	; (8000afc <StartEncoder+0x640>)
 8000a14:	f002 ff61 	bl	80038da <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000a18:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8000a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a20:	2201      	movs	r2, #1
 8000a22:	4837      	ldr	r0, [pc, #220]	; (8000b00 <StartEncoder+0x644>)
 8000a24:	f006 f9f8 	bl	8006e18 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2e:	4833      	ldr	r0, [pc, #204]	; (8000afc <StartEncoder+0x640>)
 8000a30:	f002 ff53 	bl	80038da <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  uint16_t buf;
	  // show temperature
	  if (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin))
 8000a34:	2102      	movs	r1, #2
 8000a36:	4831      	ldr	r0, [pc, #196]	; (8000afc <StartEncoder+0x640>)
 8000a38:	f002 ff38 	bl	80038ac <HAL_GPIO_ReadPin>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f000 80bb 	beq.w	8000bba <StartEncoder+0x6fe>
	  {
		  //erase everything...
		  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000a4a:	e00b      	b.n	8000a64 <StartEncoder+0x5a8>
			  vfd.arr1[a] = 0;
 8000a4c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000a50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a54:	4413      	add	r3, r2
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
		  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000a5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a5e:	3301      	adds	r3, #1
 8000a60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000a64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a68:	2b20      	cmp	r3, #32
 8000a6a:	d9ef      	bls.n	8000a4c <StartEncoder+0x590>

		  uint8_t td3231 = *d3231_get_temp();
 8000a6c:	f7ff fbaa 	bl	80001c4 <d3231_get_temp>
 8000a70:	4603      	mov	r3, r0
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		  uint8_t td [6];
		  td[0] = 'C';
 8000a78:	2343      	movs	r3, #67	; 0x43
 8000a7a:	733b      	strb	r3, [r7, #12]
		  td[1] = 176; //°
 8000a7c:	23b0      	movs	r3, #176	; 0xb0
 8000a7e:	737b      	strb	r3, [r7, #13]
		  uint8_t i = 2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		  while (td3231)
 8000a86:	e01e      	b.n	8000ac6 <StartEncoder+0x60a>
		  {
			  td[i++] = td3231 %10;
 8000a88:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000a8c:	1c5a      	adds	r2, r3, #1
 8000a8e:	f887 208e 	strb.w	r2, [r7, #142]	; 0x8e
 8000a92:	4618      	mov	r0, r3
 8000a94:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8000a98:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <StartEncoder+0x650>)
 8000a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8000a9e:	08d9      	lsrs	r1, r3, #3
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000ab0:	4403      	add	r3, r0
 8000ab2:	f803 2cbc 	strb.w	r2, [r3, #-188]
			  td3231 /= 10;
 8000ab6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000aba:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <StartEncoder+0x650>)
 8000abc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac0:	08db      	lsrs	r3, r3, #3
 8000ac2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		  while (td3231)
 8000ac6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1dc      	bne.n	8000a88 <StartEncoder+0x5cc>
		  }
		  if (i>2)
 8000ace:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d90d      	bls.n	8000af2 <StartEncoder+0x636>
			  td[i] = td3231&(1<<7)?'-':'+';
 8000ad6:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	da01      	bge.n	8000ae2 <StartEncoder+0x626>
 8000ade:	222d      	movs	r2, #45	; 0x2d
 8000ae0:	e000      	b.n	8000ae4 <StartEncoder+0x628>
 8000ae2:	222b      	movs	r2, #43	; 0x2b
 8000ae4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000ae8:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000aec:	440b      	add	r3, r1
 8000aee:	f803 2cbc 	strb.w	r2, [r3, #-188]

		  for (int i = 0; i < 6; i++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000af8:	e038      	b.n	8000b6c <StartEncoder+0x6b0>
 8000afa:	bf00      	nop
 8000afc:	40010c00 	.word	0x40010c00
 8000b00:	200025f0 	.word	0x200025f0
 8000b04:	0800efec 	.word	0x0800efec
 8000b08:	20002490 	.word	0x20002490
 8000b0c:	cccccccd 	.word	0xcccccccd
		  {
			  buf = get_char(td[i]);
 8000b10:	f107 020c 	add.w	r2, r7, #12
 8000b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b18:	4413      	add	r3, r2
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f002 fb9d 	bl	800325c <get_char>
 8000b22:	4603      	mov	r3, r0
 8000b24:	82bb      	strh	r3, [r7, #20]

			  vfd.arr2[i+1][0] = buf & 0xFF;
 8000b26:	8ab9      	ldrh	r1, [r7, #20]
 8000b28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b2c:	1c5a      	adds	r2, r3, #1
 8000b2e:	b2c9      	uxtb	r1, r1
 8000b30:	4613      	mov	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4413      	add	r3, r2
 8000b36:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000b3a:	4413      	add	r3, r2
 8000b3c:	3b7c      	subs	r3, #124	; 0x7c
 8000b3e:	460a      	mov	r2, r1
 8000b40:	701a      	strb	r2, [r3, #0]
			  vfd.arr2[i+1][1] = (buf>>8)&0xFF;
 8000b42:	8abb      	ldrh	r3, [r7, #20]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	b299      	uxth	r1, r3
 8000b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b4c:	1c5a      	adds	r2, r3, #1
 8000b4e:	b2c9      	uxtb	r1, r1
 8000b50:	4613      	mov	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	4413      	add	r3, r2
 8000b56:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000b5a:	4413      	add	r3, r2
 8000b5c:	3b7b      	subs	r3, #123	; 0x7b
 8000b5e:	460a      	mov	r2, r1
 8000b60:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 6; i++)
 8000b62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b66:	3301      	adds	r3, #1
 8000b68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b70:	2b05      	cmp	r3, #5
 8000b72:	ddcd      	ble.n	8000b10 <StartEncoder+0x654>
		  }

		  data = 0b11000000; // command 3, set address to 0
 8000b74:	23c0      	movs	r3, #192	; 0xc0
 8000b76:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b80:	48ca      	ldr	r0, [pc, #808]	; (8000eac <StartEncoder+0x9f0>)
 8000b82:	f002 feaa 	bl	80038da <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000b86:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	2201      	movs	r2, #1
 8000b90:	48c7      	ldr	r0, [pc, #796]	; (8000eb0 <StartEncoder+0x9f4>)
 8000b92:	f006 f941 	bl	8006e18 <HAL_SPI_Transmit>
		  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000b96:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	2221      	movs	r2, #33	; 0x21
 8000ba0:	48c3      	ldr	r0, [pc, #780]	; (8000eb0 <StartEncoder+0x9f4>)
 8000ba2:	f006 f939 	bl	8006e18 <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bac:	48bf      	ldr	r0, [pc, #764]	; (8000eac <StartEncoder+0x9f0>)
 8000bae:	f002 fe94 	bl	80038da <HAL_GPIO_WritePin>
		  osDelay(3000);
 8000bb2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000bb6:	f00a fc67 	bl	800b488 <osDelay>
	  }

	  // tune brightness
	  if (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin))
 8000bba:	2104      	movs	r1, #4
 8000bbc:	48bb      	ldr	r0, [pc, #748]	; (8000eac <StartEncoder+0x9f0>)
 8000bbe:	f002 fe75 	bl	80038ac <HAL_GPIO_ReadPin>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d04b      	beq.n	8000c60 <StartEncoder+0x7a4>
	  {
		  brightness = (--brightness)&0b111;
 8000bc8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000bd2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		  d3231_set_A2M2(0b111-brightness);
 8000bde:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fb43 	bl	8000274 <d3231_set_A2M2>

		  data = 0b10000000; // command 4
 8000bee:	2380      	movs	r3, #128	; 0x80
 8000bf0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		  data |= 1<<3; // enable/disable display
 8000bf4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		  data |= brightness&0b111; // set brightness
 8000c02:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	b25a      	sxtb	r2, r3
 8000c0c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	4313      	orrs	r3, r2
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c22:	48a2      	ldr	r0, [pc, #648]	; (8000eac <StartEncoder+0x9f0>)
 8000c24:	f002 fe59 	bl	80038da <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000c28:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c30:	2201      	movs	r2, #1
 8000c32:	489f      	ldr	r0, [pc, #636]	; (8000eb0 <StartEncoder+0x9f4>)
 8000c34:	f006 f8f0 	bl	8006e18 <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c3e:	489b      	ldr	r0, [pc, #620]	; (8000eac <StartEncoder+0x9f0>)
 8000c40:	f002 fe4b 	bl	80038da <HAL_GPIO_WritePin>
		  // todo display BRIGHTNESS and scale
		  osDelay(20);
 8000c44:	2014      	movs	r0, #20
 8000c46:	f00a fc1f 	bl	800b488 <osDelay>
		  while(HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin)); // wait release
 8000c4a:	bf00      	nop
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	4897      	ldr	r0, [pc, #604]	; (8000eac <StartEncoder+0x9f0>)
 8000c50:	f002 fe2c 	bl	80038ac <HAL_GPIO_ReadPin>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1f8      	bne.n	8000c4c <StartEncoder+0x790>
		  osDelay(20);
 8000c5a:	2014      	movs	r0, #20
 8000c5c:	f00a fc14 	bl	800b488 <osDelay>
	  }

	  if (show_clock)
 8000c60:	4b94      	ldr	r3, [pc, #592]	; (8000eb4 <StartEncoder+0x9f8>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 80ab 	beq.w	8000dc0 <StartEncoder+0x904>
	  {
		  uint8_t * time = d3231_get_time();
 8000c6a:	f7ff fa83 	bl	8000174 <d3231_get_time>
 8000c6e:	6778      	str	r0, [r7, #116]	; 0x74
		  uint8_t clock [4];
		  clock[0] = time[1] & 0xF;
 8000c70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c72:	3301      	adds	r3, #1
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	723b      	strb	r3, [r7, #8]
		  clock[1] = (time[1] >> 4) & 0xF;
 8000c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c80:	3301      	adds	r3, #1
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	091b      	lsrs	r3, r3, #4
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	727b      	strb	r3, [r7, #9]
		  clock[2] = time[2] & 0xF;
 8000c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	f003 030f 	and.w	r3, r3, #15
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	72bb      	strb	r3, [r7, #10]
		  clock[3] = (time[2] >> 4) & 0xF;
 8000c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	091b      	lsrs	r3, r3, #4
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	72fb      	strb	r3, [r7, #11]

		  //erase everything...
		  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000caa:	e00b      	b.n	8000cc4 <StartEncoder+0x808>
			  vfd.arr1[a] = 0;
 8000cac:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000cb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000cb4:	4413      	add	r3, r2
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
		  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000cba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000cc8:	2b20      	cmp	r3, #32
 8000cca:	d9ef      	bls.n	8000cac <StartEncoder+0x7f0>


		  for (int i = 0; i < 4; i++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000cd2:	e02d      	b.n	8000d30 <StartEncoder+0x874>
		  {
			  buf = get_char(clock[i]);
 8000cd4:	f107 0208 	add.w	r2, r7, #8
 8000cd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000cdc:	4413      	add	r3, r2
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f002 fabb 	bl	800325c <get_char>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	82bb      	strh	r3, [r7, #20]

			  vfd.arr2[4+i][0] = buf & 0xFF;
 8000cea:	8ab9      	ldrh	r1, [r7, #20]
 8000cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000cf0:	1d1a      	adds	r2, r3, #4
 8000cf2:	b2c9      	uxtb	r1, r1
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4413      	add	r3, r2
 8000cfa:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000cfe:	4413      	add	r3, r2
 8000d00:	3b7c      	subs	r3, #124	; 0x7c
 8000d02:	460a      	mov	r2, r1
 8000d04:	701a      	strb	r2, [r3, #0]
			  vfd.arr2[4+i][1] = (buf>>8)&0xFF;
 8000d06:	8abb      	ldrh	r3, [r7, #20]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	b299      	uxth	r1, r3
 8000d0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d10:	1d1a      	adds	r2, r3, #4
 8000d12:	b2c9      	uxtb	r1, r1
 8000d14:	4613      	mov	r3, r2
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	4413      	add	r3, r2
 8000d1a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000d1e:	4413      	add	r3, r2
 8000d20:	3b7b      	subs	r3, #123	; 0x7b
 8000d22:	460a      	mov	r2, r1
 8000d24:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 4; i++)
 8000d26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000d30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	ddcd      	ble.n	8000cd4 <StartEncoder+0x818>
		  }

		  if ((time[0]&0b1) == 0)
 8000d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d11d      	bne.n	8000d80 <StartEncoder+0x8c4>
		  {
				for (int b = 0; b < 3; b++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000d48:	e017      	b.n	8000d7a <StartEncoder+0x8be>
				  vfd.arr2[6][b] |= ((1<<0)>>(b<<3))&0xFF;
 8000d4a:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 8000d4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d50:	4413      	add	r3, r2
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b25a      	sxtb	r2, r3
 8000d56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	fa41 f303 	asr.w	r3, r1, r3
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	4313      	orrs	r3, r2
 8000d64:	b25b      	sxtb	r3, r3
 8000d66:	b2d9      	uxtb	r1, r3
 8000d68:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 8000d6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d6e:	4413      	add	r3, r2
 8000d70:	460a      	mov	r2, r1
 8000d72:	701a      	strb	r2, [r3, #0]
				for (int b = 0; b < 3; b++)
 8000d74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d76:	3301      	adds	r3, #1
 8000d78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000d7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	dde4      	ble.n	8000d4a <StartEncoder+0x88e>
		  }

		  data = 0b11000000; // command 3, set address to 0
 8000d80:	23c0      	movs	r3, #192	; 0xc0
 8000d82:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d8c:	4847      	ldr	r0, [pc, #284]	; (8000eac <StartEncoder+0x9f0>)
 8000d8e:	f002 fda4 	bl	80038da <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000d92:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4844      	ldr	r0, [pc, #272]	; (8000eb0 <StartEncoder+0x9f4>)
 8000d9e:	f006 f83b 	bl	8006e18 <HAL_SPI_Transmit>
		  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000da2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	2221      	movs	r2, #33	; 0x21
 8000dac:	4840      	ldr	r0, [pc, #256]	; (8000eb0 <StartEncoder+0x9f4>)
 8000dae:	f006 f833 	bl	8006e18 <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000db2:	2201      	movs	r2, #1
 8000db4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db8:	483c      	ldr	r0, [pc, #240]	; (8000eac <StartEncoder+0x9f0>)
 8000dba:	f002 fd8e 	bl	80038da <HAL_GPIO_WritePin>
 8000dbe:	e068      	b.n	8000e92 <StartEncoder+0x9d6>


	  }
	  else
	  {
		  if(qVFDHandle && xQueueReceive(qVFDHandle, &buf, 1))
 8000dc0:	4b3d      	ldr	r3, [pc, #244]	; (8000eb8 <StartEncoder+0x9fc>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d064      	beq.n	8000e92 <StartEncoder+0x9d6>
 8000dc8:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <StartEncoder+0x9fc>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f107 0114 	add.w	r1, r7, #20
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f00b f8ac 	bl	800bf30 <xQueueReceive>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d059      	beq.n	8000e92 <StartEncoder+0x9d6>
		  {
				for (int i = 10; i > 1; i--)
 8000dde:	230a      	movs	r3, #10
 8000de0:	67bb      	str	r3, [r7, #120]	; 0x78
 8000de2:	e02a      	b.n	8000e3a <StartEncoder+0x97e>
				{
					vfd.arr2[i][0] = vfd.arr2[i-1][0];
 8000de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000de6:	1e5a      	subs	r2, r3, #1
 8000de8:	4613      	mov	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	4413      	add	r3, r2
 8000dee:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000df2:	4413      	add	r3, r2
 8000df4:	3b7c      	subs	r3, #124	; 0x7c
 8000df6:	7819      	ldrb	r1, [r3, #0]
 8000df8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000e04:	4413      	add	r3, r2
 8000e06:	3b7c      	subs	r3, #124	; 0x7c
 8000e08:	460a      	mov	r2, r1
 8000e0a:	701a      	strb	r2, [r3, #0]
					vfd.arr2[i][1] = vfd.arr2[i-1][1];
 8000e0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e0e:	1e5a      	subs	r2, r3, #1
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000e1a:	4413      	add	r3, r2
 8000e1c:	3b7b      	subs	r3, #123	; 0x7b
 8000e1e:	7819      	ldrb	r1, [r3, #0]
 8000e20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000e22:	4613      	mov	r3, r2
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	4413      	add	r3, r2
 8000e28:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000e2c:	4413      	add	r3, r2
 8000e2e:	3b7b      	subs	r3, #123	; 0x7b
 8000e30:	460a      	mov	r2, r1
 8000e32:	701a      	strb	r2, [r3, #0]
				for (int i = 10; i > 1; i--)
 8000e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e36:	3b01      	subs	r3, #1
 8000e38:	67bb      	str	r3, [r7, #120]	; 0x78
 8000e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	dcd1      	bgt.n	8000de4 <StartEncoder+0x928>
				}
				vfd.arr2[1][0] = buf & 0xFF;
 8000e40:	8abb      	ldrh	r3, [r7, #20]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				vfd.arr2[1][1] = (buf>>8)&0xFF;
 8000e48:	8abb      	ldrh	r3, [r7, #20]
 8000e4a:	0a1b      	lsrs	r3, r3, #8
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
				data = 0b11000000; // command 3, set address to 0
 8000e54:	23c0      	movs	r3, #192	; 0xc0
 8000e56:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
				HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e60:	4812      	ldr	r0, [pc, #72]	; (8000eac <StartEncoder+0x9f0>)
 8000e62:	f002 fd3a 	bl	80038da <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000e66:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6e:	2201      	movs	r2, #1
 8000e70:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <StartEncoder+0x9f4>)
 8000e72:	f005 ffd1 	bl	8006e18 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000e76:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	2221      	movs	r2, #33	; 0x21
 8000e80:	480b      	ldr	r0, [pc, #44]	; (8000eb0 <StartEncoder+0x9f4>)
 8000e82:	f005 ffc9 	bl	8006e18 <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000e86:	2201      	movs	r2, #1
 8000e88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e8c:	4807      	ldr	r0, [pc, #28]	; (8000eac <StartEncoder+0x9f0>)
 8000e8e:	f002 fd24 	bl	80038da <HAL_GPIO_WritePin>
		  }
	  }

	  if (HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin))
 8000e92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <StartEncoder+0x9f0>)
 8000e98:	f002 fd08 	bl	80038ac <HAL_GPIO_ReadPin>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d00e      	beq.n	8000ec0 <StartEncoder+0xa04>
	  {
		  released = true;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <StartEncoder+0xa00>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	701a      	strb	r2, [r3, #0]
 8000ea8:	e020      	b.n	8000eec <StartEncoder+0xa30>
 8000eaa:	bf00      	nop
 8000eac:	40010c00 	.word	0x40010c00
 8000eb0:	200025f0 	.word	0x200025f0
 8000eb4:	2000000d 	.word	0x2000000d
 8000eb8:	20002490 	.word	0x20002490
 8000ebc:	20000000 	.word	0x20000000
	  } else if (released)
 8000ec0:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <StartEncoder+0xab0>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d011      	beq.n	8000eec <StartEncoder+0xa30>
	  {
		  released = false;
 8000ec8:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <StartEncoder+0xab0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
		  invert = !invert;
 8000ece:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <StartEncoder+0xab4>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	bf14      	ite	ne
 8000ed6:	2301      	movne	r3, #1
 8000ed8:	2300      	moveq	r3, #0
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	f083 0301 	eor.w	r3, r3, #1
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <StartEncoder+0xab4>)
 8000eea:	701a      	strb	r2, [r3, #0]
	  }

	if(use_leds)
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <StartEncoder+0xab8>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d036      	beq.n	8000f62 <StartEncoder+0xaa6>
	{
		  data = 0b01000001; // command 2, write to LED port
 8000ef4:	2341      	movs	r3, #65	; 0x41
 8000ef6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f00:	481d      	ldr	r0, [pc, #116]	; (8000f78 <StartEncoder+0xabc>)
 8000f02:	f002 fcea 	bl	80038da <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000f06:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	2201      	movs	r2, #1
 8000f10:	481a      	ldr	r0, [pc, #104]	; (8000f7c <StartEncoder+0xac0>)
 8000f12:	f005 ff81 	bl	8006e18 <HAL_SPI_Transmit>
		  osDelay(10);
 8000f16:	200a      	movs	r0, #10
 8000f18:	f00a fab6 	bl	800b488 <osDelay>

		  data = ~(1<<((tick_counter >> 1)&0b11));
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <StartEncoder+0xac4>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	085b      	lsrs	r3, r3, #1
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2201      	movs	r2, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	//	  if (invert)
	//		  data =~data;
		  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, invert);
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <StartEncoder+0xab4>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	2120      	movs	r1, #32
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <StartEncoder+0xabc>)
 8000f42:	f002 fcca 	bl	80038da <HAL_GPIO_WritePin>

		  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000f46:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	2201      	movs	r2, #1
 8000f50:	480a      	ldr	r0, [pc, #40]	; (8000f7c <StartEncoder+0xac0>)
 8000f52:	f005 ff61 	bl	8006e18 <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5c:	4806      	ldr	r0, [pc, #24]	; (8000f78 <StartEncoder+0xabc>)
 8000f5e:	f002 fcbc 	bl	80038da <HAL_GPIO_WritePin>
	  data |= ((encoder_value >> 2) - 1)&0b111; // set brightness
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
#endif
	  osDelay(10);
 8000f62:	200a      	movs	r0, #10
 8000f64:	f00a fa90 	bl	800b488 <osDelay>
  {
 8000f68:	e564      	b.n	8000a34 <StartEncoder+0x578>
 8000f6a:	bf00      	nop
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000001 	.word	0x20000001
 8000f74:	200001b0 	.word	0x200001b0
 8000f78:	40010c00 	.word	0x40010c00
 8000f7c:	200025f0 	.word	0x200025f0
 8000f80:	200001ac 	.word	0x200001ac

08000f84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f98:	4b4f      	ldr	r3, [pc, #316]	; (80010d8 <MX_GPIO_Init+0x154>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4a4e      	ldr	r2, [pc, #312]	; (80010d8 <MX_GPIO_Init+0x154>)
 8000f9e:	f043 0310 	orr.w	r3, r3, #16
 8000fa2:	6193      	str	r3, [r2, #24]
 8000fa4:	4b4c      	ldr	r3, [pc, #304]	; (80010d8 <MX_GPIO_Init+0x154>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f003 0310 	and.w	r3, r3, #16
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb0:	4b49      	ldr	r3, [pc, #292]	; (80010d8 <MX_GPIO_Init+0x154>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a48      	ldr	r2, [pc, #288]	; (80010d8 <MX_GPIO_Init+0x154>)
 8000fb6:	f043 0320 	orr.w	r3, r3, #32
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	4b46      	ldr	r3, [pc, #280]	; (80010d8 <MX_GPIO_Init+0x154>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f003 0320 	and.w	r3, r3, #32
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b43      	ldr	r3, [pc, #268]	; (80010d8 <MX_GPIO_Init+0x154>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a42      	ldr	r2, [pc, #264]	; (80010d8 <MX_GPIO_Init+0x154>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b40      	ldr	r3, [pc, #256]	; (80010d8 <MX_GPIO_Init+0x154>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe0:	4b3d      	ldr	r3, [pc, #244]	; (80010d8 <MX_GPIO_Init+0x154>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a3c      	ldr	r2, [pc, #240]	; (80010d8 <MX_GPIO_Init+0x154>)
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <MX_GPIO_Init+0x154>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0308 	and.w	r3, r3, #8
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ffe:	4837      	ldr	r0, [pc, #220]	; (80010dc <MX_GPIO_Init+0x158>)
 8001000:	f002 fc6b 	bl	80038da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 5189 	mov.w	r1, #4384	; 0x1120
 800100a:	4835      	ldr	r0, [pc, #212]	; (80010e0 <MX_GPIO_Init+0x15c>)
 800100c:	f002 fc65 	bl	80038da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001016:	4833      	ldr	r0, [pc, #204]	; (80010e4 <MX_GPIO_Init+0x160>)
 8001018:	f002 fc5f 	bl	80038da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800101c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2302      	movs	r3, #2
 800102c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 0310 	add.w	r3, r7, #16
 8001032:	4619      	mov	r1, r3
 8001034:	4829      	ldr	r0, [pc, #164]	; (80010dc <MX_GPIO_Init+0x158>)
 8001036:	f002 fab5 	bl	80035a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800103a:	2301      	movs	r3, #1
 800103c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800103e:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <MX_GPIO_Init+0x164>)
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	4619      	mov	r1, r3
 800104c:	4825      	ldr	r0, [pc, #148]	; (80010e4 <MX_GPIO_Init+0x160>)
 800104e:	f002 faa9 	bl	80035a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PB1_Pin|PB2_Pin;
 8001052:	2306      	movs	r3, #6
 8001054:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	4619      	mov	r1, r3
 8001064:	481e      	ldr	r0, [pc, #120]	; (80010e0 <MX_GPIO_Init+0x15c>)
 8001066:	f002 fa9d 	bl	80035a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin|enc_s_Pin;
 800106a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800106e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001074:	2301      	movs	r3, #1
 8001076:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4619      	mov	r1, r3
 800107e:	4818      	ldr	r0, [pc, #96]	; (80010e0 <MX_GPIO_Init+0x15c>)
 8001080:	f002 fa90 	bl	80035a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8001084:	f44f 5389 	mov.w	r3, #4384	; 0x1120
 8001088:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2302      	movs	r3, #2
 8001094:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	4619      	mov	r1, r3
 800109c:	4810      	ldr	r0, [pc, #64]	; (80010e0 <MX_GPIO_Init+0x15c>)
 800109e:	f002 fa81 	bl	80035a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 80010a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2302      	movs	r3, #2
 80010b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	4619      	mov	r1, r3
 80010ba:	480a      	ldr	r0, [pc, #40]	; (80010e4 <MX_GPIO_Init+0x160>)
 80010bc:	f002 fa72 	bl	80035a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2105      	movs	r1, #5
 80010c4:	2006      	movs	r0, #6
 80010c6:	f002 fa42 	bl	800354e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010ca:	2006      	movs	r0, #6
 80010cc:	f002 fa5b 	bl	8003586 <HAL_NVIC_EnableIRQ>

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40011000 	.word	0x40011000
 80010e0:	40010c00 	.word	0x40010c00
 80010e4:	40010800 	.word	0x40010800
 80010e8:	10110000 	.word	0x10110000

080010ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_I2C1_Init+0x50>)
 80010f2:	4a13      	ldr	r2, [pc, #76]	; (8001140 <MX_I2C1_Init+0x54>)
 80010f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_I2C1_Init+0x50>)
 80010f8:	4a12      	ldr	r2, [pc, #72]	; (8001144 <MX_I2C1_Init+0x58>)
 80010fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_I2C1_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_I2C1_Init+0x50>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_I2C1_Init+0x50>)
 800110a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800110e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MX_I2C1_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_I2C1_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <MX_I2C1_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_I2C1_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_I2C1_Init+0x50>)
 800112a:	f002 fc29 	bl	8003980 <HAL_I2C_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001134:	f000 f8c6 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200024ac 	.word	0x200024ac
 8001140:	40005400 	.word	0x40005400
 8001144:	000186a0 	.word	0x000186a0

08001148 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a15      	ldr	r2, [pc, #84]	; (80011b8 <HAL_I2C_MspInit+0x70>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d123      	bne.n	80011b0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_I2C_MspInit+0x74>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a13      	ldr	r2, [pc, #76]	; (80011bc <HAL_I2C_MspInit+0x74>)
 800116e:	f043 0308 	orr.w	r3, r3, #8
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_I2C_MspInit+0x74>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001180:	23c0      	movs	r3, #192	; 0xc0
 8001182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001184:	2312      	movs	r3, #18
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4619      	mov	r1, r3
 8001192:	480b      	ldr	r0, [pc, #44]	; (80011c0 <HAL_I2C_MspInit+0x78>)
 8001194:	f002 fa06 	bl	80035a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_I2C_MspInit+0x74>)
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_I2C_MspInit+0x74>)
 800119e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011a2:	61d3      	str	r3, [r2, #28]
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_I2C_MspInit+0x74>)
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011b0:	bf00      	nop
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40005400 	.word	0x40005400
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010c00 	.word	0x40010c00

080011c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c8:	f002 f8da 	bl	8003380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011cc:	f000 f80d 	bl	80011ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d0:	f7ff fed8 	bl	8000f84 <MX_GPIO_Init>
  MX_SPI2_Init();
 80011d4:	f001 fefc 	bl	8002fd0 <MX_SPI2_Init>
  MX_I2C1_Init();
 80011d8:	f7ff ff88 	bl	80010ec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80011dc:	f00a f844 	bl	800b268 <osKernelInitialize>
  MX_FREERTOS_Init();
 80011e0:	f7ff f89c 	bl	800031c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80011e4:	f00a f872 	bl	800b2cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <main+0x24>

080011ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b094      	sub	sp, #80	; 0x50
 80011ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f4:	2228      	movs	r2, #40	; 0x28
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f00d fea5 	bl	800ef48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800121a:	2301      	movs	r3, #1
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800121e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001224:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001228:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122a:	2301      	movs	r3, #1
 800122c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122e:	2302      	movs	r3, #2
 8001230:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001236:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001238:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800123c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001242:	4618      	mov	r0, r3
 8001244:	f005 f862 	bl	800630c <HAL_RCC_OscConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800124e:	f000 f839 	bl	80012c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001252:	230f      	movs	r3, #15
 8001254:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001256:	2302      	movs	r3, #2
 8001258:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800125e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001262:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2102      	movs	r1, #2
 800126e:	4618      	mov	r0, r3
 8001270:	f005 facc 	bl	800680c <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0x94>
  {
    Error_Handler();
 800127a:	f000 f823 	bl	80012c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800127e:	2310      	movs	r3, #16
 8001280:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	4618      	mov	r0, r3
 800128a:	f005 fc8b 	bl	8006ba4 <HAL_RCCEx_PeriphCLKConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001294:	f000 f816 	bl	80012c4 <Error_Handler>
  }
}
 8001298:	bf00      	nop
 800129a:	3750      	adds	r7, #80	; 0x50
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012b2:	f002 f87b 	bl	80033ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40012c00 	.word	0x40012c00

080012c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c8:	b672      	cpsid	i
}
 80012ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012cc:	e7fe      	b.n	80012cc <Error_Handler+0x8>

080012ce <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b085      	sub	sp, #20
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	5c8a      	ldrb	r2, [r1, r2]
 80012e2:	4413      	add	r3, r2
 80012e4:	3301      	adds	r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b3f      	cmp	r3, #63	; 0x3f
 80012ec:	dd02      	ble.n	80012f4 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3b40      	subs	r3, #64	; 0x40
 80012f2:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	5cd3      	ldrb	r3, [r2, r3]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <hist_is_space_for_new+0x1a>
		return true;
 800131a:	2301      	movs	r3, #1
 800131c:	e01e      	b.n	800135c <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	429a      	cmp	r2, r3
 8001328:	db0c      	blt.n	8001344 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4413      	add	r3, r2
 8001338:	3b01      	subs	r3, #1
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	429a      	cmp	r2, r3
 800133e:	da0c      	bge.n	800135a <hist_is_space_for_new+0x56>
			return true;
 8001340:	2301      	movs	r3, #1
 8001342:	e00b      	b.n	800135c <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	3b01      	subs	r3, #1
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	da01      	bge.n	800135a <hist_is_space_for_new+0x56>
			return true;
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <hist_is_space_for_new+0x58>
	}
	return false;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr

08001366 <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b3e      	cmp	r3, #62	; 0x3e
 8001376:	dc61      	bgt.n	800143c <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8001378:	e002      	b.n	8001380 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f7ff ffa7 	bl	80012ce <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f7ff ffbe 	bl	8001304 <hist_is_space_for_new>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f5      	beq.n	800137a <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	5cd3      	ldrb	r3, [r2, r3]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d105      	bne.n	80013a6 <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	b2d1      	uxtb	r1, r2
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	da0a      	bge.n	80013ca <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	3301      	adds	r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00d fd98 	bl	800eef8 <memcpy>
 80013c8:	e018      	b.n	80013fc <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80013d2:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	3301      	adds	r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f00d fd88 	bl	800eef8 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	68ba      	ldr	r2, [r7, #8]
 80013ee:	18d1      	adds	r1, r2, r3
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	f00d fd7e 	bl	800eef8 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	b2d1      	uxtb	r1, r2
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	2b3f      	cmp	r3, #63	; 0x3f
 800141c:	dd05      	ble.n	800142a <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	2100      	movs	r1, #0
 8001432:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2200      	movs	r2, #0
 8001438:	649a      	str	r2, [r3, #72]	; 0x48
 800143a:	e000      	b.n	800143e <hist_save_line+0xd8>
		return;
 800143c:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	; 0x30
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 800145a:	e010      	b.n	800147e <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001460:	4413      	add	r3, r2
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001468:	4413      	add	r3, r2
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 800146c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146e:	2b3f      	cmp	r3, #63	; 0x3f
 8001470:	dd02      	ble.n	8001478 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 8001472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001474:	3b40      	subs	r3, #64	; 0x40
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8001478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147a:	3301      	adds	r3, #1
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001482:	4413      	add	r3, r2
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1e8      	bne.n	800145c <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d176      	bne.n	800157e <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001496:	429a      	cmp	r2, r3
 8001498:	f2c0 80d6 	blt.w	8001648 <hist_restore_line+0x204>
			int header = pThis->begin;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 80014a6:	e010      	b.n	80014ca <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	4413      	add	r3, r2
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b4:	4413      	add	r3, r2
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	2b3f      	cmp	r3, #63	; 0x3f
 80014bc:	dd02      	ble.n	80014c4 <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	3b40      	subs	r3, #64	; 0x40
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 80014c4:	6a3b      	ldr	r3, [r7, #32]
 80014c6:	3301      	adds	r3, #1
 80014c8:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	4413      	add	r3, r2
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d007      	beq.n	80014e6 <hist_restore_line+0xa2>
 80014d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	1e5a      	subs	r2, r3, #1
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d1e0      	bne.n	80014a8 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	4413      	add	r3, r2
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80aa 	beq.w	8001648 <hist_restore_line+0x204>
					pThis->cur++;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	4413      	add	r3, r2
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	4413      	add	r3, r2
 800150c:	2b3f      	cmp	r3, #63	; 0x3f
 800150e:	dc11      	bgt.n	8001534 <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 8001510:	2233      	movs	r2, #51	; 0x33
 8001512:	2100      	movs	r1, #0
 8001514:	68b8      	ldr	r0, [r7, #8]
 8001516:	f00d fd17 	bl	800ef48 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	3301      	adds	r3, #1
 8001520:	18d1      	adds	r1, r2, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	68b8      	ldr	r0, [r7, #8]
 800152e:	f00d fce3 	bl	800eef8 <memcpy>
 8001532:	e01f      	b.n	8001574 <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800153a:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 800153c:	2233      	movs	r2, #51	; 0x33
 800153e:	2100      	movs	r1, #0
 8001540:	68b8      	ldr	r0, [r7, #8]
 8001542:	f00d fd01 	bl	800ef48 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	3301      	adds	r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4619      	mov	r1, r3
 8001552:	68b8      	ldr	r0, [r7, #8]
 8001554:	f00d fcd0 	bl	800eef8 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	18d0      	adds	r0, r2, r3
 800155e:	68f9      	ldr	r1, [r7, #12]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	4413      	add	r3, r2
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	461a      	mov	r2, r3
 8001570:	f00d fcc2 	bl	800eef8 <memcpy>
				}
				return pThis->ring_buf[header];
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	4413      	add	r3, r2
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	e066      	b.n	800164c <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001582:	2b00      	cmp	r3, #0
 8001584:	dd5e      	ble.n	8001644 <hist_restore_line+0x200>
				pThis->cur--;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158a:	1e5a      	subs	r2, r3, #1
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	61fb      	str	r3, [r7, #28]
			int j = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 800159a:	e010      	b.n	80015be <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	4413      	add	r3, r2
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	3301      	adds	r3, #1
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	4413      	add	r3, r2
 80015aa:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	2b3f      	cmp	r3, #63	; 0x3f
 80015b0:	dd02      	ble.n	80015b8 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b40      	subs	r3, #64	; 0x40
 80015b6:	61fb      	str	r3, [r7, #28]
				j++;
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	3301      	adds	r3, #1
 80015bc:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	4413      	add	r3, r2
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d006      	beq.n	80015d8 <hist_restore_line+0x194>
 80015ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	1ad2      	subs	r2, r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d1e1      	bne.n	800159c <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	4413      	add	r3, r2
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	4413      	add	r3, r2
 80015e6:	2b3f      	cmp	r3, #63	; 0x3f
 80015e8:	dc0c      	bgt.n	8001604 <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	3301      	adds	r3, #1
 80015f0:	18d1      	adds	r1, r2, r3
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	4413      	add	r3, r2
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	68b8      	ldr	r0, [r7, #8]
 80015fe:	f00d fc7b 	bl	800eef8 <memcpy>
 8001602:	e01a      	b.n	800163a <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800160a:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3301      	adds	r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	4619      	mov	r1, r3
 8001618:	68b8      	ldr	r0, [r7, #8]
 800161a:	f00d fc6d 	bl	800eef8 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	18d0      	adds	r0, r2, r3
 8001624:	68f9      	ldr	r1, [r7, #12]
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	4413      	add	r3, r2
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	461a      	mov	r2, r3
 8001636:	f00d fc5f 	bl	800eef8 <memcpy>
			}
			return pThis->ring_buf[header];
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	4413      	add	r3, r2
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	e003      	b.n	800164c <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 8001644:	2300      	movs	r3, #0
 8001646:	e001      	b.n	800164c <hist_restore_line+0x208>
		}
	}
	return -1;
 8001648:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164c:	4618      	mov	r0, r3
 800164e:	3730      	adds	r7, #48	; 0x30
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
	int ind = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8001668:	e002      	b.n	8001670 <split+0x1c>
			ind++;
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	3301      	adds	r3, #1
 800166e:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4413      	add	r3, r2
 8001676:	3354      	adds	r3, #84	; 0x54
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d103      	bne.n	8001686 <split+0x32>
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	429a      	cmp	r2, r3
 8001684:	dbf1      	blt.n	800166a <split+0x16>
		}
		if (!(ind < limit)) return i;
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	429a      	cmp	r2, r3
 800168c:	db01      	blt.n	8001692 <split+0x3e>
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	e024      	b.n	80016dc <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	1c58      	adds	r0, r3, #1
 800169e:	6178      	str	r0, [r7, #20]
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	4403      	add	r3, r0
 80016a6:	440a      	add	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	dd05      	ble.n	80016bc <split+0x68>
			return -1;
 80016b0:	f04f 33ff 	mov.w	r3, #4294967295
 80016b4:	e012      	b.n	80016dc <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	3301      	adds	r3, #1
 80016ba:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4413      	add	r3, r2
 80016c2:	3354      	adds	r3, #84	; 0x54
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <split+0x7e>
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	dbf1      	blt.n	80016b6 <split+0x62>
		}
		if (!(ind < limit)) return i;
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	dbca      	blt.n	8001670 <split+0x1c>
 80016da:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 80016dc:	4618      	mov	r0, r3
 80016de:	371c      	adds	r7, #28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr

080016e6 <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016f8:	4610      	mov	r0, r2
 80016fa:	4798      	blx	r3
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001712:	4803      	ldr	r0, [pc, #12]	; (8001720 <terminal_backspace+0x1c>)
 8001714:	4798      	blx	r3
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	0800f03c 	.word	0x0800f03c

08001724 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001732:	4803      	ldr	r0, [pc, #12]	; (8001740 <terminal_newline+0x1c>)
 8001734:	4798      	blx	r3
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	0800f044 	.word	0x0800f044

08001744 <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	2300      	movs	r3, #0
 8001754:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001760:	d235      	bcs.n	80017ce <u16bit_to_str+0x8a>
		while (nmb > 0) {
 8001762:	e01a      	b.n	800179a <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <u16bit_to_str+0x9c>)
 8001768:	fba3 2301 	umull	r2, r3, r3, r1
 800176c:	08da      	lsrs	r2, r3, #3
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	1aca      	subs	r2, r1, r3
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	1c59      	adds	r1, r3, #1
 800177e:	6179      	str	r1, [r7, #20]
 8001780:	3230      	adds	r2, #48	; 0x30
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	f107 0118 	add.w	r1, r7, #24
 8001788:	440b      	add	r3, r1
 800178a:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <u16bit_to_str+0x9c>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	08db      	lsrs	r3, r3, #3
 8001798:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1e1      	bne.n	8001764 <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 80017a0:	2300      	movs	r3, #0
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	e00f      	b.n	80017c6 <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	1e5a      	subs	r2, r3, #1
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	1c59      	adds	r1, r3, #1
 80017b2:	6039      	str	r1, [r7, #0]
 80017b4:	f107 0118 	add.w	r1, r7, #24
 80017b8:	440a      	add	r2, r1
 80017ba:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80017be:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	3301      	adds	r3, #1
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	dbeb      	blt.n	80017a6 <u16bit_to_str+0x62>
	}
	*buf = '\0';
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
	return buf;
 80017d4:	683b      	ldr	r3, [r7, #0]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	371c      	adds	r7, #28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	cccccccd 	.word	0xcccccccd

080017e4 <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4a1d      	ldr	r2, [pc, #116]	; (8001878 <terminal_move_cursor+0x94>)
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	4611      	mov	r1, r2
 8001808:	8019      	strh	r1, [r3, #0]
 800180a:	3302      	adds	r3, #2
 800180c:	0c12      	lsrs	r2, r2, #16
 800180e:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	dd0f      	ble.n	8001836 <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	3302      	adds	r3, #2
 800181e:	4619      	mov	r1, r3
 8001820:	4610      	mov	r0, r2
 8001822:	f7ff ff8f 	bl	8001744 <u16bit_to_str>
 8001826:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	4914      	ldr	r1, [pc, #80]	; (800187c <terminal_move_cursor+0x98>)
 800182c:	461a      	mov	r2, r3
 800182e:	460b      	mov	r3, r1
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	8013      	strh	r3, [r2, #0]
 8001834:	e013      	b.n	800185e <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	da18      	bge.n	800186e <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	425b      	negs	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	3302      	adds	r3, #2
 8001848:	4619      	mov	r1, r3
 800184a:	4610      	mov	r0, r2
 800184c:	f7ff ff7a 	bl	8001744 <u16bit_to_str>
 8001850:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	490a      	ldr	r1, [pc, #40]	; (8001880 <terminal_move_cursor+0x9c>)
 8001856:	461a      	mov	r2, r3
 8001858:	460b      	mov	r3, r1
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001864:	f107 020c 	add.w	r2, r7, #12
 8001868:	4610      	mov	r0, r2
 800186a:	4798      	blx	r3
 800186c:	e000      	b.n	8001870 <terminal_move_cursor+0x8c>
		return;
 800186e:	bf00      	nop
}
 8001870:	3720      	adds	r7, #32
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	0800f048 	.word	0x0800f048
 800187c:	0800f04c 	.word	0x0800f04c
 8001880:	0800f050 	.word	0x0800f050

08001884 <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	4a15      	ldr	r2, [pc, #84]	; (80018e8 <terminal_reset_cursor+0x64>)
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	4611      	mov	r1, r2
 8001896:	8019      	strh	r1, [r3, #0]
 8001898:	3302      	adds	r3, #2
 800189a:	0c12      	lsrs	r2, r2, #16
 800189c:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	3302      	adds	r3, #2
 80018a4:	4619      	mov	r1, r3
 80018a6:	203a      	movs	r0, #58	; 0x3a
 80018a8:	f7ff ff4c 	bl	8001744 <u16bit_to_str>
 80018ac:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <terminal_reset_cursor+0x68>)
 80018b2:	6810      	ldr	r0, [r2, #0]
 80018b4:	6018      	str	r0, [r3, #0]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3303      	adds	r3, #3
 80018ba:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 80018bc:	69f9      	ldr	r1, [r7, #28]
 80018be:	2005      	movs	r0, #5
 80018c0:	f7ff ff40 	bl	8001744 <u16bit_to_str>
 80018c4:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4909      	ldr	r1, [pc, #36]	; (80018f0 <terminal_reset_cursor+0x6c>)
 80018ca:	461a      	mov	r2, r3
 80018cc:	460b      	mov	r3, r1
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018d8:	f107 020c 	add.w	r2, r7, #12
 80018dc:	4610      	mov	r0, r2
 80018de:	4798      	blx	r3
}
 80018e0:	bf00      	nop
 80018e2:	3720      	adds	r7, #32
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	0800f048 	.word	0x0800f048
 80018ec:	0800f054 	.word	0x0800f054
 80018f0:	0800f04c 	.word	0x0800f04c

080018f4 <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001906:	4816      	ldr	r0, [pc, #88]	; (8001960 <terminal_print_line+0x6c>)
 8001908:	4798      	blx	r3

	char nch [] = {0,0};
 800190a:	2300      	movs	r3, #0
 800190c:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e014      	b.n	800193e <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	4413      	add	r3, r2
 800191a:	3354      	adds	r3, #84	; 0x54
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 8001920:	7c3b      	ldrb	r3, [r7, #16]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <terminal_print_line+0x36>
			nch[0] = ' ';
 8001926:	2320      	movs	r3, #32
 8001928:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001930:	f107 0210 	add.w	r2, r7, #16
 8001934:	4610      	mov	r0, r2
 8001936:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3301      	adds	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	429a      	cmp	r2, r3
 8001948:	dbe4      	blt.n	8001914 <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f7ff ff9a 	bl	8001884 <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f7ff ff46 	bl	80017e4 <terminal_move_cursor>
}
 8001958:	bf00      	nop
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	0800f058 	.word	0x0800f058

08001964 <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3354      	adds	r3, #84	; 0x54
 8001972:	2233      	movs	r2, #51	; 0x33
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f00d fae6 	bl	800ef48 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3304      	adds	r3, #4
 8001980:	2240      	movs	r2, #64	; 0x40
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f00d fadf 	bl	800ef48 <memset>
	pThis->ring_hist.begin = 0;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pThis->execute = NULL;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	pThis->get_completion = NULL;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif
	pThis->prompt_str = prompt_default;
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <microrl_init+0x78>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000004 	.word	0x20000004

080019e0 <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	1d18      	adds	r0, r3, #4
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3354      	adds	r3, #84	; 0x54
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f7ff fcfb 	bl	8001444 <hist_restore_line>
 8001a4e:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db1a      	blt.n	8001a8c <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3354      	adds	r3, #84	; 0x54
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		terminal_reset_cursor (pThis);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ff04 	bl	8001884 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a82:	461a      	mov	r2, r3
 8001a84:	2100      	movs	r1, #0
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ff34 	bl	80018f4 <terminal_print_line>
	}
}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	2b5b      	cmp	r3, #91	; 0x5b
 8001aa4:	d104      	bne.n	8001ab0 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
		return 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	e07b      	b.n	8001ba8 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d14f      	bne.n	8001b58 <escape_process+0xc4>
		if (ch == 'A') {
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	2b41      	cmp	r3, #65	; 0x41
 8001abc:	d105      	bne.n	8001aca <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 8001abe:	2100      	movs	r1, #0
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ffb7 	bl	8001a34 <hist_search>
#endif
			return 1;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e06e      	b.n	8001ba8 <escape_process+0x114>
		} else if (ch == 'B') {
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	2b42      	cmp	r3, #66	; 0x42
 8001ace:	d105      	bne.n	8001adc <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffae 	bl	8001a34 <hist_search>
#endif
			return 1;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e065      	b.n	8001ba8 <escape_process+0x114>
		} else if (ch == 'C') {
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	2b43      	cmp	r3, #67	; 0x43
 8001ae0:	d114      	bne.n	8001b0c <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aee:	429a      	cmp	r2, r3
 8001af0:	da0a      	bge.n	8001b08 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 8001af2:	2101      	movs	r1, #1
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff fe75 	bl	80017e4 <terminal_move_cursor>
				pThis->cursor++;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e04d      	b.n	8001ba8 <escape_process+0x114>
		} else if (ch == 'D') {
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	2b44      	cmp	r3, #68	; 0x44
 8001b10:	d112      	bne.n	8001b38 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	dd0b      	ble.n	8001b34 <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff fe5f 	bl	80017e4 <terminal_move_cursor>
				pThis->cursor--;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b2c:	1e5a      	subs	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e037      	b.n	8001ba8 <escape_process+0x114>
		} else if (ch == '7') {
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	2b37      	cmp	r3, #55	; 0x37
 8001b3c:	d104      	bne.n	8001b48 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2202      	movs	r2, #2
 8001b42:	701a      	strb	r2, [r3, #0]
			return 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e02f      	b.n	8001ba8 <escape_process+0x114>
		} else if (ch == '8') {
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	2b38      	cmp	r3, #56	; 0x38
 8001b4c:	d12b      	bne.n	8001ba6 <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2203      	movs	r2, #3
 8001b52:	701a      	strb	r2, [r3, #0]
			return 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	e027      	b.n	8001ba8 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	2b7e      	cmp	r3, #126	; 0x7e
 8001b5c:	d123      	bne.n	8001ba6 <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d108      	bne.n	8001b78 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff fe8c 	bl	8001884 <terminal_reset_cursor>
			pThis->cursor = 0;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e017      	b.n	8001ba8 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d112      	bne.n	8001ba6 <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fe27 	bl	80017e4 <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	2b32      	cmp	r3, #50	; 0x32
 8001bc8:	dc60      	bgt.n	8001c8c <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	440b      	add	r3, r1
 8001bdc:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3354      	adds	r3, #84	; 0x54
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor + len,
 8001be8:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bf6:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f00d f98b 	bl	800ef14 <memmove>
		for (i = 0; i < len; i++) {
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e025      	b.n	8001c50 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	441a      	add	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	440b      	add	r3, r1
 8001c14:	7811      	ldrb	r1, [r2, #0]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4413      	add	r3, r2
 8001c1a:	460a      	mov	r2, r1
 8001c1c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	4413      	add	r3, r2
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	d109      	bne.n	8001c4a <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	4413      	add	r3, r2
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	dbd5      	blt.n	8001c04 <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	441a      	add	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdlen += len;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	441a      	add	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4413      	add	r3, r2
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <microrl_insert_text+0xde>
	}
	return false;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	dd31      	ble.n	8001d0c <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff fd2b 	bl	8001704 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3354      	adds	r3, #84	; 0x54
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor-1,
 8001cc8:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 8001cda:	461a      	mov	r2, r3
 8001cdc:	f00d f91a 	bl	800ef14 <memmove>
		pThis->cursor--;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ce6:	1e5a      	subs	r2, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d04:	1e5a      	subs	r2, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7fe fa1e 	bl	8000164 <strlen>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	e019      	b.n	8001d66 <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fa11 	bl	8000164 <strlen>
 8001d42:	4602      	mov	r2, r0
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d20a      	bcs.n	8001d60 <common_len+0x4c>
			shortest = arr[i];
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f7fe fa04 	bl	8000164 <strlen>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	3301      	adds	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1de      	bne.n	8001d32 <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	e01f      	b.n	8001dba <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	e012      	b.n	8001da6 <common_len+0x92>
			if (shortest[i] != arr[j][i])
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4413      	add	r3, r2
 8001d86:	781a      	ldrb	r2, [r3, #0]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	440b      	add	r3, r1
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	440b      	add	r3, r1
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <common_len+0x8c>
				return i;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	e011      	b.n	8001dc4 <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	3301      	adds	r3, #1
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e5      	bne.n	8001d80 <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3301      	adds	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	dbdb      	blt.n	8001d7a <common_len+0x66>

	return i;
 8001dc2:	697b      	ldr	r3, [r7, #20]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 8001dcc:	b5b0      	push	{r4, r5, r7, lr}
 8001dce:	b08c      	sub	sp, #48	; 0x30
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 809c 	beq.w	8001f18 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001de6:	f107 020c 	add.w	r2, r7, #12
 8001dea:	4619      	mov	r1, r3
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff fc31 	bl	8001654 <split>
 8001df2:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d109      	bne.n	8001e1c <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 8001e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e14:	4413      	add	r3, r2
 8001e16:	4a42      	ldr	r2, [pc, #264]	; (8001f20 <microrl_get_complite+0x154>)
 8001e18:	f843 2c24 	str.w	r2, [r3, #-36]
	compl_token = pThis->get_completion (status, tkn_arr);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e22:	f107 020c 	add.w	r2, r7, #12
 8001e26:	4611      	mov	r1, r2
 8001e28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e2a:	4798      	blx	r3
 8001e2c:	6238      	str	r0, [r7, #32]
	if (compl_token[0] != NULL) {
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d071      	beq.n	8001f1a <microrl_get_complite+0x14e>
		int i = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
		int len;

		if (compl_token[1] == NULL) {
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d107      	bne.n	8001e54 <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe f98b 	bl	8000164 <strlen>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
 8001e52:	e026      	b.n	8001ea2 <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8001e54:	6a38      	ldr	r0, [r7, #32]
 8001e56:	f7ff ff5d 	bl	8001d14 <common_len>
 8001e5a:	6278      	str	r0, [r7, #36]	; 0x24
			terminal_newline (pThis);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff fc61 	bl	8001724 <terminal_newline>
			while (compl_token [i] != NULL) {
 8001e62:	e011      	b.n	8001e88 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e6c:	0092      	lsls	r2, r2, #2
 8001e6e:	6a39      	ldr	r1, [r7, #32]
 8001e70:	440a      	add	r2, r1
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	4610      	mov	r0, r2
 8001e76:	4798      	blx	r3
				pThis->print (" ");
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e7e:	4829      	ldr	r0, [pc, #164]	; (8001f24 <microrl_get_complite+0x158>)
 8001e80:	4798      	blx	r3
				i++;
 8001e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e84:	3301      	adds	r3, #1
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
			while (compl_token [i] != NULL) {
 8001e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	6a3a      	ldr	r2, [r7, #32]
 8001e8e:	4413      	add	r3, r2
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1e6      	bne.n	8001e64 <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fc44 	bl	8001724 <terminal_newline>
			print_prompt (pThis);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff fc22 	bl	80016e6 <print_prompt>
		}
		
		if (len) {
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d02b      	beq.n	8001f00 <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	681c      	ldr	r4, [r3, #0]
 8001eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe f951 	bl	8000164 <strlen>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 8001ec6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe f943 	bl	8000164 <strlen>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4629      	mov	r1, r5
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff fe62 	bl	8001bb0 <microrl_insert_text>
			if (compl_token[1] == NULL) 
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d104      	bne.n	8001f00 <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	490a      	ldr	r1, [pc, #40]	; (8001f24 <microrl_get_complite+0x158>)
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff fe58 	bl	8001bb0 <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fcbf 	bl	8001884 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2100      	movs	r1, #0
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff fcef 	bl	80018f4 <terminal_print_line>
 8001f16:	e000      	b.n	8001f1a <microrl_get_complite+0x14e>
		return;
 8001f18:	bf00      	nop
	} 
}
 8001f1a:	3730      	adds	r7, #48	; 0x30
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f20:	0800f05c 	.word	0x0800f05c
 8001f24:	0800f060 	.word	0x0800f060

08001f28 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff fbf7 	bl	8001724 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	dd0a      	ble.n	8001f56 <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	1d18      	adds	r0, r3, #4
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f50:	461a      	mov	r2, r3
 8001f52:	f7ff fa08 	bl	8001366 <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5c:	f107 0208 	add.w	r2, r7, #8
 8001f60:	4619      	mov	r1, r3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff fb76 	bl	8001654 <split>
 8001f68:	61f8      	str	r0, [r7, #28]
	if (status == -1){
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d109      	bne.n	8001f86 <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f78:	4817      	ldr	r0, [pc, #92]	; (8001fd8 <new_line_handler+0xb0>)
 8001f7a:	4798      	blx	r3
		pThis->print (ENDL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f82:	4816      	ldr	r0, [pc, #88]	; (8001fdc <new_line_handler+0xb4>)
 8001f84:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	dd0c      	ble.n	8001fa6 <new_line_handler+0x7e>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9c:	f107 0208 	add.w	r2, r7, #8
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	69f8      	ldr	r0, [r7, #28]
 8001fa4:	4798      	blx	r3
	print_prompt (pThis);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fb9d 	bl	80016e6 <print_prompt>
	pThis->cmdlen = 0;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3354      	adds	r3, #84	; 0x54
 8001fc0:	2233      	movs	r2, #51	; 0x33
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f00c ffbf 	bl	800ef48 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8001fd0:	bf00      	nop
 8001fd2:	3720      	adds	r7, #32
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	0800f064 	.word	0x0800f064
 8001fdc:	0800f044 	.word	0x0800f044

08001fe0 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	785b      	ldrb	r3, [r3, #1]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00d      	beq.n	800200e <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff fd4b 	bl	8001a94 <escape_process>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 81e3 	beq.w	80023cc <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 800200c:	e1de      	b.n	80023cc <microrl_insert_char+0x3ec>
		switch (ch) {
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	3b01      	subs	r3, #1
 8002012:	2b7e      	cmp	r3, #126	; 0x7e
 8002014:	f200 81af 	bhi.w	8002376 <microrl_insert_char+0x396>
 8002018:	a201      	add	r2, pc, #4	; (adr r2, 8002020 <microrl_insert_char+0x40>)
 800201a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201e:	bf00      	nop
 8002020:	080022b3 	.word	0x080022b3
 8002024:	080022eb 	.word	0x080022eb
 8002028:	08002363 	.word	0x08002363
 800202c:	08002377 	.word	0x08002377
 8002030:	0800228f 	.word	0x0800228f
 8002034:	080022c3 	.word	0x080022c3
 8002038:	08002377 	.word	0x08002377
 800203c:	08002323 	.word	0x08002323
 8002040:	08002245 	.word	0x08002245
 8002044:	0800221d 	.word	0x0800221d
 8002048:	08002277 	.word	0x08002277
 800204c:	08002377 	.word	0x08002377
 8002050:	0800221d 	.word	0x0800221d
 8002054:	08002319 	.word	0x08002319
 8002058:	08002377 	.word	0x08002377
 800205c:	0800230f 	.word	0x0800230f
 8002060:	08002377 	.word	0x08002377
 8002064:	0800233f 	.word	0x0800233f
 8002068:	08002377 	.word	0x08002377
 800206c:	08002377 	.word	0x08002377
 8002070:	0800225b 	.word	0x0800225b
 8002074:	08002377 	.word	0x08002377
 8002078:	08002377 	.word	0x08002377
 800207c:	08002377 	.word	0x08002377
 8002080:	08002377 	.word	0x08002377
 8002084:	08002377 	.word	0x08002377
 8002088:	0800224d 	.word	0x0800224d
 800208c:	08002377 	.word	0x08002377
 8002090:	08002377 	.word	0x08002377
 8002094:	08002377 	.word	0x08002377
 8002098:	08002377 	.word	0x08002377
 800209c:	08002377 	.word	0x08002377
 80020a0:	08002377 	.word	0x08002377
 80020a4:	08002377 	.word	0x08002377
 80020a8:	08002377 	.word	0x08002377
 80020ac:	08002377 	.word	0x08002377
 80020b0:	08002377 	.word	0x08002377
 80020b4:	08002377 	.word	0x08002377
 80020b8:	08002377 	.word	0x08002377
 80020bc:	08002377 	.word	0x08002377
 80020c0:	08002377 	.word	0x08002377
 80020c4:	08002377 	.word	0x08002377
 80020c8:	08002377 	.word	0x08002377
 80020cc:	08002377 	.word	0x08002377
 80020d0:	08002377 	.word	0x08002377
 80020d4:	08002377 	.word	0x08002377
 80020d8:	08002377 	.word	0x08002377
 80020dc:	08002377 	.word	0x08002377
 80020e0:	08002377 	.word	0x08002377
 80020e4:	08002377 	.word	0x08002377
 80020e8:	08002377 	.word	0x08002377
 80020ec:	08002377 	.word	0x08002377
 80020f0:	08002377 	.word	0x08002377
 80020f4:	08002377 	.word	0x08002377
 80020f8:	08002377 	.word	0x08002377
 80020fc:	08002377 	.word	0x08002377
 8002100:	08002377 	.word	0x08002377
 8002104:	08002377 	.word	0x08002377
 8002108:	08002377 	.word	0x08002377
 800210c:	08002377 	.word	0x08002377
 8002110:	08002377 	.word	0x08002377
 8002114:	08002377 	.word	0x08002377
 8002118:	08002377 	.word	0x08002377
 800211c:	08002377 	.word	0x08002377
 8002120:	08002377 	.word	0x08002377
 8002124:	08002377 	.word	0x08002377
 8002128:	08002377 	.word	0x08002377
 800212c:	08002377 	.word	0x08002377
 8002130:	08002377 	.word	0x08002377
 8002134:	08002377 	.word	0x08002377
 8002138:	08002377 	.word	0x08002377
 800213c:	08002377 	.word	0x08002377
 8002140:	08002377 	.word	0x08002377
 8002144:	08002377 	.word	0x08002377
 8002148:	08002377 	.word	0x08002377
 800214c:	08002377 	.word	0x08002377
 8002150:	08002377 	.word	0x08002377
 8002154:	08002377 	.word	0x08002377
 8002158:	08002377 	.word	0x08002377
 800215c:	08002377 	.word	0x08002377
 8002160:	08002377 	.word	0x08002377
 8002164:	08002377 	.word	0x08002377
 8002168:	08002377 	.word	0x08002377
 800216c:	08002377 	.word	0x08002377
 8002170:	08002377 	.word	0x08002377
 8002174:	08002377 	.word	0x08002377
 8002178:	08002377 	.word	0x08002377
 800217c:	08002377 	.word	0x08002377
 8002180:	08002377 	.word	0x08002377
 8002184:	08002377 	.word	0x08002377
 8002188:	08002377 	.word	0x08002377
 800218c:	08002377 	.word	0x08002377
 8002190:	08002377 	.word	0x08002377
 8002194:	08002377 	.word	0x08002377
 8002198:	08002377 	.word	0x08002377
 800219c:	08002377 	.word	0x08002377
 80021a0:	08002377 	.word	0x08002377
 80021a4:	08002377 	.word	0x08002377
 80021a8:	08002377 	.word	0x08002377
 80021ac:	08002377 	.word	0x08002377
 80021b0:	08002377 	.word	0x08002377
 80021b4:	08002377 	.word	0x08002377
 80021b8:	08002377 	.word	0x08002377
 80021bc:	08002377 	.word	0x08002377
 80021c0:	08002377 	.word	0x08002377
 80021c4:	08002377 	.word	0x08002377
 80021c8:	08002377 	.word	0x08002377
 80021cc:	08002377 	.word	0x08002377
 80021d0:	08002377 	.word	0x08002377
 80021d4:	08002377 	.word	0x08002377
 80021d8:	08002377 	.word	0x08002377
 80021dc:	08002377 	.word	0x08002377
 80021e0:	08002377 	.word	0x08002377
 80021e4:	08002377 	.word	0x08002377
 80021e8:	08002377 	.word	0x08002377
 80021ec:	08002377 	.word	0x08002377
 80021f0:	08002377 	.word	0x08002377
 80021f4:	08002377 	.word	0x08002377
 80021f8:	08002377 	.word	0x08002377
 80021fc:	08002377 	.word	0x08002377
 8002200:	08002377 	.word	0x08002377
 8002204:	08002377 	.word	0x08002377
 8002208:	08002377 	.word	0x08002377
 800220c:	08002377 	.word	0x08002377
 8002210:	08002377 	.word	0x08002377
 8002214:	08002377 	.word	0x08002377
 8002218:	08002323 	.word	0x08002323
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	789b      	ldrb	r3, [r3, #2]
 8002220:	461a      	mov	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2b0d      	cmp	r3, #13
 8002226:	d101      	bne.n	800222c <microrl_insert_char+0x24c>
 8002228:	230a      	movs	r3, #10
 800222a:	e000      	b.n	800222e <microrl_insert_char+0x24e>
 800222c:	230d      	movs	r3, #13
 800222e:	4293      	cmp	r3, r2
 8002230:	f000 80c1 	beq.w	80023b6 <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff fe73 	bl	8001f28 <new_line_handler>
				break;
 8002242:	e0c3      	b.n	80023cc <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff fdc1 	bl	8001dcc <microrl_get_complite>
			break;
 800224a:	e0bf      	b.n	80023cc <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	705a      	strb	r2, [r3, #1]
			break;
 8002252:	e0bb      	b.n	80023cc <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff fd1e 	bl	8001c96 <microrl_backspace>
					while (pThis->cursor > 0) {
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002260:	2b00      	cmp	r3, #0
 8002262:	dcf7      	bgt.n	8002254 <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800226a:	461a      	mov	r2, r3
 800226c:	2100      	movs	r1, #0
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff fb40 	bl	80018f4 <terminal_print_line>
			break;
 8002274:	e0aa      	b.n	80023cc <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800227c:	4855      	ldr	r0, [pc, #340]	; (80023d4 <microrl_insert_char+0x3f4>)
 800227e:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800228c:	e09e      	b.n	80023cc <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	4619      	mov	r1, r3
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff faa0 	bl	80017e4 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 80022b0:	e08c      	b.n	80023cc <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff fae6 	bl	8001884 <terminal_reset_cursor>
				pThis->cursor = 0;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 80022c0:	e084      	b.n	80023cc <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	429a      	cmp	r2, r3
 80022d0:	da73      	bge.n	80023ba <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 80022d2:	2101      	movs	r1, #1
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff fa85 	bl	80017e4 <terminal_move_cursor>
				pThis->cursor++;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 80022e8:	e067      	b.n	80023ba <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d064      	beq.n	80023be <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff fa73 	bl	80017e4 <terminal_move_cursor>
				pThis->cursor--;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002304:	1e5a      	subs	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800230c:	e057      	b.n	80023be <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 800230e:	2100      	movs	r1, #0
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff fb8f 	bl	8001a34 <hist_search>
			break;
 8002316:	e059      	b.n	80023cc <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 8002318:	2101      	movs	r1, #1
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff fb8a 	bl	8001a34 <hist_search>
			break;
 8002320:	e054      	b.n	80023cc <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff fcb7 	bl	8001c96 <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002334:	461a      	mov	r2, r3
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff fadc 	bl	80018f4 <terminal_print_line>
			break;
 800233c:	e046      	b.n	80023cc <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff f9f0 	bl	8001724 <terminal_newline>
				print_prompt (pThis);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff f9ce 	bl	80016e6 <print_prompt>
				terminal_reset_cursor (pThis);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff fa9a 	bl	8001884 <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002356:	461a      	mov	r2, r3
 8002358:	2100      	movs	r1, #0
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff faca 	bl	80018f4 <terminal_print_line>
			break;
 8002360:	e034      	b.n	80023cc <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002368:	2b00      	cmp	r3, #0
 800236a:	d02a      	beq.n	80023c2 <microrl_insert_char+0x3e2>
				pThis->sigint();
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002372:	4798      	blx	r3
			break;
 8002374:	e025      	b.n	80023c2 <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b20      	cmp	r3, #32
 800237a:	d104      	bne.n	8002386 <microrl_insert_char+0x3a6>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002382:	2b00      	cmp	r3, #0
 8002384:	d01f      	beq.n	80023c6 <microrl_insert_char+0x3e6>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b1f      	cmp	r3, #31
 800238a:	dd1c      	ble.n	80023c6 <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 800238c:	463b      	mov	r3, r7
 800238e:	2201      	movs	r2, #1
 8002390:	4619      	mov	r1, r3
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff fc0c 	bl	8001bb0 <microrl_insert_text>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d015      	beq.n	80023ca <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023a4:	1e59      	subs	r1, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023ac:	461a      	mov	r2, r3
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff faa0 	bl	80018f4 <terminal_print_line>
			break;
 80023b4:	e009      	b.n	80023ca <microrl_insert_char+0x3ea>
					break;
 80023b6:	bf00      	nop
 80023b8:	e008      	b.n	80023cc <microrl_insert_char+0x3ec>
			break;
 80023ba:	bf00      	nop
 80023bc:	e006      	b.n	80023cc <microrl_insert_char+0x3ec>
			break;
 80023be:	bf00      	nop
 80023c0:	e004      	b.n	80023cc <microrl_insert_char+0x3ec>
			break;
 80023c2:	bf00      	nop
 80023c4:	e002      	b.n	80023cc <microrl_insert_char+0x3ec>
	}
 80023c6:	bf00      	nop
 80023c8:	e000      	b.n	80023cc <microrl_insert_char+0x3ec>
			break;
 80023ca:	bf00      	nop
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	0800f058 	.word	0x0800f058

080023d8 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <microrl_print_char+0x20>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	79fa      	ldrb	r2, [r7, #7]
 80023e8:	4611      	mov	r1, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fdf8 	bl	8001fe0 <microrl_insert_char>
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000008 	.word	0x20000008

080023fc <print>:

void print (const char * str)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 8002404:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <print+0x84>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	f083 0301 	eor.w	r3, r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <print+0x1e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b1b      	cmp	r3, #27
 8002418:	d02b      	beq.n	8002472 <print+0x76>
		return;
	if (!CDC_is_ready)
 800241a:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <print+0x88>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	f083 0301 	eor.w	r3, r3, #1
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d126      	bne.n	8002476 <print+0x7a>
		return;
	uint16_t len = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 800242c:	89fb      	ldrh	r3, [r7, #14]
 800242e:	3301      	adds	r3, #1
 8002430:	81fb      	strh	r3, [r7, #14]
 8002432:	89fb      	ldrh	r3, [r7, #14]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	4413      	add	r3, r2
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f6      	bne.n	800242c <print+0x30>
	uint32_t timeout = HAL_GetTick();
 800243e:	f000 ffc7 	bl	80033d0 <HAL_GetTick>
 8002442:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8002444:	e006      	b.n	8002454 <print+0x58>
		if (HAL_GetTick() - timeout >= 5)
 8002446:	f000 ffc3 	bl	80033d0 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b04      	cmp	r3, #4
 8002452:	d807      	bhi.n	8002464 <print+0x68>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <print+0x8c>)
 8002456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800245a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f1      	bne.n	8002446 <print+0x4a>
 8002462:	e000      	b.n	8002466 <print+0x6a>
			break;
 8002464:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 8002466:	89fb      	ldrh	r3, [r7, #14]
 8002468:	4619      	mov	r1, r3
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f00c f942 	bl	800e6f4 <CDC_Transmit_FS>
 8002470:	e002      	b.n	8002478 <print+0x7c>
		return;
 8002472:	bf00      	nop
 8002474:	e000      	b.n	8002478 <print+0x7c>
		return;
 8002476:	bf00      	nop
}
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	2000000c 	.word	0x2000000c
 8002484:	200001ae 	.word	0x200001ae
 8002488:	200026d4 	.word	0x200026d4

0800248c <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	e010      	b.n	80024be <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 800249c:	490c      	ldr	r1, [pc, #48]	; (80024d0 <find_color_by_name+0x44>)
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4413      	add	r3, r2
 80024aa:	440b      	add	r3, r1
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	79fa      	ldrb	r2, [r7, #7]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d101      	bne.n	80024b8 <find_color_by_name+0x2c>
		{
			return i;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	e006      	b.n	80024c6 <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	3301      	adds	r3, #1
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b10      	cmp	r3, #16
 80024c2:	d9eb      	bls.n	800249c <find_color_by_name+0x10>
		}
	}
	return 0;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	0800f608 	.word	0x0800f608

080024d4 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ffd2 	bl	800248c <find_color_by_name>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	4a08      	ldr	r2, [pc, #32]	; (8002518 <print_color+0x44>)
 80024f6:	4413      	add	r3, r2
 80024f8:	3301      	adds	r3, #1
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff ff7e 	bl	80023fc <print>
	print(str);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ff7b 	bl	80023fc <print>
	print(COLOR_NC);
 8002506:	4805      	ldr	r0, [pc, #20]	; (800251c <print_color+0x48>)
 8002508:	f7ff ff78 	bl	80023fc <print>
	return 0;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	0800f608 	.word	0x0800f608
 800251c:	0800f07c 	.word	0x0800f07c

08002520 <str_length>:

int str_length(const char * str)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
	while (str[i])
 800252c:	e002      	b.n	8002534 <str_length+0x14>
		i++;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	3301      	adds	r3, #1
 8002532:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1f6      	bne.n	800252e <str_length+0xe>
	return i;
 8002540:	68fb      	ldr	r3, [r7, #12]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <print_help>:


int print_help(int argc, const char * const * argv)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
	print(_VER);
 8002556:	4862      	ldr	r0, [pc, #392]	; (80026e0 <print_help+0x194>)
 8002558:	f7ff ff50 	bl	80023fc <print>
	print(ENDL);
 800255c:	4861      	ldr	r0, [pc, #388]	; (80026e4 <print_help+0x198>)
 800255e:	f7ff ff4d 	bl	80023fc <print>
	print ("Use ");
 8002562:	4861      	ldr	r0, [pc, #388]	; (80026e8 <print_help+0x19c>)
 8002564:	f7ff ff4a 	bl	80023fc <print>
	print_color("TAB", C_GREEN);
 8002568:	2105      	movs	r1, #5
 800256a:	4860      	ldr	r0, [pc, #384]	; (80026ec <print_help+0x1a0>)
 800256c:	f7ff ffb2 	bl	80024d4 <print_color>
	print(" key for completion");
 8002570:	485f      	ldr	r0, [pc, #380]	; (80026f0 <print_help+0x1a4>)
 8002572:	f7ff ff43 	bl	80023fc <print>
	print (ENDL);
 8002576:	485b      	ldr	r0, [pc, #364]	; (80026e4 <print_help+0x198>)
 8002578:	f7ff ff40 	bl	80023fc <print>
	print ("Available commands:");
 800257c:	485d      	ldr	r0, [pc, #372]	; (80026f4 <print_help+0x1a8>)
 800257e:	f7ff ff3d 	bl	80023fc <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	e09e      	b.n	80026c6 <print_help+0x17a>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 8002588:	4a5b      	ldr	r2, [pc, #364]	; (80026f8 <print_help+0x1ac>)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	212c      	movs	r1, #44	; 0x2c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259a:	d11f      	bne.n	80025dc <print_help+0x90>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	3b01      	subs	r3, #1
 80025a0:	4a55      	ldr	r2, [pc, #340]	; (80026f8 <print_help+0x1ac>)
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d004      	beq.n	80025bc <print_help+0x70>
				print_color(" aka ", C_L_PURPLE);
 80025b2:	210c      	movs	r1, #12
 80025b4:	4851      	ldr	r0, [pc, #324]	; (80026fc <print_help+0x1b0>)
 80025b6:	f7ff ff8d 	bl	80024d4 <print_color>
 80025ba:	e003      	b.n	80025c4 <print_help+0x78>
			else
				print_color("/", C_L_PURPLE);
 80025bc:	210c      	movs	r1, #12
 80025be:	4850      	ldr	r0, [pc, #320]	; (8002700 <print_help+0x1b4>)
 80025c0:	f7ff ff88 	bl	80024d4 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	222c      	movs	r2, #44	; 0x2c
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	4a4a      	ldr	r2, [pc, #296]	; (80026f8 <print_help+0x1ac>)
 80025ce:	4413      	add	r3, r2
 80025d0:	3304      	adds	r3, #4
 80025d2:	210b      	movs	r1, #11
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff7d 	bl	80024d4 <print_color>
 80025da:	e071      	b.n	80026c0 <print_help+0x174>
		}
		else
		{
			print(ENDL);
 80025dc:	4841      	ldr	r0, [pc, #260]	; (80026e4 <print_help+0x198>)
 80025de:	f7ff ff0d 	bl	80023fc <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 80025e2:	f06f 0303 	mvn.w	r3, #3
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	e005      	b.n	80025f6 <print_help+0xaa>
				print(" ");
 80025ea:	4846      	ldr	r0, [pc, #280]	; (8002704 <print_help+0x1b8>)
 80025ec:	f7ff ff06 	bl	80023fc <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	3301      	adds	r3, #1
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	4a40      	ldr	r2, [pc, #256]	; (80026f8 <print_help+0x1ac>)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	429a      	cmp	r2, r3
 8002608:	dbef      	blt.n	80025ea <print_help+0x9e>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	222c      	movs	r2, #44	; 0x2c
 800260e:	fb02 f303 	mul.w	r3, r2, r3
 8002612:	4a39      	ldr	r2, [pc, #228]	; (80026f8 <print_help+0x1ac>)
 8002614:	4413      	add	r3, r2
 8002616:	1d1a      	adds	r2, r3, #4
 8002618:	4937      	ldr	r1, [pc, #220]	; (80026f8 <print_help+0x1ac>)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	202c      	movs	r0, #44	; 0x2c
 800261e:	fb00 f303 	mul.w	r3, r0, r3
 8002622:	440b      	add	r3, r1
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4938      	ldr	r1, [pc, #224]	; (8002708 <print_help+0x1bc>)
 8002628:	5ccb      	ldrb	r3, [r1, r3]
 800262a:	4619      	mov	r1, r3
 800262c:	4610      	mov	r0, r2
 800262e:	f7ff ff51 	bl	80024d4 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	e005      	b.n	8002644 <print_help+0xf8>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 8002638:	4832      	ldr	r0, [pc, #200]	; (8002704 <print_help+0x1b8>)
 800263a:	f7ff fedf 	bl	80023fc <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	3301      	adds	r3, #1
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	4a2c      	ldr	r2, [pc, #176]	; (80026f8 <print_help+0x1ac>)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	212c      	movs	r1, #44	; 0x2c
 800264a:	fb01 f303 	mul.w	r3, r1, r3
 800264e:	4413      	add	r3, r2
 8002650:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8002652:	f1c3 040b 	rsb	r4, r3, #11
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	222c      	movs	r2, #44	; 0x2c
 800265a:	fb02 f303 	mul.w	r3, r2, r3
 800265e:	4a26      	ldr	r2, [pc, #152]	; (80026f8 <print_help+0x1ac>)
 8002660:	4413      	add	r3, r2
 8002662:	3304      	adds	r3, #4
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff5b 	bl	8002520 <str_length>
 800266a:	4603      	mov	r3, r0
 800266c:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	429a      	cmp	r2, r3
 8002672:	dbe1      	blt.n	8002638 <print_help+0xec>
			switch (microrl_actions[i].level){
 8002674:	4a20      	ldr	r2, [pc, #128]	; (80026f8 <print_help+0x1ac>)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	212c      	movs	r1, #44	; 0x2c
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <print_help+0x140>
 8002686:	2b01      	cmp	r3, #1
 8002688:	d004      	beq.n	8002694 <print_help+0x148>
 800268a:	e007      	b.n	800269c <print_help+0x150>
			case 0:
				print ("-");
 800268c:	481f      	ldr	r0, [pc, #124]	; (800270c <print_help+0x1c0>)
 800268e:	f7ff feb5 	bl	80023fc <print>
				break;
 8002692:	e007      	b.n	80026a4 <print_help+0x158>
			case 1:
				print ("^");
 8002694:	481e      	ldr	r0, [pc, #120]	; (8002710 <print_help+0x1c4>)
 8002696:	f7ff feb1 	bl	80023fc <print>
				break;
 800269a:	e003      	b.n	80026a4 <print_help+0x158>
			default:
				print ("#");
 800269c:	481d      	ldr	r0, [pc, #116]	; (8002714 <print_help+0x1c8>)
 800269e:	f7ff fead 	bl	80023fc <print>
				break;
 80026a2:	bf00      	nop
			}
			print (" ");
 80026a4:	4817      	ldr	r0, [pc, #92]	; (8002704 <print_help+0x1b8>)
 80026a6:	f7ff fea9 	bl	80023fc <print>
			print (microrl_actions[i].help_msg);
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	222c      	movs	r2, #44	; 0x2c
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	3308      	adds	r3, #8
 80026b4:	4a10      	ldr	r2, [pc, #64]	; (80026f8 <print_help+0x1ac>)
 80026b6:	4413      	add	r3, r2
 80026b8:	3305      	adds	r3, #5
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fe9e 	bl	80023fc <print>
	for (int i = 0; i < microrl_actions_length; i++)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	3301      	adds	r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2b12      	cmp	r3, #18
 80026ca:	f67f af5d 	bls.w	8002588 <print_help+0x3c>
		}
	}
	print(ENDL);
 80026ce:	4805      	ldr	r0, [pc, #20]	; (80026e4 <print_help+0x198>)
 80026d0:	f7ff fe94 	bl	80023fc <print>
	return 0;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd90      	pop	{r4, r7, pc}
 80026de:	bf00      	nop
 80026e0:	0800f084 	.word	0x0800f084
 80026e4:	0800f094 	.word	0x0800f094
 80026e8:	0800f098 	.word	0x0800f098
 80026ec:	0800f0a0 	.word	0x0800f0a0
 80026f0:	0800f0a4 	.word	0x0800f0a4
 80026f4:	0800f0b8 	.word	0x0800f0b8
 80026f8:	0800f2c4 	.word	0x0800f2c4
 80026fc:	0800f0cc 	.word	0x0800f0cc
 8002700:	0800f0d4 	.word	0x0800f0d4
 8002704:	0800f0d8 	.word	0x0800f0d8
 8002708:	0800f6c4 	.word	0x0800f6c4
 800270c:	0800f0dc 	.word	0x0800f0dc
 8002710:	0800f0e0 	.word	0x0800f0e0
 8002714:	0800f0e4 	.word	0x0800f0e4

08002718 <execute>:



int execute (int argc, const char * const * argv)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08a      	sub	sp, #40	; 0x28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
//	print_help(argc, argv);
//	return 0;
	int (*func)   (int argc, const char * const * argv ) = NULL;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 800272e:	2300      	movs	r3, #0
 8002730:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	e056      	b.n	80027e6 <execute+0xce>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	e045      	b.n	80027ca <execute+0xb2>
		{
			tokens_found = false;
 800273e:	2300      	movs	r3, #0
 8002740:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 8002742:	4a55      	ldr	r2, [pc, #340]	; (8002898 <execute+0x180>)
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002758:	d001      	beq.n	800275e <execute+0x46>
				synonym_level = current_level; // save the synonym level
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d003      	beq.n	800276e <execute+0x56>
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	429a      	cmp	r2, r3
 800276c:	db31      	blt.n	80027d2 <execute+0xba>
				break;
			if (current_level == i)
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	429a      	cmp	r2, r3
 8002774:	d101      	bne.n	800277a <execute+0x62>
				last_main_synonym = n;
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	4413      	add	r3, r2
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	212c      	movs	r1, #44	; 0x2c
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	4942      	ldr	r1, [pc, #264]	; (8002898 <execute+0x180>)
 800278e:	440b      	add	r3, r1
 8002790:	3304      	adds	r3, #4
 8002792:	4619      	mov	r1, r3
 8002794:	4610      	mov	r0, r2
 8002796:	f7fd fcdb 	bl	8000150 <strcmp>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d111      	bne.n	80027c4 <execute+0xac>
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d10d      	bne.n	80027c4 <execute+0xac>
					(i == synonym_level))
			{
				tokens_found = true;
 80027a8:	2301      	movs	r3, #1
 80027aa:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	623a      	str	r2, [r7, #32]
 80027b2:	4a39      	ldr	r2, [pc, #228]	; (8002898 <execute+0x180>)
 80027b4:	212c      	movs	r1, #44	; 0x2c
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	3328      	adds	r3, #40	; 0x28
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80027c2:	e007      	b.n	80027d4 <execute+0xbc>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	3301      	adds	r3, #1
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2b12      	cmp	r3, #18
 80027ce:	d9b6      	bls.n	800273e <execute+0x26>
 80027d0:	e000      	b.n	80027d4 <execute+0xbc>
				break;
 80027d2:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 80027d4:	7efb      	ldrb	r3, [r7, #27]
 80027d6:	f083 0301 	eor.w	r3, r3, #1
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d107      	bne.n	80027f0 <execute+0xd8>
	for (int i = 0; i < argc; i++)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	3301      	adds	r3, #1
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	dba4      	blt.n	8002738 <execute+0x20>
 80027ee:	e000      	b.n	80027f2 <execute+0xda>
			break;
 80027f0:	bf00      	nop
	}

	if (func != NULL)
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <execute+0xec>
	{
		return func(argc, argv); // function found
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	6839      	ldr	r1, [r7, #0]
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
 8002800:	4603      	mov	r3, r0
 8002802:	e045      	b.n	8002890 <execute+0x178>
	} else if (tokens_found)
 8002804:	7efb      	ldrb	r3, [r7, #27]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d021      	beq.n	800284e <execute+0x136>
	{
		print_color ("command: '", C_L_RED);
 800280a:	210a      	movs	r1, #10
 800280c:	4823      	ldr	r0, [pc, #140]	; (800289c <execute+0x184>)
 800280e:	f7ff fe61 	bl	80024d4 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	210a      	movs	r1, #10
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fe5b 	bl	80024d4 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 800281e:	210a      	movs	r1, #10
 8002820:	481f      	ldr	r0, [pc, #124]	; (80028a0 <execute+0x188>)
 8002822:	f7ff fe57 	bl	80024d4 <print_color>
		print(ENDL);
 8002826:	481f      	ldr	r0, [pc, #124]	; (80028a4 <execute+0x18c>)
 8002828:	f7ff fde8 	bl	80023fc <print>
		print_color ("use '", C_NC);
 800282c:	2100      	movs	r1, #0
 800282e:	481e      	ldr	r0, [pc, #120]	; (80028a8 <execute+0x190>)
 8002830:	f7ff fe50 	bl	80024d4 <print_color>
		print_color ("?", C_GREEN);
 8002834:	2105      	movs	r1, #5
 8002836:	481d      	ldr	r0, [pc, #116]	; (80028ac <execute+0x194>)
 8002838:	f7ff fe4c 	bl	80024d4 <print_color>
		print_color ("' for help", C_NC);
 800283c:	2100      	movs	r1, #0
 800283e:	481c      	ldr	r0, [pc, #112]	; (80028b0 <execute+0x198>)
 8002840:	f7ff fe48 	bl	80024d4 <print_color>
		print (ENDL);
 8002844:	4817      	ldr	r0, [pc, #92]	; (80028a4 <execute+0x18c>)
 8002846:	f7ff fdd9 	bl	80023fc <print>
		return 1;
 800284a:	2301      	movs	r3, #1
 800284c:	e020      	b.n	8002890 <execute+0x178>
	}
	else
	{
		print_color ("command: '", C_RED);
 800284e:	2109      	movs	r1, #9
 8002850:	4812      	ldr	r0, [pc, #72]	; (800289c <execute+0x184>)
 8002852:	f7ff fe3f 	bl	80024d4 <print_color>
		print_color ((char*)argv[0], C_RED);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2109      	movs	r1, #9
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fe39 	bl	80024d4 <print_color>
		print_color ("' not found", C_RED);
 8002862:	2109      	movs	r1, #9
 8002864:	4813      	ldr	r0, [pc, #76]	; (80028b4 <execute+0x19c>)
 8002866:	f7ff fe35 	bl	80024d4 <print_color>
		print(ENDL);
 800286a:	480e      	ldr	r0, [pc, #56]	; (80028a4 <execute+0x18c>)
 800286c:	f7ff fdc6 	bl	80023fc <print>
		print_color ("use '", C_NC);
 8002870:	2100      	movs	r1, #0
 8002872:	480d      	ldr	r0, [pc, #52]	; (80028a8 <execute+0x190>)
 8002874:	f7ff fe2e 	bl	80024d4 <print_color>
		print_color ("?", C_GREEN);
 8002878:	2105      	movs	r1, #5
 800287a:	480c      	ldr	r0, [pc, #48]	; (80028ac <execute+0x194>)
 800287c:	f7ff fe2a 	bl	80024d4 <print_color>
		print_color ("' for help", C_NC);
 8002880:	2100      	movs	r1, #0
 8002882:	480b      	ldr	r0, [pc, #44]	; (80028b0 <execute+0x198>)
 8002884:	f7ff fe26 	bl	80024d4 <print_color>
		print (ENDL);
 8002888:	4806      	ldr	r0, [pc, #24]	; (80028a4 <execute+0x18c>)
 800288a:	f7ff fdb7 	bl	80023fc <print>
		return 1;
 800288e:	2301      	movs	r3, #1

	}
}
 8002890:	4618      	mov	r0, r3
 8002892:	3728      	adds	r7, #40	; 0x28
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	0800f2c4 	.word	0x0800f2c4
 800289c:	0800f0e8 	.word	0x0800f0e8
 80028a0:	0800f0f4 	.word	0x0800f0f4
 80028a4:	0800f094 	.word	0x0800f094
 80028a8:	0800f114 	.word	0x0800f114
 80028ac:	0800f11c 	.word	0x0800f11c
 80028b0:	0800f120 	.word	0x0800f120
 80028b4:	0800f12c 	.word	0x0800f12c

080028b8 <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08c      	sub	sp, #48	; 0x30
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
	int j = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 80028c6:	4b63      	ldr	r3, [pc, #396]	; (8002a54 <complet+0x19c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d11f      	bne.n	8002912 <complet+0x5a>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 80028d2:	2300      	movs	r3, #0
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028d6:	e018      	b.n	800290a <complet+0x52>
			if (microrl_actions[i].level == 0)
 80028d8:	4a5f      	ldr	r2, [pc, #380]	; (8002a58 <complet+0x1a0>)
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10c      	bne.n	8002904 <complet+0x4c>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f202 	mul.w	r2, r1, r2
 80028f8:	4957      	ldr	r1, [pc, #348]	; (8002a58 <complet+0x1a0>)
 80028fa:	440a      	add	r2, r1
 80028fc:	3204      	adds	r2, #4
 80028fe:	4955      	ldr	r1, [pc, #340]	; (8002a54 <complet+0x19c>)
 8002900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	3301      	adds	r3, #1
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
 800290a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290c:	2b12      	cmp	r3, #18
 800290e:	d9e3      	bls.n	80028d8 <complet+0x20>
 8002910:	e095      	b.n	8002a3e <complet+0x186>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002918:	3b01      	subs	r3, #1
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	4413      	add	r3, r2
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 800292c:	2300      	movs	r3, #0
 800292e:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 8002930:	2300      	movs	r3, #0
 8002932:	61bb      	str	r3, [r7, #24]
 8002934:	e07c      	b.n	8002a30 <complet+0x178>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e06b      	b.n	8002a14 <complet+0x15c>
			{
				tokens_found = false;
 800293c:	2300      	movs	r3, #0
 800293e:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 8002940:	4a45      	ldr	r2, [pc, #276]	; (8002a58 <complet+0x1a0>)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002956:	d001      	beq.n	800295c <complet+0xa4>
					synonym_level = current_level; // save the synonym level
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002962:	d003      	beq.n	800296c <complet+0xb4>
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	429a      	cmp	r2, r3
 800296a:	db57      	blt.n	8002a1c <complet+0x164>
					break;
				if (current_level == i)
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	429a      	cmp	r2, r3
 8002972:	d101      	bne.n	8002978 <complet+0xc0>
					last_main_synonym = n;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	429a      	cmp	r2, r3
 8002980:	d128      	bne.n	80029d4 <complet+0x11c>
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	222c      	movs	r2, #44	; 0x2c
 8002986:	fb02 f303 	mul.w	r3, r2, r3
 800298a:	4a33      	ldr	r2, [pc, #204]	; (8002a58 <complet+0x1a0>)
 800298c:	4413      	add	r3, r2
 800298e:	3304      	adds	r3, #4
 8002990:	6939      	ldr	r1, [r7, #16]
 8002992:	4618      	mov	r0, r3
 8002994:	f00c fae0 	bl	800ef58 <strstr>
 8002998:	4602      	mov	r2, r0
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	212c      	movs	r1, #44	; 0x2c
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	492d      	ldr	r1, [pc, #180]	; (8002a58 <complet+0x1a0>)
 80029a4:	440b      	add	r3, r1
 80029a6:	3304      	adds	r3, #4
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d113      	bne.n	80029d4 <complet+0x11c>
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d10f      	bne.n	80029d4 <complet+0x11c>
										(i == synonym_level))
				{
					tokens_found = true;
 80029b4:	2301      	movs	r3, #1
 80029b6:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 80029b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	212c      	movs	r1, #44	; 0x2c
 80029c2:	fb01 f202 	mul.w	r2, r1, r2
 80029c6:	4924      	ldr	r1, [pc, #144]	; (8002a58 <complet+0x1a0>)
 80029c8:	440a      	add	r2, r1
 80029ca:	3204      	adds	r2, #4
 80029cc:	4921      	ldr	r1, [pc, #132]	; (8002a54 <complet+0x19c>)
 80029ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80029d2:	e01c      	b.n	8002a0e <complet+0x156>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	4413      	add	r3, r2
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	212c      	movs	r1, #44	; 0x2c
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	491c      	ldr	r1, [pc, #112]	; (8002a58 <complet+0x1a0>)
 80029e8:	440b      	add	r3, r1
 80029ea:	3304      	adds	r3, #4
 80029ec:	4619      	mov	r1, r3
 80029ee:	4610      	mov	r0, r2
 80029f0:	f7fd fbae 	bl	8000150 <strcmp>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <complet+0x156>
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d105      	bne.n	8002a0e <complet+0x156>
				{
					last_main_synonym++;
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	3301      	adds	r3, #1
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	77fb      	strb	r3, [r7, #31]
					break;
 8002a0c:	e007      	b.n	8002a1e <complet+0x166>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	3301      	adds	r3, #1
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b12      	cmp	r3, #18
 8002a18:	d990      	bls.n	800293c <complet+0x84>
 8002a1a:	e000      	b.n	8002a1e <complet+0x166>
					break;
 8002a1c:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 8002a1e:	7ffb      	ldrb	r3, [r7, #31]
 8002a20:	f083 0301 	eor.w	r3, r3, #1
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d108      	bne.n	8002a3c <complet+0x184>
		for (int i = 0; i < argc; i++)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	f6ff af7e 	blt.w	8002936 <complet+0x7e>
 8002a3a:	e000      	b.n	8002a3e <complet+0x186>
				break;
 8002a3c:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 8002a3e:	4a05      	ldr	r2, [pc, #20]	; (8002a54 <complet+0x19c>)
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a42:	2100      	movs	r1, #0
 8002a44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 8002a48:	4b02      	ldr	r3, [pc, #8]	; (8002a54 <complet+0x19c>)
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3730      	adds	r7, #48	; 0x30
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20002500 	.word	0x20002500
 8002a58:	0800f2c4 	.word	0x0800f2c4

08002a5c <sigint>:
#endif


void sigint (void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <sigint+0x50>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
	show_clock = true;
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <sigint+0x54>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	701a      	strb	r2, [r3, #0]

	print (ENDL);
 8002a6e:	4811      	ldr	r0, [pc, #68]	; (8002ab4 <sigint+0x58>)
 8002a70:	f7ff fcc4 	bl	80023fc <print>
	print ("^C catched!");
 8002a74:	4810      	ldr	r0, [pc, #64]	; (8002ab8 <sigint+0x5c>)
 8002a76:	f7ff fcc1 	bl	80023fc <print>
	int i = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 8002a7e:	e009      	b.n	8002a94 <sigint+0x38>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 8002a80:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <sigint+0x60>)
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <sigint+0x58>)
 8002a8c:	5cd3      	ldrb	r3, [r2, r3]
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f7ff faa6 	bl	8001fe0 <microrl_insert_char>
	while (ENTER[i])
 8002a94:	4a07      	ldr	r2, [pc, #28]	; (8002ab4 <sigint+0x58>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ef      	bne.n	8002a80 <sigint+0x24>
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	200001af 	.word	0x200001af
 8002ab0:	2000000d 	.word	0x2000000d
 8002ab4:	0800f094 	.word	0x0800f094
 8002ab8:	0800f138 	.word	0x0800f138
 8002abc:	20000008 	.word	0x20000008

08002ac0 <init_microrl>:

void init_microrl(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <init_microrl+0x38>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	490c      	ldr	r1, [pc, #48]	; (8002afc <init_microrl+0x3c>)
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe ff4a 	bl	8001964 <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <init_microrl+0x38>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	490a      	ldr	r1, [pc, #40]	; (8002b00 <init_microrl+0x40>)
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe ff90 	bl	80019fc <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <init_microrl+0x38>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4908      	ldr	r1, [pc, #32]	; (8002b04 <init_microrl+0x44>)
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe ff7c 	bl	80019e0 <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <init_microrl+0x38>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4906      	ldr	r1, [pc, #24]	; (8002b08 <init_microrl+0x48>)
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe ff92 	bl	8001a18 <microrl_set_sigint_callback>
}
 8002af4:	bf00      	nop
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20000008 	.word	0x20000008
 8002afc:	080023fd 	.word	0x080023fd
 8002b00:	08002719 	.word	0x08002719
 8002b04:	080028b9 	.word	0x080028b9
 8002b08:	08002a5d 	.word	0x08002a5d

08002b0c <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 8002b16:	4805      	ldr	r0, [pc, #20]	; (8002b2c <clear_screen+0x20>)
 8002b18:	f7ff fc70 	bl	80023fc <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 8002b1c:	4804      	ldr	r0, [pc, #16]	; (8002b30 <clear_screen+0x24>)
 8002b1e:	f7ff fc6d 	bl	80023fc <print>
	return 0;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	0800f144 	.word	0x0800f144
 8002b30:	0800f14c 	.word	0x0800f14c

08002b34 <set_CDC_ready>:


void set_CDC_ready(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
	CDC_is_ready = true;
 8002b38:	4b03      	ldr	r3, [pc, #12]	; (8002b48 <set_CDC_ready+0x14>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]
}
 8002b3e:	bf00      	nop
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	200001ae 	.word	0x200001ae

08002b4c <color_toggle>:


int color_toggle 	(int argc, const char * const * argv)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <color_toggle+0x30>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	f083 0301 	eor.w	r3, r3, #1
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf14      	ite	ne
 8002b64:	2301      	movne	r3, #1
 8002b66:	2300      	moveq	r3, #0
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <color_toggle+0x30>)
 8002b6c:	701a      	strb	r2, [r3, #0]
	return 0;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	2000000c 	.word	0x2000000c

08002b80 <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
	color_out = 1;
 8002b8a:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <color_on+0x28>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 8002b90:	2105      	movs	r1, #5
 8002b92:	4806      	ldr	r0, [pc, #24]	; (8002bac <color_on+0x2c>)
 8002b94:	f7ff fc9e 	bl	80024d4 <print_color>
	print(ENDL);
 8002b98:	4805      	ldr	r0, [pc, #20]	; (8002bb0 <color_on+0x30>)
 8002b9a:	f7ff fc2f 	bl	80023fc <print>
	return 0;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	2000000c 	.word	0x2000000c
 8002bac:	0800f150 	.word	0x0800f150
 8002bb0:	0800f094 	.word	0x0800f094

08002bb4 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
	color_out = 0;
 8002bbe:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <color_off+0x28>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 8002bc4:	4806      	ldr	r0, [pc, #24]	; (8002be0 <color_off+0x2c>)
 8002bc6:	f7ff fc19 	bl	80023fc <print>
	print(ENDL);
 8002bca:	4806      	ldr	r0, [pc, #24]	; (8002be4 <color_off+0x30>)
 8002bcc:	f7ff fc16 	bl	80023fc <print>
	return 0;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	2000000c 	.word	0x2000000c
 8002be0:	0800f164 	.word	0x0800f164
 8002be4:	0800f094 	.word	0x0800f094

08002be8 <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
	if (color_out)
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <color_show+0x34>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d004      	beq.n	8002c04 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 8002bfa:	2105      	movs	r1, #5
 8002bfc:	4808      	ldr	r0, [pc, #32]	; (8002c20 <color_show+0x38>)
 8002bfe:	f7ff fc69 	bl	80024d4 <print_color>
 8002c02:	e002      	b.n	8002c0a <color_show+0x22>
	else
		print ("Color output is OFF");
 8002c04:	4807      	ldr	r0, [pc, #28]	; (8002c24 <color_show+0x3c>)
 8002c06:	f7ff fbf9 	bl	80023fc <print>
	print(ENDL);
 8002c0a:	4807      	ldr	r0, [pc, #28]	; (8002c28 <color_show+0x40>)
 8002c0c:	f7ff fbf6 	bl	80023fc <print>
	return 0;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	2000000c 	.word	0x2000000c
 8002c20:	0800f150 	.word	0x0800f150
 8002c24:	0800f164 	.word	0x0800f164
 8002c28:	0800f094 	.word	0x0800f094

08002c2c <vfd>:
	print(ENDL);
	return 0;
}

int vfd (int argc, const char * const * argv)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
	show_clock = false;
 8002c36:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <vfd+0x7c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < argc; i++)
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	e028      	b.n	8002c94 <vfd+0x68>
	{
		uint16_t temp = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	81fb      	strh	r3, [r7, #14]
		char * pchar = (char*)argv[i];
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	613b      	str	r3, [r7, #16]
		xQueueSendToBack(qVFDHandle, &temp, 100);
 8002c52:	4b16      	ldr	r3, [pc, #88]	; (8002cac <vfd+0x80>)
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	f107 010e 	add.w	r1, r7, #14
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	2264      	movs	r2, #100	; 0x64
 8002c5e:	f008 ffd1 	bl	800bc04 <xQueueGenericSend>
		while (*pchar)
 8002c62:	e010      	b.n	8002c86 <vfd+0x5a>
		{
			temp = get_char(*(pchar++));
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	613a      	str	r2, [r7, #16]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 faf5 	bl	800325c <get_char>
 8002c72:	4603      	mov	r3, r0
 8002c74:	81fb      	strh	r3, [r7, #14]
			xQueueSendToBack(qVFDHandle, &temp, 100);
 8002c76:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <vfd+0x80>)
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	f107 010e 	add.w	r1, r7, #14
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2264      	movs	r2, #100	; 0x64
 8002c82:	f008 ffbf 	bl	800bc04 <xQueueGenericSend>
		while (*pchar)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1ea      	bne.n	8002c64 <vfd+0x38>
	for (int i = 1; i < argc; i++)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	3301      	adds	r3, #1
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	dbd2      	blt.n	8002c42 <vfd+0x16>
		}
	}
	return 0;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	2000000d 	.word	0x2000000d
 8002cac:	20002490 	.word	0x20002490

08002cb0 <leds_toggle>:
	return nema_out;
}


int leds_toggle		(int argc, const char * const * argv)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
	use_leds ^= 1;
 8002cba:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <leds_toggle+0x3c>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	f083 0301 	eor.w	r3, r3, #1
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf14      	ite	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	2300      	moveq	r3, #0
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4b07      	ldr	r3, [pc, #28]	; (8002cec <leds_toggle+0x3c>)
 8002cd0:	701a      	strb	r2, [r3, #0]
	print_color("Done", C_GREEN);
 8002cd2:	2105      	movs	r1, #5
 8002cd4:	4806      	ldr	r0, [pc, #24]	; (8002cf0 <leds_toggle+0x40>)
 8002cd6:	f7ff fbfd 	bl	80024d4 <print_color>
	print(ENDL);
 8002cda:	4806      	ldr	r0, [pc, #24]	; (8002cf4 <leds_toggle+0x44>)
 8002cdc:	f7ff fb8e 	bl	80023fc <print>
	return 0;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200001b0 	.word	0x200001b0
 8002cf0:	0800f178 	.word	0x0800f178
 8002cf4:	0800f094 	.word	0x0800f094

08002cf8 <set_td>:



int set_td		(int argc, const char * const * argv)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
	if (argc == 3 && str_length(argv[2]) == 6)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d140      	bne.n	8002d8a <set_td+0x92>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	3308      	adds	r3, #8
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fc06 	bl	8002520 <str_length>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	d137      	bne.n	8002d8a <set_td+0x92>
	{
		uint8_t arr [3];
		for (int i = 0; i < 3; i++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	e021      	b.n	8002d64 <set_td+0x6c>
		{
			arr[2-i] = (argv[2][i*2+1]-'0')+((argv[2][i*2]-'0')<<4);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	3308      	adds	r3, #8
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	781a      	ldrb	r2, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	3308      	adds	r3, #8
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68f9      	ldr	r1, [r7, #12]
 8002d38:	0049      	lsls	r1, r1, #1
 8002d3a:	440b      	add	r3, r1
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	3b30      	subs	r3, #48	; 0x30
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f1c3 0302 	rsb	r3, r3, #2
 8002d50:	3a30      	subs	r2, #48	; 0x30
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	f107 0110 	add.w	r1, r7, #16
 8002d58:	440b      	add	r3, r1
 8002d5a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for (int i = 0; i < 3; i++)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3301      	adds	r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	ddda      	ble.n	8002d20 <set_td+0x28>
		}
		d3231_set(arr, argv[0][0] == 'd');
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b64      	cmp	r3, #100	; 0x64
 8002d72:	bf0c      	ite	eq
 8002d74:	2301      	moveq	r3, #1
 8002d76:	2300      	movne	r3, #0
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	f107 0308 	add.w	r3, r7, #8
 8002d7e:	4611      	mov	r1, r2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fa9f 	bl	80002c4 <d3231_set>
		return 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e007      	b.n	8002d9a <set_td+0xa2>
	}
	print_color("wrong format", C_RED);
 8002d8a:	2109      	movs	r1, #9
 8002d8c:	4805      	ldr	r0, [pc, #20]	; (8002da4 <set_td+0xac>)
 8002d8e:	f7ff fba1 	bl	80024d4 <print_color>
	print(ENDL);
 8002d92:	4805      	ldr	r0, [pc, #20]	; (8002da8 <set_td+0xb0>)
 8002d94:	f7ff fb32 	bl	80023fc <print>
	return 0;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	0800f180 	.word	0x0800f180
 8002da8:	0800f094 	.word	0x0800f094

08002dac <get_td>:

int get_td		(int argc, const char * const * argv)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
	bool date = argv[0][0] == 'd';
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b64      	cmp	r3, #100	; 0x64
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	77fb      	strb	r3, [r7, #31]
	char str[9];
	uint8_t * d3231 = d3231_get_all();
 8002dc6:	f7fd fa25 	bl	8000214 <d3231_get_all>
 8002dca:	61b8      	str	r0, [r7, #24]
	uint8_t offset = date*4;
 8002dcc:	7ffb      	ldrb	r3, [r7, #31]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	75fb      	strb	r3, [r7, #23]
	str[8] = '\0';
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	753b      	strb	r3, [r7, #20]
	str[7] = (d3231[offset + 0]&0xF) + '0';
 8002dd6:	7dfb      	ldrb	r3, [r7, #23]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4413      	add	r3, r2
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	3330      	adds	r3, #48	; 0x30
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	74fb      	strb	r3, [r7, #19]
	str[6] = ((d3231[offset + 0]>>4)&0xF) + '0';
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4413      	add	r3, r2
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	091b      	lsrs	r3, r3, #4
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	3330      	adds	r3, #48	; 0x30
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	74bb      	strb	r3, [r7, #18]
	str[4] = (d3231[offset + 1]&0xF) + '0';
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4413      	add	r3, r2
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	3330      	adds	r3, #48	; 0x30
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	743b      	strb	r3, [r7, #16]
	str[3] = ((d3231[offset + 1]>>4)&0xF) + '0';
 8002e12:	7dfb      	ldrb	r3, [r7, #23]
 8002e14:	3301      	adds	r3, #1
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4413      	add	r3, r2
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	3330      	adds	r3, #48	; 0x30
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	73fb      	strb	r3, [r7, #15]
	str[1] = (d3231[offset + 2]&0xF) + '0';
 8002e26:	7dfb      	ldrb	r3, [r7, #23]
 8002e28:	3302      	adds	r3, #2
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	3330      	adds	r3, #48	; 0x30
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	737b      	strb	r3, [r7, #13]
	str[0] = ((d3231[offset + 2]>>4)&0xF) + '0';
 8002e3c:	7dfb      	ldrb	r3, [r7, #23]
 8002e3e:	3302      	adds	r3, #2
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4413      	add	r3, r2
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	091b      	lsrs	r3, r3, #4
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	3330      	adds	r3, #48	; 0x30
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	733b      	strb	r3, [r7, #12]
	str[5] = str[2] = date?'-':':';
 8002e50:	7ffb      	ldrb	r3, [r7, #31]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <get_td+0xae>
 8002e56:	232d      	movs	r3, #45	; 0x2d
 8002e58:	e000      	b.n	8002e5c <get_td+0xb0>
 8002e5a:	233a      	movs	r3, #58	; 0x3a
 8002e5c:	73bb      	strb	r3, [r7, #14]
 8002e5e:	7bbb      	ldrb	r3, [r7, #14]
 8002e60:	747b      	strb	r3, [r7, #17]
	print_color(str, C_L_BLUE);
 8002e62:	f107 030c 	add.w	r3, r7, #12
 8002e66:	2104      	movs	r1, #4
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fb33 	bl	80024d4 <print_color>
	print(ENDL);
 8002e6e:	4804      	ldr	r0, [pc, #16]	; (8002e80 <get_td+0xd4>)
 8002e70:	f7ff fac4 	bl	80023fc <print>
	return 0;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3720      	adds	r7, #32
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	0800f094 	.word	0x0800f094

08002e84 <get_temp>:

int get_temp		(int argc, const char * const * argv)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	; 0x28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
	uint8_t * d3231 = d3231_get_temp();
 8002e8e:	f7fd f999 	bl	80001c4 <d3231_get_temp>
 8002e92:	61b8      	str	r0, [r7, #24]

	bool negative = d3231[0]&(1<<7);
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf14      	ite	ne
 8002ea0:	2301      	movne	r3, #1
 8002ea2:	2300      	moveq	r3, #0
 8002ea4:	75fb      	strb	r3, [r7, #23]
	uint16_t temp = d3231[0]&(~(1<<7));
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eb0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t dec   = d3231[1]>>6;
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	099b      	lsrs	r3, r3, #6
 8002eba:	75bb      	strb	r3, [r7, #22]

	dec *= 25; // calculate decimal part
 8002ebc:	7dbb      	ldrb	r3, [r7, #22]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	0092      	lsls	r2, r2, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	0091      	lsls	r1, r2, #2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4413      	add	r3, r2
 8002ece:	75bb      	strb	r3, [r7, #22]
	temp *= 1000;
 8002ed0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	0152      	lsls	r2, r2, #5
 8002ed6:	1ad2      	subs	r2, r2, r3
 8002ed8:	0092      	lsls	r2, r2, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	84fb      	strh	r3, [r7, #38]	; 0x26
	temp += dec;
 8002ee0:	7dbb      	ldrb	r3, [r7, #22]
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ee6:	4413      	add	r3, r2
 8002ee8:	84fb      	strh	r3, [r7, #38]	; 0x26


	char str[8];
	str[7] = '\0';
 8002eea:	2300      	movs	r3, #0
 8002eec:	74fb      	strb	r3, [r7, #19]
	for (int i = 6; i >= 0; i--)
 8002eee:	2306      	movs	r3, #6
 8002ef0:	623b      	str	r3, [r7, #32]
 8002ef2:	e01c      	b.n	8002f2e <get_temp+0xaa>
	{
		str[i] = (temp % 10) + '0';
 8002ef4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002ef6:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <get_temp+0x124>)
 8002ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8002efc:	08d9      	lsrs	r1, r3, #3
 8002efe:	460b      	mov	r3, r1
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	3330      	adds	r3, #48	; 0x30
 8002f0e:	b2d9      	uxtb	r1, r3
 8002f10:	f107 020c 	add.w	r2, r7, #12
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	4413      	add	r3, r2
 8002f18:	460a      	mov	r2, r1
 8002f1a:	701a      	strb	r2, [r3, #0]
		temp /= 10;
 8002f1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f1e:	4a22      	ldr	r2, [pc, #136]	; (8002fa8 <get_temp+0x124>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	08db      	lsrs	r3, r3, #3
 8002f26:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 6; i >= 0; i--)
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	623b      	str	r3, [r7, #32]
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	dadf      	bge.n	8002ef4 <get_temp+0x70>
	}
	str[4] = '.';
 8002f34:	232e      	movs	r3, #46	; 0x2e
 8002f36:	743b      	strb	r3, [r7, #16]
	for (int i = 0; i < 7; i++)
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61fb      	str	r3, [r7, #28]
 8002f3c:	e020      	b.n	8002f80 <get_temp+0xfc>
	{
		if (str[i] != '0')
 8002f3e:	f107 020c 	add.w	r2, r7, #12
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	4413      	add	r3, r2
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b30      	cmp	r3, #48	; 0x30
 8002f4a:	d010      	beq.n	8002f6e <get_temp+0xea>
		{
			if (i > 0)
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	dd1a      	ble.n	8002f88 <get_temp+0x104>
				str[i-1] = negative?'-':'+';
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <get_temp+0xd8>
 8002f58:	222d      	movs	r2, #45	; 0x2d
 8002f5a:	e000      	b.n	8002f5e <get_temp+0xda>
 8002f5c:	222b      	movs	r2, #43	; 0x2b
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002f66:	440b      	add	r3, r1
 8002f68:	f803 2c1c 	strb.w	r2, [r3, #-28]
			break;
 8002f6c:	e00c      	b.n	8002f88 <get_temp+0x104>
		}
		str[i] = ' ';
 8002f6e:	f107 020c 	add.w	r2, r7, #12
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	4413      	add	r3, r2
 8002f76:	2220      	movs	r2, #32
 8002f78:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 7; i++)
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	61fb      	str	r3, [r7, #28]
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	2b06      	cmp	r3, #6
 8002f84:	dddb      	ble.n	8002f3e <get_temp+0xba>
 8002f86:	e000      	b.n	8002f8a <get_temp+0x106>
			break;
 8002f88:	bf00      	nop
	}
	print_color(str, C_GREEN);
 8002f8a:	f107 030c 	add.w	r3, r7, #12
 8002f8e:	2105      	movs	r1, #5
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fa9f 	bl	80024d4 <print_color>
	print(ENDL);
 8002f96:	4805      	ldr	r0, [pc, #20]	; (8002fac <get_temp+0x128>)
 8002f98:	f7ff fa30 	bl	80023fc <print>
	return 0;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3728      	adds	r7, #40	; 0x28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	cccccccd 	.word	0xcccccccd
 8002fac:	0800f094 	.word	0x0800f094

08002fb0 <clock>:

int clock		(int argc, const char * const * argv)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
	show_clock = true;
 8002fba:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <clock+0x1c>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]
	return 0;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	2000000d 	.word	0x2000000d

08002fd0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002fd4:	4b17      	ldr	r3, [pc, #92]	; (8003034 <MX_SPI2_Init+0x64>)
 8002fd6:	4a18      	ldr	r2, [pc, #96]	; (8003038 <MX_SPI2_Init+0x68>)
 8002fd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002fda:	4b16      	ldr	r3, [pc, #88]	; (8003034 <MX_SPI2_Init+0x64>)
 8002fdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fe0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002fe2:	4b14      	ldr	r3, [pc, #80]	; (8003034 <MX_SPI2_Init+0x64>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fe8:	4b12      	ldr	r3, [pc, #72]	; (8003034 <MX_SPI2_Init+0x64>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002fee:	4b11      	ldr	r3, [pc, #68]	; (8003034 <MX_SPI2_Init+0x64>)
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <MX_SPI2_Init+0x64>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ffa:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <MX_SPI2_Init+0x64>)
 8002ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003000:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003002:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <MX_SPI2_Init+0x64>)
 8003004:	2218      	movs	r2, #24
 8003006:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <MX_SPI2_Init+0x64>)
 800300a:	2280      	movs	r2, #128	; 0x80
 800300c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <MX_SPI2_Init+0x64>)
 8003010:	2200      	movs	r2, #0
 8003012:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003014:	4b07      	ldr	r3, [pc, #28]	; (8003034 <MX_SPI2_Init+0x64>)
 8003016:	2200      	movs	r2, #0
 8003018:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <MX_SPI2_Init+0x64>)
 800301c:	220a      	movs	r2, #10
 800301e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003020:	4804      	ldr	r0, [pc, #16]	; (8003034 <MX_SPI2_Init+0x64>)
 8003022:	f003 fe75 	bl	8006d10 <HAL_SPI_Init>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800302c:	f7fe f94a 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	200025f0 	.word	0x200025f0
 8003038:	40003800 	.word	0x40003800

0800303c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003044:	f107 0310 	add.w	r3, r7, #16
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <HAL_SPI_MspInit+0x8c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d131      	bne.n	80030c0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800305c:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <HAL_SPI_MspInit+0x90>)
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	4a1a      	ldr	r2, [pc, #104]	; (80030cc <HAL_SPI_MspInit+0x90>)
 8003062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003066:	61d3      	str	r3, [r2, #28]
 8003068:	4b18      	ldr	r3, [pc, #96]	; (80030cc <HAL_SPI_MspInit+0x90>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003074:	4b15      	ldr	r3, [pc, #84]	; (80030cc <HAL_SPI_MspInit+0x90>)
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	4a14      	ldr	r2, [pc, #80]	; (80030cc <HAL_SPI_MspInit+0x90>)
 800307a:	f043 0308 	orr.w	r3, r3, #8
 800307e:	6193      	str	r3, [r2, #24]
 8003080:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_SPI_MspInit+0x90>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800308c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003090:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003092:	2302      	movs	r3, #2
 8003094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003096:	2303      	movs	r3, #3
 8003098:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800309a:	f107 0310 	add.w	r3, r7, #16
 800309e:	4619      	mov	r1, r3
 80030a0:	480b      	ldr	r0, [pc, #44]	; (80030d0 <HAL_SPI_MspInit+0x94>)
 80030a2:	f000 fa7f 	bl	80035a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80030a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b4:	f107 0310 	add.w	r3, r7, #16
 80030b8:	4619      	mov	r1, r3
 80030ba:	4805      	ldr	r0, [pc, #20]	; (80030d0 <HAL_SPI_MspInit+0x94>)
 80030bc:	f000 fa72 	bl	80035a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80030c0:	bf00      	nop
 80030c2:	3720      	adds	r7, #32
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40003800 	.word	0x40003800
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40010c00 	.word	0x40010c00

080030d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80030da:	4b18      	ldr	r3, [pc, #96]	; (800313c <HAL_MspInit+0x68>)
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	4a17      	ldr	r2, [pc, #92]	; (800313c <HAL_MspInit+0x68>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6193      	str	r3, [r2, #24]
 80030e6:	4b15      	ldr	r3, [pc, #84]	; (800313c <HAL_MspInit+0x68>)
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_MspInit+0x68>)
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	4a11      	ldr	r2, [pc, #68]	; (800313c <HAL_MspInit+0x68>)
 80030f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030fc:	61d3      	str	r3, [r2, #28]
 80030fe:	4b0f      	ldr	r3, [pc, #60]	; (800313c <HAL_MspInit+0x68>)
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003106:	607b      	str	r3, [r7, #4]
 8003108:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	210f      	movs	r1, #15
 800310e:	f06f 0001 	mvn.w	r0, #1
 8003112:	f000 fa1c 	bl	800354e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <HAL_MspInit+0x6c>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	4a04      	ldr	r2, [pc, #16]	; (8003140 <HAL_MspInit+0x6c>)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000
 8003140:	40010000 	.word	0x40010000

08003144 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08c      	sub	sp, #48	; 0x30
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8003154:	2200      	movs	r2, #0
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	2019      	movs	r0, #25
 800315a:	f000 f9f8 	bl	800354e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800315e:	2019      	movs	r0, #25
 8003160:	f000 fa11 	bl	8003586 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003164:	4b1e      	ldr	r3, [pc, #120]	; (80031e0 <HAL_InitTick+0x9c>)
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	4a1d      	ldr	r2, [pc, #116]	; (80031e0 <HAL_InitTick+0x9c>)
 800316a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800316e:	6193      	str	r3, [r2, #24]
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <HAL_InitTick+0x9c>)
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800317c:	f107 0210 	add.w	r2, r7, #16
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f003 fcbe 	bl	8006b08 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800318c:	f003 fca8 	bl	8006ae0 <HAL_RCC_GetPCLK2Freq>
 8003190:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003194:	4a13      	ldr	r2, [pc, #76]	; (80031e4 <HAL_InitTick+0xa0>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	0c9b      	lsrs	r3, r3, #18
 800319c:	3b01      	subs	r3, #1
 800319e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80031a0:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <HAL_InitTick+0xa4>)
 80031a2:	4a12      	ldr	r2, [pc, #72]	; (80031ec <HAL_InitTick+0xa8>)
 80031a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80031a6:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <HAL_InitTick+0xa4>)
 80031a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031ac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80031ae:	4a0e      	ldr	r2, [pc, #56]	; (80031e8 <HAL_InitTick+0xa4>)
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <HAL_InitTick+0xa4>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ba:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_InitTick+0xa4>)
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80031c0:	4809      	ldr	r0, [pc, #36]	; (80031e8 <HAL_InitTick+0xa4>)
 80031c2:	f004 f80b 	bl	80071dc <HAL_TIM_Base_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d104      	bne.n	80031d6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80031cc:	4806      	ldr	r0, [pc, #24]	; (80031e8 <HAL_InitTick+0xa4>)
 80031ce:	f004 f85d 	bl	800728c <HAL_TIM_Base_Start_IT>
 80031d2:	4603      	mov	r3, r0
 80031d4:	e000      	b.n	80031d8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3730      	adds	r7, #48	; 0x30
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40021000 	.word	0x40021000
 80031e4:	431bde83 	.word	0x431bde83
 80031e8:	20002648 	.word	0x20002648
 80031ec:	40012c00 	.word	0x40012c00

080031f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031f4:	e7fe      	b.n	80031f4 <NMI_Handler+0x4>

080031f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031fa:	e7fe      	b.n	80031fa <HardFault_Handler+0x4>

080031fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003200:	e7fe      	b.n	8003200 <MemManage_Handler+0x4>

08003202 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003202:	b480      	push	{r7}
 8003204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003206:	e7fe      	b.n	8003206 <BusFault_Handler+0x4>

08003208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800320c:	e7fe      	b.n	800320c <UsageFault_Handler+0x4>

0800320e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800320e:	b480      	push	{r7}
 8003210:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800321e:	2001      	movs	r0, #1
 8003220:	f000 fb8c 	bl	800393c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003224:	bf00      	nop
 8003226:	bd80      	pop	{r7, pc}

08003228 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800322c:	4802      	ldr	r0, [pc, #8]	; (8003238 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800322e:	f001 fcd8 	bl	8004be2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20003368 	.word	0x20003368

0800323c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003240:	4802      	ldr	r0, [pc, #8]	; (800324c <TIM1_UP_IRQHandler+0x10>)
 8003242:	f004 f875 	bl	8007330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20002648 	.word	0x20002648

08003250 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <get_char>:
const uint8_t ALPHAS = (sizeof(vfd_alpha)/sizeof(vfd_alpha[0]));
const uint8_t ALPHAR = (sizeof(vfd_alpha_ru)/sizeof(vfd_alpha_ru[0]));
const uint8_t SPECIAL = (sizeof(vfd_special)/sizeof(vfd_special[0]));

uint16_t get_char(char input)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	71fb      	strb	r3, [r7, #7]
	if ('0' <= input && input <= '9')
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	2b2f      	cmp	r3, #47	; 0x2f
 800326a:	d908      	bls.n	800327e <get_char+0x22>
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	2b39      	cmp	r3, #57	; 0x39
 8003270:	d805      	bhi.n	800327e <get_char+0x22>
		return vfd_digits[input - '0'];
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	3b30      	subs	r3, #48	; 0x30
 8003276:	4a2a      	ldr	r2, [pc, #168]	; (8003320 <get_char+0xc4>)
 8003278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800327c:	e04a      	b.n	8003314 <get_char+0xb8>
	if (0 <= input && input <= 9)
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	2b09      	cmp	r3, #9
 8003282:	d804      	bhi.n	800328e <get_char+0x32>
		return vfd_digits[(uint8_t)input];
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	4a26      	ldr	r2, [pc, #152]	; (8003320 <get_char+0xc4>)
 8003288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800328c:	e042      	b.n	8003314 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	e00e      	b.n	80032b2 <get_char+0x56>
		if (vfd_special_char[i] == input)
 8003294:	4a23      	ldr	r2, [pc, #140]	; (8003324 <get_char+0xc8>)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4413      	add	r3, r2
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	79fa      	ldrb	r2, [r7, #7]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d104      	bne.n	80032ac <get_char+0x50>
			return vfd_special[i];
 80032a2:	4a21      	ldr	r2, [pc, #132]	; (8003328 <get_char+0xcc>)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032aa:	e033      	b.n	8003314 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	3301      	adds	r3, #1
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b15      	cmp	r3, #21
 80032b6:	d9ed      	bls.n	8003294 <get_char+0x38>
	if ('a' <= input && input <= 'z')
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	2b60      	cmp	r3, #96	; 0x60
 80032bc:	d908      	bls.n	80032d0 <get_char+0x74>
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	2b7a      	cmp	r3, #122	; 0x7a
 80032c2:	d805      	bhi.n	80032d0 <get_char+0x74>
		return vfd_alpha[input - 'a'];
 80032c4:	79fb      	ldrb	r3, [r7, #7]
 80032c6:	3b61      	subs	r3, #97	; 0x61
 80032c8:	4a18      	ldr	r2, [pc, #96]	; (800332c <get_char+0xd0>)
 80032ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032ce:	e021      	b.n	8003314 <get_char+0xb8>
	if ('A' <= input && input <= 'Z')
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	2b40      	cmp	r3, #64	; 0x40
 80032d4:	d908      	bls.n	80032e8 <get_char+0x8c>
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	2b5a      	cmp	r3, #90	; 0x5a
 80032da:	d805      	bhi.n	80032e8 <get_char+0x8c>
		return vfd_alpha[input - 'A'];
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	3b41      	subs	r3, #65	; 0x41
 80032e0:	4a12      	ldr	r2, [pc, #72]	; (800332c <get_char+0xd0>)
 80032e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032e6:	e015      	b.n	8003314 <get_char+0xb8>
	if (192 <= input && input <= 223)
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	2bbf      	cmp	r3, #191	; 0xbf
 80032ec:	d908      	bls.n	8003300 <get_char+0xa4>
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	2bdf      	cmp	r3, #223	; 0xdf
 80032f2:	d805      	bhi.n	8003300 <get_char+0xa4>
		return vfd_alpha_ru[input - 192];
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	3bc0      	subs	r3, #192	; 0xc0
 80032f8:	4a0d      	ldr	r2, [pc, #52]	; (8003330 <get_char+0xd4>)
 80032fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032fe:	e009      	b.n	8003314 <get_char+0xb8>
	if (224 <= input && input <= 255)
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	2bdf      	cmp	r3, #223	; 0xdf
 8003304:	d905      	bls.n	8003312 <get_char+0xb6>
		return vfd_alpha_ru[input - 224];
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	3be0      	subs	r3, #224	; 0xe0
 800330a:	4a09      	ldr	r2, [pc, #36]	; (8003330 <get_char+0xd4>)
 800330c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003310:	e000      	b.n	8003314 <get_char+0xb8>
	return 0;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	0800f6e0 	.word	0x0800f6e0
 8003324:	0800f794 	.word	0x0800f794
 8003328:	0800f768 	.word	0x0800f768
 800332c:	0800f6f4 	.word	0x0800f6f4
 8003330:	0800f728 	.word	0x0800f728

08003334 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003334:	480c      	ldr	r0, [pc, #48]	; (8003368 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003336:	490d      	ldr	r1, [pc, #52]	; (800336c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003338:	4a0d      	ldr	r2, [pc, #52]	; (8003370 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800333a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800333c:	e002      	b.n	8003344 <LoopCopyDataInit>

0800333e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800333e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003342:	3304      	adds	r3, #4

08003344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003348:	d3f9      	bcc.n	800333e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800334a:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800334c:	4c0a      	ldr	r4, [pc, #40]	; (8003378 <LoopFillZerobss+0x22>)
  movs r3, #0
 800334e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003350:	e001      	b.n	8003356 <LoopFillZerobss>

08003352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003354:	3204      	adds	r2, #4

08003356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003358:	d3fb      	bcc.n	8003352 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800335a:	f7ff ff79 	bl	8003250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800335e:	f00b fda7 	bl	800eeb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003362:	f7fd ff2f 	bl	80011c4 <main>
  bx lr
 8003366:	4770      	bx	lr
  ldr r0, =_sdata
 8003368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800336c:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8003370:	0800f7b4 	.word	0x0800f7b4
  ldr r2, =_sbss
 8003374:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8003378:	20003654 	.word	0x20003654

0800337c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800337c:	e7fe      	b.n	800337c <ADC1_2_IRQHandler>
	...

08003380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003384:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <HAL_Init+0x28>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a07      	ldr	r2, [pc, #28]	; (80033a8 <HAL_Init+0x28>)
 800338a:	f043 0310 	orr.w	r3, r3, #16
 800338e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003390:	2003      	movs	r0, #3
 8003392:	f000 f8d1 	bl	8003538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003396:	2000      	movs	r0, #0
 8003398:	f7ff fed4 	bl	8003144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800339c:	f7ff fe9a 	bl	80030d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40022000 	.word	0x40022000

080033ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <HAL_IncTick+0x1c>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	461a      	mov	r2, r3
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_IncTick+0x20>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4413      	add	r3, r2
 80033bc:	4a03      	ldr	r2, [pc, #12]	; (80033cc <HAL_IncTick+0x20>)
 80033be:	6013      	str	r3, [r2, #0]
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr
 80033c8:	20000018 	.word	0x20000018
 80033cc:	20002690 	.word	0x20002690

080033d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return uwTick;
 80033d4:	4b02      	ldr	r3, [pc, #8]	; (80033e0 <HAL_GetTick+0x10>)
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr
 80033e0:	20002690 	.word	0x20002690

080033e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <__NVIC_SetPriorityGrouping+0x44>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003400:	4013      	ands	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800340c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003416:	4a04      	ldr	r2, [pc, #16]	; (8003428 <__NVIC_SetPriorityGrouping+0x44>)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	60d3      	str	r3, [r2, #12]
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003430:	4b04      	ldr	r3, [pc, #16]	; (8003444 <__NVIC_GetPriorityGrouping+0x18>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	f003 0307 	and.w	r3, r3, #7
}
 800343a:	4618      	mov	r0, r3
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	e000ed00 	.word	0xe000ed00

08003448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	2b00      	cmp	r3, #0
 8003458:	db0b      	blt.n	8003472 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	f003 021f 	and.w	r2, r3, #31
 8003460:	4906      	ldr	r1, [pc, #24]	; (800347c <__NVIC_EnableIRQ+0x34>)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	2001      	movs	r0, #1
 800346a:	fa00 f202 	lsl.w	r2, r0, r2
 800346e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	e000e100 	.word	0xe000e100

08003480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	6039      	str	r1, [r7, #0]
 800348a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003490:	2b00      	cmp	r3, #0
 8003492:	db0a      	blt.n	80034aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	b2da      	uxtb	r2, r3
 8003498:	490c      	ldr	r1, [pc, #48]	; (80034cc <__NVIC_SetPriority+0x4c>)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	0112      	lsls	r2, r2, #4
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	440b      	add	r3, r1
 80034a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034a8:	e00a      	b.n	80034c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	4908      	ldr	r1, [pc, #32]	; (80034d0 <__NVIC_SetPriority+0x50>)
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	3b04      	subs	r3, #4
 80034b8:	0112      	lsls	r2, r2, #4
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	440b      	add	r3, r1
 80034be:	761a      	strb	r2, [r3, #24]
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	e000e100 	.word	0xe000e100
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b089      	sub	sp, #36	; 0x24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f1c3 0307 	rsb	r3, r3, #7
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	bf28      	it	cs
 80034f2:	2304      	movcs	r3, #4
 80034f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3304      	adds	r3, #4
 80034fa:	2b06      	cmp	r3, #6
 80034fc:	d902      	bls.n	8003504 <NVIC_EncodePriority+0x30>
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	3b03      	subs	r3, #3
 8003502:	e000      	b.n	8003506 <NVIC_EncodePriority+0x32>
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003508:	f04f 32ff 	mov.w	r2, #4294967295
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43da      	mvns	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	401a      	ands	r2, r3
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800351c:	f04f 31ff 	mov.w	r1, #4294967295
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	fa01 f303 	lsl.w	r3, r1, r3
 8003526:	43d9      	mvns	r1, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800352c:	4313      	orrs	r3, r2
         );
}
 800352e:	4618      	mov	r0, r3
 8003530:	3724      	adds	r7, #36	; 0x24
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr

08003538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ff4f 	bl	80033e4 <__NVIC_SetPriorityGrouping>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800354e:	b580      	push	{r7, lr}
 8003550:	b086      	sub	sp, #24
 8003552:	af00      	add	r7, sp, #0
 8003554:	4603      	mov	r3, r0
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003560:	f7ff ff64 	bl	800342c <__NVIC_GetPriorityGrouping>
 8003564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	6978      	ldr	r0, [r7, #20]
 800356c:	f7ff ffb2 	bl	80034d4 <NVIC_EncodePriority>
 8003570:	4602      	mov	r2, r0
 8003572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003576:	4611      	mov	r1, r2
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff ff81 	bl	8003480 <__NVIC_SetPriority>
}
 800357e:	bf00      	nop
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	4603      	mov	r3, r0
 800358e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ff57 	bl	8003448 <__NVIC_EnableIRQ>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b08b      	sub	sp, #44	; 0x2c
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ae:	2300      	movs	r3, #0
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035b2:	2300      	movs	r3, #0
 80035b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035b6:	e169      	b.n	800388c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035b8:	2201      	movs	r2, #1
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	f040 8158 	bne.w	8003886 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4a9a      	ldr	r2, [pc, #616]	; (8003844 <HAL_GPIO_Init+0x2a0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d05e      	beq.n	800369e <HAL_GPIO_Init+0xfa>
 80035e0:	4a98      	ldr	r2, [pc, #608]	; (8003844 <HAL_GPIO_Init+0x2a0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d875      	bhi.n	80036d2 <HAL_GPIO_Init+0x12e>
 80035e6:	4a98      	ldr	r2, [pc, #608]	; (8003848 <HAL_GPIO_Init+0x2a4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d058      	beq.n	800369e <HAL_GPIO_Init+0xfa>
 80035ec:	4a96      	ldr	r2, [pc, #600]	; (8003848 <HAL_GPIO_Init+0x2a4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d86f      	bhi.n	80036d2 <HAL_GPIO_Init+0x12e>
 80035f2:	4a96      	ldr	r2, [pc, #600]	; (800384c <HAL_GPIO_Init+0x2a8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d052      	beq.n	800369e <HAL_GPIO_Init+0xfa>
 80035f8:	4a94      	ldr	r2, [pc, #592]	; (800384c <HAL_GPIO_Init+0x2a8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d869      	bhi.n	80036d2 <HAL_GPIO_Init+0x12e>
 80035fe:	4a94      	ldr	r2, [pc, #592]	; (8003850 <HAL_GPIO_Init+0x2ac>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d04c      	beq.n	800369e <HAL_GPIO_Init+0xfa>
 8003604:	4a92      	ldr	r2, [pc, #584]	; (8003850 <HAL_GPIO_Init+0x2ac>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d863      	bhi.n	80036d2 <HAL_GPIO_Init+0x12e>
 800360a:	4a92      	ldr	r2, [pc, #584]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d046      	beq.n	800369e <HAL_GPIO_Init+0xfa>
 8003610:	4a90      	ldr	r2, [pc, #576]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d85d      	bhi.n	80036d2 <HAL_GPIO_Init+0x12e>
 8003616:	2b12      	cmp	r3, #18
 8003618:	d82a      	bhi.n	8003670 <HAL_GPIO_Init+0xcc>
 800361a:	2b12      	cmp	r3, #18
 800361c:	d859      	bhi.n	80036d2 <HAL_GPIO_Init+0x12e>
 800361e:	a201      	add	r2, pc, #4	; (adr r2, 8003624 <HAL_GPIO_Init+0x80>)
 8003620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003624:	0800369f 	.word	0x0800369f
 8003628:	08003679 	.word	0x08003679
 800362c:	0800368b 	.word	0x0800368b
 8003630:	080036cd 	.word	0x080036cd
 8003634:	080036d3 	.word	0x080036d3
 8003638:	080036d3 	.word	0x080036d3
 800363c:	080036d3 	.word	0x080036d3
 8003640:	080036d3 	.word	0x080036d3
 8003644:	080036d3 	.word	0x080036d3
 8003648:	080036d3 	.word	0x080036d3
 800364c:	080036d3 	.word	0x080036d3
 8003650:	080036d3 	.word	0x080036d3
 8003654:	080036d3 	.word	0x080036d3
 8003658:	080036d3 	.word	0x080036d3
 800365c:	080036d3 	.word	0x080036d3
 8003660:	080036d3 	.word	0x080036d3
 8003664:	080036d3 	.word	0x080036d3
 8003668:	08003681 	.word	0x08003681
 800366c:	08003695 	.word	0x08003695
 8003670:	4a79      	ldr	r2, [pc, #484]	; (8003858 <HAL_GPIO_Init+0x2b4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d013      	beq.n	800369e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003676:	e02c      	b.n	80036d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	623b      	str	r3, [r7, #32]
          break;
 800367e:	e029      	b.n	80036d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	3304      	adds	r3, #4
 8003686:	623b      	str	r3, [r7, #32]
          break;
 8003688:	e024      	b.n	80036d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	3308      	adds	r3, #8
 8003690:	623b      	str	r3, [r7, #32]
          break;
 8003692:	e01f      	b.n	80036d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	330c      	adds	r3, #12
 800369a:	623b      	str	r3, [r7, #32]
          break;
 800369c:	e01a      	b.n	80036d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036a6:	2304      	movs	r3, #4
 80036a8:	623b      	str	r3, [r7, #32]
          break;
 80036aa:	e013      	b.n	80036d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d105      	bne.n	80036c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036b4:	2308      	movs	r3, #8
 80036b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	611a      	str	r2, [r3, #16]
          break;
 80036be:	e009      	b.n	80036d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036c0:	2308      	movs	r3, #8
 80036c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	615a      	str	r2, [r3, #20]
          break;
 80036ca:	e003      	b.n	80036d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036cc:	2300      	movs	r3, #0
 80036ce:	623b      	str	r3, [r7, #32]
          break;
 80036d0:	e000      	b.n	80036d4 <HAL_GPIO_Init+0x130>
          break;
 80036d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	2bff      	cmp	r3, #255	; 0xff
 80036d8:	d801      	bhi.n	80036de <HAL_GPIO_Init+0x13a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	e001      	b.n	80036e2 <HAL_GPIO_Init+0x13e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3304      	adds	r3, #4
 80036e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	2bff      	cmp	r3, #255	; 0xff
 80036e8:	d802      	bhi.n	80036f0 <HAL_GPIO_Init+0x14c>
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	e002      	b.n	80036f6 <HAL_GPIO_Init+0x152>
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	3b08      	subs	r3, #8
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	210f      	movs	r1, #15
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	fa01 f303 	lsl.w	r3, r1, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	401a      	ands	r2, r3
 8003708:	6a39      	ldr	r1, [r7, #32]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	431a      	orrs	r2, r3
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80b1 	beq.w	8003886 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003724:	4b4d      	ldr	r3, [pc, #308]	; (800385c <HAL_GPIO_Init+0x2b8>)
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	4a4c      	ldr	r2, [pc, #304]	; (800385c <HAL_GPIO_Init+0x2b8>)
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	6193      	str	r3, [r2, #24]
 8003730:	4b4a      	ldr	r3, [pc, #296]	; (800385c <HAL_GPIO_Init+0x2b8>)
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800373c:	4a48      	ldr	r2, [pc, #288]	; (8003860 <HAL_GPIO_Init+0x2bc>)
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	089b      	lsrs	r3, r3, #2
 8003742:	3302      	adds	r3, #2
 8003744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003748:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	220f      	movs	r2, #15
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4013      	ands	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a40      	ldr	r2, [pc, #256]	; (8003864 <HAL_GPIO_Init+0x2c0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d013      	beq.n	8003790 <HAL_GPIO_Init+0x1ec>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a3f      	ldr	r2, [pc, #252]	; (8003868 <HAL_GPIO_Init+0x2c4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00d      	beq.n	800378c <HAL_GPIO_Init+0x1e8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a3e      	ldr	r2, [pc, #248]	; (800386c <HAL_GPIO_Init+0x2c8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d007      	beq.n	8003788 <HAL_GPIO_Init+0x1e4>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a3d      	ldr	r2, [pc, #244]	; (8003870 <HAL_GPIO_Init+0x2cc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d101      	bne.n	8003784 <HAL_GPIO_Init+0x1e0>
 8003780:	2303      	movs	r3, #3
 8003782:	e006      	b.n	8003792 <HAL_GPIO_Init+0x1ee>
 8003784:	2304      	movs	r3, #4
 8003786:	e004      	b.n	8003792 <HAL_GPIO_Init+0x1ee>
 8003788:	2302      	movs	r3, #2
 800378a:	e002      	b.n	8003792 <HAL_GPIO_Init+0x1ee>
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <HAL_GPIO_Init+0x1ee>
 8003790:	2300      	movs	r3, #0
 8003792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003794:	f002 0203 	and.w	r2, r2, #3
 8003798:	0092      	lsls	r2, r2, #2
 800379a:	4093      	lsls	r3, r2
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037a2:	492f      	ldr	r1, [pc, #188]	; (8003860 <HAL_GPIO_Init+0x2bc>)
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	089b      	lsrs	r3, r3, #2
 80037a8:	3302      	adds	r3, #2
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d006      	beq.n	80037ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037bc:	4b2d      	ldr	r3, [pc, #180]	; (8003874 <HAL_GPIO_Init+0x2d0>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	492c      	ldr	r1, [pc, #176]	; (8003874 <HAL_GPIO_Init+0x2d0>)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	600b      	str	r3, [r1, #0]
 80037c8:	e006      	b.n	80037d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037ca:	4b2a      	ldr	r3, [pc, #168]	; (8003874 <HAL_GPIO_Init+0x2d0>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	4928      	ldr	r1, [pc, #160]	; (8003874 <HAL_GPIO_Init+0x2d0>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d006      	beq.n	80037f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037e4:	4b23      	ldr	r3, [pc, #140]	; (8003874 <HAL_GPIO_Init+0x2d0>)
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	4922      	ldr	r1, [pc, #136]	; (8003874 <HAL_GPIO_Init+0x2d0>)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]
 80037f0:	e006      	b.n	8003800 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037f2:	4b20      	ldr	r3, [pc, #128]	; (8003874 <HAL_GPIO_Init+0x2d0>)
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	43db      	mvns	r3, r3
 80037fa:	491e      	ldr	r1, [pc, #120]	; (8003874 <HAL_GPIO_Init+0x2d0>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d006      	beq.n	800381a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800380c:	4b19      	ldr	r3, [pc, #100]	; (8003874 <HAL_GPIO_Init+0x2d0>)
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	4918      	ldr	r1, [pc, #96]	; (8003874 <HAL_GPIO_Init+0x2d0>)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	4313      	orrs	r3, r2
 8003816:	608b      	str	r3, [r1, #8]
 8003818:	e006      	b.n	8003828 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800381a:	4b16      	ldr	r3, [pc, #88]	; (8003874 <HAL_GPIO_Init+0x2d0>)
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	43db      	mvns	r3, r3
 8003822:	4914      	ldr	r1, [pc, #80]	; (8003874 <HAL_GPIO_Init+0x2d0>)
 8003824:	4013      	ands	r3, r2
 8003826:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d021      	beq.n	8003878 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003834:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <HAL_GPIO_Init+0x2d0>)
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	490e      	ldr	r1, [pc, #56]	; (8003874 <HAL_GPIO_Init+0x2d0>)
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	4313      	orrs	r3, r2
 800383e:	60cb      	str	r3, [r1, #12]
 8003840:	e021      	b.n	8003886 <HAL_GPIO_Init+0x2e2>
 8003842:	bf00      	nop
 8003844:	10320000 	.word	0x10320000
 8003848:	10310000 	.word	0x10310000
 800384c:	10220000 	.word	0x10220000
 8003850:	10210000 	.word	0x10210000
 8003854:	10120000 	.word	0x10120000
 8003858:	10110000 	.word	0x10110000
 800385c:	40021000 	.word	0x40021000
 8003860:	40010000 	.word	0x40010000
 8003864:	40010800 	.word	0x40010800
 8003868:	40010c00 	.word	0x40010c00
 800386c:	40011000 	.word	0x40011000
 8003870:	40011400 	.word	0x40011400
 8003874:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_GPIO_Init+0x304>)
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	43db      	mvns	r3, r3
 8003880:	4909      	ldr	r1, [pc, #36]	; (80038a8 <HAL_GPIO_Init+0x304>)
 8003882:	4013      	ands	r3, r2
 8003884:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	3301      	adds	r3, #1
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	fa22 f303 	lsr.w	r3, r2, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	f47f ae8e 	bne.w	80035b8 <HAL_GPIO_Init+0x14>
  }
}
 800389c:	bf00      	nop
 800389e:	bf00      	nop
 80038a0:	372c      	adds	r7, #44	; 0x2c
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	40010400 	.word	0x40010400

080038ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	887b      	ldrh	r3, [r7, #2]
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
 80038c8:	e001      	b.n	80038ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr

080038da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	460b      	mov	r3, r1
 80038e4:	807b      	strh	r3, [r7, #2]
 80038e6:	4613      	mov	r3, r2
 80038e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038ea:	787b      	ldrb	r3, [r7, #1]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038f0:	887a      	ldrh	r2, [r7, #2]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038f6:	e003      	b.n	8003900 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038f8:	887b      	ldrh	r3, [r7, #2]
 80038fa:	041a      	lsls	r2, r3, #16
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	611a      	str	r2, [r3, #16]
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr

0800390a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800390a:	b480      	push	{r7}
 800390c:	b085      	sub	sp, #20
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	460b      	mov	r3, r1
 8003914:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800391c:	887a      	ldrh	r2, [r7, #2]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4013      	ands	r3, r2
 8003922:	041a      	lsls	r2, r3, #16
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	43d9      	mvns	r1, r3
 8003928:	887b      	ldrh	r3, [r7, #2]
 800392a:	400b      	ands	r3, r1
 800392c:	431a      	orrs	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	611a      	str	r2, [r3, #16]
}
 8003932:	bf00      	nop
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr

0800393c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003946:	4b08      	ldr	r3, [pc, #32]	; (8003968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	88fb      	ldrh	r3, [r7, #6]
 800394c:	4013      	ands	r3, r2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d006      	beq.n	8003960 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003952:	4a05      	ldr	r2, [pc, #20]	; (8003968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003954:	88fb      	ldrh	r3, [r7, #6]
 8003956:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	4618      	mov	r0, r3
 800395c:	f000 f806 	bl	800396c <HAL_GPIO_EXTI_Callback>
  }
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40010400 	.word	0x40010400

0800396c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr

08003980 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e12b      	b.n	8003bea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd fbce 	bl	8001148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2224      	movs	r2, #36	; 0x24
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0201 	bic.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039e4:	f003 f868 	bl	8006ab8 <HAL_RCC_GetPCLK1Freq>
 80039e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4a81      	ldr	r2, [pc, #516]	; (8003bf4 <HAL_I2C_Init+0x274>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d807      	bhi.n	8003a04 <HAL_I2C_Init+0x84>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4a80      	ldr	r2, [pc, #512]	; (8003bf8 <HAL_I2C_Init+0x278>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	bf94      	ite	ls
 80039fc:	2301      	movls	r3, #1
 80039fe:	2300      	movhi	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	e006      	b.n	8003a12 <HAL_I2C_Init+0x92>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4a7d      	ldr	r2, [pc, #500]	; (8003bfc <HAL_I2C_Init+0x27c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	bf94      	ite	ls
 8003a0c:	2301      	movls	r3, #1
 8003a0e:	2300      	movhi	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e0e7      	b.n	8003bea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4a78      	ldr	r2, [pc, #480]	; (8003c00 <HAL_I2C_Init+0x280>)
 8003a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a22:	0c9b      	lsrs	r3, r3, #18
 8003a24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	4a6a      	ldr	r2, [pc, #424]	; (8003bf4 <HAL_I2C_Init+0x274>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d802      	bhi.n	8003a54 <HAL_I2C_Init+0xd4>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	3301      	adds	r3, #1
 8003a52:	e009      	b.n	8003a68 <HAL_I2C_Init+0xe8>
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a5a:	fb02 f303 	mul.w	r3, r2, r3
 8003a5e:	4a69      	ldr	r2, [pc, #420]	; (8003c04 <HAL_I2C_Init+0x284>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	099b      	lsrs	r3, r3, #6
 8003a66:	3301      	adds	r3, #1
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	495c      	ldr	r1, [pc, #368]	; (8003bf4 <HAL_I2C_Init+0x274>)
 8003a84:	428b      	cmp	r3, r1
 8003a86:	d819      	bhi.n	8003abc <HAL_I2C_Init+0x13c>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	1e59      	subs	r1, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a96:	1c59      	adds	r1, r3, #1
 8003a98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a9c:	400b      	ands	r3, r1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_I2C_Init+0x138>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	1e59      	subs	r1, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab6:	e051      	b.n	8003b5c <HAL_I2C_Init+0x1dc>
 8003ab8:	2304      	movs	r3, #4
 8003aba:	e04f      	b.n	8003b5c <HAL_I2C_Init+0x1dc>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d111      	bne.n	8003ae8 <HAL_I2C_Init+0x168>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1e58      	subs	r0, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6859      	ldr	r1, [r3, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	440b      	add	r3, r1
 8003ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bf0c      	ite	eq
 8003ae0:	2301      	moveq	r3, #1
 8003ae2:	2300      	movne	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	e012      	b.n	8003b0e <HAL_I2C_Init+0x18e>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1e58      	subs	r0, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6859      	ldr	r1, [r3, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	0099      	lsls	r1, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afe:	3301      	adds	r3, #1
 8003b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	bf0c      	ite	eq
 8003b08:	2301      	moveq	r3, #1
 8003b0a:	2300      	movne	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_I2C_Init+0x196>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e022      	b.n	8003b5c <HAL_I2C_Init+0x1dc>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10e      	bne.n	8003b3c <HAL_I2C_Init+0x1bc>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1e58      	subs	r0, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6859      	ldr	r1, [r3, #4]
 8003b26:	460b      	mov	r3, r1
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	440b      	add	r3, r1
 8003b2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b30:	3301      	adds	r3, #1
 8003b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b3a:	e00f      	b.n	8003b5c <HAL_I2C_Init+0x1dc>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	1e58      	subs	r0, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6859      	ldr	r1, [r3, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	0099      	lsls	r1, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b52:	3301      	adds	r3, #1
 8003b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	6809      	ldr	r1, [r1, #0]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69da      	ldr	r2, [r3, #28]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6911      	ldr	r1, [r2, #16]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68d2      	ldr	r2, [r2, #12]
 8003b96:	4311      	orrs	r1, r2
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695a      	ldr	r2, [r3, #20]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0201 	orr.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	000186a0 	.word	0x000186a0
 8003bf8:	001e847f 	.word	0x001e847f
 8003bfc:	003d08ff 	.word	0x003d08ff
 8003c00:	431bde83 	.word	0x431bde83
 8003c04:	10624dd3 	.word	0x10624dd3

08003c08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	4608      	mov	r0, r1
 8003c12:	4611      	mov	r1, r2
 8003c14:	461a      	mov	r2, r3
 8003c16:	4603      	mov	r3, r0
 8003c18:	817b      	strh	r3, [r7, #10]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	813b      	strh	r3, [r7, #8]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c22:	f7ff fbd5 	bl	80033d0 <HAL_GetTick>
 8003c26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	f040 80d9 	bne.w	8003de8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	2319      	movs	r3, #25
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	496d      	ldr	r1, [pc, #436]	; (8003df4 <HAL_I2C_Mem_Write+0x1ec>)
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 fcc1 	bl	80045c8 <I2C_WaitOnFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e0cc      	b.n	8003dea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_I2C_Mem_Write+0x56>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e0c5      	b.n	8003dea <HAL_I2C_Mem_Write+0x1e2>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d007      	beq.n	8003c84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2221      	movs	r2, #33	; 0x21
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2240      	movs	r2, #64	; 0x40
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a3a      	ldr	r2, [r7, #32]
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4a4d      	ldr	r2, [pc, #308]	; (8003df8 <HAL_I2C_Mem_Write+0x1f0>)
 8003cc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cc6:	88f8      	ldrh	r0, [r7, #6]
 8003cc8:	893a      	ldrh	r2, [r7, #8]
 8003cca:	8979      	ldrh	r1, [r7, #10]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	9301      	str	r3, [sp, #4]
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 faf8 	bl	80042cc <I2C_RequestMemoryWrite>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d052      	beq.n	8003d88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e081      	b.n	8003dea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 fd42 	bl	8004774 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00d      	beq.n	8003d12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d107      	bne.n	8003d0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e06b      	b.n	8003dea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	781a      	ldrb	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d11b      	bne.n	8003d88 <HAL_I2C_Mem_Write+0x180>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d017      	beq.n	8003d88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	781a      	ldrb	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1aa      	bne.n	8003ce6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 fd2e 	bl	80047f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00d      	beq.n	8003dbc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d107      	bne.n	8003db8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e016      	b.n	8003dea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	e000      	b.n	8003dea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003de8:	2302      	movs	r3, #2
  }
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	00100002 	.word	0x00100002
 8003df8:	ffff0000 	.word	0xffff0000

08003dfc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08c      	sub	sp, #48	; 0x30
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	4608      	mov	r0, r1
 8003e06:	4611      	mov	r1, r2
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	817b      	strh	r3, [r7, #10]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	813b      	strh	r3, [r7, #8]
 8003e12:	4613      	mov	r3, r2
 8003e14:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e1a:	f7ff fad9 	bl	80033d0 <HAL_GetTick>
 8003e1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	f040 8244 	bne.w	80042b6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	2319      	movs	r3, #25
 8003e34:	2201      	movs	r2, #1
 8003e36:	4982      	ldr	r1, [pc, #520]	; (8004040 <HAL_I2C_Mem_Read+0x244>)
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fbc5 	bl	80045c8 <I2C_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
 8003e46:	e237      	b.n	80042b8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_I2C_Mem_Read+0x5a>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e230      	b.n	80042b8 <HAL_I2C_Mem_Read+0x4bc>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d007      	beq.n	8003e7c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2222      	movs	r2, #34	; 0x22
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2240      	movs	r2, #64	; 0x40
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a62      	ldr	r2, [pc, #392]	; (8004044 <HAL_I2C_Mem_Read+0x248>)
 8003ebc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ebe:	88f8      	ldrh	r0, [r7, #6]
 8003ec0:	893a      	ldrh	r2, [r7, #8]
 8003ec2:	8979      	ldrh	r1, [r7, #10]
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	9301      	str	r3, [sp, #4]
 8003ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	4603      	mov	r3, r0
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 fa92 	bl	80043f8 <I2C_RequestMemoryRead>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e1ec      	b.n	80042b8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d113      	bne.n	8003f0e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	61fb      	str	r3, [r7, #28]
 8003efa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	e1c0      	b.n	8004290 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d11e      	bne.n	8003f54 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f26:	b672      	cpsid	i
}
 8003f28:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	61bb      	str	r3, [r7, #24]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	61bb      	str	r3, [r7, #24]
 8003f3e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f50:	b662      	cpsie	i
}
 8003f52:	e035      	b.n	8003fc0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d11e      	bne.n	8003f9a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f6c:	b672      	cpsid	i
}
 8003f6e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f96:	b662      	cpsie	i
}
 8003f98:	e012      	b.n	8003fc0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fa8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003faa:	2300      	movs	r3, #0
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003fc0:	e166      	b.n	8004290 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	f200 811f 	bhi.w	800420a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d123      	bne.n	800401c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 fc4d 	bl	8004878 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e167      	b.n	80042b8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	855a      	strh	r2, [r3, #42]	; 0x2a
 800401a:	e139      	b.n	8004290 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004020:	2b02      	cmp	r3, #2
 8004022:	d152      	bne.n	80040ca <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402a:	2200      	movs	r2, #0
 800402c:	4906      	ldr	r1, [pc, #24]	; (8004048 <HAL_I2C_Mem_Read+0x24c>)
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 faca 	bl	80045c8 <I2C_WaitOnFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d008      	beq.n	800404c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e13c      	b.n	80042b8 <HAL_I2C_Mem_Read+0x4bc>
 800403e:	bf00      	nop
 8004040:	00100002 	.word	0x00100002
 8004044:	ffff0000 	.word	0xffff0000
 8004048:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800404c:	b672      	cpsid	i
}
 800404e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800405e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004092:	b662      	cpsie	i
}
 8004094:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040c8:	e0e2      	b.n	8004290 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d0:	2200      	movs	r2, #0
 80040d2:	497b      	ldr	r1, [pc, #492]	; (80042c0 <HAL_I2C_Mem_Read+0x4c4>)
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 fa77 	bl	80045c8 <I2C_WaitOnFlagUntilTimeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0e9      	b.n	80042b8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040f4:	b672      	cpsid	i
}
 80040f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800412a:	4b66      	ldr	r3, [pc, #408]	; (80042c4 <HAL_I2C_Mem_Read+0x4c8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	08db      	lsrs	r3, r3, #3
 8004130:	4a65      	ldr	r2, [pc, #404]	; (80042c8 <HAL_I2C_Mem_Read+0x4cc>)
 8004132:	fba2 2303 	umull	r2, r3, r2, r3
 8004136:	0a1a      	lsrs	r2, r3, #8
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	00da      	lsls	r2, r3, #3
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	3b01      	subs	r3, #1
 8004148:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d118      	bne.n	8004182 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f043 0220 	orr.w	r2, r3, #32
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004172:	b662      	cpsie	i
}
 8004174:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e09a      	b.n	80042b8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b04      	cmp	r3, #4
 800418e:	d1d9      	bne.n	8004144 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800419e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041d2:	b662      	cpsie	i
}
 80041d4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004208:	e042      	b.n	8004290 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800420a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 fb32 	bl	8004878 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e04c      	b.n	80042b8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b04      	cmp	r3, #4
 800425c:	d118      	bne.n	8004290 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004294:	2b00      	cmp	r3, #0
 8004296:	f47f ae94 	bne.w	8003fc2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	e000      	b.n	80042b8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80042b6:	2302      	movs	r3, #2
  }
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3728      	adds	r7, #40	; 0x28
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	00010004 	.word	0x00010004
 80042c4:	20000010 	.word	0x20000010
 80042c8:	14f8b589 	.word	0x14f8b589

080042cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	4608      	mov	r0, r1
 80042d6:	4611      	mov	r1, r2
 80042d8:	461a      	mov	r2, r3
 80042da:	4603      	mov	r3, r0
 80042dc:	817b      	strh	r3, [r7, #10]
 80042de:	460b      	mov	r3, r1
 80042e0:	813b      	strh	r3, [r7, #8]
 80042e2:	4613      	mov	r3, r2
 80042e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f960 	bl	80045c8 <I2C_WaitOnFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00d      	beq.n	800432a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800431c:	d103      	bne.n	8004326 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004324:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e05f      	b.n	80043ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800432a:	897b      	ldrh	r3, [r7, #10]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004338:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	6a3a      	ldr	r2, [r7, #32]
 800433e:	492d      	ldr	r1, [pc, #180]	; (80043f4 <I2C_RequestMemoryWrite+0x128>)
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f998 	bl	8004676 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e04c      	b.n	80043ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004368:	6a39      	ldr	r1, [r7, #32]
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 fa02 	bl	8004774 <I2C_WaitOnTXEFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00d      	beq.n	8004392 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	2b04      	cmp	r3, #4
 800437c:	d107      	bne.n	800438e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e02b      	b.n	80043ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004392:	88fb      	ldrh	r3, [r7, #6]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d105      	bne.n	80043a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004398:	893b      	ldrh	r3, [r7, #8]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	611a      	str	r2, [r3, #16]
 80043a2:	e021      	b.n	80043e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043a4:	893b      	ldrh	r3, [r7, #8]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b4:	6a39      	ldr	r1, [r7, #32]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f9dc 	bl	8004774 <I2C_WaitOnTXEFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00d      	beq.n	80043de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d107      	bne.n	80043da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e005      	b.n	80043ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043de:	893b      	ldrh	r3, [r7, #8]
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	00010002 	.word	0x00010002

080043f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	4608      	mov	r0, r1
 8004402:	4611      	mov	r1, r2
 8004404:	461a      	mov	r2, r3
 8004406:	4603      	mov	r3, r0
 8004408:	817b      	strh	r3, [r7, #10]
 800440a:	460b      	mov	r3, r1
 800440c:	813b      	strh	r3, [r7, #8]
 800440e:	4613      	mov	r3, r2
 8004410:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004420:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004430:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	2200      	movs	r2, #0
 800443a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 f8c2 	bl	80045c8 <I2C_WaitOnFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00d      	beq.n	8004466 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004458:	d103      	bne.n	8004462 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004460:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e0aa      	b.n	80045bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004466:	897b      	ldrh	r3, [r7, #10]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	461a      	mov	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004474:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	6a3a      	ldr	r2, [r7, #32]
 800447a:	4952      	ldr	r1, [pc, #328]	; (80045c4 <I2C_RequestMemoryRead+0x1cc>)
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 f8fa 	bl	8004676 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e097      	b.n	80045bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a4:	6a39      	ldr	r1, [r7, #32]
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f964 	bl	8004774 <I2C_WaitOnTXEFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00d      	beq.n	80044ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d107      	bne.n	80044ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e076      	b.n	80045bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d105      	bne.n	80044e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044d4:	893b      	ldrh	r3, [r7, #8]
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	611a      	str	r2, [r3, #16]
 80044de:	e021      	b.n	8004524 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044e0:	893b      	ldrh	r3, [r7, #8]
 80044e2:	0a1b      	lsrs	r3, r3, #8
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f0:	6a39      	ldr	r1, [r7, #32]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f93e 	bl	8004774 <I2C_WaitOnTXEFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00d      	beq.n	800451a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	2b04      	cmp	r3, #4
 8004504:	d107      	bne.n	8004516 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004514:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e050      	b.n	80045bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800451a:	893b      	ldrh	r3, [r7, #8]
 800451c:	b2da      	uxtb	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004526:	6a39      	ldr	r1, [r7, #32]
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 f923 	bl	8004774 <I2C_WaitOnTXEFlagUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00d      	beq.n	8004550 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	2b04      	cmp	r3, #4
 800453a:	d107      	bne.n	800454c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800454a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e035      	b.n	80045bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800455e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	2200      	movs	r2, #0
 8004568:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 f82b 	bl	80045c8 <I2C_WaitOnFlagUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00d      	beq.n	8004594 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004586:	d103      	bne.n	8004590 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800458e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e013      	b.n	80045bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004594:	897b      	ldrh	r3, [r7, #10]
 8004596:	b2db      	uxtb	r3, r3
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	b2da      	uxtb	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	6a3a      	ldr	r2, [r7, #32]
 80045a8:	4906      	ldr	r1, [pc, #24]	; (80045c4 <I2C_RequestMemoryRead+0x1cc>)
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f863 	bl	8004676 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	00010002 	.word	0x00010002

080045c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	4613      	mov	r3, r2
 80045d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045d8:	e025      	b.n	8004626 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e0:	d021      	beq.n	8004626 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e2:	f7fe fef5 	bl	80033d0 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d302      	bcc.n	80045f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d116      	bne.n	8004626 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	f043 0220 	orr.w	r2, r3, #32
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e023      	b.n	800466e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	0c1b      	lsrs	r3, r3, #16
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	d10d      	bne.n	800464c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	43da      	mvns	r2, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4013      	ands	r3, r2
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	bf0c      	ite	eq
 8004642:	2301      	moveq	r3, #1
 8004644:	2300      	movne	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	e00c      	b.n	8004666 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	43da      	mvns	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4013      	ands	r3, r2
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	bf0c      	ite	eq
 800465e:	2301      	moveq	r3, #1
 8004660:	2300      	movne	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	461a      	mov	r2, r3
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	429a      	cmp	r2, r3
 800466a:	d0b6      	beq.n	80045da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	607a      	str	r2, [r7, #4]
 8004682:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004684:	e051      	b.n	800472a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004694:	d123      	bne.n	80046de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f043 0204 	orr.w	r2, r3, #4
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e046      	b.n	800476c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e4:	d021      	beq.n	800472a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e6:	f7fe fe73 	bl	80033d0 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d302      	bcc.n	80046fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d116      	bne.n	800472a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f043 0220 	orr.w	r2, r3, #32
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e020      	b.n	800476c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	0c1b      	lsrs	r3, r3, #16
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b01      	cmp	r3, #1
 8004732:	d10c      	bne.n	800474e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	43da      	mvns	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4013      	ands	r3, r2
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	bf14      	ite	ne
 8004746:	2301      	movne	r3, #1
 8004748:	2300      	moveq	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	e00b      	b.n	8004766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	43da      	mvns	r2, r3
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	4013      	ands	r3, r2
 800475a:	b29b      	uxth	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	bf14      	ite	ne
 8004760:	2301      	movne	r3, #1
 8004762:	2300      	moveq	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d18d      	bne.n	8004686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004780:	e02d      	b.n	80047de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f8ce 	bl	8004924 <I2C_IsAcknowledgeFailed>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e02d      	b.n	80047ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004798:	d021      	beq.n	80047de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800479a:	f7fe fe19 	bl	80033d0 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d302      	bcc.n	80047b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d116      	bne.n	80047de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	f043 0220 	orr.w	r2, r3, #32
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e007      	b.n	80047ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e8:	2b80      	cmp	r3, #128	; 0x80
 80047ea:	d1ca      	bne.n	8004782 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004802:	e02d      	b.n	8004860 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f88d 	bl	8004924 <I2C_IsAcknowledgeFailed>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e02d      	b.n	8004870 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481a:	d021      	beq.n	8004860 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481c:	f7fe fdd8 	bl	80033d0 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	429a      	cmp	r2, r3
 800482a:	d302      	bcc.n	8004832 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d116      	bne.n	8004860 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	f043 0220 	orr.w	r2, r3, #32
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e007      	b.n	8004870 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b04      	cmp	r3, #4
 800486c:	d1ca      	bne.n	8004804 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004884:	e042      	b.n	800490c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	f003 0310 	and.w	r3, r3, #16
 8004890:	2b10      	cmp	r3, #16
 8004892:	d119      	bne.n	80048c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0210 	mvn.w	r2, #16
 800489c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e029      	b.n	800491c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c8:	f7fe fd82 	bl	80033d0 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d302      	bcc.n	80048de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d116      	bne.n	800490c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	f043 0220 	orr.w	r2, r3, #32
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e007      	b.n	800491c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004916:	2b40      	cmp	r3, #64	; 0x40
 8004918:	d1b5      	bne.n	8004886 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800493a:	d11b      	bne.n	8004974 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004944:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	f043 0204 	orr.w	r2, r3, #4
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	bc80      	pop	{r7}
 800497e:	4770      	bx	lr

08004980 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004982:	b08b      	sub	sp, #44	; 0x2c
 8004984:	af06      	add	r7, sp, #24
 8004986:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e0fd      	b.n	8004b8e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f009 ffd8 	bl	800e95c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2203      	movs	r2, #3
 80049b0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f002 fe7f 	bl	80076bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	687e      	ldr	r6, [r7, #4]
 80049c6:	466d      	mov	r5, sp
 80049c8:	f106 0410 	add.w	r4, r6, #16
 80049cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	602b      	str	r3, [r5, #0]
 80049d4:	1d33      	adds	r3, r6, #4
 80049d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049d8:	6838      	ldr	r0, [r7, #0]
 80049da:	f002 fe49 	bl	8007670 <USB_CoreInit>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0ce      	b.n	8004b8e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2100      	movs	r1, #0
 80049f6:	4618      	mov	r0, r3
 80049f8:	f002 fe7a 	bl	80076f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049fc:	2300      	movs	r3, #0
 80049fe:	73fb      	strb	r3, [r7, #15]
 8004a00:	e04c      	b.n	8004a9c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	440b      	add	r3, r1
 8004a12:	3301      	adds	r3, #1
 8004a14:	2201      	movs	r2, #1
 8004a16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	4613      	mov	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	440b      	add	r3, r1
 8004a28:	7bfa      	ldrb	r2, [r7, #15]
 8004a2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a2c:	7bfa      	ldrb	r2, [r7, #15]
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	b298      	uxth	r0, r3
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	4613      	mov	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	440b      	add	r3, r1
 8004a3e:	3336      	adds	r3, #54	; 0x36
 8004a40:	4602      	mov	r2, r0
 8004a42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a44:	7bfb      	ldrb	r3, [r7, #15]
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	440b      	add	r3, r1
 8004a54:	3303      	adds	r3, #3
 8004a56:	2200      	movs	r2, #0
 8004a58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a5a:	7bfa      	ldrb	r2, [r7, #15]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	440b      	add	r3, r1
 8004a68:	3338      	adds	r3, #56	; 0x38
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a6e:	7bfa      	ldrb	r2, [r7, #15]
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	440b      	add	r3, r1
 8004a7c:	333c      	adds	r3, #60	; 0x3c
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a82:	7bfa      	ldrb	r2, [r7, #15]
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	440b      	add	r3, r1
 8004a90:	3340      	adds	r3, #64	; 0x40
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
 8004a9c:	7bfa      	ldrb	r2, [r7, #15]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d3ad      	bcc.n	8004a02 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	73fb      	strb	r3, [r7, #15]
 8004aaa:	e044      	b.n	8004b36 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004aac:	7bfa      	ldrb	r2, [r7, #15]
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	440b      	add	r3, r1
 8004aba:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004abe:	2200      	movs	r2, #0
 8004ac0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ac2:	7bfa      	ldrb	r2, [r7, #15]
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	440b      	add	r3, r1
 8004ad0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ad4:	7bfa      	ldrb	r2, [r7, #15]
 8004ad6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ad8:	7bfa      	ldrb	r2, [r7, #15]
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	440b      	add	r3, r1
 8004ae6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004aee:	7bfa      	ldrb	r2, [r7, #15]
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	440b      	add	r3, r1
 8004afc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b04:	7bfa      	ldrb	r2, [r7, #15]
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	440b      	add	r3, r1
 8004b12:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b1a:	7bfa      	ldrb	r2, [r7, #15]
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	440b      	add	r3, r1
 8004b28:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	3301      	adds	r3, #1
 8004b34:	73fb      	strb	r3, [r7, #15]
 8004b36:	7bfa      	ldrb	r2, [r7, #15]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d3b5      	bcc.n	8004aac <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	603b      	str	r3, [r7, #0]
 8004b46:	687e      	ldr	r6, [r7, #4]
 8004b48:	466d      	mov	r5, sp
 8004b4a:	f106 0410 	add.w	r4, r6, #16
 8004b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	602b      	str	r3, [r5, #0]
 8004b56:	1d33      	adds	r3, r6, #4
 8004b58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b5a:	6838      	ldr	r0, [r7, #0]
 8004b5c:	f002 fdd4 	bl	8007708 <USB_DevInit>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e00d      	b.n	8004b8e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f004 ff45 	bl	8009a16 <USB_DevDisconnect>

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b96 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_PCD_Start+0x16>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e016      	b.n	8004bda <HAL_PCD_Start+0x44>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f002 fd69 	bl	8007690 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f00a f93e 	bl	800ee42 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f004 ff19 	bl	8009a02 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b088      	sub	sp, #32
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f004 ff1b 	bl	8009a2a <USB_ReadInterrupts>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bfe:	d102      	bne.n	8004c06 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fb61 	bl	80052c8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f004 ff0d 	bl	8009a2a <USB_ReadInterrupts>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c1a:	d112      	bne.n	8004c42 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2e:	b292      	uxth	r2, r2
 8004c30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f009 ff0c 	bl	800ea52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f925 	bl	8004e8c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f004 feef 	bl	8009a2a <USB_ReadInterrupts>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c56:	d10b      	bne.n	8004c70 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c6a:	b292      	uxth	r2, r2
 8004c6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f004 fed8 	bl	8009a2a <USB_ReadInterrupts>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c84:	d10b      	bne.n	8004c9e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c98:	b292      	uxth	r2, r2
 8004c9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f004 fec1 	bl	8009a2a <USB_ReadInterrupts>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb2:	d126      	bne.n	8004d02 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0204 	bic.w	r2, r2, #4
 8004cc6:	b292      	uxth	r2, r2
 8004cc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0208 	bic.w	r2, r2, #8
 8004cde:	b292      	uxth	r2, r2
 8004ce0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f009 feed 	bl	800eac4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cfc:	b292      	uxth	r2, r2
 8004cfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f004 fe8f 	bl	8009a2a <USB_ReadInterrupts>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d16:	f040 8084 	bne.w	8004e22 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	77fb      	strb	r3, [r7, #31]
 8004d1e:	e011      	b.n	8004d44 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	7ffb      	ldrb	r3, [r7, #31]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	441a      	add	r2, r3
 8004d2c:	7ffb      	ldrb	r3, [r7, #31]
 8004d2e:	8812      	ldrh	r2, [r2, #0]
 8004d30:	b292      	uxth	r2, r2
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	f107 0120 	add.w	r1, r7, #32
 8004d38:	440b      	add	r3, r1
 8004d3a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004d3e:	7ffb      	ldrb	r3, [r7, #31]
 8004d40:	3301      	adds	r3, #1
 8004d42:	77fb      	strb	r3, [r7, #31]
 8004d44:	7ffb      	ldrb	r3, [r7, #31]
 8004d46:	2b07      	cmp	r3, #7
 8004d48:	d9ea      	bls.n	8004d20 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0201 	orr.w	r2, r2, #1
 8004d5c:	b292      	uxth	r2, r2
 8004d5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0201 	bic.w	r2, r2, #1
 8004d74:	b292      	uxth	r2, r2
 8004d76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004d7a:	bf00      	nop
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0f6      	beq.n	8004d7c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da0:	b292      	uxth	r2, r2
 8004da2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004da6:	2300      	movs	r3, #0
 8004da8:	77fb      	strb	r3, [r7, #31]
 8004daa:	e010      	b.n	8004dce <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004dac:	7ffb      	ldrb	r3, [r7, #31]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6812      	ldr	r2, [r2, #0]
 8004db2:	4611      	mov	r1, r2
 8004db4:	7ffa      	ldrb	r2, [r7, #31]
 8004db6:	0092      	lsls	r2, r2, #2
 8004db8:	440a      	add	r2, r1
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	f107 0120 	add.w	r1, r7, #32
 8004dc0:	440b      	add	r3, r1
 8004dc2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004dc6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004dc8:	7ffb      	ldrb	r3, [r7, #31]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	77fb      	strb	r3, [r7, #31]
 8004dce:	7ffb      	ldrb	r3, [r7, #31]
 8004dd0:	2b07      	cmp	r3, #7
 8004dd2:	d9eb      	bls.n	8004dac <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0208 	orr.w	r2, r2, #8
 8004de6:	b292      	uxth	r2, r2
 8004de8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dfe:	b292      	uxth	r2, r2
 8004e00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0204 	orr.w	r2, r2, #4
 8004e16:	b292      	uxth	r2, r2
 8004e18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f009 fe37 	bl	800ea90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f004 fdff 	bl	8009a2a <USB_ReadInterrupts>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e36:	d10e      	bne.n	8004e56 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e4a:	b292      	uxth	r2, r2
 8004e4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f009 fdf0 	bl	800ea36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f004 fde5 	bl	8009a2a <USB_ReadInterrupts>
 8004e60:	4603      	mov	r3, r0
 8004e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e6a:	d10b      	bne.n	8004e84 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e7e:	b292      	uxth	r2, r2
 8004e80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004e84:	bf00      	nop
 8004e86:	3720      	adds	r7, #32
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	460b      	mov	r3, r1
 8004e96:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_PCD_SetAddress+0x1a>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e013      	b.n	8004ece <HAL_PCD_SetAddress+0x42>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	78fa      	ldrb	r2, [r7, #3]
 8004eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	78fa      	ldrb	r2, [r7, #3]
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f004 fd8c 	bl	80099dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	4608      	mov	r0, r1
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	70fb      	strb	r3, [r7, #3]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	803b      	strh	r3, [r7, #0]
 8004eec:	4613      	mov	r3, r2
 8004eee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	da0e      	bge.n	8004f1a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	4413      	add	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2201      	movs	r2, #1
 8004f16:	705a      	strb	r2, [r3, #1]
 8004f18:	e00e      	b.n	8004f38 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	f003 0207 	and.w	r2, r3, #7
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	4413      	add	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f38:	78fb      	ldrb	r3, [r7, #3]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004f44:	883a      	ldrh	r2, [r7, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	78ba      	ldrb	r2, [r7, #2]
 8004f4e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	785b      	ldrb	r3, [r3, #1]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d004      	beq.n	8004f62 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f62:	78bb      	ldrb	r3, [r7, #2]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d102      	bne.n	8004f6e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_PCD_EP_Open+0xa6>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e00e      	b.n	8004f9a <HAL_PCD_EP_Open+0xc4>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68f9      	ldr	r1, [r7, #12]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f002 fbdc 	bl	8007748 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004f98:	7afb      	ldrb	r3, [r7, #11]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	460b      	mov	r3, r1
 8004fac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004fae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	da0e      	bge.n	8004fd4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fb6:	78fb      	ldrb	r3, [r7, #3]
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	4413      	add	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	705a      	strb	r2, [r3, #1]
 8004fd2:	e00e      	b.n	8004ff2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	f003 0207 	and.w	r2, r3, #7
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	4413      	add	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004ff2:	78fb      	ldrb	r3, [r7, #3]
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_PCD_EP_Close+0x6a>
 8005008:	2302      	movs	r3, #2
 800500a:	e00e      	b.n	800502a <HAL_PCD_EP_Close+0x88>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68f9      	ldr	r1, [r7, #12]
 800501a:	4618      	mov	r0, r3
 800501c:	f002 fefe 	bl	8007e1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b086      	sub	sp, #24
 8005036:	af00      	add	r7, sp, #0
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
 800503e:	460b      	mov	r3, r1
 8005040:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005042:	7afb      	ldrb	r3, [r7, #11]
 8005044:	f003 0207 	and.w	r2, r3, #7
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2200      	movs	r2, #0
 800506a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2200      	movs	r2, #0
 8005070:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005072:	7afb      	ldrb	r3, [r7, #11]
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	b2da      	uxtb	r2, r3
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800507e:	7afb      	ldrb	r3, [r7, #11]
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	2b00      	cmp	r3, #0
 8005086:	d106      	bne.n	8005096 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6979      	ldr	r1, [r7, #20]
 800508e:	4618      	mov	r0, r3
 8005090:	f003 f8b0 	bl	80081f4 <USB_EPStartXfer>
 8005094:	e005      	b.n	80050a2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6979      	ldr	r1, [r7, #20]
 800509c:	4618      	mov	r0, r3
 800509e:	f003 f8a9 	bl	80081f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	460b      	mov	r3, r1
 80050b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	f003 0207 	and.w	r2, r3, #7
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	4613      	mov	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	440b      	add	r3, r1
 80050ca:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80050ce:	681b      	ldr	r3, [r3, #0]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr

080050da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b086      	sub	sp, #24
 80050de:	af00      	add	r7, sp, #0
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	603b      	str	r3, [r7, #0]
 80050e6:	460b      	mov	r3, r1
 80050e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050ea:	7afb      	ldrb	r3, [r7, #11]
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4413      	add	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2200      	movs	r2, #0
 800511e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2201      	movs	r2, #1
 8005124:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005126:	7afb      	ldrb	r3, [r7, #11]
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	b2da      	uxtb	r2, r3
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005132:	7afb      	ldrb	r3, [r7, #11]
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	2b00      	cmp	r3, #0
 800513a:	d106      	bne.n	800514a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6979      	ldr	r1, [r7, #20]
 8005142:	4618      	mov	r0, r3
 8005144:	f003 f856 	bl	80081f4 <USB_EPStartXfer>
 8005148:	e005      	b.n	8005156 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6979      	ldr	r1, [r7, #20]
 8005150:	4618      	mov	r0, r3
 8005152:	f003 f84f 	bl	80081f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3718      	adds	r7, #24
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	f003 0207 	and.w	r2, r3, #7
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	429a      	cmp	r2, r3
 8005178:	d901      	bls.n	800517e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e04c      	b.n	8005218 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800517e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005182:	2b00      	cmp	r3, #0
 8005184:	da0e      	bge.n	80051a4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005186:	78fb      	ldrb	r3, [r7, #3]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	4413      	add	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2201      	movs	r2, #1
 80051a0:	705a      	strb	r2, [r3, #1]
 80051a2:	e00c      	b.n	80051be <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80051a4:	78fa      	ldrb	r2, [r7, #3]
 80051a6:	4613      	mov	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	4413      	add	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2201      	movs	r2, #1
 80051c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d101      	bne.n	80051de <HAL_PCD_EP_SetStall+0x7e>
 80051da:	2302      	movs	r3, #2
 80051dc:	e01c      	b.n	8005218 <HAL_PCD_EP_SetStall+0xb8>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68f9      	ldr	r1, [r7, #12]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f004 faf8 	bl	80097e2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051f2:	78fb      	ldrb	r3, [r7, #3]
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d108      	bne.n	800520e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005206:	4619      	mov	r1, r3
 8005208:	4610      	mov	r0, r2
 800520a:	f004 fc1d 	bl	8009a48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	f003 020f 	and.w	r2, r3, #15
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	429a      	cmp	r2, r3
 8005238:	d901      	bls.n	800523e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e040      	b.n	80052c0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800523e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005242:	2b00      	cmp	r3, #0
 8005244:	da0e      	bge.n	8005264 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005246:	78fb      	ldrb	r3, [r7, #3]
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	4413      	add	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	705a      	strb	r2, [r3, #1]
 8005262:	e00e      	b.n	8005282 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005264:	78fb      	ldrb	r3, [r7, #3]
 8005266:	f003 0207 	and.w	r2, r3, #7
 800526a:	4613      	mov	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	4413      	add	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	b2da      	uxtb	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_PCD_EP_ClrStall+0x82>
 800529e:	2302      	movs	r3, #2
 80052a0:	e00e      	b.n	80052c0 <HAL_PCD_EP_ClrStall+0xa0>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68f9      	ldr	r1, [r7, #12]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f004 fae6 	bl	8009882 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08e      	sub	sp, #56	; 0x38
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80052d0:	e2ec      	b.n	80058ac <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052da:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80052dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f003 030f 	and.w	r3, r3, #15
 80052e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80052e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f040 8161 	bne.w	80055b4 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80052f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d152      	bne.n	80053a2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	b29b      	uxth	r3, r3
 8005304:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530c:	81fb      	strh	r3, [r7, #14]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	89fb      	ldrh	r3, [r7, #14]
 8005314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800531c:	b29b      	uxth	r3, r3
 800531e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3328      	adds	r3, #40	; 0x28
 8005324:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800532e:	b29b      	uxth	r3, r3
 8005330:	461a      	mov	r2, r3
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	4413      	add	r3, r2
 800533a:	3302      	adds	r3, #2
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6812      	ldr	r2, [r2, #0]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	695a      	ldr	r2, [r3, #20]
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	441a      	add	r2, r3
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005360:	2100      	movs	r1, #0
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f009 fb4d 	bl	800ea02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 829b 	beq.w	80058ac <PCD_EP_ISR_Handler+0x5e4>
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f040 8296 	bne.w	80058ac <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005386:	b2db      	uxtb	r3, r3
 8005388:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800538c:	b2da      	uxtb	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	b292      	uxth	r2, r2
 8005394:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80053a0:	e284      	b.n	80058ac <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80053b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80053b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d034      	beq.n	8005426 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	461a      	mov	r2, r3
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	4413      	add	r3, r2
 80053d0:	3306      	adds	r3, #6
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6812      	ldr	r2, [r2, #0]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	f004 fb74 	bl	8009ae8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	b29a      	uxth	r2, r3
 8005408:	f640 738f 	movw	r3, #3983	; 0xf8f
 800540c:	4013      	ands	r3, r2
 800540e:	823b      	strh	r3, [r7, #16]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	8a3a      	ldrh	r2, [r7, #16]
 8005416:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800541a:	b292      	uxth	r2, r2
 800541c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f009 fac2 	bl	800e9a8 <HAL_PCD_SetupStageCallback>
 8005424:	e242      	b.n	80058ac <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005426:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800542a:	2b00      	cmp	r3, #0
 800542c:	f280 823e 	bge.w	80058ac <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	b29a      	uxth	r2, r3
 8005438:	f640 738f 	movw	r3, #3983	; 0xf8f
 800543c:	4013      	ands	r3, r2
 800543e:	83bb      	strh	r3, [r7, #28]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	8bba      	ldrh	r2, [r7, #28]
 8005446:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800544a:	b292      	uxth	r2, r2
 800544c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005456:	b29b      	uxth	r3, r3
 8005458:	461a      	mov	r2, r3
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	4413      	add	r3, r2
 8005462:	3306      	adds	r3, #6
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6812      	ldr	r2, [r2, #0]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d019      	beq.n	80054b6 <PCD_EP_ISR_Handler+0x1ee>
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d015      	beq.n	80054b6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	6959      	ldr	r1, [r3, #20]
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800549a:	b29b      	uxth	r3, r3
 800549c:	f004 fb24 	bl	8009ae8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	695a      	ldr	r2, [r3, #20]
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	441a      	add	r2, r3
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80054ae:	2100      	movs	r1, #0
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f009 fa8b 	bl	800e9cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f040 81f2 	bne.w	80058ac <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	461a      	mov	r2, r3
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	4413      	add	r3, r2
 80054de:	61bb      	str	r3, [r7, #24]
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d112      	bne.n	8005516 <PCD_EP_ISR_Handler+0x24e>
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	801a      	strh	r2, [r3, #0]
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	b29b      	uxth	r3, r3
 8005506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800550a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800550e:	b29a      	uxth	r2, r3
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	801a      	strh	r2, [r3, #0]
 8005514:	e02f      	b.n	8005576 <PCD_EP_ISR_Handler+0x2ae>
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b3e      	cmp	r3, #62	; 0x3e
 800551c:	d813      	bhi.n	8005546 <PCD_EP_ISR_Handler+0x27e>
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	085b      	lsrs	r3, r3, #1
 8005524:	633b      	str	r3, [r7, #48]	; 0x30
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <PCD_EP_ISR_Handler+0x270>
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	3301      	adds	r3, #1
 8005536:	633b      	str	r3, [r7, #48]	; 0x30
 8005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553a:	b29b      	uxth	r3, r3
 800553c:	029b      	lsls	r3, r3, #10
 800553e:	b29a      	uxth	r2, r3
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	801a      	strh	r2, [r3, #0]
 8005544:	e017      	b.n	8005576 <PCD_EP_ISR_Handler+0x2ae>
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	633b      	str	r3, [r7, #48]	; 0x30
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	2b00      	cmp	r3, #0
 8005558:	d102      	bne.n	8005560 <PCD_EP_ISR_Handler+0x298>
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	3b01      	subs	r3, #1
 800555e:	633b      	str	r3, [r7, #48]	; 0x30
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005562:	b29b      	uxth	r3, r3
 8005564:	029b      	lsls	r3, r3, #10
 8005566:	b29b      	uxth	r3, r3
 8005568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800556c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005570:	b29a      	uxth	r2, r3
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005586:	827b      	strh	r3, [r7, #18]
 8005588:	8a7b      	ldrh	r3, [r7, #18]
 800558a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800558e:	827b      	strh	r3, [r7, #18]
 8005590:	8a7b      	ldrh	r3, [r7, #18]
 8005592:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005596:	827b      	strh	r3, [r7, #18]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	8a7b      	ldrh	r3, [r7, #18]
 800559e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	8013      	strh	r3, [r2, #0]
 80055b2:	e17b      	b.n	80058ac <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	461a      	mov	r2, r3
 80055ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80055c6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f280 80ea 	bge.w	80057a4 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80055e6:	4013      	ands	r3, r2
 80055e8:	853b      	strh	r3, [r7, #40]	; 0x28
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80055fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055fe:	b292      	uxth	r2, r2
 8005600:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005602:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	4413      	add	r3, r2
 8005616:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	7b1b      	ldrb	r3, [r3, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d122      	bne.n	8005666 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005628:	b29b      	uxth	r3, r3
 800562a:	461a      	mov	r2, r3
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	4413      	add	r3, r2
 8005634:	3306      	adds	r3, #6
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005648:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800564a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 8087 	beq.w	8005760 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6818      	ldr	r0, [r3, #0]
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	6959      	ldr	r1, [r3, #20]
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	88da      	ldrh	r2, [r3, #6]
 800565e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005660:	f004 fa42 	bl	8009ae8 <USB_ReadPMA>
 8005664:	e07c      	b.n	8005760 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	78db      	ldrb	r3, [r3, #3]
 800566a:	2b02      	cmp	r3, #2
 800566c:	d108      	bne.n	8005680 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800566e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005670:	461a      	mov	r2, r3
 8005672:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f927 	bl	80058c8 <HAL_PCD_EP_DB_Receive>
 800567a:	4603      	mov	r3, r0
 800567c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800567e:	e06f      	b.n	8005760 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	461a      	mov	r2, r3
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569a:	847b      	strh	r3, [r7, #34]	; 0x22
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	461a      	mov	r2, r3
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	441a      	add	r2, r3
 80056aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80056ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056bc:	b29b      	uxth	r3, r3
 80056be:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	461a      	mov	r2, r3
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d021      	beq.n	800571e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	461a      	mov	r2, r3
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	4413      	add	r3, r2
 80056ee:	3302      	adds	r3, #2
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6812      	ldr	r2, [r2, #0]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005702:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005704:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005706:	2b00      	cmp	r3, #0
 8005708:	d02a      	beq.n	8005760 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6818      	ldr	r0, [r3, #0]
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	6959      	ldr	r1, [r3, #20]
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	891a      	ldrh	r2, [r3, #8]
 8005716:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005718:	f004 f9e6 	bl	8009ae8 <USB_ReadPMA>
 800571c:	e020      	b.n	8005760 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005726:	b29b      	uxth	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	4413      	add	r3, r2
 8005732:	3306      	adds	r3, #6
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6812      	ldr	r2, [r2, #0]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005746:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005748:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800574a:	2b00      	cmp	r3, #0
 800574c:	d008      	beq.n	8005760 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	6959      	ldr	r1, [r3, #20]
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	895a      	ldrh	r2, [r3, #10]
 800575a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800575c:	f004 f9c4 	bl	8009ae8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	69da      	ldr	r2, [r3, #28]
 8005764:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005766:	441a      	add	r2, r3
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	695a      	ldr	r2, [r3, #20]
 8005770:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005772:	441a      	add	r2, r3
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d004      	beq.n	800578a <PCD_EP_ISR_Handler+0x4c2>
 8005780:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	429a      	cmp	r2, r3
 8005788:	d206      	bcs.n	8005798 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	4619      	mov	r1, r3
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f009 f91b 	bl	800e9cc <HAL_PCD_DataOutStageCallback>
 8005796:	e005      	b.n	80057a4 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800579e:	4618      	mov	r0, r3
 80057a0:	f002 fd28 	bl	80081f4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80057a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80057a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d07e      	beq.n	80058ac <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80057ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	4413      	add	r3, r2
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80057d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057dc:	843b      	strh	r3, [r7, #32]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	441a      	add	r2, r3
 80057ec:	8c3b      	ldrh	r3, [r7, #32]
 80057ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	78db      	ldrb	r3, [r3, #3]
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d00c      	beq.n	800581c <PCD_EP_ISR_Handler+0x554>
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	78db      	ldrb	r3, [r3, #3]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d008      	beq.n	800581c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800580e:	2b02      	cmp	r3, #2
 8005810:	d146      	bne.n	80058a0 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005812:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005818:	2b00      	cmp	r3, #0
 800581a:	d141      	bne.n	80058a0 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005824:	b29b      	uxth	r3, r3
 8005826:	461a      	mov	r2, r3
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	4413      	add	r3, r2
 8005830:	3302      	adds	r3, #2
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6812      	ldr	r2, [r2, #0]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005844:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	699a      	ldr	r2, [r3, #24]
 800584a:	8bfb      	ldrh	r3, [r7, #30]
 800584c:	429a      	cmp	r2, r3
 800584e:	d906      	bls.n	800585e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	699a      	ldr	r2, [r3, #24]
 8005854:	8bfb      	ldrh	r3, [r7, #30]
 8005856:	1ad2      	subs	r2, r2, r3
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	619a      	str	r2, [r3, #24]
 800585c:	e002      	b.n	8005864 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	2200      	movs	r2, #0
 8005862:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d106      	bne.n	800587a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f009 f8c5 	bl	800ea02 <HAL_PCD_DataInStageCallback>
 8005878:	e018      	b.n	80058ac <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	695a      	ldr	r2, [r3, #20]
 800587e:	8bfb      	ldrh	r3, [r7, #30]
 8005880:	441a      	add	r2, r3
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	69da      	ldr	r2, [r3, #28]
 800588a:	8bfb      	ldrh	r3, [r7, #30]
 800588c:	441a      	add	r2, r3
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005898:	4618      	mov	r0, r3
 800589a:	f002 fcab 	bl	80081f4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800589e:	e005      	b.n	80058ac <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80058a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80058a2:	461a      	mov	r2, r3
 80058a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f91b 	bl	8005ae2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	b21b      	sxth	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f6ff ad0a 	blt.w	80052d2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3738      	adds	r7, #56	; 0x38
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	4613      	mov	r3, r2
 80058d4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80058d6:	88fb      	ldrh	r3, [r7, #6]
 80058d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d07e      	beq.n	80059de <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	461a      	mov	r2, r3
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	4413      	add	r3, r2
 80058f4:	3302      	adds	r3, #2
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	6812      	ldr	r2, [r2, #0]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005908:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	8b7b      	ldrh	r3, [r7, #26]
 8005910:	429a      	cmp	r2, r3
 8005912:	d306      	bcc.n	8005922 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	699a      	ldr	r2, [r3, #24]
 8005918:	8b7b      	ldrh	r3, [r7, #26]
 800591a:	1ad2      	subs	r2, r2, r3
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	619a      	str	r2, [r3, #24]
 8005920:	e002      	b.n	8005928 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2200      	movs	r2, #0
 8005926:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d123      	bne.n	8005978 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	b29b      	uxth	r3, r3
 8005942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594a:	833b      	strh	r3, [r7, #24]
 800594c:	8b3b      	ldrh	r3, [r7, #24]
 800594e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005952:	833b      	strh	r3, [r7, #24]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	441a      	add	r2, r3
 8005962:	8b3b      	ldrh	r3, [r7, #24]
 8005964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005974:	b29b      	uxth	r3, r3
 8005976:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005978:	88fb      	ldrh	r3, [r7, #6]
 800597a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d01f      	beq.n	80059c2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	b29b      	uxth	r3, r3
 8005994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599c:	82fb      	strh	r3, [r7, #22]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	441a      	add	r2, r3
 80059ac:	8afb      	ldrh	r3, [r7, #22]
 80059ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059be:	b29b      	uxth	r3, r3
 80059c0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80059c2:	8b7b      	ldrh	r3, [r7, #26]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8087 	beq.w	8005ad8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6818      	ldr	r0, [r3, #0]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6959      	ldr	r1, [r3, #20]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	891a      	ldrh	r2, [r3, #8]
 80059d6:	8b7b      	ldrh	r3, [r7, #26]
 80059d8:	f004 f886 	bl	8009ae8 <USB_ReadPMA>
 80059dc:	e07c      	b.n	8005ad8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	461a      	mov	r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	4413      	add	r3, r2
 80059f2:	3306      	adds	r3, #6
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	6812      	ldr	r2, [r2, #0]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a06:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	699a      	ldr	r2, [r3, #24]
 8005a0c:	8b7b      	ldrh	r3, [r7, #26]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d306      	bcc.n	8005a20 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	699a      	ldr	r2, [r3, #24]
 8005a16:	8b7b      	ldrh	r3, [r7, #26]
 8005a18:	1ad2      	subs	r2, r2, r3
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	619a      	str	r2, [r3, #24]
 8005a1e:	e002      	b.n	8005a26 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2200      	movs	r2, #0
 8005a24:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d123      	bne.n	8005a76 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a48:	83fb      	strh	r3, [r7, #30]
 8005a4a:	8bfb      	ldrh	r3, [r7, #30]
 8005a4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a50:	83fb      	strh	r3, [r7, #30]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	441a      	add	r2, r3
 8005a60:	8bfb      	ldrh	r3, [r7, #30]
 8005a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005a76:	88fb      	ldrh	r3, [r7, #6]
 8005a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d11f      	bne.n	8005ac0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9a:	83bb      	strh	r3, [r7, #28]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	441a      	add	r2, r3
 8005aaa:	8bbb      	ldrh	r3, [r7, #28]
 8005aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005ac0:	8b7b      	ldrh	r3, [r7, #26]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d008      	beq.n	8005ad8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6818      	ldr	r0, [r3, #0]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	6959      	ldr	r1, [r3, #20]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	895a      	ldrh	r2, [r3, #10]
 8005ad2:	8b7b      	ldrh	r3, [r7, #26]
 8005ad4:	f004 f808 	bl	8009ae8 <USB_ReadPMA>
    }
  }

  return count;
 8005ad8:	8b7b      	ldrh	r3, [r7, #26]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3720      	adds	r7, #32
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b0a2      	sub	sp, #136	; 0x88
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	4613      	mov	r3, r2
 8005aee:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005af0:	88fb      	ldrh	r3, [r7, #6]
 8005af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 81c7 	beq.w	8005e8a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	461a      	mov	r2, r3
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	4413      	add	r3, r2
 8005b10:	3302      	adds	r3, #2
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	6812      	ldr	r2, [r2, #0]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d907      	bls.n	8005b44 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	699a      	ldr	r2, [r3, #24]
 8005b38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b3c:	1ad2      	subs	r2, r2, r3
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	619a      	str	r2, [r3, #24]
 8005b42:	e002      	b.n	8005b4a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2200      	movs	r2, #0
 8005b48:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f040 80b9 	bne.w	8005cc6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	785b      	ldrb	r3, [r3, #1]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d126      	bne.n	8005baa <HAL_PCD_EP_DB_Transmit+0xc8>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	4413      	add	r3, r2
 8005b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	011a      	lsls	r2, r3, #4
 8005b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b82:	627b      	str	r3, [r7, #36]	; 0x24
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	801a      	strh	r2, [r3, #0]
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	801a      	strh	r2, [r3, #0]
 8005ba8:	e01a      	b.n	8005be0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	785b      	ldrb	r3, [r3, #1]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d116      	bne.n	8005be0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	633b      	str	r3, [r7, #48]	; 0x30
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	4413      	add	r3, r2
 8005bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	011a      	lsls	r2, r3, #4
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bdc:	2200      	movs	r2, #0
 8005bde:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	623b      	str	r3, [r7, #32]
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	785b      	ldrb	r3, [r3, #1]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d126      	bne.n	8005c3c <HAL_PCD_EP_DB_Transmit+0x15a>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	61bb      	str	r3, [r7, #24]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	461a      	mov	r2, r3
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	4413      	add	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	011a      	lsls	r2, r3, #4
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	801a      	strh	r2, [r3, #0]
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	801a      	strh	r2, [r3, #0]
 8005c3a:	e017      	b.n	8005c6c <HAL_PCD_EP_DB_Transmit+0x18a>
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d113      	bne.n	8005c6c <HAL_PCD_EP_DB_Transmit+0x18a>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	461a      	mov	r2, r3
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	4413      	add	r3, r2
 8005c54:	623b      	str	r3, [r7, #32]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	011a      	lsls	r2, r3, #4
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c64:	61fb      	str	r3, [r7, #28]
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	4619      	mov	r1, r3
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f008 fec5 	bl	800ea02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c78:	88fb      	ldrh	r3, [r7, #6]
 8005c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 82d4 	beq.w	800622c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9e:	827b      	strh	r3, [r7, #18]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	441a      	add	r2, r3
 8005cae:	8a7b      	ldrh	r3, [r7, #18]
 8005cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	8013      	strh	r3, [r2, #0]
 8005cc4:	e2b2      	b.n	800622c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005cc6:	88fb      	ldrh	r3, [r7, #6]
 8005cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d021      	beq.n	8005d14 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	441a      	add	r2, r3
 8005cfc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	f040 8286 	bne.w	800622c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	695a      	ldr	r2, [r3, #20]
 8005d24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d28:	441a      	add	r2, r3
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	69da      	ldr	r2, [r3, #28]
 8005d32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d36:	441a      	add	r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	6a1a      	ldr	r2, [r3, #32]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d309      	bcc.n	8005d5c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	6a1a      	ldr	r2, [r3, #32]
 8005d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d54:	1ad2      	subs	r2, r2, r3
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	621a      	str	r2, [r3, #32]
 8005d5a:	e015      	b.n	8005d88 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d107      	bne.n	8005d74 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005d64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d68:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005d72:	e009      	b.n	8005d88 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2200      	movs	r2, #0
 8005d86:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	785b      	ldrb	r3, [r3, #1]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d155      	bne.n	8005e3c <HAL_PCD_EP_DB_Transmit+0x35a>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da4:	4413      	add	r3, r2
 8005da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	011a      	lsls	r2, r3, #4
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	4413      	add	r3, r2
 8005db2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005db6:	637b      	str	r3, [r7, #52]	; 0x34
 8005db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d112      	bne.n	8005de4 <HAL_PCD_EP_DB_Transmit+0x302>
 8005dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dcc:	801a      	strh	r2, [r3, #0]
 8005dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de0:	801a      	strh	r2, [r3, #0]
 8005de2:	e047      	b.n	8005e74 <HAL_PCD_EP_DB_Transmit+0x392>
 8005de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de6:	2b3e      	cmp	r3, #62	; 0x3e
 8005de8:	d811      	bhi.n	8005e0e <HAL_PCD_EP_DB_Transmit+0x32c>
 8005dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dec:	085b      	lsrs	r3, r3, #1
 8005dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8005df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	029b      	lsls	r3, r3, #10
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0a:	801a      	strh	r2, [r3, #0]
 8005e0c:	e032      	b.n	8005e74 <HAL_PCD_EP_DB_Transmit+0x392>
 8005e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e10:	095b      	lsrs	r3, r3, #5
 8005e12:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e16:	f003 031f 	and.w	r3, r3, #31
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d102      	bne.n	8005e24 <HAL_PCD_EP_DB_Transmit+0x342>
 8005e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e20:	3b01      	subs	r3, #1
 8005e22:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	029b      	lsls	r3, r3, #10
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e38:	801a      	strh	r2, [r3, #0]
 8005e3a:	e01b      	b.n	8005e74 <HAL_PCD_EP_DB_Transmit+0x392>
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	785b      	ldrb	r3, [r3, #1]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d117      	bne.n	8005e74 <HAL_PCD_EP_DB_Transmit+0x392>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	643b      	str	r3, [r7, #64]	; 0x40
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e58:	4413      	add	r3, r2
 8005e5a:	643b      	str	r3, [r7, #64]	; 0x40
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	011a      	lsls	r2, r3, #4
 8005e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e64:	4413      	add	r3, r2
 8005e66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e72:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6818      	ldr	r0, [r3, #0]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	6959      	ldr	r1, [r3, #20]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	891a      	ldrh	r2, [r3, #8]
 8005e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f003 fdeb 	bl	8009a5e <USB_WritePMA>
 8005e88:	e1d0      	b.n	800622c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	3306      	adds	r3, #6
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	699a      	ldr	r2, [r3, #24]
 8005eba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d307      	bcc.n	8005ed2 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	699a      	ldr	r2, [r3, #24]
 8005ec6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005eca:	1ad2      	subs	r2, r2, r3
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	619a      	str	r2, [r3, #24]
 8005ed0:	e002      	b.n	8005ed8 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f040 80c4 	bne.w	800606a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	785b      	ldrb	r3, [r3, #1]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d126      	bne.n	8005f38 <HAL_PCD_EP_DB_Transmit+0x456>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	461a      	mov	r2, r3
 8005efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efe:	4413      	add	r3, r2
 8005f00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	011a      	lsls	r2, r3, #4
 8005f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f10:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f20:	801a      	strh	r2, [r3, #0]
 8005f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f34:	801a      	strh	r2, [r3, #0]
 8005f36:	e01a      	b.n	8005f6e <HAL_PCD_EP_DB_Transmit+0x48c>
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	785b      	ldrb	r3, [r3, #1]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d116      	bne.n	8005f6e <HAL_PCD_EP_DB_Transmit+0x48c>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	677b      	str	r3, [r7, #116]	; 0x74
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f54:	4413      	add	r3, r2
 8005f56:	677b      	str	r3, [r7, #116]	; 0x74
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	011a      	lsls	r2, r3, #4
 8005f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f60:	4413      	add	r3, r2
 8005f62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f66:	673b      	str	r3, [r7, #112]	; 0x70
 8005f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	785b      	ldrb	r3, [r3, #1]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d12f      	bne.n	8005fdc <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f94:	4413      	add	r3, r2
 8005f96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	011a      	lsls	r2, r3, #4
 8005fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005faa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fc0:	801a      	strh	r2, [r3, #0]
 8005fc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fd8:	801a      	strh	r2, [r3, #0]
 8005fda:	e017      	b.n	800600c <HAL_PCD_EP_DB_Transmit+0x52a>
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	785b      	ldrb	r3, [r3, #1]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d113      	bne.n	800600c <HAL_PCD_EP_DB_Transmit+0x52a>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	461a      	mov	r2, r3
 8005ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ff2:	4413      	add	r3, r2
 8005ff4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	011a      	lsls	r2, r3, #4
 8005ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ffe:	4413      	add	r3, r2
 8006000:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006004:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006006:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006008:	2200      	movs	r2, #0
 800600a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	4619      	mov	r1, r3
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f008 fcf5 	bl	800ea02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006018:	88fb      	ldrh	r3, [r7, #6]
 800601a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800601e:	2b00      	cmp	r3, #0
 8006020:	f040 8104 	bne.w	800622c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	461a      	mov	r2, r3
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	b29b      	uxth	r3, r3
 8006036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	441a      	add	r2, r3
 8006050:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006064:	b29b      	uxth	r3, r3
 8006066:	8013      	strh	r3, [r2, #0]
 8006068:	e0e0      	b.n	800622c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800606a:	88fb      	ldrh	r3, [r7, #6]
 800606c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d121      	bne.n	80060b8 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	461a      	mov	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800608a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	441a      	add	r2, r3
 80060a0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80060a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060be:	2b01      	cmp	r3, #1
 80060c0:	f040 80b4 	bne.w	800622c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	695a      	ldr	r2, [r3, #20]
 80060c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80060cc:	441a      	add	r2, r3
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	69da      	ldr	r2, [r3, #28]
 80060d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80060da:	441a      	add	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	6a1a      	ldr	r2, [r3, #32]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d309      	bcc.n	8006100 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	6a1a      	ldr	r2, [r3, #32]
 80060f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f8:	1ad2      	subs	r2, r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	621a      	str	r2, [r3, #32]
 80060fe:	e015      	b.n	800612c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d107      	bne.n	8006118 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8006108:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800610c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006116:	e009      	b.n	800612c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2200      	movs	r2, #0
 8006122:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	667b      	str	r3, [r7, #100]	; 0x64
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	785b      	ldrb	r3, [r3, #1]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d155      	bne.n	80061e6 <HAL_PCD_EP_DB_Transmit+0x704>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006148:	b29b      	uxth	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800614e:	4413      	add	r3, r2
 8006150:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	011a      	lsls	r2, r3, #4
 8006158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800615a:	4413      	add	r3, r2
 800615c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006160:	65bb      	str	r3, [r7, #88]	; 0x58
 8006162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006164:	2b00      	cmp	r3, #0
 8006166:	d112      	bne.n	800618e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006168:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	b29b      	uxth	r3, r3
 800616e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006172:	b29a      	uxth	r2, r3
 8006174:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006176:	801a      	strh	r2, [r3, #0]
 8006178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	b29b      	uxth	r3, r3
 800617e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006186:	b29a      	uxth	r2, r3
 8006188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800618a:	801a      	strh	r2, [r3, #0]
 800618c:	e044      	b.n	8006218 <HAL_PCD_EP_DB_Transmit+0x736>
 800618e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006190:	2b3e      	cmp	r3, #62	; 0x3e
 8006192:	d811      	bhi.n	80061b8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006196:	085b      	lsrs	r3, r3, #1
 8006198:	657b      	str	r3, [r7, #84]	; 0x54
 800619a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <HAL_PCD_EP_DB_Transmit+0x6c8>
 80061a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061a6:	3301      	adds	r3, #1
 80061a8:	657b      	str	r3, [r7, #84]	; 0x54
 80061aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	029b      	lsls	r3, r3, #10
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	e02f      	b.n	8006218 <HAL_PCD_EP_DB_Transmit+0x736>
 80061b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	657b      	str	r3, [r7, #84]	; 0x54
 80061be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c0:	f003 031f 	and.w	r3, r3, #31
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d102      	bne.n	80061ce <HAL_PCD_EP_DB_Transmit+0x6ec>
 80061c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ca:	3b01      	subs	r3, #1
 80061cc:	657b      	str	r3, [r7, #84]	; 0x54
 80061ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	029b      	lsls	r3, r3, #10
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061de:	b29a      	uxth	r2, r3
 80061e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061e2:	801a      	strh	r2, [r3, #0]
 80061e4:	e018      	b.n	8006218 <HAL_PCD_EP_DB_Transmit+0x736>
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	785b      	ldrb	r3, [r3, #1]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d114      	bne.n	8006218 <HAL_PCD_EP_DB_Transmit+0x736>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	461a      	mov	r2, r3
 80061fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061fc:	4413      	add	r3, r2
 80061fe:	667b      	str	r3, [r7, #100]	; 0x64
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	011a      	lsls	r2, r3, #4
 8006206:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006208:	4413      	add	r3, r2
 800620a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800620e:	663b      	str	r3, [r7, #96]	; 0x60
 8006210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006212:	b29a      	uxth	r2, r3
 8006214:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006216:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	6959      	ldr	r1, [r3, #20]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	895a      	ldrh	r2, [r3, #10]
 8006224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006226:	b29b      	uxth	r3, r3
 8006228:	f003 fc19 	bl	8009a5e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	461a      	mov	r2, r3
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b29b      	uxth	r3, r3
 800623e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006246:	823b      	strh	r3, [r7, #16]
 8006248:	8a3b      	ldrh	r3, [r7, #16]
 800624a:	f083 0310 	eor.w	r3, r3, #16
 800624e:	823b      	strh	r3, [r7, #16]
 8006250:	8a3b      	ldrh	r3, [r7, #16]
 8006252:	f083 0320 	eor.w	r3, r3, #32
 8006256:	823b      	strh	r3, [r7, #16]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	461a      	mov	r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	441a      	add	r2, r3
 8006266:	8a3b      	ldrh	r3, [r7, #16]
 8006268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006278:	b29b      	uxth	r3, r3
 800627a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3788      	adds	r7, #136	; 0x88
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006286:	b480      	push	{r7}
 8006288:	b087      	sub	sp, #28
 800628a:	af00      	add	r7, sp, #0
 800628c:	60f8      	str	r0, [r7, #12]
 800628e:	607b      	str	r3, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	817b      	strh	r3, [r7, #10]
 8006294:	4613      	mov	r3, r2
 8006296:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006298:	897b      	ldrh	r3, [r7, #10]
 800629a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629e:	b29b      	uxth	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00b      	beq.n	80062bc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062a4:	897b      	ldrh	r3, [r7, #10]
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	1c5a      	adds	r2, r3, #1
 80062ac:	4613      	mov	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4413      	add	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]
 80062ba:	e009      	b.n	80062d0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80062bc:	897a      	ldrh	r2, [r7, #10]
 80062be:	4613      	mov	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	00db      	lsls	r3, r3, #3
 80062c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4413      	add	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80062d0:	893b      	ldrh	r3, [r7, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d107      	bne.n	80062e6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2200      	movs	r2, #0
 80062da:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	b29a      	uxth	r2, r3
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	80da      	strh	r2, [r3, #6]
 80062e4:	e00b      	b.n	80062fe <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2201      	movs	r2, #1
 80062ea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	0c1b      	lsrs	r3, r3, #16
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	bc80      	pop	{r7}
 8006308:	4770      	bx	lr
	...

0800630c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e26c      	b.n	80067f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 8087 	beq.w	800643a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800632c:	4b92      	ldr	r3, [pc, #584]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f003 030c 	and.w	r3, r3, #12
 8006334:	2b04      	cmp	r3, #4
 8006336:	d00c      	beq.n	8006352 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006338:	4b8f      	ldr	r3, [pc, #572]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f003 030c 	and.w	r3, r3, #12
 8006340:	2b08      	cmp	r3, #8
 8006342:	d112      	bne.n	800636a <HAL_RCC_OscConfig+0x5e>
 8006344:	4b8c      	ldr	r3, [pc, #560]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800634c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006350:	d10b      	bne.n	800636a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006352:	4b89      	ldr	r3, [pc, #548]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d06c      	beq.n	8006438 <HAL_RCC_OscConfig+0x12c>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d168      	bne.n	8006438 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e246      	b.n	80067f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006372:	d106      	bne.n	8006382 <HAL_RCC_OscConfig+0x76>
 8006374:	4b80      	ldr	r3, [pc, #512]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a7f      	ldr	r2, [pc, #508]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 800637a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	e02e      	b.n	80063e0 <HAL_RCC_OscConfig+0xd4>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10c      	bne.n	80063a4 <HAL_RCC_OscConfig+0x98>
 800638a:	4b7b      	ldr	r3, [pc, #492]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a7a      	ldr	r2, [pc, #488]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 8006390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	4b78      	ldr	r3, [pc, #480]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a77      	ldr	r2, [pc, #476]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 800639c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	e01d      	b.n	80063e0 <HAL_RCC_OscConfig+0xd4>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063ac:	d10c      	bne.n	80063c8 <HAL_RCC_OscConfig+0xbc>
 80063ae:	4b72      	ldr	r3, [pc, #456]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a71      	ldr	r2, [pc, #452]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 80063b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	4b6f      	ldr	r3, [pc, #444]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a6e      	ldr	r2, [pc, #440]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 80063c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	e00b      	b.n	80063e0 <HAL_RCC_OscConfig+0xd4>
 80063c8:	4b6b      	ldr	r3, [pc, #428]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a6a      	ldr	r2, [pc, #424]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 80063ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	4b68      	ldr	r3, [pc, #416]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a67      	ldr	r2, [pc, #412]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 80063da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d013      	beq.n	8006410 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e8:	f7fc fff2 	bl	80033d0 <HAL_GetTick>
 80063ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063f0:	f7fc ffee 	bl	80033d0 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b64      	cmp	r3, #100	; 0x64
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e1fa      	b.n	80067f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006402:	4b5d      	ldr	r3, [pc, #372]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0f0      	beq.n	80063f0 <HAL_RCC_OscConfig+0xe4>
 800640e:	e014      	b.n	800643a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006410:	f7fc ffde 	bl	80033d0 <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006418:	f7fc ffda 	bl	80033d0 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b64      	cmp	r3, #100	; 0x64
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e1e6      	b.n	80067f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800642a:	4b53      	ldr	r3, [pc, #332]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1f0      	bne.n	8006418 <HAL_RCC_OscConfig+0x10c>
 8006436:	e000      	b.n	800643a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d063      	beq.n	800650e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006446:	4b4c      	ldr	r3, [pc, #304]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f003 030c 	and.w	r3, r3, #12
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00b      	beq.n	800646a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006452:	4b49      	ldr	r3, [pc, #292]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f003 030c 	and.w	r3, r3, #12
 800645a:	2b08      	cmp	r3, #8
 800645c:	d11c      	bne.n	8006498 <HAL_RCC_OscConfig+0x18c>
 800645e:	4b46      	ldr	r3, [pc, #280]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d116      	bne.n	8006498 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800646a:	4b43      	ldr	r3, [pc, #268]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d005      	beq.n	8006482 <HAL_RCC_OscConfig+0x176>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d001      	beq.n	8006482 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e1ba      	b.n	80067f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006482:	4b3d      	ldr	r3, [pc, #244]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	4939      	ldr	r1, [pc, #228]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 8006492:	4313      	orrs	r3, r2
 8006494:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006496:	e03a      	b.n	800650e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d020      	beq.n	80064e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064a0:	4b36      	ldr	r3, [pc, #216]	; (800657c <HAL_RCC_OscConfig+0x270>)
 80064a2:	2201      	movs	r2, #1
 80064a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064a6:	f7fc ff93 	bl	80033d0 <HAL_GetTick>
 80064aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ac:	e008      	b.n	80064c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064ae:	f7fc ff8f 	bl	80033d0 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d901      	bls.n	80064c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e19b      	b.n	80067f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c0:	4b2d      	ldr	r3, [pc, #180]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0f0      	beq.n	80064ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064cc:	4b2a      	ldr	r3, [pc, #168]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	4927      	ldr	r1, [pc, #156]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	600b      	str	r3, [r1, #0]
 80064e0:	e015      	b.n	800650e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064e2:	4b26      	ldr	r3, [pc, #152]	; (800657c <HAL_RCC_OscConfig+0x270>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e8:	f7fc ff72 	bl	80033d0 <HAL_GetTick>
 80064ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064f0:	f7fc ff6e 	bl	80033d0 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e17a      	b.n	80067f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006502:	4b1d      	ldr	r3, [pc, #116]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1f0      	bne.n	80064f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0308 	and.w	r3, r3, #8
 8006516:	2b00      	cmp	r3, #0
 8006518:	d03a      	beq.n	8006590 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d019      	beq.n	8006556 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006522:	4b17      	ldr	r3, [pc, #92]	; (8006580 <HAL_RCC_OscConfig+0x274>)
 8006524:	2201      	movs	r2, #1
 8006526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006528:	f7fc ff52 	bl	80033d0 <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006530:	f7fc ff4e 	bl	80033d0 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e15a      	b.n	80067f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006542:	4b0d      	ldr	r3, [pc, #52]	; (8006578 <HAL_RCC_OscConfig+0x26c>)
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0f0      	beq.n	8006530 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800654e:	2001      	movs	r0, #1
 8006550:	f000 fb0a 	bl	8006b68 <RCC_Delay>
 8006554:	e01c      	b.n	8006590 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006556:	4b0a      	ldr	r3, [pc, #40]	; (8006580 <HAL_RCC_OscConfig+0x274>)
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800655c:	f7fc ff38 	bl	80033d0 <HAL_GetTick>
 8006560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006562:	e00f      	b.n	8006584 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006564:	f7fc ff34 	bl	80033d0 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	2b02      	cmp	r3, #2
 8006570:	d908      	bls.n	8006584 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e140      	b.n	80067f8 <HAL_RCC_OscConfig+0x4ec>
 8006576:	bf00      	nop
 8006578:	40021000 	.word	0x40021000
 800657c:	42420000 	.word	0x42420000
 8006580:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006584:	4b9e      	ldr	r3, [pc, #632]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1e9      	bne.n	8006564 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0304 	and.w	r3, r3, #4
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 80a6 	beq.w	80066ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800659e:	2300      	movs	r3, #0
 80065a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065a2:	4b97      	ldr	r3, [pc, #604]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10d      	bne.n	80065ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ae:	4b94      	ldr	r3, [pc, #592]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	4a93      	ldr	r2, [pc, #588]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 80065b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065b8:	61d3      	str	r3, [r2, #28]
 80065ba:	4b91      	ldr	r3, [pc, #580]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c2:	60bb      	str	r3, [r7, #8]
 80065c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065c6:	2301      	movs	r3, #1
 80065c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ca:	4b8e      	ldr	r3, [pc, #568]	; (8006804 <HAL_RCC_OscConfig+0x4f8>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d118      	bne.n	8006608 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065d6:	4b8b      	ldr	r3, [pc, #556]	; (8006804 <HAL_RCC_OscConfig+0x4f8>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a8a      	ldr	r2, [pc, #552]	; (8006804 <HAL_RCC_OscConfig+0x4f8>)
 80065dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065e2:	f7fc fef5 	bl	80033d0 <HAL_GetTick>
 80065e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e8:	e008      	b.n	80065fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ea:	f7fc fef1 	bl	80033d0 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b64      	cmp	r3, #100	; 0x64
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e0fd      	b.n	80067f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fc:	4b81      	ldr	r3, [pc, #516]	; (8006804 <HAL_RCC_OscConfig+0x4f8>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f0      	beq.n	80065ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d106      	bne.n	800661e <HAL_RCC_OscConfig+0x312>
 8006610:	4b7b      	ldr	r3, [pc, #492]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	4a7a      	ldr	r2, [pc, #488]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 8006616:	f043 0301 	orr.w	r3, r3, #1
 800661a:	6213      	str	r3, [r2, #32]
 800661c:	e02d      	b.n	800667a <HAL_RCC_OscConfig+0x36e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10c      	bne.n	8006640 <HAL_RCC_OscConfig+0x334>
 8006626:	4b76      	ldr	r3, [pc, #472]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	4a75      	ldr	r2, [pc, #468]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 800662c:	f023 0301 	bic.w	r3, r3, #1
 8006630:	6213      	str	r3, [r2, #32]
 8006632:	4b73      	ldr	r3, [pc, #460]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	4a72      	ldr	r2, [pc, #456]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 8006638:	f023 0304 	bic.w	r3, r3, #4
 800663c:	6213      	str	r3, [r2, #32]
 800663e:	e01c      	b.n	800667a <HAL_RCC_OscConfig+0x36e>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	2b05      	cmp	r3, #5
 8006646:	d10c      	bne.n	8006662 <HAL_RCC_OscConfig+0x356>
 8006648:	4b6d      	ldr	r3, [pc, #436]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	4a6c      	ldr	r2, [pc, #432]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 800664e:	f043 0304 	orr.w	r3, r3, #4
 8006652:	6213      	str	r3, [r2, #32]
 8006654:	4b6a      	ldr	r3, [pc, #424]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	4a69      	ldr	r2, [pc, #420]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 800665a:	f043 0301 	orr.w	r3, r3, #1
 800665e:	6213      	str	r3, [r2, #32]
 8006660:	e00b      	b.n	800667a <HAL_RCC_OscConfig+0x36e>
 8006662:	4b67      	ldr	r3, [pc, #412]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	4a66      	ldr	r2, [pc, #408]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 8006668:	f023 0301 	bic.w	r3, r3, #1
 800666c:	6213      	str	r3, [r2, #32]
 800666e:	4b64      	ldr	r3, [pc, #400]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	4a63      	ldr	r2, [pc, #396]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 8006674:	f023 0304 	bic.w	r3, r3, #4
 8006678:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d015      	beq.n	80066ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006682:	f7fc fea5 	bl	80033d0 <HAL_GetTick>
 8006686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006688:	e00a      	b.n	80066a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800668a:	f7fc fea1 	bl	80033d0 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	f241 3288 	movw	r2, #5000	; 0x1388
 8006698:	4293      	cmp	r3, r2
 800669a:	d901      	bls.n	80066a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e0ab      	b.n	80067f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a0:	4b57      	ldr	r3, [pc, #348]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0ee      	beq.n	800668a <HAL_RCC_OscConfig+0x37e>
 80066ac:	e014      	b.n	80066d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066ae:	f7fc fe8f 	bl	80033d0 <HAL_GetTick>
 80066b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066b4:	e00a      	b.n	80066cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066b6:	f7fc fe8b 	bl	80033d0 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e095      	b.n	80067f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066cc:	4b4c      	ldr	r3, [pc, #304]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1ee      	bne.n	80066b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d105      	bne.n	80066ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066de:	4b48      	ldr	r3, [pc, #288]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	4a47      	ldr	r2, [pc, #284]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 80066e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 8081 	beq.w	80067f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066f4:	4b42      	ldr	r3, [pc, #264]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f003 030c 	and.w	r3, r3, #12
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	d061      	beq.n	80067c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	2b02      	cmp	r3, #2
 8006706:	d146      	bne.n	8006796 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006708:	4b3f      	ldr	r3, [pc, #252]	; (8006808 <HAL_RCC_OscConfig+0x4fc>)
 800670a:	2200      	movs	r2, #0
 800670c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800670e:	f7fc fe5f 	bl	80033d0 <HAL_GetTick>
 8006712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006714:	e008      	b.n	8006728 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006716:	f7fc fe5b 	bl	80033d0 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e067      	b.n	80067f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006728:	4b35      	ldr	r3, [pc, #212]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1f0      	bne.n	8006716 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800673c:	d108      	bne.n	8006750 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800673e:	4b30      	ldr	r3, [pc, #192]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	492d      	ldr	r1, [pc, #180]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 800674c:	4313      	orrs	r3, r2
 800674e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006750:	4b2b      	ldr	r3, [pc, #172]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a19      	ldr	r1, [r3, #32]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	430b      	orrs	r3, r1
 8006762:	4927      	ldr	r1, [pc, #156]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 8006764:	4313      	orrs	r3, r2
 8006766:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006768:	4b27      	ldr	r3, [pc, #156]	; (8006808 <HAL_RCC_OscConfig+0x4fc>)
 800676a:	2201      	movs	r2, #1
 800676c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800676e:	f7fc fe2f 	bl	80033d0 <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006774:	e008      	b.n	8006788 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006776:	f7fc fe2b 	bl	80033d0 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e037      	b.n	80067f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006788:	4b1d      	ldr	r3, [pc, #116]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0f0      	beq.n	8006776 <HAL_RCC_OscConfig+0x46a>
 8006794:	e02f      	b.n	80067f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006796:	4b1c      	ldr	r3, [pc, #112]	; (8006808 <HAL_RCC_OscConfig+0x4fc>)
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800679c:	f7fc fe18 	bl	80033d0 <HAL_GetTick>
 80067a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067a2:	e008      	b.n	80067b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067a4:	f7fc fe14 	bl	80033d0 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d901      	bls.n	80067b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e020      	b.n	80067f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067b6:	4b12      	ldr	r3, [pc, #72]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1f0      	bne.n	80067a4 <HAL_RCC_OscConfig+0x498>
 80067c2:	e018      	b.n	80067f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d101      	bne.n	80067d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e013      	b.n	80067f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80067d0:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <HAL_RCC_OscConfig+0x4f4>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d106      	bne.n	80067f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d001      	beq.n	80067f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e000      	b.n	80067f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40021000 	.word	0x40021000
 8006804:	40007000 	.word	0x40007000
 8006808:	42420060 	.word	0x42420060

0800680c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e0d0      	b.n	80069c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006820:	4b6a      	ldr	r3, [pc, #424]	; (80069cc <HAL_RCC_ClockConfig+0x1c0>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d910      	bls.n	8006850 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800682e:	4b67      	ldr	r3, [pc, #412]	; (80069cc <HAL_RCC_ClockConfig+0x1c0>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f023 0207 	bic.w	r2, r3, #7
 8006836:	4965      	ldr	r1, [pc, #404]	; (80069cc <HAL_RCC_ClockConfig+0x1c0>)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	4313      	orrs	r3, r2
 800683c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800683e:	4b63      	ldr	r3, [pc, #396]	; (80069cc <HAL_RCC_ClockConfig+0x1c0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	429a      	cmp	r2, r3
 800684a:	d001      	beq.n	8006850 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e0b8      	b.n	80069c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d020      	beq.n	800689e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b00      	cmp	r3, #0
 8006866:	d005      	beq.n	8006874 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006868:	4b59      	ldr	r3, [pc, #356]	; (80069d0 <HAL_RCC_ClockConfig+0x1c4>)
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	4a58      	ldr	r2, [pc, #352]	; (80069d0 <HAL_RCC_ClockConfig+0x1c4>)
 800686e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006872:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0308 	and.w	r3, r3, #8
 800687c:	2b00      	cmp	r3, #0
 800687e:	d005      	beq.n	800688c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006880:	4b53      	ldr	r3, [pc, #332]	; (80069d0 <HAL_RCC_ClockConfig+0x1c4>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	4a52      	ldr	r2, [pc, #328]	; (80069d0 <HAL_RCC_ClockConfig+0x1c4>)
 8006886:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800688a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800688c:	4b50      	ldr	r3, [pc, #320]	; (80069d0 <HAL_RCC_ClockConfig+0x1c4>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	494d      	ldr	r1, [pc, #308]	; (80069d0 <HAL_RCC_ClockConfig+0x1c4>)
 800689a:	4313      	orrs	r3, r2
 800689c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d040      	beq.n	800692c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d107      	bne.n	80068c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068b2:	4b47      	ldr	r3, [pc, #284]	; (80069d0 <HAL_RCC_ClockConfig+0x1c4>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d115      	bne.n	80068ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e07f      	b.n	80069c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d107      	bne.n	80068da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ca:	4b41      	ldr	r3, [pc, #260]	; (80069d0 <HAL_RCC_ClockConfig+0x1c4>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d109      	bne.n	80068ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e073      	b.n	80069c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068da:	4b3d      	ldr	r3, [pc, #244]	; (80069d0 <HAL_RCC_ClockConfig+0x1c4>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e06b      	b.n	80069c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068ea:	4b39      	ldr	r3, [pc, #228]	; (80069d0 <HAL_RCC_ClockConfig+0x1c4>)
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f023 0203 	bic.w	r2, r3, #3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	4936      	ldr	r1, [pc, #216]	; (80069d0 <HAL_RCC_ClockConfig+0x1c4>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068fc:	f7fc fd68 	bl	80033d0 <HAL_GetTick>
 8006900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006902:	e00a      	b.n	800691a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006904:	f7fc fd64 	bl	80033d0 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006912:	4293      	cmp	r3, r2
 8006914:	d901      	bls.n	800691a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e053      	b.n	80069c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800691a:	4b2d      	ldr	r3, [pc, #180]	; (80069d0 <HAL_RCC_ClockConfig+0x1c4>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f003 020c 	and.w	r2, r3, #12
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	429a      	cmp	r2, r3
 800692a:	d1eb      	bne.n	8006904 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800692c:	4b27      	ldr	r3, [pc, #156]	; (80069cc <HAL_RCC_ClockConfig+0x1c0>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0307 	and.w	r3, r3, #7
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	429a      	cmp	r2, r3
 8006938:	d210      	bcs.n	800695c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800693a:	4b24      	ldr	r3, [pc, #144]	; (80069cc <HAL_RCC_ClockConfig+0x1c0>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f023 0207 	bic.w	r2, r3, #7
 8006942:	4922      	ldr	r1, [pc, #136]	; (80069cc <HAL_RCC_ClockConfig+0x1c0>)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	4313      	orrs	r3, r2
 8006948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800694a:	4b20      	ldr	r3, [pc, #128]	; (80069cc <HAL_RCC_ClockConfig+0x1c0>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	d001      	beq.n	800695c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e032      	b.n	80069c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	2b00      	cmp	r3, #0
 8006966:	d008      	beq.n	800697a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006968:	4b19      	ldr	r3, [pc, #100]	; (80069d0 <HAL_RCC_ClockConfig+0x1c4>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	4916      	ldr	r1, [pc, #88]	; (80069d0 <HAL_RCC_ClockConfig+0x1c4>)
 8006976:	4313      	orrs	r3, r2
 8006978:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0308 	and.w	r3, r3, #8
 8006982:	2b00      	cmp	r3, #0
 8006984:	d009      	beq.n	800699a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006986:	4b12      	ldr	r3, [pc, #72]	; (80069d0 <HAL_RCC_ClockConfig+0x1c4>)
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	490e      	ldr	r1, [pc, #56]	; (80069d0 <HAL_RCC_ClockConfig+0x1c4>)
 8006996:	4313      	orrs	r3, r2
 8006998:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800699a:	f000 f821 	bl	80069e0 <HAL_RCC_GetSysClockFreq>
 800699e:	4602      	mov	r2, r0
 80069a0:	4b0b      	ldr	r3, [pc, #44]	; (80069d0 <HAL_RCC_ClockConfig+0x1c4>)
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	091b      	lsrs	r3, r3, #4
 80069a6:	f003 030f 	and.w	r3, r3, #15
 80069aa:	490a      	ldr	r1, [pc, #40]	; (80069d4 <HAL_RCC_ClockConfig+0x1c8>)
 80069ac:	5ccb      	ldrb	r3, [r1, r3]
 80069ae:	fa22 f303 	lsr.w	r3, r2, r3
 80069b2:	4a09      	ldr	r2, [pc, #36]	; (80069d8 <HAL_RCC_ClockConfig+0x1cc>)
 80069b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80069b6:	4b09      	ldr	r3, [pc, #36]	; (80069dc <HAL_RCC_ClockConfig+0x1d0>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fc fbc2 	bl	8003144 <HAL_InitTick>

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	40022000 	.word	0x40022000
 80069d0:	40021000 	.word	0x40021000
 80069d4:	0800f6c8 	.word	0x0800f6c8
 80069d8:	20000010 	.word	0x20000010
 80069dc:	20000014 	.word	0x20000014

080069e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069e0:	b490      	push	{r4, r7}
 80069e2:	b08a      	sub	sp, #40	; 0x28
 80069e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80069e6:	4b2a      	ldr	r3, [pc, #168]	; (8006a90 <HAL_RCC_GetSysClockFreq+0xb0>)
 80069e8:	1d3c      	adds	r4, r7, #4
 80069ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80069f0:	f240 2301 	movw	r3, #513	; 0x201
 80069f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	61fb      	str	r3, [r7, #28]
 80069fa:	2300      	movs	r3, #0
 80069fc:	61bb      	str	r3, [r7, #24]
 80069fe:	2300      	movs	r3, #0
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
 8006a02:	2300      	movs	r3, #0
 8006a04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a0a:	4b22      	ldr	r3, [pc, #136]	; (8006a94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f003 030c 	and.w	r3, r3, #12
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	d002      	beq.n	8006a20 <HAL_RCC_GetSysClockFreq+0x40>
 8006a1a:	2b08      	cmp	r3, #8
 8006a1c:	d003      	beq.n	8006a26 <HAL_RCC_GetSysClockFreq+0x46>
 8006a1e:	e02d      	b.n	8006a7c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a20:	4b1d      	ldr	r3, [pc, #116]	; (8006a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a22:	623b      	str	r3, [r7, #32]
      break;
 8006a24:	e02d      	b.n	8006a82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	0c9b      	lsrs	r3, r3, #18
 8006a2a:	f003 030f 	and.w	r3, r3, #15
 8006a2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006a32:	4413      	add	r3, r2
 8006a34:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006a38:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d013      	beq.n	8006a6c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a44:	4b13      	ldr	r3, [pc, #76]	; (8006a94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	0c5b      	lsrs	r3, r3, #17
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006a52:	4413      	add	r3, r2
 8006a54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006a58:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	4a0e      	ldr	r2, [pc, #56]	; (8006a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a5e:	fb02 f203 	mul.w	r2, r2, r3
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
 8006a6a:	e004      	b.n	8006a76 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	4a0b      	ldr	r2, [pc, #44]	; (8006a9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a70:	fb02 f303 	mul.w	r3, r2, r3
 8006a74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	623b      	str	r3, [r7, #32]
      break;
 8006a7a:	e002      	b.n	8006a82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006a7c:	4b08      	ldr	r3, [pc, #32]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a7e:	623b      	str	r3, [r7, #32]
      break;
 8006a80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a82:	6a3b      	ldr	r3, [r7, #32]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3728      	adds	r7, #40	; 0x28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bc90      	pop	{r4, r7}
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	0800f190 	.word	0x0800f190
 8006a94:	40021000 	.word	0x40021000
 8006a98:	00f42400 	.word	0x00f42400
 8006a9c:	003d0900 	.word	0x003d0900
 8006aa0:	007a1200 	.word	0x007a1200

08006aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006aa8:	4b02      	ldr	r3, [pc, #8]	; (8006ab4 <HAL_RCC_GetHCLKFreq+0x10>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc80      	pop	{r7}
 8006ab2:	4770      	bx	lr
 8006ab4:	20000010 	.word	0x20000010

08006ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006abc:	f7ff fff2 	bl	8006aa4 <HAL_RCC_GetHCLKFreq>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	0a1b      	lsrs	r3, r3, #8
 8006ac8:	f003 0307 	and.w	r3, r3, #7
 8006acc:	4903      	ldr	r1, [pc, #12]	; (8006adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ace:	5ccb      	ldrb	r3, [r1, r3]
 8006ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	40021000 	.word	0x40021000
 8006adc:	0800f6d8 	.word	0x0800f6d8

08006ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ae4:	f7ff ffde 	bl	8006aa4 <HAL_RCC_GetHCLKFreq>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	0adb      	lsrs	r3, r3, #11
 8006af0:	f003 0307 	and.w	r3, r3, #7
 8006af4:	4903      	ldr	r1, [pc, #12]	; (8006b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006af6:	5ccb      	ldrb	r3, [r1, r3]
 8006af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40021000 	.word	0x40021000
 8006b04:	0800f6d8 	.word	0x0800f6d8

08006b08 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	220f      	movs	r2, #15
 8006b16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006b18:	4b11      	ldr	r3, [pc, #68]	; (8006b60 <HAL_RCC_GetClockConfig+0x58>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f003 0203 	and.w	r2, r3, #3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006b24:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <HAL_RCC_GetClockConfig+0x58>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006b30:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <HAL_RCC_GetClockConfig+0x58>)
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006b3c:	4b08      	ldr	r3, [pc, #32]	; (8006b60 <HAL_RCC_GetClockConfig+0x58>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	08db      	lsrs	r3, r3, #3
 8006b42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006b4a:	4b06      	ldr	r3, [pc, #24]	; (8006b64 <HAL_RCC_GetClockConfig+0x5c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0207 	and.w	r2, r3, #7
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bc80      	pop	{r7}
 8006b5e:	4770      	bx	lr
 8006b60:	40021000 	.word	0x40021000
 8006b64:	40022000 	.word	0x40022000

08006b68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b70:	4b0a      	ldr	r3, [pc, #40]	; (8006b9c <RCC_Delay+0x34>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a0a      	ldr	r2, [pc, #40]	; (8006ba0 <RCC_Delay+0x38>)
 8006b76:	fba2 2303 	umull	r2, r3, r2, r3
 8006b7a:	0a5b      	lsrs	r3, r3, #9
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	fb02 f303 	mul.w	r3, r2, r3
 8006b82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b84:	bf00      	nop
  }
  while (Delay --);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	1e5a      	subs	r2, r3, #1
 8006b8a:	60fa      	str	r2, [r7, #12]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1f9      	bne.n	8006b84 <RCC_Delay+0x1c>
}
 8006b90:	bf00      	nop
 8006b92:	bf00      	nop
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bc80      	pop	{r7}
 8006b9a:	4770      	bx	lr
 8006b9c:	20000010 	.word	0x20000010
 8006ba0:	10624dd3 	.word	0x10624dd3

08006ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	613b      	str	r3, [r7, #16]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d07d      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bc4:	4b4f      	ldr	r3, [pc, #316]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10d      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bd0:	4b4c      	ldr	r3, [pc, #304]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	4a4b      	ldr	r2, [pc, #300]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bda:	61d3      	str	r3, [r2, #28]
 8006bdc:	4b49      	ldr	r3, [pc, #292]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be4:	60bb      	str	r3, [r7, #8]
 8006be6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006be8:	2301      	movs	r3, #1
 8006bea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bec:	4b46      	ldr	r3, [pc, #280]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d118      	bne.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bf8:	4b43      	ldr	r3, [pc, #268]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a42      	ldr	r2, [pc, #264]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c04:	f7fc fbe4 	bl	80033d0 <HAL_GetTick>
 8006c08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c0a:	e008      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c0c:	f7fc fbe0 	bl	80033d0 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b64      	cmp	r3, #100	; 0x64
 8006c18:	d901      	bls.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e06d      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c1e:	4b3a      	ldr	r3, [pc, #232]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0f0      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c2a:	4b36      	ldr	r3, [pc, #216]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d02e      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d027      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c48:	4b2e      	ldr	r3, [pc, #184]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c52:	4b2e      	ldr	r3, [pc, #184]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c54:	2201      	movs	r2, #1
 8006c56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c58:	4b2c      	ldr	r3, [pc, #176]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c5e:	4a29      	ldr	r2, [pc, #164]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d014      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c6e:	f7fc fbaf 	bl	80033d0 <HAL_GetTick>
 8006c72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c74:	e00a      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c76:	f7fc fbab 	bl	80033d0 <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d901      	bls.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e036      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c8c:	4b1d      	ldr	r3, [pc, #116]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d0ee      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c98:	4b1a      	ldr	r3, [pc, #104]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c9a:	6a1b      	ldr	r3, [r3, #32]
 8006c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	4917      	ldr	r1, [pc, #92]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d105      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cb0:	4b14      	ldr	r3, [pc, #80]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cb2:	69db      	ldr	r3, [r3, #28]
 8006cb4:	4a13      	ldr	r2, [pc, #76]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d008      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cc8:	4b0e      	ldr	r3, [pc, #56]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	490b      	ldr	r1, [pc, #44]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0310 	and.w	r3, r3, #16
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d008      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ce6:	4b07      	ldr	r3, [pc, #28]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	4904      	ldr	r1, [pc, #16]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40021000 	.word	0x40021000
 8006d08:	40007000 	.word	0x40007000
 8006d0c:	42420440 	.word	0x42420440

08006d10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e076      	b.n	8006e10 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d108      	bne.n	8006d3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d32:	d009      	beq.n	8006d48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	61da      	str	r2, [r3, #28]
 8006d3a:	e005      	b.n	8006d48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d106      	bne.n	8006d68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7fc f96a 	bl	800303c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d90:	431a      	orrs	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	431a      	orrs	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	431a      	orrs	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006db8:	431a      	orrs	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dcc:	ea42 0103 	orr.w	r1, r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	0c1a      	lsrs	r2, r3, #16
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f002 0204 	and.w	r2, r2, #4
 8006dee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	69da      	ldr	r2, [r3, #28]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dfe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b088      	sub	sp, #32
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	603b      	str	r3, [r7, #0]
 8006e24:	4613      	mov	r3, r2
 8006e26:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d101      	bne.n	8006e3a <HAL_SPI_Transmit+0x22>
 8006e36:	2302      	movs	r3, #2
 8006e38:	e126      	b.n	8007088 <HAL_SPI_Transmit+0x270>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e42:	f7fc fac5 	bl	80033d0 <HAL_GetTick>
 8006e46:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e48:	88fb      	ldrh	r3, [r7, #6]
 8006e4a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d002      	beq.n	8006e5e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e58:	2302      	movs	r3, #2
 8006e5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e5c:	e10b      	b.n	8007076 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <HAL_SPI_Transmit+0x52>
 8006e64:	88fb      	ldrh	r3, [r7, #6]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d102      	bne.n	8006e70 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e6e:	e102      	b.n	8007076 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2203      	movs	r2, #3
 8006e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	88fa      	ldrh	r2, [r7, #6]
 8006e88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	88fa      	ldrh	r2, [r7, #6]
 8006e8e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb6:	d10f      	bne.n	8006ed8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ec6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ed6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee2:	2b40      	cmp	r3, #64	; 0x40
 8006ee4:	d007      	beq.n	8006ef6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ef4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006efe:	d14b      	bne.n	8006f98 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <HAL_SPI_Transmit+0xf6>
 8006f08:	8afb      	ldrh	r3, [r7, #22]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d13e      	bne.n	8006f8c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	881a      	ldrh	r2, [r3, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1e:	1c9a      	adds	r2, r3, #2
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f32:	e02b      	b.n	8006f8c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d112      	bne.n	8006f68 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f46:	881a      	ldrh	r2, [r3, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	1c9a      	adds	r2, r3, #2
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f66:	e011      	b.n	8006f8c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f68:	f7fc fa32 	bl	80033d0 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d803      	bhi.n	8006f80 <HAL_SPI_Transmit+0x168>
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7e:	d102      	bne.n	8006f86 <HAL_SPI_Transmit+0x16e>
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d102      	bne.n	8006f8c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f8a:	e074      	b.n	8007076 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1ce      	bne.n	8006f34 <HAL_SPI_Transmit+0x11c>
 8006f96:	e04c      	b.n	8007032 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <HAL_SPI_Transmit+0x18e>
 8006fa0:	8afb      	ldrh	r3, [r7, #22]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d140      	bne.n	8007028 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	330c      	adds	r3, #12
 8006fb0:	7812      	ldrb	r2, [r2, #0]
 8006fb2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006fcc:	e02c      	b.n	8007028 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d113      	bne.n	8007004 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	330c      	adds	r3, #12
 8006fe6:	7812      	ldrb	r2, [r2, #0]
 8006fe8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	86da      	strh	r2, [r3, #54]	; 0x36
 8007002:	e011      	b.n	8007028 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007004:	f7fc f9e4 	bl	80033d0 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	d803      	bhi.n	800701c <HAL_SPI_Transmit+0x204>
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701a:	d102      	bne.n	8007022 <HAL_SPI_Transmit+0x20a>
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d102      	bne.n	8007028 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007026:	e026      	b.n	8007076 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800702c:	b29b      	uxth	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1cd      	bne.n	8006fce <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f000 f8b2 	bl	80071a0 <SPI_EndRxTxTransaction>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d002      	beq.n	8007048 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2220      	movs	r2, #32
 8007046:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10a      	bne.n	8007066 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007050:	2300      	movs	r3, #0
 8007052:	613b      	str	r3, [r7, #16]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	613b      	str	r3, [r7, #16]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706a:	2b00      	cmp	r3, #0
 800706c:	d002      	beq.n	8007074 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	77fb      	strb	r3, [r7, #31]
 8007072:	e000      	b.n	8007076 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007074:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007086:	7ffb      	ldrb	r3, [r7, #31]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3720      	adds	r7, #32
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b088      	sub	sp, #32
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	603b      	str	r3, [r7, #0]
 800709c:	4613      	mov	r3, r2
 800709e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80070a0:	f7fc f996 	bl	80033d0 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a8:	1a9b      	subs	r3, r3, r2
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	4413      	add	r3, r2
 80070ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80070b0:	f7fc f98e 	bl	80033d0 <HAL_GetTick>
 80070b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80070b6:	4b39      	ldr	r3, [pc, #228]	; (800719c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	015b      	lsls	r3, r3, #5
 80070bc:	0d1b      	lsrs	r3, r3, #20
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	fb02 f303 	mul.w	r3, r2, r3
 80070c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070c6:	e054      	b.n	8007172 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ce:	d050      	beq.n	8007172 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070d0:	f7fc f97e 	bl	80033d0 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	69fa      	ldr	r2, [r7, #28]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d902      	bls.n	80070e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d13d      	bne.n	8007162 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070fe:	d111      	bne.n	8007124 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007108:	d004      	beq.n	8007114 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007112:	d107      	bne.n	8007124 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007122:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800712c:	d10f      	bne.n	800714e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800714c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e017      	b.n	8007192 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	3b01      	subs	r3, #1
 8007170:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	4013      	ands	r3, r2
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	429a      	cmp	r2, r3
 8007180:	bf0c      	ite	eq
 8007182:	2301      	moveq	r3, #1
 8007184:	2300      	movne	r3, #0
 8007186:	b2db      	uxtb	r3, r3
 8007188:	461a      	mov	r2, r3
 800718a:	79fb      	ldrb	r3, [r7, #7]
 800718c:	429a      	cmp	r2, r3
 800718e:	d19b      	bne.n	80070c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3720      	adds	r7, #32
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20000010 	.word	0x20000010

080071a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af02      	add	r7, sp, #8
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2200      	movs	r2, #0
 80071b4:	2180      	movs	r1, #128	; 0x80
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f7ff ff6a 	bl	8007090 <SPI_WaitFlagStateUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d007      	beq.n	80071d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c6:	f043 0220 	orr.w	r2, r3, #32
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e000      	b.n	80071d4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e041      	b.n	8007272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d106      	bne.n	8007208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f839 	bl	800727a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2202      	movs	r2, #2
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3304      	adds	r3, #4
 8007218:	4619      	mov	r1, r3
 800721a:	4610      	mov	r0, r2
 800721c:	f000 f9b4 	bl	8007588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800727a:	b480      	push	{r7}
 800727c:	b083      	sub	sp, #12
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007282:	bf00      	nop
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	bc80      	pop	{r7}
 800728a:	4770      	bx	lr

0800728c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800729a:	b2db      	uxtb	r3, r3
 800729c:	2b01      	cmp	r3, #1
 800729e:	d001      	beq.n	80072a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e03a      	b.n	800731a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2202      	movs	r2, #2
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0201 	orr.w	r2, r2, #1
 80072ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a18      	ldr	r2, [pc, #96]	; (8007324 <HAL_TIM_Base_Start_IT+0x98>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00e      	beq.n	80072e4 <HAL_TIM_Base_Start_IT+0x58>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ce:	d009      	beq.n	80072e4 <HAL_TIM_Base_Start_IT+0x58>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a14      	ldr	r2, [pc, #80]	; (8007328 <HAL_TIM_Base_Start_IT+0x9c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d004      	beq.n	80072e4 <HAL_TIM_Base_Start_IT+0x58>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a13      	ldr	r2, [pc, #76]	; (800732c <HAL_TIM_Base_Start_IT+0xa0>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d111      	bne.n	8007308 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f003 0307 	and.w	r3, r3, #7
 80072ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b06      	cmp	r3, #6
 80072f4:	d010      	beq.n	8007318 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f042 0201 	orr.w	r2, r2, #1
 8007304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007306:	e007      	b.n	8007318 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f042 0201 	orr.w	r2, r2, #1
 8007316:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	bc80      	pop	{r7}
 8007322:	4770      	bx	lr
 8007324:	40012c00 	.word	0x40012c00
 8007328:	40000400 	.word	0x40000400
 800732c:	40000800 	.word	0x40000800

08007330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b02      	cmp	r3, #2
 8007344:	d122      	bne.n	800738c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b02      	cmp	r3, #2
 8007352:	d11b      	bne.n	800738c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f06f 0202 	mvn.w	r2, #2
 800735c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	f003 0303 	and.w	r3, r3, #3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f8ed 	bl	8007552 <HAL_TIM_IC_CaptureCallback>
 8007378:	e005      	b.n	8007386 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f8e0 	bl	8007540 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f8ef 	bl	8007564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b04      	cmp	r3, #4
 8007398:	d122      	bne.n	80073e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b04      	cmp	r3, #4
 80073a6:	d11b      	bne.n	80073e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f06f 0204 	mvn.w	r2, #4
 80073b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2202      	movs	r2, #2
 80073b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f8c3 	bl	8007552 <HAL_TIM_IC_CaptureCallback>
 80073cc:	e005      	b.n	80073da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f8b6 	bl	8007540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f8c5 	bl	8007564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	f003 0308 	and.w	r3, r3, #8
 80073ea:	2b08      	cmp	r3, #8
 80073ec:	d122      	bne.n	8007434 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	f003 0308 	and.w	r3, r3, #8
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	d11b      	bne.n	8007434 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f06f 0208 	mvn.w	r2, #8
 8007404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2204      	movs	r2, #4
 800740a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	f003 0303 	and.w	r3, r3, #3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f899 	bl	8007552 <HAL_TIM_IC_CaptureCallback>
 8007420:	e005      	b.n	800742e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f88c 	bl	8007540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f89b 	bl	8007564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f003 0310 	and.w	r3, r3, #16
 800743e:	2b10      	cmp	r3, #16
 8007440:	d122      	bne.n	8007488 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b10      	cmp	r3, #16
 800744e:	d11b      	bne.n	8007488 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f06f 0210 	mvn.w	r2, #16
 8007458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2208      	movs	r2, #8
 800745e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f86f 	bl	8007552 <HAL_TIM_IC_CaptureCallback>
 8007474:	e005      	b.n	8007482 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f862 	bl	8007540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f871 	bl	8007564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b01      	cmp	r3, #1
 8007494:	d10e      	bne.n	80074b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	f003 0301 	and.w	r3, r3, #1
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d107      	bne.n	80074b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f06f 0201 	mvn.w	r2, #1
 80074ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7f9 fef6 	bl	80012a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074be:	2b80      	cmp	r3, #128	; 0x80
 80074c0:	d10e      	bne.n	80074e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074cc:	2b80      	cmp	r3, #128	; 0x80
 80074ce:	d107      	bne.n	80074e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f8bf 	bl	800765e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ea:	2b40      	cmp	r3, #64	; 0x40
 80074ec:	d10e      	bne.n	800750c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f8:	2b40      	cmp	r3, #64	; 0x40
 80074fa:	d107      	bne.n	800750c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f835 	bl	8007576 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f003 0320 	and.w	r3, r3, #32
 8007516:	2b20      	cmp	r3, #32
 8007518:	d10e      	bne.n	8007538 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	f003 0320 	and.w	r3, r3, #32
 8007524:	2b20      	cmp	r3, #32
 8007526:	d107      	bne.n	8007538 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f06f 0220 	mvn.w	r2, #32
 8007530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f88a 	bl	800764c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007538:	bf00      	nop
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	4770      	bx	lr

08007552 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800755a:	bf00      	nop
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	bc80      	pop	{r7}
 8007562:	4770      	bx	lr

08007564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	bc80      	pop	{r7}
 8007574:	4770      	bx	lr

08007576 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007576:	b480      	push	{r7}
 8007578:	b083      	sub	sp, #12
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800757e:	bf00      	nop
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	bc80      	pop	{r7}
 8007586:	4770      	bx	lr

08007588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a29      	ldr	r2, [pc, #164]	; (8007640 <TIM_Base_SetConfig+0xb8>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d00b      	beq.n	80075b8 <TIM_Base_SetConfig+0x30>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075a6:	d007      	beq.n	80075b8 <TIM_Base_SetConfig+0x30>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a26      	ldr	r2, [pc, #152]	; (8007644 <TIM_Base_SetConfig+0xbc>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d003      	beq.n	80075b8 <TIM_Base_SetConfig+0x30>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a25      	ldr	r2, [pc, #148]	; (8007648 <TIM_Base_SetConfig+0xc0>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d108      	bne.n	80075ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a1c      	ldr	r2, [pc, #112]	; (8007640 <TIM_Base_SetConfig+0xb8>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d00b      	beq.n	80075ea <TIM_Base_SetConfig+0x62>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d8:	d007      	beq.n	80075ea <TIM_Base_SetConfig+0x62>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a19      	ldr	r2, [pc, #100]	; (8007644 <TIM_Base_SetConfig+0xbc>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d003      	beq.n	80075ea <TIM_Base_SetConfig+0x62>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a18      	ldr	r2, [pc, #96]	; (8007648 <TIM_Base_SetConfig+0xc0>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d108      	bne.n	80075fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a07      	ldr	r2, [pc, #28]	; (8007640 <TIM_Base_SetConfig+0xb8>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d103      	bne.n	8007630 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	691a      	ldr	r2, [r3, #16]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	615a      	str	r2, [r3, #20]
}
 8007636:	bf00      	nop
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	bc80      	pop	{r7}
 800763e:	4770      	bx	lr
 8007640:	40012c00 	.word	0x40012c00
 8007644:	40000400 	.word	0x40000400
 8007648:	40000800 	.word	0x40000800

0800764c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	bc80      	pop	{r7}
 800765c:	4770      	bx	lr

0800765e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	bc80      	pop	{r7}
 800766e:	4770      	bx	lr

08007670 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007670:	b084      	sub	sp, #16
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	f107 0014 	add.w	r0, r7, #20
 800767e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	bc80      	pop	{r7}
 800768c:	b004      	add	sp, #16
 800768e:	4770      	bx	lr

08007690 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80076a0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80076a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bc80      	pop	{r7}
 80076ba:	4770      	bx	lr

080076bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80076c4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80076c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	43db      	mvns	r3, r3
 80076d8:	b29b      	uxth	r3, r3
 80076da:	4013      	ands	r3, r2
 80076dc:	b29a      	uxth	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bc80      	pop	{r7}
 80076ee:	4770      	bx	lr

080076f0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	bc80      	pop	{r7}
 8007706:	4770      	bx	lr

08007708 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007708:	b084      	sub	sp, #16
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	f107 0014 	add.w	r0, r7, #20
 8007716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	bc80      	pop	{r7}
 8007744:	b004      	add	sp, #16
 8007746:	4770      	bx	lr

08007748 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007748:	b480      	push	{r7}
 800774a:	b09b      	sub	sp, #108	; 0x6c
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b29b      	uxth	r3, r3
 8007766:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800776a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800776e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	78db      	ldrb	r3, [r3, #3]
 8007776:	2b03      	cmp	r3, #3
 8007778:	d81f      	bhi.n	80077ba <USB_ActivateEndpoint+0x72>
 800777a:	a201      	add	r2, pc, #4	; (adr r2, 8007780 <USB_ActivateEndpoint+0x38>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	08007791 	.word	0x08007791
 8007784:	080077ad 	.word	0x080077ad
 8007788:	080077c3 	.word	0x080077c3
 800778c:	0800779f 	.word	0x0800779f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007790:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007794:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007798:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800779c:	e012      	b.n	80077c4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800779e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80077a2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80077a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80077aa:	e00b      	b.n	80077c4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80077ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80077b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80077b8:	e004      	b.n	80077c4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80077c0:	e000      	b.n	80077c4 <USB_ActivateEndpoint+0x7c>
      break;
 80077c2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	441a      	add	r2, r3
 80077ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80077d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	b29b      	uxth	r3, r3
 8007804:	4313      	orrs	r3, r2
 8007806:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	441a      	add	r2, r3
 8007814:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800781c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007828:	b29b      	uxth	r3, r3
 800782a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	7b1b      	ldrb	r3, [r3, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	f040 8149 	bne.w	8007ac8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	785b      	ldrb	r3, [r3, #1]
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 8084 	beq.w	8007948 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	617b      	str	r3, [r7, #20]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800784a:	b29b      	uxth	r3, r3
 800784c:	461a      	mov	r2, r3
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	4413      	add	r3, r2
 8007852:	617b      	str	r3, [r7, #20]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	011a      	lsls	r2, r3, #4
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	4413      	add	r3, r2
 800785e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007862:	613b      	str	r3, [r7, #16]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	88db      	ldrh	r3, [r3, #6]
 8007868:	085b      	lsrs	r3, r3, #1
 800786a:	b29b      	uxth	r3, r3
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	b29a      	uxth	r2, r3
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	81fb      	strh	r3, [r7, #14]
 8007882:	89fb      	ldrh	r3, [r7, #14]
 8007884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01b      	beq.n	80078c4 <USB_ActivateEndpoint+0x17c>
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	b29b      	uxth	r3, r3
 800789a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800789e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a2:	81bb      	strh	r3, [r7, #12]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	441a      	add	r2, r3
 80078ae:	89bb      	ldrh	r3, [r7, #12]
 80078b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	78db      	ldrb	r3, [r3, #3]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d020      	beq.n	800790e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	b29b      	uxth	r3, r3
 80078da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e2:	813b      	strh	r3, [r7, #8]
 80078e4:	893b      	ldrh	r3, [r7, #8]
 80078e6:	f083 0320 	eor.w	r3, r3, #32
 80078ea:	813b      	strh	r3, [r7, #8]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	441a      	add	r2, r3
 80078f6:	893b      	ldrh	r3, [r7, #8]
 80078f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007908:	b29b      	uxth	r3, r3
 800790a:	8013      	strh	r3, [r2, #0]
 800790c:	e27f      	b.n	8007e0e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	b29b      	uxth	r3, r3
 800791c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007924:	817b      	strh	r3, [r7, #10]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	441a      	add	r2, r3
 8007930:	897b      	ldrh	r3, [r7, #10]
 8007932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800793a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800793e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007942:	b29b      	uxth	r3, r3
 8007944:	8013      	strh	r3, [r2, #0]
 8007946:	e262      	b.n	8007e0e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007952:	b29b      	uxth	r3, r3
 8007954:	461a      	mov	r2, r3
 8007956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007958:	4413      	add	r3, r2
 800795a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	011a      	lsls	r2, r3, #4
 8007962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007964:	4413      	add	r3, r2
 8007966:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800796a:	62bb      	str	r3, [r7, #40]	; 0x28
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	88db      	ldrh	r3, [r3, #6]
 8007970:	085b      	lsrs	r3, r3, #1
 8007972:	b29b      	uxth	r3, r3
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	b29a      	uxth	r2, r3
 8007978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	627b      	str	r3, [r7, #36]	; 0x24
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007986:	b29b      	uxth	r3, r3
 8007988:	461a      	mov	r2, r3
 800798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798c:	4413      	add	r3, r2
 800798e:	627b      	str	r3, [r7, #36]	; 0x24
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	011a      	lsls	r2, r3, #4
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	4413      	add	r3, r2
 800799a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800799e:	623b      	str	r3, [r7, #32]
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d112      	bne.n	80079ce <USB_ActivateEndpoint+0x286>
 80079a8:	6a3b      	ldr	r3, [r7, #32]
 80079aa:	881b      	ldrh	r3, [r3, #0]
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	801a      	strh	r2, [r3, #0]
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	801a      	strh	r2, [r3, #0]
 80079cc:	e02f      	b.n	8007a2e <USB_ActivateEndpoint+0x2e6>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	2b3e      	cmp	r3, #62	; 0x3e
 80079d4:	d813      	bhi.n	80079fe <USB_ActivateEndpoint+0x2b6>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	085b      	lsrs	r3, r3, #1
 80079dc:	663b      	str	r3, [r7, #96]	; 0x60
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <USB_ActivateEndpoint+0x2a8>
 80079ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079ec:	3301      	adds	r3, #1
 80079ee:	663b      	str	r3, [r7, #96]	; 0x60
 80079f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	029b      	lsls	r3, r3, #10
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	801a      	strh	r2, [r3, #0]
 80079fc:	e017      	b.n	8007a2e <USB_ActivateEndpoint+0x2e6>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	095b      	lsrs	r3, r3, #5
 8007a04:	663b      	str	r3, [r7, #96]	; 0x60
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	f003 031f 	and.w	r3, r3, #31
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d102      	bne.n	8007a18 <USB_ActivateEndpoint+0x2d0>
 8007a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a14:	3b01      	subs	r3, #1
 8007a16:	663b      	str	r3, [r7, #96]	; 0x60
 8007a18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	029b      	lsls	r3, r3, #10
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	881b      	ldrh	r3, [r3, #0]
 8007a3a:	83fb      	strh	r3, [r7, #30]
 8007a3c:	8bfb      	ldrh	r3, [r7, #30]
 8007a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d01b      	beq.n	8007a7e <USB_ActivateEndpoint+0x336>
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4413      	add	r3, r2
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a5c:	83bb      	strh	r3, [r7, #28]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	441a      	add	r2, r3
 8007a68:	8bbb      	ldrh	r3, [r7, #28]
 8007a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	881b      	ldrh	r3, [r3, #0]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a94:	837b      	strh	r3, [r7, #26]
 8007a96:	8b7b      	ldrh	r3, [r7, #26]
 8007a98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a9c:	837b      	strh	r3, [r7, #26]
 8007a9e:	8b7b      	ldrh	r3, [r7, #26]
 8007aa0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007aa4:	837b      	strh	r3, [r7, #26]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	441a      	add	r2, r3
 8007ab0:	8b7b      	ldrh	r3, [r7, #26]
 8007ab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	8013      	strh	r3, [r2, #0]
 8007ac6:	e1a2      	b.n	8007e0e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	881b      	ldrh	r3, [r3, #0]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ade:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	441a      	add	r2, r3
 8007aec:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007af8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	461a      	mov	r2, r3
 8007b12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b14:	4413      	add	r3, r2
 8007b16:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	011a      	lsls	r2, r3, #4
 8007b1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b26:	657b      	str	r3, [r7, #84]	; 0x54
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	891b      	ldrh	r3, [r3, #8]
 8007b2c:	085b      	lsrs	r3, r3, #1
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	005b      	lsls	r3, r3, #1
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b36:	801a      	strh	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	653b      	str	r3, [r7, #80]	; 0x50
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	461a      	mov	r2, r3
 8007b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b48:	4413      	add	r3, r2
 8007b4a:	653b      	str	r3, [r7, #80]	; 0x50
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	011a      	lsls	r2, r3, #4
 8007b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	895b      	ldrh	r3, [r3, #10]
 8007b60:	085b      	lsrs	r3, r3, #1
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	005b      	lsls	r3, r3, #1
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b6a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	785b      	ldrb	r3, [r3, #1]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f040 8091 	bne.w	8007c98 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007b84:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d01b      	beq.n	8007bc6 <USB_ActivateEndpoint+0x47e>
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	441a      	add	r2, r3
 8007bb0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	873b      	strh	r3, [r7, #56]	; 0x38
 8007bd4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d01b      	beq.n	8007c16 <USB_ActivateEndpoint+0x4ce>
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	881b      	ldrh	r3, [r3, #0]
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	441a      	add	r2, r3
 8007c00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c2c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007c2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007c30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c34:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007c36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007c38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c3c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	441a      	add	r2, r3
 8007c48:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c74:	867b      	strh	r3, [r7, #50]	; 0x32
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	441a      	add	r2, r3
 8007c80:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	8013      	strh	r3, [r2, #0]
 8007c96:	e0ba      	b.n	8007e0e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007ca8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d01d      	beq.n	8007cf0 <USB_ActivateEndpoint+0x5a8>
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	441a      	add	r2, r3
 8007cd8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ce4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007d00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d01d      	beq.n	8007d48 <USB_ActivateEndpoint+0x600>
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	441a      	add	r2, r3
 8007d30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	78db      	ldrb	r3, [r3, #3]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d024      	beq.n	8007d9a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4413      	add	r3, r2
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007d6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007d6e:	f083 0320 	eor.w	r3, r3, #32
 8007d72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	441a      	add	r2, r3
 8007d80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	8013      	strh	r3, [r2, #0]
 8007d98:	e01d      	b.n	8007dd6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007db0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	441a      	add	r2, r3
 8007dbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	441a      	add	r2, r3
 8007df8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007e0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	376c      	adds	r7, #108	; 0x6c
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bc80      	pop	{r7}
 8007e1a:	4770      	bx	lr

08007e1c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b08d      	sub	sp, #52	; 0x34
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	7b1b      	ldrb	r3, [r3, #12]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f040 808e 	bne.w	8007f4c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	785b      	ldrb	r3, [r3, #1]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d044      	beq.n	8007ec2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4413      	add	r3, r2
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	81bb      	strh	r3, [r7, #12]
 8007e46:	89bb      	ldrh	r3, [r7, #12]
 8007e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d01b      	beq.n	8007e88 <USB_DeactivateEndpoint+0x6c>
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e66:	817b      	strh	r3, [r7, #10]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	441a      	add	r2, r3
 8007e72:	897b      	ldrh	r3, [r7, #10]
 8007e74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	881b      	ldrh	r3, [r3, #0]
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e9e:	813b      	strh	r3, [r7, #8]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	441a      	add	r2, r3
 8007eaa:	893b      	ldrh	r3, [r7, #8]
 8007eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	8013      	strh	r3, [r2, #0]
 8007ec0:	e192      	b.n	80081e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	827b      	strh	r3, [r7, #18]
 8007ed0:	8a7b      	ldrh	r3, [r7, #18]
 8007ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d01b      	beq.n	8007f12 <USB_DeactivateEndpoint+0xf6>
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef0:	823b      	strh	r3, [r7, #16]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	441a      	add	r2, r3
 8007efc:	8a3b      	ldrh	r3, [r7, #16]
 8007efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f28:	81fb      	strh	r3, [r7, #14]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	441a      	add	r2, r3
 8007f34:	89fb      	ldrh	r3, [r7, #14]
 8007f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	8013      	strh	r3, [r2, #0]
 8007f4a:	e14d      	b.n	80081e8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	785b      	ldrb	r3, [r3, #1]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f040 80a5 	bne.w	80080a0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	843b      	strh	r3, [r7, #32]
 8007f64:	8c3b      	ldrh	r3, [r7, #32]
 8007f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d01b      	beq.n	8007fa6 <USB_DeactivateEndpoint+0x18a>
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	881b      	ldrh	r3, [r3, #0]
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f84:	83fb      	strh	r3, [r7, #30]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	441a      	add	r2, r3
 8007f90:	8bfb      	ldrh	r3, [r7, #30]
 8007f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	83bb      	strh	r3, [r7, #28]
 8007fb4:	8bbb      	ldrh	r3, [r7, #28]
 8007fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d01b      	beq.n	8007ff6 <USB_DeactivateEndpoint+0x1da>
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	881b      	ldrh	r3, [r3, #0]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd4:	837b      	strh	r3, [r7, #26]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	441a      	add	r2, r3
 8007fe0:	8b7b      	ldrh	r3, [r7, #26]
 8007fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	b29b      	uxth	r3, r3
 8008004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800c:	833b      	strh	r3, [r7, #24]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	441a      	add	r2, r3
 8008018:	8b3b      	ldrh	r3, [r7, #24]
 800801a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800801e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008026:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800802a:	b29b      	uxth	r3, r3
 800802c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	b29b      	uxth	r3, r3
 800803c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008044:	82fb      	strh	r3, [r7, #22]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	441a      	add	r2, r3
 8008050:	8afb      	ldrh	r3, [r7, #22]
 8008052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800805a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800805e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008062:	b29b      	uxth	r3, r3
 8008064:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4413      	add	r3, r2
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	b29b      	uxth	r3, r3
 8008074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800807c:	82bb      	strh	r3, [r7, #20]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	441a      	add	r2, r3
 8008088:	8abb      	ldrh	r3, [r7, #20]
 800808a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800808e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800809a:	b29b      	uxth	r3, r3
 800809c:	8013      	strh	r3, [r2, #0]
 800809e:	e0a3      	b.n	80081e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80080ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80080b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d01b      	beq.n	80080f0 <USB_DeactivateEndpoint+0x2d4>
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	881b      	ldrh	r3, [r3, #0]
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	441a      	add	r2, r3
 80080da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80080dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80080fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008104:	2b00      	cmp	r3, #0
 8008106:	d01b      	beq.n	8008140 <USB_DeactivateEndpoint+0x324>
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	b29b      	uxth	r3, r3
 8008116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800811a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800811e:	853b      	strh	r3, [r7, #40]	; 0x28
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	441a      	add	r2, r3
 800812a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800812c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008138:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800813c:	b29b      	uxth	r3, r3
 800813e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4413      	add	r3, r2
 800814a:	881b      	ldrh	r3, [r3, #0]
 800814c:	b29b      	uxth	r3, r3
 800814e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008156:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	441a      	add	r2, r3
 8008162:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800816c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008174:	b29b      	uxth	r3, r3
 8008176:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	881b      	ldrh	r3, [r3, #0]
 8008184:	b29b      	uxth	r3, r3
 8008186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800818a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800818e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	441a      	add	r2, r3
 800819a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800819c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	b29b      	uxth	r3, r3
 80081be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	441a      	add	r2, r3
 80081d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80081d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3734      	adds	r7, #52	; 0x34
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bc80      	pop	{r7}
 80081f2:	4770      	bx	lr

080081f4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b0cc      	sub	sp, #304	; 0x130
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	1d3b      	adds	r3, r7, #4
 80081fc:	6018      	str	r0, [r3, #0]
 80081fe:	463b      	mov	r3, r7
 8008200:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008202:	463b      	mov	r3, r7
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	785b      	ldrb	r3, [r3, #1]
 8008208:	2b01      	cmp	r3, #1
 800820a:	f040 872e 	bne.w	800906a <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800820e:	463b      	mov	r3, r7
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	699a      	ldr	r2, [r3, #24]
 8008214:	463b      	mov	r3, r7
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	429a      	cmp	r2, r3
 800821c:	d905      	bls.n	800822a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800821e:	463b      	mov	r3, r7
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008228:	e004      	b.n	8008234 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800822a:	463b      	mov	r3, r7
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008234:	463b      	mov	r3, r7
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	7b1b      	ldrb	r3, [r3, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d134      	bne.n	80082a8 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800823e:	463b      	mov	r3, r7
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	6959      	ldr	r1, [r3, #20]
 8008244:	463b      	mov	r3, r7
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	88da      	ldrh	r2, [r3, #6]
 800824a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800824e:	b29b      	uxth	r3, r3
 8008250:	1d38      	adds	r0, r7, #4
 8008252:	6800      	ldr	r0, [r0, #0]
 8008254:	f001 fc03 	bl	8009a5e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008258:	f107 0310 	add.w	r3, r7, #16
 800825c:	1d3a      	adds	r2, r7, #4
 800825e:	6812      	ldr	r2, [r2, #0]
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	1d3b      	adds	r3, r7, #4
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800826a:	b29b      	uxth	r3, r3
 800826c:	4619      	mov	r1, r3
 800826e:	f107 0310 	add.w	r3, r7, #16
 8008272:	f107 0210 	add.w	r2, r7, #16
 8008276:	6812      	ldr	r2, [r2, #0]
 8008278:	440a      	add	r2, r1
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	463b      	mov	r3, r7
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	011a      	lsls	r2, r3, #4
 8008284:	f107 0310 	add.w	r3, r7, #16
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4413      	add	r3, r2
 800828c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008290:	f107 030c 	add.w	r3, r7, #12
 8008294:	601a      	str	r2, [r3, #0]
 8008296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800829a:	b29a      	uxth	r2, r3
 800829c:	f107 030c 	add.w	r3, r7, #12
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	801a      	strh	r2, [r3, #0]
 80082a4:	f000 beac 	b.w	8009000 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80082a8:	463b      	mov	r3, r7
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	78db      	ldrb	r3, [r3, #3]
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	f040 838c 	bne.w	80089cc <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80082b4:	463b      	mov	r3, r7
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6a1a      	ldr	r2, [r3, #32]
 80082ba:	463b      	mov	r3, r7
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	f240 8330 	bls.w	8008926 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80082c6:	1d3b      	adds	r3, r7, #4
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	463b      	mov	r3, r7
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	881b      	ldrh	r3, [r3, #0]
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80082e4:	1d3b      	adds	r3, r7, #4
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	463b      	mov	r3, r7
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	441a      	add	r2, r3
 80082f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80082f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008306:	b29b      	uxth	r3, r3
 8008308:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800830a:	463b      	mov	r3, r7
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6a1a      	ldr	r2, [r3, #32]
 8008310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008314:	1ad2      	subs	r2, r2, r3
 8008316:	463b      	mov	r3, r7
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800831c:	1d3b      	adds	r3, r7, #4
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	463b      	mov	r3, r7
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	b29b      	uxth	r3, r3
 800832e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 819e 	beq.w	8008674 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008338:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800833c:	1d3a      	adds	r2, r7, #4
 800833e:	6812      	ldr	r2, [r2, #0]
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	463b      	mov	r3, r7
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	785b      	ldrb	r3, [r3, #1]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d17a      	bne.n	8008442 <USB_EPStartXfer+0x24e>
 800834c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008350:	1d3a      	adds	r2, r7, #4
 8008352:	6812      	ldr	r2, [r2, #0]
 8008354:	601a      	str	r2, [r3, #0]
 8008356:	1d3b      	adds	r3, r7, #4
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800835e:	b29b      	uxth	r3, r3
 8008360:	4619      	mov	r1, r3
 8008362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008366:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800836a:	6812      	ldr	r2, [r2, #0]
 800836c:	440a      	add	r2, r1
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	463b      	mov	r3, r7
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	011a      	lsls	r2, r3, #4
 8008378:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4413      	add	r3, r2
 8008380:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008388:	601a      	str	r2, [r3, #0]
 800838a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800838e:	2b00      	cmp	r3, #0
 8008390:	d11a      	bne.n	80083c8 <USB_EPStartXfer+0x1d4>
 8008392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	b29b      	uxth	r3, r3
 800839c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	801a      	strh	r2, [r3, #0]
 80083aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083bc:	b29a      	uxth	r2, r3
 80083be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	801a      	strh	r2, [r3, #0]
 80083c6:	e062      	b.n	800848e <USB_EPStartXfer+0x29a>
 80083c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083cc:	2b3e      	cmp	r3, #62	; 0x3e
 80083ce:	d819      	bhi.n	8008404 <USB_EPStartXfer+0x210>
 80083d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083d4:	085b      	lsrs	r3, r3, #1
 80083d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80083da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d004      	beq.n	80083f0 <USB_EPStartXfer+0x1fc>
 80083e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083ea:	3301      	adds	r3, #1
 80083ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80083f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	029b      	lsls	r3, r3, #10
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	801a      	strh	r2, [r3, #0]
 8008402:	e044      	b.n	800848e <USB_EPStartXfer+0x29a>
 8008404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008408:	095b      	lsrs	r3, r3, #5
 800840a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800840e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008412:	f003 031f 	and.w	r3, r3, #31
 8008416:	2b00      	cmp	r3, #0
 8008418:	d104      	bne.n	8008424 <USB_EPStartXfer+0x230>
 800841a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800841e:	3b01      	subs	r3, #1
 8008420:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008424:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008428:	b29b      	uxth	r3, r3
 800842a:	029b      	lsls	r3, r3, #10
 800842c:	b29b      	uxth	r3, r3
 800842e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008436:	b29a      	uxth	r2, r3
 8008438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	801a      	strh	r2, [r3, #0]
 8008440:	e025      	b.n	800848e <USB_EPStartXfer+0x29a>
 8008442:	463b      	mov	r3, r7
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	785b      	ldrb	r3, [r3, #1]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d120      	bne.n	800848e <USB_EPStartXfer+0x29a>
 800844c:	1d3b      	adds	r3, r7, #4
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008454:	b29b      	uxth	r3, r3
 8008456:	4619      	mov	r1, r3
 8008458:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800845c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008460:	6812      	ldr	r2, [r2, #0]
 8008462:	440a      	add	r2, r1
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	463b      	mov	r3, r7
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	011a      	lsls	r2, r3, #4
 800846e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4413      	add	r3, r2
 8008476:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800847a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008484:	b29a      	uxth	r2, r3
 8008486:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800848e:	463b      	mov	r3, r7
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	895b      	ldrh	r3, [r3, #10]
 8008494:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008498:	463b      	mov	r3, r7
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6959      	ldr	r1, [r3, #20]
 800849e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80084a8:	1d38      	adds	r0, r7, #4
 80084aa:	6800      	ldr	r0, [r0, #0]
 80084ac:	f001 fad7 	bl	8009a5e <USB_WritePMA>
            ep->xfer_buff += len;
 80084b0:	463b      	mov	r3, r7
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	695a      	ldr	r2, [r3, #20]
 80084b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ba:	441a      	add	r2, r3
 80084bc:	463b      	mov	r3, r7
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80084c2:	463b      	mov	r3, r7
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6a1a      	ldr	r2, [r3, #32]
 80084c8:	463b      	mov	r3, r7
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d909      	bls.n	80084e6 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80084d2:	463b      	mov	r3, r7
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6a1a      	ldr	r2, [r3, #32]
 80084d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084dc:	1ad2      	subs	r2, r2, r3
 80084de:	463b      	mov	r3, r7
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	621a      	str	r2, [r3, #32]
 80084e4:	e008      	b.n	80084f8 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80084e6:	463b      	mov	r3, r7
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80084f0:	463b      	mov	r3, r7
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2200      	movs	r2, #0
 80084f6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80084f8:	463b      	mov	r3, r7
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	785b      	ldrb	r3, [r3, #1]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d17a      	bne.n	80085f8 <USB_EPStartXfer+0x404>
 8008502:	f107 0318 	add.w	r3, r7, #24
 8008506:	1d3a      	adds	r2, r7, #4
 8008508:	6812      	ldr	r2, [r2, #0]
 800850a:	601a      	str	r2, [r3, #0]
 800850c:	1d3b      	adds	r3, r7, #4
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008514:	b29b      	uxth	r3, r3
 8008516:	4619      	mov	r1, r3
 8008518:	f107 0318 	add.w	r3, r7, #24
 800851c:	f107 0218 	add.w	r2, r7, #24
 8008520:	6812      	ldr	r2, [r2, #0]
 8008522:	440a      	add	r2, r1
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	463b      	mov	r3, r7
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	011a      	lsls	r2, r3, #4
 800852e:	f107 0318 	add.w	r3, r7, #24
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4413      	add	r3, r2
 8008536:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800853a:	f107 0314 	add.w	r3, r7, #20
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008544:	2b00      	cmp	r3, #0
 8008546:	d11a      	bne.n	800857e <USB_EPStartXfer+0x38a>
 8008548:	f107 0314 	add.w	r3, r7, #20
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	b29b      	uxth	r3, r3
 8008552:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008556:	b29a      	uxth	r2, r3
 8008558:	f107 0314 	add.w	r3, r7, #20
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	801a      	strh	r2, [r3, #0]
 8008560:	f107 0314 	add.w	r3, r7, #20
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	b29b      	uxth	r3, r3
 800856a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800856e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008572:	b29a      	uxth	r2, r3
 8008574:	f107 0314 	add.w	r3, r7, #20
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	801a      	strh	r2, [r3, #0]
 800857c:	e067      	b.n	800864e <USB_EPStartXfer+0x45a>
 800857e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008582:	2b3e      	cmp	r3, #62	; 0x3e
 8008584:	d819      	bhi.n	80085ba <USB_EPStartXfer+0x3c6>
 8008586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800858a:	085b      	lsrs	r3, r3, #1
 800858c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	2b00      	cmp	r3, #0
 800859a:	d004      	beq.n	80085a6 <USB_EPStartXfer+0x3b2>
 800859c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80085a0:	3301      	adds	r3, #1
 80085a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80085a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	029b      	lsls	r3, r3, #10
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	f107 0314 	add.w	r3, r7, #20
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	801a      	strh	r2, [r3, #0]
 80085b8:	e049      	b.n	800864e <USB_EPStartXfer+0x45a>
 80085ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085be:	095b      	lsrs	r3, r3, #5
 80085c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80085c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085c8:	f003 031f 	and.w	r3, r3, #31
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d104      	bne.n	80085da <USB_EPStartXfer+0x3e6>
 80085d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80085d4:	3b01      	subs	r3, #1
 80085d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80085da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80085de:	b29b      	uxth	r3, r3
 80085e0:	029b      	lsls	r3, r3, #10
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	f107 0314 	add.w	r3, r7, #20
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	801a      	strh	r2, [r3, #0]
 80085f6:	e02a      	b.n	800864e <USB_EPStartXfer+0x45a>
 80085f8:	463b      	mov	r3, r7
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	785b      	ldrb	r3, [r3, #1]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d125      	bne.n	800864e <USB_EPStartXfer+0x45a>
 8008602:	f107 0320 	add.w	r3, r7, #32
 8008606:	1d3a      	adds	r2, r7, #4
 8008608:	6812      	ldr	r2, [r2, #0]
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	1d3b      	adds	r3, r7, #4
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008614:	b29b      	uxth	r3, r3
 8008616:	4619      	mov	r1, r3
 8008618:	f107 0320 	add.w	r3, r7, #32
 800861c:	f107 0220 	add.w	r2, r7, #32
 8008620:	6812      	ldr	r2, [r2, #0]
 8008622:	440a      	add	r2, r1
 8008624:	601a      	str	r2, [r3, #0]
 8008626:	463b      	mov	r3, r7
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	011a      	lsls	r2, r3, #4
 800862e:	f107 0320 	add.w	r3, r7, #32
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4413      	add	r3, r2
 8008636:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800863a:	f107 031c 	add.w	r3, r7, #28
 800863e:	601a      	str	r2, [r3, #0]
 8008640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008644:	b29a      	uxth	r2, r3
 8008646:	f107 031c 	add.w	r3, r7, #28
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800864e:	463b      	mov	r3, r7
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	891b      	ldrh	r3, [r3, #8]
 8008654:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008658:	463b      	mov	r3, r7
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	6959      	ldr	r1, [r3, #20]
 800865e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008662:	b29b      	uxth	r3, r3
 8008664:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008668:	1d38      	adds	r0, r7, #4
 800866a:	6800      	ldr	r0, [r0, #0]
 800866c:	f001 f9f7 	bl	8009a5e <USB_WritePMA>
 8008670:	f000 bcc6 	b.w	8009000 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008674:	463b      	mov	r3, r7
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	785b      	ldrb	r3, [r3, #1]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d164      	bne.n	8008748 <USB_EPStartXfer+0x554>
 800867e:	1d3b      	adds	r3, r7, #4
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	64bb      	str	r3, [r7, #72]	; 0x48
 8008684:	1d3b      	adds	r3, r7, #4
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800868c:	b29b      	uxth	r3, r3
 800868e:	461a      	mov	r2, r3
 8008690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008692:	4413      	add	r3, r2
 8008694:	64bb      	str	r3, [r7, #72]	; 0x48
 8008696:	463b      	mov	r3, r7
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	011a      	lsls	r2, r3, #4
 800869e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086a0:	4413      	add	r3, r2
 80086a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086a6:	647b      	str	r3, [r7, #68]	; 0x44
 80086a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d112      	bne.n	80086d6 <USB_EPStartXfer+0x4e2>
 80086b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086be:	801a      	strh	r2, [r3, #0]
 80086c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086c2:	881b      	ldrh	r3, [r3, #0]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086d2:	801a      	strh	r2, [r3, #0]
 80086d4:	e057      	b.n	8008786 <USB_EPStartXfer+0x592>
 80086d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086da:	2b3e      	cmp	r3, #62	; 0x3e
 80086dc:	d817      	bhi.n	800870e <USB_EPStartXfer+0x51a>
 80086de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086e2:	085b      	lsrs	r3, r3, #1
 80086e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80086e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d004      	beq.n	80086fe <USB_EPStartXfer+0x50a>
 80086f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80086f8:	3301      	adds	r3, #1
 80086fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80086fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008702:	b29b      	uxth	r3, r3
 8008704:	029b      	lsls	r3, r3, #10
 8008706:	b29a      	uxth	r2, r3
 8008708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800870a:	801a      	strh	r2, [r3, #0]
 800870c:	e03b      	b.n	8008786 <USB_EPStartXfer+0x592>
 800870e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008712:	095b      	lsrs	r3, r3, #5
 8008714:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800871c:	f003 031f 	and.w	r3, r3, #31
 8008720:	2b00      	cmp	r3, #0
 8008722:	d104      	bne.n	800872e <USB_EPStartXfer+0x53a>
 8008724:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008728:	3b01      	subs	r3, #1
 800872a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800872e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008732:	b29b      	uxth	r3, r3
 8008734:	029b      	lsls	r3, r3, #10
 8008736:	b29b      	uxth	r3, r3
 8008738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800873c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008740:	b29a      	uxth	r2, r3
 8008742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008744:	801a      	strh	r2, [r3, #0]
 8008746:	e01e      	b.n	8008786 <USB_EPStartXfer+0x592>
 8008748:	463b      	mov	r3, r7
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	785b      	ldrb	r3, [r3, #1]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d119      	bne.n	8008786 <USB_EPStartXfer+0x592>
 8008752:	1d3b      	adds	r3, r7, #4
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	653b      	str	r3, [r7, #80]	; 0x50
 8008758:	1d3b      	adds	r3, r7, #4
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008760:	b29b      	uxth	r3, r3
 8008762:	461a      	mov	r2, r3
 8008764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008766:	4413      	add	r3, r2
 8008768:	653b      	str	r3, [r7, #80]	; 0x50
 800876a:	463b      	mov	r3, r7
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	011a      	lsls	r2, r3, #4
 8008772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008774:	4413      	add	r3, r2
 8008776:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800877a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800877c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008780:	b29a      	uxth	r2, r3
 8008782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008784:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008786:	463b      	mov	r3, r7
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	891b      	ldrh	r3, [r3, #8]
 800878c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008790:	463b      	mov	r3, r7
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6959      	ldr	r1, [r3, #20]
 8008796:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800879a:	b29b      	uxth	r3, r3
 800879c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80087a0:	1d38      	adds	r0, r7, #4
 80087a2:	6800      	ldr	r0, [r0, #0]
 80087a4:	f001 f95b 	bl	8009a5e <USB_WritePMA>
            ep->xfer_buff += len;
 80087a8:	463b      	mov	r3, r7
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	695a      	ldr	r2, [r3, #20]
 80087ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087b2:	441a      	add	r2, r3
 80087b4:	463b      	mov	r3, r7
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80087ba:	463b      	mov	r3, r7
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6a1a      	ldr	r2, [r3, #32]
 80087c0:	463b      	mov	r3, r7
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d909      	bls.n	80087de <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80087ca:	463b      	mov	r3, r7
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	6a1a      	ldr	r2, [r3, #32]
 80087d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d4:	1ad2      	subs	r2, r2, r3
 80087d6:	463b      	mov	r3, r7
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	621a      	str	r2, [r3, #32]
 80087dc:	e008      	b.n	80087f0 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80087de:	463b      	mov	r3, r7
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6a1b      	ldr	r3, [r3, #32]
 80087e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80087e8:	463b      	mov	r3, r7
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2200      	movs	r2, #0
 80087ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80087f0:	1d3b      	adds	r3, r7, #4
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	643b      	str	r3, [r7, #64]	; 0x40
 80087f6:	463b      	mov	r3, r7
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	785b      	ldrb	r3, [r3, #1]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d164      	bne.n	80088ca <USB_EPStartXfer+0x6d6>
 8008800:	1d3b      	adds	r3, r7, #4
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	63bb      	str	r3, [r7, #56]	; 0x38
 8008806:	1d3b      	adds	r3, r7, #4
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800880e:	b29b      	uxth	r3, r3
 8008810:	461a      	mov	r2, r3
 8008812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008814:	4413      	add	r3, r2
 8008816:	63bb      	str	r3, [r7, #56]	; 0x38
 8008818:	463b      	mov	r3, r7
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	011a      	lsls	r2, r3, #4
 8008820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008822:	4413      	add	r3, r2
 8008824:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008828:	637b      	str	r3, [r7, #52]	; 0x34
 800882a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800882e:	2b00      	cmp	r3, #0
 8008830:	d112      	bne.n	8008858 <USB_EPStartXfer+0x664>
 8008832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008834:	881b      	ldrh	r3, [r3, #0]
 8008836:	b29b      	uxth	r3, r3
 8008838:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800883c:	b29a      	uxth	r2, r3
 800883e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008840:	801a      	strh	r2, [r3, #0]
 8008842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	b29b      	uxth	r3, r3
 8008848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800884c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008850:	b29a      	uxth	r2, r3
 8008852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008854:	801a      	strh	r2, [r3, #0]
 8008856:	e054      	b.n	8008902 <USB_EPStartXfer+0x70e>
 8008858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800885c:	2b3e      	cmp	r3, #62	; 0x3e
 800885e:	d817      	bhi.n	8008890 <USB_EPStartXfer+0x69c>
 8008860:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008864:	085b      	lsrs	r3, r3, #1
 8008866:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800886a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800886e:	f003 0301 	and.w	r3, r3, #1
 8008872:	2b00      	cmp	r3, #0
 8008874:	d004      	beq.n	8008880 <USB_EPStartXfer+0x68c>
 8008876:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800887a:	3301      	adds	r3, #1
 800887c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008880:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008884:	b29b      	uxth	r3, r3
 8008886:	029b      	lsls	r3, r3, #10
 8008888:	b29a      	uxth	r2, r3
 800888a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888c:	801a      	strh	r2, [r3, #0]
 800888e:	e038      	b.n	8008902 <USB_EPStartXfer+0x70e>
 8008890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008894:	095b      	lsrs	r3, r3, #5
 8008896:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800889a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800889e:	f003 031f 	and.w	r3, r3, #31
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d104      	bne.n	80088b0 <USB_EPStartXfer+0x6bc>
 80088a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80088aa:	3b01      	subs	r3, #1
 80088ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80088b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	029b      	lsls	r3, r3, #10
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c6:	801a      	strh	r2, [r3, #0]
 80088c8:	e01b      	b.n	8008902 <USB_EPStartXfer+0x70e>
 80088ca:	463b      	mov	r3, r7
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	785b      	ldrb	r3, [r3, #1]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d116      	bne.n	8008902 <USB_EPStartXfer+0x70e>
 80088d4:	1d3b      	adds	r3, r7, #4
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088dc:	b29b      	uxth	r3, r3
 80088de:	461a      	mov	r2, r3
 80088e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088e2:	4413      	add	r3, r2
 80088e4:	643b      	str	r3, [r7, #64]	; 0x40
 80088e6:	463b      	mov	r3, r7
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	011a      	lsls	r2, r3, #4
 80088ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088f0:	4413      	add	r3, r2
 80088f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008900:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008902:	463b      	mov	r3, r7
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	895b      	ldrh	r3, [r3, #10]
 8008908:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800890c:	463b      	mov	r3, r7
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6959      	ldr	r1, [r3, #20]
 8008912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008916:	b29b      	uxth	r3, r3
 8008918:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800891c:	1d38      	adds	r0, r7, #4
 800891e:	6800      	ldr	r0, [r0, #0]
 8008920:	f001 f89d 	bl	8009a5e <USB_WritePMA>
 8008924:	e36c      	b.n	8009000 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008926:	463b      	mov	r3, r7
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008930:	1d3b      	adds	r3, r7, #4
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	463b      	mov	r3, r7
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4413      	add	r3, r2
 800893e:	881b      	ldrh	r3, [r3, #0]
 8008940:	b29b      	uxth	r3, r3
 8008942:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800894a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800894e:	1d3b      	adds	r3, r7, #4
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	463b      	mov	r3, r7
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	441a      	add	r2, r3
 800895c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800896c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008970:	b29b      	uxth	r3, r3
 8008972:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008974:	1d3b      	adds	r3, r7, #4
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	65fb      	str	r3, [r7, #92]	; 0x5c
 800897a:	1d3b      	adds	r3, r7, #4
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008982:	b29b      	uxth	r3, r3
 8008984:	461a      	mov	r2, r3
 8008986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008988:	4413      	add	r3, r2
 800898a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800898c:	463b      	mov	r3, r7
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	011a      	lsls	r2, r3, #4
 8008994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008996:	4413      	add	r3, r2
 8008998:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800899c:	65bb      	str	r3, [r7, #88]	; 0x58
 800899e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80089a8:	463b      	mov	r3, r7
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	891b      	ldrh	r3, [r3, #8]
 80089ae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089b2:	463b      	mov	r3, r7
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	6959      	ldr	r1, [r3, #20]
 80089b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089bc:	b29b      	uxth	r3, r3
 80089be:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80089c2:	1d38      	adds	r0, r7, #4
 80089c4:	6800      	ldr	r0, [r0, #0]
 80089c6:	f001 f84a 	bl	8009a5e <USB_WritePMA>
 80089ca:	e319      	b.n	8009000 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80089cc:	1d3b      	adds	r3, r7, #4
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	463b      	mov	r3, r7
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4413      	add	r3, r2
 80089da:	881b      	ldrh	r3, [r3, #0]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089e6:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80089ea:	1d3b      	adds	r3, r7, #4
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	463b      	mov	r3, r7
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	441a      	add	r2, r3
 80089f8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80089fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a04:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008a10:	463b      	mov	r3, r7
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6a1a      	ldr	r2, [r3, #32]
 8008a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a1a:	1ad2      	subs	r2, r2, r3
 8008a1c:	463b      	mov	r3, r7
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008a22:	1d3b      	adds	r3, r7, #4
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	463b      	mov	r3, r7
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	881b      	ldrh	r3, [r3, #0]
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 8162 	beq.w	8008d02 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a3e:	1d3b      	adds	r3, r7, #4
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a46:	463b      	mov	r3, r7
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	785b      	ldrb	r3, [r3, #1]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d164      	bne.n	8008b1a <USB_EPStartXfer+0x926>
 8008a50:	1d3b      	adds	r3, r7, #4
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a56:	1d3b      	adds	r3, r7, #4
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	461a      	mov	r2, r3
 8008a62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a64:	4413      	add	r3, r2
 8008a66:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a68:	463b      	mov	r3, r7
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	011a      	lsls	r2, r3, #4
 8008a70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a72:	4413      	add	r3, r2
 8008a74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a78:	677b      	str	r3, [r7, #116]	; 0x74
 8008a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d112      	bne.n	8008aa8 <USB_EPStartXfer+0x8b4>
 8008a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a84:	881b      	ldrh	r3, [r3, #0]
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a90:	801a      	strh	r2, [r3, #0]
 8008a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a94:	881b      	ldrh	r3, [r3, #0]
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008aa4:	801a      	strh	r2, [r3, #0]
 8008aa6:	e057      	b.n	8008b58 <USB_EPStartXfer+0x964>
 8008aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aac:	2b3e      	cmp	r3, #62	; 0x3e
 8008aae:	d817      	bhi.n	8008ae0 <USB_EPStartXfer+0x8ec>
 8008ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ab4:	085b      	lsrs	r3, r3, #1
 8008ab6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d004      	beq.n	8008ad0 <USB_EPStartXfer+0x8dc>
 8008ac6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008aca:	3301      	adds	r3, #1
 8008acc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008ad0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	029b      	lsls	r3, r3, #10
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008adc:	801a      	strh	r2, [r3, #0]
 8008ade:	e03b      	b.n	8008b58 <USB_EPStartXfer+0x964>
 8008ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ae4:	095b      	lsrs	r3, r3, #5
 8008ae6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aee:	f003 031f 	and.w	r3, r3, #31
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d104      	bne.n	8008b00 <USB_EPStartXfer+0x90c>
 8008af6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008afa:	3b01      	subs	r3, #1
 8008afc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008b00:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	029b      	lsls	r3, r3, #10
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b16:	801a      	strh	r2, [r3, #0]
 8008b18:	e01e      	b.n	8008b58 <USB_EPStartXfer+0x964>
 8008b1a:	463b      	mov	r3, r7
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	785b      	ldrb	r3, [r3, #1]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d119      	bne.n	8008b58 <USB_EPStartXfer+0x964>
 8008b24:	1d3b      	adds	r3, r7, #4
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	461a      	mov	r2, r3
 8008b30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b34:	4413      	add	r3, r2
 8008b36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b3a:	463b      	mov	r3, r7
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	011a      	lsls	r2, r3, #4
 8008b42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b46:	4413      	add	r3, r2
 8008b48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b56:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008b58:	463b      	mov	r3, r7
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	895b      	ldrh	r3, [r3, #10]
 8008b5e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b62:	463b      	mov	r3, r7
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6959      	ldr	r1, [r3, #20]
 8008b68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008b72:	1d38      	adds	r0, r7, #4
 8008b74:	6800      	ldr	r0, [r0, #0]
 8008b76:	f000 ff72 	bl	8009a5e <USB_WritePMA>
          ep->xfer_buff += len;
 8008b7a:	463b      	mov	r3, r7
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	695a      	ldr	r2, [r3, #20]
 8008b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b84:	441a      	add	r2, r3
 8008b86:	463b      	mov	r3, r7
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008b8c:	463b      	mov	r3, r7
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6a1a      	ldr	r2, [r3, #32]
 8008b92:	463b      	mov	r3, r7
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d909      	bls.n	8008bb0 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8008b9c:	463b      	mov	r3, r7
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6a1a      	ldr	r2, [r3, #32]
 8008ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ba6:	1ad2      	subs	r2, r2, r3
 8008ba8:	463b      	mov	r3, r7
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	621a      	str	r2, [r3, #32]
 8008bae:	e008      	b.n	8008bc2 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8008bb0:	463b      	mov	r3, r7
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008bba:	463b      	mov	r3, r7
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f000 821a 	beq.w	8009000 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008bcc:	463b      	mov	r3, r7
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	785b      	ldrb	r3, [r3, #1]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d164      	bne.n	8008ca0 <USB_EPStartXfer+0xaac>
 8008bd6:	1d3b      	adds	r3, r7, #4
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bdc:	1d3b      	adds	r3, r7, #4
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	461a      	mov	r2, r3
 8008be8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bea:	4413      	add	r3, r2
 8008bec:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bee:	463b      	mov	r3, r7
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	011a      	lsls	r2, r3, #4
 8008bf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008bfe:	667b      	str	r3, [r7, #100]	; 0x64
 8008c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d112      	bne.n	8008c2e <USB_EPStartXfer+0xa3a>
 8008c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c0a:	881b      	ldrh	r3, [r3, #0]
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c16:	801a      	strh	r2, [r3, #0]
 8008c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c1a:	881b      	ldrh	r3, [r3, #0]
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c2a:	801a      	strh	r2, [r3, #0]
 8008c2c:	e057      	b.n	8008cde <USB_EPStartXfer+0xaea>
 8008c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c32:	2b3e      	cmp	r3, #62	; 0x3e
 8008c34:	d817      	bhi.n	8008c66 <USB_EPStartXfer+0xa72>
 8008c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c3a:	085b      	lsrs	r3, r3, #1
 8008c3c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d004      	beq.n	8008c56 <USB_EPStartXfer+0xa62>
 8008c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c50:	3301      	adds	r3, #1
 8008c52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	029b      	lsls	r3, r3, #10
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c62:	801a      	strh	r2, [r3, #0]
 8008c64:	e03b      	b.n	8008cde <USB_EPStartXfer+0xaea>
 8008c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c6a:	095b      	lsrs	r3, r3, #5
 8008c6c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c74:	f003 031f 	and.w	r3, r3, #31
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d104      	bne.n	8008c86 <USB_EPStartXfer+0xa92>
 8008c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c80:	3b01      	subs	r3, #1
 8008c82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	029b      	lsls	r3, r3, #10
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c9c:	801a      	strh	r2, [r3, #0]
 8008c9e:	e01e      	b.n	8008cde <USB_EPStartXfer+0xaea>
 8008ca0:	463b      	mov	r3, r7
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	785b      	ldrb	r3, [r3, #1]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d119      	bne.n	8008cde <USB_EPStartXfer+0xaea>
 8008caa:	1d3b      	adds	r3, r7, #4
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	673b      	str	r3, [r7, #112]	; 0x70
 8008cb0:	1d3b      	adds	r3, r7, #4
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	461a      	mov	r2, r3
 8008cbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cbe:	4413      	add	r3, r2
 8008cc0:	673b      	str	r3, [r7, #112]	; 0x70
 8008cc2:	463b      	mov	r3, r7
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	011a      	lsls	r2, r3, #4
 8008cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ccc:	4413      	add	r3, r2
 8008cce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008cd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cdc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008cde:	463b      	mov	r3, r7
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	891b      	ldrh	r3, [r3, #8]
 8008ce4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ce8:	463b      	mov	r3, r7
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	6959      	ldr	r1, [r3, #20]
 8008cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008cf8:	1d38      	adds	r0, r7, #4
 8008cfa:	6800      	ldr	r0, [r0, #0]
 8008cfc:	f000 feaf 	bl	8009a5e <USB_WritePMA>
 8008d00:	e17e      	b.n	8009000 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d02:	463b      	mov	r3, r7
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	785b      	ldrb	r3, [r3, #1]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d16f      	bne.n	8008dec <USB_EPStartXfer+0xbf8>
 8008d0c:	1d3b      	adds	r3, r7, #4
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d14:	1d3b      	adds	r3, r7, #4
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	461a      	mov	r2, r3
 8008d20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d24:	4413      	add	r3, r2
 8008d26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d2a:	463b      	mov	r3, r7
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	011a      	lsls	r2, r3, #4
 8008d32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d36:	4413      	add	r3, r2
 8008d38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d116      	bne.n	8008d76 <USB_EPStartXfer+0xb82>
 8008d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d4c:	881b      	ldrh	r3, [r3, #0]
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d5a:	801a      	strh	r2, [r3, #0]
 8008d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d60:	881b      	ldrh	r3, [r3, #0]
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d72:	801a      	strh	r2, [r3, #0]
 8008d74:	e05f      	b.n	8008e36 <USB_EPStartXfer+0xc42>
 8008d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d7a:	2b3e      	cmp	r3, #62	; 0x3e
 8008d7c:	d818      	bhi.n	8008db0 <USB_EPStartXfer+0xbbc>
 8008d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d82:	085b      	lsrs	r3, r3, #1
 8008d84:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d8c:	f003 0301 	and.w	r3, r3, #1
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d004      	beq.n	8008d9e <USB_EPStartXfer+0xbaa>
 8008d94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008d98:	3301      	adds	r3, #1
 8008d9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008d9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	029b      	lsls	r3, r3, #10
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008dac:	801a      	strh	r2, [r3, #0]
 8008dae:	e042      	b.n	8008e36 <USB_EPStartXfer+0xc42>
 8008db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008db4:	095b      	lsrs	r3, r3, #5
 8008db6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008dba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dbe:	f003 031f 	and.w	r3, r3, #31
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d104      	bne.n	8008dd0 <USB_EPStartXfer+0xbdc>
 8008dc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008dd0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	029b      	lsls	r3, r3, #10
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008de8:	801a      	strh	r2, [r3, #0]
 8008dea:	e024      	b.n	8008e36 <USB_EPStartXfer+0xc42>
 8008dec:	463b      	mov	r3, r7
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	785b      	ldrb	r3, [r3, #1]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d11f      	bne.n	8008e36 <USB_EPStartXfer+0xc42>
 8008df6:	1d3b      	adds	r3, r7, #4
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008dfe:	1d3b      	adds	r3, r7, #4
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	461a      	mov	r2, r3
 8008e0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008e0e:	4413      	add	r3, r2
 8008e10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008e14:	463b      	mov	r3, r7
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	011a      	lsls	r2, r3, #4
 8008e1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008e20:	4413      	add	r3, r2
 8008e22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008e36:	463b      	mov	r3, r7
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	891b      	ldrh	r3, [r3, #8]
 8008e3c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e40:	463b      	mov	r3, r7
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	6959      	ldr	r1, [r3, #20]
 8008e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008e50:	1d38      	adds	r0, r7, #4
 8008e52:	6800      	ldr	r0, [r0, #0]
 8008e54:	f000 fe03 	bl	8009a5e <USB_WritePMA>
          ep->xfer_buff += len;
 8008e58:	463b      	mov	r3, r7
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	695a      	ldr	r2, [r3, #20]
 8008e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e62:	441a      	add	r2, r3
 8008e64:	463b      	mov	r3, r7
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008e6a:	463b      	mov	r3, r7
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6a1a      	ldr	r2, [r3, #32]
 8008e70:	463b      	mov	r3, r7
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d909      	bls.n	8008e8e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8008e7a:	463b      	mov	r3, r7
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	6a1a      	ldr	r2, [r3, #32]
 8008e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e84:	1ad2      	subs	r2, r2, r3
 8008e86:	463b      	mov	r3, r7
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	621a      	str	r2, [r3, #32]
 8008e8c:	e008      	b.n	8008ea0 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8008e8e:	463b      	mov	r3, r7
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6a1b      	ldr	r3, [r3, #32]
 8008e94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008e98:	463b      	mov	r3, r7
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008ea0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 80ab 	beq.w	8009000 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008eaa:	1d3b      	adds	r3, r7, #4
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008eb2:	463b      	mov	r3, r7
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	785b      	ldrb	r3, [r3, #1]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d16f      	bne.n	8008f9c <USB_EPStartXfer+0xda8>
 8008ebc:	1d3b      	adds	r3, r7, #4
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ec4:	1d3b      	adds	r3, r7, #4
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008eda:	463b      	mov	r3, r7
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	011a      	lsls	r2, r3, #4
 8008ee2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008eec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d116      	bne.n	8008f26 <USB_EPStartXfer+0xd32>
 8008ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f0a:	801a      	strh	r2, [r3, #0]
 8008f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f10:	881b      	ldrh	r3, [r3, #0]
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f22:	801a      	strh	r2, [r3, #0]
 8008f24:	e05b      	b.n	8008fde <USB_EPStartXfer+0xdea>
 8008f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f2a:	2b3e      	cmp	r3, #62	; 0x3e
 8008f2c:	d818      	bhi.n	8008f60 <USB_EPStartXfer+0xd6c>
 8008f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f32:	085b      	lsrs	r3, r3, #1
 8008f34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d004      	beq.n	8008f4e <USB_EPStartXfer+0xd5a>
 8008f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f48:	3301      	adds	r3, #1
 8008f4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	029b      	lsls	r3, r3, #10
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f5c:	801a      	strh	r2, [r3, #0]
 8008f5e:	e03e      	b.n	8008fde <USB_EPStartXfer+0xdea>
 8008f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f64:	095b      	lsrs	r3, r3, #5
 8008f66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f6e:	f003 031f 	and.w	r3, r3, #31
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d104      	bne.n	8008f80 <USB_EPStartXfer+0xd8c>
 8008f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	029b      	lsls	r3, r3, #10
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f98:	801a      	strh	r2, [r3, #0]
 8008f9a:	e020      	b.n	8008fde <USB_EPStartXfer+0xdea>
 8008f9c:	463b      	mov	r3, r7
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	785b      	ldrb	r3, [r3, #1]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d11b      	bne.n	8008fde <USB_EPStartXfer+0xdea>
 8008fa6:	1d3b      	adds	r3, r7, #4
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008fbc:	463b      	mov	r3, r7
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	011a      	lsls	r2, r3, #4
 8008fc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008fc8:	4413      	add	r3, r2
 8008fca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008fce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fdc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008fde:	463b      	mov	r3, r7
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	895b      	ldrh	r3, [r3, #10]
 8008fe4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008fe8:	463b      	mov	r3, r7
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	6959      	ldr	r1, [r3, #20]
 8008fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ff8:	1d38      	adds	r0, r7, #4
 8008ffa:	6800      	ldr	r0, [r0, #0]
 8008ffc:	f000 fd2f 	bl	8009a5e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009000:	1d3b      	adds	r3, r7, #4
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	463b      	mov	r3, r7
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	4413      	add	r3, r2
 800900e:	881b      	ldrh	r3, [r3, #0]
 8009010:	b29b      	uxth	r3, r3
 8009012:	f107 020a 	add.w	r2, r7, #10
 8009016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800901a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800901e:	8013      	strh	r3, [r2, #0]
 8009020:	f107 030a 	add.w	r3, r7, #10
 8009024:	f107 020a 	add.w	r2, r7, #10
 8009028:	8812      	ldrh	r2, [r2, #0]
 800902a:	f082 0210 	eor.w	r2, r2, #16
 800902e:	801a      	strh	r2, [r3, #0]
 8009030:	f107 030a 	add.w	r3, r7, #10
 8009034:	f107 020a 	add.w	r2, r7, #10
 8009038:	8812      	ldrh	r2, [r2, #0]
 800903a:	f082 0220 	eor.w	r2, r2, #32
 800903e:	801a      	strh	r2, [r3, #0]
 8009040:	1d3b      	adds	r3, r7, #4
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	463b      	mov	r3, r7
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	441a      	add	r2, r3
 800904e:	f107 030a 	add.w	r3, r7, #10
 8009052:	881b      	ldrh	r3, [r3, #0]
 8009054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800905c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009064:	b29b      	uxth	r3, r3
 8009066:	8013      	strh	r3, [r2, #0]
 8009068:	e3b5      	b.n	80097d6 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800906a:	463b      	mov	r3, r7
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	7b1b      	ldrb	r3, [r3, #12]
 8009070:	2b00      	cmp	r3, #0
 8009072:	f040 8090 	bne.w	8009196 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009076:	463b      	mov	r3, r7
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	699a      	ldr	r2, [r3, #24]
 800907c:	463b      	mov	r3, r7
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	429a      	cmp	r2, r3
 8009084:	d90e      	bls.n	80090a4 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8009086:	463b      	mov	r3, r7
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009090:	463b      	mov	r3, r7
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	699a      	ldr	r2, [r3, #24]
 8009096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800909a:	1ad2      	subs	r2, r2, r3
 800909c:	463b      	mov	r3, r7
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	619a      	str	r2, [r3, #24]
 80090a2:	e008      	b.n	80090b6 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80090a4:	463b      	mov	r3, r7
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80090ae:	463b      	mov	r3, r7
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2200      	movs	r2, #0
 80090b4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80090b6:	1d3b      	adds	r3, r7, #4
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090be:	1d3b      	adds	r3, r7, #4
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	461a      	mov	r2, r3
 80090ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80090ce:	4413      	add	r3, r2
 80090d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090d4:	463b      	mov	r3, r7
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	011a      	lsls	r2, r3, #4
 80090dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80090e0:	4413      	add	r3, r2
 80090e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80090e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d116      	bne.n	8009120 <USB_EPStartXfer+0xf2c>
 80090f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090f6:	881b      	ldrh	r3, [r3, #0]
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090fe:	b29a      	uxth	r2, r3
 8009100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009104:	801a      	strh	r2, [r3, #0]
 8009106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	b29b      	uxth	r3, r3
 800910e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009116:	b29a      	uxth	r2, r3
 8009118:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800911c:	801a      	strh	r2, [r3, #0]
 800911e:	e32c      	b.n	800977a <USB_EPStartXfer+0x1586>
 8009120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009124:	2b3e      	cmp	r3, #62	; 0x3e
 8009126:	d818      	bhi.n	800915a <USB_EPStartXfer+0xf66>
 8009128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800912c:	085b      	lsrs	r3, r3, #1
 800912e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009136:	f003 0301 	and.w	r3, r3, #1
 800913a:	2b00      	cmp	r3, #0
 800913c:	d004      	beq.n	8009148 <USB_EPStartXfer+0xf54>
 800913e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009142:	3301      	adds	r3, #1
 8009144:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009148:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800914c:	b29b      	uxth	r3, r3
 800914e:	029b      	lsls	r3, r3, #10
 8009150:	b29a      	uxth	r2, r3
 8009152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009156:	801a      	strh	r2, [r3, #0]
 8009158:	e30f      	b.n	800977a <USB_EPStartXfer+0x1586>
 800915a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800915e:	095b      	lsrs	r3, r3, #5
 8009160:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009168:	f003 031f 	and.w	r3, r3, #31
 800916c:	2b00      	cmp	r3, #0
 800916e:	d104      	bne.n	800917a <USB_EPStartXfer+0xf86>
 8009170:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009174:	3b01      	subs	r3, #1
 8009176:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800917a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800917e:	b29b      	uxth	r3, r3
 8009180:	029b      	lsls	r3, r3, #10
 8009182:	b29b      	uxth	r3, r3
 8009184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800918c:	b29a      	uxth	r2, r3
 800918e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009192:	801a      	strh	r2, [r3, #0]
 8009194:	e2f1      	b.n	800977a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009196:	463b      	mov	r3, r7
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	78db      	ldrb	r3, [r3, #3]
 800919c:	2b02      	cmp	r3, #2
 800919e:	f040 818f 	bne.w	80094c0 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80091a2:	463b      	mov	r3, r7
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	785b      	ldrb	r3, [r3, #1]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d175      	bne.n	8009298 <USB_EPStartXfer+0x10a4>
 80091ac:	1d3b      	adds	r3, r7, #4
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80091b4:	1d3b      	adds	r3, r7, #4
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091bc:	b29b      	uxth	r3, r3
 80091be:	461a      	mov	r2, r3
 80091c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80091c4:	4413      	add	r3, r2
 80091c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80091ca:	463b      	mov	r3, r7
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	011a      	lsls	r2, r3, #4
 80091d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80091d6:	4413      	add	r3, r2
 80091d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091e0:	463b      	mov	r3, r7
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d116      	bne.n	8009218 <USB_EPStartXfer+0x1024>
 80091ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091ee:	881b      	ldrh	r3, [r3, #0]
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091fc:	801a      	strh	r2, [r3, #0]
 80091fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009202:	881b      	ldrh	r3, [r3, #0]
 8009204:	b29b      	uxth	r3, r3
 8009206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800920a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800920e:	b29a      	uxth	r2, r3
 8009210:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009214:	801a      	strh	r2, [r3, #0]
 8009216:	e065      	b.n	80092e4 <USB_EPStartXfer+0x10f0>
 8009218:	463b      	mov	r3, r7
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	2b3e      	cmp	r3, #62	; 0x3e
 8009220:	d81a      	bhi.n	8009258 <USB_EPStartXfer+0x1064>
 8009222:	463b      	mov	r3, r7
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	085b      	lsrs	r3, r3, #1
 800922a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800922e:	463b      	mov	r3, r7
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	f003 0301 	and.w	r3, r3, #1
 8009238:	2b00      	cmp	r3, #0
 800923a:	d004      	beq.n	8009246 <USB_EPStartXfer+0x1052>
 800923c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009240:	3301      	adds	r3, #1
 8009242:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800924a:	b29b      	uxth	r3, r3
 800924c:	029b      	lsls	r3, r3, #10
 800924e:	b29a      	uxth	r2, r3
 8009250:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009254:	801a      	strh	r2, [r3, #0]
 8009256:	e045      	b.n	80092e4 <USB_EPStartXfer+0x10f0>
 8009258:	463b      	mov	r3, r7
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	095b      	lsrs	r3, r3, #5
 8009260:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009264:	463b      	mov	r3, r7
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	f003 031f 	and.w	r3, r3, #31
 800926e:	2b00      	cmp	r3, #0
 8009270:	d104      	bne.n	800927c <USB_EPStartXfer+0x1088>
 8009272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009276:	3b01      	subs	r3, #1
 8009278:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800927c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009280:	b29b      	uxth	r3, r3
 8009282:	029b      	lsls	r3, r3, #10
 8009284:	b29b      	uxth	r3, r3
 8009286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800928a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800928e:	b29a      	uxth	r2, r3
 8009290:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009294:	801a      	strh	r2, [r3, #0]
 8009296:	e025      	b.n	80092e4 <USB_EPStartXfer+0x10f0>
 8009298:	463b      	mov	r3, r7
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	785b      	ldrb	r3, [r3, #1]
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d120      	bne.n	80092e4 <USB_EPStartXfer+0x10f0>
 80092a2:	1d3b      	adds	r3, r7, #4
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80092aa:	1d3b      	adds	r3, r7, #4
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	461a      	mov	r2, r3
 80092b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80092ba:	4413      	add	r3, r2
 80092bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80092c0:	463b      	mov	r3, r7
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	011a      	lsls	r2, r3, #4
 80092c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80092cc:	4413      	add	r3, r2
 80092ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092d6:	463b      	mov	r3, r7
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	b29a      	uxth	r2, r3
 80092de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80092e2:	801a      	strh	r2, [r3, #0]
 80092e4:	1d3b      	adds	r3, r7, #4
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80092ec:	463b      	mov	r3, r7
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	785b      	ldrb	r3, [r3, #1]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d175      	bne.n	80093e2 <USB_EPStartXfer+0x11ee>
 80092f6:	1d3b      	adds	r3, r7, #4
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80092fe:	1d3b      	adds	r3, r7, #4
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009306:	b29b      	uxth	r3, r3
 8009308:	461a      	mov	r2, r3
 800930a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800930e:	4413      	add	r3, r2
 8009310:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009314:	463b      	mov	r3, r7
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	011a      	lsls	r2, r3, #4
 800931c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009320:	4413      	add	r3, r2
 8009322:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009326:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800932a:	463b      	mov	r3, r7
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d116      	bne.n	8009362 <USB_EPStartXfer+0x116e>
 8009334:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009338:	881b      	ldrh	r3, [r3, #0]
 800933a:	b29b      	uxth	r3, r3
 800933c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009340:	b29a      	uxth	r2, r3
 8009342:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009346:	801a      	strh	r2, [r3, #0]
 8009348:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800934c:	881b      	ldrh	r3, [r3, #0]
 800934e:	b29b      	uxth	r3, r3
 8009350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009358:	b29a      	uxth	r2, r3
 800935a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800935e:	801a      	strh	r2, [r3, #0]
 8009360:	e061      	b.n	8009426 <USB_EPStartXfer+0x1232>
 8009362:	463b      	mov	r3, r7
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	2b3e      	cmp	r3, #62	; 0x3e
 800936a:	d81a      	bhi.n	80093a2 <USB_EPStartXfer+0x11ae>
 800936c:	463b      	mov	r3, r7
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	085b      	lsrs	r3, r3, #1
 8009374:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009378:	463b      	mov	r3, r7
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d004      	beq.n	8009390 <USB_EPStartXfer+0x119c>
 8009386:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800938a:	3301      	adds	r3, #1
 800938c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009390:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009394:	b29b      	uxth	r3, r3
 8009396:	029b      	lsls	r3, r3, #10
 8009398:	b29a      	uxth	r2, r3
 800939a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800939e:	801a      	strh	r2, [r3, #0]
 80093a0:	e041      	b.n	8009426 <USB_EPStartXfer+0x1232>
 80093a2:	463b      	mov	r3, r7
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	095b      	lsrs	r3, r3, #5
 80093aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80093ae:	463b      	mov	r3, r7
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	f003 031f 	and.w	r3, r3, #31
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d104      	bne.n	80093c6 <USB_EPStartXfer+0x11d2>
 80093bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80093c0:	3b01      	subs	r3, #1
 80093c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80093c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	029b      	lsls	r3, r3, #10
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093d8:	b29a      	uxth	r2, r3
 80093da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80093de:	801a      	strh	r2, [r3, #0]
 80093e0:	e021      	b.n	8009426 <USB_EPStartXfer+0x1232>
 80093e2:	463b      	mov	r3, r7
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	785b      	ldrb	r3, [r3, #1]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d11c      	bne.n	8009426 <USB_EPStartXfer+0x1232>
 80093ec:	1d3b      	adds	r3, r7, #4
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	461a      	mov	r2, r3
 80093f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80093fc:	4413      	add	r3, r2
 80093fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009402:	463b      	mov	r3, r7
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	011a      	lsls	r2, r3, #4
 800940a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800940e:	4413      	add	r3, r2
 8009410:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009414:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009418:	463b      	mov	r3, r7
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	b29a      	uxth	r2, r3
 8009420:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009424:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009426:	463b      	mov	r3, r7
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 81a4 	beq.w	800977a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009432:	1d3b      	adds	r3, r7, #4
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	463b      	mov	r3, r7
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	881b      	ldrh	r3, [r3, #0]
 8009442:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009446:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800944a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800944e:	2b00      	cmp	r3, #0
 8009450:	d005      	beq.n	800945e <USB_EPStartXfer+0x126a>
 8009452:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800945a:	2b00      	cmp	r3, #0
 800945c:	d10d      	bne.n	800947a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800945e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009466:	2b00      	cmp	r3, #0
 8009468:	f040 8187 	bne.w	800977a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800946c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009474:	2b00      	cmp	r3, #0
 8009476:	f040 8180 	bne.w	800977a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800947a:	1d3b      	adds	r3, r7, #4
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	463b      	mov	r3, r7
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4413      	add	r3, r2
 8009488:	881b      	ldrh	r3, [r3, #0]
 800948a:	b29b      	uxth	r3, r3
 800948c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009494:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009498:	1d3b      	adds	r3, r7, #4
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	463b      	mov	r3, r7
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	441a      	add	r2, r3
 80094a6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80094aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	8013      	strh	r3, [r2, #0]
 80094be:	e15c      	b.n	800977a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80094c0:	463b      	mov	r3, r7
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	78db      	ldrb	r3, [r3, #3]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	f040 8155 	bne.w	8009776 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80094cc:	463b      	mov	r3, r7
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	699a      	ldr	r2, [r3, #24]
 80094d2:	463b      	mov	r3, r7
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d90e      	bls.n	80094fa <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80094dc:	463b      	mov	r3, r7
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80094e6:	463b      	mov	r3, r7
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	699a      	ldr	r2, [r3, #24]
 80094ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094f0:	1ad2      	subs	r2, r2, r3
 80094f2:	463b      	mov	r3, r7
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	619a      	str	r2, [r3, #24]
 80094f8:	e008      	b.n	800950c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80094fa:	463b      	mov	r3, r7
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009504:	463b      	mov	r3, r7
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2200      	movs	r2, #0
 800950a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800950c:	463b      	mov	r3, r7
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	785b      	ldrb	r3, [r3, #1]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d16f      	bne.n	80095f6 <USB_EPStartXfer+0x1402>
 8009516:	1d3b      	adds	r3, r7, #4
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800951e:	1d3b      	adds	r3, r7, #4
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009526:	b29b      	uxth	r3, r3
 8009528:	461a      	mov	r2, r3
 800952a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800952e:	4413      	add	r3, r2
 8009530:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009534:	463b      	mov	r3, r7
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	011a      	lsls	r2, r3, #4
 800953c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009540:	4413      	add	r3, r2
 8009542:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009546:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800954a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800954e:	2b00      	cmp	r3, #0
 8009550:	d116      	bne.n	8009580 <USB_EPStartXfer+0x138c>
 8009552:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	b29b      	uxth	r3, r3
 800955a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800955e:	b29a      	uxth	r2, r3
 8009560:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009564:	801a      	strh	r2, [r3, #0]
 8009566:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	b29b      	uxth	r3, r3
 800956e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009576:	b29a      	uxth	r2, r3
 8009578:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800957c:	801a      	strh	r2, [r3, #0]
 800957e:	e05f      	b.n	8009640 <USB_EPStartXfer+0x144c>
 8009580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009584:	2b3e      	cmp	r3, #62	; 0x3e
 8009586:	d818      	bhi.n	80095ba <USB_EPStartXfer+0x13c6>
 8009588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800958c:	085b      	lsrs	r3, r3, #1
 800958e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d004      	beq.n	80095a8 <USB_EPStartXfer+0x13b4>
 800959e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095a2:	3301      	adds	r3, #1
 80095a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80095a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	029b      	lsls	r3, r3, #10
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095b6:	801a      	strh	r2, [r3, #0]
 80095b8:	e042      	b.n	8009640 <USB_EPStartXfer+0x144c>
 80095ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095be:	095b      	lsrs	r3, r3, #5
 80095c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80095c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095c8:	f003 031f 	and.w	r3, r3, #31
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d104      	bne.n	80095da <USB_EPStartXfer+0x13e6>
 80095d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095d4:	3b01      	subs	r3, #1
 80095d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80095da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095de:	b29b      	uxth	r3, r3
 80095e0:	029b      	lsls	r3, r3, #10
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095f2:	801a      	strh	r2, [r3, #0]
 80095f4:	e024      	b.n	8009640 <USB_EPStartXfer+0x144c>
 80095f6:	463b      	mov	r3, r7
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	785b      	ldrb	r3, [r3, #1]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d11f      	bne.n	8009640 <USB_EPStartXfer+0x144c>
 8009600:	1d3b      	adds	r3, r7, #4
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009608:	1d3b      	adds	r3, r7, #4
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009610:	b29b      	uxth	r3, r3
 8009612:	461a      	mov	r2, r3
 8009614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009618:	4413      	add	r3, r2
 800961a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800961e:	463b      	mov	r3, r7
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	011a      	lsls	r2, r3, #4
 8009626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800962a:	4413      	add	r3, r2
 800962c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009630:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009634:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009638:	b29a      	uxth	r2, r3
 800963a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800963e:	801a      	strh	r2, [r3, #0]
 8009640:	1d3b      	adds	r3, r7, #4
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009648:	463b      	mov	r3, r7
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	785b      	ldrb	r3, [r3, #1]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d16f      	bne.n	8009732 <USB_EPStartXfer+0x153e>
 8009652:	1d3b      	adds	r3, r7, #4
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800965a:	1d3b      	adds	r3, r7, #4
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009662:	b29b      	uxth	r3, r3
 8009664:	461a      	mov	r2, r3
 8009666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800966a:	4413      	add	r3, r2
 800966c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009670:	463b      	mov	r3, r7
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	011a      	lsls	r2, r3, #4
 8009678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800967c:	4413      	add	r3, r2
 800967e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009686:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800968a:	2b00      	cmp	r3, #0
 800968c:	d116      	bne.n	80096bc <USB_EPStartXfer+0x14c8>
 800968e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	b29b      	uxth	r3, r3
 8009696:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800969a:	b29a      	uxth	r2, r3
 800969c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096a0:	801a      	strh	r2, [r3, #0]
 80096a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096a6:	881b      	ldrh	r3, [r3, #0]
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096b8:	801a      	strh	r2, [r3, #0]
 80096ba:	e05e      	b.n	800977a <USB_EPStartXfer+0x1586>
 80096bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096c0:	2b3e      	cmp	r3, #62	; 0x3e
 80096c2:	d818      	bhi.n	80096f6 <USB_EPStartXfer+0x1502>
 80096c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096c8:	085b      	lsrs	r3, r3, #1
 80096ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80096ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096d2:	f003 0301 	and.w	r3, r3, #1
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d004      	beq.n	80096e4 <USB_EPStartXfer+0x14f0>
 80096da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80096de:	3301      	adds	r3, #1
 80096e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80096e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	029b      	lsls	r3, r3, #10
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096f2:	801a      	strh	r2, [r3, #0]
 80096f4:	e041      	b.n	800977a <USB_EPStartXfer+0x1586>
 80096f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096fa:	095b      	lsrs	r3, r3, #5
 80096fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009704:	f003 031f 	and.w	r3, r3, #31
 8009708:	2b00      	cmp	r3, #0
 800970a:	d104      	bne.n	8009716 <USB_EPStartXfer+0x1522>
 800970c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009710:	3b01      	subs	r3, #1
 8009712:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800971a:	b29b      	uxth	r3, r3
 800971c:	029b      	lsls	r3, r3, #10
 800971e:	b29b      	uxth	r3, r3
 8009720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009728:	b29a      	uxth	r2, r3
 800972a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800972e:	801a      	strh	r2, [r3, #0]
 8009730:	e023      	b.n	800977a <USB_EPStartXfer+0x1586>
 8009732:	463b      	mov	r3, r7
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	785b      	ldrb	r3, [r3, #1]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d11e      	bne.n	800977a <USB_EPStartXfer+0x1586>
 800973c:	1d3b      	adds	r3, r7, #4
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009744:	b29b      	uxth	r3, r3
 8009746:	461a      	mov	r2, r3
 8009748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800974c:	4413      	add	r3, r2
 800974e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009752:	463b      	mov	r3, r7
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	011a      	lsls	r2, r3, #4
 800975a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800975e:	4413      	add	r3, r2
 8009760:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009764:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800976c:	b29a      	uxth	r2, r3
 800976e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009772:	801a      	strh	r2, [r3, #0]
 8009774:	e001      	b.n	800977a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e02e      	b.n	80097d8 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800977a:	1d3b      	adds	r3, r7, #4
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	463b      	mov	r3, r7
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	4413      	add	r3, r2
 8009788:	881b      	ldrh	r3, [r3, #0]
 800978a:	b29b      	uxth	r3, r3
 800978c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009794:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009798:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800979c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80097a0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80097a4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80097a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80097ac:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80097b0:	1d3b      	adds	r3, r7, #4
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	463b      	mov	r3, r7
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	441a      	add	r2, r3
 80097be:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80097c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80097e2:	b480      	push	{r7}
 80097e4:	b085      	sub	sp, #20
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
 80097ea:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	785b      	ldrb	r3, [r3, #1]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d020      	beq.n	8009836 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	881b      	ldrh	r3, [r3, #0]
 8009800:	b29b      	uxth	r3, r3
 8009802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800980a:	81bb      	strh	r3, [r7, #12]
 800980c:	89bb      	ldrh	r3, [r7, #12]
 800980e:	f083 0310 	eor.w	r3, r3, #16
 8009812:	81bb      	strh	r3, [r7, #12]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	441a      	add	r2, r3
 800981e:	89bb      	ldrh	r3, [r7, #12]
 8009820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800982c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009830:	b29b      	uxth	r3, r3
 8009832:	8013      	strh	r3, [r2, #0]
 8009834:	e01f      	b.n	8009876 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	881b      	ldrh	r3, [r3, #0]
 8009842:	b29b      	uxth	r3, r3
 8009844:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800984c:	81fb      	strh	r3, [r7, #14]
 800984e:	89fb      	ldrh	r3, [r7, #14]
 8009850:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009854:	81fb      	strh	r3, [r7, #14]
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	441a      	add	r2, r3
 8009860:	89fb      	ldrh	r3, [r7, #14]
 8009862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800986a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800986e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009872:	b29b      	uxth	r3, r3
 8009874:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3714      	adds	r7, #20
 800987c:	46bd      	mov	sp, r7
 800987e:	bc80      	pop	{r7}
 8009880:	4770      	bx	lr

08009882 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009882:	b480      	push	{r7}
 8009884:	b087      	sub	sp, #28
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	7b1b      	ldrb	r3, [r3, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	f040 809d 	bne.w	80099d0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	785b      	ldrb	r3, [r3, #1]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d04c      	beq.n	8009938 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4413      	add	r3, r2
 80098a8:	881b      	ldrh	r3, [r3, #0]
 80098aa:	823b      	strh	r3, [r7, #16]
 80098ac:	8a3b      	ldrh	r3, [r7, #16]
 80098ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d01b      	beq.n	80098ee <USB_EPClearStall+0x6c>
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	881b      	ldrh	r3, [r3, #0]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098cc:	81fb      	strh	r3, [r7, #14]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	441a      	add	r2, r3
 80098d8:	89fb      	ldrh	r3, [r7, #14]
 80098da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	78db      	ldrb	r3, [r3, #3]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d06c      	beq.n	80099d0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	b29b      	uxth	r3, r3
 8009904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800990c:	81bb      	strh	r3, [r7, #12]
 800990e:	89bb      	ldrh	r3, [r7, #12]
 8009910:	f083 0320 	eor.w	r3, r3, #32
 8009914:	81bb      	strh	r3, [r7, #12]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	441a      	add	r2, r3
 8009920:	89bb      	ldrh	r3, [r7, #12]
 8009922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800992a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800992e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009932:	b29b      	uxth	r3, r3
 8009934:	8013      	strh	r3, [r2, #0]
 8009936:	e04b      	b.n	80099d0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	82fb      	strh	r3, [r7, #22]
 8009946:	8afb      	ldrh	r3, [r7, #22]
 8009948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800994c:	2b00      	cmp	r3, #0
 800994e:	d01b      	beq.n	8009988 <USB_EPClearStall+0x106>
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4413      	add	r3, r2
 800995a:	881b      	ldrh	r3, [r3, #0]
 800995c:	b29b      	uxth	r3, r3
 800995e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009966:	82bb      	strh	r3, [r7, #20]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	441a      	add	r2, r3
 8009972:	8abb      	ldrh	r3, [r7, #20]
 8009974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800997c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009984:	b29b      	uxth	r3, r3
 8009986:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	4413      	add	r3, r2
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	b29b      	uxth	r3, r3
 8009996:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800999a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800999e:	827b      	strh	r3, [r7, #18]
 80099a0:	8a7b      	ldrh	r3, [r7, #18]
 80099a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099a6:	827b      	strh	r3, [r7, #18]
 80099a8:	8a7b      	ldrh	r3, [r7, #18]
 80099aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099ae:	827b      	strh	r3, [r7, #18]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	441a      	add	r2, r3
 80099ba:	8a7b      	ldrh	r3, [r7, #18]
 80099bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	371c      	adds	r7, #28
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bc80      	pop	{r7}
 80099da:	4770      	bx	lr

080099dc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	460b      	mov	r3, r1
 80099e6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80099e8:	78fb      	ldrb	r3, [r7, #3]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d103      	bne.n	80099f6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2280      	movs	r2, #128	; 0x80
 80099f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bc80      	pop	{r7}
 8009a00:	4770      	bx	lr

08009a02 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009a02:	b480      	push	{r7}
 8009a04:	b083      	sub	sp, #12
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bc80      	pop	{r7}
 8009a14:	4770      	bx	lr

08009a16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009a16:	b480      	push	{r7}
 8009a18:	b083      	sub	sp, #12
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bc80      	pop	{r7}
 8009a28:	4770      	bx	lr

08009a2a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009a2a:	b480      	push	{r7}
 8009a2c:	b085      	sub	sp, #20
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bc80      	pop	{r7}
 8009a46:	4770      	bx	lr

08009a48 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bc80      	pop	{r7}
 8009a5c:	4770      	bx	lr

08009a5e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009a5e:	b480      	push	{r7}
 8009a60:	b08d      	sub	sp, #52	; 0x34
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	60f8      	str	r0, [r7, #12]
 8009a66:	60b9      	str	r1, [r7, #8]
 8009a68:	4611      	mov	r1, r2
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	80fb      	strh	r3, [r7, #6]
 8009a70:	4613      	mov	r3, r2
 8009a72:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009a74:	88bb      	ldrh	r3, [r7, #4]
 8009a76:	3301      	adds	r3, #1
 8009a78:	085b      	lsrs	r3, r3, #1
 8009a7a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009a84:	88fb      	ldrh	r3, [r7, #6]
 8009a86:	005a      	lsls	r2, r3, #1
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a90:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a96:	e01e      	b.n	8009ad6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	021b      	lsls	r3, r3, #8
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	461a      	mov	r2, r3
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac0:	3302      	adds	r3, #2
 8009ac2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac6:	3302      	adds	r3, #2
 8009ac8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	3301      	adds	r3, #1
 8009ace:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1dd      	bne.n	8009a98 <USB_WritePMA+0x3a>
  }
}
 8009adc:	bf00      	nop
 8009ade:	bf00      	nop
 8009ae0:	3734      	adds	r7, #52	; 0x34
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bc80      	pop	{r7}
 8009ae6:	4770      	bx	lr

08009ae8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b08b      	sub	sp, #44	; 0x2c
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	4611      	mov	r1, r2
 8009af4:	461a      	mov	r2, r3
 8009af6:	460b      	mov	r3, r1
 8009af8:	80fb      	strh	r3, [r7, #6]
 8009afa:	4613      	mov	r3, r2
 8009afc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009afe:	88bb      	ldrh	r3, [r7, #4]
 8009b00:	085b      	lsrs	r3, r3, #1
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b0e:	88fb      	ldrh	r3, [r7, #6]
 8009b10:	005a      	lsls	r2, r3, #1
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	4413      	add	r3, r2
 8009b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b1a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b20:	e01b      	b.n	8009b5a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	881b      	ldrh	r3, [r3, #0]
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	3302      	adds	r3, #2
 8009b2e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	b2da      	uxtb	r2, r3
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	0a1b      	lsrs	r3, r3, #8
 8009b42:	b2da      	uxtb	r2, r3
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	3302      	adds	r3, #2
 8009b52:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	3b01      	subs	r3, #1
 8009b58:	627b      	str	r3, [r7, #36]	; 0x24
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1e0      	bne.n	8009b22 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009b60:	88bb      	ldrh	r3, [r7, #4]
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d007      	beq.n	8009b7c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	881b      	ldrh	r3, [r3, #0]
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	701a      	strb	r2, [r3, #0]
  }
}
 8009b7c:	bf00      	nop
 8009b7e:	372c      	adds	r7, #44	; 0x2c
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bc80      	pop	{r7}
 8009b84:	4770      	bx	lr

08009b86 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	460b      	mov	r3, r1
 8009b90:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009b92:	2300      	movs	r3, #0
 8009b94:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	7c1b      	ldrb	r3, [r3, #16]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d115      	bne.n	8009bca <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	2181      	movs	r1, #129	; 0x81
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f005 f80f 	bl	800ebca <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bb6:	2202      	movs	r2, #2
 8009bb8:	2101      	movs	r1, #1
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f005 f805 	bl	800ebca <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009bc8:	e012      	b.n	8009bf0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009bca:	2340      	movs	r3, #64	; 0x40
 8009bcc:	2202      	movs	r2, #2
 8009bce:	2181      	movs	r1, #129	; 0x81
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f004 fffa 	bl	800ebca <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009bdc:	2340      	movs	r3, #64	; 0x40
 8009bde:	2202      	movs	r2, #2
 8009be0:	2101      	movs	r1, #1
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f004 fff1 	bl	800ebca <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009bf0:	2308      	movs	r3, #8
 8009bf2:	2203      	movs	r2, #3
 8009bf4:	2182      	movs	r1, #130	; 0x82
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f004 ffe7 	bl	800ebca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009c02:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009c06:	f005 f907 	bl	800ee18 <USBD_static_malloc>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d102      	bne.n	8009c22 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	73fb      	strb	r3, [r7, #15]
 8009c20:	e026      	b.n	8009c70 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c28:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	2200      	movs	r2, #0
 8009c38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	7c1b      	ldrb	r3, [r3, #16]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d109      	bne.n	8009c60 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c56:	2101      	movs	r1, #1
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f005 f8a7 	bl	800edac <USBD_LL_PrepareReceive>
 8009c5e:	e007      	b.n	8009c70 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c66:	2340      	movs	r3, #64	; 0x40
 8009c68:	2101      	movs	r1, #1
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f005 f89e 	bl	800edac <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b084      	sub	sp, #16
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
 8009c82:	460b      	mov	r3, r1
 8009c84:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009c86:	2300      	movs	r3, #0
 8009c88:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009c8a:	2181      	movs	r1, #129	; 0x81
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f004 ffc2 	bl	800ec16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009c98:	2101      	movs	r1, #1
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f004 ffbb 	bl	800ec16 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009ca8:	2182      	movs	r1, #130	; 0x82
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f004 ffb3 	bl	800ec16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00e      	beq.n	8009cde <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f005 f8ad 	bl	800ee30 <USBD_static_free>
    pdev->pClassData = NULL;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cf8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009d02:	2300      	movs	r3, #0
 8009d04:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d039      	beq.n	8009d86 <USBD_CDC_Setup+0x9e>
 8009d12:	2b20      	cmp	r3, #32
 8009d14:	d17f      	bne.n	8009e16 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	88db      	ldrh	r3, [r3, #6]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d029      	beq.n	8009d72 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	b25b      	sxtb	r3, r3
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	da11      	bge.n	8009d4c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009d34:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	88d2      	ldrh	r2, [r2, #6]
 8009d3a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009d3c:	6939      	ldr	r1, [r7, #16]
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	88db      	ldrh	r3, [r3, #6]
 8009d42:	461a      	mov	r2, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f001 fa0a 	bl	800b15e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009d4a:	e06b      	b.n	8009e24 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	785a      	ldrb	r2, [r3, #1]
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	88db      	ldrh	r3, [r3, #6]
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009d62:	6939      	ldr	r1, [r7, #16]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	88db      	ldrh	r3, [r3, #6]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f001 fa25 	bl	800b1ba <USBD_CtlPrepareRx>
      break;
 8009d70:	e058      	b.n	8009e24 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	7850      	ldrb	r0, [r2, #1]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	4798      	blx	r3
      break;
 8009d84:	e04e      	b.n	8009e24 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	785b      	ldrb	r3, [r3, #1]
 8009d8a:	2b0b      	cmp	r3, #11
 8009d8c:	d02e      	beq.n	8009dec <USBD_CDC_Setup+0x104>
 8009d8e:	2b0b      	cmp	r3, #11
 8009d90:	dc38      	bgt.n	8009e04 <USBD_CDC_Setup+0x11c>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d002      	beq.n	8009d9c <USBD_CDC_Setup+0xb4>
 8009d96:	2b0a      	cmp	r3, #10
 8009d98:	d014      	beq.n	8009dc4 <USBD_CDC_Setup+0xdc>
 8009d9a:	e033      	b.n	8009e04 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	d107      	bne.n	8009db6 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009da6:	f107 030c 	add.w	r3, r7, #12
 8009daa:	2202      	movs	r2, #2
 8009dac:	4619      	mov	r1, r3
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f001 f9d5 	bl	800b15e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009db4:	e02e      	b.n	8009e14 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f001 f966 	bl	800b08a <USBD_CtlError>
            ret = USBD_FAIL;
 8009dbe:	2302      	movs	r3, #2
 8009dc0:	75fb      	strb	r3, [r7, #23]
          break;
 8009dc2:	e027      	b.n	8009e14 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	d107      	bne.n	8009dde <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009dce:	f107 030f 	add.w	r3, r7, #15
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f001 f9c1 	bl	800b15e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ddc:	e01a      	b.n	8009e14 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009dde:	6839      	ldr	r1, [r7, #0]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f001 f952 	bl	800b08a <USBD_CtlError>
            ret = USBD_FAIL;
 8009de6:	2302      	movs	r3, #2
 8009de8:	75fb      	strb	r3, [r7, #23]
          break;
 8009dea:	e013      	b.n	8009e14 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009df2:	2b03      	cmp	r3, #3
 8009df4:	d00d      	beq.n	8009e12 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009df6:	6839      	ldr	r1, [r7, #0]
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f001 f946 	bl	800b08a <USBD_CtlError>
            ret = USBD_FAIL;
 8009dfe:	2302      	movs	r3, #2
 8009e00:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009e02:	e006      	b.n	8009e12 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009e04:	6839      	ldr	r1, [r7, #0]
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f001 f93f 	bl	800b08a <USBD_CtlError>
          ret = USBD_FAIL;
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	75fb      	strb	r3, [r7, #23]
          break;
 8009e10:	e000      	b.n	8009e14 <USBD_CDC_Setup+0x12c>
          break;
 8009e12:	bf00      	nop
      }
      break;
 8009e14:	e006      	b.n	8009e24 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009e16:	6839      	ldr	r1, [r7, #0]
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f001 f936 	bl	800b08a <USBD_CtlError>
      ret = USBD_FAIL;
 8009e1e:	2302      	movs	r3, #2
 8009e20:	75fb      	strb	r3, [r7, #23]
      break;
 8009e22:	bf00      	nop
  }

  return ret;
 8009e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3718      	adds	r7, #24
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b084      	sub	sp, #16
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
 8009e36:	460b      	mov	r3, r1
 8009e38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e40:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e48:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d03a      	beq.n	8009eca <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009e54:	78fa      	ldrb	r2, [r7, #3]
 8009e56:	6879      	ldr	r1, [r7, #4]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4413      	add	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	440b      	add	r3, r1
 8009e62:	331c      	adds	r3, #28
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d029      	beq.n	8009ebe <USBD_CDC_DataIn+0x90>
 8009e6a:	78fa      	ldrb	r2, [r7, #3]
 8009e6c:	6879      	ldr	r1, [r7, #4]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	440b      	add	r3, r1
 8009e78:	331c      	adds	r3, #28
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	78f9      	ldrb	r1, [r7, #3]
 8009e7e:	68b8      	ldr	r0, [r7, #8]
 8009e80:	460b      	mov	r3, r1
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	440b      	add	r3, r1
 8009e86:	00db      	lsls	r3, r3, #3
 8009e88:	4403      	add	r3, r0
 8009e8a:	3338      	adds	r3, #56	; 0x38
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	fbb2 f1f3 	udiv	r1, r2, r3
 8009e92:	fb03 f301 	mul.w	r3, r3, r1
 8009e96:	1ad3      	subs	r3, r2, r3
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d110      	bne.n	8009ebe <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009e9c:	78fa      	ldrb	r2, [r7, #3]
 8009e9e:	6879      	ldr	r1, [r7, #4]
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4413      	add	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	440b      	add	r3, r1
 8009eaa:	331c      	adds	r3, #28
 8009eac:	2200      	movs	r2, #0
 8009eae:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009eb0:	78f9      	ldrb	r1, [r7, #3]
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f004 ff55 	bl	800ed66 <USBD_LL_Transmit>
 8009ebc:	e003      	b.n	8009ec6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	e000      	b.n	8009ecc <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009eca:	2302      	movs	r3, #2
  }
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	460b      	mov	r3, r1
 8009ede:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ee6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009ee8:	78fb      	ldrb	r3, [r7, #3]
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f004 ff80 	bl	800edf2 <USBD_LL_GetRxDataSize>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00d      	beq.n	8009f20 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009f18:	4611      	mov	r1, r2
 8009f1a:	4798      	blx	r3

    return USBD_OK;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	e000      	b.n	8009f22 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009f20:	2302      	movs	r3, #2
  }
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f38:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d015      	beq.n	8009f70 <USBD_CDC_EP0_RxReady+0x46>
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009f4a:	2bff      	cmp	r3, #255	; 0xff
 8009f4c:	d010      	beq.n	8009f70 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009f5c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009f64:	b292      	uxth	r2, r2
 8009f66:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	22ff      	movs	r2, #255	; 0xff
 8009f6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
	...

08009f7c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2243      	movs	r2, #67	; 0x43
 8009f88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009f8a:	4b03      	ldr	r3, [pc, #12]	; (8009f98 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bc80      	pop	{r7}
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	200000a4 	.word	0x200000a4

08009f9c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2243      	movs	r2, #67	; 0x43
 8009fa8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009faa:	4b03      	ldr	r3, [pc, #12]	; (8009fb8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bc80      	pop	{r7}
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	20000060 	.word	0x20000060

08009fbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2243      	movs	r2, #67	; 0x43
 8009fc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009fca:	4b03      	ldr	r3, [pc, #12]	; (8009fd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bc80      	pop	{r7}
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop
 8009fd8:	200000e8 	.word	0x200000e8

08009fdc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	220a      	movs	r2, #10
 8009fe8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009fea:	4b03      	ldr	r3, [pc, #12]	; (8009ff8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bc80      	pop	{r7}
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	2000001c 	.word	0x2000001c

08009ffc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a006:	2302      	movs	r3, #2
 800a008:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d005      	beq.n	800a01c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a018:	2300      	movs	r3, #0
 800a01a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3714      	adds	r7, #20
 800a022:	46bd      	mov	sp, r7
 800a024:	bc80      	pop	{r7}
 800a026:	4770      	bx	lr

0800a028 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a028:	b480      	push	{r7}
 800a02a:	b087      	sub	sp, #28
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	4613      	mov	r3, r2
 800a034:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a03c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	68ba      	ldr	r2, [r7, #8]
 800a042:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a046:	88fa      	ldrh	r2, [r7, #6]
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	371c      	adds	r7, #28
 800a054:	46bd      	mov	sp, r7
 800a056:	bc80      	pop	{r7}
 800a058:	4770      	bx	lr

0800a05a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b085      	sub	sp, #20
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a06a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	683a      	ldr	r2, [r7, #0]
 800a070:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bc80      	pop	{r7}
 800a07e:	4770      	bx	lr

0800a080 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a08e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a096:	2b00      	cmp	r3, #0
 800a098:	d01c      	beq.n	800a0d4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d115      	bne.n	800a0d0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	2181      	movs	r1, #129	; 0x81
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f004 fe4d 	bl	800ed66 <USBD_LL_Transmit>

      return USBD_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	e002      	b.n	800a0d6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e000      	b.n	800a0d6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a0d4:	2302      	movs	r3, #2
  }
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b084      	sub	sp, #16
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ec:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d017      	beq.n	800a128 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	7c1b      	ldrb	r3, [r3, #16]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d109      	bne.n	800a114 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a106:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a10a:	2101      	movs	r1, #1
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f004 fe4d 	bl	800edac <USBD_LL_PrepareReceive>
 800a112:	e007      	b.n	800a124 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a11a:	2340      	movs	r3, #64	; 0x40
 800a11c:	2101      	movs	r1, #1
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f004 fe44 	bl	800edac <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	e000      	b.n	800a12a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a128:	2302      	movs	r3, #2
  }
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b084      	sub	sp, #16
 800a136:	af00      	add	r7, sp, #0
 800a138:	60f8      	str	r0, [r7, #12]
 800a13a:	60b9      	str	r1, [r7, #8]
 800a13c:	4613      	mov	r3, r2
 800a13e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d101      	bne.n	800a14a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a146:	2302      	movs	r3, #2
 800a148:	e01a      	b.n	800a180 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a150:	2b00      	cmp	r3, #0
 800a152:	d003      	beq.n	800a15c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2200      	movs	r2, #0
 800a158:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d003      	beq.n	800a16a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	68ba      	ldr	r2, [r7, #8]
 800a166:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2201      	movs	r2, #1
 800a16e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	79fa      	ldrb	r2, [r7, #7]
 800a176:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f004 fcb1 	bl	800eae0 <USBD_LL_Init>

  return USBD_OK;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d006      	beq.n	800a1aa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	683a      	ldr	r2, [r7, #0]
 800a1a0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	73fb      	strb	r3, [r7, #15]
 800a1a8:	e001      	b.n	800a1ae <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a1aa:	2302      	movs	r3, #2
 800a1ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3714      	adds	r7, #20
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bc80      	pop	{r7}
 800a1b8:	4770      	bx	lr

0800a1ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b082      	sub	sp, #8
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f004 fce6 	bl	800eb94 <USBD_LL_Start>

  return USBD_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a1d2:	b480      	push	{r7}
 800a1d4:	b083      	sub	sp, #12
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bc80      	pop	{r7}
 800a1e4:	4770      	bx	lr

0800a1e6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00c      	beq.n	800a21a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	78fa      	ldrb	r2, [r7, #3]
 800a20a:	4611      	mov	r1, r2
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	4798      	blx	r3
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d101      	bne.n	800a21a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a216:	2300      	movs	r3, #0
 800a218:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	460b      	mov	r3, r1
 800a22e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	78fa      	ldrb	r2, [r7, #3]
 800a23a:	4611      	mov	r1, r2
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	4798      	blx	r3

  return USBD_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b082      	sub	sp, #8
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
 800a252:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a25a:	6839      	ldr	r1, [r7, #0]
 800a25c:	4618      	mov	r0, r3
 800a25e:	f000 fed8 	bl	800b012 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a270:	461a      	mov	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a27e:	f003 031f 	and.w	r3, r3, #31
 800a282:	2b02      	cmp	r3, #2
 800a284:	d016      	beq.n	800a2b4 <USBD_LL_SetupStage+0x6a>
 800a286:	2b02      	cmp	r3, #2
 800a288:	d81c      	bhi.n	800a2c4 <USBD_LL_SetupStage+0x7a>
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d002      	beq.n	800a294 <USBD_LL_SetupStage+0x4a>
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d008      	beq.n	800a2a4 <USBD_LL_SetupStage+0x5a>
 800a292:	e017      	b.n	800a2c4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a29a:	4619      	mov	r1, r3
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 f9cb 	bl	800a638 <USBD_StdDevReq>
      break;
 800a2a2:	e01a      	b.n	800a2da <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fa2d 	bl	800a70c <USBD_StdItfReq>
      break;
 800a2b2:	e012      	b.n	800a2da <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fa6d 	bl	800a79c <USBD_StdEPReq>
      break;
 800a2c2:	e00a      	b.n	800a2da <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a2ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f004 fcbe 	bl	800ec54 <USBD_LL_StallEP>
      break;
 800a2d8:	bf00      	nop
  }

  return USBD_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	607a      	str	r2, [r7, #4]
 800a2f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a2f2:	7afb      	ldrb	r3, [r7, #11]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d14b      	bne.n	800a390 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a2fe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a306:	2b03      	cmp	r3, #3
 800a308:	d134      	bne.n	800a374 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	68da      	ldr	r2, [r3, #12]
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	429a      	cmp	r2, r3
 800a314:	d919      	bls.n	800a34a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	68da      	ldr	r2, [r3, #12]
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	691b      	ldr	r3, [r3, #16]
 800a31e:	1ad2      	subs	r2, r2, r3
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	68da      	ldr	r2, [r3, #12]
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d203      	bcs.n	800a338 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a334:	b29b      	uxth	r3, r3
 800a336:	e002      	b.n	800a33e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	461a      	mov	r2, r3
 800a340:	6879      	ldr	r1, [r7, #4]
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f000 ff57 	bl	800b1f6 <USBD_CtlContinueRx>
 800a348:	e038      	b.n	800a3bc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00a      	beq.n	800a36c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a35c:	2b03      	cmp	r3, #3
 800a35e:	d105      	bne.n	800a36c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f000 ff54 	bl	800b21a <USBD_CtlSendStatus>
 800a372:	e023      	b.n	800a3bc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a37a:	2b05      	cmp	r3, #5
 800a37c:	d11e      	bne.n	800a3bc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a386:	2100      	movs	r1, #0
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f004 fc63 	bl	800ec54 <USBD_LL_StallEP>
 800a38e:	e015      	b.n	800a3bc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a396:	699b      	ldr	r3, [r3, #24]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00d      	beq.n	800a3b8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a3a2:	2b03      	cmp	r3, #3
 800a3a4:	d108      	bne.n	800a3b8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	7afa      	ldrb	r2, [r7, #11]
 800a3b0:	4611      	mov	r1, r2
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	4798      	blx	r3
 800a3b6:	e001      	b.n	800a3bc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	e000      	b.n	800a3be <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3718      	adds	r7, #24
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b086      	sub	sp, #24
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	60f8      	str	r0, [r7, #12]
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	607a      	str	r2, [r7, #4]
 800a3d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a3d4:	7afb      	ldrb	r3, [r7, #11]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d17f      	bne.n	800a4da <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	3314      	adds	r3, #20
 800a3de:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d15c      	bne.n	800a4a4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	68da      	ldr	r2, [r3, #12]
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d915      	bls.n	800a422 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	68da      	ldr	r2, [r3, #12]
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	1ad2      	subs	r2, r2, r3
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	b29b      	uxth	r3, r3
 800a40a:	461a      	mov	r2, r3
 800a40c:	6879      	ldr	r1, [r7, #4]
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f000 fec1 	bl	800b196 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a414:	2300      	movs	r3, #0
 800a416:	2200      	movs	r2, #0
 800a418:	2100      	movs	r1, #0
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f004 fcc6 	bl	800edac <USBD_LL_PrepareReceive>
 800a420:	e04e      	b.n	800a4c0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	697a      	ldr	r2, [r7, #20]
 800a428:	6912      	ldr	r2, [r2, #16]
 800a42a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a42e:	fb02 f201 	mul.w	r2, r2, r1
 800a432:	1a9b      	subs	r3, r3, r2
 800a434:	2b00      	cmp	r3, #0
 800a436:	d11c      	bne.n	800a472 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	689a      	ldr	r2, [r3, #8]
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a440:	429a      	cmp	r2, r3
 800a442:	d316      	bcc.n	800a472 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	689a      	ldr	r2, [r3, #8]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a44e:	429a      	cmp	r2, r3
 800a450:	d20f      	bcs.n	800a472 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a452:	2200      	movs	r2, #0
 800a454:	2100      	movs	r1, #0
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f000 fe9d 	bl	800b196 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a464:	2300      	movs	r3, #0
 800a466:	2200      	movs	r2, #0
 800a468:	2100      	movs	r1, #0
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f004 fc9e 	bl	800edac <USBD_LL_PrepareReceive>
 800a470:	e026      	b.n	800a4c0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00a      	beq.n	800a494 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a484:	2b03      	cmp	r3, #3
 800a486:	d105      	bne.n	800a494 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a494:	2180      	movs	r1, #128	; 0x80
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	f004 fbdc 	bl	800ec54 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f000 fecf 	bl	800b240 <USBD_CtlReceiveStatus>
 800a4a2:	e00d      	b.n	800a4c0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4aa:	2b04      	cmp	r3, #4
 800a4ac:	d004      	beq.n	800a4b8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d103      	bne.n	800a4c0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a4b8:	2180      	movs	r1, #128	; 0x80
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f004 fbca 	bl	800ec54 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d11d      	bne.n	800a506 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f7ff fe81 	bl	800a1d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a4d8:	e015      	b.n	800a506 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4e0:	695b      	ldr	r3, [r3, #20]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00d      	beq.n	800a502 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a4ec:	2b03      	cmp	r3, #3
 800a4ee:	d108      	bne.n	800a502 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4f6:	695b      	ldr	r3, [r3, #20]
 800a4f8:	7afa      	ldrb	r2, [r7, #11]
 800a4fa:	4611      	mov	r1, r2
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	4798      	blx	r3
 800a500:	e001      	b.n	800a506 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a502:	2302      	movs	r3, #2
 800a504:	e000      	b.n	800a508 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3718      	adds	r7, #24
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a518:	2340      	movs	r3, #64	; 0x40
 800a51a:	2200      	movs	r2, #0
 800a51c:	2100      	movs	r1, #0
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f004 fb53 	bl	800ebca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2240      	movs	r2, #64	; 0x40
 800a530:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a534:	2340      	movs	r3, #64	; 0x40
 800a536:	2200      	movs	r2, #0
 800a538:	2180      	movs	r1, #128	; 0x80
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f004 fb45 	bl	800ebca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2240      	movs	r2, #64	; 0x40
 800a54a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a570:	2b00      	cmp	r3, #0
 800a572:	d009      	beq.n	800a588 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	6852      	ldr	r2, [r2, #4]
 800a580:	b2d2      	uxtb	r2, r2
 800a582:	4611      	mov	r1, r2
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	4798      	blx	r3
  }

  return USBD_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a592:	b480      	push	{r7}
 800a594:	b083      	sub	sp, #12
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	460b      	mov	r3, r1
 800a59c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	78fa      	ldrb	r2, [r7, #3]
 800a5a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bc80      	pop	{r7}
 800a5ae:	4770      	bx	lr

0800a5b0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2204      	movs	r2, #4
 800a5c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a5cc:	2300      	movs	r3, #0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	370c      	adds	r7, #12
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bc80      	pop	{r7}
 800a5d6:	4770      	bx	lr

0800a5d8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5e6:	2b04      	cmp	r3, #4
 800a5e8:	d105      	bne.n	800a5f6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bc80      	pop	{r7}
 800a600:	4770      	bx	lr

0800a602 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b082      	sub	sp, #8
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a610:	2b03      	cmp	r3, #3
 800a612:	d10b      	bne.n	800a62c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a61a:	69db      	ldr	r3, [r3, #28]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d005      	beq.n	800a62c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a626:	69db      	ldr	r3, [r3, #28]
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3708      	adds	r7, #8
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
	...

0800a638 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a64e:	2b40      	cmp	r3, #64	; 0x40
 800a650:	d005      	beq.n	800a65e <USBD_StdDevReq+0x26>
 800a652:	2b40      	cmp	r3, #64	; 0x40
 800a654:	d84f      	bhi.n	800a6f6 <USBD_StdDevReq+0xbe>
 800a656:	2b00      	cmp	r3, #0
 800a658:	d009      	beq.n	800a66e <USBD_StdDevReq+0x36>
 800a65a:	2b20      	cmp	r3, #32
 800a65c:	d14b      	bne.n	800a6f6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	6839      	ldr	r1, [r7, #0]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	4798      	blx	r3
      break;
 800a66c:	e048      	b.n	800a700 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	785b      	ldrb	r3, [r3, #1]
 800a672:	2b09      	cmp	r3, #9
 800a674:	d839      	bhi.n	800a6ea <USBD_StdDevReq+0xb2>
 800a676:	a201      	add	r2, pc, #4	; (adr r2, 800a67c <USBD_StdDevReq+0x44>)
 800a678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a67c:	0800a6cd 	.word	0x0800a6cd
 800a680:	0800a6e1 	.word	0x0800a6e1
 800a684:	0800a6eb 	.word	0x0800a6eb
 800a688:	0800a6d7 	.word	0x0800a6d7
 800a68c:	0800a6eb 	.word	0x0800a6eb
 800a690:	0800a6af 	.word	0x0800a6af
 800a694:	0800a6a5 	.word	0x0800a6a5
 800a698:	0800a6eb 	.word	0x0800a6eb
 800a69c:	0800a6c3 	.word	0x0800a6c3
 800a6a0:	0800a6b9 	.word	0x0800a6b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a6a4:	6839      	ldr	r1, [r7, #0]
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f9dc 	bl	800aa64 <USBD_GetDescriptor>
          break;
 800a6ac:	e022      	b.n	800a6f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a6ae:	6839      	ldr	r1, [r7, #0]
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fb3f 	bl	800ad34 <USBD_SetAddress>
          break;
 800a6b6:	e01d      	b.n	800a6f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 fb7e 	bl	800adbc <USBD_SetConfig>
          break;
 800a6c0:	e018      	b.n	800a6f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 fc07 	bl	800aed8 <USBD_GetConfig>
          break;
 800a6ca:	e013      	b.n	800a6f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fc37 	bl	800af42 <USBD_GetStatus>
          break;
 800a6d4:	e00e      	b.n	800a6f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a6d6:	6839      	ldr	r1, [r7, #0]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fc65 	bl	800afa8 <USBD_SetFeature>
          break;
 800a6de:	e009      	b.n	800a6f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a6e0:	6839      	ldr	r1, [r7, #0]
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fc74 	bl	800afd0 <USBD_ClrFeature>
          break;
 800a6e8:	e004      	b.n	800a6f4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a6ea:	6839      	ldr	r1, [r7, #0]
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fccc 	bl	800b08a <USBD_CtlError>
          break;
 800a6f2:	bf00      	nop
      }
      break;
 800a6f4:	e004      	b.n	800a700 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fcc6 	bl	800b08a <USBD_CtlError>
      break;
 800a6fe:	bf00      	nop
  }

  return ret;
 800a700:	7bfb      	ldrb	r3, [r7, #15]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop

0800a70c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a716:	2300      	movs	r3, #0
 800a718:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a722:	2b40      	cmp	r3, #64	; 0x40
 800a724:	d005      	beq.n	800a732 <USBD_StdItfReq+0x26>
 800a726:	2b40      	cmp	r3, #64	; 0x40
 800a728:	d82e      	bhi.n	800a788 <USBD_StdItfReq+0x7c>
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d001      	beq.n	800a732 <USBD_StdItfReq+0x26>
 800a72e:	2b20      	cmp	r3, #32
 800a730:	d12a      	bne.n	800a788 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a738:	3b01      	subs	r3, #1
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d81d      	bhi.n	800a77a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	889b      	ldrh	r3, [r3, #4]
 800a742:	b2db      	uxtb	r3, r3
 800a744:	2b01      	cmp	r3, #1
 800a746:	d813      	bhi.n	800a770 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	6839      	ldr	r1, [r7, #0]
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	4798      	blx	r3
 800a756:	4603      	mov	r3, r0
 800a758:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	88db      	ldrh	r3, [r3, #6]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d110      	bne.n	800a784 <USBD_StdItfReq+0x78>
 800a762:	7bfb      	ldrb	r3, [r7, #15]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d10d      	bne.n	800a784 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 fd56 	bl	800b21a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a76e:	e009      	b.n	800a784 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a770:	6839      	ldr	r1, [r7, #0]
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 fc89 	bl	800b08a <USBD_CtlError>
          break;
 800a778:	e004      	b.n	800a784 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a77a:	6839      	ldr	r1, [r7, #0]
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 fc84 	bl	800b08a <USBD_CtlError>
          break;
 800a782:	e000      	b.n	800a786 <USBD_StdItfReq+0x7a>
          break;
 800a784:	bf00      	nop
      }
      break;
 800a786:	e004      	b.n	800a792 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a788:	6839      	ldr	r1, [r7, #0]
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fc7d 	bl	800b08a <USBD_CtlError>
      break;
 800a790:	bf00      	nop
  }

  return USBD_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	889b      	ldrh	r3, [r3, #4]
 800a7ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7b8:	2b40      	cmp	r3, #64	; 0x40
 800a7ba:	d007      	beq.n	800a7cc <USBD_StdEPReq+0x30>
 800a7bc:	2b40      	cmp	r3, #64	; 0x40
 800a7be:	f200 8146 	bhi.w	800aa4e <USBD_StdEPReq+0x2b2>
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00a      	beq.n	800a7dc <USBD_StdEPReq+0x40>
 800a7c6:	2b20      	cmp	r3, #32
 800a7c8:	f040 8141 	bne.w	800aa4e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	6839      	ldr	r1, [r7, #0]
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	4798      	blx	r3
      break;
 800a7da:	e13d      	b.n	800aa58 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7e4:	2b20      	cmp	r3, #32
 800a7e6:	d10a      	bne.n	800a7fe <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	4798      	blx	r3
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a7fa:	7bfb      	ldrb	r3, [r7, #15]
 800a7fc:	e12d      	b.n	800aa5a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	785b      	ldrb	r3, [r3, #1]
 800a802:	2b03      	cmp	r3, #3
 800a804:	d007      	beq.n	800a816 <USBD_StdEPReq+0x7a>
 800a806:	2b03      	cmp	r3, #3
 800a808:	f300 811b 	bgt.w	800aa42 <USBD_StdEPReq+0x2a6>
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d072      	beq.n	800a8f6 <USBD_StdEPReq+0x15a>
 800a810:	2b01      	cmp	r3, #1
 800a812:	d03a      	beq.n	800a88a <USBD_StdEPReq+0xee>
 800a814:	e115      	b.n	800aa42 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d002      	beq.n	800a826 <USBD_StdEPReq+0x8a>
 800a820:	2b03      	cmp	r3, #3
 800a822:	d015      	beq.n	800a850 <USBD_StdEPReq+0xb4>
 800a824:	e02b      	b.n	800a87e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a826:	7bbb      	ldrb	r3, [r7, #14]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d00c      	beq.n	800a846 <USBD_StdEPReq+0xaa>
 800a82c:	7bbb      	ldrb	r3, [r7, #14]
 800a82e:	2b80      	cmp	r3, #128	; 0x80
 800a830:	d009      	beq.n	800a846 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a832:	7bbb      	ldrb	r3, [r7, #14]
 800a834:	4619      	mov	r1, r3
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f004 fa0c 	bl	800ec54 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a83c:	2180      	movs	r1, #128	; 0x80
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f004 fa08 	bl	800ec54 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a844:	e020      	b.n	800a888 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a846:	6839      	ldr	r1, [r7, #0]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fc1e 	bl	800b08a <USBD_CtlError>
              break;
 800a84e:	e01b      	b.n	800a888 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	885b      	ldrh	r3, [r3, #2]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10e      	bne.n	800a876 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a858:	7bbb      	ldrb	r3, [r7, #14]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00b      	beq.n	800a876 <USBD_StdEPReq+0xda>
 800a85e:	7bbb      	ldrb	r3, [r7, #14]
 800a860:	2b80      	cmp	r3, #128	; 0x80
 800a862:	d008      	beq.n	800a876 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	88db      	ldrh	r3, [r3, #6]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d104      	bne.n	800a876 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a86c:	7bbb      	ldrb	r3, [r7, #14]
 800a86e:	4619      	mov	r1, r3
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f004 f9ef 	bl	800ec54 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 fccf 	bl	800b21a <USBD_CtlSendStatus>

              break;
 800a87c:	e004      	b.n	800a888 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a87e:	6839      	ldr	r1, [r7, #0]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fc02 	bl	800b08a <USBD_CtlError>
              break;
 800a886:	bf00      	nop
          }
          break;
 800a888:	e0e0      	b.n	800aa4c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a890:	2b02      	cmp	r3, #2
 800a892:	d002      	beq.n	800a89a <USBD_StdEPReq+0xfe>
 800a894:	2b03      	cmp	r3, #3
 800a896:	d015      	beq.n	800a8c4 <USBD_StdEPReq+0x128>
 800a898:	e026      	b.n	800a8e8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a89a:	7bbb      	ldrb	r3, [r7, #14]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00c      	beq.n	800a8ba <USBD_StdEPReq+0x11e>
 800a8a0:	7bbb      	ldrb	r3, [r7, #14]
 800a8a2:	2b80      	cmp	r3, #128	; 0x80
 800a8a4:	d009      	beq.n	800a8ba <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a8a6:	7bbb      	ldrb	r3, [r7, #14]
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f004 f9d2 	bl	800ec54 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a8b0:	2180      	movs	r1, #128	; 0x80
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f004 f9ce 	bl	800ec54 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8b8:	e01c      	b.n	800a8f4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a8ba:	6839      	ldr	r1, [r7, #0]
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fbe4 	bl	800b08a <USBD_CtlError>
              break;
 800a8c2:	e017      	b.n	800a8f4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	885b      	ldrh	r3, [r3, #2]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d112      	bne.n	800a8f2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a8cc:	7bbb      	ldrb	r3, [r7, #14]
 800a8ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d004      	beq.n	800a8e0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a8d6:	7bbb      	ldrb	r3, [r7, #14]
 800a8d8:	4619      	mov	r1, r3
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f004 f9d9 	bl	800ec92 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 fc9a 	bl	800b21a <USBD_CtlSendStatus>
              }
              break;
 800a8e6:	e004      	b.n	800a8f2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a8e8:	6839      	ldr	r1, [r7, #0]
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 fbcd 	bl	800b08a <USBD_CtlError>
              break;
 800a8f0:	e000      	b.n	800a8f4 <USBD_StdEPReq+0x158>
              break;
 800a8f2:	bf00      	nop
          }
          break;
 800a8f4:	e0aa      	b.n	800aa4c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8fc:	2b02      	cmp	r3, #2
 800a8fe:	d002      	beq.n	800a906 <USBD_StdEPReq+0x16a>
 800a900:	2b03      	cmp	r3, #3
 800a902:	d032      	beq.n	800a96a <USBD_StdEPReq+0x1ce>
 800a904:	e097      	b.n	800aa36 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a906:	7bbb      	ldrb	r3, [r7, #14]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d007      	beq.n	800a91c <USBD_StdEPReq+0x180>
 800a90c:	7bbb      	ldrb	r3, [r7, #14]
 800a90e:	2b80      	cmp	r3, #128	; 0x80
 800a910:	d004      	beq.n	800a91c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a912:	6839      	ldr	r1, [r7, #0]
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 fbb8 	bl	800b08a <USBD_CtlError>
                break;
 800a91a:	e091      	b.n	800aa40 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a91c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a920:	2b00      	cmp	r3, #0
 800a922:	da0b      	bge.n	800a93c <USBD_StdEPReq+0x1a0>
 800a924:	7bbb      	ldrb	r3, [r7, #14]
 800a926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a92a:	4613      	mov	r3, r2
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	4413      	add	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	3310      	adds	r3, #16
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	4413      	add	r3, r2
 800a938:	3304      	adds	r3, #4
 800a93a:	e00b      	b.n	800a954 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a93c:	7bbb      	ldrb	r3, [r7, #14]
 800a93e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a942:	4613      	mov	r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	4413      	add	r3, r2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	4413      	add	r3, r2
 800a952:	3304      	adds	r3, #4
 800a954:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	2200      	movs	r2, #0
 800a95a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	2202      	movs	r2, #2
 800a960:	4619      	mov	r1, r3
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 fbfb 	bl	800b15e <USBD_CtlSendData>
              break;
 800a968:	e06a      	b.n	800aa40 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a96a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	da11      	bge.n	800a996 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a972:	7bbb      	ldrb	r3, [r7, #14]
 800a974:	f003 020f 	and.w	r2, r3, #15
 800a978:	6879      	ldr	r1, [r7, #4]
 800a97a:	4613      	mov	r3, r2
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4413      	add	r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	440b      	add	r3, r1
 800a984:	3318      	adds	r3, #24
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d117      	bne.n	800a9bc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a98c:	6839      	ldr	r1, [r7, #0]
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 fb7b 	bl	800b08a <USBD_CtlError>
                  break;
 800a994:	e054      	b.n	800aa40 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a996:	7bbb      	ldrb	r3, [r7, #14]
 800a998:	f003 020f 	and.w	r2, r3, #15
 800a99c:	6879      	ldr	r1, [r7, #4]
 800a99e:	4613      	mov	r3, r2
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	4413      	add	r3, r2
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	440b      	add	r3, r1
 800a9a8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d104      	bne.n	800a9bc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a9b2:	6839      	ldr	r1, [r7, #0]
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 fb68 	bl	800b08a <USBD_CtlError>
                  break;
 800a9ba:	e041      	b.n	800aa40 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	da0b      	bge.n	800a9dc <USBD_StdEPReq+0x240>
 800a9c4:	7bbb      	ldrb	r3, [r7, #14]
 800a9c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	4413      	add	r3, r2
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	3310      	adds	r3, #16
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	3304      	adds	r3, #4
 800a9da:	e00b      	b.n	800a9f4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a9dc:	7bbb      	ldrb	r3, [r7, #14]
 800a9de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	4413      	add	r3, r2
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a9f6:	7bbb      	ldrb	r3, [r7, #14]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d002      	beq.n	800aa02 <USBD_StdEPReq+0x266>
 800a9fc:	7bbb      	ldrb	r3, [r7, #14]
 800a9fe:	2b80      	cmp	r3, #128	; 0x80
 800aa00:	d103      	bne.n	800aa0a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	2200      	movs	r2, #0
 800aa06:	601a      	str	r2, [r3, #0]
 800aa08:	e00e      	b.n	800aa28 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800aa0a:	7bbb      	ldrb	r3, [r7, #14]
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f004 f95e 	bl	800ecd0 <USBD_LL_IsStallEP>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d003      	beq.n	800aa22 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	601a      	str	r2, [r3, #0]
 800aa20:	e002      	b.n	800aa28 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2200      	movs	r2, #0
 800aa26:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	2202      	movs	r2, #2
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fb95 	bl	800b15e <USBD_CtlSendData>
              break;
 800aa34:	e004      	b.n	800aa40 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fb26 	bl	800b08a <USBD_CtlError>
              break;
 800aa3e:	bf00      	nop
          }
          break;
 800aa40:	e004      	b.n	800aa4c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800aa42:	6839      	ldr	r1, [r7, #0]
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 fb20 	bl	800b08a <USBD_CtlError>
          break;
 800aa4a:	bf00      	nop
      }
      break;
 800aa4c:	e004      	b.n	800aa58 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 fb1a 	bl	800b08a <USBD_CtlError>
      break;
 800aa56:	bf00      	nop
  }

  return ret;
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3710      	adds	r7, #16
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
	...

0800aa64 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aa72:	2300      	movs	r3, #0
 800aa74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aa76:	2300      	movs	r3, #0
 800aa78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	885b      	ldrh	r3, [r3, #2]
 800aa7e:	0a1b      	lsrs	r3, r3, #8
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	3b01      	subs	r3, #1
 800aa84:	2b06      	cmp	r3, #6
 800aa86:	f200 8128 	bhi.w	800acda <USBD_GetDescriptor+0x276>
 800aa8a:	a201      	add	r2, pc, #4	; (adr r2, 800aa90 <USBD_GetDescriptor+0x2c>)
 800aa8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa90:	0800aaad 	.word	0x0800aaad
 800aa94:	0800aac5 	.word	0x0800aac5
 800aa98:	0800ab05 	.word	0x0800ab05
 800aa9c:	0800acdb 	.word	0x0800acdb
 800aaa0:	0800acdb 	.word	0x0800acdb
 800aaa4:	0800ac7b 	.word	0x0800ac7b
 800aaa8:	0800aca7 	.word	0x0800aca7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	7c12      	ldrb	r2, [r2, #16]
 800aab8:	f107 0108 	add.w	r1, r7, #8
 800aabc:	4610      	mov	r0, r2
 800aabe:	4798      	blx	r3
 800aac0:	60f8      	str	r0, [r7, #12]
      break;
 800aac2:	e112      	b.n	800acea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	7c1b      	ldrb	r3, [r3, #16]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d10d      	bne.n	800aae8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad4:	f107 0208 	add.w	r2, r7, #8
 800aad8:	4610      	mov	r0, r2
 800aada:	4798      	blx	r3
 800aadc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	3301      	adds	r3, #1
 800aae2:	2202      	movs	r2, #2
 800aae4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aae6:	e100      	b.n	800acea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf0:	f107 0208 	add.w	r2, r7, #8
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	4798      	blx	r3
 800aaf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	3301      	adds	r3, #1
 800aafe:	2202      	movs	r2, #2
 800ab00:	701a      	strb	r2, [r3, #0]
      break;
 800ab02:	e0f2      	b.n	800acea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	885b      	ldrh	r3, [r3, #2]
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	2b05      	cmp	r3, #5
 800ab0c:	f200 80ac 	bhi.w	800ac68 <USBD_GetDescriptor+0x204>
 800ab10:	a201      	add	r2, pc, #4	; (adr r2, 800ab18 <USBD_GetDescriptor+0xb4>)
 800ab12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab16:	bf00      	nop
 800ab18:	0800ab31 	.word	0x0800ab31
 800ab1c:	0800ab65 	.word	0x0800ab65
 800ab20:	0800ab99 	.word	0x0800ab99
 800ab24:	0800abcd 	.word	0x0800abcd
 800ab28:	0800ac01 	.word	0x0800ac01
 800ab2c:	0800ac35 	.word	0x0800ac35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00b      	beq.n	800ab54 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	7c12      	ldrb	r2, [r2, #16]
 800ab48:	f107 0108 	add.w	r1, r7, #8
 800ab4c:	4610      	mov	r0, r2
 800ab4e:	4798      	blx	r3
 800ab50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab52:	e091      	b.n	800ac78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab54:	6839      	ldr	r1, [r7, #0]
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 fa97 	bl	800b08a <USBD_CtlError>
            err++;
 800ab5c:	7afb      	ldrb	r3, [r7, #11]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	72fb      	strb	r3, [r7, #11]
          break;
 800ab62:	e089      	b.n	800ac78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d00b      	beq.n	800ab88 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	7c12      	ldrb	r2, [r2, #16]
 800ab7c:	f107 0108 	add.w	r1, r7, #8
 800ab80:	4610      	mov	r0, r2
 800ab82:	4798      	blx	r3
 800ab84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab86:	e077      	b.n	800ac78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab88:	6839      	ldr	r1, [r7, #0]
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 fa7d 	bl	800b08a <USBD_CtlError>
            err++;
 800ab90:	7afb      	ldrb	r3, [r7, #11]
 800ab92:	3301      	adds	r3, #1
 800ab94:	72fb      	strb	r3, [r7, #11]
          break;
 800ab96:	e06f      	b.n	800ac78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00b      	beq.n	800abbc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	7c12      	ldrb	r2, [r2, #16]
 800abb0:	f107 0108 	add.w	r1, r7, #8
 800abb4:	4610      	mov	r0, r2
 800abb6:	4798      	blx	r3
 800abb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abba:	e05d      	b.n	800ac78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abbc:	6839      	ldr	r1, [r7, #0]
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fa63 	bl	800b08a <USBD_CtlError>
            err++;
 800abc4:	7afb      	ldrb	r3, [r7, #11]
 800abc6:	3301      	adds	r3, #1
 800abc8:	72fb      	strb	r3, [r7, #11]
          break;
 800abca:	e055      	b.n	800ac78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d00b      	beq.n	800abf0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	7c12      	ldrb	r2, [r2, #16]
 800abe4:	f107 0108 	add.w	r1, r7, #8
 800abe8:	4610      	mov	r0, r2
 800abea:	4798      	blx	r3
 800abec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abee:	e043      	b.n	800ac78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abf0:	6839      	ldr	r1, [r7, #0]
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 fa49 	bl	800b08a <USBD_CtlError>
            err++;
 800abf8:	7afb      	ldrb	r3, [r7, #11]
 800abfa:	3301      	adds	r3, #1
 800abfc:	72fb      	strb	r3, [r7, #11]
          break;
 800abfe:	e03b      	b.n	800ac78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac06:	695b      	ldr	r3, [r3, #20]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d00b      	beq.n	800ac24 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac12:	695b      	ldr	r3, [r3, #20]
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	7c12      	ldrb	r2, [r2, #16]
 800ac18:	f107 0108 	add.w	r1, r7, #8
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	4798      	blx	r3
 800ac20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac22:	e029      	b.n	800ac78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac24:	6839      	ldr	r1, [r7, #0]
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fa2f 	bl	800b08a <USBD_CtlError>
            err++;
 800ac2c:	7afb      	ldrb	r3, [r7, #11]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	72fb      	strb	r3, [r7, #11]
          break;
 800ac32:	e021      	b.n	800ac78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac3a:	699b      	ldr	r3, [r3, #24]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00b      	beq.n	800ac58 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac46:	699b      	ldr	r3, [r3, #24]
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	7c12      	ldrb	r2, [r2, #16]
 800ac4c:	f107 0108 	add.w	r1, r7, #8
 800ac50:	4610      	mov	r0, r2
 800ac52:	4798      	blx	r3
 800ac54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac56:	e00f      	b.n	800ac78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac58:	6839      	ldr	r1, [r7, #0]
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 fa15 	bl	800b08a <USBD_CtlError>
            err++;
 800ac60:	7afb      	ldrb	r3, [r7, #11]
 800ac62:	3301      	adds	r3, #1
 800ac64:	72fb      	strb	r3, [r7, #11]
          break;
 800ac66:	e007      	b.n	800ac78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ac68:	6839      	ldr	r1, [r7, #0]
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fa0d 	bl	800b08a <USBD_CtlError>
          err++;
 800ac70:	7afb      	ldrb	r3, [r7, #11]
 800ac72:	3301      	adds	r3, #1
 800ac74:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ac76:	e038      	b.n	800acea <USBD_GetDescriptor+0x286>
 800ac78:	e037      	b.n	800acea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	7c1b      	ldrb	r3, [r3, #16]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d109      	bne.n	800ac96 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac8a:	f107 0208 	add.w	r2, r7, #8
 800ac8e:	4610      	mov	r0, r2
 800ac90:	4798      	blx	r3
 800ac92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac94:	e029      	b.n	800acea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac96:	6839      	ldr	r1, [r7, #0]
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 f9f6 	bl	800b08a <USBD_CtlError>
        err++;
 800ac9e:	7afb      	ldrb	r3, [r7, #11]
 800aca0:	3301      	adds	r3, #1
 800aca2:	72fb      	strb	r3, [r7, #11]
      break;
 800aca4:	e021      	b.n	800acea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	7c1b      	ldrb	r3, [r3, #16]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d10d      	bne.n	800acca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb6:	f107 0208 	add.w	r2, r7, #8
 800acba:	4610      	mov	r0, r2
 800acbc:	4798      	blx	r3
 800acbe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	3301      	adds	r3, #1
 800acc4:	2207      	movs	r2, #7
 800acc6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800acc8:	e00f      	b.n	800acea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f9dc 	bl	800b08a <USBD_CtlError>
        err++;
 800acd2:	7afb      	ldrb	r3, [r7, #11]
 800acd4:	3301      	adds	r3, #1
 800acd6:	72fb      	strb	r3, [r7, #11]
      break;
 800acd8:	e007      	b.n	800acea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800acda:	6839      	ldr	r1, [r7, #0]
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 f9d4 	bl	800b08a <USBD_CtlError>
      err++;
 800ace2:	7afb      	ldrb	r3, [r7, #11]
 800ace4:	3301      	adds	r3, #1
 800ace6:	72fb      	strb	r3, [r7, #11]
      break;
 800ace8:	bf00      	nop
  }

  if (err != 0U)
 800acea:	7afb      	ldrb	r3, [r7, #11]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d11c      	bne.n	800ad2a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800acf0:	893b      	ldrh	r3, [r7, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d011      	beq.n	800ad1a <USBD_GetDescriptor+0x2b6>
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	88db      	ldrh	r3, [r3, #6]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00d      	beq.n	800ad1a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	88da      	ldrh	r2, [r3, #6]
 800ad02:	893b      	ldrh	r3, [r7, #8]
 800ad04:	4293      	cmp	r3, r2
 800ad06:	bf28      	it	cs
 800ad08:	4613      	movcs	r3, r2
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ad0e:	893b      	ldrh	r3, [r7, #8]
 800ad10:	461a      	mov	r2, r3
 800ad12:	68f9      	ldr	r1, [r7, #12]
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 fa22 	bl	800b15e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	88db      	ldrh	r3, [r3, #6]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d104      	bne.n	800ad2c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 fa79 	bl	800b21a <USBD_CtlSendStatus>
 800ad28:	e000      	b.n	800ad2c <USBD_GetDescriptor+0x2c8>
    return;
 800ad2a:	bf00      	nop
    }
  }
}
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop

0800ad34 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	889b      	ldrh	r3, [r3, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d130      	bne.n	800ada8 <USBD_SetAddress+0x74>
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	88db      	ldrh	r3, [r3, #6]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d12c      	bne.n	800ada8 <USBD_SetAddress+0x74>
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	885b      	ldrh	r3, [r3, #2]
 800ad52:	2b7f      	cmp	r3, #127	; 0x7f
 800ad54:	d828      	bhi.n	800ada8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	885b      	ldrh	r3, [r3, #2]
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad68:	2b03      	cmp	r3, #3
 800ad6a:	d104      	bne.n	800ad76 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ad6c:	6839      	ldr	r1, [r7, #0]
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 f98b 	bl	800b08a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad74:	e01d      	b.n	800adb2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	7bfa      	ldrb	r2, [r7, #15]
 800ad7a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad7e:	7bfb      	ldrb	r3, [r7, #15]
 800ad80:	4619      	mov	r1, r3
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f003 ffd0 	bl	800ed28 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 fa46 	bl	800b21a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad8e:	7bfb      	ldrb	r3, [r7, #15]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d004      	beq.n	800ad9e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2202      	movs	r2, #2
 800ad98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad9c:	e009      	b.n	800adb2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2201      	movs	r2, #1
 800ada2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ada6:	e004      	b.n	800adb2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 f96d 	bl	800b08a <USBD_CtlError>
  }
}
 800adb0:	bf00      	nop
 800adb2:	bf00      	nop
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
	...

0800adbc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	885b      	ldrh	r3, [r3, #2]
 800adca:	b2da      	uxtb	r2, r3
 800adcc:	4b41      	ldr	r3, [pc, #260]	; (800aed4 <USBD_SetConfig+0x118>)
 800adce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800add0:	4b40      	ldr	r3, [pc, #256]	; (800aed4 <USBD_SetConfig+0x118>)
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	2b01      	cmp	r3, #1
 800add6:	d904      	bls.n	800ade2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f955 	bl	800b08a <USBD_CtlError>
 800ade0:	e075      	b.n	800aece <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d002      	beq.n	800adf2 <USBD_SetConfig+0x36>
 800adec:	2b03      	cmp	r3, #3
 800adee:	d023      	beq.n	800ae38 <USBD_SetConfig+0x7c>
 800adf0:	e062      	b.n	800aeb8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800adf2:	4b38      	ldr	r3, [pc, #224]	; (800aed4 <USBD_SetConfig+0x118>)
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d01a      	beq.n	800ae30 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800adfa:	4b36      	ldr	r3, [pc, #216]	; (800aed4 <USBD_SetConfig+0x118>)
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	461a      	mov	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2203      	movs	r2, #3
 800ae08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ae0c:	4b31      	ldr	r3, [pc, #196]	; (800aed4 <USBD_SetConfig+0x118>)
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	4619      	mov	r1, r3
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f7ff f9e7 	bl	800a1e6 <USBD_SetClassConfig>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b02      	cmp	r3, #2
 800ae1c:	d104      	bne.n	800ae28 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ae1e:	6839      	ldr	r1, [r7, #0]
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 f932 	bl	800b08a <USBD_CtlError>
            return;
 800ae26:	e052      	b.n	800aece <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 f9f6 	bl	800b21a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ae2e:	e04e      	b.n	800aece <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 f9f2 	bl	800b21a <USBD_CtlSendStatus>
        break;
 800ae36:	e04a      	b.n	800aece <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ae38:	4b26      	ldr	r3, [pc, #152]	; (800aed4 <USBD_SetConfig+0x118>)
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d112      	bne.n	800ae66 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2202      	movs	r2, #2
 800ae44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800ae48:	4b22      	ldr	r3, [pc, #136]	; (800aed4 <USBD_SetConfig+0x118>)
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ae52:	4b20      	ldr	r3, [pc, #128]	; (800aed4 <USBD_SetConfig+0x118>)
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	4619      	mov	r1, r3
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f7ff f9e3 	bl	800a224 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f9db 	bl	800b21a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ae64:	e033      	b.n	800aece <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ae66:	4b1b      	ldr	r3, [pc, #108]	; (800aed4 <USBD_SetConfig+0x118>)
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d01d      	beq.n	800aeb0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7ff f9d1 	bl	800a224 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ae82:	4b14      	ldr	r3, [pc, #80]	; (800aed4 <USBD_SetConfig+0x118>)
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	461a      	mov	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ae8c:	4b11      	ldr	r3, [pc, #68]	; (800aed4 <USBD_SetConfig+0x118>)
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	4619      	mov	r1, r3
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff f9a7 	bl	800a1e6 <USBD_SetClassConfig>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	d104      	bne.n	800aea8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ae9e:	6839      	ldr	r1, [r7, #0]
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 f8f2 	bl	800b08a <USBD_CtlError>
            return;
 800aea6:	e012      	b.n	800aece <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f9b6 	bl	800b21a <USBD_CtlSendStatus>
        break;
 800aeae:	e00e      	b.n	800aece <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 f9b2 	bl	800b21a <USBD_CtlSendStatus>
        break;
 800aeb6:	e00a      	b.n	800aece <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 f8e5 	bl	800b08a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800aec0:	4b04      	ldr	r3, [pc, #16]	; (800aed4 <USBD_SetConfig+0x118>)
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	4619      	mov	r1, r3
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7ff f9ac 	bl	800a224 <USBD_ClrClassConfig>
        break;
 800aecc:	bf00      	nop
    }
  }
}
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	200001b1 	.word	0x200001b1

0800aed8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	88db      	ldrh	r3, [r3, #6]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d004      	beq.n	800aef4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aeea:	6839      	ldr	r1, [r7, #0]
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 f8cc 	bl	800b08a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aef2:	e022      	b.n	800af3a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	dc02      	bgt.n	800af04 <USBD_GetConfig+0x2c>
 800aefe:	2b00      	cmp	r3, #0
 800af00:	dc03      	bgt.n	800af0a <USBD_GetConfig+0x32>
 800af02:	e015      	b.n	800af30 <USBD_GetConfig+0x58>
 800af04:	2b03      	cmp	r3, #3
 800af06:	d00b      	beq.n	800af20 <USBD_GetConfig+0x48>
 800af08:	e012      	b.n	800af30 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	3308      	adds	r3, #8
 800af14:	2201      	movs	r2, #1
 800af16:	4619      	mov	r1, r3
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f920 	bl	800b15e <USBD_CtlSendData>
        break;
 800af1e:	e00c      	b.n	800af3a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	3304      	adds	r3, #4
 800af24:	2201      	movs	r2, #1
 800af26:	4619      	mov	r1, r3
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 f918 	bl	800b15e <USBD_CtlSendData>
        break;
 800af2e:	e004      	b.n	800af3a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800af30:	6839      	ldr	r1, [r7, #0]
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 f8a9 	bl	800b08a <USBD_CtlError>
        break;
 800af38:	bf00      	nop
}
 800af3a:	bf00      	nop
 800af3c:	3708      	adds	r7, #8
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b082      	sub	sp, #8
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af52:	3b01      	subs	r3, #1
 800af54:	2b02      	cmp	r3, #2
 800af56:	d81e      	bhi.n	800af96 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	88db      	ldrh	r3, [r3, #6]
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d004      	beq.n	800af6a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800af60:	6839      	ldr	r1, [r7, #0]
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f891 	bl	800b08a <USBD_CtlError>
        break;
 800af68:	e01a      	b.n	800afa0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2201      	movs	r2, #1
 800af6e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af76:	2b00      	cmp	r3, #0
 800af78:	d005      	beq.n	800af86 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	f043 0202 	orr.w	r2, r3, #2
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	330c      	adds	r3, #12
 800af8a:	2202      	movs	r2, #2
 800af8c:	4619      	mov	r1, r3
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 f8e5 	bl	800b15e <USBD_CtlSendData>
      break;
 800af94:	e004      	b.n	800afa0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800af96:	6839      	ldr	r1, [r7, #0]
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 f876 	bl	800b08a <USBD_CtlError>
      break;
 800af9e:	bf00      	nop
  }
}
 800afa0:	bf00      	nop
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	885b      	ldrh	r3, [r3, #2]
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d106      	bne.n	800afc8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2201      	movs	r2, #1
 800afbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 f929 	bl	800b21a <USBD_CtlSendStatus>
  }
}
 800afc8:	bf00      	nop
 800afca:	3708      	adds	r7, #8
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afe0:	3b01      	subs	r3, #1
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	d80b      	bhi.n	800affe <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	885b      	ldrh	r3, [r3, #2]
 800afea:	2b01      	cmp	r3, #1
 800afec:	d10c      	bne.n	800b008 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 f90f 	bl	800b21a <USBD_CtlSendStatus>
      }
      break;
 800affc:	e004      	b.n	800b008 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800affe:	6839      	ldr	r1, [r7, #0]
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 f842 	bl	800b08a <USBD_CtlError>
      break;
 800b006:	e000      	b.n	800b00a <USBD_ClrFeature+0x3a>
      break;
 800b008:	bf00      	nop
  }
}
 800b00a:	bf00      	nop
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b012:	b480      	push	{r7}
 800b014:	b083      	sub	sp, #12
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	781a      	ldrb	r2, [r3, #0]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	785a      	ldrb	r2, [r3, #1]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	3302      	adds	r3, #2
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	b29a      	uxth	r2, r3
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	3303      	adds	r3, #3
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	021b      	lsls	r3, r3, #8
 800b03e:	b29b      	uxth	r3, r3
 800b040:	4413      	add	r3, r2
 800b042:	b29a      	uxth	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	3304      	adds	r3, #4
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	b29a      	uxth	r2, r3
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	3305      	adds	r3, #5
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	b29b      	uxth	r3, r3
 800b058:	021b      	lsls	r3, r3, #8
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	4413      	add	r3, r2
 800b05e:	b29a      	uxth	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	3306      	adds	r3, #6
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	3307      	adds	r3, #7
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	b29b      	uxth	r3, r3
 800b074:	021b      	lsls	r3, r3, #8
 800b076:	b29b      	uxth	r3, r3
 800b078:	4413      	add	r3, r2
 800b07a:	b29a      	uxth	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	80da      	strh	r2, [r3, #6]

}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	bc80      	pop	{r7}
 800b088:	4770      	bx	lr

0800b08a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b082      	sub	sp, #8
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
 800b092:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b094:	2180      	movs	r1, #128	; 0x80
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f003 fddc 	bl	800ec54 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b09c:	2100      	movs	r1, #0
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f003 fdd8 	bl	800ec54 <USBD_LL_StallEP>
}
 800b0a4:	bf00      	nop
 800b0a6:	3708      	adds	r7, #8
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b086      	sub	sp, #24
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d032      	beq.n	800b128 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f000 f834 	bl	800b130 <USBD_GetLen>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	005b      	lsls	r3, r3, #1
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b0d6:	7dfb      	ldrb	r3, [r7, #23]
 800b0d8:	1c5a      	adds	r2, r3, #1
 800b0da:	75fa      	strb	r2, [r7, #23]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	7812      	ldrb	r2, [r2, #0]
 800b0e6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b0e8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ea:	1c5a      	adds	r2, r3, #1
 800b0ec:	75fa      	strb	r2, [r7, #23]
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	2203      	movs	r2, #3
 800b0f6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b0f8:	e012      	b.n	800b120 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	1c5a      	adds	r2, r3, #1
 800b0fe:	60fa      	str	r2, [r7, #12]
 800b100:	7dfa      	ldrb	r2, [r7, #23]
 800b102:	1c51      	adds	r1, r2, #1
 800b104:	75f9      	strb	r1, [r7, #23]
 800b106:	4611      	mov	r1, r2
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	440a      	add	r2, r1
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b110:	7dfb      	ldrb	r3, [r7, #23]
 800b112:	1c5a      	adds	r2, r3, #1
 800b114:	75fa      	strb	r2, [r7, #23]
 800b116:	461a      	mov	r2, r3
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	4413      	add	r3, r2
 800b11c:	2200      	movs	r2, #0
 800b11e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1e8      	bne.n	800b0fa <USBD_GetString+0x4e>
    }
  }
}
 800b128:	bf00      	nop
 800b12a:	3718      	adds	r7, #24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b138:	2300      	movs	r3, #0
 800b13a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b13c:	e005      	b.n	800b14a <USBD_GetLen+0x1a>
  {
    len++;
 800b13e:	7bfb      	ldrb	r3, [r7, #15]
 800b140:	3301      	adds	r3, #1
 800b142:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	3301      	adds	r3, #1
 800b148:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d1f5      	bne.n	800b13e <USBD_GetLen+0xe>
  }

  return len;
 800b152:	7bfb      	ldrb	r3, [r7, #15]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	bc80      	pop	{r7}
 800b15c:	4770      	bx	lr

0800b15e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b15e:	b580      	push	{r7, lr}
 800b160:	b084      	sub	sp, #16
 800b162:	af00      	add	r7, sp, #0
 800b164:	60f8      	str	r0, [r7, #12]
 800b166:	60b9      	str	r1, [r7, #8]
 800b168:	4613      	mov	r3, r2
 800b16a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2202      	movs	r2, #2
 800b170:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b174:	88fa      	ldrh	r2, [r7, #6]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b17a:	88fa      	ldrh	r2, [r7, #6]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b180:	88fb      	ldrh	r3, [r7, #6]
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	2100      	movs	r1, #0
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f003 fded 	bl	800ed66 <USBD_LL_Transmit>

  return USBD_OK;
 800b18c:	2300      	movs	r3, #0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b084      	sub	sp, #16
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	60f8      	str	r0, [r7, #12]
 800b19e:	60b9      	str	r1, [r7, #8]
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1a4:	88fb      	ldrh	r3, [r7, #6]
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f003 fddb 	bl	800ed66 <USBD_LL_Transmit>

  return USBD_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b084      	sub	sp, #16
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	60f8      	str	r0, [r7, #12]
 800b1c2:	60b9      	str	r1, [r7, #8]
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2203      	movs	r2, #3
 800b1cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b1d0:	88fa      	ldrh	r2, [r7, #6]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b1d8:	88fa      	ldrh	r2, [r7, #6]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1e0:	88fb      	ldrh	r3, [r7, #6]
 800b1e2:	68ba      	ldr	r2, [r7, #8]
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	f003 fde0 	bl	800edac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1ec:	2300      	movs	r3, #0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3710      	adds	r7, #16
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b084      	sub	sp, #16
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	60f8      	str	r0, [r7, #12]
 800b1fe:	60b9      	str	r1, [r7, #8]
 800b200:	4613      	mov	r3, r2
 800b202:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b204:	88fb      	ldrh	r3, [r7, #6]
 800b206:	68ba      	ldr	r2, [r7, #8]
 800b208:	2100      	movs	r1, #0
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f003 fdce 	bl	800edac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b082      	sub	sp, #8
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2204      	movs	r2, #4
 800b226:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b22a:	2300      	movs	r3, #0
 800b22c:	2200      	movs	r2, #0
 800b22e:	2100      	movs	r1, #0
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f003 fd98 	bl	800ed66 <USBD_LL_Transmit>

  return USBD_OK;
 800b236:	2300      	movs	r3, #0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3708      	adds	r7, #8
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2205      	movs	r2, #5
 800b24c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b250:	2300      	movs	r3, #0
 800b252:	2200      	movs	r2, #0
 800b254:	2100      	movs	r1, #0
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f003 fda8 	bl	800edac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
	...

0800b268 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b26e:	f3ef 8305 	mrs	r3, IPSR
 800b272:	60bb      	str	r3, [r7, #8]
  return(result);
 800b274:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10f      	bne.n	800b29a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b27a:	f3ef 8310 	mrs	r3, PRIMASK
 800b27e:	607b      	str	r3, [r7, #4]
  return(result);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d109      	bne.n	800b29a <osKernelInitialize+0x32>
 800b286:	4b10      	ldr	r3, [pc, #64]	; (800b2c8 <osKernelInitialize+0x60>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2b02      	cmp	r3, #2
 800b28c:	d109      	bne.n	800b2a2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b28e:	f3ef 8311 	mrs	r3, BASEPRI
 800b292:	603b      	str	r3, [r7, #0]
  return(result);
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d003      	beq.n	800b2a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b29a:	f06f 0305 	mvn.w	r3, #5
 800b29e:	60fb      	str	r3, [r7, #12]
 800b2a0:	e00c      	b.n	800b2bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b2a2:	4b09      	ldr	r3, [pc, #36]	; (800b2c8 <osKernelInitialize+0x60>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d105      	bne.n	800b2b6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800b2aa:	4b07      	ldr	r3, [pc, #28]	; (800b2c8 <osKernelInitialize+0x60>)
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	60fb      	str	r3, [r7, #12]
 800b2b4:	e002      	b.n	800b2bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3714      	adds	r7, #20
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bc80      	pop	{r7}
 800b2c6:	4770      	bx	lr
 800b2c8:	200001b4 	.word	0x200001b4

0800b2cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2d2:	f3ef 8305 	mrs	r3, IPSR
 800b2d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b2d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d10f      	bne.n	800b2fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2de:	f3ef 8310 	mrs	r3, PRIMASK
 800b2e2:	607b      	str	r3, [r7, #4]
  return(result);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d109      	bne.n	800b2fe <osKernelStart+0x32>
 800b2ea:	4b11      	ldr	r3, [pc, #68]	; (800b330 <osKernelStart+0x64>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2b02      	cmp	r3, #2
 800b2f0:	d109      	bne.n	800b306 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b2f2:	f3ef 8311 	mrs	r3, BASEPRI
 800b2f6:	603b      	str	r3, [r7, #0]
  return(result);
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d003      	beq.n	800b306 <osKernelStart+0x3a>
    stat = osErrorISR;
 800b2fe:	f06f 0305 	mvn.w	r3, #5
 800b302:	60fb      	str	r3, [r7, #12]
 800b304:	e00e      	b.n	800b324 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800b306:	4b0a      	ldr	r3, [pc, #40]	; (800b330 <osKernelStart+0x64>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d107      	bne.n	800b31e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800b30e:	4b08      	ldr	r3, [pc, #32]	; (800b330 <osKernelStart+0x64>)
 800b310:	2202      	movs	r2, #2
 800b312:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800b314:	f001 fbc6 	bl	800caa4 <vTaskStartScheduler>
      stat = osOK;
 800b318:	2300      	movs	r3, #0
 800b31a:	60fb      	str	r3, [r7, #12]
 800b31c:	e002      	b.n	800b324 <osKernelStart+0x58>
    } else {
      stat = osError;
 800b31e:	f04f 33ff 	mov.w	r3, #4294967295
 800b322:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b324:	68fb      	ldr	r3, [r7, #12]
}
 800b326:	4618      	mov	r0, r3
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	200001b4 	.word	0x200001b4

0800b334 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b334:	b580      	push	{r7, lr}
 800b336:	b092      	sub	sp, #72	; 0x48
 800b338:	af04      	add	r7, sp, #16
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b340:	2300      	movs	r3, #0
 800b342:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b344:	f3ef 8305 	mrs	r3, IPSR
 800b348:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f040 8094 	bne.w	800b47a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b352:	f3ef 8310 	mrs	r3, PRIMASK
 800b356:	623b      	str	r3, [r7, #32]
  return(result);
 800b358:	6a3b      	ldr	r3, [r7, #32]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	f040 808d 	bne.w	800b47a <osThreadNew+0x146>
 800b360:	4b48      	ldr	r3, [pc, #288]	; (800b484 <osThreadNew+0x150>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	2b02      	cmp	r3, #2
 800b366:	d106      	bne.n	800b376 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b368:	f3ef 8311 	mrs	r3, BASEPRI
 800b36c:	61fb      	str	r3, [r7, #28]
  return(result);
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	2b00      	cmp	r3, #0
 800b372:	f040 8082 	bne.w	800b47a <osThreadNew+0x146>
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d07e      	beq.n	800b47a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800b37c:	2380      	movs	r3, #128	; 0x80
 800b37e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800b380:	2318      	movs	r3, #24
 800b382:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800b384:	2300      	movs	r3, #0
 800b386:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800b388:	f107 031b 	add.w	r3, r7, #27
 800b38c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800b38e:	f04f 33ff 	mov.w	r3, #4294967295
 800b392:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d045      	beq.n	800b426 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d002      	beq.n	800b3a8 <osThreadNew+0x74>
        name = attr->name;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d002      	beq.n	800b3b6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	699b      	ldr	r3, [r3, #24]
 800b3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d008      	beq.n	800b3ce <osThreadNew+0x9a>
 800b3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3be:	2b38      	cmp	r3, #56	; 0x38
 800b3c0:	d805      	bhi.n	800b3ce <osThreadNew+0x9a>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	f003 0301 	and.w	r3, r3, #1
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d001      	beq.n	800b3d2 <osThreadNew+0x9e>
        return (NULL);
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	e054      	b.n	800b47c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	695b      	ldr	r3, [r3, #20]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d003      	beq.n	800b3e2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	695b      	ldr	r3, [r3, #20]
 800b3de:	089b      	lsrs	r3, r3, #2
 800b3e0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00e      	beq.n	800b408 <osThreadNew+0xd4>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	2b5b      	cmp	r3, #91	; 0x5b
 800b3f0:	d90a      	bls.n	800b408 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d006      	beq.n	800b408 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	695b      	ldr	r3, [r3, #20]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d002      	beq.n	800b408 <osThreadNew+0xd4>
        mem = 1;
 800b402:	2301      	movs	r3, #1
 800b404:	62bb      	str	r3, [r7, #40]	; 0x28
 800b406:	e010      	b.n	800b42a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d10c      	bne.n	800b42a <osThreadNew+0xf6>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d108      	bne.n	800b42a <osThreadNew+0xf6>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	691b      	ldr	r3, [r3, #16]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d104      	bne.n	800b42a <osThreadNew+0xf6>
          mem = 0;
 800b420:	2300      	movs	r3, #0
 800b422:	62bb      	str	r3, [r7, #40]	; 0x28
 800b424:	e001      	b.n	800b42a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800b426:	2300      	movs	r3, #0
 800b428:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800b42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d110      	bne.n	800b452 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b438:	9202      	str	r2, [sp, #8]
 800b43a:	9301      	str	r3, [sp, #4]
 800b43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b444:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f001 f8e2 	bl	800c610 <xTaskCreateStatic>
 800b44c:	4603      	mov	r3, r0
 800b44e:	617b      	str	r3, [r7, #20]
 800b450:	e013      	b.n	800b47a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800b452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b454:	2b00      	cmp	r3, #0
 800b456:	d110      	bne.n	800b47a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45a:	b29a      	uxth	r2, r3
 800b45c:	f107 0314 	add.w	r3, r7, #20
 800b460:	9301      	str	r3, [sp, #4]
 800b462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b464:	9300      	str	r3, [sp, #0]
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	f001 f92c 	bl	800c6c8 <xTaskCreate>
 800b470:	4603      	mov	r3, r0
 800b472:	2b01      	cmp	r3, #1
 800b474:	d001      	beq.n	800b47a <osThreadNew+0x146>
          hTask = NULL;
 800b476:	2300      	movs	r3, #0
 800b478:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b47a:	697b      	ldr	r3, [r7, #20]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3738      	adds	r7, #56	; 0x38
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	200001b4 	.word	0x200001b4

0800b488 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b488:	b580      	push	{r7, lr}
 800b48a:	b086      	sub	sp, #24
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b490:	f3ef 8305 	mrs	r3, IPSR
 800b494:	613b      	str	r3, [r7, #16]
  return(result);
 800b496:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d10f      	bne.n	800b4bc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b49c:	f3ef 8310 	mrs	r3, PRIMASK
 800b4a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d109      	bne.n	800b4bc <osDelay+0x34>
 800b4a8:	4b0d      	ldr	r3, [pc, #52]	; (800b4e0 <osDelay+0x58>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	d109      	bne.n	800b4c4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b4b0:	f3ef 8311 	mrs	r3, BASEPRI
 800b4b4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d003      	beq.n	800b4c4 <osDelay+0x3c>
    stat = osErrorISR;
 800b4bc:	f06f 0305 	mvn.w	r3, #5
 800b4c0:	617b      	str	r3, [r7, #20]
 800b4c2:	e007      	b.n	800b4d4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d002      	beq.n	800b4d4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f001 fab4 	bl	800ca3c <vTaskDelay>
    }
  }

  return (stat);
 800b4d4:	697b      	ldr	r3, [r7, #20]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3718      	adds	r7, #24
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	200001b4 	.word	0x200001b4

0800b4e4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b08a      	sub	sp, #40	; 0x28
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4f0:	f3ef 8305 	mrs	r3, IPSR
 800b4f4:	613b      	str	r3, [r7, #16]
  return(result);
 800b4f6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f040 8085 	bne.w	800b608 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4fe:	f3ef 8310 	mrs	r3, PRIMASK
 800b502:	60fb      	str	r3, [r7, #12]
  return(result);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d17e      	bne.n	800b608 <osMutexNew+0x124>
 800b50a:	4b42      	ldr	r3, [pc, #264]	; (800b614 <osMutexNew+0x130>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2b02      	cmp	r3, #2
 800b510:	d105      	bne.n	800b51e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b512:	f3ef 8311 	mrs	r3, BASEPRI
 800b516:	60bb      	str	r3, [r7, #8]
  return(result);
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d174      	bne.n	800b608 <osMutexNew+0x124>
    if (attr != NULL) {
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d003      	beq.n	800b52c <osMutexNew+0x48>
      type = attr->attr_bits;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	623b      	str	r3, [r7, #32]
 800b52a:	e001      	b.n	800b530 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800b52c:	2300      	movs	r3, #0
 800b52e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b530:	6a3b      	ldr	r3, [r7, #32]
 800b532:	f003 0301 	and.w	r3, r3, #1
 800b536:	2b00      	cmp	r3, #0
 800b538:	d002      	beq.n	800b540 <osMutexNew+0x5c>
      rmtx = 1U;
 800b53a:	2301      	movs	r3, #1
 800b53c:	61fb      	str	r3, [r7, #28]
 800b53e:	e001      	b.n	800b544 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800b540:	2300      	movs	r3, #0
 800b542:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b544:	6a3b      	ldr	r3, [r7, #32]
 800b546:	f003 0308 	and.w	r3, r3, #8
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d15c      	bne.n	800b608 <osMutexNew+0x124>
      mem = -1;
 800b54e:	f04f 33ff 	mov.w	r3, #4294967295
 800b552:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d015      	beq.n	800b586 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d006      	beq.n	800b570 <osMutexNew+0x8c>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	2b4f      	cmp	r3, #79	; 0x4f
 800b568:	d902      	bls.n	800b570 <osMutexNew+0x8c>
          mem = 1;
 800b56a:	2301      	movs	r3, #1
 800b56c:	61bb      	str	r3, [r7, #24]
 800b56e:	e00c      	b.n	800b58a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d108      	bne.n	800b58a <osMutexNew+0xa6>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d104      	bne.n	800b58a <osMutexNew+0xa6>
            mem = 0;
 800b580:	2300      	movs	r3, #0
 800b582:	61bb      	str	r3, [r7, #24]
 800b584:	e001      	b.n	800b58a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800b586:	2300      	movs	r3, #0
 800b588:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d112      	bne.n	800b5b6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d007      	beq.n	800b5a6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	4619      	mov	r1, r3
 800b59c:	2004      	movs	r0, #4
 800b59e:	f000 fb15 	bl	800bbcc <xQueueCreateMutexStatic>
 800b5a2:	6278      	str	r0, [r7, #36]	; 0x24
 800b5a4:	e016      	b.n	800b5d4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	2001      	movs	r0, #1
 800b5ae:	f000 fb0d 	bl	800bbcc <xQueueCreateMutexStatic>
 800b5b2:	6278      	str	r0, [r7, #36]	; 0x24
 800b5b4:	e00e      	b.n	800b5d4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800b5b6:	69bb      	ldr	r3, [r7, #24]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d10b      	bne.n	800b5d4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d004      	beq.n	800b5cc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800b5c2:	2004      	movs	r0, #4
 800b5c4:	f000 faea 	bl	800bb9c <xQueueCreateMutex>
 800b5c8:	6278      	str	r0, [r7, #36]	; 0x24
 800b5ca:	e003      	b.n	800b5d4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800b5cc:	2001      	movs	r0, #1
 800b5ce:	f000 fae5 	bl	800bb9c <xQueueCreateMutex>
 800b5d2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d00c      	beq.n	800b5f4 <osMutexNew+0x110>
        if (attr != NULL) {
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d003      	beq.n	800b5e8 <osMutexNew+0x104>
          name = attr->name;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	617b      	str	r3, [r7, #20]
 800b5e6:	e001      	b.n	800b5ec <osMutexNew+0x108>
        } else {
          name = NULL;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800b5ec:	6979      	ldr	r1, [r7, #20]
 800b5ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5f0:	f000 ffb2 	bl	800c558 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d006      	beq.n	800b608 <osMutexNew+0x124>
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d003      	beq.n	800b608 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b602:	f043 0301 	orr.w	r3, r3, #1
 800b606:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3728      	adds	r7, #40	; 0x28
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	200001b4 	.word	0x200001b4

0800b618 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b618:	b580      	push	{r7, lr}
 800b61a:	b08c      	sub	sp, #48	; 0x30
 800b61c:	af02      	add	r7, sp, #8
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b624:	2300      	movs	r3, #0
 800b626:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b628:	f3ef 8305 	mrs	r3, IPSR
 800b62c:	61bb      	str	r3, [r7, #24]
  return(result);
 800b62e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b630:	2b00      	cmp	r3, #0
 800b632:	d16f      	bne.n	800b714 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b634:	f3ef 8310 	mrs	r3, PRIMASK
 800b638:	617b      	str	r3, [r7, #20]
  return(result);
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d169      	bne.n	800b714 <osMessageQueueNew+0xfc>
 800b640:	4b37      	ldr	r3, [pc, #220]	; (800b720 <osMessageQueueNew+0x108>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2b02      	cmp	r3, #2
 800b646:	d105      	bne.n	800b654 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b648:	f3ef 8311 	mrs	r3, BASEPRI
 800b64c:	613b      	str	r3, [r7, #16]
  return(result);
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d15f      	bne.n	800b714 <osMessageQueueNew+0xfc>
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d05c      	beq.n	800b714 <osMessageQueueNew+0xfc>
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d059      	beq.n	800b714 <osMessageQueueNew+0xfc>
    mem = -1;
 800b660:	f04f 33ff 	mov.w	r3, #4294967295
 800b664:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d029      	beq.n	800b6c0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d012      	beq.n	800b69a <osMessageQueueNew+0x82>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	2b4f      	cmp	r3, #79	; 0x4f
 800b67a:	d90e      	bls.n	800b69a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b680:	2b00      	cmp	r3, #0
 800b682:	d00a      	beq.n	800b69a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	695a      	ldr	r2, [r3, #20]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	68b9      	ldr	r1, [r7, #8]
 800b68c:	fb01 f303 	mul.w	r3, r1, r3
 800b690:	429a      	cmp	r2, r3
 800b692:	d302      	bcc.n	800b69a <osMessageQueueNew+0x82>
        mem = 1;
 800b694:	2301      	movs	r3, #1
 800b696:	623b      	str	r3, [r7, #32]
 800b698:	e014      	b.n	800b6c4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d110      	bne.n	800b6c4 <osMessageQueueNew+0xac>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10c      	bne.n	800b6c4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d108      	bne.n	800b6c4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	695b      	ldr	r3, [r3, #20]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d104      	bne.n	800b6c4 <osMessageQueueNew+0xac>
          mem = 0;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	623b      	str	r3, [r7, #32]
 800b6be:	e001      	b.n	800b6c4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b6c4:	6a3b      	ldr	r3, [r7, #32]
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d10b      	bne.n	800b6e2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	691a      	ldr	r2, [r3, #16]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	9100      	str	r1, [sp, #0]
 800b6d6:	68b9      	ldr	r1, [r7, #8]
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f000 f96d 	bl	800b9b8 <xQueueGenericCreateStatic>
 800b6de:	6278      	str	r0, [r7, #36]	; 0x24
 800b6e0:	e008      	b.n	800b6f4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800b6e2:	6a3b      	ldr	r3, [r7, #32]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d105      	bne.n	800b6f4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	68b9      	ldr	r1, [r7, #8]
 800b6ec:	68f8      	ldr	r0, [r7, #12]
 800b6ee:	f000 f9da 	bl	800baa6 <xQueueGenericCreate>
 800b6f2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00c      	beq.n	800b714 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d003      	beq.n	800b708 <osMessageQueueNew+0xf0>
        name = attr->name;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	61fb      	str	r3, [r7, #28]
 800b706:	e001      	b.n	800b70c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800b708:	2300      	movs	r3, #0
 800b70a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800b70c:	69f9      	ldr	r1, [r7, #28]
 800b70e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b710:	f000 ff22 	bl	800c558 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b716:	4618      	mov	r0, r3
 800b718:	3728      	adds	r7, #40	; 0x28
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	200001b4 	.word	0x200001b4

0800b724 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	4a06      	ldr	r2, [pc, #24]	; (800b74c <vApplicationGetIdleTaskMemory+0x28>)
 800b734:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	4a05      	ldr	r2, [pc, #20]	; (800b750 <vApplicationGetIdleTaskMemory+0x2c>)
 800b73a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2280      	movs	r2, #128	; 0x80
 800b740:	601a      	str	r2, [r3, #0]
}
 800b742:	bf00      	nop
 800b744:	3714      	adds	r7, #20
 800b746:	46bd      	mov	sp, r7
 800b748:	bc80      	pop	{r7}
 800b74a:	4770      	bx	lr
 800b74c:	200001b8 	.word	0x200001b8
 800b750:	20000214 	.word	0x20000214

0800b754 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	4a07      	ldr	r2, [pc, #28]	; (800b780 <vApplicationGetTimerTaskMemory+0x2c>)
 800b764:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	4a06      	ldr	r2, [pc, #24]	; (800b784 <vApplicationGetTimerTaskMemory+0x30>)
 800b76a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b772:	601a      	str	r2, [r3, #0]
}
 800b774:	bf00      	nop
 800b776:	3714      	adds	r7, #20
 800b778:	46bd      	mov	sp, r7
 800b77a:	bc80      	pop	{r7}
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	20000414 	.word	0x20000414
 800b784:	20000470 	.word	0x20000470

0800b788 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f103 0208 	add.w	r2, r3, #8
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f04f 32ff 	mov.w	r2, #4294967295
 800b7a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f103 0208 	add.w	r2, r3, #8
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f103 0208 	add.w	r2, r3, #8
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b7bc:	bf00      	nop
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bc80      	pop	{r7}
 800b7c4:	4770      	bx	lr

0800b7c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b7c6:	b480      	push	{r7}
 800b7c8:	b083      	sub	sp, #12
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b7d4:	bf00      	nop
 800b7d6:	370c      	adds	r7, #12
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bc80      	pop	{r7}
 800b7dc:	4770      	bx	lr

0800b7de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b7de:	b480      	push	{r7}
 800b7e0:	b085      	sub	sp, #20
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
 800b7e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	689a      	ldr	r2, [r3, #8]
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	689b      	ldr	r3, [r3, #8]
 800b800:	683a      	ldr	r2, [r7, #0]
 800b802:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	683a      	ldr	r2, [r7, #0]
 800b808:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	1c5a      	adds	r2, r3, #1
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	601a      	str	r2, [r3, #0]
}
 800b81a:	bf00      	nop
 800b81c:	3714      	adds	r7, #20
 800b81e:	46bd      	mov	sp, r7
 800b820:	bc80      	pop	{r7}
 800b822:	4770      	bx	lr

0800b824 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b824:	b480      	push	{r7}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83a:	d103      	bne.n	800b844 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	691b      	ldr	r3, [r3, #16]
 800b840:	60fb      	str	r3, [r7, #12]
 800b842:	e00c      	b.n	800b85e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	3308      	adds	r3, #8
 800b848:	60fb      	str	r3, [r7, #12]
 800b84a:	e002      	b.n	800b852 <vListInsert+0x2e>
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	60fb      	str	r3, [r7, #12]
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d2f6      	bcs.n	800b84c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	685a      	ldr	r2, [r3, #4]
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	683a      	ldr	r2, [r7, #0]
 800b86c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	683a      	ldr	r2, [r7, #0]
 800b878:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	1c5a      	adds	r2, r3, #1
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	601a      	str	r2, [r3, #0]
}
 800b88a:	bf00      	nop
 800b88c:	3714      	adds	r7, #20
 800b88e:	46bd      	mov	sp, r7
 800b890:	bc80      	pop	{r7}
 800b892:	4770      	bx	lr

0800b894 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	691b      	ldr	r3, [r3, #16]
 800b8a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	6892      	ldr	r2, [r2, #8]
 800b8aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	6852      	ldr	r2, [r2, #4]
 800b8b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d103      	bne.n	800b8c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	689a      	ldr	r2, [r3, #8]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	1e5a      	subs	r2, r3, #1
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3714      	adds	r7, #20
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bc80      	pop	{r7}
 800b8e4:	4770      	bx	lr
	...

0800b8e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d10a      	bne.n	800b912 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b900:	f383 8811 	msr	BASEPRI, r3
 800b904:	f3bf 8f6f 	isb	sy
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b90e:	bf00      	nop
 800b910:	e7fe      	b.n	800b910 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b912:	f002 fb33 	bl	800df7c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b91e:	68f9      	ldr	r1, [r7, #12]
 800b920:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b922:	fb01 f303 	mul.w	r3, r1, r3
 800b926:	441a      	add	r2, r3
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2200      	movs	r2, #0
 800b930:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b942:	3b01      	subs	r3, #1
 800b944:	68f9      	ldr	r1, [r7, #12]
 800b946:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b948:	fb01 f303 	mul.w	r3, r1, r3
 800b94c:	441a      	add	r2, r3
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	22ff      	movs	r2, #255	; 0xff
 800b956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	22ff      	movs	r2, #255	; 0xff
 800b95e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d114      	bne.n	800b992 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	691b      	ldr	r3, [r3, #16]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d01a      	beq.n	800b9a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	3310      	adds	r3, #16
 800b974:	4618      	mov	r0, r3
 800b976:	f001 fb1f 	bl	800cfb8 <xTaskRemoveFromEventList>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d012      	beq.n	800b9a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b980:	4b0c      	ldr	r3, [pc, #48]	; (800b9b4 <xQueueGenericReset+0xcc>)
 800b982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b986:	601a      	str	r2, [r3, #0]
 800b988:	f3bf 8f4f 	dsb	sy
 800b98c:	f3bf 8f6f 	isb	sy
 800b990:	e009      	b.n	800b9a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	3310      	adds	r3, #16
 800b996:	4618      	mov	r0, r3
 800b998:	f7ff fef6 	bl	800b788 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	3324      	adds	r3, #36	; 0x24
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7ff fef1 	bl	800b788 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b9a6:	f002 fb19 	bl	800dfdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b9aa:	2301      	movs	r3, #1
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3710      	adds	r7, #16
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	e000ed04 	.word	0xe000ed04

0800b9b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b08e      	sub	sp, #56	; 0x38
 800b9bc:	af02      	add	r7, sp, #8
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
 800b9c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10a      	bne.n	800b9e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d0:	f383 8811 	msr	BASEPRI, r3
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b9de:	bf00      	nop
 800b9e0:	e7fe      	b.n	800b9e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d10a      	bne.n	800b9fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ec:	f383 8811 	msr	BASEPRI, r3
 800b9f0:	f3bf 8f6f 	isb	sy
 800b9f4:	f3bf 8f4f 	dsb	sy
 800b9f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b9fa:	bf00      	nop
 800b9fc:	e7fe      	b.n	800b9fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <xQueueGenericCreateStatic+0x52>
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d001      	beq.n	800ba0e <xQueueGenericCreateStatic+0x56>
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e000      	b.n	800ba10 <xQueueGenericCreateStatic+0x58>
 800ba0e:	2300      	movs	r3, #0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d10a      	bne.n	800ba2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ba14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba18:	f383 8811 	msr	BASEPRI, r3
 800ba1c:	f3bf 8f6f 	isb	sy
 800ba20:	f3bf 8f4f 	dsb	sy
 800ba24:	623b      	str	r3, [r7, #32]
}
 800ba26:	bf00      	nop
 800ba28:	e7fe      	b.n	800ba28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d102      	bne.n	800ba36 <xQueueGenericCreateStatic+0x7e>
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d101      	bne.n	800ba3a <xQueueGenericCreateStatic+0x82>
 800ba36:	2301      	movs	r3, #1
 800ba38:	e000      	b.n	800ba3c <xQueueGenericCreateStatic+0x84>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d10a      	bne.n	800ba56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ba40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba44:	f383 8811 	msr	BASEPRI, r3
 800ba48:	f3bf 8f6f 	isb	sy
 800ba4c:	f3bf 8f4f 	dsb	sy
 800ba50:	61fb      	str	r3, [r7, #28]
}
 800ba52:	bf00      	nop
 800ba54:	e7fe      	b.n	800ba54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ba56:	2350      	movs	r3, #80	; 0x50
 800ba58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	2b50      	cmp	r3, #80	; 0x50
 800ba5e:	d00a      	beq.n	800ba76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	61bb      	str	r3, [r7, #24]
}
 800ba72:	bf00      	nop
 800ba74:	e7fe      	b.n	800ba74 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ba7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00d      	beq.n	800ba9c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ba80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba88:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ba8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	4613      	mov	r3, r2
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	68b9      	ldr	r1, [r7, #8]
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f000 f843 	bl	800bb22 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ba9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3730      	adds	r7, #48	; 0x30
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b08a      	sub	sp, #40	; 0x28
 800baaa:	af02      	add	r7, sp, #8
 800baac:	60f8      	str	r0, [r7, #12]
 800baae:	60b9      	str	r1, [r7, #8]
 800bab0:	4613      	mov	r3, r2
 800bab2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d10a      	bne.n	800bad0 <xQueueGenericCreate+0x2a>
	__asm volatile
 800baba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800babe:	f383 8811 	msr	BASEPRI, r3
 800bac2:	f3bf 8f6f 	isb	sy
 800bac6:	f3bf 8f4f 	dsb	sy
 800baca:	613b      	str	r3, [r7, #16]
}
 800bacc:	bf00      	nop
 800bace:	e7fe      	b.n	800bace <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d102      	bne.n	800badc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bad6:	2300      	movs	r3, #0
 800bad8:	61fb      	str	r3, [r7, #28]
 800bada:	e004      	b.n	800bae6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	fb02 f303 	mul.w	r3, r2, r3
 800bae4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800bae6:	69fb      	ldr	r3, [r7, #28]
 800bae8:	3350      	adds	r3, #80	; 0x50
 800baea:	4618      	mov	r0, r3
 800baec:	f002 fb46 	bl	800e17c <pvPortMalloc>
 800baf0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800baf2:	69bb      	ldr	r3, [r7, #24]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00f      	beq.n	800bb18 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	3350      	adds	r3, #80	; 0x50
 800bafc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb06:	79fa      	ldrb	r2, [r7, #7]
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	9300      	str	r3, [sp, #0]
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	697a      	ldr	r2, [r7, #20]
 800bb10:	68b9      	ldr	r1, [r7, #8]
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	f000 f805 	bl	800bb22 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800bb18:	69bb      	ldr	r3, [r7, #24]
	}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3720      	adds	r7, #32
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b084      	sub	sp, #16
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	60f8      	str	r0, [r7, #12]
 800bb2a:	60b9      	str	r1, [r7, #8]
 800bb2c:	607a      	str	r2, [r7, #4]
 800bb2e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d103      	bne.n	800bb3e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	69ba      	ldr	r2, [r7, #24]
 800bb3a:	601a      	str	r2, [r3, #0]
 800bb3c:	e002      	b.n	800bb44 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	68ba      	ldr	r2, [r7, #8]
 800bb4e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bb50:	2101      	movs	r1, #1
 800bb52:	69b8      	ldr	r0, [r7, #24]
 800bb54:	f7ff fec8 	bl	800b8e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	78fa      	ldrb	r2, [r7, #3]
 800bb5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bb60:	bf00      	nop
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d00e      	beq.n	800bb94 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2200      	movs	r2, #0
 800bb86:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bb88:	2300      	movs	r3, #0
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 f838 	bl	800bc04 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bb94:	bf00      	nop
 800bb96:	3708      	adds	r7, #8
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b086      	sub	sp, #24
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	4603      	mov	r3, r0
 800bba4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bba6:	2301      	movs	r3, #1
 800bba8:	617b      	str	r3, [r7, #20]
 800bbaa:	2300      	movs	r3, #0
 800bbac:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bbae:	79fb      	ldrb	r3, [r7, #7]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	6939      	ldr	r1, [r7, #16]
 800bbb4:	6978      	ldr	r0, [r7, #20]
 800bbb6:	f7ff ff76 	bl	800baa6 <xQueueGenericCreate>
 800bbba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	f7ff ffd3 	bl	800bb68 <prvInitialiseMutex>

		return pxNewQueue;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
	}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3718      	adds	r7, #24
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b088      	sub	sp, #32
 800bbd0:	af02      	add	r7, sp, #8
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	6039      	str	r1, [r7, #0]
 800bbd6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	617b      	str	r3, [r7, #20]
 800bbdc:	2300      	movs	r3, #0
 800bbde:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bbe0:	79fb      	ldrb	r3, [r7, #7]
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	6939      	ldr	r1, [r7, #16]
 800bbea:	6978      	ldr	r0, [r7, #20]
 800bbec:	f7ff fee4 	bl	800b9b8 <xQueueGenericCreateStatic>
 800bbf0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f7ff ffb8 	bl	800bb68 <prvInitialiseMutex>

		return pxNewQueue;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
	}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3718      	adds	r7, #24
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
	...

0800bc04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b08e      	sub	sp, #56	; 0x38
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
 800bc10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bc12:	2300      	movs	r3, #0
 800bc14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d10a      	bne.n	800bc36 <xQueueGenericSend+0x32>
	__asm volatile
 800bc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc24:	f383 8811 	msr	BASEPRI, r3
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc32:	bf00      	nop
 800bc34:	e7fe      	b.n	800bc34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d103      	bne.n	800bc44 <xQueueGenericSend+0x40>
 800bc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d101      	bne.n	800bc48 <xQueueGenericSend+0x44>
 800bc44:	2301      	movs	r3, #1
 800bc46:	e000      	b.n	800bc4a <xQueueGenericSend+0x46>
 800bc48:	2300      	movs	r3, #0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10a      	bne.n	800bc64 <xQueueGenericSend+0x60>
	__asm volatile
 800bc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc52:	f383 8811 	msr	BASEPRI, r3
 800bc56:	f3bf 8f6f 	isb	sy
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc60:	bf00      	nop
 800bc62:	e7fe      	b.n	800bc62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	2b02      	cmp	r3, #2
 800bc68:	d103      	bne.n	800bc72 <xQueueGenericSend+0x6e>
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d101      	bne.n	800bc76 <xQueueGenericSend+0x72>
 800bc72:	2301      	movs	r3, #1
 800bc74:	e000      	b.n	800bc78 <xQueueGenericSend+0x74>
 800bc76:	2300      	movs	r3, #0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10a      	bne.n	800bc92 <xQueueGenericSend+0x8e>
	__asm volatile
 800bc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc80:	f383 8811 	msr	BASEPRI, r3
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	623b      	str	r3, [r7, #32]
}
 800bc8e:	bf00      	nop
 800bc90:	e7fe      	b.n	800bc90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc92:	f001 fb8b 	bl	800d3ac <xTaskGetSchedulerState>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d102      	bne.n	800bca2 <xQueueGenericSend+0x9e>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d101      	bne.n	800bca6 <xQueueGenericSend+0xa2>
 800bca2:	2301      	movs	r3, #1
 800bca4:	e000      	b.n	800bca8 <xQueueGenericSend+0xa4>
 800bca6:	2300      	movs	r3, #0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d10a      	bne.n	800bcc2 <xQueueGenericSend+0xbe>
	__asm volatile
 800bcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb0:	f383 8811 	msr	BASEPRI, r3
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	61fb      	str	r3, [r7, #28]
}
 800bcbe:	bf00      	nop
 800bcc0:	e7fe      	b.n	800bcc0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcc2:	f002 f95b 	bl	800df7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d302      	bcc.n	800bcd8 <xQueueGenericSend+0xd4>
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	2b02      	cmp	r3, #2
 800bcd6:	d129      	bne.n	800bd2c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	68b9      	ldr	r1, [r7, #8]
 800bcdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcde:	f000 fb2a 	bl	800c336 <prvCopyDataToQueue>
 800bce2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d010      	beq.n	800bd0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcee:	3324      	adds	r3, #36	; 0x24
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f001 f961 	bl	800cfb8 <xTaskRemoveFromEventList>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d013      	beq.n	800bd24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bcfc:	4b3f      	ldr	r3, [pc, #252]	; (800bdfc <xQueueGenericSend+0x1f8>)
 800bcfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd02:	601a      	str	r2, [r3, #0]
 800bd04:	f3bf 8f4f 	dsb	sy
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	e00a      	b.n	800bd24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d007      	beq.n	800bd24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bd14:	4b39      	ldr	r3, [pc, #228]	; (800bdfc <xQueueGenericSend+0x1f8>)
 800bd16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd1a:	601a      	str	r2, [r3, #0]
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bd24:	f002 f95a 	bl	800dfdc <vPortExitCritical>
				return pdPASS;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e063      	b.n	800bdf4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d103      	bne.n	800bd3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd32:	f002 f953 	bl	800dfdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bd36:	2300      	movs	r3, #0
 800bd38:	e05c      	b.n	800bdf4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d106      	bne.n	800bd4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd40:	f107 0314 	add.w	r3, r7, #20
 800bd44:	4618      	mov	r0, r3
 800bd46:	f001 f99b 	bl	800d080 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd4e:	f002 f945 	bl	800dfdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd52:	f000 ff0d 	bl	800cb70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd56:	f002 f911 	bl	800df7c <vPortEnterCritical>
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd60:	b25b      	sxtb	r3, r3
 800bd62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd66:	d103      	bne.n	800bd70 <xQueueGenericSend+0x16c>
 800bd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd76:	b25b      	sxtb	r3, r3
 800bd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd7c:	d103      	bne.n	800bd86 <xQueueGenericSend+0x182>
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd80:	2200      	movs	r2, #0
 800bd82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd86:	f002 f929 	bl	800dfdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd8a:	1d3a      	adds	r2, r7, #4
 800bd8c:	f107 0314 	add.w	r3, r7, #20
 800bd90:	4611      	mov	r1, r2
 800bd92:	4618      	mov	r0, r3
 800bd94:	f001 f98a 	bl	800d0ac <xTaskCheckForTimeOut>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d124      	bne.n	800bde8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bd9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bda0:	f000 fbc1 	bl	800c526 <prvIsQueueFull>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d018      	beq.n	800bddc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdac:	3310      	adds	r3, #16
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	4611      	mov	r1, r2
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f001 f8b0 	bl	800cf18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bdb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdba:	f000 fb4c 	bl	800c456 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bdbe:	f000 fee5 	bl	800cb8c <xTaskResumeAll>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f47f af7c 	bne.w	800bcc2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bdca:	4b0c      	ldr	r3, [pc, #48]	; (800bdfc <xQueueGenericSend+0x1f8>)
 800bdcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdd0:	601a      	str	r2, [r3, #0]
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	f3bf 8f6f 	isb	sy
 800bdda:	e772      	b.n	800bcc2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdde:	f000 fb3a 	bl	800c456 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bde2:	f000 fed3 	bl	800cb8c <xTaskResumeAll>
 800bde6:	e76c      	b.n	800bcc2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bde8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdea:	f000 fb34 	bl	800c456 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdee:	f000 fecd 	bl	800cb8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bdf2:	2300      	movs	r3, #0
		}
	}
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3738      	adds	r7, #56	; 0x38
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	e000ed04 	.word	0xe000ed04

0800be00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b08e      	sub	sp, #56	; 0x38
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	607a      	str	r2, [r7, #4]
 800be0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10a      	bne.n	800be2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800be18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1c:	f383 8811 	msr	BASEPRI, r3
 800be20:	f3bf 8f6f 	isb	sy
 800be24:	f3bf 8f4f 	dsb	sy
 800be28:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be2a:	bf00      	nop
 800be2c:	e7fe      	b.n	800be2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d103      	bne.n	800be3c <xQueueGenericSendFromISR+0x3c>
 800be34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d101      	bne.n	800be40 <xQueueGenericSendFromISR+0x40>
 800be3c:	2301      	movs	r3, #1
 800be3e:	e000      	b.n	800be42 <xQueueGenericSendFromISR+0x42>
 800be40:	2300      	movs	r3, #0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10a      	bne.n	800be5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800be46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4a:	f383 8811 	msr	BASEPRI, r3
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	623b      	str	r3, [r7, #32]
}
 800be58:	bf00      	nop
 800be5a:	e7fe      	b.n	800be5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d103      	bne.n	800be6a <xQueueGenericSendFromISR+0x6a>
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be66:	2b01      	cmp	r3, #1
 800be68:	d101      	bne.n	800be6e <xQueueGenericSendFromISR+0x6e>
 800be6a:	2301      	movs	r3, #1
 800be6c:	e000      	b.n	800be70 <xQueueGenericSendFromISR+0x70>
 800be6e:	2300      	movs	r3, #0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d10a      	bne.n	800be8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800be74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be78:	f383 8811 	msr	BASEPRI, r3
 800be7c:	f3bf 8f6f 	isb	sy
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	61fb      	str	r3, [r7, #28]
}
 800be86:	bf00      	nop
 800be88:	e7fe      	b.n	800be88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be8a:	f002 f939 	bl	800e100 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800be8e:	f3ef 8211 	mrs	r2, BASEPRI
 800be92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be96:	f383 8811 	msr	BASEPRI, r3
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	f3bf 8f4f 	dsb	sy
 800bea2:	61ba      	str	r2, [r7, #24]
 800bea4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bea6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bea8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800beaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800beae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d302      	bcc.n	800bebc <xQueueGenericSendFromISR+0xbc>
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	2b02      	cmp	r3, #2
 800beba:	d12c      	bne.n	800bf16 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	68b9      	ldr	r1, [r7, #8]
 800beca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800becc:	f000 fa33 	bl	800c336 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bed0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed8:	d112      	bne.n	800bf00 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800beda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d016      	beq.n	800bf10 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee4:	3324      	adds	r3, #36	; 0x24
 800bee6:	4618      	mov	r0, r3
 800bee8:	f001 f866 	bl	800cfb8 <xTaskRemoveFromEventList>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00e      	beq.n	800bf10 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00b      	beq.n	800bf10 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	601a      	str	r2, [r3, #0]
 800befe:	e007      	b.n	800bf10 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf04:	3301      	adds	r3, #1
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	b25a      	sxtb	r2, r3
 800bf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bf10:	2301      	movs	r3, #1
 800bf12:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bf14:	e001      	b.n	800bf1a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf16:	2300      	movs	r3, #0
 800bf18:	637b      	str	r3, [r7, #52]	; 0x34
 800bf1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bf24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3738      	adds	r7, #56	; 0x38
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b08c      	sub	sp, #48	; 0x30
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d10a      	bne.n	800bf60 <xQueueReceive+0x30>
	__asm volatile
 800bf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4e:	f383 8811 	msr	BASEPRI, r3
 800bf52:	f3bf 8f6f 	isb	sy
 800bf56:	f3bf 8f4f 	dsb	sy
 800bf5a:	623b      	str	r3, [r7, #32]
}
 800bf5c:	bf00      	nop
 800bf5e:	e7fe      	b.n	800bf5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d103      	bne.n	800bf6e <xQueueReceive+0x3e>
 800bf66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d101      	bne.n	800bf72 <xQueueReceive+0x42>
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e000      	b.n	800bf74 <xQueueReceive+0x44>
 800bf72:	2300      	movs	r3, #0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d10a      	bne.n	800bf8e <xQueueReceive+0x5e>
	__asm volatile
 800bf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7c:	f383 8811 	msr	BASEPRI, r3
 800bf80:	f3bf 8f6f 	isb	sy
 800bf84:	f3bf 8f4f 	dsb	sy
 800bf88:	61fb      	str	r3, [r7, #28]
}
 800bf8a:	bf00      	nop
 800bf8c:	e7fe      	b.n	800bf8c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf8e:	f001 fa0d 	bl	800d3ac <xTaskGetSchedulerState>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d102      	bne.n	800bf9e <xQueueReceive+0x6e>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d101      	bne.n	800bfa2 <xQueueReceive+0x72>
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e000      	b.n	800bfa4 <xQueueReceive+0x74>
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d10a      	bne.n	800bfbe <xQueueReceive+0x8e>
	__asm volatile
 800bfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfac:	f383 8811 	msr	BASEPRI, r3
 800bfb0:	f3bf 8f6f 	isb	sy
 800bfb4:	f3bf 8f4f 	dsb	sy
 800bfb8:	61bb      	str	r3, [r7, #24]
}
 800bfba:	bf00      	nop
 800bfbc:	e7fe      	b.n	800bfbc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800bfbe:	f001 ffdd 	bl	800df7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d01f      	beq.n	800c00e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bfce:	68b9      	ldr	r1, [r7, #8]
 800bfd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfd2:	f000 fa1a 	bl	800c40a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd8:	1e5a      	subs	r2, r3, #1
 800bfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfdc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe0:	691b      	ldr	r3, [r3, #16]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00f      	beq.n	800c006 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe8:	3310      	adds	r3, #16
 800bfea:	4618      	mov	r0, r3
 800bfec:	f000 ffe4 	bl	800cfb8 <xTaskRemoveFromEventList>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d007      	beq.n	800c006 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bff6:	4b3d      	ldr	r3, [pc, #244]	; (800c0ec <xQueueReceive+0x1bc>)
 800bff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bffc:	601a      	str	r2, [r3, #0]
 800bffe:	f3bf 8f4f 	dsb	sy
 800c002:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c006:	f001 ffe9 	bl	800dfdc <vPortExitCritical>
				return pdPASS;
 800c00a:	2301      	movs	r3, #1
 800c00c:	e069      	b.n	800c0e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d103      	bne.n	800c01c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c014:	f001 ffe2 	bl	800dfdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c018:	2300      	movs	r3, #0
 800c01a:	e062      	b.n	800c0e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d106      	bne.n	800c030 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c022:	f107 0310 	add.w	r3, r7, #16
 800c026:	4618      	mov	r0, r3
 800c028:	f001 f82a 	bl	800d080 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c02c:	2301      	movs	r3, #1
 800c02e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c030:	f001 ffd4 	bl	800dfdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c034:	f000 fd9c 	bl	800cb70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c038:	f001 ffa0 	bl	800df7c <vPortEnterCritical>
 800c03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c042:	b25b      	sxtb	r3, r3
 800c044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c048:	d103      	bne.n	800c052 <xQueueReceive+0x122>
 800c04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04c:	2200      	movs	r2, #0
 800c04e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c058:	b25b      	sxtb	r3, r3
 800c05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c05e:	d103      	bne.n	800c068 <xQueueReceive+0x138>
 800c060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c062:	2200      	movs	r2, #0
 800c064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c068:	f001 ffb8 	bl	800dfdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c06c:	1d3a      	adds	r2, r7, #4
 800c06e:	f107 0310 	add.w	r3, r7, #16
 800c072:	4611      	mov	r1, r2
 800c074:	4618      	mov	r0, r3
 800c076:	f001 f819 	bl	800d0ac <xTaskCheckForTimeOut>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d123      	bne.n	800c0c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c082:	f000 fa3a 	bl	800c4fa <prvIsQueueEmpty>
 800c086:	4603      	mov	r3, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d017      	beq.n	800c0bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08e:	3324      	adds	r3, #36	; 0x24
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	4611      	mov	r1, r2
 800c094:	4618      	mov	r0, r3
 800c096:	f000 ff3f 	bl	800cf18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c09a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c09c:	f000 f9db 	bl	800c456 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c0a0:	f000 fd74 	bl	800cb8c <xTaskResumeAll>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d189      	bne.n	800bfbe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c0aa:	4b10      	ldr	r3, [pc, #64]	; (800c0ec <xQueueReceive+0x1bc>)
 800c0ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0b0:	601a      	str	r2, [r3, #0]
 800c0b2:	f3bf 8f4f 	dsb	sy
 800c0b6:	f3bf 8f6f 	isb	sy
 800c0ba:	e780      	b.n	800bfbe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c0bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0be:	f000 f9ca 	bl	800c456 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0c2:	f000 fd63 	bl	800cb8c <xTaskResumeAll>
 800c0c6:	e77a      	b.n	800bfbe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c0c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0ca:	f000 f9c4 	bl	800c456 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0ce:	f000 fd5d 	bl	800cb8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0d4:	f000 fa11 	bl	800c4fa <prvIsQueueEmpty>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	f43f af6f 	beq.w	800bfbe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c0e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3730      	adds	r7, #48	; 0x30
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	e000ed04 	.word	0xe000ed04

0800c0f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b08e      	sub	sp, #56	; 0x38
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c102:	2300      	movs	r3, #0
 800c104:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10a      	bne.n	800c122 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c110:	f383 8811 	msr	BASEPRI, r3
 800c114:	f3bf 8f6f 	isb	sy
 800c118:	f3bf 8f4f 	dsb	sy
 800c11c:	623b      	str	r3, [r7, #32]
}
 800c11e:	bf00      	nop
 800c120:	e7fe      	b.n	800c120 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c126:	2b00      	cmp	r3, #0
 800c128:	d00a      	beq.n	800c140 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12e:	f383 8811 	msr	BASEPRI, r3
 800c132:	f3bf 8f6f 	isb	sy
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	61fb      	str	r3, [r7, #28]
}
 800c13c:	bf00      	nop
 800c13e:	e7fe      	b.n	800c13e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c140:	f001 f934 	bl	800d3ac <xTaskGetSchedulerState>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d102      	bne.n	800c150 <xQueueSemaphoreTake+0x60>
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d101      	bne.n	800c154 <xQueueSemaphoreTake+0x64>
 800c150:	2301      	movs	r3, #1
 800c152:	e000      	b.n	800c156 <xQueueSemaphoreTake+0x66>
 800c154:	2300      	movs	r3, #0
 800c156:	2b00      	cmp	r3, #0
 800c158:	d10a      	bne.n	800c170 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15e:	f383 8811 	msr	BASEPRI, r3
 800c162:	f3bf 8f6f 	isb	sy
 800c166:	f3bf 8f4f 	dsb	sy
 800c16a:	61bb      	str	r3, [r7, #24]
}
 800c16c:	bf00      	nop
 800c16e:	e7fe      	b.n	800c16e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c170:	f001 ff04 	bl	800df7c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c178:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d024      	beq.n	800c1ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c182:	1e5a      	subs	r2, r3, #1
 800c184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c186:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d104      	bne.n	800c19a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800c190:	f001 fa8c 	bl	800d6ac <pvTaskIncrementMutexHeldCount>
 800c194:	4602      	mov	r2, r0
 800c196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c198:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19c:	691b      	ldr	r3, [r3, #16]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d00f      	beq.n	800c1c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a4:	3310      	adds	r3, #16
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f000 ff06 	bl	800cfb8 <xTaskRemoveFromEventList>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d007      	beq.n	800c1c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c1b2:	4b54      	ldr	r3, [pc, #336]	; (800c304 <xQueueSemaphoreTake+0x214>)
 800c1b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1b8:	601a      	str	r2, [r3, #0]
 800c1ba:	f3bf 8f4f 	dsb	sy
 800c1be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c1c2:	f001 ff0b 	bl	800dfdc <vPortExitCritical>
				return pdPASS;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e097      	b.n	800c2fa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d111      	bne.n	800c1f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d00a      	beq.n	800c1ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1da:	f383 8811 	msr	BASEPRI, r3
 800c1de:	f3bf 8f6f 	isb	sy
 800c1e2:	f3bf 8f4f 	dsb	sy
 800c1e6:	617b      	str	r3, [r7, #20]
}
 800c1e8:	bf00      	nop
 800c1ea:	e7fe      	b.n	800c1ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c1ec:	f001 fef6 	bl	800dfdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	e082      	b.n	800c2fa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d106      	bne.n	800c208 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1fa:	f107 030c 	add.w	r3, r7, #12
 800c1fe:	4618      	mov	r0, r3
 800c200:	f000 ff3e 	bl	800d080 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c204:	2301      	movs	r3, #1
 800c206:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c208:	f001 fee8 	bl	800dfdc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c20c:	f000 fcb0 	bl	800cb70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c210:	f001 feb4 	bl	800df7c <vPortEnterCritical>
 800c214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c216:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c21a:	b25b      	sxtb	r3, r3
 800c21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c220:	d103      	bne.n	800c22a <xQueueSemaphoreTake+0x13a>
 800c222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c224:	2200      	movs	r2, #0
 800c226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c230:	b25b      	sxtb	r3, r3
 800c232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c236:	d103      	bne.n	800c240 <xQueueSemaphoreTake+0x150>
 800c238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c240:	f001 fecc 	bl	800dfdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c244:	463a      	mov	r2, r7
 800c246:	f107 030c 	add.w	r3, r7, #12
 800c24a:	4611      	mov	r1, r2
 800c24c:	4618      	mov	r0, r3
 800c24e:	f000 ff2d 	bl	800d0ac <xTaskCheckForTimeOut>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	d132      	bne.n	800c2be <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c258:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c25a:	f000 f94e 	bl	800c4fa <prvIsQueueEmpty>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d026      	beq.n	800c2b2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d109      	bne.n	800c280 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c26c:	f001 fe86 	bl	800df7c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800c270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	4618      	mov	r0, r3
 800c276:	f001 f8b7 	bl	800d3e8 <xTaskPriorityInherit>
 800c27a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c27c:	f001 feae 	bl	800dfdc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c282:	3324      	adds	r3, #36	; 0x24
 800c284:	683a      	ldr	r2, [r7, #0]
 800c286:	4611      	mov	r1, r2
 800c288:	4618      	mov	r0, r3
 800c28a:	f000 fe45 	bl	800cf18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c28e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c290:	f000 f8e1 	bl	800c456 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c294:	f000 fc7a 	bl	800cb8c <xTaskResumeAll>
 800c298:	4603      	mov	r3, r0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	f47f af68 	bne.w	800c170 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c2a0:	4b18      	ldr	r3, [pc, #96]	; (800c304 <xQueueSemaphoreTake+0x214>)
 800c2a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2a6:	601a      	str	r2, [r3, #0]
 800c2a8:	f3bf 8f4f 	dsb	sy
 800c2ac:	f3bf 8f6f 	isb	sy
 800c2b0:	e75e      	b.n	800c170 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c2b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2b4:	f000 f8cf 	bl	800c456 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2b8:	f000 fc68 	bl	800cb8c <xTaskResumeAll>
 800c2bc:	e758      	b.n	800c170 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c2be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2c0:	f000 f8c9 	bl	800c456 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2c4:	f000 fc62 	bl	800cb8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2ca:	f000 f916 	bl	800c4fa <prvIsQueueEmpty>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f43f af4d 	beq.w	800c170 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00d      	beq.n	800c2f8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c2dc:	f001 fe4e 	bl	800df7c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c2e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2e2:	f000 f811 	bl	800c308 <prvGetDisinheritPriorityAfterTimeout>
 800c2e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800c2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f001 f956 	bl	800d5a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c2f4:	f001 fe72 	bl	800dfdc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c2f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3738      	adds	r7, #56	; 0x38
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	e000ed04 	.word	0xe000ed04

0800c308 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c308:	b480      	push	{r7}
 800c30a:	b085      	sub	sp, #20
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c314:	2b00      	cmp	r3, #0
 800c316:	d006      	beq.n	800c326 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c322:	60fb      	str	r3, [r7, #12]
 800c324:	e001      	b.n	800c32a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c326:	2300      	movs	r3, #0
 800c328:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c32a:	68fb      	ldr	r3, [r7, #12]
	}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3714      	adds	r7, #20
 800c330:	46bd      	mov	sp, r7
 800c332:	bc80      	pop	{r7}
 800c334:	4770      	bx	lr

0800c336 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b086      	sub	sp, #24
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	60f8      	str	r0, [r7, #12]
 800c33e:	60b9      	str	r1, [r7, #8]
 800c340:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c342:	2300      	movs	r3, #0
 800c344:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c34a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c350:	2b00      	cmp	r3, #0
 800c352:	d10d      	bne.n	800c370 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d14d      	bne.n	800c3f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	4618      	mov	r0, r3
 800c362:	f001 f8af 	bl	800d4c4 <xTaskPriorityDisinherit>
 800c366:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2200      	movs	r2, #0
 800c36c:	605a      	str	r2, [r3, #4]
 800c36e:	e043      	b.n	800c3f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d119      	bne.n	800c3aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6898      	ldr	r0, [r3, #8]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c37e:	461a      	mov	r2, r3
 800c380:	68b9      	ldr	r1, [r7, #8]
 800c382:	f002 fdb9 	bl	800eef8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	689a      	ldr	r2, [r3, #8]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38e:	441a      	add	r2, r3
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	689a      	ldr	r2, [r3, #8]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d32b      	bcc.n	800c3f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	609a      	str	r2, [r3, #8]
 800c3a8:	e026      	b.n	800c3f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	68d8      	ldr	r0, [r3, #12]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	68b9      	ldr	r1, [r7, #8]
 800c3b6:	f002 fd9f 	bl	800eef8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	68da      	ldr	r2, [r3, #12]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c2:	425b      	negs	r3, r3
 800c3c4:	441a      	add	r2, r3
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	68da      	ldr	r2, [r3, #12]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d207      	bcs.n	800c3e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	685a      	ldr	r2, [r3, #4]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3de:	425b      	negs	r3, r3
 800c3e0:	441a      	add	r2, r3
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b02      	cmp	r3, #2
 800c3ea:	d105      	bne.n	800c3f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d002      	beq.n	800c3f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	1c5a      	adds	r2, r3, #1
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c400:	697b      	ldr	r3, [r7, #20]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3718      	adds	r7, #24
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b082      	sub	sp, #8
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
 800c412:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d018      	beq.n	800c44e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	68da      	ldr	r2, [r3, #12]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c424:	441a      	add	r2, r3
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	68da      	ldr	r2, [r3, #12]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	429a      	cmp	r2, r3
 800c434:	d303      	bcc.n	800c43e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	68d9      	ldr	r1, [r3, #12]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c446:	461a      	mov	r2, r3
 800c448:	6838      	ldr	r0, [r7, #0]
 800c44a:	f002 fd55 	bl	800eef8 <memcpy>
	}
}
 800c44e:	bf00      	nop
 800c450:	3708      	adds	r7, #8
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}

0800c456 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c456:	b580      	push	{r7, lr}
 800c458:	b084      	sub	sp, #16
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c45e:	f001 fd8d 	bl	800df7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c468:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c46a:	e011      	b.n	800c490 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c470:	2b00      	cmp	r3, #0
 800c472:	d012      	beq.n	800c49a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	3324      	adds	r3, #36	; 0x24
 800c478:	4618      	mov	r0, r3
 800c47a:	f000 fd9d 	bl	800cfb8 <xTaskRemoveFromEventList>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b00      	cmp	r3, #0
 800c482:	d001      	beq.n	800c488 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c484:	f000 fe74 	bl	800d170 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c488:	7bfb      	ldrb	r3, [r7, #15]
 800c48a:	3b01      	subs	r3, #1
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c494:	2b00      	cmp	r3, #0
 800c496:	dce9      	bgt.n	800c46c <prvUnlockQueue+0x16>
 800c498:	e000      	b.n	800c49c <prvUnlockQueue+0x46>
					break;
 800c49a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	22ff      	movs	r2, #255	; 0xff
 800c4a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c4a4:	f001 fd9a 	bl	800dfdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c4a8:	f001 fd68 	bl	800df7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c4b4:	e011      	b.n	800c4da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	691b      	ldr	r3, [r3, #16]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d012      	beq.n	800c4e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	3310      	adds	r3, #16
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f000 fd78 	bl	800cfb8 <xTaskRemoveFromEventList>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d001      	beq.n	800c4d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c4ce:	f000 fe4f 	bl	800d170 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c4d2:	7bbb      	ldrb	r3, [r7, #14]
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c4da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	dce9      	bgt.n	800c4b6 <prvUnlockQueue+0x60>
 800c4e2:	e000      	b.n	800c4e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c4e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	22ff      	movs	r2, #255	; 0xff
 800c4ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c4ee:	f001 fd75 	bl	800dfdc <vPortExitCritical>
}
 800c4f2:	bf00      	nop
 800c4f4:	3710      	adds	r7, #16
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b084      	sub	sp, #16
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c502:	f001 fd3b 	bl	800df7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d102      	bne.n	800c514 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c50e:	2301      	movs	r3, #1
 800c510:	60fb      	str	r3, [r7, #12]
 800c512:	e001      	b.n	800c518 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c514:	2300      	movs	r3, #0
 800c516:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c518:	f001 fd60 	bl	800dfdc <vPortExitCritical>

	return xReturn;
 800c51c:	68fb      	ldr	r3, [r7, #12]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b084      	sub	sp, #16
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c52e:	f001 fd25 	bl	800df7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d102      	bne.n	800c544 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c53e:	2301      	movs	r3, #1
 800c540:	60fb      	str	r3, [r7, #12]
 800c542:	e001      	b.n	800c548 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c544:	2300      	movs	r3, #0
 800c546:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c548:	f001 fd48 	bl	800dfdc <vPortExitCritical>

	return xReturn;
 800c54c:	68fb      	ldr	r3, [r7, #12]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3710      	adds	r7, #16
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
	...

0800c558 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c562:	2300      	movs	r3, #0
 800c564:	60fb      	str	r3, [r7, #12]
 800c566:	e014      	b.n	800c592 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c568:	4a0e      	ldr	r2, [pc, #56]	; (800c5a4 <vQueueAddToRegistry+0x4c>)
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d10b      	bne.n	800c58c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c574:	490b      	ldr	r1, [pc, #44]	; (800c5a4 <vQueueAddToRegistry+0x4c>)
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	683a      	ldr	r2, [r7, #0]
 800c57a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c57e:	4a09      	ldr	r2, [pc, #36]	; (800c5a4 <vQueueAddToRegistry+0x4c>)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	00db      	lsls	r3, r3, #3
 800c584:	4413      	add	r3, r2
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c58a:	e006      	b.n	800c59a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	3301      	adds	r3, #1
 800c590:	60fb      	str	r3, [r7, #12]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2b07      	cmp	r3, #7
 800c596:	d9e7      	bls.n	800c568 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c598:	bf00      	nop
 800c59a:	bf00      	nop
 800c59c:	3714      	adds	r7, #20
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bc80      	pop	{r7}
 800c5a2:	4770      	bx	lr
 800c5a4:	20002694 	.word	0x20002694

0800c5a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b086      	sub	sp, #24
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	60f8      	str	r0, [r7, #12]
 800c5b0:	60b9      	str	r1, [r7, #8]
 800c5b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c5b8:	f001 fce0 	bl	800df7c <vPortEnterCritical>
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5c2:	b25b      	sxtb	r3, r3
 800c5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5c8:	d103      	bne.n	800c5d2 <vQueueWaitForMessageRestricted+0x2a>
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5d8:	b25b      	sxtb	r3, r3
 800c5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5de:	d103      	bne.n	800c5e8 <vQueueWaitForMessageRestricted+0x40>
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5e8:	f001 fcf8 	bl	800dfdc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d106      	bne.n	800c602 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	3324      	adds	r3, #36	; 0x24
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	68b9      	ldr	r1, [r7, #8]
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f000 fcaf 	bl	800cf60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c602:	6978      	ldr	r0, [r7, #20]
 800c604:	f7ff ff27 	bl	800c456 <prvUnlockQueue>
	}
 800c608:	bf00      	nop
 800c60a:	3718      	adds	r7, #24
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c610:	b580      	push	{r7, lr}
 800c612:	b08e      	sub	sp, #56	; 0x38
 800c614:	af04      	add	r7, sp, #16
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
 800c61c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c620:	2b00      	cmp	r3, #0
 800c622:	d10a      	bne.n	800c63a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c628:	f383 8811 	msr	BASEPRI, r3
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	f3bf 8f4f 	dsb	sy
 800c634:	623b      	str	r3, [r7, #32]
}
 800c636:	bf00      	nop
 800c638:	e7fe      	b.n	800c638 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d10a      	bne.n	800c656 <xTaskCreateStatic+0x46>
	__asm volatile
 800c640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c644:	f383 8811 	msr	BASEPRI, r3
 800c648:	f3bf 8f6f 	isb	sy
 800c64c:	f3bf 8f4f 	dsb	sy
 800c650:	61fb      	str	r3, [r7, #28]
}
 800c652:	bf00      	nop
 800c654:	e7fe      	b.n	800c654 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c656:	235c      	movs	r3, #92	; 0x5c
 800c658:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	2b5c      	cmp	r3, #92	; 0x5c
 800c65e:	d00a      	beq.n	800c676 <xTaskCreateStatic+0x66>
	__asm volatile
 800c660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c664:	f383 8811 	msr	BASEPRI, r3
 800c668:	f3bf 8f6f 	isb	sy
 800c66c:	f3bf 8f4f 	dsb	sy
 800c670:	61bb      	str	r3, [r7, #24]
}
 800c672:	bf00      	nop
 800c674:	e7fe      	b.n	800c674 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d01e      	beq.n	800c6ba <xTaskCreateStatic+0xaa>
 800c67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d01b      	beq.n	800c6ba <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c684:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c68a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c68e:	2202      	movs	r2, #2
 800c690:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c694:	2300      	movs	r3, #0
 800c696:	9303      	str	r3, [sp, #12]
 800c698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69a:	9302      	str	r3, [sp, #8]
 800c69c:	f107 0314 	add.w	r3, r7, #20
 800c6a0:	9301      	str	r3, [sp, #4]
 800c6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a4:	9300      	str	r3, [sp, #0]
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	68b9      	ldr	r1, [r7, #8]
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	f000 f850 	bl	800c752 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6b4:	f000 f8d4 	bl	800c860 <prvAddNewTaskToReadyList>
 800c6b8:	e001      	b.n	800c6be <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c6be:	697b      	ldr	r3, [r7, #20]
	}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3728      	adds	r7, #40	; 0x28
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b08c      	sub	sp, #48	; 0x30
 800c6cc:	af04      	add	r7, sp, #16
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	603b      	str	r3, [r7, #0]
 800c6d4:	4613      	mov	r3, r2
 800c6d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6d8:	88fb      	ldrh	r3, [r7, #6]
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f001 fd4d 	bl	800e17c <pvPortMalloc>
 800c6e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00e      	beq.n	800c708 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800c6ea:	205c      	movs	r0, #92	; 0x5c
 800c6ec:	f001 fd46 	bl	800e17c <pvPortMalloc>
 800c6f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d003      	beq.n	800c700 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	697a      	ldr	r2, [r7, #20]
 800c6fc:	631a      	str	r2, [r3, #48]	; 0x30
 800c6fe:	e005      	b.n	800c70c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c700:	6978      	ldr	r0, [r7, #20]
 800c702:	f001 fdff 	bl	800e304 <vPortFree>
 800c706:	e001      	b.n	800c70c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c708:	2300      	movs	r3, #0
 800c70a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d017      	beq.n	800c742 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	2200      	movs	r2, #0
 800c716:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c71a:	88fa      	ldrh	r2, [r7, #6]
 800c71c:	2300      	movs	r3, #0
 800c71e:	9303      	str	r3, [sp, #12]
 800c720:	69fb      	ldr	r3, [r7, #28]
 800c722:	9302      	str	r3, [sp, #8]
 800c724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c726:	9301      	str	r3, [sp, #4]
 800c728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72a:	9300      	str	r3, [sp, #0]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	68b9      	ldr	r1, [r7, #8]
 800c730:	68f8      	ldr	r0, [r7, #12]
 800c732:	f000 f80e 	bl	800c752 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c736:	69f8      	ldr	r0, [r7, #28]
 800c738:	f000 f892 	bl	800c860 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c73c:	2301      	movs	r3, #1
 800c73e:	61bb      	str	r3, [r7, #24]
 800c740:	e002      	b.n	800c748 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c742:	f04f 33ff 	mov.w	r3, #4294967295
 800c746:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c748:	69bb      	ldr	r3, [r7, #24]
	}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3720      	adds	r7, #32
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c752:	b580      	push	{r7, lr}
 800c754:	b088      	sub	sp, #32
 800c756:	af00      	add	r7, sp, #0
 800c758:	60f8      	str	r0, [r7, #12]
 800c75a:	60b9      	str	r1, [r7, #8]
 800c75c:	607a      	str	r2, [r7, #4]
 800c75e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c762:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	461a      	mov	r2, r3
 800c76a:	21a5      	movs	r1, #165	; 0xa5
 800c76c:	f002 fbec 	bl	800ef48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800c770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c77a:	3b01      	subs	r3, #1
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	4413      	add	r3, r2
 800c780:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800c782:	69bb      	ldr	r3, [r7, #24]
 800c784:	f023 0307 	bic.w	r3, r3, #7
 800c788:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c78a:	69bb      	ldr	r3, [r7, #24]
 800c78c:	f003 0307 	and.w	r3, r3, #7
 800c790:	2b00      	cmp	r3, #0
 800c792:	d00a      	beq.n	800c7aa <prvInitialiseNewTask+0x58>
	__asm volatile
 800c794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c798:	f383 8811 	msr	BASEPRI, r3
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	617b      	str	r3, [r7, #20]
}
 800c7a6:	bf00      	nop
 800c7a8:	e7fe      	b.n	800c7a8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	61fb      	str	r3, [r7, #28]
 800c7ae:	e012      	b.n	800c7d6 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c7b0:	68ba      	ldr	r2, [r7, #8]
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	7819      	ldrb	r1, [r3, #0]
 800c7b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	4413      	add	r3, r2
 800c7be:	3334      	adds	r3, #52	; 0x34
 800c7c0:	460a      	mov	r2, r1
 800c7c2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800c7c4:	68ba      	ldr	r2, [r7, #8]
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d006      	beq.n	800c7de <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	61fb      	str	r3, [r7, #28]
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	2b0f      	cmp	r3, #15
 800c7da:	d9e9      	bls.n	800c7b0 <prvInitialiseNewTask+0x5e>
 800c7dc:	e000      	b.n	800c7e0 <prvInitialiseNewTask+0x8e>
		{
			break;
 800c7de:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ea:	2b37      	cmp	r3, #55	; 0x37
 800c7ec:	d901      	bls.n	800c7f2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c7ee:	2337      	movs	r3, #55	; 0x37
 800c7f0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7fc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c800:	2200      	movs	r2, #0
 800c802:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c806:	3304      	adds	r3, #4
 800c808:	4618      	mov	r0, r3
 800c80a:	f7fe ffdc 	bl	800b7c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c810:	3318      	adds	r3, #24
 800c812:	4618      	mov	r0, r3
 800c814:	f7fe ffd7 	bl	800b7c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c81c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c820:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c826:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c82c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c830:	2200      	movs	r2, #0
 800c832:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c836:	2200      	movs	r2, #0
 800c838:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c83c:	683a      	ldr	r2, [r7, #0]
 800c83e:	68f9      	ldr	r1, [r7, #12]
 800c840:	69b8      	ldr	r0, [r7, #24]
 800c842:	f001 faad 	bl	800dda0 <pxPortInitialiseStack>
 800c846:	4602      	mov	r2, r0
 800c848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800c84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d002      	beq.n	800c858 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c856:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c858:	bf00      	nop
 800c85a:	3720      	adds	r7, #32
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c868:	f001 fb88 	bl	800df7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c86c:	4b2d      	ldr	r3, [pc, #180]	; (800c924 <prvAddNewTaskToReadyList+0xc4>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	3301      	adds	r3, #1
 800c872:	4a2c      	ldr	r2, [pc, #176]	; (800c924 <prvAddNewTaskToReadyList+0xc4>)
 800c874:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c876:	4b2c      	ldr	r3, [pc, #176]	; (800c928 <prvAddNewTaskToReadyList+0xc8>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d109      	bne.n	800c892 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c87e:	4a2a      	ldr	r2, [pc, #168]	; (800c928 <prvAddNewTaskToReadyList+0xc8>)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c884:	4b27      	ldr	r3, [pc, #156]	; (800c924 <prvAddNewTaskToReadyList+0xc4>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d110      	bne.n	800c8ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c88c:	f000 fc94 	bl	800d1b8 <prvInitialiseTaskLists>
 800c890:	e00d      	b.n	800c8ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c892:	4b26      	ldr	r3, [pc, #152]	; (800c92c <prvAddNewTaskToReadyList+0xcc>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d109      	bne.n	800c8ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c89a:	4b23      	ldr	r3, [pc, #140]	; (800c928 <prvAddNewTaskToReadyList+0xc8>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d802      	bhi.n	800c8ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c8a8:	4a1f      	ldr	r2, [pc, #124]	; (800c928 <prvAddNewTaskToReadyList+0xc8>)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c8ae:	4b20      	ldr	r3, [pc, #128]	; (800c930 <prvAddNewTaskToReadyList+0xd0>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	4a1e      	ldr	r2, [pc, #120]	; (800c930 <prvAddNewTaskToReadyList+0xd0>)
 800c8b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c8b8:	4b1d      	ldr	r3, [pc, #116]	; (800c930 <prvAddNewTaskToReadyList+0xd0>)
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c4:	4b1b      	ldr	r3, [pc, #108]	; (800c934 <prvAddNewTaskToReadyList+0xd4>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d903      	bls.n	800c8d4 <prvAddNewTaskToReadyList+0x74>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d0:	4a18      	ldr	r2, [pc, #96]	; (800c934 <prvAddNewTaskToReadyList+0xd4>)
 800c8d2:	6013      	str	r3, [r2, #0]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8d8:	4613      	mov	r3, r2
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	4413      	add	r3, r2
 800c8de:	009b      	lsls	r3, r3, #2
 800c8e0:	4a15      	ldr	r2, [pc, #84]	; (800c938 <prvAddNewTaskToReadyList+0xd8>)
 800c8e2:	441a      	add	r2, r3
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	3304      	adds	r3, #4
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	4610      	mov	r0, r2
 800c8ec:	f7fe ff77 	bl	800b7de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c8f0:	f001 fb74 	bl	800dfdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c8f4:	4b0d      	ldr	r3, [pc, #52]	; (800c92c <prvAddNewTaskToReadyList+0xcc>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00e      	beq.n	800c91a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c8fc:	4b0a      	ldr	r3, [pc, #40]	; (800c928 <prvAddNewTaskToReadyList+0xc8>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c906:	429a      	cmp	r2, r3
 800c908:	d207      	bcs.n	800c91a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c90a:	4b0c      	ldr	r3, [pc, #48]	; (800c93c <prvAddNewTaskToReadyList+0xdc>)
 800c90c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c910:	601a      	str	r2, [r3, #0]
 800c912:	f3bf 8f4f 	dsb	sy
 800c916:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c91a:	bf00      	nop
 800c91c:	3708      	adds	r7, #8
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	20000d44 	.word	0x20000d44
 800c928:	20000870 	.word	0x20000870
 800c92c:	20000d50 	.word	0x20000d50
 800c930:	20000d60 	.word	0x20000d60
 800c934:	20000d4c 	.word	0x20000d4c
 800c938:	20000874 	.word	0x20000874
 800c93c:	e000ed04 	.word	0xe000ed04

0800c940 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c940:	b580      	push	{r7, lr}
 800c942:	b08a      	sub	sp, #40	; 0x28
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c94a:	2300      	movs	r3, #0
 800c94c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d10a      	bne.n	800c96a <vTaskDelayUntil+0x2a>
	__asm volatile
 800c954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c958:	f383 8811 	msr	BASEPRI, r3
 800c95c:	f3bf 8f6f 	isb	sy
 800c960:	f3bf 8f4f 	dsb	sy
 800c964:	617b      	str	r3, [r7, #20]
}
 800c966:	bf00      	nop
 800c968:	e7fe      	b.n	800c968 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d10a      	bne.n	800c986 <vTaskDelayUntil+0x46>
	__asm volatile
 800c970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c974:	f383 8811 	msr	BASEPRI, r3
 800c978:	f3bf 8f6f 	isb	sy
 800c97c:	f3bf 8f4f 	dsb	sy
 800c980:	613b      	str	r3, [r7, #16]
}
 800c982:	bf00      	nop
 800c984:	e7fe      	b.n	800c984 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800c986:	4b2a      	ldr	r3, [pc, #168]	; (800ca30 <vTaskDelayUntil+0xf0>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00a      	beq.n	800c9a4 <vTaskDelayUntil+0x64>
	__asm volatile
 800c98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c992:	f383 8811 	msr	BASEPRI, r3
 800c996:	f3bf 8f6f 	isb	sy
 800c99a:	f3bf 8f4f 	dsb	sy
 800c99e:	60fb      	str	r3, [r7, #12]
}
 800c9a0:	bf00      	nop
 800c9a2:	e7fe      	b.n	800c9a2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800c9a4:	f000 f8e4 	bl	800cb70 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c9a8:	4b22      	ldr	r3, [pc, #136]	; (800ca34 <vTaskDelayUntil+0xf4>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	683a      	ldr	r2, [r7, #0]
 800c9b4:	4413      	add	r3, r2
 800c9b6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	6a3a      	ldr	r2, [r7, #32]
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d20b      	bcs.n	800c9da <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	69fa      	ldr	r2, [r7, #28]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d211      	bcs.n	800c9f0 <vTaskDelayUntil+0xb0>
 800c9cc:	69fa      	ldr	r2, [r7, #28]
 800c9ce:	6a3b      	ldr	r3, [r7, #32]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d90d      	bls.n	800c9f0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	627b      	str	r3, [r7, #36]	; 0x24
 800c9d8:	e00a      	b.n	800c9f0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	69fa      	ldr	r2, [r7, #28]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d303      	bcc.n	800c9ec <vTaskDelayUntil+0xac>
 800c9e4:	69fa      	ldr	r2, [r7, #28]
 800c9e6:	6a3b      	ldr	r3, [r7, #32]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d901      	bls.n	800c9f0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	69fa      	ldr	r2, [r7, #28]
 800c9f4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d006      	beq.n	800ca0a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c9fc:	69fa      	ldr	r2, [r7, #28]
 800c9fe:	6a3b      	ldr	r3, [r7, #32]
 800ca00:	1ad3      	subs	r3, r2, r3
 800ca02:	2100      	movs	r1, #0
 800ca04:	4618      	mov	r0, r3
 800ca06:	f000 fe65 	bl	800d6d4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ca0a:	f000 f8bf 	bl	800cb8c <xTaskResumeAll>
 800ca0e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ca10:	69bb      	ldr	r3, [r7, #24]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d107      	bne.n	800ca26 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800ca16:	4b08      	ldr	r3, [pc, #32]	; (800ca38 <vTaskDelayUntil+0xf8>)
 800ca18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca1c:	601a      	str	r2, [r3, #0]
 800ca1e:	f3bf 8f4f 	dsb	sy
 800ca22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ca26:	bf00      	nop
 800ca28:	3728      	adds	r7, #40	; 0x28
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	20000d6c 	.word	0x20000d6c
 800ca34:	20000d48 	.word	0x20000d48
 800ca38:	e000ed04 	.word	0xe000ed04

0800ca3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ca44:	2300      	movs	r3, #0
 800ca46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d017      	beq.n	800ca7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ca4e:	4b13      	ldr	r3, [pc, #76]	; (800ca9c <vTaskDelay+0x60>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d00a      	beq.n	800ca6c <vTaskDelay+0x30>
	__asm volatile
 800ca56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca5a:	f383 8811 	msr	BASEPRI, r3
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	f3bf 8f4f 	dsb	sy
 800ca66:	60bb      	str	r3, [r7, #8]
}
 800ca68:	bf00      	nop
 800ca6a:	e7fe      	b.n	800ca6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ca6c:	f000 f880 	bl	800cb70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ca70:	2100      	movs	r1, #0
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 fe2e 	bl	800d6d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ca78:	f000 f888 	bl	800cb8c <xTaskResumeAll>
 800ca7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d107      	bne.n	800ca94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ca84:	4b06      	ldr	r3, [pc, #24]	; (800caa0 <vTaskDelay+0x64>)
 800ca86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca8a:	601a      	str	r2, [r3, #0]
 800ca8c:	f3bf 8f4f 	dsb	sy
 800ca90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ca94:	bf00      	nop
 800ca96:	3710      	adds	r7, #16
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	20000d6c 	.word	0x20000d6c
 800caa0:	e000ed04 	.word	0xe000ed04

0800caa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b08a      	sub	sp, #40	; 0x28
 800caa8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800caaa:	2300      	movs	r3, #0
 800caac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800caae:	2300      	movs	r3, #0
 800cab0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cab2:	463a      	mov	r2, r7
 800cab4:	1d39      	adds	r1, r7, #4
 800cab6:	f107 0308 	add.w	r3, r7, #8
 800caba:	4618      	mov	r0, r3
 800cabc:	f7fe fe32 	bl	800b724 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cac0:	6839      	ldr	r1, [r7, #0]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	68ba      	ldr	r2, [r7, #8]
 800cac6:	9202      	str	r2, [sp, #8]
 800cac8:	9301      	str	r3, [sp, #4]
 800caca:	2300      	movs	r3, #0
 800cacc:	9300      	str	r3, [sp, #0]
 800cace:	2300      	movs	r3, #0
 800cad0:	460a      	mov	r2, r1
 800cad2:	4921      	ldr	r1, [pc, #132]	; (800cb58 <vTaskStartScheduler+0xb4>)
 800cad4:	4821      	ldr	r0, [pc, #132]	; (800cb5c <vTaskStartScheduler+0xb8>)
 800cad6:	f7ff fd9b 	bl	800c610 <xTaskCreateStatic>
 800cada:	4603      	mov	r3, r0
 800cadc:	4a20      	ldr	r2, [pc, #128]	; (800cb60 <vTaskStartScheduler+0xbc>)
 800cade:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cae0:	4b1f      	ldr	r3, [pc, #124]	; (800cb60 <vTaskStartScheduler+0xbc>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d002      	beq.n	800caee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cae8:	2301      	movs	r3, #1
 800caea:	617b      	str	r3, [r7, #20]
 800caec:	e001      	b.n	800caf2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800caee:	2300      	movs	r3, #0
 800caf0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d102      	bne.n	800cafe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800caf8:	f000 fe40 	bl	800d77c <xTimerCreateTimerTask>
 800cafc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d116      	bne.n	800cb32 <vTaskStartScheduler+0x8e>
	__asm volatile
 800cb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb08:	f383 8811 	msr	BASEPRI, r3
 800cb0c:	f3bf 8f6f 	isb	sy
 800cb10:	f3bf 8f4f 	dsb	sy
 800cb14:	613b      	str	r3, [r7, #16]
}
 800cb16:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cb18:	4b12      	ldr	r3, [pc, #72]	; (800cb64 <vTaskStartScheduler+0xc0>)
 800cb1a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cb20:	4b11      	ldr	r3, [pc, #68]	; (800cb68 <vTaskStartScheduler+0xc4>)
 800cb22:	2201      	movs	r2, #1
 800cb24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800cb26:	4b11      	ldr	r3, [pc, #68]	; (800cb6c <vTaskStartScheduler+0xc8>)
 800cb28:	2200      	movs	r2, #0
 800cb2a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cb2c:	f001 f9b4 	bl	800de98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cb30:	e00e      	b.n	800cb50 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb38:	d10a      	bne.n	800cb50 <vTaskStartScheduler+0xac>
	__asm volatile
 800cb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3e:	f383 8811 	msr	BASEPRI, r3
 800cb42:	f3bf 8f6f 	isb	sy
 800cb46:	f3bf 8f4f 	dsb	sy
 800cb4a:	60fb      	str	r3, [r7, #12]
}
 800cb4c:	bf00      	nop
 800cb4e:	e7fe      	b.n	800cb4e <vTaskStartScheduler+0xaa>
}
 800cb50:	bf00      	nop
 800cb52:	3718      	adds	r7, #24
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	0800f1a0 	.word	0x0800f1a0
 800cb5c:	0800d189 	.word	0x0800d189
 800cb60:	20000d68 	.word	0x20000d68
 800cb64:	20000d64 	.word	0x20000d64
 800cb68:	20000d50 	.word	0x20000d50
 800cb6c:	20000d48 	.word	0x20000d48

0800cb70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cb70:	b480      	push	{r7}
 800cb72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cb74:	4b04      	ldr	r3, [pc, #16]	; (800cb88 <vTaskSuspendAll+0x18>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	4a03      	ldr	r2, [pc, #12]	; (800cb88 <vTaskSuspendAll+0x18>)
 800cb7c:	6013      	str	r3, [r2, #0]
}
 800cb7e:	bf00      	nop
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bc80      	pop	{r7}
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	20000d6c 	.word	0x20000d6c

0800cb8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cb92:	2300      	movs	r3, #0
 800cb94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cb96:	2300      	movs	r3, #0
 800cb98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cb9a:	4b42      	ldr	r3, [pc, #264]	; (800cca4 <xTaskResumeAll+0x118>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d10a      	bne.n	800cbb8 <xTaskResumeAll+0x2c>
	__asm volatile
 800cba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba6:	f383 8811 	msr	BASEPRI, r3
 800cbaa:	f3bf 8f6f 	isb	sy
 800cbae:	f3bf 8f4f 	dsb	sy
 800cbb2:	603b      	str	r3, [r7, #0]
}
 800cbb4:	bf00      	nop
 800cbb6:	e7fe      	b.n	800cbb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cbb8:	f001 f9e0 	bl	800df7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cbbc:	4b39      	ldr	r3, [pc, #228]	; (800cca4 <xTaskResumeAll+0x118>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	3b01      	subs	r3, #1
 800cbc2:	4a38      	ldr	r2, [pc, #224]	; (800cca4 <xTaskResumeAll+0x118>)
 800cbc4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbc6:	4b37      	ldr	r3, [pc, #220]	; (800cca4 <xTaskResumeAll+0x118>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d162      	bne.n	800cc94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cbce:	4b36      	ldr	r3, [pc, #216]	; (800cca8 <xTaskResumeAll+0x11c>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d05e      	beq.n	800cc94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cbd6:	e02f      	b.n	800cc38 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800cbd8:	4b34      	ldr	r3, [pc, #208]	; (800ccac <xTaskResumeAll+0x120>)
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	3318      	adds	r3, #24
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7fe fe55 	bl	800b894 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	3304      	adds	r3, #4
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7fe fe50 	bl	800b894 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbf8:	4b2d      	ldr	r3, [pc, #180]	; (800ccb0 <xTaskResumeAll+0x124>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d903      	bls.n	800cc08 <xTaskResumeAll+0x7c>
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc04:	4a2a      	ldr	r2, [pc, #168]	; (800ccb0 <xTaskResumeAll+0x124>)
 800cc06:	6013      	str	r3, [r2, #0]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	009b      	lsls	r3, r3, #2
 800cc10:	4413      	add	r3, r2
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	4a27      	ldr	r2, [pc, #156]	; (800ccb4 <xTaskResumeAll+0x128>)
 800cc16:	441a      	add	r2, r3
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	3304      	adds	r3, #4
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	4610      	mov	r0, r2
 800cc20:	f7fe fddd 	bl	800b7de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc28:	4b23      	ldr	r3, [pc, #140]	; (800ccb8 <xTaskResumeAll+0x12c>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d302      	bcc.n	800cc38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cc32:	4b22      	ldr	r3, [pc, #136]	; (800ccbc <xTaskResumeAll+0x130>)
 800cc34:	2201      	movs	r2, #1
 800cc36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc38:	4b1c      	ldr	r3, [pc, #112]	; (800ccac <xTaskResumeAll+0x120>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d1cb      	bne.n	800cbd8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d001      	beq.n	800cc4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cc46:	f000 fb8d 	bl	800d364 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cc4a:	4b1d      	ldr	r3, [pc, #116]	; (800ccc0 <xTaskResumeAll+0x134>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d010      	beq.n	800cc78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cc56:	f000 f845 	bl	800cce4 <xTaskIncrementTick>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d002      	beq.n	800cc66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cc60:	4b16      	ldr	r3, [pc, #88]	; (800ccbc <xTaskResumeAll+0x130>)
 800cc62:	2201      	movs	r2, #1
 800cc64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	3b01      	subs	r3, #1
 800cc6a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d1f1      	bne.n	800cc56 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800cc72:	4b13      	ldr	r3, [pc, #76]	; (800ccc0 <xTaskResumeAll+0x134>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cc78:	4b10      	ldr	r3, [pc, #64]	; (800ccbc <xTaskResumeAll+0x130>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d009      	beq.n	800cc94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cc80:	2301      	movs	r3, #1
 800cc82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cc84:	4b0f      	ldr	r3, [pc, #60]	; (800ccc4 <xTaskResumeAll+0x138>)
 800cc86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc8a:	601a      	str	r2, [r3, #0]
 800cc8c:	f3bf 8f4f 	dsb	sy
 800cc90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc94:	f001 f9a2 	bl	800dfdc <vPortExitCritical>

	return xAlreadyYielded;
 800cc98:	68bb      	ldr	r3, [r7, #8]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3710      	adds	r7, #16
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	20000d6c 	.word	0x20000d6c
 800cca8:	20000d44 	.word	0x20000d44
 800ccac:	20000d04 	.word	0x20000d04
 800ccb0:	20000d4c 	.word	0x20000d4c
 800ccb4:	20000874 	.word	0x20000874
 800ccb8:	20000870 	.word	0x20000870
 800ccbc:	20000d58 	.word	0x20000d58
 800ccc0:	20000d54 	.word	0x20000d54
 800ccc4:	e000ed04 	.word	0xe000ed04

0800ccc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b083      	sub	sp, #12
 800cccc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ccce:	4b04      	ldr	r3, [pc, #16]	; (800cce0 <xTaskGetTickCount+0x18>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ccd4:	687b      	ldr	r3, [r7, #4]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	370c      	adds	r7, #12
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bc80      	pop	{r7}
 800ccde:	4770      	bx	lr
 800cce0:	20000d48 	.word	0x20000d48

0800cce4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b086      	sub	sp, #24
 800cce8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ccea:	2300      	movs	r3, #0
 800ccec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccee:	4b51      	ldr	r3, [pc, #324]	; (800ce34 <xTaskIncrementTick+0x150>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	f040 808e 	bne.w	800ce14 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ccf8:	4b4f      	ldr	r3, [pc, #316]	; (800ce38 <xTaskIncrementTick+0x154>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cd00:	4a4d      	ldr	r2, [pc, #308]	; (800ce38 <xTaskIncrementTick+0x154>)
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d120      	bne.n	800cd4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cd0c:	4b4b      	ldr	r3, [pc, #300]	; (800ce3c <xTaskIncrementTick+0x158>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00a      	beq.n	800cd2c <xTaskIncrementTick+0x48>
	__asm volatile
 800cd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1a:	f383 8811 	msr	BASEPRI, r3
 800cd1e:	f3bf 8f6f 	isb	sy
 800cd22:	f3bf 8f4f 	dsb	sy
 800cd26:	603b      	str	r3, [r7, #0]
}
 800cd28:	bf00      	nop
 800cd2a:	e7fe      	b.n	800cd2a <xTaskIncrementTick+0x46>
 800cd2c:	4b43      	ldr	r3, [pc, #268]	; (800ce3c <xTaskIncrementTick+0x158>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	60fb      	str	r3, [r7, #12]
 800cd32:	4b43      	ldr	r3, [pc, #268]	; (800ce40 <xTaskIncrementTick+0x15c>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a41      	ldr	r2, [pc, #260]	; (800ce3c <xTaskIncrementTick+0x158>)
 800cd38:	6013      	str	r3, [r2, #0]
 800cd3a:	4a41      	ldr	r2, [pc, #260]	; (800ce40 <xTaskIncrementTick+0x15c>)
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6013      	str	r3, [r2, #0]
 800cd40:	4b40      	ldr	r3, [pc, #256]	; (800ce44 <xTaskIncrementTick+0x160>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	3301      	adds	r3, #1
 800cd46:	4a3f      	ldr	r2, [pc, #252]	; (800ce44 <xTaskIncrementTick+0x160>)
 800cd48:	6013      	str	r3, [r2, #0]
 800cd4a:	f000 fb0b 	bl	800d364 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cd4e:	4b3e      	ldr	r3, [pc, #248]	; (800ce48 <xTaskIncrementTick+0x164>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	693a      	ldr	r2, [r7, #16]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d34e      	bcc.n	800cdf6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd58:	4b38      	ldr	r3, [pc, #224]	; (800ce3c <xTaskIncrementTick+0x158>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d101      	bne.n	800cd66 <xTaskIncrementTick+0x82>
 800cd62:	2301      	movs	r3, #1
 800cd64:	e000      	b.n	800cd68 <xTaskIncrementTick+0x84>
 800cd66:	2300      	movs	r3, #0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d004      	beq.n	800cd76 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd6c:	4b36      	ldr	r3, [pc, #216]	; (800ce48 <xTaskIncrementTick+0x164>)
 800cd6e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd72:	601a      	str	r2, [r3, #0]
					break;
 800cd74:	e03f      	b.n	800cdf6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800cd76:	4b31      	ldr	r3, [pc, #196]	; (800ce3c <xTaskIncrementTick+0x158>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	68db      	ldr	r3, [r3, #12]
 800cd7e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cd86:	693a      	ldr	r2, [r7, #16]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d203      	bcs.n	800cd96 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cd8e:	4a2e      	ldr	r2, [pc, #184]	; (800ce48 <xTaskIncrementTick+0x164>)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6013      	str	r3, [r2, #0]
						break;
 800cd94:	e02f      	b.n	800cdf6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	3304      	adds	r3, #4
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7fe fd7a 	bl	800b894 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d004      	beq.n	800cdb2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	3318      	adds	r3, #24
 800cdac:	4618      	mov	r0, r3
 800cdae:	f7fe fd71 	bl	800b894 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdb6:	4b25      	ldr	r3, [pc, #148]	; (800ce4c <xTaskIncrementTick+0x168>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d903      	bls.n	800cdc6 <xTaskIncrementTick+0xe2>
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc2:	4a22      	ldr	r2, [pc, #136]	; (800ce4c <xTaskIncrementTick+0x168>)
 800cdc4:	6013      	str	r3, [r2, #0]
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdca:	4613      	mov	r3, r2
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	4413      	add	r3, r2
 800cdd0:	009b      	lsls	r3, r3, #2
 800cdd2:	4a1f      	ldr	r2, [pc, #124]	; (800ce50 <xTaskIncrementTick+0x16c>)
 800cdd4:	441a      	add	r2, r3
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	3304      	adds	r3, #4
 800cdda:	4619      	mov	r1, r3
 800cddc:	4610      	mov	r0, r2
 800cdde:	f7fe fcfe 	bl	800b7de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cde6:	4b1b      	ldr	r3, [pc, #108]	; (800ce54 <xTaskIncrementTick+0x170>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d3b3      	bcc.n	800cd58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cdf4:	e7b0      	b.n	800cd58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cdf6:	4b17      	ldr	r3, [pc, #92]	; (800ce54 <xTaskIncrementTick+0x170>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdfc:	4914      	ldr	r1, [pc, #80]	; (800ce50 <xTaskIncrementTick+0x16c>)
 800cdfe:	4613      	mov	r3, r2
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	4413      	add	r3, r2
 800ce04:	009b      	lsls	r3, r3, #2
 800ce06:	440b      	add	r3, r1
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d907      	bls.n	800ce1e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	617b      	str	r3, [r7, #20]
 800ce12:	e004      	b.n	800ce1e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ce14:	4b10      	ldr	r3, [pc, #64]	; (800ce58 <xTaskIncrementTick+0x174>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	4a0f      	ldr	r2, [pc, #60]	; (800ce58 <xTaskIncrementTick+0x174>)
 800ce1c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ce1e:	4b0f      	ldr	r3, [pc, #60]	; (800ce5c <xTaskIncrementTick+0x178>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d001      	beq.n	800ce2a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800ce26:	2301      	movs	r3, #1
 800ce28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ce2a:	697b      	ldr	r3, [r7, #20]
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3718      	adds	r7, #24
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	20000d6c 	.word	0x20000d6c
 800ce38:	20000d48 	.word	0x20000d48
 800ce3c:	20000cfc 	.word	0x20000cfc
 800ce40:	20000d00 	.word	0x20000d00
 800ce44:	20000d5c 	.word	0x20000d5c
 800ce48:	20000d64 	.word	0x20000d64
 800ce4c:	20000d4c 	.word	0x20000d4c
 800ce50:	20000874 	.word	0x20000874
 800ce54:	20000870 	.word	0x20000870
 800ce58:	20000d54 	.word	0x20000d54
 800ce5c:	20000d58 	.word	0x20000d58

0800ce60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ce60:	b480      	push	{r7}
 800ce62:	b085      	sub	sp, #20
 800ce64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ce66:	4b27      	ldr	r3, [pc, #156]	; (800cf04 <vTaskSwitchContext+0xa4>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d003      	beq.n	800ce76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ce6e:	4b26      	ldr	r3, [pc, #152]	; (800cf08 <vTaskSwitchContext+0xa8>)
 800ce70:	2201      	movs	r2, #1
 800ce72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ce74:	e041      	b.n	800cefa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ce76:	4b24      	ldr	r3, [pc, #144]	; (800cf08 <vTaskSwitchContext+0xa8>)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ce7c:	4b23      	ldr	r3, [pc, #140]	; (800cf0c <vTaskSwitchContext+0xac>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	60fb      	str	r3, [r7, #12]
 800ce82:	e010      	b.n	800cea6 <vTaskSwitchContext+0x46>
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d10a      	bne.n	800cea0 <vTaskSwitchContext+0x40>
	__asm volatile
 800ce8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8e:	f383 8811 	msr	BASEPRI, r3
 800ce92:	f3bf 8f6f 	isb	sy
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	607b      	str	r3, [r7, #4]
}
 800ce9c:	bf00      	nop
 800ce9e:	e7fe      	b.n	800ce9e <vTaskSwitchContext+0x3e>
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	3b01      	subs	r3, #1
 800cea4:	60fb      	str	r3, [r7, #12]
 800cea6:	491a      	ldr	r1, [pc, #104]	; (800cf10 <vTaskSwitchContext+0xb0>)
 800cea8:	68fa      	ldr	r2, [r7, #12]
 800ceaa:	4613      	mov	r3, r2
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	4413      	add	r3, r2
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	440b      	add	r3, r1
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d0e4      	beq.n	800ce84 <vTaskSwitchContext+0x24>
 800ceba:	68fa      	ldr	r2, [r7, #12]
 800cebc:	4613      	mov	r3, r2
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	4413      	add	r3, r2
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	4a12      	ldr	r2, [pc, #72]	; (800cf10 <vTaskSwitchContext+0xb0>)
 800cec6:	4413      	add	r3, r2
 800cec8:	60bb      	str	r3, [r7, #8]
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	685a      	ldr	r2, [r3, #4]
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	605a      	str	r2, [r3, #4]
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	685a      	ldr	r2, [r3, #4]
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	3308      	adds	r3, #8
 800cedc:	429a      	cmp	r2, r3
 800cede:	d104      	bne.n	800ceea <vTaskSwitchContext+0x8a>
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	685a      	ldr	r2, [r3, #4]
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	605a      	str	r2, [r3, #4]
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	4a08      	ldr	r2, [pc, #32]	; (800cf14 <vTaskSwitchContext+0xb4>)
 800cef2:	6013      	str	r3, [r2, #0]
 800cef4:	4a05      	ldr	r2, [pc, #20]	; (800cf0c <vTaskSwitchContext+0xac>)
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	6013      	str	r3, [r2, #0]
}
 800cefa:	bf00      	nop
 800cefc:	3714      	adds	r7, #20
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bc80      	pop	{r7}
 800cf02:	4770      	bx	lr
 800cf04:	20000d6c 	.word	0x20000d6c
 800cf08:	20000d58 	.word	0x20000d58
 800cf0c:	20000d4c 	.word	0x20000d4c
 800cf10:	20000874 	.word	0x20000874
 800cf14:	20000870 	.word	0x20000870

0800cf18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d10a      	bne.n	800cf3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cf28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2c:	f383 8811 	msr	BASEPRI, r3
 800cf30:	f3bf 8f6f 	isb	sy
 800cf34:	f3bf 8f4f 	dsb	sy
 800cf38:	60fb      	str	r3, [r7, #12]
}
 800cf3a:	bf00      	nop
 800cf3c:	e7fe      	b.n	800cf3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf3e:	4b07      	ldr	r3, [pc, #28]	; (800cf5c <vTaskPlaceOnEventList+0x44>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	3318      	adds	r3, #24
 800cf44:	4619      	mov	r1, r3
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f7fe fc6c 	bl	800b824 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cf4c:	2101      	movs	r1, #1
 800cf4e:	6838      	ldr	r0, [r7, #0]
 800cf50:	f000 fbc0 	bl	800d6d4 <prvAddCurrentTaskToDelayedList>
}
 800cf54:	bf00      	nop
 800cf56:	3710      	adds	r7, #16
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	20000870 	.word	0x20000870

0800cf60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b086      	sub	sp, #24
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d10a      	bne.n	800cf88 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cf72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf76:	f383 8811 	msr	BASEPRI, r3
 800cf7a:	f3bf 8f6f 	isb	sy
 800cf7e:	f3bf 8f4f 	dsb	sy
 800cf82:	617b      	str	r3, [r7, #20]
}
 800cf84:	bf00      	nop
 800cf86:	e7fe      	b.n	800cf86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf88:	4b0a      	ldr	r3, [pc, #40]	; (800cfb4 <vTaskPlaceOnEventListRestricted+0x54>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	3318      	adds	r3, #24
 800cf8e:	4619      	mov	r1, r3
 800cf90:	68f8      	ldr	r0, [r7, #12]
 800cf92:	f7fe fc24 	bl	800b7de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d002      	beq.n	800cfa2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cf9c:	f04f 33ff 	mov.w	r3, #4294967295
 800cfa0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cfa2:	6879      	ldr	r1, [r7, #4]
 800cfa4:	68b8      	ldr	r0, [r7, #8]
 800cfa6:	f000 fb95 	bl	800d6d4 <prvAddCurrentTaskToDelayedList>
	}
 800cfaa:	bf00      	nop
 800cfac:	3718      	adds	r7, #24
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	20000870 	.word	0x20000870

0800cfb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b086      	sub	sp, #24
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	68db      	ldr	r3, [r3, #12]
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d10a      	bne.n	800cfe4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd2:	f383 8811 	msr	BASEPRI, r3
 800cfd6:	f3bf 8f6f 	isb	sy
 800cfda:	f3bf 8f4f 	dsb	sy
 800cfde:	60fb      	str	r3, [r7, #12]
}
 800cfe0:	bf00      	nop
 800cfe2:	e7fe      	b.n	800cfe2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	3318      	adds	r3, #24
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7fe fc53 	bl	800b894 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfee:	4b1e      	ldr	r3, [pc, #120]	; (800d068 <xTaskRemoveFromEventList+0xb0>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d11d      	bne.n	800d032 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	3304      	adds	r3, #4
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fe fc4a 	bl	800b894 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d004:	4b19      	ldr	r3, [pc, #100]	; (800d06c <xTaskRemoveFromEventList+0xb4>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d903      	bls.n	800d014 <xTaskRemoveFromEventList+0x5c>
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d010:	4a16      	ldr	r2, [pc, #88]	; (800d06c <xTaskRemoveFromEventList+0xb4>)
 800d012:	6013      	str	r3, [r2, #0]
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d018:	4613      	mov	r3, r2
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	4413      	add	r3, r2
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	4a13      	ldr	r2, [pc, #76]	; (800d070 <xTaskRemoveFromEventList+0xb8>)
 800d022:	441a      	add	r2, r3
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	3304      	adds	r3, #4
 800d028:	4619      	mov	r1, r3
 800d02a:	4610      	mov	r0, r2
 800d02c:	f7fe fbd7 	bl	800b7de <vListInsertEnd>
 800d030:	e005      	b.n	800d03e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	3318      	adds	r3, #24
 800d036:	4619      	mov	r1, r3
 800d038:	480e      	ldr	r0, [pc, #56]	; (800d074 <xTaskRemoveFromEventList+0xbc>)
 800d03a:	f7fe fbd0 	bl	800b7de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d042:	4b0d      	ldr	r3, [pc, #52]	; (800d078 <xTaskRemoveFromEventList+0xc0>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d048:	429a      	cmp	r2, r3
 800d04a:	d905      	bls.n	800d058 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d04c:	2301      	movs	r3, #1
 800d04e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d050:	4b0a      	ldr	r3, [pc, #40]	; (800d07c <xTaskRemoveFromEventList+0xc4>)
 800d052:	2201      	movs	r2, #1
 800d054:	601a      	str	r2, [r3, #0]
 800d056:	e001      	b.n	800d05c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d058:	2300      	movs	r3, #0
 800d05a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800d05c:	697b      	ldr	r3, [r7, #20]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3718      	adds	r7, #24
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop
 800d068:	20000d6c 	.word	0x20000d6c
 800d06c:	20000d4c 	.word	0x20000d4c
 800d070:	20000874 	.word	0x20000874
 800d074:	20000d04 	.word	0x20000d04
 800d078:	20000870 	.word	0x20000870
 800d07c:	20000d58 	.word	0x20000d58

0800d080 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d080:	b480      	push	{r7}
 800d082:	b083      	sub	sp, #12
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d088:	4b06      	ldr	r3, [pc, #24]	; (800d0a4 <vTaskInternalSetTimeOutState+0x24>)
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d090:	4b05      	ldr	r3, [pc, #20]	; (800d0a8 <vTaskInternalSetTimeOutState+0x28>)
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	605a      	str	r2, [r3, #4]
}
 800d098:	bf00      	nop
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bc80      	pop	{r7}
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	20000d5c 	.word	0x20000d5c
 800d0a8:	20000d48 	.word	0x20000d48

0800d0ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b088      	sub	sp, #32
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d10a      	bne.n	800d0d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	613b      	str	r3, [r7, #16]
}
 800d0ce:	bf00      	nop
 800d0d0:	e7fe      	b.n	800d0d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d10a      	bne.n	800d0ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0dc:	f383 8811 	msr	BASEPRI, r3
 800d0e0:	f3bf 8f6f 	isb	sy
 800d0e4:	f3bf 8f4f 	dsb	sy
 800d0e8:	60fb      	str	r3, [r7, #12]
}
 800d0ea:	bf00      	nop
 800d0ec:	e7fe      	b.n	800d0ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d0ee:	f000 ff45 	bl	800df7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d0f2:	4b1d      	ldr	r3, [pc, #116]	; (800d168 <xTaskCheckForTimeOut+0xbc>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	69ba      	ldr	r2, [r7, #24]
 800d0fe:	1ad3      	subs	r3, r2, r3
 800d100:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d10a:	d102      	bne.n	800d112 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d10c:	2300      	movs	r3, #0
 800d10e:	61fb      	str	r3, [r7, #28]
 800d110:	e023      	b.n	800d15a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	4b15      	ldr	r3, [pc, #84]	; (800d16c <xTaskCheckForTimeOut+0xc0>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d007      	beq.n	800d12e <xTaskCheckForTimeOut+0x82>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	69ba      	ldr	r2, [r7, #24]
 800d124:	429a      	cmp	r2, r3
 800d126:	d302      	bcc.n	800d12e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d128:	2301      	movs	r3, #1
 800d12a:	61fb      	str	r3, [r7, #28]
 800d12c:	e015      	b.n	800d15a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	697a      	ldr	r2, [r7, #20]
 800d134:	429a      	cmp	r2, r3
 800d136:	d20b      	bcs.n	800d150 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	1ad2      	subs	r2, r2, r3
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f7ff ff9b 	bl	800d080 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d14a:	2300      	movs	r3, #0
 800d14c:	61fb      	str	r3, [r7, #28]
 800d14e:	e004      	b.n	800d15a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	2200      	movs	r2, #0
 800d154:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d156:	2301      	movs	r3, #1
 800d158:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d15a:	f000 ff3f 	bl	800dfdc <vPortExitCritical>

	return xReturn;
 800d15e:	69fb      	ldr	r3, [r7, #28]
}
 800d160:	4618      	mov	r0, r3
 800d162:	3720      	adds	r7, #32
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	20000d48 	.word	0x20000d48
 800d16c:	20000d5c 	.word	0x20000d5c

0800d170 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d170:	b480      	push	{r7}
 800d172:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d174:	4b03      	ldr	r3, [pc, #12]	; (800d184 <vTaskMissedYield+0x14>)
 800d176:	2201      	movs	r2, #1
 800d178:	601a      	str	r2, [r3, #0]
}
 800d17a:	bf00      	nop
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bc80      	pop	{r7}
 800d180:	4770      	bx	lr
 800d182:	bf00      	nop
 800d184:	20000d58 	.word	0x20000d58

0800d188 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d190:	f000 f852 	bl	800d238 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d194:	4b06      	ldr	r3, [pc, #24]	; (800d1b0 <prvIdleTask+0x28>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d9f9      	bls.n	800d190 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d19c:	4b05      	ldr	r3, [pc, #20]	; (800d1b4 <prvIdleTask+0x2c>)
 800d19e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1a2:	601a      	str	r2, [r3, #0]
 800d1a4:	f3bf 8f4f 	dsb	sy
 800d1a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d1ac:	e7f0      	b.n	800d190 <prvIdleTask+0x8>
 800d1ae:	bf00      	nop
 800d1b0:	20000874 	.word	0x20000874
 800d1b4:	e000ed04 	.word	0xe000ed04

0800d1b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1be:	2300      	movs	r3, #0
 800d1c0:	607b      	str	r3, [r7, #4]
 800d1c2:	e00c      	b.n	800d1de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	4413      	add	r3, r2
 800d1cc:	009b      	lsls	r3, r3, #2
 800d1ce:	4a12      	ldr	r2, [pc, #72]	; (800d218 <prvInitialiseTaskLists+0x60>)
 800d1d0:	4413      	add	r3, r2
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fe fad8 	bl	800b788 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	3301      	adds	r3, #1
 800d1dc:	607b      	str	r3, [r7, #4]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2b37      	cmp	r3, #55	; 0x37
 800d1e2:	d9ef      	bls.n	800d1c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d1e4:	480d      	ldr	r0, [pc, #52]	; (800d21c <prvInitialiseTaskLists+0x64>)
 800d1e6:	f7fe facf 	bl	800b788 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d1ea:	480d      	ldr	r0, [pc, #52]	; (800d220 <prvInitialiseTaskLists+0x68>)
 800d1ec:	f7fe facc 	bl	800b788 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d1f0:	480c      	ldr	r0, [pc, #48]	; (800d224 <prvInitialiseTaskLists+0x6c>)
 800d1f2:	f7fe fac9 	bl	800b788 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d1f6:	480c      	ldr	r0, [pc, #48]	; (800d228 <prvInitialiseTaskLists+0x70>)
 800d1f8:	f7fe fac6 	bl	800b788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d1fc:	480b      	ldr	r0, [pc, #44]	; (800d22c <prvInitialiseTaskLists+0x74>)
 800d1fe:	f7fe fac3 	bl	800b788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d202:	4b0b      	ldr	r3, [pc, #44]	; (800d230 <prvInitialiseTaskLists+0x78>)
 800d204:	4a05      	ldr	r2, [pc, #20]	; (800d21c <prvInitialiseTaskLists+0x64>)
 800d206:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d208:	4b0a      	ldr	r3, [pc, #40]	; (800d234 <prvInitialiseTaskLists+0x7c>)
 800d20a:	4a05      	ldr	r2, [pc, #20]	; (800d220 <prvInitialiseTaskLists+0x68>)
 800d20c:	601a      	str	r2, [r3, #0]
}
 800d20e:	bf00      	nop
 800d210:	3708      	adds	r7, #8
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	20000874 	.word	0x20000874
 800d21c:	20000cd4 	.word	0x20000cd4
 800d220:	20000ce8 	.word	0x20000ce8
 800d224:	20000d04 	.word	0x20000d04
 800d228:	20000d18 	.word	0x20000d18
 800d22c:	20000d30 	.word	0x20000d30
 800d230:	20000cfc 	.word	0x20000cfc
 800d234:	20000d00 	.word	0x20000d00

0800d238 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d23e:	e019      	b.n	800d274 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d240:	f000 fe9c 	bl	800df7c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d244:	4b10      	ldr	r3, [pc, #64]	; (800d288 <prvCheckTasksWaitingTermination+0x50>)
 800d246:	68db      	ldr	r3, [r3, #12]
 800d248:	68db      	ldr	r3, [r3, #12]
 800d24a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	3304      	adds	r3, #4
 800d250:	4618      	mov	r0, r3
 800d252:	f7fe fb1f 	bl	800b894 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d256:	4b0d      	ldr	r3, [pc, #52]	; (800d28c <prvCheckTasksWaitingTermination+0x54>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	3b01      	subs	r3, #1
 800d25c:	4a0b      	ldr	r2, [pc, #44]	; (800d28c <prvCheckTasksWaitingTermination+0x54>)
 800d25e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d260:	4b0b      	ldr	r3, [pc, #44]	; (800d290 <prvCheckTasksWaitingTermination+0x58>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	3b01      	subs	r3, #1
 800d266:	4a0a      	ldr	r2, [pc, #40]	; (800d290 <prvCheckTasksWaitingTermination+0x58>)
 800d268:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d26a:	f000 feb7 	bl	800dfdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 f848 	bl	800d304 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d274:	4b06      	ldr	r3, [pc, #24]	; (800d290 <prvCheckTasksWaitingTermination+0x58>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d1e1      	bne.n	800d240 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d27c:	bf00      	nop
 800d27e:	bf00      	nop
 800d280:	3708      	adds	r7, #8
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	20000d18 	.word	0x20000d18
 800d28c:	20000d44 	.word	0x20000d44
 800d290:	20000d2c 	.word	0x20000d2c

0800d294 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800d294:	b480      	push	{r7}
 800d296:	b085      	sub	sp, #20
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800d29c:	2300      	movs	r3, #0
 800d29e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d2a0:	e005      	b.n	800d2ae <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	607b      	str	r3, [r7, #4]
			ulCount++;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	2ba5      	cmp	r3, #165	; 0xa5
 800d2b4:	d0f5      	beq.n	800d2a2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	089b      	lsrs	r3, r3, #2
 800d2ba:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	b29b      	uxth	r3, r3
	}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3714      	adds	r7, #20
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bc80      	pop	{r7}
 800d2c8:	4770      	bx	lr
	...

0800d2cc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b086      	sub	sp, #24
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d102      	bne.n	800d2e0 <uxTaskGetStackHighWaterMark+0x14>
 800d2da:	4b09      	ldr	r3, [pc, #36]	; (800d300 <uxTaskGetStackHighWaterMark+0x34>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	e000      	b.n	800d2e2 <uxTaskGetStackHighWaterMark+0x16>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2e8:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800d2ea:	6938      	ldr	r0, [r7, #16]
 800d2ec:	f7ff ffd2 	bl	800d294 <prvTaskCheckFreeStackSpace>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
	}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3718      	adds	r7, #24
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	20000870 	.word	0x20000870

0800d304 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d312:	2b00      	cmp	r3, #0
 800d314:	d108      	bne.n	800d328 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d31a:	4618      	mov	r0, r3
 800d31c:	f000 fff2 	bl	800e304 <vPortFree>
				vPortFree( pxTCB );
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f000 ffef 	bl	800e304 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d326:	e018      	b.n	800d35a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d32e:	2b01      	cmp	r3, #1
 800d330:	d103      	bne.n	800d33a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 ffe6 	bl	800e304 <vPortFree>
	}
 800d338:	e00f      	b.n	800d35a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d340:	2b02      	cmp	r3, #2
 800d342:	d00a      	beq.n	800d35a <prvDeleteTCB+0x56>
	__asm volatile
 800d344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d348:	f383 8811 	msr	BASEPRI, r3
 800d34c:	f3bf 8f6f 	isb	sy
 800d350:	f3bf 8f4f 	dsb	sy
 800d354:	60fb      	str	r3, [r7, #12]
}
 800d356:	bf00      	nop
 800d358:	e7fe      	b.n	800d358 <prvDeleteTCB+0x54>
	}
 800d35a:	bf00      	nop
 800d35c:	3710      	adds	r7, #16
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
	...

0800d364 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d36a:	4b0e      	ldr	r3, [pc, #56]	; (800d3a4 <prvResetNextTaskUnblockTime+0x40>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d101      	bne.n	800d378 <prvResetNextTaskUnblockTime+0x14>
 800d374:	2301      	movs	r3, #1
 800d376:	e000      	b.n	800d37a <prvResetNextTaskUnblockTime+0x16>
 800d378:	2300      	movs	r3, #0
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d004      	beq.n	800d388 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d37e:	4b0a      	ldr	r3, [pc, #40]	; (800d3a8 <prvResetNextTaskUnblockTime+0x44>)
 800d380:	f04f 32ff 	mov.w	r2, #4294967295
 800d384:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d386:	e008      	b.n	800d39a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d388:	4b06      	ldr	r3, [pc, #24]	; (800d3a4 <prvResetNextTaskUnblockTime+0x40>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	68db      	ldr	r3, [r3, #12]
 800d390:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	4a04      	ldr	r2, [pc, #16]	; (800d3a8 <prvResetNextTaskUnblockTime+0x44>)
 800d398:	6013      	str	r3, [r2, #0]
}
 800d39a:	bf00      	nop
 800d39c:	370c      	adds	r7, #12
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bc80      	pop	{r7}
 800d3a2:	4770      	bx	lr
 800d3a4:	20000cfc 	.word	0x20000cfc
 800d3a8:	20000d64 	.word	0x20000d64

0800d3ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d3b2:	4b0b      	ldr	r3, [pc, #44]	; (800d3e0 <xTaskGetSchedulerState+0x34>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d102      	bne.n	800d3c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	607b      	str	r3, [r7, #4]
 800d3be:	e008      	b.n	800d3d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3c0:	4b08      	ldr	r3, [pc, #32]	; (800d3e4 <xTaskGetSchedulerState+0x38>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d102      	bne.n	800d3ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d3c8:	2302      	movs	r3, #2
 800d3ca:	607b      	str	r3, [r7, #4]
 800d3cc:	e001      	b.n	800d3d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d3d2:	687b      	ldr	r3, [r7, #4]
	}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bc80      	pop	{r7}
 800d3dc:	4770      	bx	lr
 800d3de:	bf00      	nop
 800d3e0:	20000d50 	.word	0x20000d50
 800d3e4:	20000d6c 	.word	0x20000d6c

0800d3e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d056      	beq.n	800d4ac <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d402:	4b2d      	ldr	r3, [pc, #180]	; (800d4b8 <xTaskPriorityInherit+0xd0>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d408:	429a      	cmp	r2, r3
 800d40a:	d246      	bcs.n	800d49a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	699b      	ldr	r3, [r3, #24]
 800d410:	2b00      	cmp	r3, #0
 800d412:	db06      	blt.n	800d422 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d414:	4b28      	ldr	r3, [pc, #160]	; (800d4b8 <xTaskPriorityInherit+0xd0>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	6959      	ldr	r1, [r3, #20]
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d42a:	4613      	mov	r3, r2
 800d42c:	009b      	lsls	r3, r3, #2
 800d42e:	4413      	add	r3, r2
 800d430:	009b      	lsls	r3, r3, #2
 800d432:	4a22      	ldr	r2, [pc, #136]	; (800d4bc <xTaskPriorityInherit+0xd4>)
 800d434:	4413      	add	r3, r2
 800d436:	4299      	cmp	r1, r3
 800d438:	d101      	bne.n	800d43e <xTaskPriorityInherit+0x56>
 800d43a:	2301      	movs	r3, #1
 800d43c:	e000      	b.n	800d440 <xTaskPriorityInherit+0x58>
 800d43e:	2300      	movs	r3, #0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d022      	beq.n	800d48a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	3304      	adds	r3, #4
 800d448:	4618      	mov	r0, r3
 800d44a:	f7fe fa23 	bl	800b894 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d44e:	4b1a      	ldr	r3, [pc, #104]	; (800d4b8 <xTaskPriorityInherit+0xd0>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d45c:	4b18      	ldr	r3, [pc, #96]	; (800d4c0 <xTaskPriorityInherit+0xd8>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	429a      	cmp	r2, r3
 800d462:	d903      	bls.n	800d46c <xTaskPriorityInherit+0x84>
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d468:	4a15      	ldr	r2, [pc, #84]	; (800d4c0 <xTaskPriorityInherit+0xd8>)
 800d46a:	6013      	str	r3, [r2, #0]
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d470:	4613      	mov	r3, r2
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	4413      	add	r3, r2
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	4a10      	ldr	r2, [pc, #64]	; (800d4bc <xTaskPriorityInherit+0xd4>)
 800d47a:	441a      	add	r2, r3
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	3304      	adds	r3, #4
 800d480:	4619      	mov	r1, r3
 800d482:	4610      	mov	r0, r2
 800d484:	f7fe f9ab 	bl	800b7de <vListInsertEnd>
 800d488:	e004      	b.n	800d494 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d48a:	4b0b      	ldr	r3, [pc, #44]	; (800d4b8 <xTaskPriorityInherit+0xd0>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d494:	2301      	movs	r3, #1
 800d496:	60fb      	str	r3, [r7, #12]
 800d498:	e008      	b.n	800d4ac <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d49e:	4b06      	ldr	r3, [pc, #24]	; (800d4b8 <xTaskPriorityInherit+0xd0>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d201      	bcs.n	800d4ac <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
	}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	20000870 	.word	0x20000870
 800d4bc:	20000874 	.word	0x20000874
 800d4c0:	20000d4c 	.word	0x20000d4c

0800d4c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b086      	sub	sp, #24
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d056      	beq.n	800d588 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d4da:	4b2e      	ldr	r3, [pc, #184]	; (800d594 <xTaskPriorityDisinherit+0xd0>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	693a      	ldr	r2, [r7, #16]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d00a      	beq.n	800d4fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e8:	f383 8811 	msr	BASEPRI, r3
 800d4ec:	f3bf 8f6f 	isb	sy
 800d4f0:	f3bf 8f4f 	dsb	sy
 800d4f4:	60fb      	str	r3, [r7, #12]
}
 800d4f6:	bf00      	nop
 800d4f8:	e7fe      	b.n	800d4f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10a      	bne.n	800d518 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d506:	f383 8811 	msr	BASEPRI, r3
 800d50a:	f3bf 8f6f 	isb	sy
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	60bb      	str	r3, [r7, #8]
}
 800d514:	bf00      	nop
 800d516:	e7fe      	b.n	800d516 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d51c:	1e5a      	subs	r2, r3, #1
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d02c      	beq.n	800d588 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d532:	2b00      	cmp	r3, #0
 800d534:	d128      	bne.n	800d588 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	3304      	adds	r3, #4
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7fe f9aa 	bl	800b894 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d54c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d558:	4b0f      	ldr	r3, [pc, #60]	; (800d598 <xTaskPriorityDisinherit+0xd4>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d903      	bls.n	800d568 <xTaskPriorityDisinherit+0xa4>
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d564:	4a0c      	ldr	r2, [pc, #48]	; (800d598 <xTaskPriorityDisinherit+0xd4>)
 800d566:	6013      	str	r3, [r2, #0]
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d56c:	4613      	mov	r3, r2
 800d56e:	009b      	lsls	r3, r3, #2
 800d570:	4413      	add	r3, r2
 800d572:	009b      	lsls	r3, r3, #2
 800d574:	4a09      	ldr	r2, [pc, #36]	; (800d59c <xTaskPriorityDisinherit+0xd8>)
 800d576:	441a      	add	r2, r3
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	3304      	adds	r3, #4
 800d57c:	4619      	mov	r1, r3
 800d57e:	4610      	mov	r0, r2
 800d580:	f7fe f92d 	bl	800b7de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d584:	2301      	movs	r3, #1
 800d586:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d588:	697b      	ldr	r3, [r7, #20]
	}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3718      	adds	r7, #24
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	20000870 	.word	0x20000870
 800d598:	20000d4c 	.word	0x20000d4c
 800d59c:	20000874 	.word	0x20000874

0800d5a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b088      	sub	sp, #32
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d06f      	beq.n	800d698 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d10a      	bne.n	800d5d6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c4:	f383 8811 	msr	BASEPRI, r3
 800d5c8:	f3bf 8f6f 	isb	sy
 800d5cc:	f3bf 8f4f 	dsb	sy
 800d5d0:	60fb      	str	r3, [r7, #12]
}
 800d5d2:	bf00      	nop
 800d5d4:	e7fe      	b.n	800d5d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5da:	683a      	ldr	r2, [r7, #0]
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d902      	bls.n	800d5e6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	61fb      	str	r3, [r7, #28]
 800d5e4:	e002      	b.n	800d5ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f0:	69fa      	ldr	r2, [r7, #28]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d050      	beq.n	800d698 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5fa:	697a      	ldr	r2, [r7, #20]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d14b      	bne.n	800d698 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d600:	4b27      	ldr	r3, [pc, #156]	; (800d6a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	69ba      	ldr	r2, [r7, #24]
 800d606:	429a      	cmp	r2, r3
 800d608:	d10a      	bne.n	800d620 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60e:	f383 8811 	msr	BASEPRI, r3
 800d612:	f3bf 8f6f 	isb	sy
 800d616:	f3bf 8f4f 	dsb	sy
 800d61a:	60bb      	str	r3, [r7, #8]
}
 800d61c:	bf00      	nop
 800d61e:	e7fe      	b.n	800d61e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d620:	69bb      	ldr	r3, [r7, #24]
 800d622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d624:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	69fa      	ldr	r2, [r7, #28]
 800d62a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d62c:	69bb      	ldr	r3, [r7, #24]
 800d62e:	699b      	ldr	r3, [r3, #24]
 800d630:	2b00      	cmp	r3, #0
 800d632:	db04      	blt.n	800d63e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d63a:	69bb      	ldr	r3, [r7, #24]
 800d63c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	6959      	ldr	r1, [r3, #20]
 800d642:	693a      	ldr	r2, [r7, #16]
 800d644:	4613      	mov	r3, r2
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	4413      	add	r3, r2
 800d64a:	009b      	lsls	r3, r3, #2
 800d64c:	4a15      	ldr	r2, [pc, #84]	; (800d6a4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d64e:	4413      	add	r3, r2
 800d650:	4299      	cmp	r1, r3
 800d652:	d101      	bne.n	800d658 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800d654:	2301      	movs	r3, #1
 800d656:	e000      	b.n	800d65a <vTaskPriorityDisinheritAfterTimeout+0xba>
 800d658:	2300      	movs	r3, #0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d01c      	beq.n	800d698 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	3304      	adds	r3, #4
 800d662:	4618      	mov	r0, r3
 800d664:	f7fe f916 	bl	800b894 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d668:	69bb      	ldr	r3, [r7, #24]
 800d66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d66c:	4b0e      	ldr	r3, [pc, #56]	; (800d6a8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	429a      	cmp	r2, r3
 800d672:	d903      	bls.n	800d67c <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800d674:	69bb      	ldr	r3, [r7, #24]
 800d676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d678:	4a0b      	ldr	r2, [pc, #44]	; (800d6a8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d67a:	6013      	str	r3, [r2, #0]
 800d67c:	69bb      	ldr	r3, [r7, #24]
 800d67e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d680:	4613      	mov	r3, r2
 800d682:	009b      	lsls	r3, r3, #2
 800d684:	4413      	add	r3, r2
 800d686:	009b      	lsls	r3, r3, #2
 800d688:	4a06      	ldr	r2, [pc, #24]	; (800d6a4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d68a:	441a      	add	r2, r3
 800d68c:	69bb      	ldr	r3, [r7, #24]
 800d68e:	3304      	adds	r3, #4
 800d690:	4619      	mov	r1, r3
 800d692:	4610      	mov	r0, r2
 800d694:	f7fe f8a3 	bl	800b7de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d698:	bf00      	nop
 800d69a:	3720      	adds	r7, #32
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	20000870 	.word	0x20000870
 800d6a4:	20000874 	.word	0x20000874
 800d6a8:	20000d4c 	.word	0x20000d4c

0800d6ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800d6ac:	b480      	push	{r7}
 800d6ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d6b0:	4b07      	ldr	r3, [pc, #28]	; (800d6d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d004      	beq.n	800d6c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d6b8:	4b05      	ldr	r3, [pc, #20]	; (800d6d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d6be:	3201      	adds	r2, #1
 800d6c0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d6c2:	4b03      	ldr	r3, [pc, #12]	; (800d6d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
	}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bc80      	pop	{r7}
 800d6cc:	4770      	bx	lr
 800d6ce:	bf00      	nop
 800d6d0:	20000870 	.word	0x20000870

0800d6d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b084      	sub	sp, #16
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d6de:	4b21      	ldr	r3, [pc, #132]	; (800d764 <prvAddCurrentTaskToDelayedList+0x90>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6e4:	4b20      	ldr	r3, [pc, #128]	; (800d768 <prvAddCurrentTaskToDelayedList+0x94>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	3304      	adds	r3, #4
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fe f8d2 	bl	800b894 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6f6:	d10a      	bne.n	800d70e <prvAddCurrentTaskToDelayedList+0x3a>
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d007      	beq.n	800d70e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6fe:	4b1a      	ldr	r3, [pc, #104]	; (800d768 <prvAddCurrentTaskToDelayedList+0x94>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	3304      	adds	r3, #4
 800d704:	4619      	mov	r1, r3
 800d706:	4819      	ldr	r0, [pc, #100]	; (800d76c <prvAddCurrentTaskToDelayedList+0x98>)
 800d708:	f7fe f869 	bl	800b7de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d70c:	e026      	b.n	800d75c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d70e:	68fa      	ldr	r2, [r7, #12]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	4413      	add	r3, r2
 800d714:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d716:	4b14      	ldr	r3, [pc, #80]	; (800d768 <prvAddCurrentTaskToDelayedList+0x94>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	68ba      	ldr	r2, [r7, #8]
 800d71c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d71e:	68ba      	ldr	r2, [r7, #8]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	429a      	cmp	r2, r3
 800d724:	d209      	bcs.n	800d73a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d726:	4b12      	ldr	r3, [pc, #72]	; (800d770 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	4b0f      	ldr	r3, [pc, #60]	; (800d768 <prvAddCurrentTaskToDelayedList+0x94>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	3304      	adds	r3, #4
 800d730:	4619      	mov	r1, r3
 800d732:	4610      	mov	r0, r2
 800d734:	f7fe f876 	bl	800b824 <vListInsert>
}
 800d738:	e010      	b.n	800d75c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d73a:	4b0e      	ldr	r3, [pc, #56]	; (800d774 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	4b0a      	ldr	r3, [pc, #40]	; (800d768 <prvAddCurrentTaskToDelayedList+0x94>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	3304      	adds	r3, #4
 800d744:	4619      	mov	r1, r3
 800d746:	4610      	mov	r0, r2
 800d748:	f7fe f86c 	bl	800b824 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d74c:	4b0a      	ldr	r3, [pc, #40]	; (800d778 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	68ba      	ldr	r2, [r7, #8]
 800d752:	429a      	cmp	r2, r3
 800d754:	d202      	bcs.n	800d75c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d756:	4a08      	ldr	r2, [pc, #32]	; (800d778 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	6013      	str	r3, [r2, #0]
}
 800d75c:	bf00      	nop
 800d75e:	3710      	adds	r7, #16
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	20000d48 	.word	0x20000d48
 800d768:	20000870 	.word	0x20000870
 800d76c:	20000d30 	.word	0x20000d30
 800d770:	20000d00 	.word	0x20000d00
 800d774:	20000cfc 	.word	0x20000cfc
 800d778:	20000d64 	.word	0x20000d64

0800d77c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b08a      	sub	sp, #40	; 0x28
 800d780:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d782:	2300      	movs	r3, #0
 800d784:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d786:	f000 facb 	bl	800dd20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d78a:	4b1c      	ldr	r3, [pc, #112]	; (800d7fc <xTimerCreateTimerTask+0x80>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d021      	beq.n	800d7d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d792:	2300      	movs	r3, #0
 800d794:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d796:	2300      	movs	r3, #0
 800d798:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d79a:	1d3a      	adds	r2, r7, #4
 800d79c:	f107 0108 	add.w	r1, r7, #8
 800d7a0:	f107 030c 	add.w	r3, r7, #12
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7fd ffd5 	bl	800b754 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d7aa:	6879      	ldr	r1, [r7, #4]
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	68fa      	ldr	r2, [r7, #12]
 800d7b0:	9202      	str	r2, [sp, #8]
 800d7b2:	9301      	str	r3, [sp, #4]
 800d7b4:	2302      	movs	r3, #2
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	460a      	mov	r2, r1
 800d7bc:	4910      	ldr	r1, [pc, #64]	; (800d800 <xTimerCreateTimerTask+0x84>)
 800d7be:	4811      	ldr	r0, [pc, #68]	; (800d804 <xTimerCreateTimerTask+0x88>)
 800d7c0:	f7fe ff26 	bl	800c610 <xTaskCreateStatic>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	4a10      	ldr	r2, [pc, #64]	; (800d808 <xTimerCreateTimerTask+0x8c>)
 800d7c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d7ca:	4b0f      	ldr	r3, [pc, #60]	; (800d808 <xTimerCreateTimerTask+0x8c>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d001      	beq.n	800d7d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d10a      	bne.n	800d7f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e0:	f383 8811 	msr	BASEPRI, r3
 800d7e4:	f3bf 8f6f 	isb	sy
 800d7e8:	f3bf 8f4f 	dsb	sy
 800d7ec:	613b      	str	r3, [r7, #16]
}
 800d7ee:	bf00      	nop
 800d7f0:	e7fe      	b.n	800d7f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d7f2:	697b      	ldr	r3, [r7, #20]
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3718      	adds	r7, #24
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	20000da0 	.word	0x20000da0
 800d800:	0800f1a8 	.word	0x0800f1a8
 800d804:	0800d929 	.word	0x0800d929
 800d808:	20000da4 	.word	0x20000da4

0800d80c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b08a      	sub	sp, #40	; 0x28
 800d810:	af00      	add	r7, sp, #0
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	60b9      	str	r1, [r7, #8]
 800d816:	607a      	str	r2, [r7, #4]
 800d818:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d81a:	2300      	movs	r3, #0
 800d81c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d10a      	bne.n	800d83a <xTimerGenericCommand+0x2e>
	__asm volatile
 800d824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d828:	f383 8811 	msr	BASEPRI, r3
 800d82c:	f3bf 8f6f 	isb	sy
 800d830:	f3bf 8f4f 	dsb	sy
 800d834:	623b      	str	r3, [r7, #32]
}
 800d836:	bf00      	nop
 800d838:	e7fe      	b.n	800d838 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d83a:	4b1a      	ldr	r3, [pc, #104]	; (800d8a4 <xTimerGenericCommand+0x98>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d02a      	beq.n	800d898 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	2b05      	cmp	r3, #5
 800d852:	dc18      	bgt.n	800d886 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d854:	f7ff fdaa 	bl	800d3ac <xTaskGetSchedulerState>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b02      	cmp	r3, #2
 800d85c:	d109      	bne.n	800d872 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d85e:	4b11      	ldr	r3, [pc, #68]	; (800d8a4 <xTimerGenericCommand+0x98>)
 800d860:	6818      	ldr	r0, [r3, #0]
 800d862:	f107 0110 	add.w	r1, r7, #16
 800d866:	2300      	movs	r3, #0
 800d868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d86a:	f7fe f9cb 	bl	800bc04 <xQueueGenericSend>
 800d86e:	6278      	str	r0, [r7, #36]	; 0x24
 800d870:	e012      	b.n	800d898 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d872:	4b0c      	ldr	r3, [pc, #48]	; (800d8a4 <xTimerGenericCommand+0x98>)
 800d874:	6818      	ldr	r0, [r3, #0]
 800d876:	f107 0110 	add.w	r1, r7, #16
 800d87a:	2300      	movs	r3, #0
 800d87c:	2200      	movs	r2, #0
 800d87e:	f7fe f9c1 	bl	800bc04 <xQueueGenericSend>
 800d882:	6278      	str	r0, [r7, #36]	; 0x24
 800d884:	e008      	b.n	800d898 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d886:	4b07      	ldr	r3, [pc, #28]	; (800d8a4 <xTimerGenericCommand+0x98>)
 800d888:	6818      	ldr	r0, [r3, #0]
 800d88a:	f107 0110 	add.w	r1, r7, #16
 800d88e:	2300      	movs	r3, #0
 800d890:	683a      	ldr	r2, [r7, #0]
 800d892:	f7fe fab5 	bl	800be00 <xQueueGenericSendFromISR>
 800d896:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3728      	adds	r7, #40	; 0x28
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	20000da0 	.word	0x20000da0

0800d8a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b088      	sub	sp, #32
 800d8ac:	af02      	add	r7, sp, #8
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d8b2:	4b1c      	ldr	r3, [pc, #112]	; (800d924 <prvProcessExpiredTimer+0x7c>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	68db      	ldr	r3, [r3, #12]
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	3304      	adds	r3, #4
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7fd ffe7 	bl	800b894 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	69db      	ldr	r3, [r3, #28]
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d122      	bne.n	800d914 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	699a      	ldr	r2, [r3, #24]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	18d1      	adds	r1, r2, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	683a      	ldr	r2, [r7, #0]
 800d8da:	6978      	ldr	r0, [r7, #20]
 800d8dc:	f000 f8c8 	bl	800da70 <prvInsertTimerInActiveList>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d016      	beq.n	800d914 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	9300      	str	r3, [sp, #0]
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	2100      	movs	r1, #0
 800d8f0:	6978      	ldr	r0, [r7, #20]
 800d8f2:	f7ff ff8b 	bl	800d80c <xTimerGenericCommand>
 800d8f6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d10a      	bne.n	800d914 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800d8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d902:	f383 8811 	msr	BASEPRI, r3
 800d906:	f3bf 8f6f 	isb	sy
 800d90a:	f3bf 8f4f 	dsb	sy
 800d90e:	60fb      	str	r3, [r7, #12]
}
 800d910:	bf00      	nop
 800d912:	e7fe      	b.n	800d912 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d918:	6978      	ldr	r0, [r7, #20]
 800d91a:	4798      	blx	r3
}
 800d91c:	bf00      	nop
 800d91e:	3718      	adds	r7, #24
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	20000d98 	.word	0x20000d98

0800d928 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d930:	f107 0308 	add.w	r3, r7, #8
 800d934:	4618      	mov	r0, r3
 800d936:	f000 f857 	bl	800d9e8 <prvGetNextExpireTime>
 800d93a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	4619      	mov	r1, r3
 800d940:	68f8      	ldr	r0, [r7, #12]
 800d942:	f000 f803 	bl	800d94c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d946:	f000 f8d5 	bl	800daf4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d94a:	e7f1      	b.n	800d930 <prvTimerTask+0x8>

0800d94c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d956:	f7ff f90b 	bl	800cb70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d95a:	f107 0308 	add.w	r3, r7, #8
 800d95e:	4618      	mov	r0, r3
 800d960:	f000 f866 	bl	800da30 <prvSampleTimeNow>
 800d964:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d130      	bne.n	800d9ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d10a      	bne.n	800d988 <prvProcessTimerOrBlockTask+0x3c>
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	429a      	cmp	r2, r3
 800d978:	d806      	bhi.n	800d988 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d97a:	f7ff f907 	bl	800cb8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d97e:	68f9      	ldr	r1, [r7, #12]
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f7ff ff91 	bl	800d8a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d986:	e024      	b.n	800d9d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d008      	beq.n	800d9a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d98e:	4b13      	ldr	r3, [pc, #76]	; (800d9dc <prvProcessTimerOrBlockTask+0x90>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	bf0c      	ite	eq
 800d998:	2301      	moveq	r3, #1
 800d99a:	2300      	movne	r3, #0
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d9a0:	4b0f      	ldr	r3, [pc, #60]	; (800d9e0 <prvProcessTimerOrBlockTask+0x94>)
 800d9a2:	6818      	ldr	r0, [r3, #0]
 800d9a4:	687a      	ldr	r2, [r7, #4]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	1ad3      	subs	r3, r2, r3
 800d9aa:	683a      	ldr	r2, [r7, #0]
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	f7fe fdfb 	bl	800c5a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d9b2:	f7ff f8eb 	bl	800cb8c <xTaskResumeAll>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d10a      	bne.n	800d9d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d9bc:	4b09      	ldr	r3, [pc, #36]	; (800d9e4 <prvProcessTimerOrBlockTask+0x98>)
 800d9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9c2:	601a      	str	r2, [r3, #0]
 800d9c4:	f3bf 8f4f 	dsb	sy
 800d9c8:	f3bf 8f6f 	isb	sy
}
 800d9cc:	e001      	b.n	800d9d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d9ce:	f7ff f8dd 	bl	800cb8c <xTaskResumeAll>
}
 800d9d2:	bf00      	nop
 800d9d4:	3710      	adds	r7, #16
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	20000d9c 	.word	0x20000d9c
 800d9e0:	20000da0 	.word	0x20000da0
 800d9e4:	e000ed04 	.word	0xe000ed04

0800d9e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b085      	sub	sp, #20
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d9f0:	4b0e      	ldr	r3, [pc, #56]	; (800da2c <prvGetNextExpireTime+0x44>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	bf0c      	ite	eq
 800d9fa:	2301      	moveq	r3, #1
 800d9fc:	2300      	movne	r3, #0
 800d9fe:	b2db      	uxtb	r3, r3
 800da00:	461a      	mov	r2, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d105      	bne.n	800da1a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800da0e:	4b07      	ldr	r3, [pc, #28]	; (800da2c <prvGetNextExpireTime+0x44>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	60fb      	str	r3, [r7, #12]
 800da18:	e001      	b.n	800da1e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800da1a:	2300      	movs	r3, #0
 800da1c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800da1e:	68fb      	ldr	r3, [r7, #12]
}
 800da20:	4618      	mov	r0, r3
 800da22:	3714      	adds	r7, #20
 800da24:	46bd      	mov	sp, r7
 800da26:	bc80      	pop	{r7}
 800da28:	4770      	bx	lr
 800da2a:	bf00      	nop
 800da2c:	20000d98 	.word	0x20000d98

0800da30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800da38:	f7ff f946 	bl	800ccc8 <xTaskGetTickCount>
 800da3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800da3e:	4b0b      	ldr	r3, [pc, #44]	; (800da6c <prvSampleTimeNow+0x3c>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	68fa      	ldr	r2, [r7, #12]
 800da44:	429a      	cmp	r2, r3
 800da46:	d205      	bcs.n	800da54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800da48:	f000 f908 	bl	800dc5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2201      	movs	r2, #1
 800da50:	601a      	str	r2, [r3, #0]
 800da52:	e002      	b.n	800da5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2200      	movs	r2, #0
 800da58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800da5a:	4a04      	ldr	r2, [pc, #16]	; (800da6c <prvSampleTimeNow+0x3c>)
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800da60:	68fb      	ldr	r3, [r7, #12]
}
 800da62:	4618      	mov	r0, r3
 800da64:	3710      	adds	r7, #16
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	20000da8 	.word	0x20000da8

0800da70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b086      	sub	sp, #24
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	607a      	str	r2, [r7, #4]
 800da7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800da7e:	2300      	movs	r3, #0
 800da80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	68ba      	ldr	r2, [r7, #8]
 800da86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	68fa      	ldr	r2, [r7, #12]
 800da8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800da8e:	68ba      	ldr	r2, [r7, #8]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	429a      	cmp	r2, r3
 800da94:	d812      	bhi.n	800dabc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	1ad2      	subs	r2, r2, r3
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	699b      	ldr	r3, [r3, #24]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d302      	bcc.n	800daaa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800daa4:	2301      	movs	r3, #1
 800daa6:	617b      	str	r3, [r7, #20]
 800daa8:	e01b      	b.n	800dae2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800daaa:	4b10      	ldr	r3, [pc, #64]	; (800daec <prvInsertTimerInActiveList+0x7c>)
 800daac:	681a      	ldr	r2, [r3, #0]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	3304      	adds	r3, #4
 800dab2:	4619      	mov	r1, r3
 800dab4:	4610      	mov	r0, r2
 800dab6:	f7fd feb5 	bl	800b824 <vListInsert>
 800daba:	e012      	b.n	800dae2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d206      	bcs.n	800dad2 <prvInsertTimerInActiveList+0x62>
 800dac4:	68ba      	ldr	r2, [r7, #8]
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d302      	bcc.n	800dad2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dacc:	2301      	movs	r3, #1
 800dace:	617b      	str	r3, [r7, #20]
 800dad0:	e007      	b.n	800dae2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dad2:	4b07      	ldr	r3, [pc, #28]	; (800daf0 <prvInsertTimerInActiveList+0x80>)
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	3304      	adds	r3, #4
 800dada:	4619      	mov	r1, r3
 800dadc:	4610      	mov	r0, r2
 800dade:	f7fd fea1 	bl	800b824 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dae2:	697b      	ldr	r3, [r7, #20]
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3718      	adds	r7, #24
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}
 800daec:	20000d9c 	.word	0x20000d9c
 800daf0:	20000d98 	.word	0x20000d98

0800daf4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b08e      	sub	sp, #56	; 0x38
 800daf8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dafa:	e09d      	b.n	800dc38 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	da18      	bge.n	800db34 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800db02:	1d3b      	adds	r3, r7, #4
 800db04:	3304      	adds	r3, #4
 800db06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800db08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d10a      	bne.n	800db24 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800db0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db12:	f383 8811 	msr	BASEPRI, r3
 800db16:	f3bf 8f6f 	isb	sy
 800db1a:	f3bf 8f4f 	dsb	sy
 800db1e:	61fb      	str	r3, [r7, #28]
}
 800db20:	bf00      	nop
 800db22:	e7fe      	b.n	800db22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800db24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db2a:	6850      	ldr	r0, [r2, #4]
 800db2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db2e:	6892      	ldr	r2, [r2, #8]
 800db30:	4611      	mov	r1, r2
 800db32:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2b00      	cmp	r3, #0
 800db38:	db7d      	blt.n	800dc36 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800db3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db40:	695b      	ldr	r3, [r3, #20]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d004      	beq.n	800db50 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db48:	3304      	adds	r3, #4
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fd fea2 	bl	800b894 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db50:	463b      	mov	r3, r7
 800db52:	4618      	mov	r0, r3
 800db54:	f7ff ff6c 	bl	800da30 <prvSampleTimeNow>
 800db58:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2b09      	cmp	r3, #9
 800db5e:	d86b      	bhi.n	800dc38 <prvProcessReceivedCommands+0x144>
 800db60:	a201      	add	r2, pc, #4	; (adr r2, 800db68 <prvProcessReceivedCommands+0x74>)
 800db62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db66:	bf00      	nop
 800db68:	0800db91 	.word	0x0800db91
 800db6c:	0800db91 	.word	0x0800db91
 800db70:	0800db91 	.word	0x0800db91
 800db74:	0800dc39 	.word	0x0800dc39
 800db78:	0800dbed 	.word	0x0800dbed
 800db7c:	0800dc25 	.word	0x0800dc25
 800db80:	0800db91 	.word	0x0800db91
 800db84:	0800db91 	.word	0x0800db91
 800db88:	0800dc39 	.word	0x0800dc39
 800db8c:	0800dbed 	.word	0x0800dbed
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800db90:	68ba      	ldr	r2, [r7, #8]
 800db92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db94:	699b      	ldr	r3, [r3, #24]
 800db96:	18d1      	adds	r1, r2, r3
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db9e:	f7ff ff67 	bl	800da70 <prvInsertTimerInActiveList>
 800dba2:	4603      	mov	r3, r0
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d047      	beq.n	800dc38 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbae:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800dbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb2:	69db      	ldr	r3, [r3, #28]
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d13f      	bne.n	800dc38 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dbb8:	68ba      	ldr	r2, [r7, #8]
 800dbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbbc:	699b      	ldr	r3, [r3, #24]
 800dbbe:	441a      	add	r2, r3
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	9300      	str	r3, [sp, #0]
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	2100      	movs	r1, #0
 800dbc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbca:	f7ff fe1f 	bl	800d80c <xTimerGenericCommand>
 800dbce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dbd0:	6a3b      	ldr	r3, [r7, #32]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d130      	bne.n	800dc38 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800dbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbda:	f383 8811 	msr	BASEPRI, r3
 800dbde:	f3bf 8f6f 	isb	sy
 800dbe2:	f3bf 8f4f 	dsb	sy
 800dbe6:	61bb      	str	r3, [r7, #24]
}
 800dbe8:	bf00      	nop
 800dbea:	e7fe      	b.n	800dbea <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dbec:	68ba      	ldr	r2, [r7, #8]
 800dbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf4:	699b      	ldr	r3, [r3, #24]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d10a      	bne.n	800dc10 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800dbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfe:	f383 8811 	msr	BASEPRI, r3
 800dc02:	f3bf 8f6f 	isb	sy
 800dc06:	f3bf 8f4f 	dsb	sy
 800dc0a:	617b      	str	r3, [r7, #20]
}
 800dc0c:	bf00      	nop
 800dc0e:	e7fe      	b.n	800dc0e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc12:	699a      	ldr	r2, [r3, #24]
 800dc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc16:	18d1      	adds	r1, r2, r3
 800dc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc1e:	f7ff ff27 	bl	800da70 <prvInsertTimerInActiveList>
					break;
 800dc22:	e009      	b.n	800dc38 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800dc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d104      	bne.n	800dc38 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800dc2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc30:	f000 fb68 	bl	800e304 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dc34:	e000      	b.n	800dc38 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dc36:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc38:	4b07      	ldr	r3, [pc, #28]	; (800dc58 <prvProcessReceivedCommands+0x164>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	1d39      	adds	r1, r7, #4
 800dc3e:	2200      	movs	r2, #0
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7fe f975 	bl	800bf30 <xQueueReceive>
 800dc46:	4603      	mov	r3, r0
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	f47f af57 	bne.w	800dafc <prvProcessReceivedCommands+0x8>
	}
}
 800dc4e:	bf00      	nop
 800dc50:	bf00      	nop
 800dc52:	3730      	adds	r7, #48	; 0x30
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}
 800dc58:	20000da0 	.word	0x20000da0

0800dc5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b088      	sub	sp, #32
 800dc60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc62:	e045      	b.n	800dcf0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc64:	4b2c      	ldr	r3, [pc, #176]	; (800dd18 <prvSwitchTimerLists+0xbc>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	68db      	ldr	r3, [r3, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc6e:	4b2a      	ldr	r3, [pc, #168]	; (800dd18 <prvSwitchTimerLists+0xbc>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	68db      	ldr	r3, [r3, #12]
 800dc74:	68db      	ldr	r3, [r3, #12]
 800dc76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	3304      	adds	r3, #4
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7fd fe09 	bl	800b894 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc86:	68f8      	ldr	r0, [r7, #12]
 800dc88:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	69db      	ldr	r3, [r3, #28]
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d12e      	bne.n	800dcf0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	699b      	ldr	r3, [r3, #24]
 800dc96:	693a      	ldr	r2, [r7, #16]
 800dc98:	4413      	add	r3, r2
 800dc9a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dc9c:	68ba      	ldr	r2, [r7, #8]
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d90e      	bls.n	800dcc2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	68ba      	ldr	r2, [r7, #8]
 800dca8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	68fa      	ldr	r2, [r7, #12]
 800dcae:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dcb0:	4b19      	ldr	r3, [pc, #100]	; (800dd18 <prvSwitchTimerLists+0xbc>)
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	3304      	adds	r3, #4
 800dcb8:	4619      	mov	r1, r3
 800dcba:	4610      	mov	r0, r2
 800dcbc:	f7fd fdb2 	bl	800b824 <vListInsert>
 800dcc0:	e016      	b.n	800dcf0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	9300      	str	r3, [sp, #0]
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	693a      	ldr	r2, [r7, #16]
 800dcca:	2100      	movs	r1, #0
 800dccc:	68f8      	ldr	r0, [r7, #12]
 800dcce:	f7ff fd9d 	bl	800d80c <xTimerGenericCommand>
 800dcd2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d10a      	bne.n	800dcf0 <prvSwitchTimerLists+0x94>
	__asm volatile
 800dcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcde:	f383 8811 	msr	BASEPRI, r3
 800dce2:	f3bf 8f6f 	isb	sy
 800dce6:	f3bf 8f4f 	dsb	sy
 800dcea:	603b      	str	r3, [r7, #0]
}
 800dcec:	bf00      	nop
 800dcee:	e7fe      	b.n	800dcee <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dcf0:	4b09      	ldr	r3, [pc, #36]	; (800dd18 <prvSwitchTimerLists+0xbc>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d1b4      	bne.n	800dc64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dcfa:	4b07      	ldr	r3, [pc, #28]	; (800dd18 <prvSwitchTimerLists+0xbc>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dd00:	4b06      	ldr	r3, [pc, #24]	; (800dd1c <prvSwitchTimerLists+0xc0>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	4a04      	ldr	r2, [pc, #16]	; (800dd18 <prvSwitchTimerLists+0xbc>)
 800dd06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dd08:	4a04      	ldr	r2, [pc, #16]	; (800dd1c <prvSwitchTimerLists+0xc0>)
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	6013      	str	r3, [r2, #0]
}
 800dd0e:	bf00      	nop
 800dd10:	3718      	adds	r7, #24
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	20000d98 	.word	0x20000d98
 800dd1c:	20000d9c 	.word	0x20000d9c

0800dd20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dd26:	f000 f929 	bl	800df7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dd2a:	4b15      	ldr	r3, [pc, #84]	; (800dd80 <prvCheckForValidListAndQueue+0x60>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d120      	bne.n	800dd74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dd32:	4814      	ldr	r0, [pc, #80]	; (800dd84 <prvCheckForValidListAndQueue+0x64>)
 800dd34:	f7fd fd28 	bl	800b788 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dd38:	4813      	ldr	r0, [pc, #76]	; (800dd88 <prvCheckForValidListAndQueue+0x68>)
 800dd3a:	f7fd fd25 	bl	800b788 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dd3e:	4b13      	ldr	r3, [pc, #76]	; (800dd8c <prvCheckForValidListAndQueue+0x6c>)
 800dd40:	4a10      	ldr	r2, [pc, #64]	; (800dd84 <prvCheckForValidListAndQueue+0x64>)
 800dd42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dd44:	4b12      	ldr	r3, [pc, #72]	; (800dd90 <prvCheckForValidListAndQueue+0x70>)
 800dd46:	4a10      	ldr	r2, [pc, #64]	; (800dd88 <prvCheckForValidListAndQueue+0x68>)
 800dd48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	9300      	str	r3, [sp, #0]
 800dd4e:	4b11      	ldr	r3, [pc, #68]	; (800dd94 <prvCheckForValidListAndQueue+0x74>)
 800dd50:	4a11      	ldr	r2, [pc, #68]	; (800dd98 <prvCheckForValidListAndQueue+0x78>)
 800dd52:	2110      	movs	r1, #16
 800dd54:	200a      	movs	r0, #10
 800dd56:	f7fd fe2f 	bl	800b9b8 <xQueueGenericCreateStatic>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	4a08      	ldr	r2, [pc, #32]	; (800dd80 <prvCheckForValidListAndQueue+0x60>)
 800dd5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dd60:	4b07      	ldr	r3, [pc, #28]	; (800dd80 <prvCheckForValidListAndQueue+0x60>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d005      	beq.n	800dd74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dd68:	4b05      	ldr	r3, [pc, #20]	; (800dd80 <prvCheckForValidListAndQueue+0x60>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	490b      	ldr	r1, [pc, #44]	; (800dd9c <prvCheckForValidListAndQueue+0x7c>)
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7fe fbf2 	bl	800c558 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd74:	f000 f932 	bl	800dfdc <vPortExitCritical>
}
 800dd78:	bf00      	nop
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	20000da0 	.word	0x20000da0
 800dd84:	20000d70 	.word	0x20000d70
 800dd88:	20000d84 	.word	0x20000d84
 800dd8c:	20000d98 	.word	0x20000d98
 800dd90:	20000d9c 	.word	0x20000d9c
 800dd94:	20000e4c 	.word	0x20000e4c
 800dd98:	20000dac 	.word	0x20000dac
 800dd9c:	0800f1b0 	.word	0x0800f1b0

0800dda0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dda0:	b480      	push	{r7}
 800dda2:	b085      	sub	sp, #20
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	3b04      	subs	r3, #4
 800ddb0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ddb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	3b04      	subs	r3, #4
 800ddbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	f023 0201 	bic.w	r2, r3, #1
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	3b04      	subs	r3, #4
 800ddce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ddd0:	4a08      	ldr	r2, [pc, #32]	; (800ddf4 <pxPortInitialiseStack+0x54>)
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	3b14      	subs	r3, #20
 800ddda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dddc:	687a      	ldr	r2, [r7, #4]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	3b20      	subs	r3, #32
 800dde6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dde8:	68fb      	ldr	r3, [r7, #12]
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3714      	adds	r7, #20
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bc80      	pop	{r7}
 800ddf2:	4770      	bx	lr
 800ddf4:	0800ddf9 	.word	0x0800ddf9

0800ddf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b085      	sub	sp, #20
 800ddfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ddfe:	2300      	movs	r3, #0
 800de00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800de02:	4b12      	ldr	r3, [pc, #72]	; (800de4c <prvTaskExitError+0x54>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de0a:	d00a      	beq.n	800de22 <prvTaskExitError+0x2a>
	__asm volatile
 800de0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de10:	f383 8811 	msr	BASEPRI, r3
 800de14:	f3bf 8f6f 	isb	sy
 800de18:	f3bf 8f4f 	dsb	sy
 800de1c:	60fb      	str	r3, [r7, #12]
}
 800de1e:	bf00      	nop
 800de20:	e7fe      	b.n	800de20 <prvTaskExitError+0x28>
	__asm volatile
 800de22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de26:	f383 8811 	msr	BASEPRI, r3
 800de2a:	f3bf 8f6f 	isb	sy
 800de2e:	f3bf 8f4f 	dsb	sy
 800de32:	60bb      	str	r3, [r7, #8]
}
 800de34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800de36:	bf00      	nop
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d0fc      	beq.n	800de38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800de3e:	bf00      	nop
 800de40:	bf00      	nop
 800de42:	3714      	adds	r7, #20
 800de44:	46bd      	mov	sp, r7
 800de46:	bc80      	pop	{r7}
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop
 800de4c:	2000012c 	.word	0x2000012c

0800de50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800de50:	4b07      	ldr	r3, [pc, #28]	; (800de70 <pxCurrentTCBConst2>)
 800de52:	6819      	ldr	r1, [r3, #0]
 800de54:	6808      	ldr	r0, [r1, #0]
 800de56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800de5a:	f380 8809 	msr	PSP, r0
 800de5e:	f3bf 8f6f 	isb	sy
 800de62:	f04f 0000 	mov.w	r0, #0
 800de66:	f380 8811 	msr	BASEPRI, r0
 800de6a:	f04e 0e0d 	orr.w	lr, lr, #13
 800de6e:	4770      	bx	lr

0800de70 <pxCurrentTCBConst2>:
 800de70:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800de74:	bf00      	nop
 800de76:	bf00      	nop

0800de78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800de78:	4806      	ldr	r0, [pc, #24]	; (800de94 <prvPortStartFirstTask+0x1c>)
 800de7a:	6800      	ldr	r0, [r0, #0]
 800de7c:	6800      	ldr	r0, [r0, #0]
 800de7e:	f380 8808 	msr	MSP, r0
 800de82:	b662      	cpsie	i
 800de84:	b661      	cpsie	f
 800de86:	f3bf 8f4f 	dsb	sy
 800de8a:	f3bf 8f6f 	isb	sy
 800de8e:	df00      	svc	0
 800de90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800de92:	bf00      	nop
 800de94:	e000ed08 	.word	0xe000ed08

0800de98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800de9e:	4b32      	ldr	r3, [pc, #200]	; (800df68 <xPortStartScheduler+0xd0>)
 800dea0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	22ff      	movs	r2, #255	; 0xff
 800deae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800deb8:	78fb      	ldrb	r3, [r7, #3]
 800deba:	b2db      	uxtb	r3, r3
 800debc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dec0:	b2da      	uxtb	r2, r3
 800dec2:	4b2a      	ldr	r3, [pc, #168]	; (800df6c <xPortStartScheduler+0xd4>)
 800dec4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dec6:	4b2a      	ldr	r3, [pc, #168]	; (800df70 <xPortStartScheduler+0xd8>)
 800dec8:	2207      	movs	r2, #7
 800deca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800decc:	e009      	b.n	800dee2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800dece:	4b28      	ldr	r3, [pc, #160]	; (800df70 <xPortStartScheduler+0xd8>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	3b01      	subs	r3, #1
 800ded4:	4a26      	ldr	r2, [pc, #152]	; (800df70 <xPortStartScheduler+0xd8>)
 800ded6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ded8:	78fb      	ldrb	r3, [r7, #3]
 800deda:	b2db      	uxtb	r3, r3
 800dedc:	005b      	lsls	r3, r3, #1
 800dede:	b2db      	uxtb	r3, r3
 800dee0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dee2:	78fb      	ldrb	r3, [r7, #3]
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800deea:	2b80      	cmp	r3, #128	; 0x80
 800deec:	d0ef      	beq.n	800dece <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800deee:	4b20      	ldr	r3, [pc, #128]	; (800df70 <xPortStartScheduler+0xd8>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f1c3 0307 	rsb	r3, r3, #7
 800def6:	2b04      	cmp	r3, #4
 800def8:	d00a      	beq.n	800df10 <xPortStartScheduler+0x78>
	__asm volatile
 800defa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defe:	f383 8811 	msr	BASEPRI, r3
 800df02:	f3bf 8f6f 	isb	sy
 800df06:	f3bf 8f4f 	dsb	sy
 800df0a:	60bb      	str	r3, [r7, #8]
}
 800df0c:	bf00      	nop
 800df0e:	e7fe      	b.n	800df0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800df10:	4b17      	ldr	r3, [pc, #92]	; (800df70 <xPortStartScheduler+0xd8>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	021b      	lsls	r3, r3, #8
 800df16:	4a16      	ldr	r2, [pc, #88]	; (800df70 <xPortStartScheduler+0xd8>)
 800df18:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800df1a:	4b15      	ldr	r3, [pc, #84]	; (800df70 <xPortStartScheduler+0xd8>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800df22:	4a13      	ldr	r2, [pc, #76]	; (800df70 <xPortStartScheduler+0xd8>)
 800df24:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	b2da      	uxtb	r2, r3
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800df2e:	4b11      	ldr	r3, [pc, #68]	; (800df74 <xPortStartScheduler+0xdc>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4a10      	ldr	r2, [pc, #64]	; (800df74 <xPortStartScheduler+0xdc>)
 800df34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800df38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800df3a:	4b0e      	ldr	r3, [pc, #56]	; (800df74 <xPortStartScheduler+0xdc>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4a0d      	ldr	r2, [pc, #52]	; (800df74 <xPortStartScheduler+0xdc>)
 800df40:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800df44:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800df46:	f000 f8b9 	bl	800e0bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800df4a:	4b0b      	ldr	r3, [pc, #44]	; (800df78 <xPortStartScheduler+0xe0>)
 800df4c:	2200      	movs	r2, #0
 800df4e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800df50:	f7ff ff92 	bl	800de78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800df54:	f7fe ff84 	bl	800ce60 <vTaskSwitchContext>
	prvTaskExitError();
 800df58:	f7ff ff4e 	bl	800ddf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800df5c:	2300      	movs	r3, #0
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	e000e400 	.word	0xe000e400
 800df6c:	20000e9c 	.word	0x20000e9c
 800df70:	20000ea0 	.word	0x20000ea0
 800df74:	e000ed20 	.word	0xe000ed20
 800df78:	2000012c 	.word	0x2000012c

0800df7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800df7c:	b480      	push	{r7}
 800df7e:	b083      	sub	sp, #12
 800df80:	af00      	add	r7, sp, #0
	__asm volatile
 800df82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df86:	f383 8811 	msr	BASEPRI, r3
 800df8a:	f3bf 8f6f 	isb	sy
 800df8e:	f3bf 8f4f 	dsb	sy
 800df92:	607b      	str	r3, [r7, #4]
}
 800df94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800df96:	4b0f      	ldr	r3, [pc, #60]	; (800dfd4 <vPortEnterCritical+0x58>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	3301      	adds	r3, #1
 800df9c:	4a0d      	ldr	r2, [pc, #52]	; (800dfd4 <vPortEnterCritical+0x58>)
 800df9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dfa0:	4b0c      	ldr	r3, [pc, #48]	; (800dfd4 <vPortEnterCritical+0x58>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	2b01      	cmp	r3, #1
 800dfa6:	d10f      	bne.n	800dfc8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dfa8:	4b0b      	ldr	r3, [pc, #44]	; (800dfd8 <vPortEnterCritical+0x5c>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d00a      	beq.n	800dfc8 <vPortEnterCritical+0x4c>
	__asm volatile
 800dfb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb6:	f383 8811 	msr	BASEPRI, r3
 800dfba:	f3bf 8f6f 	isb	sy
 800dfbe:	f3bf 8f4f 	dsb	sy
 800dfc2:	603b      	str	r3, [r7, #0]
}
 800dfc4:	bf00      	nop
 800dfc6:	e7fe      	b.n	800dfc6 <vPortEnterCritical+0x4a>
	}
}
 800dfc8:	bf00      	nop
 800dfca:	370c      	adds	r7, #12
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bc80      	pop	{r7}
 800dfd0:	4770      	bx	lr
 800dfd2:	bf00      	nop
 800dfd4:	2000012c 	.word	0x2000012c
 800dfd8:	e000ed04 	.word	0xe000ed04

0800dfdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b083      	sub	sp, #12
 800dfe0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dfe2:	4b11      	ldr	r3, [pc, #68]	; (800e028 <vPortExitCritical+0x4c>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d10a      	bne.n	800e000 <vPortExitCritical+0x24>
	__asm volatile
 800dfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfee:	f383 8811 	msr	BASEPRI, r3
 800dff2:	f3bf 8f6f 	isb	sy
 800dff6:	f3bf 8f4f 	dsb	sy
 800dffa:	607b      	str	r3, [r7, #4]
}
 800dffc:	bf00      	nop
 800dffe:	e7fe      	b.n	800dffe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e000:	4b09      	ldr	r3, [pc, #36]	; (800e028 <vPortExitCritical+0x4c>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	3b01      	subs	r3, #1
 800e006:	4a08      	ldr	r2, [pc, #32]	; (800e028 <vPortExitCritical+0x4c>)
 800e008:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e00a:	4b07      	ldr	r3, [pc, #28]	; (800e028 <vPortExitCritical+0x4c>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d105      	bne.n	800e01e <vPortExitCritical+0x42>
 800e012:	2300      	movs	r3, #0
 800e014:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	f383 8811 	msr	BASEPRI, r3
}
 800e01c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e01e:	bf00      	nop
 800e020:	370c      	adds	r7, #12
 800e022:	46bd      	mov	sp, r7
 800e024:	bc80      	pop	{r7}
 800e026:	4770      	bx	lr
 800e028:	2000012c 	.word	0x2000012c
 800e02c:	00000000 	.word	0x00000000

0800e030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e030:	f3ef 8009 	mrs	r0, PSP
 800e034:	f3bf 8f6f 	isb	sy
 800e038:	4b0d      	ldr	r3, [pc, #52]	; (800e070 <pxCurrentTCBConst>)
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e040:	6010      	str	r0, [r2, #0]
 800e042:	e92d 4008 	stmdb	sp!, {r3, lr}
 800e046:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e04a:	f380 8811 	msr	BASEPRI, r0
 800e04e:	f7fe ff07 	bl	800ce60 <vTaskSwitchContext>
 800e052:	f04f 0000 	mov.w	r0, #0
 800e056:	f380 8811 	msr	BASEPRI, r0
 800e05a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e05e:	6819      	ldr	r1, [r3, #0]
 800e060:	6808      	ldr	r0, [r1, #0]
 800e062:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e066:	f380 8809 	msr	PSP, r0
 800e06a:	f3bf 8f6f 	isb	sy
 800e06e:	4770      	bx	lr

0800e070 <pxCurrentTCBConst>:
 800e070:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e074:	bf00      	nop
 800e076:	bf00      	nop

0800e078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
	__asm volatile
 800e07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e082:	f383 8811 	msr	BASEPRI, r3
 800e086:	f3bf 8f6f 	isb	sy
 800e08a:	f3bf 8f4f 	dsb	sy
 800e08e:	607b      	str	r3, [r7, #4]
}
 800e090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e092:	f7fe fe27 	bl	800cce4 <xTaskIncrementTick>
 800e096:	4603      	mov	r3, r0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d003      	beq.n	800e0a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e09c:	4b06      	ldr	r3, [pc, #24]	; (800e0b8 <SysTick_Handler+0x40>)
 800e09e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0a2:	601a      	str	r2, [r3, #0]
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	f383 8811 	msr	BASEPRI, r3
}
 800e0ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e0b0:	bf00      	nop
 800e0b2:	3708      	adds	r7, #8
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	e000ed04 	.word	0xe000ed04

0800e0bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e0bc:	b480      	push	{r7}
 800e0be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e0c0:	4b0a      	ldr	r3, [pc, #40]	; (800e0ec <vPortSetupTimerInterrupt+0x30>)
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e0c6:	4b0a      	ldr	r3, [pc, #40]	; (800e0f0 <vPortSetupTimerInterrupt+0x34>)
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e0cc:	4b09      	ldr	r3, [pc, #36]	; (800e0f4 <vPortSetupTimerInterrupt+0x38>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a09      	ldr	r2, [pc, #36]	; (800e0f8 <vPortSetupTimerInterrupt+0x3c>)
 800e0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e0d6:	099b      	lsrs	r3, r3, #6
 800e0d8:	4a08      	ldr	r2, [pc, #32]	; (800e0fc <vPortSetupTimerInterrupt+0x40>)
 800e0da:	3b01      	subs	r3, #1
 800e0dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e0de:	4b03      	ldr	r3, [pc, #12]	; (800e0ec <vPortSetupTimerInterrupt+0x30>)
 800e0e0:	2207      	movs	r2, #7
 800e0e2:	601a      	str	r2, [r3, #0]
}
 800e0e4:	bf00      	nop
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bc80      	pop	{r7}
 800e0ea:	4770      	bx	lr
 800e0ec:	e000e010 	.word	0xe000e010
 800e0f0:	e000e018 	.word	0xe000e018
 800e0f4:	20000010 	.word	0x20000010
 800e0f8:	10624dd3 	.word	0x10624dd3
 800e0fc:	e000e014 	.word	0xe000e014

0800e100 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e100:	b480      	push	{r7}
 800e102:	b085      	sub	sp, #20
 800e104:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e106:	f3ef 8305 	mrs	r3, IPSR
 800e10a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2b0f      	cmp	r3, #15
 800e110:	d914      	bls.n	800e13c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e112:	4a16      	ldr	r2, [pc, #88]	; (800e16c <vPortValidateInterruptPriority+0x6c>)
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	4413      	add	r3, r2
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e11c:	4b14      	ldr	r3, [pc, #80]	; (800e170 <vPortValidateInterruptPriority+0x70>)
 800e11e:	781b      	ldrb	r3, [r3, #0]
 800e120:	7afa      	ldrb	r2, [r7, #11]
 800e122:	429a      	cmp	r2, r3
 800e124:	d20a      	bcs.n	800e13c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e12a:	f383 8811 	msr	BASEPRI, r3
 800e12e:	f3bf 8f6f 	isb	sy
 800e132:	f3bf 8f4f 	dsb	sy
 800e136:	607b      	str	r3, [r7, #4]
}
 800e138:	bf00      	nop
 800e13a:	e7fe      	b.n	800e13a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e13c:	4b0d      	ldr	r3, [pc, #52]	; (800e174 <vPortValidateInterruptPriority+0x74>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e144:	4b0c      	ldr	r3, [pc, #48]	; (800e178 <vPortValidateInterruptPriority+0x78>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	429a      	cmp	r2, r3
 800e14a:	d90a      	bls.n	800e162 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e150:	f383 8811 	msr	BASEPRI, r3
 800e154:	f3bf 8f6f 	isb	sy
 800e158:	f3bf 8f4f 	dsb	sy
 800e15c:	603b      	str	r3, [r7, #0]
}
 800e15e:	bf00      	nop
 800e160:	e7fe      	b.n	800e160 <vPortValidateInterruptPriority+0x60>
	}
 800e162:	bf00      	nop
 800e164:	3714      	adds	r7, #20
 800e166:	46bd      	mov	sp, r7
 800e168:	bc80      	pop	{r7}
 800e16a:	4770      	bx	lr
 800e16c:	e000e3f0 	.word	0xe000e3f0
 800e170:	20000e9c 	.word	0x20000e9c
 800e174:	e000ed0c 	.word	0xe000ed0c
 800e178:	20000ea0 	.word	0x20000ea0

0800e17c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b08a      	sub	sp, #40	; 0x28
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e184:	2300      	movs	r3, #0
 800e186:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e188:	f7fe fcf2 	bl	800cb70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e18c:	4b58      	ldr	r3, [pc, #352]	; (800e2f0 <pvPortMalloc+0x174>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d101      	bne.n	800e198 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e194:	f000 f910 	bl	800e3b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e198:	4b56      	ldr	r3, [pc, #344]	; (800e2f4 <pvPortMalloc+0x178>)
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	4013      	ands	r3, r2
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	f040 808e 	bne.w	800e2c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d01d      	beq.n	800e1e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e1ac:	2208      	movs	r2, #8
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f003 0307 	and.w	r3, r3, #7
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d014      	beq.n	800e1e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f023 0307 	bic.w	r3, r3, #7
 800e1c4:	3308      	adds	r3, #8
 800e1c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f003 0307 	and.w	r3, r3, #7
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d00a      	beq.n	800e1e8 <pvPortMalloc+0x6c>
	__asm volatile
 800e1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d6:	f383 8811 	msr	BASEPRI, r3
 800e1da:	f3bf 8f6f 	isb	sy
 800e1de:	f3bf 8f4f 	dsb	sy
 800e1e2:	617b      	str	r3, [r7, #20]
}
 800e1e4:	bf00      	nop
 800e1e6:	e7fe      	b.n	800e1e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d069      	beq.n	800e2c2 <pvPortMalloc+0x146>
 800e1ee:	4b42      	ldr	r3, [pc, #264]	; (800e2f8 <pvPortMalloc+0x17c>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	687a      	ldr	r2, [r7, #4]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d864      	bhi.n	800e2c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e1f8:	4b40      	ldr	r3, [pc, #256]	; (800e2fc <pvPortMalloc+0x180>)
 800e1fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e1fc:	4b3f      	ldr	r3, [pc, #252]	; (800e2fc <pvPortMalloc+0x180>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e202:	e004      	b.n	800e20e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e206:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e210:	685b      	ldr	r3, [r3, #4]
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	429a      	cmp	r2, r3
 800e216:	d903      	bls.n	800e220 <pvPortMalloc+0xa4>
 800e218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d1f1      	bne.n	800e204 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e220:	4b33      	ldr	r3, [pc, #204]	; (800e2f0 <pvPortMalloc+0x174>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e226:	429a      	cmp	r2, r3
 800e228:	d04b      	beq.n	800e2c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e22a:	6a3b      	ldr	r3, [r7, #32]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2208      	movs	r2, #8
 800e230:	4413      	add	r3, r2
 800e232:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e236:	681a      	ldr	r2, [r3, #0]
 800e238:	6a3b      	ldr	r3, [r7, #32]
 800e23a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23e:	685a      	ldr	r2, [r3, #4]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	1ad2      	subs	r2, r2, r3
 800e244:	2308      	movs	r3, #8
 800e246:	005b      	lsls	r3, r3, #1
 800e248:	429a      	cmp	r2, r3
 800e24a:	d91f      	bls.n	800e28c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e24c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	4413      	add	r3, r2
 800e252:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e254:	69bb      	ldr	r3, [r7, #24]
 800e256:	f003 0307 	and.w	r3, r3, #7
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d00a      	beq.n	800e274 <pvPortMalloc+0xf8>
	__asm volatile
 800e25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e262:	f383 8811 	msr	BASEPRI, r3
 800e266:	f3bf 8f6f 	isb	sy
 800e26a:	f3bf 8f4f 	dsb	sy
 800e26e:	613b      	str	r3, [r7, #16]
}
 800e270:	bf00      	nop
 800e272:	e7fe      	b.n	800e272 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e276:	685a      	ldr	r2, [r3, #4]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	1ad2      	subs	r2, r2, r3
 800e27c:	69bb      	ldr	r3, [r7, #24]
 800e27e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e286:	69b8      	ldr	r0, [r7, #24]
 800e288:	f000 f8f8 	bl	800e47c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e28c:	4b1a      	ldr	r3, [pc, #104]	; (800e2f8 <pvPortMalloc+0x17c>)
 800e28e:	681a      	ldr	r2, [r3, #0]
 800e290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	1ad3      	subs	r3, r2, r3
 800e296:	4a18      	ldr	r2, [pc, #96]	; (800e2f8 <pvPortMalloc+0x17c>)
 800e298:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e29a:	4b17      	ldr	r3, [pc, #92]	; (800e2f8 <pvPortMalloc+0x17c>)
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	4b18      	ldr	r3, [pc, #96]	; (800e300 <pvPortMalloc+0x184>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d203      	bcs.n	800e2ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e2a6:	4b14      	ldr	r3, [pc, #80]	; (800e2f8 <pvPortMalloc+0x17c>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4a15      	ldr	r2, [pc, #84]	; (800e300 <pvPortMalloc+0x184>)
 800e2ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b0:	685a      	ldr	r2, [r3, #4]
 800e2b2:	4b10      	ldr	r3, [pc, #64]	; (800e2f4 <pvPortMalloc+0x178>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	431a      	orrs	r2, r3
 800e2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2be:	2200      	movs	r2, #0
 800e2c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e2c2:	f7fe fc63 	bl	800cb8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2c6:	69fb      	ldr	r3, [r7, #28]
 800e2c8:	f003 0307 	and.w	r3, r3, #7
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d00a      	beq.n	800e2e6 <pvPortMalloc+0x16a>
	__asm volatile
 800e2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d4:	f383 8811 	msr	BASEPRI, r3
 800e2d8:	f3bf 8f6f 	isb	sy
 800e2dc:	f3bf 8f4f 	dsb	sy
 800e2e0:	60fb      	str	r3, [r7, #12]
}
 800e2e2:	bf00      	nop
 800e2e4:	e7fe      	b.n	800e2e4 <pvPortMalloc+0x168>
	return pvReturn;
 800e2e6:	69fb      	ldr	r3, [r7, #28]
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3728      	adds	r7, #40	; 0x28
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	20002248 	.word	0x20002248
 800e2f4:	20002254 	.word	0x20002254
 800e2f8:	2000224c 	.word	0x2000224c
 800e2fc:	20002240 	.word	0x20002240
 800e300:	20002250 	.word	0x20002250

0800e304 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b086      	sub	sp, #24
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d048      	beq.n	800e3a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e316:	2308      	movs	r3, #8
 800e318:	425b      	negs	r3, r3
 800e31a:	697a      	ldr	r2, [r7, #20]
 800e31c:	4413      	add	r3, r2
 800e31e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	685a      	ldr	r2, [r3, #4]
 800e328:	4b21      	ldr	r3, [pc, #132]	; (800e3b0 <vPortFree+0xac>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4013      	ands	r3, r2
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d10a      	bne.n	800e348 <vPortFree+0x44>
	__asm volatile
 800e332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e336:	f383 8811 	msr	BASEPRI, r3
 800e33a:	f3bf 8f6f 	isb	sy
 800e33e:	f3bf 8f4f 	dsb	sy
 800e342:	60fb      	str	r3, [r7, #12]
}
 800e344:	bf00      	nop
 800e346:	e7fe      	b.n	800e346 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d00a      	beq.n	800e366 <vPortFree+0x62>
	__asm volatile
 800e350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e354:	f383 8811 	msr	BASEPRI, r3
 800e358:	f3bf 8f6f 	isb	sy
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	60bb      	str	r3, [r7, #8]
}
 800e362:	bf00      	nop
 800e364:	e7fe      	b.n	800e364 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	685a      	ldr	r2, [r3, #4]
 800e36a:	4b11      	ldr	r3, [pc, #68]	; (800e3b0 <vPortFree+0xac>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	4013      	ands	r3, r2
 800e370:	2b00      	cmp	r3, #0
 800e372:	d019      	beq.n	800e3a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d115      	bne.n	800e3a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	685a      	ldr	r2, [r3, #4]
 800e380:	4b0b      	ldr	r3, [pc, #44]	; (800e3b0 <vPortFree+0xac>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	43db      	mvns	r3, r3
 800e386:	401a      	ands	r2, r3
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e38c:	f7fe fbf0 	bl	800cb70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	685a      	ldr	r2, [r3, #4]
 800e394:	4b07      	ldr	r3, [pc, #28]	; (800e3b4 <vPortFree+0xb0>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	4413      	add	r3, r2
 800e39a:	4a06      	ldr	r2, [pc, #24]	; (800e3b4 <vPortFree+0xb0>)
 800e39c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e39e:	6938      	ldr	r0, [r7, #16]
 800e3a0:	f000 f86c 	bl	800e47c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e3a4:	f7fe fbf2 	bl	800cb8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e3a8:	bf00      	nop
 800e3aa:	3718      	adds	r7, #24
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	20002254 	.word	0x20002254
 800e3b4:	2000224c 	.word	0x2000224c

0800e3b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e3be:	f241 339c 	movw	r3, #5020	; 0x139c
 800e3c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e3c4:	4b27      	ldr	r3, [pc, #156]	; (800e464 <prvHeapInit+0xac>)
 800e3c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f003 0307 	and.w	r3, r3, #7
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d00c      	beq.n	800e3ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	3307      	adds	r3, #7
 800e3d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	f023 0307 	bic.w	r3, r3, #7
 800e3de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e3e0:	68ba      	ldr	r2, [r7, #8]
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	1ad3      	subs	r3, r2, r3
 800e3e6:	4a1f      	ldr	r2, [pc, #124]	; (800e464 <prvHeapInit+0xac>)
 800e3e8:	4413      	add	r3, r2
 800e3ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e3f0:	4a1d      	ldr	r2, [pc, #116]	; (800e468 <prvHeapInit+0xb0>)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e3f6:	4b1c      	ldr	r3, [pc, #112]	; (800e468 <prvHeapInit+0xb0>)
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	68ba      	ldr	r2, [r7, #8]
 800e400:	4413      	add	r3, r2
 800e402:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e404:	2208      	movs	r2, #8
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	1a9b      	subs	r3, r3, r2
 800e40a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f023 0307 	bic.w	r3, r3, #7
 800e412:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	4a15      	ldr	r2, [pc, #84]	; (800e46c <prvHeapInit+0xb4>)
 800e418:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e41a:	4b14      	ldr	r3, [pc, #80]	; (800e46c <prvHeapInit+0xb4>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	2200      	movs	r2, #0
 800e420:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e422:	4b12      	ldr	r3, [pc, #72]	; (800e46c <prvHeapInit+0xb4>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	2200      	movs	r2, #0
 800e428:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	68fa      	ldr	r2, [r7, #12]
 800e432:	1ad2      	subs	r2, r2, r3
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e438:	4b0c      	ldr	r3, [pc, #48]	; (800e46c <prvHeapInit+0xb4>)
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	4a0a      	ldr	r2, [pc, #40]	; (800e470 <prvHeapInit+0xb8>)
 800e446:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	685b      	ldr	r3, [r3, #4]
 800e44c:	4a09      	ldr	r2, [pc, #36]	; (800e474 <prvHeapInit+0xbc>)
 800e44e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e450:	4b09      	ldr	r3, [pc, #36]	; (800e478 <prvHeapInit+0xc0>)
 800e452:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e456:	601a      	str	r2, [r3, #0]
}
 800e458:	bf00      	nop
 800e45a:	3714      	adds	r7, #20
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bc80      	pop	{r7}
 800e460:	4770      	bx	lr
 800e462:	bf00      	nop
 800e464:	20000ea4 	.word	0x20000ea4
 800e468:	20002240 	.word	0x20002240
 800e46c:	20002248 	.word	0x20002248
 800e470:	20002250 	.word	0x20002250
 800e474:	2000224c 	.word	0x2000224c
 800e478:	20002254 	.word	0x20002254

0800e47c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e47c:	b480      	push	{r7}
 800e47e:	b085      	sub	sp, #20
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e484:	4b27      	ldr	r3, [pc, #156]	; (800e524 <prvInsertBlockIntoFreeList+0xa8>)
 800e486:	60fb      	str	r3, [r7, #12]
 800e488:	e002      	b.n	800e490 <prvInsertBlockIntoFreeList+0x14>
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	60fb      	str	r3, [r7, #12]
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	429a      	cmp	r2, r3
 800e498:	d8f7      	bhi.n	800e48a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	68ba      	ldr	r2, [r7, #8]
 800e4a4:	4413      	add	r3, r2
 800e4a6:	687a      	ldr	r2, [r7, #4]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d108      	bne.n	800e4be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	685a      	ldr	r2, [r3, #4]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	441a      	add	r2, r3
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	68ba      	ldr	r2, [r7, #8]
 800e4c8:	441a      	add	r2, r3
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d118      	bne.n	800e504 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	4b14      	ldr	r3, [pc, #80]	; (800e528 <prvInsertBlockIntoFreeList+0xac>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d00d      	beq.n	800e4fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	685a      	ldr	r2, [r3, #4]
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	441a      	add	r2, r3
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	601a      	str	r2, [r3, #0]
 800e4f8:	e008      	b.n	800e50c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e4fa:	4b0b      	ldr	r3, [pc, #44]	; (800e528 <prvInsertBlockIntoFreeList+0xac>)
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	601a      	str	r2, [r3, #0]
 800e502:	e003      	b.n	800e50c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681a      	ldr	r2, [r3, #0]
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e50c:	68fa      	ldr	r2, [r7, #12]
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	429a      	cmp	r2, r3
 800e512:	d002      	beq.n	800e51a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	687a      	ldr	r2, [r7, #4]
 800e518:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e51a:	bf00      	nop
 800e51c:	3714      	adds	r7, #20
 800e51e:	46bd      	mov	sp, r7
 800e520:	bc80      	pop	{r7}
 800e522:	4770      	bx	lr
 800e524:	20002240 	.word	0x20002240
 800e528:	20002248 	.word	0x20002248

0800e52c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e530:	2200      	movs	r2, #0
 800e532:	4912      	ldr	r1, [pc, #72]	; (800e57c <MX_USB_DEVICE_Init+0x50>)
 800e534:	4812      	ldr	r0, [pc, #72]	; (800e580 <MX_USB_DEVICE_Init+0x54>)
 800e536:	f7fb fdfc 	bl	800a132 <USBD_Init>
 800e53a:	4603      	mov	r3, r0
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d001      	beq.n	800e544 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e540:	f7f2 fec0 	bl	80012c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e544:	490f      	ldr	r1, [pc, #60]	; (800e584 <MX_USB_DEVICE_Init+0x58>)
 800e546:	480e      	ldr	r0, [pc, #56]	; (800e580 <MX_USB_DEVICE_Init+0x54>)
 800e548:	f7fb fe1e 	bl	800a188 <USBD_RegisterClass>
 800e54c:	4603      	mov	r3, r0
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d001      	beq.n	800e556 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e552:	f7f2 feb7 	bl	80012c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e556:	490c      	ldr	r1, [pc, #48]	; (800e588 <MX_USB_DEVICE_Init+0x5c>)
 800e558:	4809      	ldr	r0, [pc, #36]	; (800e580 <MX_USB_DEVICE_Init+0x54>)
 800e55a:	f7fb fd4f 	bl	8009ffc <USBD_CDC_RegisterInterface>
 800e55e:	4603      	mov	r3, r0
 800e560:	2b00      	cmp	r3, #0
 800e562:	d001      	beq.n	800e568 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e564:	f7f2 feae 	bl	80012c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e568:	4805      	ldr	r0, [pc, #20]	; (800e580 <MX_USB_DEVICE_Init+0x54>)
 800e56a:	f7fb fe26 	bl	800a1ba <USBD_Start>
 800e56e:	4603      	mov	r3, r0
 800e570:	2b00      	cmp	r3, #0
 800e572:	d001      	beq.n	800e578 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e574:	f7f2 fea6 	bl	80012c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e578:	bf00      	nop
 800e57a:	bd80      	pop	{r7, pc}
 800e57c:	20000140 	.word	0x20000140
 800e580:	200026d4 	.word	0x200026d4
 800e584:	20000028 	.word	0x20000028
 800e588:	20000130 	.word	0x20000130

0800e58c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e590:	2200      	movs	r2, #0
 800e592:	4905      	ldr	r1, [pc, #20]	; (800e5a8 <CDC_Init_FS+0x1c>)
 800e594:	4805      	ldr	r0, [pc, #20]	; (800e5ac <CDC_Init_FS+0x20>)
 800e596:	f7fb fd47 	bl	800a028 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e59a:	4905      	ldr	r1, [pc, #20]	; (800e5b0 <CDC_Init_FS+0x24>)
 800e59c:	4803      	ldr	r0, [pc, #12]	; (800e5ac <CDC_Init_FS+0x20>)
 800e59e:	f7fb fd5c 	bl	800a05a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e5a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	20002d80 	.word	0x20002d80
 800e5ac:	200026d4 	.word	0x200026d4
 800e5b0:	20002998 	.word	0x20002998

0800e5b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e5b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bc80      	pop	{r7}
 800e5c0:	4770      	bx	lr
	...

0800e5c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	6039      	str	r1, [r7, #0]
 800e5ce:	71fb      	strb	r3, [r7, #7]
 800e5d0:	4613      	mov	r3, r2
 800e5d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e5d4:	79fb      	ldrb	r3, [r7, #7]
 800e5d6:	2b23      	cmp	r3, #35	; 0x23
 800e5d8:	d84a      	bhi.n	800e670 <CDC_Control_FS+0xac>
 800e5da:	a201      	add	r2, pc, #4	; (adr r2, 800e5e0 <CDC_Control_FS+0x1c>)
 800e5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5e0:	0800e671 	.word	0x0800e671
 800e5e4:	0800e671 	.word	0x0800e671
 800e5e8:	0800e671 	.word	0x0800e671
 800e5ec:	0800e671 	.word	0x0800e671
 800e5f0:	0800e671 	.word	0x0800e671
 800e5f4:	0800e671 	.word	0x0800e671
 800e5f8:	0800e671 	.word	0x0800e671
 800e5fc:	0800e671 	.word	0x0800e671
 800e600:	0800e671 	.word	0x0800e671
 800e604:	0800e671 	.word	0x0800e671
 800e608:	0800e671 	.word	0x0800e671
 800e60c:	0800e671 	.word	0x0800e671
 800e610:	0800e671 	.word	0x0800e671
 800e614:	0800e671 	.word	0x0800e671
 800e618:	0800e671 	.word	0x0800e671
 800e61c:	0800e671 	.word	0x0800e671
 800e620:	0800e671 	.word	0x0800e671
 800e624:	0800e671 	.word	0x0800e671
 800e628:	0800e671 	.word	0x0800e671
 800e62c:	0800e671 	.word	0x0800e671
 800e630:	0800e671 	.word	0x0800e671
 800e634:	0800e671 	.word	0x0800e671
 800e638:	0800e671 	.word	0x0800e671
 800e63c:	0800e671 	.word	0x0800e671
 800e640:	0800e671 	.word	0x0800e671
 800e644:	0800e671 	.word	0x0800e671
 800e648:	0800e671 	.word	0x0800e671
 800e64c:	0800e671 	.word	0x0800e671
 800e650:	0800e671 	.word	0x0800e671
 800e654:	0800e671 	.word	0x0800e671
 800e658:	0800e671 	.word	0x0800e671
 800e65c:	0800e671 	.word	0x0800e671
 800e660:	0800e671 	.word	0x0800e671
 800e664:	0800e671 	.word	0x0800e671
 800e668:	0800e671 	.word	0x0800e671
 800e66c:	0800e671 	.word	0x0800e671
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e670:	bf00      	nop
  }

  return (USBD_OK);
 800e672:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e674:	4618      	mov	r0, r3
 800e676:	370c      	adds	r7, #12
 800e678:	46bd      	mov	sp, r7
 800e67a:	bc80      	pop	{r7}
 800e67c:	4770      	bx	lr
 800e67e:	bf00      	nop

0800e680 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b084      	sub	sp, #16
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 800e68a:	2300      	movs	r3, #0
 800e68c:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < (*Len); i++)
 800e68e:	2300      	movs	r3, #0
 800e690:	60fb      	str	r3, [r7, #12]
 800e692:	e00c      	b.n	800e6ae <CDC_Receive_FS+0x2e>
	{
		xQueueSendToBackFromISR(qUSB_rcvQueue, &Buf[i], &xHigherPriorityTaskWoken );
 800e694:	4b14      	ldr	r3, [pc, #80]	; (800e6e8 <CDC_Receive_FS+0x68>)
 800e696:	6818      	ldr	r0, [r3, #0]
 800e698:	687a      	ldr	r2, [r7, #4]
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	18d1      	adds	r1, r2, r3
 800e69e:	f107 0208 	add.w	r2, r7, #8
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	f7fd fbac 	bl	800be00 <xQueueGenericSendFromISR>
	for (uint32_t i = 0; i < (*Len); i++)
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	60fb      	str	r3, [r7, #12]
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	68fa      	ldr	r2, [r7, #12]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d3ed      	bcc.n	800e694 <CDC_Receive_FS+0x14>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e6b8:	6879      	ldr	r1, [r7, #4]
 800e6ba:	480c      	ldr	r0, [pc, #48]	; (800e6ec <CDC_Receive_FS+0x6c>)
 800e6bc:	f7fb fccd 	bl	800a05a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e6c0:	480a      	ldr	r0, [pc, #40]	; (800e6ec <CDC_Receive_FS+0x6c>)
 800e6c2:	f7fb fd0c 	bl	800a0de <USBD_CDC_ReceivePacket>
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d007      	beq.n	800e6dc <CDC_Receive_FS+0x5c>
 800e6cc:	4b08      	ldr	r3, [pc, #32]	; (800e6f0 <CDC_Receive_FS+0x70>)
 800e6ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6d2:	601a      	str	r2, [r3, #0]
 800e6d4:	f3bf 8f4f 	dsb	sy
 800e6d8:	f3bf 8f6f 	isb	sy
  return (USBD_OK);
 800e6dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3710      	adds	r7, #16
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	20002494 	.word	0x20002494
 800e6ec:	200026d4 	.word	0x200026d4
 800e6f0:	e000ed04 	.word	0xe000ed04

0800e6f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e700:	2300      	movs	r3, #0
 800e702:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e704:	4b0d      	ldr	r3, [pc, #52]	; (800e73c <CDC_Transmit_FS+0x48>)
 800e706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e70a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e712:	2b00      	cmp	r3, #0
 800e714:	d001      	beq.n	800e71a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e716:	2301      	movs	r3, #1
 800e718:	e00b      	b.n	800e732 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e71a:	887b      	ldrh	r3, [r7, #2]
 800e71c:	461a      	mov	r2, r3
 800e71e:	6879      	ldr	r1, [r7, #4]
 800e720:	4806      	ldr	r0, [pc, #24]	; (800e73c <CDC_Transmit_FS+0x48>)
 800e722:	f7fb fc81 	bl	800a028 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e726:	4805      	ldr	r0, [pc, #20]	; (800e73c <CDC_Transmit_FS+0x48>)
 800e728:	f7fb fcaa 	bl	800a080 <USBD_CDC_TransmitPacket>
 800e72c:	4603      	mov	r3, r0
 800e72e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e730:	7bfb      	ldrb	r3, [r7, #15]
}
 800e732:	4618      	mov	r0, r3
 800e734:	3710      	adds	r7, #16
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
 800e73a:	bf00      	nop
 800e73c:	200026d4 	.word	0x200026d4

0800e740 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e740:	b480      	push	{r7}
 800e742:	b083      	sub	sp, #12
 800e744:	af00      	add	r7, sp, #0
 800e746:	4603      	mov	r3, r0
 800e748:	6039      	str	r1, [r7, #0]
 800e74a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	2212      	movs	r2, #18
 800e750:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e752:	4b03      	ldr	r3, [pc, #12]	; (800e760 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e754:	4618      	mov	r0, r3
 800e756:	370c      	adds	r7, #12
 800e758:	46bd      	mov	sp, r7
 800e75a:	bc80      	pop	{r7}
 800e75c:	4770      	bx	lr
 800e75e:	bf00      	nop
 800e760:	2000015c 	.word	0x2000015c

0800e764 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e764:	b480      	push	{r7}
 800e766:	b083      	sub	sp, #12
 800e768:	af00      	add	r7, sp, #0
 800e76a:	4603      	mov	r3, r0
 800e76c:	6039      	str	r1, [r7, #0]
 800e76e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	2204      	movs	r2, #4
 800e774:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e776:	4b03      	ldr	r3, [pc, #12]	; (800e784 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e778:	4618      	mov	r0, r3
 800e77a:	370c      	adds	r7, #12
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bc80      	pop	{r7}
 800e780:	4770      	bx	lr
 800e782:	bf00      	nop
 800e784:	20000170 	.word	0x20000170

0800e788 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	4603      	mov	r3, r0
 800e790:	6039      	str	r1, [r7, #0]
 800e792:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e794:	79fb      	ldrb	r3, [r7, #7]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d105      	bne.n	800e7a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e79a:	683a      	ldr	r2, [r7, #0]
 800e79c:	4907      	ldr	r1, [pc, #28]	; (800e7bc <USBD_FS_ProductStrDescriptor+0x34>)
 800e79e:	4808      	ldr	r0, [pc, #32]	; (800e7c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e7a0:	f7fc fc84 	bl	800b0ac <USBD_GetString>
 800e7a4:	e004      	b.n	800e7b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e7a6:	683a      	ldr	r2, [r7, #0]
 800e7a8:	4904      	ldr	r1, [pc, #16]	; (800e7bc <USBD_FS_ProductStrDescriptor+0x34>)
 800e7aa:	4805      	ldr	r0, [pc, #20]	; (800e7c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e7ac:	f7fc fc7e 	bl	800b0ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800e7b0:	4b02      	ldr	r3, [pc, #8]	; (800e7bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3708      	adds	r7, #8
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}
 800e7ba:	bf00      	nop
 800e7bc:	20003168 	.word	0x20003168
 800e7c0:	0800f1b8 	.word	0x0800f1b8

0800e7c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	6039      	str	r1, [r7, #0]
 800e7ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e7d0:	683a      	ldr	r2, [r7, #0]
 800e7d2:	4904      	ldr	r1, [pc, #16]	; (800e7e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e7d4:	4804      	ldr	r0, [pc, #16]	; (800e7e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e7d6:	f7fc fc69 	bl	800b0ac <USBD_GetString>
  return USBD_StrDesc;
 800e7da:	4b02      	ldr	r3, [pc, #8]	; (800e7e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3708      	adds	r7, #8
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	20003168 	.word	0x20003168
 800e7e8:	0800f1c4 	.word	0x0800f1c4

0800e7ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b082      	sub	sp, #8
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	6039      	str	r1, [r7, #0]
 800e7f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	221a      	movs	r2, #26
 800e7fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e7fe:	f000 f843 	bl	800e888 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e802:	4b02      	ldr	r3, [pc, #8]	; (800e80c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e804:	4618      	mov	r0, r3
 800e806:	3708      	adds	r7, #8
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	20000174 	.word	0x20000174

0800e810 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
 800e816:	4603      	mov	r3, r0
 800e818:	6039      	str	r1, [r7, #0]
 800e81a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e81c:	79fb      	ldrb	r3, [r7, #7]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d105      	bne.n	800e82e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e822:	683a      	ldr	r2, [r7, #0]
 800e824:	4907      	ldr	r1, [pc, #28]	; (800e844 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e826:	4808      	ldr	r0, [pc, #32]	; (800e848 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e828:	f7fc fc40 	bl	800b0ac <USBD_GetString>
 800e82c:	e004      	b.n	800e838 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e82e:	683a      	ldr	r2, [r7, #0]
 800e830:	4904      	ldr	r1, [pc, #16]	; (800e844 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e832:	4805      	ldr	r0, [pc, #20]	; (800e848 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e834:	f7fc fc3a 	bl	800b0ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800e838:	4b02      	ldr	r3, [pc, #8]	; (800e844 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3708      	adds	r7, #8
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
 800e842:	bf00      	nop
 800e844:	20003168 	.word	0x20003168
 800e848:	0800f1d8 	.word	0x0800f1d8

0800e84c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
 800e852:	4603      	mov	r3, r0
 800e854:	6039      	str	r1, [r7, #0]
 800e856:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e858:	79fb      	ldrb	r3, [r7, #7]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d105      	bne.n	800e86a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e85e:	683a      	ldr	r2, [r7, #0]
 800e860:	4907      	ldr	r1, [pc, #28]	; (800e880 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e862:	4808      	ldr	r0, [pc, #32]	; (800e884 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e864:	f7fc fc22 	bl	800b0ac <USBD_GetString>
 800e868:	e004      	b.n	800e874 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e86a:	683a      	ldr	r2, [r7, #0]
 800e86c:	4904      	ldr	r1, [pc, #16]	; (800e880 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e86e:	4805      	ldr	r0, [pc, #20]	; (800e884 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e870:	f7fc fc1c 	bl	800b0ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800e874:	4b02      	ldr	r3, [pc, #8]	; (800e880 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e876:	4618      	mov	r0, r3
 800e878:	3708      	adds	r7, #8
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	20003168 	.word	0x20003168
 800e884:	0800f1e4 	.word	0x0800f1e4

0800e888 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e88e:	4b0f      	ldr	r3, [pc, #60]	; (800e8cc <Get_SerialNum+0x44>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e894:	4b0e      	ldr	r3, [pc, #56]	; (800e8d0 <Get_SerialNum+0x48>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e89a:	4b0e      	ldr	r3, [pc, #56]	; (800e8d4 <Get_SerialNum+0x4c>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e8a0:	68fa      	ldr	r2, [r7, #12]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	4413      	add	r3, r2
 800e8a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d009      	beq.n	800e8c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e8ae:	2208      	movs	r2, #8
 800e8b0:	4909      	ldr	r1, [pc, #36]	; (800e8d8 <Get_SerialNum+0x50>)
 800e8b2:	68f8      	ldr	r0, [r7, #12]
 800e8b4:	f000 f814 	bl	800e8e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e8b8:	2204      	movs	r2, #4
 800e8ba:	4908      	ldr	r1, [pc, #32]	; (800e8dc <Get_SerialNum+0x54>)
 800e8bc:	68b8      	ldr	r0, [r7, #8]
 800e8be:	f000 f80f 	bl	800e8e0 <IntToUnicode>
  }
}
 800e8c2:	bf00      	nop
 800e8c4:	3710      	adds	r7, #16
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	1ffff7e8 	.word	0x1ffff7e8
 800e8d0:	1ffff7ec 	.word	0x1ffff7ec
 800e8d4:	1ffff7f0 	.word	0x1ffff7f0
 800e8d8:	20000176 	.word	0x20000176
 800e8dc:	20000186 	.word	0x20000186

0800e8e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b087      	sub	sp, #28
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	4613      	mov	r3, r2
 800e8ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	75fb      	strb	r3, [r7, #23]
 800e8f6:	e027      	b.n	800e948 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	0f1b      	lsrs	r3, r3, #28
 800e8fc:	2b09      	cmp	r3, #9
 800e8fe:	d80b      	bhi.n	800e918 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	0f1b      	lsrs	r3, r3, #28
 800e904:	b2da      	uxtb	r2, r3
 800e906:	7dfb      	ldrb	r3, [r7, #23]
 800e908:	005b      	lsls	r3, r3, #1
 800e90a:	4619      	mov	r1, r3
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	440b      	add	r3, r1
 800e910:	3230      	adds	r2, #48	; 0x30
 800e912:	b2d2      	uxtb	r2, r2
 800e914:	701a      	strb	r2, [r3, #0]
 800e916:	e00a      	b.n	800e92e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	0f1b      	lsrs	r3, r3, #28
 800e91c:	b2da      	uxtb	r2, r3
 800e91e:	7dfb      	ldrb	r3, [r7, #23]
 800e920:	005b      	lsls	r3, r3, #1
 800e922:	4619      	mov	r1, r3
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	440b      	add	r3, r1
 800e928:	3237      	adds	r2, #55	; 0x37
 800e92a:	b2d2      	uxtb	r2, r2
 800e92c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	011b      	lsls	r3, r3, #4
 800e932:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e934:	7dfb      	ldrb	r3, [r7, #23]
 800e936:	005b      	lsls	r3, r3, #1
 800e938:	3301      	adds	r3, #1
 800e93a:	68ba      	ldr	r2, [r7, #8]
 800e93c:	4413      	add	r3, r2
 800e93e:	2200      	movs	r2, #0
 800e940:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e942:	7dfb      	ldrb	r3, [r7, #23]
 800e944:	3301      	adds	r3, #1
 800e946:	75fb      	strb	r3, [r7, #23]
 800e948:	7dfa      	ldrb	r2, [r7, #23]
 800e94a:	79fb      	ldrb	r3, [r7, #7]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d3d3      	bcc.n	800e8f8 <IntToUnicode+0x18>
  }
}
 800e950:	bf00      	nop
 800e952:	bf00      	nop
 800e954:	371c      	adds	r7, #28
 800e956:	46bd      	mov	sp, r7
 800e958:	bc80      	pop	{r7}
 800e95a:	4770      	bx	lr

0800e95c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b084      	sub	sp, #16
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	4a0d      	ldr	r2, [pc, #52]	; (800e9a0 <HAL_PCD_MspInit+0x44>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d113      	bne.n	800e996 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e96e:	4b0d      	ldr	r3, [pc, #52]	; (800e9a4 <HAL_PCD_MspInit+0x48>)
 800e970:	69db      	ldr	r3, [r3, #28]
 800e972:	4a0c      	ldr	r2, [pc, #48]	; (800e9a4 <HAL_PCD_MspInit+0x48>)
 800e974:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e978:	61d3      	str	r3, [r2, #28]
 800e97a:	4b0a      	ldr	r3, [pc, #40]	; (800e9a4 <HAL_PCD_MspInit+0x48>)
 800e97c:	69db      	ldr	r3, [r3, #28]
 800e97e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e982:	60fb      	str	r3, [r7, #12]
 800e984:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800e986:	2200      	movs	r2, #0
 800e988:	2105      	movs	r1, #5
 800e98a:	2014      	movs	r0, #20
 800e98c:	f7f4 fddf 	bl	800354e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800e990:	2014      	movs	r0, #20
 800e992:	f7f4 fdf8 	bl	8003586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e996:	bf00      	nop
 800e998:	3710      	adds	r7, #16
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	40005c00 	.word	0x40005c00
 800e9a4:	40021000 	.word	0x40021000

0800e9a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800e9bc:	4619      	mov	r1, r3
 800e9be:	4610      	mov	r0, r2
 800e9c0:	f7fb fc43 	bl	800a24a <USBD_LL_SetupStage>
}
 800e9c4:	bf00      	nop
 800e9c6:	3708      	adds	r7, #8
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	460b      	mov	r3, r1
 800e9d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800e9de:	78fa      	ldrb	r2, [r7, #3]
 800e9e0:	6879      	ldr	r1, [r7, #4]
 800e9e2:	4613      	mov	r3, r2
 800e9e4:	009b      	lsls	r3, r3, #2
 800e9e6:	4413      	add	r3, r2
 800e9e8:	00db      	lsls	r3, r3, #3
 800e9ea:	440b      	add	r3, r1
 800e9ec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	78fb      	ldrb	r3, [r7, #3]
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	f7fb fc75 	bl	800a2e4 <USBD_LL_DataOutStage>
}
 800e9fa:	bf00      	nop
 800e9fc:	3708      	adds	r7, #8
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}

0800ea02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea02:	b580      	push	{r7, lr}
 800ea04:	b082      	sub	sp, #8
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ea14:	78fa      	ldrb	r2, [r7, #3]
 800ea16:	6879      	ldr	r1, [r7, #4]
 800ea18:	4613      	mov	r3, r2
 800ea1a:	009b      	lsls	r3, r3, #2
 800ea1c:	4413      	add	r3, r2
 800ea1e:	00db      	lsls	r3, r3, #3
 800ea20:	440b      	add	r3, r1
 800ea22:	333c      	adds	r3, #60	; 0x3c
 800ea24:	681a      	ldr	r2, [r3, #0]
 800ea26:	78fb      	ldrb	r3, [r7, #3]
 800ea28:	4619      	mov	r1, r3
 800ea2a:	f7fb fccc 	bl	800a3c6 <USBD_LL_DataInStage>
}
 800ea2e:	bf00      	nop
 800ea30:	3708      	adds	r7, #8
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b082      	sub	sp, #8
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7fb fddc 	bl	800a602 <USBD_LL_SOF>
}
 800ea4a:	bf00      	nop
 800ea4c:	3708      	adds	r7, #8
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea52:	b580      	push	{r7, lr}
 800ea54:	b084      	sub	sp, #16
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	689b      	ldr	r3, [r3, #8]
 800ea62:	2b02      	cmp	r3, #2
 800ea64:	d001      	beq.n	800ea6a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ea66:	f7f2 fc2d 	bl	80012c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ea70:	7bfa      	ldrb	r2, [r7, #15]
 800ea72:	4611      	mov	r1, r2
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7fb fd8c 	bl	800a592 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7fb fd45 	bl	800a510 <USBD_LL_Reset>
}
 800ea86:	bf00      	nop
 800ea88:	3710      	adds	r7, #16
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
	...

0800ea90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b082      	sub	sp, #8
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7fb fd86 	bl	800a5b0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	699b      	ldr	r3, [r3, #24]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d005      	beq.n	800eab8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eaac:	4b04      	ldr	r3, [pc, #16]	; (800eac0 <HAL_PCD_SuspendCallback+0x30>)
 800eaae:	691b      	ldr	r3, [r3, #16]
 800eab0:	4a03      	ldr	r2, [pc, #12]	; (800eac0 <HAL_PCD_SuspendCallback+0x30>)
 800eab2:	f043 0306 	orr.w	r3, r3, #6
 800eab6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eab8:	bf00      	nop
 800eaba:	3708      	adds	r7, #8
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	e000ed00 	.word	0xe000ed00

0800eac4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b082      	sub	sp, #8
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7fb fd80 	bl	800a5d8 <USBD_LL_Resume>
}
 800ead8:	bf00      	nop
 800eada:	3708      	adds	r7, #8
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800eae8:	4a28      	ldr	r2, [pc, #160]	; (800eb8c <USBD_LL_Init+0xac>)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	4a26      	ldr	r2, [pc, #152]	; (800eb8c <USBD_LL_Init+0xac>)
 800eaf4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800eaf8:	4b24      	ldr	r3, [pc, #144]	; (800eb8c <USBD_LL_Init+0xac>)
 800eafa:	4a25      	ldr	r2, [pc, #148]	; (800eb90 <USBD_LL_Init+0xb0>)
 800eafc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800eafe:	4b23      	ldr	r3, [pc, #140]	; (800eb8c <USBD_LL_Init+0xac>)
 800eb00:	2208      	movs	r2, #8
 800eb02:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800eb04:	4b21      	ldr	r3, [pc, #132]	; (800eb8c <USBD_LL_Init+0xac>)
 800eb06:	2202      	movs	r2, #2
 800eb08:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800eb0a:	4b20      	ldr	r3, [pc, #128]	; (800eb8c <USBD_LL_Init+0xac>)
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800eb10:	4b1e      	ldr	r3, [pc, #120]	; (800eb8c <USBD_LL_Init+0xac>)
 800eb12:	2200      	movs	r2, #0
 800eb14:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800eb16:	4b1d      	ldr	r3, [pc, #116]	; (800eb8c <USBD_LL_Init+0xac>)
 800eb18:	2200      	movs	r2, #0
 800eb1a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800eb1c:	481b      	ldr	r0, [pc, #108]	; (800eb8c <USBD_LL_Init+0xac>)
 800eb1e:	f7f5 ff2f 	bl	8004980 <HAL_PCD_Init>
 800eb22:	4603      	mov	r3, r0
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d001      	beq.n	800eb2c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800eb28:	f7f2 fbcc 	bl	80012c4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800eb32:	2318      	movs	r3, #24
 800eb34:	2200      	movs	r2, #0
 800eb36:	2100      	movs	r1, #0
 800eb38:	f7f7 fba5 	bl	8006286 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800eb42:	2358      	movs	r3, #88	; 0x58
 800eb44:	2200      	movs	r2, #0
 800eb46:	2180      	movs	r1, #128	; 0x80
 800eb48:	f7f7 fb9d 	bl	8006286 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800eb52:	23c0      	movs	r3, #192	; 0xc0
 800eb54:	2200      	movs	r2, #0
 800eb56:	2181      	movs	r1, #129	; 0x81
 800eb58:	f7f7 fb95 	bl	8006286 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800eb62:	f44f 7388 	mov.w	r3, #272	; 0x110
 800eb66:	2200      	movs	r2, #0
 800eb68:	2101      	movs	r1, #1
 800eb6a:	f7f7 fb8c 	bl	8006286 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800eb74:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eb78:	2200      	movs	r2, #0
 800eb7a:	2182      	movs	r1, #130	; 0x82
 800eb7c:	f7f7 fb83 	bl	8006286 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800eb80:	2300      	movs	r3, #0
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3708      	adds	r7, #8
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}
 800eb8a:	bf00      	nop
 800eb8c:	20003368 	.word	0x20003368
 800eb90:	40005c00 	.word	0x40005c00

0800eb94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b084      	sub	sp, #16
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eba0:	2300      	movs	r3, #0
 800eba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7f5 fff3 	bl	8004b96 <HAL_PCD_Start>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebb4:	7bfb      	ldrb	r3, [r7, #15]
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f000 f94e 	bl	800ee58 <USBD_Get_USB_Status>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3710      	adds	r7, #16
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}

0800ebca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ebca:	b580      	push	{r7, lr}
 800ebcc:	b084      	sub	sp, #16
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	6078      	str	r0, [r7, #4]
 800ebd2:	4608      	mov	r0, r1
 800ebd4:	4611      	mov	r1, r2
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	4603      	mov	r3, r0
 800ebda:	70fb      	strb	r3, [r7, #3]
 800ebdc:	460b      	mov	r3, r1
 800ebde:	70bb      	strb	r3, [r7, #2]
 800ebe0:	4613      	mov	r3, r2
 800ebe2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ebf2:	78bb      	ldrb	r3, [r7, #2]
 800ebf4:	883a      	ldrh	r2, [r7, #0]
 800ebf6:	78f9      	ldrb	r1, [r7, #3]
 800ebf8:	f7f6 f96d 	bl	8004ed6 <HAL_PCD_EP_Open>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec00:	7bfb      	ldrb	r3, [r7, #15]
 800ec02:	4618      	mov	r0, r3
 800ec04:	f000 f928 	bl	800ee58 <USBD_Get_USB_Status>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3710      	adds	r7, #16
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}

0800ec16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec16:	b580      	push	{r7, lr}
 800ec18:	b084      	sub	sp, #16
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]
 800ec1e:	460b      	mov	r3, r1
 800ec20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec22:	2300      	movs	r3, #0
 800ec24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec26:	2300      	movs	r3, #0
 800ec28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec30:	78fa      	ldrb	r2, [r7, #3]
 800ec32:	4611      	mov	r1, r2
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7f6 f9b4 	bl	8004fa2 <HAL_PCD_EP_Close>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec3e:	7bfb      	ldrb	r3, [r7, #15]
 800ec40:	4618      	mov	r0, r3
 800ec42:	f000 f909 	bl	800ee58 <USBD_Get_USB_Status>
 800ec46:	4603      	mov	r3, r0
 800ec48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3710      	adds	r7, #16
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}

0800ec54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	460b      	mov	r3, r1
 800ec5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec60:	2300      	movs	r3, #0
 800ec62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec64:	2300      	movs	r3, #0
 800ec66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec6e:	78fa      	ldrb	r2, [r7, #3]
 800ec70:	4611      	mov	r1, r2
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7f6 fa74 	bl	8005160 <HAL_PCD_EP_SetStall>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec7c:	7bfb      	ldrb	r3, [r7, #15]
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f000 f8ea 	bl	800ee58 <USBD_Get_USB_Status>
 800ec84:	4603      	mov	r3, r0
 800ec86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec88:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3710      	adds	r7, #16
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}

0800ec92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec92:	b580      	push	{r7, lr}
 800ec94:	b084      	sub	sp, #16
 800ec96:	af00      	add	r7, sp, #0
 800ec98:	6078      	str	r0, [r7, #4]
 800ec9a:	460b      	mov	r3, r1
 800ec9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eca2:	2300      	movs	r3, #0
 800eca4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ecac:	78fa      	ldrb	r2, [r7, #3]
 800ecae:	4611      	mov	r1, r2
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7f6 fab5 	bl	8005220 <HAL_PCD_EP_ClrStall>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecba:	7bfb      	ldrb	r3, [r7, #15]
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f000 f8cb 	bl	800ee58 <USBD_Get_USB_Status>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3710      	adds	r7, #16
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b085      	sub	sp, #20
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	460b      	mov	r3, r1
 800ecda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ece2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ece4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	da0c      	bge.n	800ed06 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ecec:	78fb      	ldrb	r3, [r7, #3]
 800ecee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecf2:	68f9      	ldr	r1, [r7, #12]
 800ecf4:	1c5a      	adds	r2, r3, #1
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	009b      	lsls	r3, r3, #2
 800ecfa:	4413      	add	r3, r2
 800ecfc:	00db      	lsls	r3, r3, #3
 800ecfe:	440b      	add	r3, r1
 800ed00:	3302      	adds	r3, #2
 800ed02:	781b      	ldrb	r3, [r3, #0]
 800ed04:	e00b      	b.n	800ed1e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ed06:	78fb      	ldrb	r3, [r7, #3]
 800ed08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed0c:	68f9      	ldr	r1, [r7, #12]
 800ed0e:	4613      	mov	r3, r2
 800ed10:	009b      	lsls	r3, r3, #2
 800ed12:	4413      	add	r3, r2
 800ed14:	00db      	lsls	r3, r3, #3
 800ed16:	440b      	add	r3, r1
 800ed18:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ed1c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3714      	adds	r7, #20
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bc80      	pop	{r7}
 800ed26:	4770      	bx	lr

0800ed28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	460b      	mov	r3, r1
 800ed32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed34:	2300      	movs	r3, #0
 800ed36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed42:	78fa      	ldrb	r2, [r7, #3]
 800ed44:	4611      	mov	r1, r2
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7f6 f8a0 	bl	8004e8c <HAL_PCD_SetAddress>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed50:	7bfb      	ldrb	r3, [r7, #15]
 800ed52:	4618      	mov	r0, r3
 800ed54:	f000 f880 	bl	800ee58 <USBD_Get_USB_Status>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3710      	adds	r7, #16
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}

0800ed66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ed66:	b580      	push	{r7, lr}
 800ed68:	b086      	sub	sp, #24
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	60f8      	str	r0, [r7, #12]
 800ed6e:	607a      	str	r2, [r7, #4]
 800ed70:	461a      	mov	r2, r3
 800ed72:	460b      	mov	r3, r1
 800ed74:	72fb      	strb	r3, [r7, #11]
 800ed76:	4613      	mov	r3, r2
 800ed78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ed88:	893b      	ldrh	r3, [r7, #8]
 800ed8a:	7af9      	ldrb	r1, [r7, #11]
 800ed8c:	687a      	ldr	r2, [r7, #4]
 800ed8e:	f7f6 f9a4 	bl	80050da <HAL_PCD_EP_Transmit>
 800ed92:	4603      	mov	r3, r0
 800ed94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed96:	7dfb      	ldrb	r3, [r7, #23]
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f000 f85d 	bl	800ee58 <USBD_Get_USB_Status>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eda2:	7dbb      	ldrb	r3, [r7, #22]
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3718      	adds	r7, #24
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b086      	sub	sp, #24
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	60f8      	str	r0, [r7, #12]
 800edb4:	607a      	str	r2, [r7, #4]
 800edb6:	461a      	mov	r2, r3
 800edb8:	460b      	mov	r3, r1
 800edba:	72fb      	strb	r3, [r7, #11]
 800edbc:	4613      	mov	r3, r2
 800edbe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edc0:	2300      	movs	r3, #0
 800edc2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edc4:	2300      	movs	r3, #0
 800edc6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800edce:	893b      	ldrh	r3, [r7, #8]
 800edd0:	7af9      	ldrb	r1, [r7, #11]
 800edd2:	687a      	ldr	r2, [r7, #4]
 800edd4:	f7f6 f92d 	bl	8005032 <HAL_PCD_EP_Receive>
 800edd8:	4603      	mov	r3, r0
 800edda:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eddc:	7dfb      	ldrb	r3, [r7, #23]
 800edde:	4618      	mov	r0, r3
 800ede0:	f000 f83a 	bl	800ee58 <USBD_Get_USB_Status>
 800ede4:	4603      	mov	r3, r0
 800ede6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ede8:	7dbb      	ldrb	r3, [r7, #22]
}
 800edea:	4618      	mov	r0, r3
 800edec:	3718      	adds	r7, #24
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}

0800edf2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edf2:	b580      	push	{r7, lr}
 800edf4:	b082      	sub	sp, #8
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6078      	str	r0, [r7, #4]
 800edfa:	460b      	mov	r3, r1
 800edfc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee04:	78fa      	ldrb	r2, [r7, #3]
 800ee06:	4611      	mov	r1, r2
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7f6 f94f 	bl	80050ac <HAL_PCD_EP_GetRxCount>
 800ee0e:	4603      	mov	r3, r0
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3708      	adds	r7, #8
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}

0800ee18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ee18:	b480      	push	{r7}
 800ee1a:	b083      	sub	sp, #12
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ee20:	4b02      	ldr	r3, [pc, #8]	; (800ee2c <USBD_static_malloc+0x14>)
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	370c      	adds	r7, #12
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bc80      	pop	{r7}
 800ee2a:	4770      	bx	lr
 800ee2c:	20002258 	.word	0x20002258

0800ee30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ee30:	b480      	push	{r7}
 800ee32:	b083      	sub	sp, #12
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]

}
 800ee38:	bf00      	nop
 800ee3a:	370c      	adds	r7, #12
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bc80      	pop	{r7}
 800ee40:	4770      	bx	lr

0800ee42 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee42:	b480      	push	{r7}
 800ee44:	b083      	sub	sp, #12
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	6078      	str	r0, [r7, #4]
 800ee4a:	460b      	mov	r3, r1
 800ee4c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ee4e:	bf00      	nop
 800ee50:	370c      	adds	r7, #12
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bc80      	pop	{r7}
 800ee56:	4770      	bx	lr

0800ee58 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b085      	sub	sp, #20
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	4603      	mov	r3, r0
 800ee60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee62:	2300      	movs	r3, #0
 800ee64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ee66:	79fb      	ldrb	r3, [r7, #7]
 800ee68:	2b03      	cmp	r3, #3
 800ee6a:	d817      	bhi.n	800ee9c <USBD_Get_USB_Status+0x44>
 800ee6c:	a201      	add	r2, pc, #4	; (adr r2, 800ee74 <USBD_Get_USB_Status+0x1c>)
 800ee6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee72:	bf00      	nop
 800ee74:	0800ee85 	.word	0x0800ee85
 800ee78:	0800ee8b 	.word	0x0800ee8b
 800ee7c:	0800ee91 	.word	0x0800ee91
 800ee80:	0800ee97 	.word	0x0800ee97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ee84:	2300      	movs	r3, #0
 800ee86:	73fb      	strb	r3, [r7, #15]
    break;
 800ee88:	e00b      	b.n	800eea2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ee8a:	2302      	movs	r3, #2
 800ee8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ee8e:	e008      	b.n	800eea2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ee90:	2301      	movs	r3, #1
 800ee92:	73fb      	strb	r3, [r7, #15]
    break;
 800ee94:	e005      	b.n	800eea2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ee96:	2302      	movs	r3, #2
 800ee98:	73fb      	strb	r3, [r7, #15]
    break;
 800ee9a:	e002      	b.n	800eea2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ee9c:	2302      	movs	r3, #2
 800ee9e:	73fb      	strb	r3, [r7, #15]
    break;
 800eea0:	bf00      	nop
  }
  return usb_status;
 800eea2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3714      	adds	r7, #20
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bc80      	pop	{r7}
 800eeac:	4770      	bx	lr
 800eeae:	bf00      	nop

0800eeb0 <__libc_init_array>:
 800eeb0:	b570      	push	{r4, r5, r6, lr}
 800eeb2:	2600      	movs	r6, #0
 800eeb4:	4d0c      	ldr	r5, [pc, #48]	; (800eee8 <__libc_init_array+0x38>)
 800eeb6:	4c0d      	ldr	r4, [pc, #52]	; (800eeec <__libc_init_array+0x3c>)
 800eeb8:	1b64      	subs	r4, r4, r5
 800eeba:	10a4      	asrs	r4, r4, #2
 800eebc:	42a6      	cmp	r6, r4
 800eebe:	d109      	bne.n	800eed4 <__libc_init_array+0x24>
 800eec0:	f000 f862 	bl	800ef88 <_init>
 800eec4:	2600      	movs	r6, #0
 800eec6:	4d0a      	ldr	r5, [pc, #40]	; (800eef0 <__libc_init_array+0x40>)
 800eec8:	4c0a      	ldr	r4, [pc, #40]	; (800eef4 <__libc_init_array+0x44>)
 800eeca:	1b64      	subs	r4, r4, r5
 800eecc:	10a4      	asrs	r4, r4, #2
 800eece:	42a6      	cmp	r6, r4
 800eed0:	d105      	bne.n	800eede <__libc_init_array+0x2e>
 800eed2:	bd70      	pop	{r4, r5, r6, pc}
 800eed4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eed8:	4798      	blx	r3
 800eeda:	3601      	adds	r6, #1
 800eedc:	e7ee      	b.n	800eebc <__libc_init_array+0xc>
 800eede:	f855 3b04 	ldr.w	r3, [r5], #4
 800eee2:	4798      	blx	r3
 800eee4:	3601      	adds	r6, #1
 800eee6:	e7f2      	b.n	800eece <__libc_init_array+0x1e>
 800eee8:	0800f7ac 	.word	0x0800f7ac
 800eeec:	0800f7ac 	.word	0x0800f7ac
 800eef0:	0800f7ac 	.word	0x0800f7ac
 800eef4:	0800f7b0 	.word	0x0800f7b0

0800eef8 <memcpy>:
 800eef8:	440a      	add	r2, r1
 800eefa:	4291      	cmp	r1, r2
 800eefc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef00:	d100      	bne.n	800ef04 <memcpy+0xc>
 800ef02:	4770      	bx	lr
 800ef04:	b510      	push	{r4, lr}
 800ef06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef0a:	4291      	cmp	r1, r2
 800ef0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef10:	d1f9      	bne.n	800ef06 <memcpy+0xe>
 800ef12:	bd10      	pop	{r4, pc}

0800ef14 <memmove>:
 800ef14:	4288      	cmp	r0, r1
 800ef16:	b510      	push	{r4, lr}
 800ef18:	eb01 0402 	add.w	r4, r1, r2
 800ef1c:	d902      	bls.n	800ef24 <memmove+0x10>
 800ef1e:	4284      	cmp	r4, r0
 800ef20:	4623      	mov	r3, r4
 800ef22:	d807      	bhi.n	800ef34 <memmove+0x20>
 800ef24:	1e43      	subs	r3, r0, #1
 800ef26:	42a1      	cmp	r1, r4
 800ef28:	d008      	beq.n	800ef3c <memmove+0x28>
 800ef2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef32:	e7f8      	b.n	800ef26 <memmove+0x12>
 800ef34:	4601      	mov	r1, r0
 800ef36:	4402      	add	r2, r0
 800ef38:	428a      	cmp	r2, r1
 800ef3a:	d100      	bne.n	800ef3e <memmove+0x2a>
 800ef3c:	bd10      	pop	{r4, pc}
 800ef3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef46:	e7f7      	b.n	800ef38 <memmove+0x24>

0800ef48 <memset>:
 800ef48:	4603      	mov	r3, r0
 800ef4a:	4402      	add	r2, r0
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d100      	bne.n	800ef52 <memset+0xa>
 800ef50:	4770      	bx	lr
 800ef52:	f803 1b01 	strb.w	r1, [r3], #1
 800ef56:	e7f9      	b.n	800ef4c <memset+0x4>

0800ef58 <strstr>:
 800ef58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef5a:	780c      	ldrb	r4, [r1, #0]
 800ef5c:	b164      	cbz	r4, 800ef78 <strstr+0x20>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	781a      	ldrb	r2, [r3, #0]
 800ef62:	4618      	mov	r0, r3
 800ef64:	1c5e      	adds	r6, r3, #1
 800ef66:	b90a      	cbnz	r2, 800ef6c <strstr+0x14>
 800ef68:	4610      	mov	r0, r2
 800ef6a:	e005      	b.n	800ef78 <strstr+0x20>
 800ef6c:	4294      	cmp	r4, r2
 800ef6e:	d108      	bne.n	800ef82 <strstr+0x2a>
 800ef70:	460d      	mov	r5, r1
 800ef72:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800ef76:	b902      	cbnz	r2, 800ef7a <strstr+0x22>
 800ef78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef7a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800ef7e:	4297      	cmp	r7, r2
 800ef80:	d0f7      	beq.n	800ef72 <strstr+0x1a>
 800ef82:	4633      	mov	r3, r6
 800ef84:	e7ec      	b.n	800ef60 <strstr+0x8>
	...

0800ef88 <_init>:
 800ef88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef8a:	bf00      	nop
 800ef8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef8e:	bc08      	pop	{r3}
 800ef90:	469e      	mov	lr, r3
 800ef92:	4770      	bx	lr

0800ef94 <_fini>:
 800ef94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef96:	bf00      	nop
 800ef98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef9a:	bc08      	pop	{r3}
 800ef9c:	469e      	mov	lr, r3
 800ef9e:	4770      	bx	lr
