
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee40  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  0800ef50  0800ef50  0001ef50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f73c  0800f73c  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800f73c  0800f73c  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f73c  0800f73c  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f73c  0800f73c  0001f73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f740  0800f740  0001f740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800f744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003508  20000190  0800f8d4  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003698  0800f8d4  00023698  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d727  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ef9  00000000  00000000  0004d8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e80  00000000  00000000  000537e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c50  00000000  00000000  00055660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eaa3  00000000  00000000  000572b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002643c  00000000  00000000  00075d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c70d  00000000  00000000  0009c18f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013889c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ea4  00000000  00000000  001388f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000190 	.word	0x20000190
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ef38 	.word	0x0800ef38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000194 	.word	0x20000194
 800014c:	0800ef38 	.word	0x0800ef38

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <d3231_get_time>:

#define D3231_ADDRESS (0b1101000 << 1)
uint8_t d3231_mem[19];

uint8_t * d3231_get_time(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b084      	sub	sp, #16
 8000178:	af04      	add	r7, sp, #16
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 800017a:	4b0f      	ldr	r3, [pc, #60]	; (80001b8 <d3231_get_time+0x44>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	f04f 31ff 	mov.w	r1, #4294967295
 8000182:	4618      	mov	r0, r3
 8000184:	f00b ff8c 	bl	800c0a0 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(&hi2c1, D3231_ADDRESS, 0, 1, d3231_mem, 3, 10);
 8000188:	230a      	movs	r3, #10
 800018a:	9302      	str	r3, [sp, #8]
 800018c:	2303      	movs	r3, #3
 800018e:	9301      	str	r3, [sp, #4]
 8000190:	4b0a      	ldr	r3, [pc, #40]	; (80001bc <d3231_get_time+0x48>)
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2301      	movs	r3, #1
 8000196:	2200      	movs	r2, #0
 8000198:	21d0      	movs	r1, #208	; 0xd0
 800019a:	4809      	ldr	r0, [pc, #36]	; (80001c0 <d3231_get_time+0x4c>)
 800019c:	f003 fe06 	bl	8003dac <HAL_I2C_Mem_Read>
	xSemaphoreGive(muI2CHandle);
 80001a0:	4b05      	ldr	r3, [pc, #20]	; (80001b8 <d3231_get_time+0x44>)
 80001a2:	6818      	ldr	r0, [r3, #0]
 80001a4:	2300      	movs	r3, #0
 80001a6:	2200      	movs	r2, #0
 80001a8:	2100      	movs	r1, #0
 80001aa:	f00b fd03 	bl	800bbb4 <xQueueGenericSend>
	return d3231_mem;
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <d3231_get_time+0x48>)
}
 80001b0:	4618      	mov	r0, r3
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	2000248c 	.word	0x2000248c
 80001bc:	20002478 	.word	0x20002478
 80001c0:	200024d0 	.word	0x200024d0

080001c4 <d3231_get_temp>:

uint8_t * d3231_get_temp(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af04      	add	r7, sp, #16
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 80001ca:	4b0f      	ldr	r3, [pc, #60]	; (8000208 <d3231_get_temp+0x44>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	f04f 31ff 	mov.w	r1, #4294967295
 80001d2:	4618      	mov	r0, r3
 80001d4:	f00b ff64 	bl	800c0a0 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(&hi2c1, D3231_ADDRESS, 0x11, 1, d3231_mem+0x11, 2, 10);
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <d3231_get_temp+0x48>)
 80001da:	220a      	movs	r2, #10
 80001dc:	9202      	str	r2, [sp, #8]
 80001de:	2202      	movs	r2, #2
 80001e0:	9201      	str	r2, [sp, #4]
 80001e2:	9300      	str	r3, [sp, #0]
 80001e4:	2301      	movs	r3, #1
 80001e6:	2211      	movs	r2, #17
 80001e8:	21d0      	movs	r1, #208	; 0xd0
 80001ea:	4809      	ldr	r0, [pc, #36]	; (8000210 <d3231_get_temp+0x4c>)
 80001ec:	f003 fdde 	bl	8003dac <HAL_I2C_Mem_Read>
	xSemaphoreGive(muI2CHandle);
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <d3231_get_temp+0x44>)
 80001f2:	6818      	ldr	r0, [r3, #0]
 80001f4:	2300      	movs	r3, #0
 80001f6:	2200      	movs	r2, #0
 80001f8:	2100      	movs	r1, #0
 80001fa:	f00b fcdb 	bl	800bbb4 <xQueueGenericSend>
	return d3231_mem+0x11;
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <d3231_get_temp+0x48>)
}
 8000200:	4618      	mov	r0, r3
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	2000248c 	.word	0x2000248c
 800020c:	20002489 	.word	0x20002489
 8000210:	200024d0 	.word	0x200024d0

08000214 <d3231_get_all>:

uint8_t * d3231_get_all(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af04      	add	r7, sp, #16
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 800021a:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <d3231_get_all+0x44>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f04f 31ff 	mov.w	r1, #4294967295
 8000222:	4618      	mov	r0, r3
 8000224:	f00b ff3c 	bl	800c0a0 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(&hi2c1, D3231_ADDRESS, 0, 1, d3231_mem, 19, 100);
 8000228:	2364      	movs	r3, #100	; 0x64
 800022a:	9302      	str	r3, [sp, #8]
 800022c:	2313      	movs	r3, #19
 800022e:	9301      	str	r3, [sp, #4]
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <d3231_get_all+0x48>)
 8000232:	9300      	str	r3, [sp, #0]
 8000234:	2301      	movs	r3, #1
 8000236:	2200      	movs	r2, #0
 8000238:	21d0      	movs	r1, #208	; 0xd0
 800023a:	4809      	ldr	r0, [pc, #36]	; (8000260 <d3231_get_all+0x4c>)
 800023c:	f003 fdb6 	bl	8003dac <HAL_I2C_Mem_Read>
	xSemaphoreGive(muI2CHandle);
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <d3231_get_all+0x44>)
 8000242:	6818      	ldr	r0, [r3, #0]
 8000244:	2300      	movs	r3, #0
 8000246:	2200      	movs	r2, #0
 8000248:	2100      	movs	r1, #0
 800024a:	f00b fcb3 	bl	800bbb4 <xQueueGenericSend>
	return d3231_mem;
 800024e:	4b03      	ldr	r3, [pc, #12]	; (800025c <d3231_get_all+0x48>)
}
 8000250:	4618      	mov	r0, r3
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	2000248c 	.word	0x2000248c
 800025c:	20002478 	.word	0x20002478
 8000260:	200024d0 	.word	0x200024d0

08000264 <d3231_get_A2M2>:

uint8_t d3231_get_A2M2(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	return d3231_get_all()[0xB];
 8000268:	f7ff ffd4 	bl	8000214 <d3231_get_all>
 800026c:	4603      	mov	r3, r0
 800026e:	7adb      	ldrb	r3, [r3, #11]
}
 8000270:	4618      	mov	r0, r3
 8000272:	bd80      	pop	{r7, pc}

08000274 <d3231_set_A2M2>:

void d3231_set_A2M2(uint8_t data)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b086      	sub	sp, #24
 8000278:	af04      	add	r7, sp, #16
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 800027e:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <d3231_set_A2M2+0x48>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f04f 31ff 	mov.w	r1, #4294967295
 8000286:	4618      	mov	r0, r3
 8000288:	f00b ff0a 	bl	800c0a0 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Write(&hi2c1, D3231_ADDRESS, 0xB, 1, &data, 1, 100);
 800028c:	2364      	movs	r3, #100	; 0x64
 800028e:	9302      	str	r3, [sp, #8]
 8000290:	2301      	movs	r3, #1
 8000292:	9301      	str	r3, [sp, #4]
 8000294:	1dfb      	adds	r3, r7, #7
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	2301      	movs	r3, #1
 800029a:	220b      	movs	r2, #11
 800029c:	21d0      	movs	r1, #208	; 0xd0
 800029e:	4808      	ldr	r0, [pc, #32]	; (80002c0 <d3231_set_A2M2+0x4c>)
 80002a0:	f003 fc8a 	bl	8003bb8 <HAL_I2C_Mem_Write>
	xSemaphoreGive(muI2CHandle);
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <d3231_set_A2M2+0x48>)
 80002a6:	6818      	ldr	r0, [r3, #0]
 80002a8:	2300      	movs	r3, #0
 80002aa:	2200      	movs	r2, #0
 80002ac:	2100      	movs	r1, #0
 80002ae:	f00b fc81 	bl	800bbb4 <xQueueGenericSend>
}
 80002b2:	bf00      	nop
 80002b4:	3708      	adds	r7, #8
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	2000248c 	.word	0x2000248c
 80002c0:	200024d0 	.word	0x200024d0

080002c4 <d3231_set>:

void d3231_set(uint8_t * arr, bool date)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af04      	add	r7, sp, #16
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	70fb      	strb	r3, [r7, #3]
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 80002d0:	4b10      	ldr	r3, [pc, #64]	; (8000314 <d3231_set+0x50>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f04f 31ff 	mov.w	r1, #4294967295
 80002d8:	4618      	mov	r0, r3
 80002da:	f00b fee1 	bl	800c0a0 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Write(&hi2c1, D3231_ADDRESS, date<<2, 1, arr, 3, 100);
 80002de:	78fb      	ldrb	r3, [r7, #3]
 80002e0:	b29b      	uxth	r3, r3
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	b29a      	uxth	r2, r3
 80002e6:	2364      	movs	r3, #100	; 0x64
 80002e8:	9302      	str	r3, [sp, #8]
 80002ea:	2303      	movs	r3, #3
 80002ec:	9301      	str	r3, [sp, #4]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	9300      	str	r3, [sp, #0]
 80002f2:	2301      	movs	r3, #1
 80002f4:	21d0      	movs	r1, #208	; 0xd0
 80002f6:	4808      	ldr	r0, [pc, #32]	; (8000318 <d3231_set+0x54>)
 80002f8:	f003 fc5e 	bl	8003bb8 <HAL_I2C_Mem_Write>
	xSemaphoreGive(muI2CHandle);
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <d3231_set+0x50>)
 80002fe:	6818      	ldr	r0, [r3, #0]
 8000300:	2300      	movs	r3, #0
 8000302:	2200      	movs	r2, #0
 8000304:	2100      	movs	r1, #0
 8000306:	f00b fc55 	bl	800bbb4 <xQueueGenericSend>
}
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	2000248c 	.word	0x2000248c
 8000318:	200024d0 	.word	0x200024d0

0800031c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of muI2C */
  muI2CHandle = osMutexNew(&muI2C_attributes);
 8000320:	481d      	ldr	r0, [pc, #116]	; (8000398 <MX_FREERTOS_Init+0x7c>)
 8000322:	f00b f8b7 	bl	800b494 <osMutexNew>
 8000326:	4603      	mov	r3, r0
 8000328:	4a1c      	ldr	r2, [pc, #112]	; (800039c <MX_FREERTOS_Init+0x80>)
 800032a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qUSB_rcv */
  qUSB_rcvHandle = osMessageQueueNew (32, sizeof(uint8_t), &qUSB_rcv_attributes);
 800032c:	4a1c      	ldr	r2, [pc, #112]	; (80003a0 <MX_FREERTOS_Init+0x84>)
 800032e:	2101      	movs	r1, #1
 8000330:	2020      	movs	r0, #32
 8000332:	f00b f949 	bl	800b5c8 <osMessageQueueNew>
 8000336:	4603      	mov	r3, r0
 8000338:	4a1a      	ldr	r2, [pc, #104]	; (80003a4 <MX_FREERTOS_Init+0x88>)
 800033a:	6013      	str	r3, [r2, #0]

  /* creation of qVFD */
  qVFDHandle = osMessageQueueNew (16, sizeof(uint16_t), &qVFD_attributes);
 800033c:	4a1a      	ldr	r2, [pc, #104]	; (80003a8 <MX_FREERTOS_Init+0x8c>)
 800033e:	2102      	movs	r1, #2
 8000340:	2010      	movs	r0, #16
 8000342:	f00b f941 	bl	800b5c8 <osMessageQueueNew>
 8000346:	4603      	mov	r3, r0
 8000348:	4a18      	ldr	r2, [pc, #96]	; (80003ac <MX_FREERTOS_Init+0x90>)
 800034a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800034c:	4a18      	ldr	r2, [pc, #96]	; (80003b0 <MX_FREERTOS_Init+0x94>)
 800034e:	2100      	movs	r1, #0
 8000350:	4818      	ldr	r0, [pc, #96]	; (80003b4 <MX_FREERTOS_Init+0x98>)
 8000352:	f00a ffc7 	bl	800b2e4 <osThreadNew>
 8000356:	4603      	mov	r3, r0
 8000358:	4a17      	ldr	r2, [pc, #92]	; (80003b8 <MX_FREERTOS_Init+0x9c>)
 800035a:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 800035c:	4a17      	ldr	r2, [pc, #92]	; (80003bc <MX_FREERTOS_Init+0xa0>)
 800035e:	2100      	movs	r1, #0
 8000360:	4817      	ldr	r0, [pc, #92]	; (80003c0 <MX_FREERTOS_Init+0xa4>)
 8000362:	f00a ffbf 	bl	800b2e4 <osThreadNew>
 8000366:	4603      	mov	r3, r0
 8000368:	4a16      	ldr	r2, [pc, #88]	; (80003c4 <MX_FREERTOS_Init+0xa8>)
 800036a:	6013      	str	r3, [r2, #0]

  /* creation of taskUSB_rcv */
  taskUSB_rcvHandle = osThreadNew(StartUSB_rcv, NULL, &taskUSB_rcv_attributes);
 800036c:	4a16      	ldr	r2, [pc, #88]	; (80003c8 <MX_FREERTOS_Init+0xac>)
 800036e:	2100      	movs	r1, #0
 8000370:	4816      	ldr	r0, [pc, #88]	; (80003cc <MX_FREERTOS_Init+0xb0>)
 8000372:	f00a ffb7 	bl	800b2e4 <osThreadNew>
 8000376:	4603      	mov	r3, r0
 8000378:	4a15      	ldr	r2, [pc, #84]	; (80003d0 <MX_FREERTOS_Init+0xb4>)
 800037a:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(StartEncoder, NULL, &Encoder_attributes);
 800037c:	4a15      	ldr	r2, [pc, #84]	; (80003d4 <MX_FREERTOS_Init+0xb8>)
 800037e:	2100      	movs	r1, #0
 8000380:	4815      	ldr	r0, [pc, #84]	; (80003d8 <MX_FREERTOS_Init+0xbc>)
 8000382:	f00a ffaf 	bl	800b2e4 <osThreadNew>
 8000386:	4603      	mov	r3, r0
 8000388:	4a14      	ldr	r2, [pc, #80]	; (80003dc <MX_FREERTOS_Init+0xc0>)
 800038a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  qUSB_rcvQueue = qUSB_rcvHandle; // adding to freertos_inc.h
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <MX_FREERTOS_Init+0x88>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a13      	ldr	r2, [pc, #76]	; (80003e0 <MX_FREERTOS_Init+0xc4>)
 8000392:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	0800f270 	.word	0x0800f270
 800039c:	2000248c 	.word	0x2000248c
 80003a0:	0800f240 	.word	0x0800f240
 80003a4:	200024c8 	.word	0x200024c8
 80003a8:	0800f258 	.word	0x0800f258
 80003ac:	20002490 	.word	0x20002490
 80003b0:	0800f1b0 	.word	0x0800f1b0
 80003b4:	080003e5 	.word	0x080003e5
 80003b8:	20002498 	.word	0x20002498
 80003bc:	0800f1d4 	.word	0x0800f1d4
 80003c0:	08000419 	.word	0x08000419
 80003c4:	2000249c 	.word	0x2000249c
 80003c8:	0800f1f8 	.word	0x0800f1f8
 80003cc:	08000475 	.word	0x08000475
 80003d0:	200024c4 	.word	0x200024c4
 80003d4:	0800f21c 	.word	0x0800f21c
 80003d8:	08000515 	.word	0x08000515
 80003dc:	200024cc 	.word	0x200024cc
 80003e0:	20002494 	.word	0x20002494

080003e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80003ec:	f00e f876 	bl	800e4dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */


  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003f6:	4807      	ldr	r0, [pc, #28]	; (8000414 <StartDefaultTask+0x30>)
 80003f8:	f003 fa47 	bl	800388a <HAL_GPIO_WritePin>
  osDelay(10);
 80003fc:	200a      	movs	r0, #10
 80003fe:	f00b f81b 	bl	800b438 <osDelay>
  init_microrl();
 8000402:	f002 fa55 	bl	80028b0 <init_microrl>
  set_CDC_ready(); // allow to send
 8000406:	f002 fa8d 	bl	8002924 <set_CDC_ready>
  for(;;)
  {
#if USE_ENCODER
    process_encoder();
#endif
    osDelay(1);
 800040a:	2001      	movs	r0, #1
 800040c:	f00b f814 	bl	800b438 <osDelay>
 8000410:	e7fb      	b.n	800040a <StartDefaultTask+0x26>
 8000412:	bf00      	nop
 8000414:	40010800 	.word	0x40010800

08000418 <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 8000420:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000424:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 8000426:	f00c fc27 	bl	800cc78 <xTaskGetTickCount>
 800042a:	4603      	mov	r3, r0
 800042c:	60bb      	str	r3, [r7, #8]

		if (use_leds)
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <StartLEDheartbeat+0x50>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d005      	beq.n	8000442 <StartLEDheartbeat+0x2a>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000436:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043a:	480c      	ldr	r0, [pc, #48]	; (800046c <StartLEDheartbeat+0x54>)
 800043c:	f003 fa3d 	bl	80038ba <HAL_GPIO_TogglePin>
 8000440:	e005      	b.n	800044e <StartLEDheartbeat+0x36>
		else
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000442:	2201      	movs	r2, #1
 8000444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000448:	4808      	ldr	r0, [pc, #32]	; (800046c <StartLEDheartbeat+0x54>)
 800044a:	f003 fa1e 	bl	800388a <HAL_GPIO_WritePin>

		tick_counter++;
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <StartLEDheartbeat+0x58>)
 8000450:	881b      	ldrh	r3, [r3, #0]
 8000452:	3301      	adds	r3, #1
 8000454:	b29a      	uxth	r2, r3
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <StartLEDheartbeat+0x58>)
 8000458:	801a      	strh	r2, [r3, #0]

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800045a:	f107 0308 	add.w	r3, r7, #8
 800045e:	68f9      	ldr	r1, [r7, #12]
 8000460:	4618      	mov	r0, r3
 8000462:	f00c fa45 	bl	800c8f0 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8000466:	e7de      	b.n	8000426 <StartLEDheartbeat+0xe>
 8000468:	200001b0 	.word	0x200001b0
 800046c:	40011000 	.word	0x40011000
 8000470:	200001ac 	.word	0x200001ac

08000474 <StartUSB_rcv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSB_rcv */
void StartUSB_rcv(void *argument)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	char buf;

	UBaseType_t uxHighWaterMark, uxHighWaterMark_old;

	/* Inspect our own high water mark on entering the task. */
	uxHighWaterMark_old = uxTaskGetStackHighWaterMark( NULL );
 800047c:	2000      	movs	r0, #0
 800047e:	f00c fefd 	bl	800d27c <uxTaskGetStackHighWaterMark>
 8000482:	6178      	str	r0, [r7, #20]
	uxHighWaterMark = uxHighWaterMark_old;
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 8000488:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <StartUSB_rcv+0x44>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f107 010f 	add.w	r1, r7, #15
 8000490:	f04f 32ff 	mov.w	r2, #4294967295
 8000494:	4618      	mov	r0, r3
 8000496:	f00b fd23 	bl	800bee0 <xQueueReceive>
	  microrl_print_char(buf);
 800049a:	7bfb      	ldrb	r3, [r7, #15]
 800049c:	4618      	mov	r0, r3
 800049e:	f001 fe93 	bl	80021c8 <microrl_print_char>
	  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80004a2:	2000      	movs	r0, #0
 80004a4:	f00c feea 	bl	800d27c <uxTaskGetStackHighWaterMark>
 80004a8:	6138      	str	r0, [r7, #16]
	  if (uxHighWaterMark < uxHighWaterMark_old)
 80004aa:	693a      	ldr	r2, [r7, #16]
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d2ea      	bcs.n	8000488 <StartUSB_rcv+0x14>
	  {
		  uxHighWaterMark_old = uxHighWaterMark;
 80004b2:	693b      	ldr	r3, [r7, #16]
 80004b4:	617b      	str	r3, [r7, #20]
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80004b6:	e7e7      	b.n	8000488 <StartUSB_rcv+0x14>
 80004b8:	20002494 	.word	0x20002494

080004bc <vfd_update.7746>:
	static bool invert = true;
	static bool released = true;


	void vfd_update(void)
	{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t data = 0b11000000; // command 3, set address to 0
 80004c6:	23c0      	movs	r3, #192	; 0xc0
 80004c8:	73fb      	strb	r3, [r7, #15]
	    HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d0:	480d      	ldr	r0, [pc, #52]	; (8000508 <vfd_update.7746+0x4c>)
 80004d2:	f003 f9da 	bl	800388a <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80004d6:	f107 010f 	add.w	r1, r7, #15
 80004da:	f04f 33ff 	mov.w	r3, #4294967295
 80004de:	2201      	movs	r2, #1
 80004e0:	480a      	ldr	r0, [pc, #40]	; (800050c <vfd_update.7746+0x50>)
 80004e2:	f006 fc71 	bl	8006dc8 <HAL_SPI_Transmit>
	    HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ea:	2221      	movs	r2, #33	; 0x21
 80004ec:	4908      	ldr	r1, [pc, #32]	; (8000510 <vfd_update.7746+0x54>)
 80004ee:	4807      	ldr	r0, [pc, #28]	; (800050c <vfd_update.7746+0x50>)
 80004f0:	f006 fc6a 	bl	8006dc8 <HAL_SPI_Transmit>
	    HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004fa:	4803      	ldr	r0, [pc, #12]	; (8000508 <vfd_update.7746+0x4c>)
 80004fc:	f003 f9c5 	bl	800388a <HAL_GPIO_WritePin>
	}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40010c00 	.word	0x40010c00
 800050c:	20002610 	.word	0x20002610
 8000510:	200024a0 	.word	0x200024a0

08000514 <StartEncoder>:
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b0a6      	sub	sp, #152	; 0x98
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
void StartEncoder(void *argument)
 800051c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000520:	61fb      	str	r3, [r7, #28]


  osDelay(500);
 8000522:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000526:	f00a ff87 	bl	800b438 <osDelay>
  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 800052a:	2201      	movs	r2, #1
 800052c:	2120      	movs	r1, #32
 800052e:	48cc      	ldr	r0, [pc, #816]	; (8000860 <StartEncoder+0x34c>)
 8000530:	f003 f9ab 	bl	800388a <HAL_GPIO_WritePin>



  for (int i = 0; i < sizeof(vfd.arr1); i++)
 8000534:	2300      	movs	r3, #0
 8000536:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800053a:	e00a      	b.n	8000552 <StartEncoder+0x3e>
  {
	  vfd.arr1[i] = 0xFF;
 800053c:	4ac9      	ldr	r2, [pc, #804]	; (8000864 <StartEncoder+0x350>)
 800053e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000542:	4413      	add	r3, r2
 8000544:	22ff      	movs	r2, #255	; 0xff
 8000546:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < sizeof(vfd.arr1); i++)
 8000548:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800054c:	3301      	adds	r3, #1
 800054e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000552:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000556:	2b20      	cmp	r3, #32
 8000558:	d9f0      	bls.n	800053c <StartEncoder+0x28>
  }
  uint8_t data;

  data = 0b01000001; // command 2, write to LED port
 800055a:	2341      	movs	r3, #65	; 0x41
 800055c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000566:	48be      	ldr	r0, [pc, #760]	; (8000860 <StartEncoder+0x34c>)
 8000568:	f003 f98f 	bl	800388a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800056c:	f107 0153 	add.w	r1, r7, #83	; 0x53
 8000570:	f04f 33ff 	mov.w	r3, #4294967295
 8000574:	2201      	movs	r2, #1
 8000576:	48bc      	ldr	r0, [pc, #752]	; (8000868 <StartEncoder+0x354>)
 8000578:	f006 fc26 	bl	8006dc8 <HAL_SPI_Transmit>
  osDelay(10);
 800057c:	200a      	movs	r0, #10
 800057e:	f00a ff5b 	bl	800b438 <osDelay>

  data = 0b1111; // disable LEDs
 8000582:	230f      	movs	r3, #15
 8000584:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000588:	f107 0153 	add.w	r1, r7, #83	; 0x53
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	2201      	movs	r2, #1
 8000592:	48b5      	ldr	r0, [pc, #724]	; (8000868 <StartEncoder+0x354>)
 8000594:	f006 fc18 	bl	8006dc8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800059e:	48b0      	ldr	r0, [pc, #704]	; (8000860 <StartEncoder+0x34c>)
 80005a0:	f003 f973 	bl	800388a <HAL_GPIO_WritePin>


  data = 0b01000000; // command 2, write to Display port
 80005a4:	2340      	movs	r3, #64	; 0x40
 80005a6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b0:	48ab      	ldr	r0, [pc, #684]	; (8000860 <StartEncoder+0x34c>)
 80005b2:	f003 f96a 	bl	800388a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80005b6:	f107 0153 	add.w	r1, r7, #83	; 0x53
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	2201      	movs	r2, #1
 80005c0:	48a9      	ldr	r0, [pc, #676]	; (8000868 <StartEncoder+0x354>)
 80005c2:	f006 fc01 	bl	8006dc8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005cc:	48a4      	ldr	r0, [pc, #656]	; (8000860 <StartEncoder+0x34c>)
 80005ce:	f003 f95c 	bl	800388a <HAL_GPIO_WritePin>
  osDelay(10);
 80005d2:	200a      	movs	r0, #10
 80005d4:	f00a ff30 	bl	800b438 <osDelay>
  vfd_update();
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	469c      	mov	ip, r3
 80005de:	f7ff ff6d 	bl	80004bc <vfd_update.7746>
  osDelay(10);
 80005e2:	200a      	movs	r0, #10
 80005e4:	f00a ff28 	bl	800b438 <osDelay>
  // init display, 11 digits 17 segments
  data = 0b00000111; // command 1, 11 digits 17 segments
 80005e8:	2307      	movs	r3, #7
 80005ea:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f4:	489a      	ldr	r0, [pc, #616]	; (8000860 <StartEncoder+0x34c>)
 80005f6:	f003 f948 	bl	800388a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80005fa:	f107 0153 	add.w	r1, r7, #83	; 0x53
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	2201      	movs	r2, #1
 8000604:	4898      	ldr	r0, [pc, #608]	; (8000868 <StartEncoder+0x354>)
 8000606:	f006 fbdf 	bl	8006dc8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000610:	4893      	ldr	r0, [pc, #588]	; (8000860 <StartEncoder+0x34c>)
 8000612:	f003 f93a 	bl	800388a <HAL_GPIO_WritePin>
  osDelay(10);
 8000616:	200a      	movs	r0, #10
 8000618:	f00a ff0e 	bl	800b438 <osDelay>

  for (uint8_t i = 0; i <= 0b111; i++)
 800061c:	2300      	movs	r3, #0
 800061e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8000622:	e02d      	b.n	8000680 <StartEncoder+0x16c>
  {
	  data = 0b10000000; // command 4
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  data |= 1<<3; // enable/disable display
 800062a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800062e:	f043 0308 	orr.w	r3, r3, #8
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  data |= i; // set brightness
 8000638:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800063c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000640:	4313      	orrs	r3, r2
 8000642:	b2db      	uxtb	r3, r3
 8000644:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064e:	4884      	ldr	r0, [pc, #528]	; (8000860 <StartEncoder+0x34c>)
 8000650:	f003 f91b 	bl	800388a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000654:	f107 0153 	add.w	r1, r7, #83	; 0x53
 8000658:	f04f 33ff 	mov.w	r3, #4294967295
 800065c:	2201      	movs	r2, #1
 800065e:	4882      	ldr	r0, [pc, #520]	; (8000868 <StartEncoder+0x354>)
 8000660:	f006 fbb2 	bl	8006dc8 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066a:	487d      	ldr	r0, [pc, #500]	; (8000860 <StartEncoder+0x34c>)
 800066c:	f003 f90d 	bl	800388a <HAL_GPIO_WritePin>
	  osDelay(250);
 8000670:	20fa      	movs	r0, #250	; 0xfa
 8000672:	f00a fee1 	bl	800b438 <osDelay>
  for (uint8_t i = 0; i <= 0b111; i++)
 8000676:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800067a:	3301      	adds	r3, #1
 800067c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8000680:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000684:	2b07      	cmp	r3, #7
 8000686:	d9cd      	bls.n	8000624 <StartEncoder+0x110>
  }



  for (int i = 0; i < 11; i++)
 8000688:	2300      	movs	r3, #0
 800068a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800068e:	e025      	b.n	80006dc <StartEncoder+0x1c8>
  {
	  for (int b = 0; b < 3; b++) // erasing from right to left
 8000690:	2300      	movs	r3, #0
 8000692:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000696:	e010      	b.n	80006ba <StartEncoder+0x1a6>
	  {
		  vfd.arr2[i][b] = 0;
 8000698:	4972      	ldr	r1, [pc, #456]	; (8000864 <StartEncoder+0x350>)
 800069a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800069e:	4613      	mov	r3, r2
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	4413      	add	r3, r2
 80006a4:	18ca      	adds	r2, r1, r3
 80006a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006aa:	4413      	add	r3, r2
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
	  for (int b = 0; b < 3; b++) // erasing from right to left
 80006b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006b4:	3301      	adds	r3, #1
 80006b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80006ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006be:	2b02      	cmp	r3, #2
 80006c0:	ddea      	ble.n	8000698 <StartEncoder+0x184>
	  }
	  vfd_update();
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	469c      	mov	ip, r3
 80006c8:	f7ff fef8 	bl	80004bc <vfd_update.7746>
	  osDelay(150);
 80006cc:	2096      	movs	r0, #150	; 0x96
 80006ce:	f00a feb3 	bl	800b438 <osDelay>
  for (int i = 0; i < 11; i++)
 80006d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006d6:	3301      	adds	r3, #1
 80006d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80006dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006e0:	2b0a      	cmp	r3, #10
 80006e2:	ddd5      	ble.n	8000690 <StartEncoder+0x17c>
  }
  osDelay (500);
 80006e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e8:	f00a fea6 	bl	800b438 <osDelay>

  //erase everything... just in case
  clr_vfd();
 80006ec:	f002 fda0 	bl	8003230 <clr_vfd>


  // fill everything
    for (int j = 1; j < 15; j++)
 80006f0:	2301      	movs	r3, #1
 80006f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80006f6:	e045      	b.n	8000784 <StartEncoder+0x270>
    {
  	  uint32_t temp = 1<<j;
 80006f8:	2201      	movs	r2, #1
 80006fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	657b      	str	r3, [r7, #84]	; 0x54
  	  for (int i = 1; i < 11; i++)
 8000704:	2301      	movs	r3, #1
 8000706:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800070a:	e02a      	b.n	8000762 <StartEncoder+0x24e>
  	  {
  		  for (int b = 0; b < 3; b++)
 800070c:	2300      	movs	r3, #0
 800070e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000710:	e01f      	b.n	8000752 <StartEncoder+0x23e>
  		  {
  			  vfd.arr2[i][b] |= (temp>>(b<<3))&0xFF;
 8000712:	4954      	ldr	r1, [pc, #336]	; (8000864 <StartEncoder+0x350>)
 8000714:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000718:	4613      	mov	r3, r2
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	4413      	add	r3, r2
 800071e:	18ca      	adds	r2, r1, r3
 8000720:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000722:	4413      	add	r3, r2
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800072c:	fa21 f303 	lsr.w	r3, r1, r3
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4313      	orrs	r3, r2
 8000734:	b2d8      	uxtb	r0, r3
 8000736:	494b      	ldr	r1, [pc, #300]	; (8000864 <StartEncoder+0x350>)
 8000738:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800073c:	4613      	mov	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	18ca      	adds	r2, r1, r3
 8000744:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000746:	4413      	add	r3, r2
 8000748:	4602      	mov	r2, r0
 800074a:	701a      	strb	r2, [r3, #0]
  		  for (int b = 0; b < 3; b++)
 800074c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800074e:	3301      	adds	r3, #1
 8000750:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000752:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000754:	2b02      	cmp	r3, #2
 8000756:	dddc      	ble.n	8000712 <StartEncoder+0x1fe>
  	  for (int i = 1; i < 11; i++)
 8000758:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800075c:	3301      	adds	r3, #1
 800075e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000762:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000766:	2b0a      	cmp	r3, #10
 8000768:	ddd0      	ble.n	800070c <StartEncoder+0x1f8>
  		  }
  	  }
  	  vfd_update();
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	469c      	mov	ip, r3
 8000770:	f7ff fea4 	bl	80004bc <vfd_update.7746>
  	  osDelay(100);
 8000774:	2064      	movs	r0, #100	; 0x64
 8000776:	f00a fe5f 	bl	800b438 <osDelay>
    for (int j = 1; j < 15; j++)
 800077a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800077e:	3301      	adds	r3, #1
 8000780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000784:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000788:	2b0e      	cmp	r3, #14
 800078a:	ddb5      	ble.n	80006f8 <StartEncoder+0x1e4>
    }

    const uint8_t arr[][2] = {{6, 0},
 800078c:	4b37      	ldr	r3, [pc, #220]	; (800086c <StartEncoder+0x358>)
 800078e:	f107 0420 	add.w	r4, r7, #32
 8000792:	461d      	mov	r5, r3
 8000794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a0:	682b      	ldr	r3, [r5, #0]
 80007a2:	8023      	strh	r3, [r4, #0]
					   {9, 16},
					   {10, 16},
					   {10, 15},
    };

    for (int j = 0; j < sizeof(arr)/2; j++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80007a8:	e048      	b.n	800083c <StartEncoder+0x328>
    {
		for (int b = 0; b < 3; b++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	677b      	str	r3, [r7, #116]	; 0x74
 80007ae:	e037      	b.n	8000820 <StartEncoder+0x30c>
		  vfd.arr2[arr[j][0]][b] |= ((1<<arr[j][1])>>(b<<3))&0xFF;
 80007b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80007b8:	4413      	add	r3, r2
 80007ba:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 80007be:	4619      	mov	r1, r3
 80007c0:	4a28      	ldr	r2, [pc, #160]	; (8000864 <StartEncoder+0x350>)
 80007c2:	460b      	mov	r3, r1
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	440b      	add	r3, r1
 80007c8:	441a      	add	r2, r3
 80007ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007cc:	4413      	add	r3, r2
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	b25a      	sxtb	r2, r3
 80007d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80007da:	440b      	add	r3, r1
 80007dc:	f813 3c77 	ldrb.w	r3, [r3, #-119]
 80007e0:	4619      	mov	r1, r3
 80007e2:	2301      	movs	r3, #1
 80007e4:	fa03 f101 	lsl.w	r1, r3, r1
 80007e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	fa41 f303 	asr.w	r3, r1, r3
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	4313      	orrs	r3, r2
 80007f4:	b25a      	sxtb	r2, r3
 80007f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80007fe:	440b      	add	r3, r1
 8000800:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 8000804:	4619      	mov	r1, r3
 8000806:	b2d0      	uxtb	r0, r2
 8000808:	4a16      	ldr	r2, [pc, #88]	; (8000864 <StartEncoder+0x350>)
 800080a:	460b      	mov	r3, r1
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	440b      	add	r3, r1
 8000810:	441a      	add	r2, r3
 8000812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000814:	4413      	add	r3, r2
 8000816:	4602      	mov	r2, r0
 8000818:	701a      	strb	r2, [r3, #0]
		for (int b = 0; b < 3; b++)
 800081a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800081c:	3301      	adds	r3, #1
 800081e:	677b      	str	r3, [r7, #116]	; 0x74
 8000820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000822:	2b02      	cmp	r3, #2
 8000824:	ddc4      	ble.n	80007b0 <StartEncoder+0x29c>
		vfd_update();
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	469c      	mov	ip, r3
 800082c:	f7ff fe46 	bl	80004bc <vfd_update.7746>
		osDelay(100);
 8000830:	2064      	movs	r0, #100	; 0x64
 8000832:	f00a fe01 	bl	800b438 <osDelay>
    for (int j = 0; j < sizeof(arr)/2; j++)
 8000836:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000838:	3301      	adds	r3, #1
 800083a:	67bb      	str	r3, [r7, #120]	; 0x78
 800083c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800083e:	2b18      	cmp	r3, #24
 8000840:	d9b3      	bls.n	80007aa <StartEncoder+0x296>
    }

    osDelay(500);
 8000842:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000846:	f00a fdf7 	bl	800b438 <osDelay>

    //erase everything... just in case
    clr_vfd();
 800084a:	f002 fcf1 	bl	8003230 <clr_vfd>

    vfd_update();
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	469c      	mov	ip, r3
 8000854:	f7ff fe32 	bl	80004bc <vfd_update.7746>


	const char * demo = "VFD FV651G";
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <StartEncoder+0x35c>)
 800085a:	673b      	str	r3, [r7, #112]	; 0x70
	while (*demo)
 800085c:	e01b      	b.n	8000896 <StartEncoder+0x382>
 800085e:	bf00      	nop
 8000860:	40010c00 	.word	0x40010c00
 8000864:	200024a0 	.word	0x200024a0
 8000868:	20002610 	.word	0x20002610
 800086c:	0800efb4 	.word	0x0800efb4
 8000870:	0800ef9c 	.word	0x0800ef9c
	{
		uint16_t temp = get_char(*(demo++));
 8000874:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	673a      	str	r2, [r7, #112]	; 0x70
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f002 fbe5 	bl	800304c <get_char>
 8000882:	4603      	mov	r3, r0
 8000884:	837b      	strh	r3, [r7, #26]
		xQueueSendToBack(qVFDHandle, &temp, 100);
 8000886:	4bc6      	ldr	r3, [pc, #792]	; (8000ba0 <StartEncoder+0x68c>)
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	f107 011a 	add.w	r1, r7, #26
 800088e:	2300      	movs	r3, #0
 8000890:	2264      	movs	r2, #100	; 0x64
 8000892:	f00b f98f 	bl	800bbb4 <xQueueGenericSend>
	while (*demo)
 8000896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1ea      	bne.n	8000874 <StartEncoder+0x360>
	}


  d3231_get_all();
 800089e:	f7ff fcb9 	bl	8000214 <d3231_get_all>

  uint8_t brightness = 0b111-d3231_get_A2M2(); // alarm2 minutes as EEPROM, default max
 80008a2:	f7ff fcdf 	bl	8000264 <d3231_get_A2M2>
 80008a6:	4603      	mov	r3, r0
 80008a8:	f1c3 0307 	rsb	r3, r3, #7
 80008ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  data = 0b10000000; // command 4
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  data |= 1<<3; // enable/disable display
 80008b6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80008ba:	f043 0308 	orr.w	r3, r3, #8
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  data |= brightness&0b111; // set brightness
 80008c4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80008c8:	f003 0307 	and.w	r3, r3, #7
 80008cc:	b25a      	sxtb	r2, r3
 80008ce:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	4313      	orrs	r3, r2
 80008d6:	b25b      	sxtb	r3, r3
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008e4:	48af      	ldr	r0, [pc, #700]	; (8000ba4 <StartEncoder+0x690>)
 80008e6:	f002 ffd0 	bl	800388a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80008ea:	f107 0153 	add.w	r1, r7, #83	; 0x53
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295
 80008f2:	2201      	movs	r2, #1
 80008f4:	48ac      	ldr	r0, [pc, #688]	; (8000ba8 <StartEncoder+0x694>)
 80008f6:	f006 fa67 	bl	8006dc8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000900:	48a8      	ldr	r0, [pc, #672]	; (8000ba4 <StartEncoder+0x690>)
 8000902:	f002 ffc2 	bl	800388a <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  uint16_t buf;
	  // show temperature
	  if (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin))
 8000906:	2102      	movs	r1, #2
 8000908:	48a6      	ldr	r0, [pc, #664]	; (8000ba4 <StartEncoder+0x690>)
 800090a:	f002 ffa7 	bl	800385c <HAL_GPIO_ReadPin>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	f000 8088 	beq.w	8000a26 <StartEncoder+0x512>
	  {
		  //erase everything...
		  clr_vfd();
 8000916:	f002 fc8b 	bl	8003230 <clr_vfd>

		  uint8_t td3231 = *d3231_get_temp();
 800091a:	f7ff fc53 	bl	80001c4 <d3231_get_temp>
 800091e:	4603      	mov	r3, r0
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		  uint8_t td [6];
		  td[0] = 'C';
 8000926:	2343      	movs	r3, #67	; 0x43
 8000928:	743b      	strb	r3, [r7, #16]
		  td[1] = 176; //°
 800092a:	23b0      	movs	r3, #176	; 0xb0
 800092c:	747b      	strb	r3, [r7, #17]
		  uint8_t i = 2;
 800092e:	2302      	movs	r3, #2
 8000930:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		  while (td3231)
 8000934:	e01e      	b.n	8000974 <StartEncoder+0x460>
		  {
			  td[i++] = td3231 %10;
 8000936:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	f887 206d 	strb.w	r2, [r7, #109]	; 0x6d
 8000940:	4618      	mov	r0, r3
 8000942:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8000946:	4b99      	ldr	r3, [pc, #612]	; (8000bac <StartEncoder+0x698>)
 8000948:	fba3 1302 	umull	r1, r3, r3, r2
 800094c:	08d9      	lsrs	r1, r3, #3
 800094e:	460b      	mov	r3, r1
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	440b      	add	r3, r1
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	b2da      	uxtb	r2, r3
 800095a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800095e:	4403      	add	r3, r0
 8000960:	f803 2c88 	strb.w	r2, [r3, #-136]
			  td3231 /= 10;
 8000964:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000968:	4a90      	ldr	r2, [pc, #576]	; (8000bac <StartEncoder+0x698>)
 800096a:	fba2 2303 	umull	r2, r3, r2, r3
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		  while (td3231)
 8000974:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1dc      	bne.n	8000936 <StartEncoder+0x422>
		  }
		  if (i>2)
 800097c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000980:	2b02      	cmp	r3, #2
 8000982:	d90d      	bls.n	80009a0 <StartEncoder+0x48c>
			  td[i] = td3231&(1<<7)?'-':'+';
 8000984:	f997 306e 	ldrsb.w	r3, [r7, #110]	; 0x6e
 8000988:	2b00      	cmp	r3, #0
 800098a:	da01      	bge.n	8000990 <StartEncoder+0x47c>
 800098c:	222d      	movs	r2, #45	; 0x2d
 800098e:	e000      	b.n	8000992 <StartEncoder+0x47e>
 8000990:	222b      	movs	r2, #43	; 0x2b
 8000992:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000996:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800099a:	440b      	add	r3, r1
 800099c:	f803 2c88 	strb.w	r2, [r3, #-136]

		  for (int i = 0; i < 6; i++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80009a4:	e025      	b.n	80009f2 <StartEncoder+0x4de>
		  {
			  buf = get_char(td[i]);
 80009a6:	f107 0210 	add.w	r2, r7, #16
 80009aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009ac:	4413      	add	r3, r2
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 fb4b 	bl	800304c <get_char>
 80009b6:	4603      	mov	r3, r0
 80009b8:	833b      	strh	r3, [r7, #24]

			  vfd.arr2[i+1][0] = buf & 0xFF;
 80009ba:	8b39      	ldrh	r1, [r7, #24]
 80009bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	b2c8      	uxtb	r0, r1
 80009c2:	497b      	ldr	r1, [pc, #492]	; (8000bb0 <StartEncoder+0x69c>)
 80009c4:	4613      	mov	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	440b      	add	r3, r1
 80009cc:	4602      	mov	r2, r0
 80009ce:	701a      	strb	r2, [r3, #0]
			  vfd.arr2[i+1][1] = (buf>>8)&0xFF;
 80009d0:	8b3b      	ldrh	r3, [r7, #24]
 80009d2:	0a1b      	lsrs	r3, r3, #8
 80009d4:	b299      	uxth	r1, r3
 80009d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009d8:	1c5a      	adds	r2, r3, #1
 80009da:	b2c8      	uxtb	r0, r1
 80009dc:	4974      	ldr	r1, [pc, #464]	; (8000bb0 <StartEncoder+0x69c>)
 80009de:	4613      	mov	r3, r2
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	4413      	add	r3, r2
 80009e4:	440b      	add	r3, r1
 80009e6:	3301      	adds	r3, #1
 80009e8:	4602      	mov	r2, r0
 80009ea:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 6; i++)
 80009ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009ee:	3301      	adds	r3, #1
 80009f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80009f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009f4:	2b05      	cmp	r3, #5
 80009f6:	ddd6      	ble.n	80009a6 <StartEncoder+0x492>
		  }

		  vfd_update();
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	469c      	mov	ip, r3
 80009fe:	f7ff fd5d 	bl	80004bc <vfd_update.7746>
		  osDelay(20);
 8000a02:	2014      	movs	r0, #20
 8000a04:	f00a fd18 	bl	800b438 <osDelay>
		  while(HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin)); // wait release
 8000a08:	bf00      	nop
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	4865      	ldr	r0, [pc, #404]	; (8000ba4 <StartEncoder+0x690>)
 8000a0e:	f002 ff25 	bl	800385c <HAL_GPIO_ReadPin>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1f8      	bne.n	8000a0a <StartEncoder+0x4f6>
		  osDelay(1000);
 8000a18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a1c:	f00a fd0c 	bl	800b438 <osDelay>
		  show_clock = true;
 8000a20:	4b64      	ldr	r3, [pc, #400]	; (8000bb4 <StartEncoder+0x6a0>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]
	  }

	  // tune brightness
	  if (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin))
 8000a26:	2104      	movs	r1, #4
 8000a28:	485e      	ldr	r0, [pc, #376]	; (8000ba4 <StartEncoder+0x690>)
 8000a2a:	f002 ff17 	bl	800385c <HAL_GPIO_ReadPin>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d05b      	beq.n	8000aec <StartEncoder+0x5d8>
	  {
		  save_vfd();
 8000a34:	f002 fc16 	bl	8003264 <save_vfd>
		  clr_vfd();
 8000a38:	f002 fbfa 	bl	8003230 <clr_vfd>
		  str2vfd("brightness");
 8000a3c:	485e      	ldr	r0, [pc, #376]	; (8000bb8 <StartEncoder+0x6a4>)
 8000a3e:	f002 fb71 	bl	8003124 <str2vfd>
		  vfd_update();
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	469c      	mov	ip, r3
 8000a48:	f7ff fd38 	bl	80004bc <vfd_update.7746>
		  brightness = (brightness - 1)&0b111;
 8000a4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a50:	3b01      	subs	r3, #1
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	f003 0307 	and.w	r3, r3, #7
 8000a58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		  d3231_set_A2M2(0b111-brightness);
 8000a5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a60:	f1c3 0307 	rsb	r3, r3, #7
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fc04 	bl	8000274 <d3231_set_A2M2>

		  data = 0b10000000; // command 4
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		  data |= 1<<3; // enable/disable display
 8000a72:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000a76:	f043 0308 	orr.w	r3, r3, #8
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		  data |= brightness&0b111; // set brightness
 8000a80:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	b25a      	sxtb	r2, r3
 8000a8a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000a8e:	b25b      	sxtb	r3, r3
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa0:	4840      	ldr	r0, [pc, #256]	; (8000ba4 <StartEncoder+0x690>)
 8000aa2:	f002 fef2 	bl	800388a <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000aa6:	f107 0153 	add.w	r1, r7, #83	; 0x53
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	2201      	movs	r2, #1
 8000ab0:	483d      	ldr	r0, [pc, #244]	; (8000ba8 <StartEncoder+0x694>)
 8000ab2:	f006 f989 	bl	8006dc8 <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000abc:	4839      	ldr	r0, [pc, #228]	; (8000ba4 <StartEncoder+0x690>)
 8000abe:	f002 fee4 	bl	800388a <HAL_GPIO_WritePin>
		  // todo display BRIGHTNESS and scale
		  osDelay(20);
 8000ac2:	2014      	movs	r0, #20
 8000ac4:	f00a fcb8 	bl	800b438 <osDelay>
		  while(HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin)); // wait release
 8000ac8:	bf00      	nop
 8000aca:	2104      	movs	r1, #4
 8000acc:	4835      	ldr	r0, [pc, #212]	; (8000ba4 <StartEncoder+0x690>)
 8000ace:	f002 fec5 	bl	800385c <HAL_GPIO_ReadPin>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1f8      	bne.n	8000aca <StartEncoder+0x5b6>
		  osDelay(100);
 8000ad8:	2064      	movs	r0, #100	; 0x64
 8000ada:	f00a fcad 	bl	800b438 <osDelay>
		  restore_vfd();
 8000ade:	f002 fbe1 	bl	80032a4 <restore_vfd>
		  vfd_update();
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	469c      	mov	ip, r3
 8000ae8:	f7ff fce8 	bl	80004bc <vfd_update.7746>
	  }

	  if (show_clock)
 8000aec:	4b31      	ldr	r3, [pc, #196]	; (8000bb4 <StartEncoder+0x6a0>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	f000 8084 	beq.w	8000bfe <StartEncoder+0x6ea>
	  {
		  uint8_t * time = d3231_get_time();
 8000af6:	f7ff fb3d 	bl	8000174 <d3231_get_time>
 8000afa:	65b8      	str	r0, [r7, #88]	; 0x58
		  uint8_t clock [4];
		  clock[0] = time[1] & 0xF;
 8000afc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000afe:	3301      	adds	r3, #1
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	733b      	strb	r3, [r7, #12]
		  clock[1] = (time[1] >> 4) & 0xF;
 8000b0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	091b      	lsrs	r3, r3, #4
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	737b      	strb	r3, [r7, #13]
		  clock[2] = time[2] & 0xF;
 8000b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b18:	3302      	adds	r3, #2
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	f003 030f 	and.w	r3, r3, #15
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	73bb      	strb	r3, [r7, #14]
		  clock[3] = (time[2] >> 4) & 0xF;
 8000b24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b26:	3302      	adds	r3, #2
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	091b      	lsrs	r3, r3, #4
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	73fb      	strb	r3, [r7, #15]

		  //erase everything...
		  clr_vfd();
 8000b30:	f002 fb7e 	bl	8003230 <clr_vfd>


		  for (int i = 0; i < 4; i++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	667b      	str	r3, [r7, #100]	; 0x64
 8000b38:	e025      	b.n	8000b86 <StartEncoder+0x672>
		  {
			  buf = get_char(clock[i]);
 8000b3a:	f107 020c 	add.w	r2, r7, #12
 8000b3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b40:	4413      	add	r3, r2
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 fa81 	bl	800304c <get_char>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	833b      	strh	r3, [r7, #24]

			  vfd.arr2[4+i][0] = buf & 0xFF;
 8000b4e:	8b39      	ldrh	r1, [r7, #24]
 8000b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b52:	1d1a      	adds	r2, r3, #4
 8000b54:	b2c8      	uxtb	r0, r1
 8000b56:	4916      	ldr	r1, [pc, #88]	; (8000bb0 <StartEncoder+0x69c>)
 8000b58:	4613      	mov	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4413      	add	r3, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	4602      	mov	r2, r0
 8000b62:	701a      	strb	r2, [r3, #0]
			  vfd.arr2[4+i][1] = (buf>>8)&0xFF;
 8000b64:	8b3b      	ldrh	r3, [r7, #24]
 8000b66:	0a1b      	lsrs	r3, r3, #8
 8000b68:	b299      	uxth	r1, r3
 8000b6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b6c:	1d1a      	adds	r2, r3, #4
 8000b6e:	b2c8      	uxtb	r0, r1
 8000b70:	490f      	ldr	r1, [pc, #60]	; (8000bb0 <StartEncoder+0x69c>)
 8000b72:	4613      	mov	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	4413      	add	r3, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 4; i++)
 8000b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b82:	3301      	adds	r3, #1
 8000b84:	667b      	str	r3, [r7, #100]	; 0x64
 8000b86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	ddd6      	ble.n	8000b3a <StartEncoder+0x626>
		  }

		  if ((time[0]&0b1) == 0)
 8000b8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d12c      	bne.n	8000bf2 <StartEncoder+0x6de>
		  {
				for (int b = 0; b < 3; b++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	663b      	str	r3, [r7, #96]	; 0x60
 8000b9c:	e026      	b.n	8000bec <StartEncoder+0x6d8>
 8000b9e:	bf00      	nop
 8000ba0:	20002490 	.word	0x20002490
 8000ba4:	40010c00 	.word	0x40010c00
 8000ba8:	20002610 	.word	0x20002610
 8000bac:	cccccccd 	.word	0xcccccccd
 8000bb0:	200024a0 	.word	0x200024a0
 8000bb4:	2000000d 	.word	0x2000000d
 8000bb8:	0800efa8 	.word	0x0800efa8
				  vfd.arr2[6][b] |= ((1<<0)>>(b<<3))&0xFF;
 8000bbc:	4a65      	ldr	r2, [pc, #404]	; (8000d54 <StartEncoder+0x840>)
 8000bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bc0:	4413      	add	r3, r2
 8000bc2:	3312      	adds	r3, #18
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b25a      	sxtb	r2, r3
 8000bc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fa41 f303 	asr.w	r3, r1, r3
 8000bd2:	b25b      	sxtb	r3, r3
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	b25b      	sxtb	r3, r3
 8000bd8:	b2d9      	uxtb	r1, r3
 8000bda:	4a5e      	ldr	r2, [pc, #376]	; (8000d54 <StartEncoder+0x840>)
 8000bdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bde:	4413      	add	r3, r2
 8000be0:	3312      	adds	r3, #18
 8000be2:	460a      	mov	r2, r1
 8000be4:	701a      	strb	r2, [r3, #0]
				for (int b = 0; b < 3; b++)
 8000be6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000be8:	3301      	adds	r3, #1
 8000bea:	663b      	str	r3, [r7, #96]	; 0x60
 8000bec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	dde4      	ble.n	8000bbc <StartEncoder+0x6a8>
		  }

		  vfd_update();
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	469c      	mov	ip, r3
 8000bf8:	f7ff fc60 	bl	80004bc <vfd_update.7746>
 8000bfc:	e048      	b.n	8000c90 <StartEncoder+0x77c>


	  }
	  else
	  {
		  if(qVFDHandle && xQueueReceive(qVFDHandle, &buf, 1))
 8000bfe:	4b56      	ldr	r3, [pc, #344]	; (8000d58 <StartEncoder+0x844>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d044      	beq.n	8000c90 <StartEncoder+0x77c>
 8000c06:	4b54      	ldr	r3, [pc, #336]	; (8000d58 <StartEncoder+0x844>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f107 0118 	add.w	r1, r7, #24
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4618      	mov	r0, r3
 8000c12:	f00b f965 	bl	800bee0 <xQueueReceive>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d039      	beq.n	8000c90 <StartEncoder+0x77c>
		  {
				for (int i = 10; i > 1; i--)
 8000c1c:	230a      	movs	r3, #10
 8000c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c20:	e024      	b.n	8000c6c <StartEncoder+0x758>
				{
					vfd.arr2[i][0] = vfd.arr2[i-1][0];
 8000c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c24:	1e5a      	subs	r2, r3, #1
 8000c26:	494b      	ldr	r1, [pc, #300]	; (8000d54 <StartEncoder+0x840>)
 8000c28:	4613      	mov	r3, r2
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	4413      	add	r3, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	7818      	ldrb	r0, [r3, #0]
 8000c32:	4948      	ldr	r1, [pc, #288]	; (8000d54 <StartEncoder+0x840>)
 8000c34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000c36:	4613      	mov	r3, r2
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	4413      	add	r3, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	4602      	mov	r2, r0
 8000c40:	701a      	strb	r2, [r3, #0]
					vfd.arr2[i][1] = vfd.arr2[i-1][1];
 8000c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c44:	1e5a      	subs	r2, r3, #1
 8000c46:	4943      	ldr	r1, [pc, #268]	; (8000d54 <StartEncoder+0x840>)
 8000c48:	4613      	mov	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	440b      	add	r3, r1
 8000c50:	3301      	adds	r3, #1
 8000c52:	7818      	ldrb	r0, [r3, #0]
 8000c54:	493f      	ldr	r1, [pc, #252]	; (8000d54 <StartEncoder+0x840>)
 8000c56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000c58:	4613      	mov	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	440b      	add	r3, r1
 8000c60:	3301      	adds	r3, #1
 8000c62:	4602      	mov	r2, r0
 8000c64:	701a      	strb	r2, [r3, #0]
				for (int i = 10; i > 1; i--)
 8000c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	dcd7      	bgt.n	8000c22 <StartEncoder+0x70e>
				}
				vfd.arr2[1][0] = buf & 0xFF;
 8000c72:	8b3b      	ldrh	r3, [r7, #24]
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b37      	ldr	r3, [pc, #220]	; (8000d54 <StartEncoder+0x840>)
 8000c78:	70da      	strb	r2, [r3, #3]
				vfd.arr2[1][1] = (buf>>8)&0xFF;
 8000c7a:	8b3b      	ldrh	r3, [r7, #24]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <StartEncoder+0x840>)
 8000c84:	711a      	strb	r2, [r3, #4]
				vfd_update();
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	469c      	mov	ip, r3
 8000c8c:	f7ff fc16 	bl	80004bc <vfd_update.7746>
		  }
	  }

	  if (HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin))
 8000c90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c94:	4831      	ldr	r0, [pc, #196]	; (8000d5c <StartEncoder+0x848>)
 8000c96:	f002 fde1 	bl	800385c <HAL_GPIO_ReadPin>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d003      	beq.n	8000ca8 <StartEncoder+0x794>
	  {
		  released = true;
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <StartEncoder+0x84c>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	e015      	b.n	8000cd4 <StartEncoder+0x7c0>
	  } else if (released)
 8000ca8:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <StartEncoder+0x84c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d011      	beq.n	8000cd4 <StartEncoder+0x7c0>
	  {
		  released = false;
 8000cb0:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <StartEncoder+0x84c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
		  invert = !invert;
 8000cb6:	4b2b      	ldr	r3, [pc, #172]	; (8000d64 <StartEncoder+0x850>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	bf14      	ite	ne
 8000cbe:	2301      	movne	r3, #1
 8000cc0:	2300      	moveq	r3, #0
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	f083 0301 	eor.w	r3, r3, #1
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <StartEncoder+0x850>)
 8000cd2:	701a      	strb	r2, [r3, #0]
	  }

	if(use_leds)
 8000cd4:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <StartEncoder+0x854>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d036      	beq.n	8000d4a <StartEncoder+0x836>
	{
		  data = 0b01000001; // command 2, write to LED port
 8000cdc:	2341      	movs	r3, #65	; 0x41
 8000cde:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce8:	481c      	ldr	r0, [pc, #112]	; (8000d5c <StartEncoder+0x848>)
 8000cea:	f002 fdce 	bl	800388a <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000cee:	f107 0153 	add.w	r1, r7, #83	; 0x53
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	481c      	ldr	r0, [pc, #112]	; (8000d6c <StartEncoder+0x858>)
 8000cfa:	f006 f865 	bl	8006dc8 <HAL_SPI_Transmit>
		  osDelay(10);
 8000cfe:	200a      	movs	r0, #10
 8000d00:	f00a fb9a 	bl	800b438 <osDelay>

		  data = ~(1<<((tick_counter >> 1)&0b11));
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <StartEncoder+0x85c>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	085b      	lsrs	r3, r3, #1
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	2201      	movs	r2, #1
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	//	  if (invert)
	//		  data =~data;
		  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, invert);
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <StartEncoder+0x850>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	2120      	movs	r1, #32
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <StartEncoder+0x848>)
 8000d2a:	f002 fdae 	bl	800388a <HAL_GPIO_WritePin>

		  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000d2e:	f107 0153 	add.w	r1, r7, #83	; 0x53
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	2201      	movs	r2, #1
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <StartEncoder+0x858>)
 8000d3a:	f006 f845 	bl	8006dc8 <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <StartEncoder+0x848>)
 8000d46:	f002 fda0 	bl	800388a <HAL_GPIO_WritePin>
	  data |= ((encoder_value >> 2) - 1)&0b111; // set brightness
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
#endif
	  osDelay(10);
 8000d4a:	200a      	movs	r0, #10
 8000d4c:	f00a fb74 	bl	800b438 <osDelay>
  {
 8000d50:	e5d9      	b.n	8000906 <StartEncoder+0x3f2>
 8000d52:	bf00      	nop
 8000d54:	200024a0 	.word	0x200024a0
 8000d58:	20002490 	.word	0x20002490
 8000d5c:	40010c00 	.word	0x40010c00
 8000d60:	20000000 	.word	0x20000000
 8000d64:	20000001 	.word	0x20000001
 8000d68:	200001b0 	.word	0x200001b0
 8000d6c:	20002610 	.word	0x20002610
 8000d70:	200001ac 	.word	0x200001ac

08000d74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d88:	4b4f      	ldr	r3, [pc, #316]	; (8000ec8 <MX_GPIO_Init+0x154>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a4e      	ldr	r2, [pc, #312]	; (8000ec8 <MX_GPIO_Init+0x154>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b4c      	ldr	r3, [pc, #304]	; (8000ec8 <MX_GPIO_Init+0x154>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0310 	and.w	r3, r3, #16
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da0:	4b49      	ldr	r3, [pc, #292]	; (8000ec8 <MX_GPIO_Init+0x154>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a48      	ldr	r2, [pc, #288]	; (8000ec8 <MX_GPIO_Init+0x154>)
 8000da6:	f043 0320 	orr.w	r3, r3, #32
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b46      	ldr	r3, [pc, #280]	; (8000ec8 <MX_GPIO_Init+0x154>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0320 	and.w	r3, r3, #32
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db8:	4b43      	ldr	r3, [pc, #268]	; (8000ec8 <MX_GPIO_Init+0x154>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a42      	ldr	r2, [pc, #264]	; (8000ec8 <MX_GPIO_Init+0x154>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b40      	ldr	r3, [pc, #256]	; (8000ec8 <MX_GPIO_Init+0x154>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd0:	4b3d      	ldr	r3, [pc, #244]	; (8000ec8 <MX_GPIO_Init+0x154>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a3c      	ldr	r2, [pc, #240]	; (8000ec8 <MX_GPIO_Init+0x154>)
 8000dd6:	f043 0308 	orr.w	r3, r3, #8
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b3a      	ldr	r3, [pc, #232]	; (8000ec8 <MX_GPIO_Init+0x154>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0308 	and.w	r3, r3, #8
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dee:	4837      	ldr	r0, [pc, #220]	; (8000ecc <MX_GPIO_Init+0x158>)
 8000df0:	f002 fd4b 	bl	800388a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	f44f 5189 	mov.w	r1, #4384	; 0x1120
 8000dfa:	4835      	ldr	r0, [pc, #212]	; (8000ed0 <MX_GPIO_Init+0x15c>)
 8000dfc:	f002 fd45 	bl	800388a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e06:	4833      	ldr	r0, [pc, #204]	; (8000ed4 <MX_GPIO_Init+0x160>)
 8000e08:	f002 fd3f 	bl	800388a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4619      	mov	r1, r3
 8000e24:	4829      	ldr	r0, [pc, #164]	; (8000ecc <MX_GPIO_Init+0x158>)
 8000e26:	f002 fb95 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <MX_GPIO_Init+0x164>)
 8000e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4825      	ldr	r0, [pc, #148]	; (8000ed4 <MX_GPIO_Init+0x160>)
 8000e3e:	f002 fb89 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PB1_Pin|PB2_Pin;
 8000e42:	2306      	movs	r3, #6
 8000e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	4619      	mov	r1, r3
 8000e54:	481e      	ldr	r0, [pc, #120]	; (8000ed0 <MX_GPIO_Init+0x15c>)
 8000e56:	f002 fb7d 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin|enc_s_Pin;
 8000e5a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000e5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4818      	ldr	r0, [pc, #96]	; (8000ed0 <MX_GPIO_Init+0x15c>)
 8000e70:	f002 fb70 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8000e74:	f44f 5389 	mov.w	r3, #4384	; 0x1120
 8000e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2302      	movs	r3, #2
 8000e84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4810      	ldr	r0, [pc, #64]	; (8000ed0 <MX_GPIO_Init+0x15c>)
 8000e8e:	f002 fb61 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480a      	ldr	r0, [pc, #40]	; (8000ed4 <MX_GPIO_Init+0x160>)
 8000eac:	f002 fb52 	bl	8003554 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2105      	movs	r1, #5
 8000eb4:	2006      	movs	r0, #6
 8000eb6:	f002 fb22 	bl	80034fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000eba:	2006      	movs	r0, #6
 8000ebc:	f002 fb3b 	bl	8003536 <HAL_NVIC_EnableIRQ>

}
 8000ec0:	bf00      	nop
 8000ec2:	3720      	adds	r7, #32
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40011000 	.word	0x40011000
 8000ed0:	40010c00 	.word	0x40010c00
 8000ed4:	40010800 	.word	0x40010800
 8000ed8:	10110000 	.word	0x10110000

08000edc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000ee2:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <MX_I2C1_Init+0x54>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000ee8:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <MX_I2C1_Init+0x58>)
 8000eea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000efa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000efe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f1a:	f002 fd09 	bl	8003930 <HAL_I2C_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f24:	f000 f8c6 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200024d0 	.word	0x200024d0
 8000f30:	40005400 	.word	0x40005400
 8000f34:	000186a0 	.word	0x000186a0

08000f38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <HAL_I2C_MspInit+0x70>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d123      	bne.n	8000fa0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_I2C_MspInit+0x74>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a13      	ldr	r2, [pc, #76]	; (8000fac <HAL_I2C_MspInit+0x74>)
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <HAL_I2C_MspInit+0x74>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f70:	23c0      	movs	r3, #192	; 0xc0
 8000f72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f74:	2312      	movs	r3, #18
 8000f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	4619      	mov	r1, r3
 8000f82:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <HAL_I2C_MspInit+0x78>)
 8000f84:	f002 fae6 	bl	8003554 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_I2C_MspInit+0x74>)
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_I2C_MspInit+0x74>)
 8000f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f92:	61d3      	str	r3, [r2, #28]
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_I2C_MspInit+0x74>)
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	3720      	adds	r7, #32
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010c00 	.word	0x40010c00

08000fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb8:	f002 f9ba 	bl	8003330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fbc:	f000 f80d 	bl	8000fda <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc0:	f7ff fed8 	bl	8000d74 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000fc4:	f001 fefc 	bl	8002dc0 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000fc8:	f7ff ff88 	bl	8000edc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000fcc:	f00a f924 	bl	800b218 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000fd0:	f7ff f9a4 	bl	800031c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000fd4:	f00a f952 	bl	800b27c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <main+0x24>

08000fda <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b094      	sub	sp, #80	; 0x50
 8000fde:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fe4:	2228      	movs	r2, #40	; 0x28
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f00d ff85 	bl	800eef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800100a:	2301      	movs	r3, #1
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800100e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800101a:	2301      	movs	r3, #1
 800101c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101e:	2302      	movs	r3, #2
 8001020:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001026:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001028:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800102c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001032:	4618      	mov	r0, r3
 8001034:	f005 f942 	bl	80062bc <HAL_RCC_OscConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800103e:	f000 f839 	bl	80010b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001042:	230f      	movs	r3, #15
 8001044:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001046:	2302      	movs	r3, #2
 8001048:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800104e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001052:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2102      	movs	r1, #2
 800105e:	4618      	mov	r0, r3
 8001060:	f005 fbac 	bl	80067bc <HAL_RCC_ClockConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x94>
  {
    Error_Handler();
 800106a:	f000 f823 	bl	80010b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800106e:	2310      	movs	r3, #16
 8001070:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	4618      	mov	r0, r3
 800107a:	f005 fd6b 	bl	8006b54 <HAL_RCCEx_PeriphCLKConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001084:	f000 f816 	bl	80010b4 <Error_Handler>
  }
}
 8001088:	bf00      	nop
 800108a:	3750      	adds	r7, #80	; 0x50
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010a2:	f002 f95b 	bl	800335c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40012c00 	.word	0x40012c00

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010bc:	e7fe      	b.n	80010bc <Error_Handler+0x8>

080010be <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	5c8a      	ldrb	r2, [r1, r2]
 80010d2:	4413      	add	r3, r2
 80010d4:	3301      	adds	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b3f      	cmp	r3, #63	; 0x3f
 80010dc:	dd02      	ble.n	80010e4 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3b40      	subs	r3, #64	; 0x40
 80010e2:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	5cd3      	ldrb	r3, [r2, r3]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <hist_is_space_for_new+0x1a>
		return true;
 800110a:	2301      	movs	r3, #1
 800110c:	e01e      	b.n	800114c <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	429a      	cmp	r2, r3
 8001118:	db0c      	blt.n	8001134 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	4413      	add	r3, r2
 8001128:	3b01      	subs	r3, #1
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	429a      	cmp	r2, r3
 800112e:	da0c      	bge.n	800114a <hist_is_space_for_new+0x56>
			return true;
 8001130:	2301      	movs	r3, #1
 8001132:	e00b      	b.n	800114c <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	3b01      	subs	r3, #1
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	da01      	bge.n	800114a <hist_is_space_for_new+0x56>
			return true;
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <hist_is_space_for_new+0x58>
	}
	return false;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b3e      	cmp	r3, #62	; 0x3e
 8001166:	dc61      	bgt.n	800122c <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8001168:	e002      	b.n	8001170 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f7ff ffa7 	bl	80010be <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f7ff ffbe 	bl	80010f4 <hist_is_space_for_new>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f5      	beq.n	800116a <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	5cd3      	ldrb	r3, [r2, r3]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d105      	bne.n	8001196 <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	b2d1      	uxtb	r1, r2
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	da0a      	bge.n	80011ba <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	3301      	adds	r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f00d fe78 	bl	800eea8 <memcpy>
 80011b8:	e018      	b.n	80011ec <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80011c2:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	3301      	adds	r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	68b9      	ldr	r1, [r7, #8]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f00d fe68 	bl	800eea8 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	18d1      	adds	r1, r2, r3
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	f00d fe5e 	bl	800eea8 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	b2d1      	uxtb	r1, r2
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4413      	add	r3, r2
 8001200:	1c5a      	adds	r2, r3, #1
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	2b3f      	cmp	r3, #63	; 0x3f
 800120c:	dd05      	ble.n	800121a <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	2100      	movs	r1, #0
 8001222:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2200      	movs	r2, #0
 8001228:	649a      	str	r2, [r3, #72]	; 0x48
 800122a:	e000      	b.n	800122e <hist_save_line+0xd8>
		return;
 800122c:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08c      	sub	sp, #48	; 0x30
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 800124a:	e010      	b.n	800126e <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001258:	4413      	add	r3, r2
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 800125c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125e:	2b3f      	cmp	r3, #63	; 0x3f
 8001260:	dd02      	ble.n	8001268 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 8001262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001264:	3b40      	subs	r3, #64	; 0x40
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8001268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126a:	3301      	adds	r3, #1
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001272:	4413      	add	r3, r2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1e8      	bne.n	800124c <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d176      	bne.n	800136e <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001286:	429a      	cmp	r2, r3
 8001288:	f2c0 80d6 	blt.w	8001438 <hist_restore_line+0x204>
			int header = pThis->begin;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8001296:	e010      	b.n	80012ba <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	4413      	add	r3, r2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a4:	4413      	add	r3, r2
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	2b3f      	cmp	r3, #63	; 0x3f
 80012ac:	dd02      	ble.n	80012b4 <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	3b40      	subs	r3, #64	; 0x40
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	3301      	adds	r3, #1
 80012b8:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <hist_restore_line+0xa2>
 80012c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	1e5a      	subs	r2, r3, #1
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d1e0      	bne.n	8001298 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	4413      	add	r3, r2
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 80aa 	beq.w	8001438 <hist_restore_line+0x204>
					pThis->cur++;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	4413      	add	r3, r2
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	4413      	add	r3, r2
 80012fc:	2b3f      	cmp	r3, #63	; 0x3f
 80012fe:	dc11      	bgt.n	8001324 <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 8001300:	2233      	movs	r2, #51	; 0x33
 8001302:	2100      	movs	r1, #0
 8001304:	68b8      	ldr	r0, [r7, #8]
 8001306:	f00d fdf7 	bl	800eef8 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	3301      	adds	r3, #1
 8001310:	18d1      	adds	r1, r2, r3
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	4413      	add	r3, r2
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68b8      	ldr	r0, [r7, #8]
 800131e:	f00d fdc3 	bl	800eea8 <memcpy>
 8001322:	e01f      	b.n	8001364 <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800132a:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 800132c:	2233      	movs	r2, #51	; 0x33
 800132e:	2100      	movs	r1, #0
 8001330:	68b8      	ldr	r0, [r7, #8]
 8001332:	f00d fde1 	bl	800eef8 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	3301      	adds	r3, #1
 800133c:	4413      	add	r3, r2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4619      	mov	r1, r3
 8001342:	68b8      	ldr	r0, [r7, #8]
 8001344:	f00d fdb0 	bl	800eea8 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	18d0      	adds	r0, r2, r3
 800134e:	68f9      	ldr	r1, [r7, #12]
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	4413      	add	r3, r2
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	461a      	mov	r2, r3
 8001360:	f00d fda2 	bl	800eea8 <memcpy>
				}
				return pThis->ring_buf[header];
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	4413      	add	r3, r2
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	e066      	b.n	800143c <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001372:	2b00      	cmp	r3, #0
 8001374:	dd5e      	ble.n	8001434 <hist_restore_line+0x200>
				pThis->cur--;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137a:	1e5a      	subs	r2, r3, #1
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	61fb      	str	r3, [r7, #28]
			int j = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 800138a:	e010      	b.n	80013ae <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	4413      	add	r3, r2
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	3301      	adds	r3, #1
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	4413      	add	r3, r2
 800139a:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	2b3f      	cmp	r3, #63	; 0x3f
 80013a0:	dd02      	ble.n	80013a8 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b40      	subs	r3, #64	; 0x40
 80013a6:	61fb      	str	r3, [r7, #28]
				j++;
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	3301      	adds	r3, #1
 80013ac:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <hist_restore_line+0x194>
 80013ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	1ad2      	subs	r2, r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d1e1      	bne.n	800138c <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	4413      	add	r3, r2
 80013d6:	2b3f      	cmp	r3, #63	; 0x3f
 80013d8:	dc0c      	bgt.n	80013f4 <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	3301      	adds	r3, #1
 80013e0:	18d1      	adds	r1, r2, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	68b8      	ldr	r0, [r7, #8]
 80013ee:	f00d fd5b 	bl	800eea8 <memcpy>
 80013f2:	e01a      	b.n	800142a <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80013fa:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3301      	adds	r3, #1
 8001402:	4413      	add	r3, r2
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	4619      	mov	r1, r3
 8001408:	68b8      	ldr	r0, [r7, #8]
 800140a:	f00d fd4d 	bl	800eea8 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	18d0      	adds	r0, r2, r3
 8001414:	68f9      	ldr	r1, [r7, #12]
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	4413      	add	r3, r2
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	461a      	mov	r2, r3
 8001426:	f00d fd3f 	bl	800eea8 <memcpy>
			}
			return pThis->ring_buf[header];
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	4413      	add	r3, r2
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	e003      	b.n	800143c <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 8001434:	2300      	movs	r3, #0
 8001436:	e001      	b.n	800143c <hist_restore_line+0x208>
		}
	}
	return -1;
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
}
 800143c:	4618      	mov	r0, r3
 800143e:	3730      	adds	r7, #48	; 0x30
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
	int ind = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8001458:	e002      	b.n	8001460 <split+0x1c>
			ind++;
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	3301      	adds	r3, #1
 800145e:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4413      	add	r3, r2
 8001466:	3354      	adds	r3, #84	; 0x54
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d103      	bne.n	8001476 <split+0x32>
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	429a      	cmp	r2, r3
 8001474:	dbf1      	blt.n	800145a <split+0x16>
		}
		if (!(ind < limit)) return i;
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	429a      	cmp	r2, r3
 800147c:	db01      	blt.n	8001482 <split+0x3e>
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	e024      	b.n	80014cc <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	1c58      	adds	r0, r3, #1
 800148e:	6178      	str	r0, [r7, #20]
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	4403      	add	r3, r0
 8001496:	440a      	add	r2, r1
 8001498:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2b04      	cmp	r3, #4
 800149e:	dd05      	ble.n	80014ac <split+0x68>
			return -1;
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
 80014a4:	e012      	b.n	80014cc <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	3301      	adds	r3, #1
 80014aa:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4413      	add	r3, r2
 80014b2:	3354      	adds	r3, #84	; 0x54
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <split+0x7e>
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dbf1      	blt.n	80014a6 <split+0x62>
		}
		if (!(ind < limit)) return i;
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	dbca      	blt.n	8001460 <split+0x1c>
 80014ca:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	371c      	adds	r7, #28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014e8:	4610      	mov	r0, r2
 80014ea:	4798      	blx	r3
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001502:	4803      	ldr	r0, [pc, #12]	; (8001510 <terminal_backspace+0x1c>)
 8001504:	4798      	blx	r3
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	0800eff8 	.word	0x0800eff8

08001514 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001522:	4803      	ldr	r0, [pc, #12]	; (8001530 <terminal_newline+0x1c>)
 8001524:	4798      	blx	r3
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	0800f000 	.word	0x0800f000

08001534 <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	2300      	movs	r3, #0
 8001544:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001550:	d235      	bcs.n	80015be <u16bit_to_str+0x8a>
		while (nmb > 0) {
 8001552:	e01a      	b.n	800158a <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <u16bit_to_str+0x9c>)
 8001558:	fba3 2301 	umull	r2, r3, r3, r1
 800155c:	08da      	lsrs	r2, r3, #3
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	1aca      	subs	r2, r1, r3
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	1c59      	adds	r1, r3, #1
 800156e:	6179      	str	r1, [r7, #20]
 8001570:	3230      	adds	r2, #48	; 0x30
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	f107 0118 	add.w	r1, r7, #24
 8001578:	440b      	add	r3, r1
 800157a:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <u16bit_to_str+0x9c>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	08db      	lsrs	r3, r3, #3
 8001588:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1e1      	bne.n	8001554 <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	e00f      	b.n	80015b6 <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	1e5a      	subs	r2, r3, #1
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	1c59      	adds	r1, r3, #1
 80015a2:	6039      	str	r1, [r7, #0]
 80015a4:	f107 0118 	add.w	r1, r7, #24
 80015a8:	440a      	add	r2, r1
 80015aa:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80015ae:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	3301      	adds	r3, #1
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	dbeb      	blt.n	8001596 <u16bit_to_str+0x62>
	}
	*buf = '\0';
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
	return buf;
 80015c4:	683b      	ldr	r3, [r7, #0]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	371c      	adds	r7, #28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	cccccccd 	.word	0xcccccccd

080015d4 <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	4a1d      	ldr	r2, [pc, #116]	; (8001668 <terminal_move_cursor+0x94>)
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	4611      	mov	r1, r2
 80015f8:	8019      	strh	r1, [r3, #0]
 80015fa:	3302      	adds	r3, #2
 80015fc:	0c12      	lsrs	r2, r2, #16
 80015fe:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	dd0f      	ble.n	8001626 <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	3302      	adds	r3, #2
 800160e:	4619      	mov	r1, r3
 8001610:	4610      	mov	r0, r2
 8001612:	f7ff ff8f 	bl	8001534 <u16bit_to_str>
 8001616:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	4914      	ldr	r1, [pc, #80]	; (800166c <terminal_move_cursor+0x98>)
 800161c:	461a      	mov	r2, r3
 800161e:	460b      	mov	r3, r1
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	8013      	strh	r3, [r2, #0]
 8001624:	e013      	b.n	800164e <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	da18      	bge.n	800165e <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	425b      	negs	r3, r3
 8001630:	461a      	mov	r2, r3
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	3302      	adds	r3, #2
 8001638:	4619      	mov	r1, r3
 800163a:	4610      	mov	r0, r2
 800163c:	f7ff ff7a 	bl	8001534 <u16bit_to_str>
 8001640:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	490a      	ldr	r1, [pc, #40]	; (8001670 <terminal_move_cursor+0x9c>)
 8001646:	461a      	mov	r2, r3
 8001648:	460b      	mov	r3, r1
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001654:	f107 020c 	add.w	r2, r7, #12
 8001658:	4610      	mov	r0, r2
 800165a:	4798      	blx	r3
 800165c:	e000      	b.n	8001660 <terminal_move_cursor+0x8c>
		return;
 800165e:	bf00      	nop
}
 8001660:	3720      	adds	r7, #32
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	0800f004 	.word	0x0800f004
 800166c:	0800f008 	.word	0x0800f008
 8001670:	0800f00c 	.word	0x0800f00c

08001674 <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4a15      	ldr	r2, [pc, #84]	; (80016d8 <terminal_reset_cursor+0x64>)
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	4611      	mov	r1, r2
 8001686:	8019      	strh	r1, [r3, #0]
 8001688:	3302      	adds	r3, #2
 800168a:	0c12      	lsrs	r2, r2, #16
 800168c:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	3302      	adds	r3, #2
 8001694:	4619      	mov	r1, r3
 8001696:	203a      	movs	r0, #58	; 0x3a
 8001698:	f7ff ff4c 	bl	8001534 <u16bit_to_str>
 800169c:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <terminal_reset_cursor+0x68>)
 80016a2:	6810      	ldr	r0, [r2, #0]
 80016a4:	6018      	str	r0, [r3, #0]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3303      	adds	r3, #3
 80016aa:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 80016ac:	69f9      	ldr	r1, [r7, #28]
 80016ae:	2005      	movs	r0, #5
 80016b0:	f7ff ff40 	bl	8001534 <u16bit_to_str>
 80016b4:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	4909      	ldr	r1, [pc, #36]	; (80016e0 <terminal_reset_cursor+0x6c>)
 80016ba:	461a      	mov	r2, r3
 80016bc:	460b      	mov	r3, r1
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016c8:	f107 020c 	add.w	r2, r7, #12
 80016cc:	4610      	mov	r0, r2
 80016ce:	4798      	blx	r3
}
 80016d0:	bf00      	nop
 80016d2:	3720      	adds	r7, #32
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	0800f004 	.word	0x0800f004
 80016dc:	0800f010 	.word	0x0800f010
 80016e0:	0800f008 	.word	0x0800f008

080016e4 <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016f6:	4816      	ldr	r0, [pc, #88]	; (8001750 <terminal_print_line+0x6c>)
 80016f8:	4798      	blx	r3

	char nch [] = {0,0};
 80016fa:	2300      	movs	r3, #0
 80016fc:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	e014      	b.n	800172e <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	4413      	add	r3, r2
 800170a:	3354      	adds	r3, #84	; 0x54
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 8001710:	7c3b      	ldrb	r3, [r7, #16]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <terminal_print_line+0x36>
			nch[0] = ' ';
 8001716:	2320      	movs	r3, #32
 8001718:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001720:	f107 0210 	add.w	r2, r7, #16
 8001724:	4610      	mov	r0, r2
 8001726:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	429a      	cmp	r2, r3
 8001738:	dbe4      	blt.n	8001704 <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f7ff ff9a 	bl	8001674 <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f7ff ff46 	bl	80015d4 <terminal_move_cursor>
}
 8001748:	bf00      	nop
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	0800f014 	.word	0x0800f014

08001754 <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3354      	adds	r3, #84	; 0x54
 8001762:	2233      	movs	r2, #51	; 0x33
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f00d fbc6 	bl	800eef8 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3304      	adds	r3, #4
 8001770:	2240      	movs	r2, #64	; 0x40
 8001772:	2100      	movs	r1, #0
 8001774:	4618      	mov	r0, r3
 8001776:	f00d fbbf 	bl	800eef8 <memset>
	pThis->ring_hist.begin = 0;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pThis->execute = NULL;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	pThis->get_completion = NULL;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif
	pThis->prompt_str = prompt_default;
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <microrl_init+0x78>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000004 	.word	0x20000004

080017d0 <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	1d18      	adds	r0, r3, #4
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3354      	adds	r3, #84	; 0x54
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff fcfb 	bl	8001234 <hist_restore_line>
 800183e:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	db1a      	blt.n	800187c <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	3354      	adds	r3, #84	; 0x54
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		terminal_reset_cursor (pThis);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ff04 	bl	8001674 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001872:	461a      	mov	r2, r3
 8001874:	2100      	movs	r1, #0
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ff34 	bl	80016e4 <terminal_print_line>
	}
}
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	2b5b      	cmp	r3, #91	; 0x5b
 8001894:	d104      	bne.n	80018a0 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
		return 0;
 800189c:	2300      	movs	r3, #0
 800189e:	e07b      	b.n	8001998 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d14f      	bne.n	8001948 <escape_process+0xc4>
		if (ch == 'A') {
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	2b41      	cmp	r3, #65	; 0x41
 80018ac:	d105      	bne.n	80018ba <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 80018ae:	2100      	movs	r1, #0
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ffb7 	bl	8001824 <hist_search>
#endif
			return 1;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e06e      	b.n	8001998 <escape_process+0x114>
		} else if (ch == 'B') {
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	2b42      	cmp	r3, #66	; 0x42
 80018be:	d105      	bne.n	80018cc <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 80018c0:	2101      	movs	r1, #1
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffae 	bl	8001824 <hist_search>
#endif
			return 1;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e065      	b.n	8001998 <escape_process+0x114>
		} else if (ch == 'C') {
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	2b43      	cmp	r3, #67	; 0x43
 80018d0:	d114      	bne.n	80018fc <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018de:	429a      	cmp	r2, r3
 80018e0:	da0a      	bge.n	80018f8 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 80018e2:	2101      	movs	r1, #1
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff fe75 	bl	80015d4 <terminal_move_cursor>
				pThis->cursor++;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e04d      	b.n	8001998 <escape_process+0x114>
		} else if (ch == 'D') {
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	2b44      	cmp	r3, #68	; 0x44
 8001900:	d112      	bne.n	8001928 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001908:	2b00      	cmp	r3, #0
 800190a:	dd0b      	ble.n	8001924 <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 800190c:	f04f 31ff 	mov.w	r1, #4294967295
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff fe5f 	bl	80015d4 <terminal_move_cursor>
				pThis->cursor--;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800191c:	1e5a      	subs	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 8001924:	2301      	movs	r3, #1
 8001926:	e037      	b.n	8001998 <escape_process+0x114>
		} else if (ch == '7') {
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	2b37      	cmp	r3, #55	; 0x37
 800192c:	d104      	bne.n	8001938 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2202      	movs	r2, #2
 8001932:	701a      	strb	r2, [r3, #0]
			return 0;
 8001934:	2300      	movs	r3, #0
 8001936:	e02f      	b.n	8001998 <escape_process+0x114>
		} else if (ch == '8') {
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	2b38      	cmp	r3, #56	; 0x38
 800193c:	d12b      	bne.n	8001996 <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2203      	movs	r2, #3
 8001942:	701a      	strb	r2, [r3, #0]
			return 0;
 8001944:	2300      	movs	r3, #0
 8001946:	e027      	b.n	8001998 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	2b7e      	cmp	r3, #126	; 0x7e
 800194c:	d123      	bne.n	8001996 <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d108      	bne.n	8001968 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff fe8c 	bl	8001674 <terminal_reset_cursor>
			pThis->cursor = 0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 8001964:	2301      	movs	r3, #1
 8001966:	e017      	b.n	8001998 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d112      	bne.n	8001996 <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	4619      	mov	r1, r3
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff fe27 	bl	80015d4 <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 8001996:	2301      	movs	r3, #1
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	2b32      	cmp	r3, #50	; 0x32
 80019b8:	dc60      	bgt.n	8001a7c <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019c6:	4619      	mov	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	440b      	add	r3, r1
 80019cc:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3354      	adds	r3, #84	; 0x54
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor + len,
 80019d8:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019e6:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 80019e8:	461a      	mov	r2, r3
 80019ea:	f00d fa6b 	bl	800eec4 <memmove>
		for (i = 0; i < len; i++) {
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	e025      	b.n	8001a40 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	441a      	add	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	440b      	add	r3, r1
 8001a04:	7811      	ldrb	r1, [r2, #0]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	4413      	add	r3, r2
 8001a0a:	460a      	mov	r2, r1
 8001a0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	4413      	add	r3, r2
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a22:	2b20      	cmp	r3, #32
 8001a24:	d109      	bne.n	8001a3a <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	4413      	add	r3, r2
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	dbd5      	blt.n	80019f4 <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	441a      	add	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdlen += len;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	441a      	add	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4413      	add	r3, r2
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <microrl_insert_text+0xde>
	}
	return false;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	dd31      	ble.n	8001afc <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff fd2b 	bl	80014f4 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3354      	adds	r3, #84	; 0x54
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor-1,
 8001ab8:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 8001aca:	461a      	mov	r2, r3
 8001acc:	f00d f9fa 	bl	800eec4 <memmove>
		pThis->cursor--;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ad6:	1e5a      	subs	r2, r3, #1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af4:	1e5a      	subs	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f7fe fb26 	bl	8000164 <strlen>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e019      	b.n	8001b56 <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fb19 	bl	8000164 <strlen>
 8001b32:	4602      	mov	r2, r0
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d20a      	bcs.n	8001b50 <common_len+0x4c>
			shortest = arr[i];
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f7fe fb0c 	bl	8000164 <strlen>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3301      	adds	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1de      	bne.n	8001b22 <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	e01f      	b.n	8001baa <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	e012      	b.n	8001b96 <common_len+0x92>
			if (shortest[i] != arr[j][i])
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4413      	add	r3, r2
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	440b      	add	r3, r1
 8001b80:	6819      	ldr	r1, [r3, #0]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	440b      	add	r3, r1
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <common_len+0x8c>
				return i;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	e011      	b.n	8001bb4 <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	3301      	adds	r3, #1
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1e5      	bne.n	8001b70 <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	dbdb      	blt.n	8001b6a <common_len+0x66>

	return i;
 8001bb2:	697b      	ldr	r3, [r7, #20]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 8001bbc:	b5b0      	push	{r4, r5, r7, lr}
 8001bbe:	b08c      	sub	sp, #48	; 0x30
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 809c 	beq.w	8001d08 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bd6:	f107 020c 	add.w	r2, r7, #12
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff fc31 	bl	8001444 <split>
 8001be2:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bea:	3b01      	subs	r3, #1
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d109      	bne.n	8001c0c <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 8001bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001c04:	4413      	add	r3, r2
 8001c06:	4a42      	ldr	r2, [pc, #264]	; (8001d10 <microrl_get_complite+0x154>)
 8001c08:	f843 2c24 	str.w	r2, [r3, #-36]
	compl_token = pThis->get_completion (status, tkn_arr);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c12:	f107 020c 	add.w	r2, r7, #12
 8001c16:	4611      	mov	r1, r2
 8001c18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c1a:	4798      	blx	r3
 8001c1c:	6238      	str	r0, [r7, #32]
	if (compl_token[0] != NULL) {
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d071      	beq.n	8001d0a <microrl_get_complite+0x14e>
		int i = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
		int len;

		if (compl_token[1] == NULL) {
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d107      	bne.n	8001c44 <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fa93 	bl	8000164 <strlen>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
 8001c42:	e026      	b.n	8001c92 <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8001c44:	6a38      	ldr	r0, [r7, #32]
 8001c46:	f7ff ff5d 	bl	8001b04 <common_len>
 8001c4a:	6278      	str	r0, [r7, #36]	; 0x24
			terminal_newline (pThis);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff fc61 	bl	8001514 <terminal_newline>
			while (compl_token [i] != NULL) {
 8001c52:	e011      	b.n	8001c78 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c5c:	0092      	lsls	r2, r2, #2
 8001c5e:	6a39      	ldr	r1, [r7, #32]
 8001c60:	440a      	add	r2, r1
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	4610      	mov	r0, r2
 8001c66:	4798      	blx	r3
				pThis->print (" ");
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c6e:	4829      	ldr	r0, [pc, #164]	; (8001d14 <microrl_get_complite+0x158>)
 8001c70:	4798      	blx	r3
				i++;
 8001c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c74:	3301      	adds	r3, #1
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
			while (compl_token [i] != NULL) {
 8001c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	6a3a      	ldr	r2, [r7, #32]
 8001c7e:	4413      	add	r3, r2
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1e6      	bne.n	8001c54 <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff fc44 	bl	8001514 <terminal_newline>
			print_prompt (pThis);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fc22 	bl	80014d6 <print_prompt>
		}
		
		if (len) {
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d02b      	beq.n	8001cf0 <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	681c      	ldr	r4, [r3, #0]
 8001c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fa59 	bl	8000164 <strlen>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 8001cb6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fa4b 	bl	8000164 <strlen>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff fe62 	bl	80019a0 <microrl_insert_text>
			if (compl_token[1] == NULL) 
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	3304      	adds	r3, #4
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d104      	bne.n	8001cf0 <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	490a      	ldr	r1, [pc, #40]	; (8001d14 <microrl_get_complite+0x158>)
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fe58 	bl	80019a0 <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff fcbf 	bl	8001674 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2100      	movs	r1, #0
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff fcef 	bl	80016e4 <terminal_print_line>
 8001d06:	e000      	b.n	8001d0a <microrl_get_complite+0x14e>
		return;
 8001d08:	bf00      	nop
	} 
}
 8001d0a:	3730      	adds	r7, #48	; 0x30
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d10:	0800f018 	.word	0x0800f018
 8001d14:	0800f01c 	.word	0x0800f01c

08001d18 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff fbf7 	bl	8001514 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	dd0a      	ble.n	8001d46 <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	1d18      	adds	r0, r3, #4
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d40:	461a      	mov	r2, r3
 8001d42:	f7ff fa08 	bl	8001156 <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4c:	f107 0208 	add.w	r2, r7, #8
 8001d50:	4619      	mov	r1, r3
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff fb76 	bl	8001444 <split>
 8001d58:	61f8      	str	r0, [r7, #28]
	if (status == -1){
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d60:	d109      	bne.n	8001d76 <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d68:	4817      	ldr	r0, [pc, #92]	; (8001dc8 <new_line_handler+0xb0>)
 8001d6a:	4798      	blx	r3
		pThis->print (ENDL);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d72:	4816      	ldr	r0, [pc, #88]	; (8001dcc <new_line_handler+0xb4>)
 8001d74:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	dd0c      	ble.n	8001d96 <new_line_handler+0x7e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8c:	f107 0208 	add.w	r2, r7, #8
 8001d90:	4611      	mov	r1, r2
 8001d92:	69f8      	ldr	r0, [r7, #28]
 8001d94:	4798      	blx	r3
	print_prompt (pThis);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff fb9d 	bl	80014d6 <print_prompt>
	pThis->cmdlen = 0;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3354      	adds	r3, #84	; 0x54
 8001db0:	2233      	movs	r2, #51	; 0x33
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f00d f89f 	bl	800eef8 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8001dc0:	bf00      	nop
 8001dc2:	3720      	adds	r7, #32
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	0800f020 	.word	0x0800f020
 8001dcc:	0800f000 	.word	0x0800f000

08001dd0 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	785b      	ldrb	r3, [r3, #1]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00d      	beq.n	8001dfe <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	4619      	mov	r1, r3
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff fd4b 	bl	8001884 <escape_process>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 81e3 	beq.w	80021bc <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 8001dfc:	e1de      	b.n	80021bc <microrl_insert_char+0x3ec>
		switch (ch) {
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	2b7e      	cmp	r3, #126	; 0x7e
 8001e04:	f200 81af 	bhi.w	8002166 <microrl_insert_char+0x396>
 8001e08:	a201      	add	r2, pc, #4	; (adr r2, 8001e10 <microrl_insert_char+0x40>)
 8001e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0e:	bf00      	nop
 8001e10:	080020a3 	.word	0x080020a3
 8001e14:	080020db 	.word	0x080020db
 8001e18:	08002153 	.word	0x08002153
 8001e1c:	08002167 	.word	0x08002167
 8001e20:	0800207f 	.word	0x0800207f
 8001e24:	080020b3 	.word	0x080020b3
 8001e28:	08002167 	.word	0x08002167
 8001e2c:	08002113 	.word	0x08002113
 8001e30:	08002035 	.word	0x08002035
 8001e34:	0800200d 	.word	0x0800200d
 8001e38:	08002067 	.word	0x08002067
 8001e3c:	08002167 	.word	0x08002167
 8001e40:	0800200d 	.word	0x0800200d
 8001e44:	08002109 	.word	0x08002109
 8001e48:	08002167 	.word	0x08002167
 8001e4c:	080020ff 	.word	0x080020ff
 8001e50:	08002167 	.word	0x08002167
 8001e54:	0800212f 	.word	0x0800212f
 8001e58:	08002167 	.word	0x08002167
 8001e5c:	08002167 	.word	0x08002167
 8001e60:	0800204b 	.word	0x0800204b
 8001e64:	08002167 	.word	0x08002167
 8001e68:	08002167 	.word	0x08002167
 8001e6c:	08002167 	.word	0x08002167
 8001e70:	08002167 	.word	0x08002167
 8001e74:	08002167 	.word	0x08002167
 8001e78:	0800203d 	.word	0x0800203d
 8001e7c:	08002167 	.word	0x08002167
 8001e80:	08002167 	.word	0x08002167
 8001e84:	08002167 	.word	0x08002167
 8001e88:	08002167 	.word	0x08002167
 8001e8c:	08002167 	.word	0x08002167
 8001e90:	08002167 	.word	0x08002167
 8001e94:	08002167 	.word	0x08002167
 8001e98:	08002167 	.word	0x08002167
 8001e9c:	08002167 	.word	0x08002167
 8001ea0:	08002167 	.word	0x08002167
 8001ea4:	08002167 	.word	0x08002167
 8001ea8:	08002167 	.word	0x08002167
 8001eac:	08002167 	.word	0x08002167
 8001eb0:	08002167 	.word	0x08002167
 8001eb4:	08002167 	.word	0x08002167
 8001eb8:	08002167 	.word	0x08002167
 8001ebc:	08002167 	.word	0x08002167
 8001ec0:	08002167 	.word	0x08002167
 8001ec4:	08002167 	.word	0x08002167
 8001ec8:	08002167 	.word	0x08002167
 8001ecc:	08002167 	.word	0x08002167
 8001ed0:	08002167 	.word	0x08002167
 8001ed4:	08002167 	.word	0x08002167
 8001ed8:	08002167 	.word	0x08002167
 8001edc:	08002167 	.word	0x08002167
 8001ee0:	08002167 	.word	0x08002167
 8001ee4:	08002167 	.word	0x08002167
 8001ee8:	08002167 	.word	0x08002167
 8001eec:	08002167 	.word	0x08002167
 8001ef0:	08002167 	.word	0x08002167
 8001ef4:	08002167 	.word	0x08002167
 8001ef8:	08002167 	.word	0x08002167
 8001efc:	08002167 	.word	0x08002167
 8001f00:	08002167 	.word	0x08002167
 8001f04:	08002167 	.word	0x08002167
 8001f08:	08002167 	.word	0x08002167
 8001f0c:	08002167 	.word	0x08002167
 8001f10:	08002167 	.word	0x08002167
 8001f14:	08002167 	.word	0x08002167
 8001f18:	08002167 	.word	0x08002167
 8001f1c:	08002167 	.word	0x08002167
 8001f20:	08002167 	.word	0x08002167
 8001f24:	08002167 	.word	0x08002167
 8001f28:	08002167 	.word	0x08002167
 8001f2c:	08002167 	.word	0x08002167
 8001f30:	08002167 	.word	0x08002167
 8001f34:	08002167 	.word	0x08002167
 8001f38:	08002167 	.word	0x08002167
 8001f3c:	08002167 	.word	0x08002167
 8001f40:	08002167 	.word	0x08002167
 8001f44:	08002167 	.word	0x08002167
 8001f48:	08002167 	.word	0x08002167
 8001f4c:	08002167 	.word	0x08002167
 8001f50:	08002167 	.word	0x08002167
 8001f54:	08002167 	.word	0x08002167
 8001f58:	08002167 	.word	0x08002167
 8001f5c:	08002167 	.word	0x08002167
 8001f60:	08002167 	.word	0x08002167
 8001f64:	08002167 	.word	0x08002167
 8001f68:	08002167 	.word	0x08002167
 8001f6c:	08002167 	.word	0x08002167
 8001f70:	08002167 	.word	0x08002167
 8001f74:	08002167 	.word	0x08002167
 8001f78:	08002167 	.word	0x08002167
 8001f7c:	08002167 	.word	0x08002167
 8001f80:	08002167 	.word	0x08002167
 8001f84:	08002167 	.word	0x08002167
 8001f88:	08002167 	.word	0x08002167
 8001f8c:	08002167 	.word	0x08002167
 8001f90:	08002167 	.word	0x08002167
 8001f94:	08002167 	.word	0x08002167
 8001f98:	08002167 	.word	0x08002167
 8001f9c:	08002167 	.word	0x08002167
 8001fa0:	08002167 	.word	0x08002167
 8001fa4:	08002167 	.word	0x08002167
 8001fa8:	08002167 	.word	0x08002167
 8001fac:	08002167 	.word	0x08002167
 8001fb0:	08002167 	.word	0x08002167
 8001fb4:	08002167 	.word	0x08002167
 8001fb8:	08002167 	.word	0x08002167
 8001fbc:	08002167 	.word	0x08002167
 8001fc0:	08002167 	.word	0x08002167
 8001fc4:	08002167 	.word	0x08002167
 8001fc8:	08002167 	.word	0x08002167
 8001fcc:	08002167 	.word	0x08002167
 8001fd0:	08002167 	.word	0x08002167
 8001fd4:	08002167 	.word	0x08002167
 8001fd8:	08002167 	.word	0x08002167
 8001fdc:	08002167 	.word	0x08002167
 8001fe0:	08002167 	.word	0x08002167
 8001fe4:	08002167 	.word	0x08002167
 8001fe8:	08002167 	.word	0x08002167
 8001fec:	08002167 	.word	0x08002167
 8001ff0:	08002167 	.word	0x08002167
 8001ff4:	08002167 	.word	0x08002167
 8001ff8:	08002167 	.word	0x08002167
 8001ffc:	08002167 	.word	0x08002167
 8002000:	08002167 	.word	0x08002167
 8002004:	08002167 	.word	0x08002167
 8002008:	08002113 	.word	0x08002113
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	789b      	ldrb	r3, [r3, #2]
 8002010:	461a      	mov	r2, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b0d      	cmp	r3, #13
 8002016:	d101      	bne.n	800201c <microrl_insert_char+0x24c>
 8002018:	230a      	movs	r3, #10
 800201a:	e000      	b.n	800201e <microrl_insert_char+0x24e>
 800201c:	230d      	movs	r3, #13
 800201e:	4293      	cmp	r3, r2
 8002020:	f000 80c1 	beq.w	80021a6 <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fe73 	bl	8001d18 <new_line_handler>
				break;
 8002032:	e0c3      	b.n	80021bc <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff fdc1 	bl	8001bbc <microrl_get_complite>
			break;
 800203a:	e0bf      	b.n	80021bc <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	705a      	strb	r2, [r3, #1]
			break;
 8002042:	e0bb      	b.n	80021bc <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff fd1e 	bl	8001a86 <microrl_backspace>
					while (pThis->cursor > 0) {
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002050:	2b00      	cmp	r3, #0
 8002052:	dcf7      	bgt.n	8002044 <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800205a:	461a      	mov	r2, r3
 800205c:	2100      	movs	r1, #0
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff fb40 	bl	80016e4 <terminal_print_line>
			break;
 8002064:	e0aa      	b.n	80021bc <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800206c:	4855      	ldr	r0, [pc, #340]	; (80021c4 <microrl_insert_char+0x3f4>)
 800206e:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800207c:	e09e      	b.n	80021bc <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	4619      	mov	r1, r3
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff faa0 	bl	80015d4 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 80020a0:	e08c      	b.n	80021bc <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff fae6 	bl	8001674 <terminal_reset_cursor>
				pThis->cursor = 0;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 80020b0:	e084      	b.n	80021bc <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	429a      	cmp	r2, r3
 80020c0:	da73      	bge.n	80021aa <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 80020c2:	2101      	movs	r1, #1
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff fa85 	bl	80015d4 <terminal_move_cursor>
				pThis->cursor++;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 80020d8:	e067      	b.n	80021aa <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d064      	beq.n	80021ae <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff fa73 	bl	80015d4 <terminal_move_cursor>
				pThis->cursor--;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020f4:	1e5a      	subs	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 80020fc:	e057      	b.n	80021ae <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 80020fe:	2100      	movs	r1, #0
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff fb8f 	bl	8001824 <hist_search>
			break;
 8002106:	e059      	b.n	80021bc <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 8002108:	2101      	movs	r1, #1
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff fb8a 	bl	8001824 <hist_search>
			break;
 8002110:	e054      	b.n	80021bc <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff fcb7 	bl	8001a86 <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002124:	461a      	mov	r2, r3
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff fadc 	bl	80016e4 <terminal_print_line>
			break;
 800212c:	e046      	b.n	80021bc <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff f9f0 	bl	8001514 <terminal_newline>
				print_prompt (pThis);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff f9ce 	bl	80014d6 <print_prompt>
				terminal_reset_cursor (pThis);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fa9a 	bl	8001674 <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002146:	461a      	mov	r2, r3
 8002148:	2100      	movs	r1, #0
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff faca 	bl	80016e4 <terminal_print_line>
			break;
 8002150:	e034      	b.n	80021bc <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002158:	2b00      	cmp	r3, #0
 800215a:	d02a      	beq.n	80021b2 <microrl_insert_char+0x3e2>
				pThis->sigint();
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002162:	4798      	blx	r3
			break;
 8002164:	e025      	b.n	80021b2 <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	2b20      	cmp	r3, #32
 800216a:	d104      	bne.n	8002176 <microrl_insert_char+0x3a6>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002172:	2b00      	cmp	r3, #0
 8002174:	d01f      	beq.n	80021b6 <microrl_insert_char+0x3e6>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b1f      	cmp	r3, #31
 800217a:	dd1c      	ble.n	80021b6 <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 800217c:	463b      	mov	r3, r7
 800217e:	2201      	movs	r2, #1
 8002180:	4619      	mov	r1, r3
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff fc0c 	bl	80019a0 <microrl_insert_text>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d015      	beq.n	80021ba <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002194:	1e59      	subs	r1, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800219c:	461a      	mov	r2, r3
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff faa0 	bl	80016e4 <terminal_print_line>
			break;
 80021a4:	e009      	b.n	80021ba <microrl_insert_char+0x3ea>
					break;
 80021a6:	bf00      	nop
 80021a8:	e008      	b.n	80021bc <microrl_insert_char+0x3ec>
			break;
 80021aa:	bf00      	nop
 80021ac:	e006      	b.n	80021bc <microrl_insert_char+0x3ec>
			break;
 80021ae:	bf00      	nop
 80021b0:	e004      	b.n	80021bc <microrl_insert_char+0x3ec>
			break;
 80021b2:	bf00      	nop
 80021b4:	e002      	b.n	80021bc <microrl_insert_char+0x3ec>
	}
 80021b6:	bf00      	nop
 80021b8:	e000      	b.n	80021bc <microrl_insert_char+0x3ec>
			break;
 80021ba:	bf00      	nop
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	0800f014 	.word	0x0800f014

080021c8 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <microrl_print_char+0x20>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	79fa      	ldrb	r2, [r7, #7]
 80021d8:	4611      	mov	r1, r2
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fdf8 	bl	8001dd0 <microrl_insert_char>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000008 	.word	0x20000008

080021ec <print>:

void print (const char * str)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 80021f4:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <print+0x84>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	f083 0301 	eor.w	r3, r3, #1
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <print+0x1e>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b1b      	cmp	r3, #27
 8002208:	d02b      	beq.n	8002262 <print+0x76>
		return;
	if (!CDC_is_ready)
 800220a:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <print+0x88>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	f083 0301 	eor.w	r3, r3, #1
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d126      	bne.n	8002266 <print+0x7a>
		return;
	uint16_t len = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 800221c:	89fb      	ldrh	r3, [r7, #14]
 800221e:	3301      	adds	r3, #1
 8002220:	81fb      	strh	r3, [r7, #14]
 8002222:	89fb      	ldrh	r3, [r7, #14]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	4413      	add	r3, r2
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f6      	bne.n	800221c <print+0x30>
	uint32_t timeout = HAL_GetTick();
 800222e:	f001 f8a7 	bl	8003380 <HAL_GetTick>
 8002232:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8002234:	e006      	b.n	8002244 <print+0x58>
		if (HAL_GetTick() - timeout >= 5)
 8002236:	f001 f8a3 	bl	8003380 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b04      	cmp	r3, #4
 8002242:	d807      	bhi.n	8002254 <print+0x68>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <print+0x8c>)
 8002246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800224a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f1      	bne.n	8002236 <print+0x4a>
 8002252:	e000      	b.n	8002256 <print+0x6a>
			break;
 8002254:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 8002256:	89fb      	ldrh	r3, [r7, #14]
 8002258:	4619      	mov	r1, r3
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f00c fa22 	bl	800e6a4 <CDC_Transmit_FS>
 8002260:	e002      	b.n	8002268 <print+0x7c>
		return;
 8002262:	bf00      	nop
 8002264:	e000      	b.n	8002268 <print+0x7c>
		return;
 8002266:	bf00      	nop
}
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	2000000c 	.word	0x2000000c
 8002274:	200001ae 	.word	0x200001ae
 8002278:	20002718 	.word	0x20002718

0800227c <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	e010      	b.n	80022ae <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 800228c:	490c      	ldr	r1, [pc, #48]	; (80022c0 <find_color_by_name+0x44>)
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4413      	add	r3, r2
 800229a:	440b      	add	r3, r1
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	79fa      	ldrb	r2, [r7, #7]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d101      	bne.n	80022a8 <find_color_by_name+0x2c>
		{
			return i;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	e006      	b.n	80022b6 <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	3301      	adds	r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b10      	cmp	r3, #16
 80022b2:	d9eb      	bls.n	800228c <find_color_by_name+0x10>
		}
	}
	return 0;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	0800f598 	.word	0x0800f598

080022c4 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff ffd2 	bl	800227c <find_color_by_name>
 80022d8:	4602      	mov	r2, r0
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	4a08      	ldr	r2, [pc, #32]	; (8002308 <print_color+0x44>)
 80022e6:	4413      	add	r3, r2
 80022e8:	3301      	adds	r3, #1
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff7e 	bl	80021ec <print>
	print(str);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ff7b 	bl	80021ec <print>
	print(COLOR_NC);
 80022f6:	4805      	ldr	r0, [pc, #20]	; (800230c <print_color+0x48>)
 80022f8:	f7ff ff78 	bl	80021ec <print>
	return 0;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	0800f598 	.word	0x0800f598
 800230c:	0800f038 	.word	0x0800f038

08002310 <str_length>:

int str_length(const char * str)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
	while (str[i])
 800231c:	e002      	b.n	8002324 <str_length+0x14>
		i++;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	3301      	adds	r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f6      	bne.n	800231e <str_length+0xe>
	return i;
 8002330:	68fb      	ldr	r3, [r7, #12]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <print_help>:


int print_help(int argc, const char * const * argv)
{
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
	print(_VER);
 8002346:	4862      	ldr	r0, [pc, #392]	; (80024d0 <print_help+0x194>)
 8002348:	f7ff ff50 	bl	80021ec <print>
	print(ENDL);
 800234c:	4861      	ldr	r0, [pc, #388]	; (80024d4 <print_help+0x198>)
 800234e:	f7ff ff4d 	bl	80021ec <print>
	print ("Use ");
 8002352:	4861      	ldr	r0, [pc, #388]	; (80024d8 <print_help+0x19c>)
 8002354:	f7ff ff4a 	bl	80021ec <print>
	print_color("TAB", C_GREEN);
 8002358:	2105      	movs	r1, #5
 800235a:	4860      	ldr	r0, [pc, #384]	; (80024dc <print_help+0x1a0>)
 800235c:	f7ff ffb2 	bl	80022c4 <print_color>
	print(" key for completion");
 8002360:	485f      	ldr	r0, [pc, #380]	; (80024e0 <print_help+0x1a4>)
 8002362:	f7ff ff43 	bl	80021ec <print>
	print (ENDL);
 8002366:	485b      	ldr	r0, [pc, #364]	; (80024d4 <print_help+0x198>)
 8002368:	f7ff ff40 	bl	80021ec <print>
	print ("Available commands:");
 800236c:	485d      	ldr	r0, [pc, #372]	; (80024e4 <print_help+0x1a8>)
 800236e:	f7ff ff3d 	bl	80021ec <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	e09e      	b.n	80024b6 <print_help+0x17a>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 8002378:	4a5b      	ldr	r2, [pc, #364]	; (80024e8 <print_help+0x1ac>)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	212c      	movs	r1, #44	; 0x2c
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238a:	d11f      	bne.n	80023cc <print_help+0x90>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3b01      	subs	r3, #1
 8002390:	4a55      	ldr	r2, [pc, #340]	; (80024e8 <print_help+0x1ac>)
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a0:	d004      	beq.n	80023ac <print_help+0x70>
				print_color(" aka ", C_L_PURPLE);
 80023a2:	210c      	movs	r1, #12
 80023a4:	4851      	ldr	r0, [pc, #324]	; (80024ec <print_help+0x1b0>)
 80023a6:	f7ff ff8d 	bl	80022c4 <print_color>
 80023aa:	e003      	b.n	80023b4 <print_help+0x78>
			else
				print_color("/", C_L_PURPLE);
 80023ac:	210c      	movs	r1, #12
 80023ae:	4850      	ldr	r0, [pc, #320]	; (80024f0 <print_help+0x1b4>)
 80023b0:	f7ff ff88 	bl	80022c4 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	222c      	movs	r2, #44	; 0x2c
 80023b8:	fb02 f303 	mul.w	r3, r2, r3
 80023bc:	4a4a      	ldr	r2, [pc, #296]	; (80024e8 <print_help+0x1ac>)
 80023be:	4413      	add	r3, r2
 80023c0:	3304      	adds	r3, #4
 80023c2:	210b      	movs	r1, #11
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff7d 	bl	80022c4 <print_color>
 80023ca:	e071      	b.n	80024b0 <print_help+0x174>
		}
		else
		{
			print(ENDL);
 80023cc:	4841      	ldr	r0, [pc, #260]	; (80024d4 <print_help+0x198>)
 80023ce:	f7ff ff0d 	bl	80021ec <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 80023d2:	f06f 0303 	mvn.w	r3, #3
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	e005      	b.n	80023e6 <print_help+0xaa>
				print(" ");
 80023da:	4846      	ldr	r0, [pc, #280]	; (80024f4 <print_help+0x1b8>)
 80023dc:	f7ff ff06 	bl	80021ec <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	3301      	adds	r3, #1
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	4a40      	ldr	r2, [pc, #256]	; (80024e8 <print_help+0x1ac>)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	212c      	movs	r1, #44	; 0x2c
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	dbef      	blt.n	80023da <print_help+0x9e>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	222c      	movs	r2, #44	; 0x2c
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <print_help+0x1ac>)
 8002404:	4413      	add	r3, r2
 8002406:	1d1a      	adds	r2, r3, #4
 8002408:	4937      	ldr	r1, [pc, #220]	; (80024e8 <print_help+0x1ac>)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	202c      	movs	r0, #44	; 0x2c
 800240e:	fb00 f303 	mul.w	r3, r0, r3
 8002412:	440b      	add	r3, r1
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4938      	ldr	r1, [pc, #224]	; (80024f8 <print_help+0x1bc>)
 8002418:	5ccb      	ldrb	r3, [r1, r3]
 800241a:	4619      	mov	r1, r3
 800241c:	4610      	mov	r0, r2
 800241e:	f7ff ff51 	bl	80022c4 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	e005      	b.n	8002434 <print_help+0xf8>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 8002428:	4832      	ldr	r0, [pc, #200]	; (80024f4 <print_help+0x1b8>)
 800242a:	f7ff fedf 	bl	80021ec <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3301      	adds	r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	4a2c      	ldr	r2, [pc, #176]	; (80024e8 <print_help+0x1ac>)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	212c      	movs	r1, #44	; 0x2c
 800243a:	fb01 f303 	mul.w	r3, r1, r3
 800243e:	4413      	add	r3, r2
 8002440:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8002442:	f1c3 040b 	rsb	r4, r3, #11
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	222c      	movs	r2, #44	; 0x2c
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	4a26      	ldr	r2, [pc, #152]	; (80024e8 <print_help+0x1ac>)
 8002450:	4413      	add	r3, r2
 8002452:	3304      	adds	r3, #4
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff5b 	bl	8002310 <str_length>
 800245a:	4603      	mov	r3, r0
 800245c:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	429a      	cmp	r2, r3
 8002462:	dbe1      	blt.n	8002428 <print_help+0xec>
			switch (microrl_actions[i].level){
 8002464:	4a20      	ldr	r2, [pc, #128]	; (80024e8 <print_help+0x1ac>)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <print_help+0x140>
 8002476:	2b01      	cmp	r3, #1
 8002478:	d004      	beq.n	8002484 <print_help+0x148>
 800247a:	e007      	b.n	800248c <print_help+0x150>
			case 0:
				print ("-");
 800247c:	481f      	ldr	r0, [pc, #124]	; (80024fc <print_help+0x1c0>)
 800247e:	f7ff feb5 	bl	80021ec <print>
				break;
 8002482:	e007      	b.n	8002494 <print_help+0x158>
			case 1:
				print ("^");
 8002484:	481e      	ldr	r0, [pc, #120]	; (8002500 <print_help+0x1c4>)
 8002486:	f7ff feb1 	bl	80021ec <print>
				break;
 800248a:	e003      	b.n	8002494 <print_help+0x158>
			default:
				print ("#");
 800248c:	481d      	ldr	r0, [pc, #116]	; (8002504 <print_help+0x1c8>)
 800248e:	f7ff fead 	bl	80021ec <print>
				break;
 8002492:	bf00      	nop
			}
			print (" ");
 8002494:	4817      	ldr	r0, [pc, #92]	; (80024f4 <print_help+0x1b8>)
 8002496:	f7ff fea9 	bl	80021ec <print>
			print (microrl_actions[i].help_msg);
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	222c      	movs	r2, #44	; 0x2c
 800249e:	fb02 f303 	mul.w	r3, r2, r3
 80024a2:	3308      	adds	r3, #8
 80024a4:	4a10      	ldr	r2, [pc, #64]	; (80024e8 <print_help+0x1ac>)
 80024a6:	4413      	add	r3, r2
 80024a8:	3305      	adds	r3, #5
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fe9e 	bl	80021ec <print>
	for (int i = 0; i < microrl_actions_length; i++)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	3301      	adds	r3, #1
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b11      	cmp	r3, #17
 80024ba:	f67f af5d 	bls.w	8002378 <print_help+0x3c>
		}
	}
	print(ENDL);
 80024be:	4805      	ldr	r0, [pc, #20]	; (80024d4 <print_help+0x198>)
 80024c0:	f7ff fe94 	bl	80021ec <print>
	return 0;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd90      	pop	{r4, r7, pc}
 80024ce:	bf00      	nop
 80024d0:	0800f040 	.word	0x0800f040
 80024d4:	0800f050 	.word	0x0800f050
 80024d8:	0800f054 	.word	0x0800f054
 80024dc:	0800f05c 	.word	0x0800f05c
 80024e0:	0800f060 	.word	0x0800f060
 80024e4:	0800f074 	.word	0x0800f074
 80024e8:	0800f280 	.word	0x0800f280
 80024ec:	0800f088 	.word	0x0800f088
 80024f0:	0800f090 	.word	0x0800f090
 80024f4:	0800f094 	.word	0x0800f094
 80024f8:	0800f654 	.word	0x0800f654
 80024fc:	0800f098 	.word	0x0800f098
 8002500:	0800f09c 	.word	0x0800f09c
 8002504:	0800f0a0 	.word	0x0800f0a0

08002508 <execute>:



int execute (int argc, const char * const * argv)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
//	print_help(argc, argv);
//	return 0;
	int (*func)   (int argc, const char * const * argv ) = NULL;
 8002512:	2300      	movs	r3, #0
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 800251e:	2300      	movs	r3, #0
 8002520:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	e056      	b.n	80025d6 <execute+0xce>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	e045      	b.n	80025ba <execute+0xb2>
		{
			tokens_found = false;
 800252e:	2300      	movs	r3, #0
 8002530:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 8002532:	4a55      	ldr	r2, [pc, #340]	; (8002688 <execute+0x180>)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	212c      	movs	r1, #44	; 0x2c
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	4413      	add	r3, r2
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d001      	beq.n	800254e <execute+0x46>
				synonym_level = current_level; // save the synonym level
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002554:	d003      	beq.n	800255e <execute+0x56>
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	429a      	cmp	r2, r3
 800255c:	db31      	blt.n	80025c2 <execute+0xba>
				break;
			if (current_level == i)
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	429a      	cmp	r2, r3
 8002564:	d101      	bne.n	800256a <execute+0x62>
				last_main_synonym = n;
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	4413      	add	r3, r2
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	212c      	movs	r1, #44	; 0x2c
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	4942      	ldr	r1, [pc, #264]	; (8002688 <execute+0x180>)
 800257e:	440b      	add	r3, r1
 8002580:	3304      	adds	r3, #4
 8002582:	4619      	mov	r1, r3
 8002584:	4610      	mov	r0, r2
 8002586:	f7fd fde3 	bl	8000150 <strcmp>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d111      	bne.n	80025b4 <execute+0xac>
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	429a      	cmp	r2, r3
 8002596:	d10d      	bne.n	80025b4 <execute+0xac>
					(i == synonym_level))
			{
				tokens_found = true;
 8002598:	2301      	movs	r3, #1
 800259a:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	623a      	str	r2, [r7, #32]
 80025a2:	4a39      	ldr	r2, [pc, #228]	; (8002688 <execute+0x180>)
 80025a4:	212c      	movs	r1, #44	; 0x2c
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	3328      	adds	r3, #40	; 0x28
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80025b2:	e007      	b.n	80025c4 <execute+0xbc>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	3301      	adds	r3, #1
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b11      	cmp	r3, #17
 80025be:	d9b6      	bls.n	800252e <execute+0x26>
 80025c0:	e000      	b.n	80025c4 <execute+0xbc>
				break;
 80025c2:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 80025c4:	7efb      	ldrb	r3, [r7, #27]
 80025c6:	f083 0301 	eor.w	r3, r3, #1
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d107      	bne.n	80025e0 <execute+0xd8>
	for (int i = 0; i < argc; i++)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3301      	adds	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	429a      	cmp	r2, r3
 80025dc:	dba4      	blt.n	8002528 <execute+0x20>
 80025de:	e000      	b.n	80025e2 <execute+0xda>
			break;
 80025e0:	bf00      	nop
	}

	if (func != NULL)
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <execute+0xec>
	{
		return func(argc, argv); // function found
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	6839      	ldr	r1, [r7, #0]
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	4798      	blx	r3
 80025f0:	4603      	mov	r3, r0
 80025f2:	e045      	b.n	8002680 <execute+0x178>
	} else if (tokens_found)
 80025f4:	7efb      	ldrb	r3, [r7, #27]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d021      	beq.n	800263e <execute+0x136>
	{
		print_color ("command: '", C_L_RED);
 80025fa:	210a      	movs	r1, #10
 80025fc:	4823      	ldr	r0, [pc, #140]	; (800268c <execute+0x184>)
 80025fe:	f7ff fe61 	bl	80022c4 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	210a      	movs	r1, #10
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fe5b 	bl	80022c4 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 800260e:	210a      	movs	r1, #10
 8002610:	481f      	ldr	r0, [pc, #124]	; (8002690 <execute+0x188>)
 8002612:	f7ff fe57 	bl	80022c4 <print_color>
		print(ENDL);
 8002616:	481f      	ldr	r0, [pc, #124]	; (8002694 <execute+0x18c>)
 8002618:	f7ff fde8 	bl	80021ec <print>
		print_color ("use '", C_NC);
 800261c:	2100      	movs	r1, #0
 800261e:	481e      	ldr	r0, [pc, #120]	; (8002698 <execute+0x190>)
 8002620:	f7ff fe50 	bl	80022c4 <print_color>
		print_color ("?", C_GREEN);
 8002624:	2105      	movs	r1, #5
 8002626:	481d      	ldr	r0, [pc, #116]	; (800269c <execute+0x194>)
 8002628:	f7ff fe4c 	bl	80022c4 <print_color>
		print_color ("' for help", C_NC);
 800262c:	2100      	movs	r1, #0
 800262e:	481c      	ldr	r0, [pc, #112]	; (80026a0 <execute+0x198>)
 8002630:	f7ff fe48 	bl	80022c4 <print_color>
		print (ENDL);
 8002634:	4817      	ldr	r0, [pc, #92]	; (8002694 <execute+0x18c>)
 8002636:	f7ff fdd9 	bl	80021ec <print>
		return 1;
 800263a:	2301      	movs	r3, #1
 800263c:	e020      	b.n	8002680 <execute+0x178>
	}
	else
	{
		print_color ("command: '", C_RED);
 800263e:	2109      	movs	r1, #9
 8002640:	4812      	ldr	r0, [pc, #72]	; (800268c <execute+0x184>)
 8002642:	f7ff fe3f 	bl	80022c4 <print_color>
		print_color ((char*)argv[0], C_RED);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2109      	movs	r1, #9
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fe39 	bl	80022c4 <print_color>
		print_color ("' not found", C_RED);
 8002652:	2109      	movs	r1, #9
 8002654:	4813      	ldr	r0, [pc, #76]	; (80026a4 <execute+0x19c>)
 8002656:	f7ff fe35 	bl	80022c4 <print_color>
		print(ENDL);
 800265a:	480e      	ldr	r0, [pc, #56]	; (8002694 <execute+0x18c>)
 800265c:	f7ff fdc6 	bl	80021ec <print>
		print_color ("use '", C_NC);
 8002660:	2100      	movs	r1, #0
 8002662:	480d      	ldr	r0, [pc, #52]	; (8002698 <execute+0x190>)
 8002664:	f7ff fe2e 	bl	80022c4 <print_color>
		print_color ("?", C_GREEN);
 8002668:	2105      	movs	r1, #5
 800266a:	480c      	ldr	r0, [pc, #48]	; (800269c <execute+0x194>)
 800266c:	f7ff fe2a 	bl	80022c4 <print_color>
		print_color ("' for help", C_NC);
 8002670:	2100      	movs	r1, #0
 8002672:	480b      	ldr	r0, [pc, #44]	; (80026a0 <execute+0x198>)
 8002674:	f7ff fe26 	bl	80022c4 <print_color>
		print (ENDL);
 8002678:	4806      	ldr	r0, [pc, #24]	; (8002694 <execute+0x18c>)
 800267a:	f7ff fdb7 	bl	80021ec <print>
		return 1;
 800267e:	2301      	movs	r3, #1

	}
}
 8002680:	4618      	mov	r0, r3
 8002682:	3728      	adds	r7, #40	; 0x28
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	0800f280 	.word	0x0800f280
 800268c:	0800f0a4 	.word	0x0800f0a4
 8002690:	0800f0b0 	.word	0x0800f0b0
 8002694:	0800f050 	.word	0x0800f050
 8002698:	0800f0d0 	.word	0x0800f0d0
 800269c:	0800f0d8 	.word	0x0800f0d8
 80026a0:	0800f0dc 	.word	0x0800f0dc
 80026a4:	0800f0e8 	.word	0x0800f0e8

080026a8 <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08c      	sub	sp, #48	; 0x30
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
	int j = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 80026b6:	4b63      	ldr	r3, [pc, #396]	; (8002844 <complet+0x19c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d11f      	bne.n	8002702 <complet+0x5a>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 80026c2:	2300      	movs	r3, #0
 80026c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026c6:	e018      	b.n	80026fa <complet+0x52>
			if (microrl_actions[i].level == 0)
 80026c8:	4a5f      	ldr	r2, [pc, #380]	; (8002848 <complet+0x1a0>)
 80026ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10c      	bne.n	80026f4 <complet+0x4c>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f202 	mul.w	r2, r1, r2
 80026e8:	4957      	ldr	r1, [pc, #348]	; (8002848 <complet+0x1a0>)
 80026ea:	440a      	add	r2, r1
 80026ec:	3204      	adds	r2, #4
 80026ee:	4955      	ldr	r1, [pc, #340]	; (8002844 <complet+0x19c>)
 80026f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 80026f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f6:	3301      	adds	r3, #1
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fc:	2b11      	cmp	r3, #17
 80026fe:	d9e3      	bls.n	80026c8 <complet+0x20>
 8002700:	e095      	b.n	800282e <complet+0x186>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002708:	3b01      	subs	r3, #1
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	4413      	add	r3, r2
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 800271c:	2300      	movs	r3, #0
 800271e:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 8002720:	2300      	movs	r3, #0
 8002722:	61bb      	str	r3, [r7, #24]
 8002724:	e07c      	b.n	8002820 <complet+0x178>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	e06b      	b.n	8002804 <complet+0x15c>
			{
				tokens_found = false;
 800272c:	2300      	movs	r3, #0
 800272e:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 8002730:	4a45      	ldr	r2, [pc, #276]	; (8002848 <complet+0x1a0>)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	212c      	movs	r1, #44	; 0x2c
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002746:	d001      	beq.n	800274c <complet+0xa4>
					synonym_level = current_level; // save the synonym level
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002752:	d003      	beq.n	800275c <complet+0xb4>
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	429a      	cmp	r2, r3
 800275a:	db57      	blt.n	800280c <complet+0x164>
					break;
				if (current_level == i)
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	429a      	cmp	r2, r3
 8002762:	d101      	bne.n	8002768 <complet+0xc0>
					last_main_synonym = n;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	429a      	cmp	r2, r3
 8002770:	d128      	bne.n	80027c4 <complet+0x11c>
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	222c      	movs	r2, #44	; 0x2c
 8002776:	fb02 f303 	mul.w	r3, r2, r3
 800277a:	4a33      	ldr	r2, [pc, #204]	; (8002848 <complet+0x1a0>)
 800277c:	4413      	add	r3, r2
 800277e:	3304      	adds	r3, #4
 8002780:	6939      	ldr	r1, [r7, #16]
 8002782:	4618      	mov	r0, r3
 8002784:	f00c fbc0 	bl	800ef08 <strstr>
 8002788:	4602      	mov	r2, r0
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	212c      	movs	r1, #44	; 0x2c
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	492d      	ldr	r1, [pc, #180]	; (8002848 <complet+0x1a0>)
 8002794:	440b      	add	r3, r1
 8002796:	3304      	adds	r3, #4
 8002798:	429a      	cmp	r2, r3
 800279a:	d113      	bne.n	80027c4 <complet+0x11c>
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d10f      	bne.n	80027c4 <complet+0x11c>
										(i == synonym_level))
				{
					tokens_found = true;
 80027a4:	2301      	movs	r3, #1
 80027a6:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	212c      	movs	r1, #44	; 0x2c
 80027b2:	fb01 f202 	mul.w	r2, r1, r2
 80027b6:	4924      	ldr	r1, [pc, #144]	; (8002848 <complet+0x1a0>)
 80027b8:	440a      	add	r2, r1
 80027ba:	3204      	adds	r2, #4
 80027bc:	4921      	ldr	r1, [pc, #132]	; (8002844 <complet+0x19c>)
 80027be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80027c2:	e01c      	b.n	80027fe <complet+0x156>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	212c      	movs	r1, #44	; 0x2c
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	491c      	ldr	r1, [pc, #112]	; (8002848 <complet+0x1a0>)
 80027d8:	440b      	add	r3, r1
 80027da:	3304      	adds	r3, #4
 80027dc:	4619      	mov	r1, r3
 80027de:	4610      	mov	r0, r2
 80027e0:	f7fd fcb6 	bl	8000150 <strcmp>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <complet+0x156>
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d105      	bne.n	80027fe <complet+0x156>
				{
					last_main_synonym++;
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	3301      	adds	r3, #1
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 80027f8:	2301      	movs	r3, #1
 80027fa:	77fb      	strb	r3, [r7, #31]
					break;
 80027fc:	e007      	b.n	800280e <complet+0x166>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	3301      	adds	r3, #1
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2b11      	cmp	r3, #17
 8002808:	d990      	bls.n	800272c <complet+0x84>
 800280a:	e000      	b.n	800280e <complet+0x166>
					break;
 800280c:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 800280e:	7ffb      	ldrb	r3, [r7, #31]
 8002810:	f083 0301 	eor.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d108      	bne.n	800282c <complet+0x184>
		for (int i = 0; i < argc; i++)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	3301      	adds	r3, #1
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	429a      	cmp	r2, r3
 8002826:	f6ff af7e 	blt.w	8002726 <complet+0x7e>
 800282a:	e000      	b.n	800282e <complet+0x186>
				break;
 800282c:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 800282e:	4a05      	ldr	r2, [pc, #20]	; (8002844 <complet+0x19c>)
 8002830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002832:	2100      	movs	r1, #0
 8002834:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 8002838:	4b02      	ldr	r3, [pc, #8]	; (8002844 <complet+0x19c>)
}
 800283a:	4618      	mov	r0, r3
 800283c:	3730      	adds	r7, #48	; 0x30
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20002524 	.word	0x20002524
 8002848:	0800f280 	.word	0x0800f280

0800284c <sigint>:
#endif


void sigint (void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <sigint+0x50>)
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
	show_clock = true;
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <sigint+0x54>)
 800285a:	2201      	movs	r2, #1
 800285c:	701a      	strb	r2, [r3, #0]

	print (ENDL);
 800285e:	4811      	ldr	r0, [pc, #68]	; (80028a4 <sigint+0x58>)
 8002860:	f7ff fcc4 	bl	80021ec <print>
	print ("^C catched!");
 8002864:	4810      	ldr	r0, [pc, #64]	; (80028a8 <sigint+0x5c>)
 8002866:	f7ff fcc1 	bl	80021ec <print>
	int i = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 800286e:	e009      	b.n	8002884 <sigint+0x38>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 8002870:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <sigint+0x60>)
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	607a      	str	r2, [r7, #4]
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <sigint+0x58>)
 800287c:	5cd3      	ldrb	r3, [r2, r3]
 800287e:	4619      	mov	r1, r3
 8002880:	f7ff faa6 	bl	8001dd0 <microrl_insert_char>
	while (ENTER[i])
 8002884:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <sigint+0x58>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1ef      	bne.n	8002870 <sigint+0x24>
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200001af 	.word	0x200001af
 80028a0:	2000000d 	.word	0x2000000d
 80028a4:	0800f050 	.word	0x0800f050
 80028a8:	0800f0f4 	.word	0x0800f0f4
 80028ac:	20000008 	.word	0x20000008

080028b0 <init_microrl>:

void init_microrl(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <init_microrl+0x38>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	490c      	ldr	r1, [pc, #48]	; (80028ec <init_microrl+0x3c>)
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe ff4a 	bl	8001754 <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 80028c0:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <init_microrl+0x38>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	490a      	ldr	r1, [pc, #40]	; (80028f0 <init_microrl+0x40>)
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe ff90 	bl	80017ec <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <init_microrl+0x38>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4908      	ldr	r1, [pc, #32]	; (80028f4 <init_microrl+0x44>)
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe ff7c 	bl	80017d0 <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <init_microrl+0x38>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4906      	ldr	r1, [pc, #24]	; (80028f8 <init_microrl+0x48>)
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe ff92 	bl	8001808 <microrl_set_sigint_callback>
}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000008 	.word	0x20000008
 80028ec:	080021ed 	.word	0x080021ed
 80028f0:	08002509 	.word	0x08002509
 80028f4:	080026a9 	.word	0x080026a9
 80028f8:	0800284d 	.word	0x0800284d

080028fc <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 8002906:	4805      	ldr	r0, [pc, #20]	; (800291c <clear_screen+0x20>)
 8002908:	f7ff fc70 	bl	80021ec <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 800290c:	4804      	ldr	r0, [pc, #16]	; (8002920 <clear_screen+0x24>)
 800290e:	f7ff fc6d 	bl	80021ec <print>
	return 0;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	0800f100 	.word	0x0800f100
 8002920:	0800f108 	.word	0x0800f108

08002924 <set_CDC_ready>:


void set_CDC_ready(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
	CDC_is_ready = true;
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <set_CDC_ready+0x14>)
 800292a:	2201      	movs	r2, #1
 800292c:	701a      	strb	r2, [r3, #0]
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	200001ae 	.word	0x200001ae

0800293c <color_toggle>:


int color_toggle 	(int argc, const char * const * argv)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <color_toggle+0x30>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	f083 0301 	eor.w	r3, r3, #1
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf14      	ite	ne
 8002954:	2301      	movne	r3, #1
 8002956:	2300      	moveq	r3, #0
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4b04      	ldr	r3, [pc, #16]	; (800296c <color_toggle+0x30>)
 800295c:	701a      	strb	r2, [r3, #0]
	return 0;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	2000000c 	.word	0x2000000c

08002970 <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
	color_out = 1;
 800297a:	4b07      	ldr	r3, [pc, #28]	; (8002998 <color_on+0x28>)
 800297c:	2201      	movs	r2, #1
 800297e:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 8002980:	2105      	movs	r1, #5
 8002982:	4806      	ldr	r0, [pc, #24]	; (800299c <color_on+0x2c>)
 8002984:	f7ff fc9e 	bl	80022c4 <print_color>
	print(ENDL);
 8002988:	4805      	ldr	r0, [pc, #20]	; (80029a0 <color_on+0x30>)
 800298a:	f7ff fc2f 	bl	80021ec <print>
	return 0;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	2000000c 	.word	0x2000000c
 800299c:	0800f10c 	.word	0x0800f10c
 80029a0:	0800f050 	.word	0x0800f050

080029a4 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
	color_out = 0;
 80029ae:	4b07      	ldr	r3, [pc, #28]	; (80029cc <color_off+0x28>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 80029b4:	4806      	ldr	r0, [pc, #24]	; (80029d0 <color_off+0x2c>)
 80029b6:	f7ff fc19 	bl	80021ec <print>
	print(ENDL);
 80029ba:	4806      	ldr	r0, [pc, #24]	; (80029d4 <color_off+0x30>)
 80029bc:	f7ff fc16 	bl	80021ec <print>
	return 0;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	2000000c 	.word	0x2000000c
 80029d0:	0800f120 	.word	0x0800f120
 80029d4:	0800f050 	.word	0x0800f050

080029d8 <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
	if (color_out)
 80029e2:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <color_show+0x34>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d004      	beq.n	80029f4 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 80029ea:	2105      	movs	r1, #5
 80029ec:	4808      	ldr	r0, [pc, #32]	; (8002a10 <color_show+0x38>)
 80029ee:	f7ff fc69 	bl	80022c4 <print_color>
 80029f2:	e002      	b.n	80029fa <color_show+0x22>
	else
		print ("Color output is OFF");
 80029f4:	4807      	ldr	r0, [pc, #28]	; (8002a14 <color_show+0x3c>)
 80029f6:	f7ff fbf9 	bl	80021ec <print>
	print(ENDL);
 80029fa:	4807      	ldr	r0, [pc, #28]	; (8002a18 <color_show+0x40>)
 80029fc:	f7ff fbf6 	bl	80021ec <print>
	return 0;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	2000000c 	.word	0x2000000c
 8002a10:	0800f10c 	.word	0x0800f10c
 8002a14:	0800f120 	.word	0x0800f120
 8002a18:	0800f050 	.word	0x0800f050

08002a1c <vfd_text>:
	print(ENDL);
	return 0;
}

int vfd_text (int argc, const char * const * argv)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
	show_clock = false;
 8002a26:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <vfd_text+0x7c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < argc; i++)
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	e028      	b.n	8002a84 <vfd_text+0x68>
	{
		uint16_t temp = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	81fb      	strh	r3, [r7, #14]
		char * pchar = (char*)argv[i];
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	613b      	str	r3, [r7, #16]
		xQueueSendToBack(qVFDHandle, &temp, 100);
 8002a42:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <vfd_text+0x80>)
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	f107 010e 	add.w	r1, r7, #14
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	2264      	movs	r2, #100	; 0x64
 8002a4e:	f009 f8b1 	bl	800bbb4 <xQueueGenericSend>
		while (*pchar)
 8002a52:	e010      	b.n	8002a76 <vfd_text+0x5a>
		{
			temp = get_char(*(pchar++));
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	613a      	str	r2, [r7, #16]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 faf5 	bl	800304c <get_char>
 8002a62:	4603      	mov	r3, r0
 8002a64:	81fb      	strh	r3, [r7, #14]
			xQueueSendToBack(qVFDHandle, &temp, 100);
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <vfd_text+0x80>)
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	f107 010e 	add.w	r1, r7, #14
 8002a6e:	2300      	movs	r3, #0
 8002a70:	2264      	movs	r2, #100	; 0x64
 8002a72:	f009 f89f 	bl	800bbb4 <xQueueGenericSend>
		while (*pchar)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1ea      	bne.n	8002a54 <vfd_text+0x38>
	for (int i = 1; i < argc; i++)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3301      	adds	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	dbd2      	blt.n	8002a32 <vfd_text+0x16>
		}
	}
	return 0;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	2000000d 	.word	0x2000000d
 8002a9c:	20002490 	.word	0x20002490

08002aa0 <leds_toggle>:
	return nema_out;
}


int leds_toggle		(int argc, const char * const * argv)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
	use_leds ^= 1;
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <leds_toggle+0x3c>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	f083 0301 	eor.w	r3, r3, #1
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf14      	ite	ne
 8002ab8:	2301      	movne	r3, #1
 8002aba:	2300      	moveq	r3, #0
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4b07      	ldr	r3, [pc, #28]	; (8002adc <leds_toggle+0x3c>)
 8002ac0:	701a      	strb	r2, [r3, #0]
	print_color("Done", C_GREEN);
 8002ac2:	2105      	movs	r1, #5
 8002ac4:	4806      	ldr	r0, [pc, #24]	; (8002ae0 <leds_toggle+0x40>)
 8002ac6:	f7ff fbfd 	bl	80022c4 <print_color>
	print(ENDL);
 8002aca:	4806      	ldr	r0, [pc, #24]	; (8002ae4 <leds_toggle+0x44>)
 8002acc:	f7ff fb8e 	bl	80021ec <print>
	return 0;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200001b0 	.word	0x200001b0
 8002ae0:	0800f134 	.word	0x0800f134
 8002ae4:	0800f050 	.word	0x0800f050

08002ae8 <set_td>:



int set_td		(int argc, const char * const * argv)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
	if (argc == 3 && str_length(argv[2]) == 6)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d140      	bne.n	8002b7a <set_td+0x92>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	3308      	adds	r3, #8
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fc06 	bl	8002310 <str_length>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b06      	cmp	r3, #6
 8002b08:	d137      	bne.n	8002b7a <set_td+0x92>
	{
		uint8_t arr [3];
		for (int i = 0; i < 3; i++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	e021      	b.n	8002b54 <set_td+0x6c>
		{
			arr[2-i] = (argv[2][i*2+1]-'0')+((argv[2][i*2]-'0')<<4);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	3308      	adds	r3, #8
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	781a      	ldrb	r2, [r3, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	3308      	adds	r3, #8
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68f9      	ldr	r1, [r7, #12]
 8002b28:	0049      	lsls	r1, r1, #1
 8002b2a:	440b      	add	r3, r1
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	3b30      	subs	r3, #48	; 0x30
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f1c3 0302 	rsb	r3, r3, #2
 8002b40:	3a30      	subs	r2, #48	; 0x30
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	f107 0110 	add.w	r1, r7, #16
 8002b48:	440b      	add	r3, r1
 8002b4a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for (int i = 0; i < 3; i++)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3301      	adds	r3, #1
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	ddda      	ble.n	8002b10 <set_td+0x28>
		}
		d3231_set(arr, argv[0][0] == 'd');
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b64      	cmp	r3, #100	; 0x64
 8002b62:	bf0c      	ite	eq
 8002b64:	2301      	moveq	r3, #1
 8002b66:	2300      	movne	r3, #0
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	f107 0308 	add.w	r3, r7, #8
 8002b6e:	4611      	mov	r1, r2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fba7 	bl	80002c4 <d3231_set>
		return 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e007      	b.n	8002b8a <set_td+0xa2>
	}
	print_color("wrong format", C_RED);
 8002b7a:	2109      	movs	r1, #9
 8002b7c:	4805      	ldr	r0, [pc, #20]	; (8002b94 <set_td+0xac>)
 8002b7e:	f7ff fba1 	bl	80022c4 <print_color>
	print(ENDL);
 8002b82:	4805      	ldr	r0, [pc, #20]	; (8002b98 <set_td+0xb0>)
 8002b84:	f7ff fb32 	bl	80021ec <print>
	return 0;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	0800f13c 	.word	0x0800f13c
 8002b98:	0800f050 	.word	0x0800f050

08002b9c <get_td>:

int get_td		(int argc, const char * const * argv)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
	bool date = argv[0][0] == 'd';
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b64      	cmp	r3, #100	; 0x64
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	77fb      	strb	r3, [r7, #31]
	char str[9];
	uint8_t * d3231 = d3231_get_all();
 8002bb6:	f7fd fb2d 	bl	8000214 <d3231_get_all>
 8002bba:	61b8      	str	r0, [r7, #24]
	uint8_t offset = date*4;
 8002bbc:	7ffb      	ldrb	r3, [r7, #31]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	75fb      	strb	r3, [r7, #23]
	str[8] = '\0';
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	753b      	strb	r3, [r7, #20]
	str[7] = (d3231[offset + 0]&0xF) + '0';
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4413      	add	r3, r2
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	3330      	adds	r3, #48	; 0x30
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	74fb      	strb	r3, [r7, #19]
	str[6] = ((d3231[offset + 0]>>4)&0xF) + '0';
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4413      	add	r3, r2
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	091b      	lsrs	r3, r3, #4
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	3330      	adds	r3, #48	; 0x30
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	74bb      	strb	r3, [r7, #18]
	str[4] = (d3231[offset + 1]&0xF) + '0';
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	3330      	adds	r3, #48	; 0x30
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	743b      	strb	r3, [r7, #16]
	str[3] = ((d3231[offset + 1]>>4)&0xF) + '0';
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
 8002c04:	3301      	adds	r3, #1
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4413      	add	r3, r2
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	3330      	adds	r3, #48	; 0x30
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	73fb      	strb	r3, [r7, #15]
	str[1] = (d3231[offset + 2]&0xF) + '0';
 8002c16:	7dfb      	ldrb	r3, [r7, #23]
 8002c18:	3302      	adds	r3, #2
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	3330      	adds	r3, #48	; 0x30
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	737b      	strb	r3, [r7, #13]
	str[0] = ((d3231[offset + 2]>>4)&0xF) + '0';
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	3302      	adds	r3, #2
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4413      	add	r3, r2
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	3330      	adds	r3, #48	; 0x30
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	733b      	strb	r3, [r7, #12]
	str[5] = str[2] = date?'-':':';
 8002c40:	7ffb      	ldrb	r3, [r7, #31]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <get_td+0xae>
 8002c46:	232d      	movs	r3, #45	; 0x2d
 8002c48:	e000      	b.n	8002c4c <get_td+0xb0>
 8002c4a:	233a      	movs	r3, #58	; 0x3a
 8002c4c:	73bb      	strb	r3, [r7, #14]
 8002c4e:	7bbb      	ldrb	r3, [r7, #14]
 8002c50:	747b      	strb	r3, [r7, #17]
	print_color(str, C_L_BLUE);
 8002c52:	f107 030c 	add.w	r3, r7, #12
 8002c56:	2104      	movs	r1, #4
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fb33 	bl	80022c4 <print_color>
	print(ENDL);
 8002c5e:	4804      	ldr	r0, [pc, #16]	; (8002c70 <get_td+0xd4>)
 8002c60:	f7ff fac4 	bl	80021ec <print>
	return 0;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3720      	adds	r7, #32
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	0800f050 	.word	0x0800f050

08002c74 <get_temp>:

int get_temp		(int argc, const char * const * argv)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	; 0x28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
	uint8_t * d3231 = d3231_get_temp();
 8002c7e:	f7fd faa1 	bl	80001c4 <d3231_get_temp>
 8002c82:	61b8      	str	r0, [r7, #24]

	bool negative = d3231[0]&(1<<7);
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	bf14      	ite	ne
 8002c90:	2301      	movne	r3, #1
 8002c92:	2300      	moveq	r3, #0
 8002c94:	75fb      	strb	r3, [r7, #23]
	uint16_t temp = d3231[0]&(~(1<<7));
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ca0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t dec   = d3231[1]>>6;
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	099b      	lsrs	r3, r3, #6
 8002caa:	75bb      	strb	r3, [r7, #22]

	dec *= 25; // calculate decimal part
 8002cac:	7dbb      	ldrb	r3, [r7, #22]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	0092      	lsls	r2, r2, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	0091      	lsls	r1, r2, #2
 8002cb8:	461a      	mov	r2, r3
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	75bb      	strb	r3, [r7, #22]
	temp *= 1000;
 8002cc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	0152      	lsls	r2, r2, #5
 8002cc6:	1ad2      	subs	r2, r2, r3
 8002cc8:	0092      	lsls	r2, r2, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	84fb      	strh	r3, [r7, #38]	; 0x26
	temp += dec;
 8002cd0:	7dbb      	ldrb	r3, [r7, #22]
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cd6:	4413      	add	r3, r2
 8002cd8:	84fb      	strh	r3, [r7, #38]	; 0x26


	char str[8];
	str[7] = '\0';
 8002cda:	2300      	movs	r3, #0
 8002cdc:	74fb      	strb	r3, [r7, #19]
	for (int i = 6; i >= 0; i--)
 8002cde:	2306      	movs	r3, #6
 8002ce0:	623b      	str	r3, [r7, #32]
 8002ce2:	e01c      	b.n	8002d1e <get_temp+0xaa>
	{
		str[i] = (temp % 10) + '0';
 8002ce4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002ce6:	4b2c      	ldr	r3, [pc, #176]	; (8002d98 <get_temp+0x124>)
 8002ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cec:	08d9      	lsrs	r1, r3, #3
 8002cee:	460b      	mov	r3, r1
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	3330      	adds	r3, #48	; 0x30
 8002cfe:	b2d9      	uxtb	r1, r3
 8002d00:	f107 020c 	add.w	r2, r7, #12
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	4413      	add	r3, r2
 8002d08:	460a      	mov	r2, r1
 8002d0a:	701a      	strb	r2, [r3, #0]
		temp /= 10;
 8002d0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d0e:	4a22      	ldr	r2, [pc, #136]	; (8002d98 <get_temp+0x124>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	08db      	lsrs	r3, r3, #3
 8002d16:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 6; i >= 0; i--)
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	623b      	str	r3, [r7, #32]
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	dadf      	bge.n	8002ce4 <get_temp+0x70>
	}
	str[4] = '.';
 8002d24:	232e      	movs	r3, #46	; 0x2e
 8002d26:	743b      	strb	r3, [r7, #16]
	for (int i = 0; i < 7; i++)
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	e020      	b.n	8002d70 <get_temp+0xfc>
	{
		if (str[i] != '0')
 8002d2e:	f107 020c 	add.w	r2, r7, #12
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	4413      	add	r3, r2
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b30      	cmp	r3, #48	; 0x30
 8002d3a:	d010      	beq.n	8002d5e <get_temp+0xea>
		{
			if (i > 0)
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	dd1a      	ble.n	8002d78 <get_temp+0x104>
				str[i-1] = negative?'-':'+';
 8002d42:	7dfb      	ldrb	r3, [r7, #23]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <get_temp+0xd8>
 8002d48:	222d      	movs	r2, #45	; 0x2d
 8002d4a:	e000      	b.n	8002d4e <get_temp+0xda>
 8002d4c:	222b      	movs	r2, #43	; 0x2b
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002d56:	440b      	add	r3, r1
 8002d58:	f803 2c1c 	strb.w	r2, [r3, #-28]
			break;
 8002d5c:	e00c      	b.n	8002d78 <get_temp+0x104>
		}
		str[i] = ' ';
 8002d5e:	f107 020c 	add.w	r2, r7, #12
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	4413      	add	r3, r2
 8002d66:	2220      	movs	r2, #32
 8002d68:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 7; i++)
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	61fb      	str	r3, [r7, #28]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	2b06      	cmp	r3, #6
 8002d74:	dddb      	ble.n	8002d2e <get_temp+0xba>
 8002d76:	e000      	b.n	8002d7a <get_temp+0x106>
			break;
 8002d78:	bf00      	nop
	}
	print_color(str, C_GREEN);
 8002d7a:	f107 030c 	add.w	r3, r7, #12
 8002d7e:	2105      	movs	r1, #5
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fa9f 	bl	80022c4 <print_color>
	print(ENDL);
 8002d86:	4805      	ldr	r0, [pc, #20]	; (8002d9c <get_temp+0x128>)
 8002d88:	f7ff fa30 	bl	80021ec <print>
	return 0;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3728      	adds	r7, #40	; 0x28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	cccccccd 	.word	0xcccccccd
 8002d9c:	0800f050 	.word	0x0800f050

08002da0 <clock>:

int clock		(int argc, const char * const * argv)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
	show_clock = true;
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <clock+0x1c>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
	return 0;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	2000000d 	.word	0x2000000d

08002dc0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002dc4:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <MX_SPI2_Init+0x64>)
 8002dc6:	4a18      	ldr	r2, [pc, #96]	; (8002e28 <MX_SPI2_Init+0x68>)
 8002dc8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002dca:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <MX_SPI2_Init+0x64>)
 8002dcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002dd0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002dd2:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <MX_SPI2_Init+0x64>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dd8:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <MX_SPI2_Init+0x64>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002dde:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <MX_SPI2_Init+0x64>)
 8002de0:	2202      	movs	r2, #2
 8002de2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002de4:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <MX_SPI2_Init+0x64>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002dea:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <MX_SPI2_Init+0x64>)
 8002dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002df0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002df2:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <MX_SPI2_Init+0x64>)
 8002df4:	2218      	movs	r2, #24
 8002df6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8002df8:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <MX_SPI2_Init+0x64>)
 8002dfa:	2280      	movs	r2, #128	; 0x80
 8002dfc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <MX_SPI2_Init+0x64>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e04:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <MX_SPI2_Init+0x64>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <MX_SPI2_Init+0x64>)
 8002e0c:	220a      	movs	r2, #10
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e10:	4804      	ldr	r0, [pc, #16]	; (8002e24 <MX_SPI2_Init+0x64>)
 8002e12:	f003 ff55 	bl	8006cc0 <HAL_SPI_Init>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002e1c:	f7fe f94a 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20002610 	.word	0x20002610
 8002e28:	40003800 	.word	0x40003800

08002e2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e34:	f107 0310 	add.w	r3, r7, #16
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1c      	ldr	r2, [pc, #112]	; (8002eb8 <HAL_SPI_MspInit+0x8c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d131      	bne.n	8002eb0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <HAL_SPI_MspInit+0x90>)
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	4a1a      	ldr	r2, [pc, #104]	; (8002ebc <HAL_SPI_MspInit+0x90>)
 8002e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e56:	61d3      	str	r3, [r2, #28]
 8002e58:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <HAL_SPI_MspInit+0x90>)
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e64:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <HAL_SPI_MspInit+0x90>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	4a14      	ldr	r2, [pc, #80]	; (8002ebc <HAL_SPI_MspInit+0x90>)
 8002e6a:	f043 0308 	orr.w	r3, r3, #8
 8002e6e:	6193      	str	r3, [r2, #24]
 8002e70:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <HAL_SPI_MspInit+0x90>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002e7c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002e80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e82:	2302      	movs	r3, #2
 8002e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e86:	2303      	movs	r3, #3
 8002e88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8a:	f107 0310 	add.w	r3, r7, #16
 8002e8e:	4619      	mov	r1, r3
 8002e90:	480b      	ldr	r0, [pc, #44]	; (8002ec0 <HAL_SPI_MspInit+0x94>)
 8002e92:	f000 fb5f 	bl	8003554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002e96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea4:	f107 0310 	add.w	r3, r7, #16
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4805      	ldr	r0, [pc, #20]	; (8002ec0 <HAL_SPI_MspInit+0x94>)
 8002eac:	f000 fb52 	bl	8003554 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40003800 	.word	0x40003800
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40010c00 	.word	0x40010c00

08002ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002eca:	4b18      	ldr	r3, [pc, #96]	; (8002f2c <HAL_MspInit+0x68>)
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	4a17      	ldr	r2, [pc, #92]	; (8002f2c <HAL_MspInit+0x68>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6193      	str	r3, [r2, #24]
 8002ed6:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <HAL_MspInit+0x68>)
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	60bb      	str	r3, [r7, #8]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_MspInit+0x68>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	4a11      	ldr	r2, [pc, #68]	; (8002f2c <HAL_MspInit+0x68>)
 8002ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eec:	61d3      	str	r3, [r2, #28]
 8002eee:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <HAL_MspInit+0x68>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	607b      	str	r3, [r7, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002efa:	2200      	movs	r2, #0
 8002efc:	210f      	movs	r1, #15
 8002efe:	f06f 0001 	mvn.w	r0, #1
 8002f02:	f000 fafc 	bl	80034fe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_MspInit+0x6c>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <HAL_MspInit+0x6c>)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40010000 	.word	0x40010000

08002f34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08c      	sub	sp, #48	; 0x30
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002f44:	2200      	movs	r2, #0
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	2019      	movs	r0, #25
 8002f4a:	f000 fad8 	bl	80034fe <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002f4e:	2019      	movs	r0, #25
 8002f50:	f000 faf1 	bl	8003536 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002f54:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <HAL_InitTick+0x9c>)
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	4a1d      	ldr	r2, [pc, #116]	; (8002fd0 <HAL_InitTick+0x9c>)
 8002f5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f5e:	6193      	str	r3, [r2, #24]
 8002f60:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <HAL_InitTick+0x9c>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f6c:	f107 0210 	add.w	r2, r7, #16
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f003 fd9e 	bl	8006ab8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002f7c:	f003 fd88 	bl	8006a90 <HAL_RCC_GetPCLK2Freq>
 8002f80:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f84:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <HAL_InitTick+0xa0>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	0c9b      	lsrs	r3, r3, #18
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002f90:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <HAL_InitTick+0xa4>)
 8002f92:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <HAL_InitTick+0xa8>)
 8002f94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <HAL_InitTick+0xa4>)
 8002f98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f9c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002f9e:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <HAL_InitTick+0xa4>)
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <HAL_InitTick+0xa4>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002faa:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_InitTick+0xa4>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002fb0:	4809      	ldr	r0, [pc, #36]	; (8002fd8 <HAL_InitTick+0xa4>)
 8002fb2:	f004 f8eb 	bl	800718c <HAL_TIM_Base_Init>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d104      	bne.n	8002fc6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002fbc:	4806      	ldr	r0, [pc, #24]	; (8002fd8 <HAL_InitTick+0xa4>)
 8002fbe:	f004 f93d 	bl	800723c <HAL_TIM_Base_Start_IT>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	e000      	b.n	8002fc8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3730      	adds	r7, #48	; 0x30
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	431bde83 	.word	0x431bde83
 8002fd8:	20002668 	.word	0x20002668
 8002fdc:	40012c00 	.word	0x40012c00

08002fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fe4:	e7fe      	b.n	8002fe4 <NMI_Handler+0x4>

08002fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fea:	e7fe      	b.n	8002fea <HardFault_Handler+0x4>

08002fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ff0:	e7fe      	b.n	8002ff0 <MemManage_Handler+0x4>

08002ff2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ff6:	e7fe      	b.n	8002ff6 <BusFault_Handler+0x4>

08002ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ffc:	e7fe      	b.n	8002ffc <UsageFault_Handler+0x4>

08002ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003002:	bf00      	nop
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr

0800300a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800300e:	2001      	movs	r0, #1
 8003010:	f000 fc6c 	bl	80038ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}

08003018 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800301c:	4802      	ldr	r0, [pc, #8]	; (8003028 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800301e:	f001 fdb8 	bl	8004b92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	200033ac 	.word	0x200033ac

0800302c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003030:	4802      	ldr	r0, [pc, #8]	; (800303c <TIM1_UP_IRQHandler+0x10>)
 8003032:	f004 f955 	bl	80072e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20002668 	.word	0x20002668

08003040 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <get_char>:
const uint8_t ALPHAS = (sizeof(vfd_alpha)/sizeof(vfd_alpha[0]));
const uint8_t ALPHAR = (sizeof(vfd_alpha_ru)/sizeof(vfd_alpha_ru[0]));
const uint8_t SPECIAL = (sizeof(vfd_special)/sizeof(vfd_special[0]));

uint16_t get_char(char input)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
	if ('0' <= input && input <= '9')
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	2b2f      	cmp	r3, #47	; 0x2f
 800305a:	d908      	bls.n	800306e <get_char+0x22>
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	2b39      	cmp	r3, #57	; 0x39
 8003060:	d805      	bhi.n	800306e <get_char+0x22>
		return vfd_digits[input - '0'];
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	3b30      	subs	r3, #48	; 0x30
 8003066:	4a2a      	ldr	r2, [pc, #168]	; (8003110 <get_char+0xc4>)
 8003068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800306c:	e04a      	b.n	8003104 <get_char+0xb8>
	if (0 <= input && input <= 9)
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	2b09      	cmp	r3, #9
 8003072:	d804      	bhi.n	800307e <get_char+0x32>
		return vfd_digits[(uint8_t)input];
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	4a26      	ldr	r2, [pc, #152]	; (8003110 <get_char+0xc4>)
 8003078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800307c:	e042      	b.n	8003104 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	e00e      	b.n	80030a2 <get_char+0x56>
		if (vfd_special_char[i] == input)
 8003084:	4a23      	ldr	r2, [pc, #140]	; (8003114 <get_char+0xc8>)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4413      	add	r3, r2
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	79fa      	ldrb	r2, [r7, #7]
 800308e:	429a      	cmp	r2, r3
 8003090:	d104      	bne.n	800309c <get_char+0x50>
			return vfd_special[i];
 8003092:	4a21      	ldr	r2, [pc, #132]	; (8003118 <get_char+0xcc>)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800309a:	e033      	b.n	8003104 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3301      	adds	r3, #1
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2b15      	cmp	r3, #21
 80030a6:	d9ed      	bls.n	8003084 <get_char+0x38>
	if ('a' <= input && input <= 'z')
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	2b60      	cmp	r3, #96	; 0x60
 80030ac:	d908      	bls.n	80030c0 <get_char+0x74>
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	2b7a      	cmp	r3, #122	; 0x7a
 80030b2:	d805      	bhi.n	80030c0 <get_char+0x74>
		return vfd_alpha[input - 'a'];
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	3b61      	subs	r3, #97	; 0x61
 80030b8:	4a18      	ldr	r2, [pc, #96]	; (800311c <get_char+0xd0>)
 80030ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030be:	e021      	b.n	8003104 <get_char+0xb8>
	if ('A' <= input && input <= 'Z')
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	2b40      	cmp	r3, #64	; 0x40
 80030c4:	d908      	bls.n	80030d8 <get_char+0x8c>
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	2b5a      	cmp	r3, #90	; 0x5a
 80030ca:	d805      	bhi.n	80030d8 <get_char+0x8c>
		return vfd_alpha[input - 'A'];
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	3b41      	subs	r3, #65	; 0x41
 80030d0:	4a12      	ldr	r2, [pc, #72]	; (800311c <get_char+0xd0>)
 80030d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030d6:	e015      	b.n	8003104 <get_char+0xb8>
	if (192 <= input && input <= 223)
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	2bbf      	cmp	r3, #191	; 0xbf
 80030dc:	d908      	bls.n	80030f0 <get_char+0xa4>
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	2bdf      	cmp	r3, #223	; 0xdf
 80030e2:	d805      	bhi.n	80030f0 <get_char+0xa4>
		return vfd_alpha_ru[input - 192];
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	3bc0      	subs	r3, #192	; 0xc0
 80030e8:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <get_char+0xd4>)
 80030ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030ee:	e009      	b.n	8003104 <get_char+0xb8>
	if (224 <= input && input <= 255)
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	2bdf      	cmp	r3, #223	; 0xdf
 80030f4:	d905      	bls.n	8003102 <get_char+0xb6>
		return vfd_alpha_ru[input - 224];
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	3be0      	subs	r3, #224	; 0xe0
 80030fa:	4a09      	ldr	r2, [pc, #36]	; (8003120 <get_char+0xd4>)
 80030fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003100:	e000      	b.n	8003104 <get_char+0xb8>
	return 0;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	0800f670 	.word	0x0800f670
 8003114:	0800f724 	.word	0x0800f724
 8003118:	0800f6f8 	.word	0x0800f6f8
 800311c:	0800f684 	.word	0x0800f684
 8003120:	0800f6b8 	.word	0x0800f6b8

08003124 <str2vfd>:

void str2vfd(char * str)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	uint16_t buf;
	// erase letters only
	for (int i = 10; i > 0; i --)
 800312c:	230a      	movs	r3, #10
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	e028      	b.n	8003184 <str2vfd+0x60>
	{
		 vfd.arr2[i][0] &= 1<<0;
 8003132:	493e      	ldr	r1, [pc, #248]	; (800322c <str2vfd+0x108>)
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4613      	mov	r3, r2
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4413      	add	r3, r2
 800313c:	440b      	add	r3, r1
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	b2d8      	uxtb	r0, r3
 8003146:	4939      	ldr	r1, [pc, #228]	; (800322c <str2vfd+0x108>)
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4613      	mov	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4413      	add	r3, r2
 8003150:	440b      	add	r3, r1
 8003152:	4602      	mov	r2, r0
 8003154:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] &= 1<<7;
 8003156:	4935      	ldr	r1, [pc, #212]	; (800322c <str2vfd+0x108>)
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4613      	mov	r3, r2
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	4413      	add	r3, r2
 8003160:	440b      	add	r3, r1
 8003162:	3301      	adds	r3, #1
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800316a:	b2d8      	uxtb	r0, r3
 800316c:	492f      	ldr	r1, [pc, #188]	; (800322c <str2vfd+0x108>)
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	440b      	add	r3, r1
 8003178:	3301      	adds	r3, #1
 800317a:	4602      	mov	r2, r0
 800317c:	701a      	strb	r2, [r3, #0]
	for (int i = 10; i > 0; i --)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	3b01      	subs	r3, #1
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	dcd3      	bgt.n	8003132 <str2vfd+0xe>
	}
	uint8_t i = 10;
 800318a:	230a      	movs	r3, #10
 800318c:	72fb      	strb	r3, [r7, #11]
	while (*str)
 800318e:	e042      	b.n	8003216 <str2vfd+0xf2>
	{
		 buf = get_char(*(str++));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ff57 	bl	800304c <get_char>
 800319e:	4603      	mov	r3, r0
 80031a0:	813b      	strh	r3, [r7, #8]
		 vfd.arr2[i][0] |= buf & (~(1<<0));
 80031a2:	7afa      	ldrb	r2, [r7, #11]
 80031a4:	4921      	ldr	r1, [pc, #132]	; (800322c <str2vfd+0x108>)
 80031a6:	4613      	mov	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	440b      	add	r3, r1
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	b25a      	sxtb	r2, r3
 80031b2:	893b      	ldrh	r3, [r7, #8]
 80031b4:	b25b      	sxtb	r3, r3
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	b25b      	sxtb	r3, r3
 80031bc:	4313      	orrs	r3, r2
 80031be:	b25b      	sxtb	r3, r3
 80031c0:	7afa      	ldrb	r2, [r7, #11]
 80031c2:	b2d8      	uxtb	r0, r3
 80031c4:	4919      	ldr	r1, [pc, #100]	; (800322c <str2vfd+0x108>)
 80031c6:	4613      	mov	r3, r2
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	4413      	add	r3, r2
 80031cc:	440b      	add	r3, r1
 80031ce:	4602      	mov	r2, r0
 80031d0:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] |= (buf>>8)&(~(1<<7));
 80031d2:	7afa      	ldrb	r2, [r7, #11]
 80031d4:	4915      	ldr	r1, [pc, #84]	; (800322c <str2vfd+0x108>)
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	440b      	add	r3, r1
 80031de:	3301      	adds	r3, #1
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	b25a      	sxtb	r2, r3
 80031e4:	893b      	ldrh	r3, [r7, #8]
 80031e6:	0a1b      	lsrs	r3, r3, #8
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	b25b      	sxtb	r3, r3
 80031ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031f0:	b25b      	sxtb	r3, r3
 80031f2:	4313      	orrs	r3, r2
 80031f4:	b25b      	sxtb	r3, r3
 80031f6:	7afa      	ldrb	r2, [r7, #11]
 80031f8:	b2d8      	uxtb	r0, r3
 80031fa:	490c      	ldr	r1, [pc, #48]	; (800322c <str2vfd+0x108>)
 80031fc:	4613      	mov	r3, r2
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	4413      	add	r3, r2
 8003202:	440b      	add	r3, r1
 8003204:	3301      	adds	r3, #1
 8003206:	4602      	mov	r2, r0
 8003208:	701a      	strb	r2, [r3, #0]
		 if (!--i)
 800320a:	7afb      	ldrb	r3, [r7, #11]
 800320c:	3b01      	subs	r3, #1
 800320e:	72fb      	strb	r3, [r7, #11]
 8003210:	7afb      	ldrb	r3, [r7, #11]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d004      	beq.n	8003220 <str2vfd+0xfc>
	while (*str)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1b8      	bne.n	8003190 <str2vfd+0x6c>
			 break;
	}
}
 800321e:	e000      	b.n	8003222 <str2vfd+0xfe>
			 break;
 8003220:	bf00      	nop
}
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	200024a0 	.word	0x200024a0

08003230 <clr_vfd>:

void clr_vfd(void)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 8003236:	2300      	movs	r3, #0
 8003238:	607b      	str	r3, [r7, #4]
 800323a:	e007      	b.n	800324c <clr_vfd+0x1c>
		  vfd.arr1[a] = 0;
 800323c:	4a08      	ldr	r2, [pc, #32]	; (8003260 <clr_vfd+0x30>)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4413      	add	r3, r2
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3301      	adds	r3, #1
 800324a:	607b      	str	r3, [r7, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b20      	cmp	r3, #32
 8003250:	d9f4      	bls.n	800323c <clr_vfd+0xc>
}
 8003252:	bf00      	nop
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	200024a0 	.word	0x200024a0

08003264 <save_vfd>:

uint8_t backup[11*3];

void save_vfd(void)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 800326a:	2300      	movs	r3, #0
 800326c:	607b      	str	r3, [r7, #4]
 800326e:	e00b      	b.n	8003288 <save_vfd+0x24>
		backup[i] = vfd.arr1[i];
 8003270:	4a0a      	ldr	r2, [pc, #40]	; (800329c <save_vfd+0x38>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	7819      	ldrb	r1, [r3, #0]
 8003278:	4a09      	ldr	r2, [pc, #36]	; (80032a0 <save_vfd+0x3c>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	460a      	mov	r2, r1
 8003280:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3301      	adds	r3, #1
 8003286:	607b      	str	r3, [r7, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b20      	cmp	r3, #32
 800328c:	d9f0      	bls.n	8003270 <save_vfd+0xc>
}
 800328e:	bf00      	nop
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	200024a0 	.word	0x200024a0
 80032a0:	200026b0 	.word	0x200026b0

080032a4 <restore_vfd>:

void restore_vfd(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 80032aa:	2300      	movs	r3, #0
 80032ac:	607b      	str	r3, [r7, #4]
 80032ae:	e00b      	b.n	80032c8 <restore_vfd+0x24>
		vfd.arr1[i] = backup[i];
 80032b0:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <restore_vfd+0x38>)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	7819      	ldrb	r1, [r3, #0]
 80032b8:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <restore_vfd+0x3c>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	460a      	mov	r2, r1
 80032c0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3301      	adds	r3, #1
 80032c6:	607b      	str	r3, [r7, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	d9f0      	bls.n	80032b0 <restore_vfd+0xc>
}
 80032ce:	bf00      	nop
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	200026b0 	.word	0x200026b0
 80032e0:	200024a0 	.word	0x200024a0

080032e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032e4:	480c      	ldr	r0, [pc, #48]	; (8003318 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032e6:	490d      	ldr	r1, [pc, #52]	; (800331c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032e8:	4a0d      	ldr	r2, [pc, #52]	; (8003320 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032ec:	e002      	b.n	80032f4 <LoopCopyDataInit>

080032ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032f2:	3304      	adds	r3, #4

080032f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032f8:	d3f9      	bcc.n	80032ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032fa:	4a0a      	ldr	r2, [pc, #40]	; (8003324 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032fc:	4c0a      	ldr	r4, [pc, #40]	; (8003328 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003300:	e001      	b.n	8003306 <LoopFillZerobss>

08003302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003304:	3204      	adds	r2, #4

08003306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003308:	d3fb      	bcc.n	8003302 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800330a:	f7ff fe99 	bl	8003040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800330e:	f00b fda7 	bl	800ee60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003312:	f7fd fe4f 	bl	8000fb4 <main>
  bx lr
 8003316:	4770      	bx	lr
  ldr r0, =_sdata
 8003318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800331c:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8003320:	0800f744 	.word	0x0800f744
  ldr r2, =_sbss
 8003324:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8003328:	20003698 	.word	0x20003698

0800332c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800332c:	e7fe      	b.n	800332c <ADC1_2_IRQHandler>
	...

08003330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003334:	4b08      	ldr	r3, [pc, #32]	; (8003358 <HAL_Init+0x28>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a07      	ldr	r2, [pc, #28]	; (8003358 <HAL_Init+0x28>)
 800333a:	f043 0310 	orr.w	r3, r3, #16
 800333e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003340:	2003      	movs	r0, #3
 8003342:	f000 f8d1 	bl	80034e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003346:	2000      	movs	r0, #0
 8003348:	f7ff fdf4 	bl	8002f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800334c:	f7ff fdba 	bl	8002ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40022000 	.word	0x40022000

0800335c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_IncTick+0x1c>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_IncTick+0x20>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4413      	add	r3, r2
 800336c:	4a03      	ldr	r2, [pc, #12]	; (800337c <HAL_IncTick+0x20>)
 800336e:	6013      	str	r3, [r2, #0]
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr
 8003378:	20000018 	.word	0x20000018
 800337c:	200026d4 	.word	0x200026d4

08003380 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return uwTick;
 8003384:	4b02      	ldr	r3, [pc, #8]	; (8003390 <HAL_GetTick+0x10>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr
 8003390:	200026d4 	.word	0x200026d4

08003394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a4:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033b0:	4013      	ands	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033c6:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	60d3      	str	r3, [r2, #12]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <__NVIC_GetPriorityGrouping+0x18>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	f003 0307 	and.w	r3, r3, #7
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	2b00      	cmp	r3, #0
 8003408:	db0b      	blt.n	8003422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	f003 021f 	and.w	r2, r3, #31
 8003410:	4906      	ldr	r1, [pc, #24]	; (800342c <__NVIC_EnableIRQ+0x34>)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2001      	movs	r0, #1
 800341a:	fa00 f202 	lsl.w	r2, r0, r2
 800341e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr
 800342c:	e000e100 	.word	0xe000e100

08003430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	6039      	str	r1, [r7, #0]
 800343a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003440:	2b00      	cmp	r3, #0
 8003442:	db0a      	blt.n	800345a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	b2da      	uxtb	r2, r3
 8003448:	490c      	ldr	r1, [pc, #48]	; (800347c <__NVIC_SetPriority+0x4c>)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	0112      	lsls	r2, r2, #4
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	440b      	add	r3, r1
 8003454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003458:	e00a      	b.n	8003470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	b2da      	uxtb	r2, r3
 800345e:	4908      	ldr	r1, [pc, #32]	; (8003480 <__NVIC_SetPriority+0x50>)
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	3b04      	subs	r3, #4
 8003468:	0112      	lsls	r2, r2, #4
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	440b      	add	r3, r1
 800346e:	761a      	strb	r2, [r3, #24]
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000e100 	.word	0xe000e100
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003484:	b480      	push	{r7}
 8003486:	b089      	sub	sp, #36	; 0x24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f1c3 0307 	rsb	r3, r3, #7
 800349e:	2b04      	cmp	r3, #4
 80034a0:	bf28      	it	cs
 80034a2:	2304      	movcs	r3, #4
 80034a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	3304      	adds	r3, #4
 80034aa:	2b06      	cmp	r3, #6
 80034ac:	d902      	bls.n	80034b4 <NVIC_EncodePriority+0x30>
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3b03      	subs	r3, #3
 80034b2:	e000      	b.n	80034b6 <NVIC_EncodePriority+0x32>
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b8:	f04f 32ff 	mov.w	r2, #4294967295
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43da      	mvns	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	401a      	ands	r2, r3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034cc:	f04f 31ff 	mov.w	r1, #4294967295
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	fa01 f303 	lsl.w	r3, r1, r3
 80034d6:	43d9      	mvns	r1, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034dc:	4313      	orrs	r3, r2
         );
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3724      	adds	r7, #36	; 0x24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7ff ff4f 	bl	8003394 <__NVIC_SetPriorityGrouping>
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034fe:	b580      	push	{r7, lr}
 8003500:	b086      	sub	sp, #24
 8003502:	af00      	add	r7, sp, #0
 8003504:	4603      	mov	r3, r0
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003510:	f7ff ff64 	bl	80033dc <__NVIC_GetPriorityGrouping>
 8003514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	6978      	ldr	r0, [r7, #20]
 800351c:	f7ff ffb2 	bl	8003484 <NVIC_EncodePriority>
 8003520:	4602      	mov	r2, r0
 8003522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003526:	4611      	mov	r1, r2
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff ff81 	bl	8003430 <__NVIC_SetPriority>
}
 800352e:	bf00      	nop
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	4603      	mov	r3, r0
 800353e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff ff57 	bl	80033f8 <__NVIC_EnableIRQ>
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003554:	b480      	push	{r7}
 8003556:	b08b      	sub	sp, #44	; 0x2c
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003562:	2300      	movs	r3, #0
 8003564:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003566:	e169      	b.n	800383c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003568:	2201      	movs	r2, #1
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	429a      	cmp	r2, r3
 8003582:	f040 8158 	bne.w	8003836 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4a9a      	ldr	r2, [pc, #616]	; (80037f4 <HAL_GPIO_Init+0x2a0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d05e      	beq.n	800364e <HAL_GPIO_Init+0xfa>
 8003590:	4a98      	ldr	r2, [pc, #608]	; (80037f4 <HAL_GPIO_Init+0x2a0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d875      	bhi.n	8003682 <HAL_GPIO_Init+0x12e>
 8003596:	4a98      	ldr	r2, [pc, #608]	; (80037f8 <HAL_GPIO_Init+0x2a4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d058      	beq.n	800364e <HAL_GPIO_Init+0xfa>
 800359c:	4a96      	ldr	r2, [pc, #600]	; (80037f8 <HAL_GPIO_Init+0x2a4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d86f      	bhi.n	8003682 <HAL_GPIO_Init+0x12e>
 80035a2:	4a96      	ldr	r2, [pc, #600]	; (80037fc <HAL_GPIO_Init+0x2a8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d052      	beq.n	800364e <HAL_GPIO_Init+0xfa>
 80035a8:	4a94      	ldr	r2, [pc, #592]	; (80037fc <HAL_GPIO_Init+0x2a8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d869      	bhi.n	8003682 <HAL_GPIO_Init+0x12e>
 80035ae:	4a94      	ldr	r2, [pc, #592]	; (8003800 <HAL_GPIO_Init+0x2ac>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d04c      	beq.n	800364e <HAL_GPIO_Init+0xfa>
 80035b4:	4a92      	ldr	r2, [pc, #584]	; (8003800 <HAL_GPIO_Init+0x2ac>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d863      	bhi.n	8003682 <HAL_GPIO_Init+0x12e>
 80035ba:	4a92      	ldr	r2, [pc, #584]	; (8003804 <HAL_GPIO_Init+0x2b0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d046      	beq.n	800364e <HAL_GPIO_Init+0xfa>
 80035c0:	4a90      	ldr	r2, [pc, #576]	; (8003804 <HAL_GPIO_Init+0x2b0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d85d      	bhi.n	8003682 <HAL_GPIO_Init+0x12e>
 80035c6:	2b12      	cmp	r3, #18
 80035c8:	d82a      	bhi.n	8003620 <HAL_GPIO_Init+0xcc>
 80035ca:	2b12      	cmp	r3, #18
 80035cc:	d859      	bhi.n	8003682 <HAL_GPIO_Init+0x12e>
 80035ce:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <HAL_GPIO_Init+0x80>)
 80035d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d4:	0800364f 	.word	0x0800364f
 80035d8:	08003629 	.word	0x08003629
 80035dc:	0800363b 	.word	0x0800363b
 80035e0:	0800367d 	.word	0x0800367d
 80035e4:	08003683 	.word	0x08003683
 80035e8:	08003683 	.word	0x08003683
 80035ec:	08003683 	.word	0x08003683
 80035f0:	08003683 	.word	0x08003683
 80035f4:	08003683 	.word	0x08003683
 80035f8:	08003683 	.word	0x08003683
 80035fc:	08003683 	.word	0x08003683
 8003600:	08003683 	.word	0x08003683
 8003604:	08003683 	.word	0x08003683
 8003608:	08003683 	.word	0x08003683
 800360c:	08003683 	.word	0x08003683
 8003610:	08003683 	.word	0x08003683
 8003614:	08003683 	.word	0x08003683
 8003618:	08003631 	.word	0x08003631
 800361c:	08003645 	.word	0x08003645
 8003620:	4a79      	ldr	r2, [pc, #484]	; (8003808 <HAL_GPIO_Init+0x2b4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003626:	e02c      	b.n	8003682 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	623b      	str	r3, [r7, #32]
          break;
 800362e:	e029      	b.n	8003684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	3304      	adds	r3, #4
 8003636:	623b      	str	r3, [r7, #32]
          break;
 8003638:	e024      	b.n	8003684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	3308      	adds	r3, #8
 8003640:	623b      	str	r3, [r7, #32]
          break;
 8003642:	e01f      	b.n	8003684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	330c      	adds	r3, #12
 800364a:	623b      	str	r3, [r7, #32]
          break;
 800364c:	e01a      	b.n	8003684 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003656:	2304      	movs	r3, #4
 8003658:	623b      	str	r3, [r7, #32]
          break;
 800365a:	e013      	b.n	8003684 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d105      	bne.n	8003670 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003664:	2308      	movs	r3, #8
 8003666:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	611a      	str	r2, [r3, #16]
          break;
 800366e:	e009      	b.n	8003684 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003670:	2308      	movs	r3, #8
 8003672:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	615a      	str	r2, [r3, #20]
          break;
 800367a:	e003      	b.n	8003684 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800367c:	2300      	movs	r3, #0
 800367e:	623b      	str	r3, [r7, #32]
          break;
 8003680:	e000      	b.n	8003684 <HAL_GPIO_Init+0x130>
          break;
 8003682:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2bff      	cmp	r3, #255	; 0xff
 8003688:	d801      	bhi.n	800368e <HAL_GPIO_Init+0x13a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	e001      	b.n	8003692 <HAL_GPIO_Init+0x13e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3304      	adds	r3, #4
 8003692:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2bff      	cmp	r3, #255	; 0xff
 8003698:	d802      	bhi.n	80036a0 <HAL_GPIO_Init+0x14c>
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	e002      	b.n	80036a6 <HAL_GPIO_Init+0x152>
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	3b08      	subs	r3, #8
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	210f      	movs	r1, #15
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	fa01 f303 	lsl.w	r3, r1, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	401a      	ands	r2, r3
 80036b8:	6a39      	ldr	r1, [r7, #32]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	fa01 f303 	lsl.w	r3, r1, r3
 80036c0:	431a      	orrs	r2, r3
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 80b1 	beq.w	8003836 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036d4:	4b4d      	ldr	r3, [pc, #308]	; (800380c <HAL_GPIO_Init+0x2b8>)
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	4a4c      	ldr	r2, [pc, #304]	; (800380c <HAL_GPIO_Init+0x2b8>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6193      	str	r3, [r2, #24]
 80036e0:	4b4a      	ldr	r3, [pc, #296]	; (800380c <HAL_GPIO_Init+0x2b8>)
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036ec:	4a48      	ldr	r2, [pc, #288]	; (8003810 <HAL_GPIO_Init+0x2bc>)
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	3302      	adds	r3, #2
 80036f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	220f      	movs	r2, #15
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4013      	ands	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a40      	ldr	r2, [pc, #256]	; (8003814 <HAL_GPIO_Init+0x2c0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d013      	beq.n	8003740 <HAL_GPIO_Init+0x1ec>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3f      	ldr	r2, [pc, #252]	; (8003818 <HAL_GPIO_Init+0x2c4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00d      	beq.n	800373c <HAL_GPIO_Init+0x1e8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a3e      	ldr	r2, [pc, #248]	; (800381c <HAL_GPIO_Init+0x2c8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d007      	beq.n	8003738 <HAL_GPIO_Init+0x1e4>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a3d      	ldr	r2, [pc, #244]	; (8003820 <HAL_GPIO_Init+0x2cc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d101      	bne.n	8003734 <HAL_GPIO_Init+0x1e0>
 8003730:	2303      	movs	r3, #3
 8003732:	e006      	b.n	8003742 <HAL_GPIO_Init+0x1ee>
 8003734:	2304      	movs	r3, #4
 8003736:	e004      	b.n	8003742 <HAL_GPIO_Init+0x1ee>
 8003738:	2302      	movs	r3, #2
 800373a:	e002      	b.n	8003742 <HAL_GPIO_Init+0x1ee>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <HAL_GPIO_Init+0x1ee>
 8003740:	2300      	movs	r3, #0
 8003742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003744:	f002 0203 	and.w	r2, r2, #3
 8003748:	0092      	lsls	r2, r2, #2
 800374a:	4093      	lsls	r3, r2
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003752:	492f      	ldr	r1, [pc, #188]	; (8003810 <HAL_GPIO_Init+0x2bc>)
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	3302      	adds	r3, #2
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d006      	beq.n	800377a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800376c:	4b2d      	ldr	r3, [pc, #180]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	492c      	ldr	r1, [pc, #176]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	4313      	orrs	r3, r2
 8003776:	600b      	str	r3, [r1, #0]
 8003778:	e006      	b.n	8003788 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800377a:	4b2a      	ldr	r3, [pc, #168]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	43db      	mvns	r3, r3
 8003782:	4928      	ldr	r1, [pc, #160]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 8003784:	4013      	ands	r3, r2
 8003786:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d006      	beq.n	80037a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003794:	4b23      	ldr	r3, [pc, #140]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	4922      	ldr	r1, [pc, #136]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]
 80037a0:	e006      	b.n	80037b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037a2:	4b20      	ldr	r3, [pc, #128]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	491e      	ldr	r1, [pc, #120]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d006      	beq.n	80037ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037bc:	4b19      	ldr	r3, [pc, #100]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	4918      	ldr	r1, [pc, #96]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	608b      	str	r3, [r1, #8]
 80037c8:	e006      	b.n	80037d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037ca:	4b16      	ldr	r3, [pc, #88]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	4914      	ldr	r1, [pc, #80]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d021      	beq.n	8003828 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037e4:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	490e      	ldr	r1, [pc, #56]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60cb      	str	r3, [r1, #12]
 80037f0:	e021      	b.n	8003836 <HAL_GPIO_Init+0x2e2>
 80037f2:	bf00      	nop
 80037f4:	10320000 	.word	0x10320000
 80037f8:	10310000 	.word	0x10310000
 80037fc:	10220000 	.word	0x10220000
 8003800:	10210000 	.word	0x10210000
 8003804:	10120000 	.word	0x10120000
 8003808:	10110000 	.word	0x10110000
 800380c:	40021000 	.word	0x40021000
 8003810:	40010000 	.word	0x40010000
 8003814:	40010800 	.word	0x40010800
 8003818:	40010c00 	.word	0x40010c00
 800381c:	40011000 	.word	0x40011000
 8003820:	40011400 	.word	0x40011400
 8003824:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_GPIO_Init+0x304>)
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	43db      	mvns	r3, r3
 8003830:	4909      	ldr	r1, [pc, #36]	; (8003858 <HAL_GPIO_Init+0x304>)
 8003832:	4013      	ands	r3, r2
 8003834:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	3301      	adds	r3, #1
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	fa22 f303 	lsr.w	r3, r2, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	f47f ae8e 	bne.w	8003568 <HAL_GPIO_Init+0x14>
  }
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	372c      	adds	r7, #44	; 0x2c
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr
 8003858:	40010400 	.word	0x40010400

0800385c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	887b      	ldrh	r3, [r7, #2]
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
 8003878:	e001      	b.n	800387e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800387e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr

0800388a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	460b      	mov	r3, r1
 8003894:	807b      	strh	r3, [r7, #2]
 8003896:	4613      	mov	r3, r2
 8003898:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800389a:	787b      	ldrb	r3, [r7, #1]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038a0:	887a      	ldrh	r2, [r7, #2]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038a6:	e003      	b.n	80038b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038a8:	887b      	ldrh	r3, [r7, #2]
 80038aa:	041a      	lsls	r2, r3, #16
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	611a      	str	r2, [r3, #16]
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr

080038ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	460b      	mov	r3, r1
 80038c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038cc:	887a      	ldrh	r2, [r7, #2]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4013      	ands	r3, r2
 80038d2:	041a      	lsls	r2, r3, #16
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	43d9      	mvns	r1, r3
 80038d8:	887b      	ldrh	r3, [r7, #2]
 80038da:	400b      	ands	r3, r1
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	611a      	str	r2, [r3, #16]
}
 80038e2:	bf00      	nop
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr

080038ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038f6:	4b08      	ldr	r3, [pc, #32]	; (8003918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038f8:	695a      	ldr	r2, [r3, #20]
 80038fa:	88fb      	ldrh	r3, [r7, #6]
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d006      	beq.n	8003910 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003902:	4a05      	ldr	r2, [pc, #20]	; (8003918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	4618      	mov	r0, r3
 800390c:	f000 f806 	bl	800391c <HAL_GPIO_EXTI_Callback>
  }
}
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40010400 	.word	0x40010400

0800391c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr

08003930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e12b      	b.n	8003b9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd faee 	bl	8000f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2224      	movs	r2, #36	; 0x24
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0201 	bic.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003982:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003992:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003994:	f003 f868 	bl	8006a68 <HAL_RCC_GetPCLK1Freq>
 8003998:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4a81      	ldr	r2, [pc, #516]	; (8003ba4 <HAL_I2C_Init+0x274>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d807      	bhi.n	80039b4 <HAL_I2C_Init+0x84>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a80      	ldr	r2, [pc, #512]	; (8003ba8 <HAL_I2C_Init+0x278>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	bf94      	ite	ls
 80039ac:	2301      	movls	r3, #1
 80039ae:	2300      	movhi	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	e006      	b.n	80039c2 <HAL_I2C_Init+0x92>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4a7d      	ldr	r2, [pc, #500]	; (8003bac <HAL_I2C_Init+0x27c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	bf94      	ite	ls
 80039bc:	2301      	movls	r3, #1
 80039be:	2300      	movhi	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e0e7      	b.n	8003b9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4a78      	ldr	r2, [pc, #480]	; (8003bb0 <HAL_I2C_Init+0x280>)
 80039ce:	fba2 2303 	umull	r2, r3, r2, r3
 80039d2:	0c9b      	lsrs	r3, r3, #18
 80039d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	4a6a      	ldr	r2, [pc, #424]	; (8003ba4 <HAL_I2C_Init+0x274>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d802      	bhi.n	8003a04 <HAL_I2C_Init+0xd4>
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	3301      	adds	r3, #1
 8003a02:	e009      	b.n	8003a18 <HAL_I2C_Init+0xe8>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a0a:	fb02 f303 	mul.w	r3, r2, r3
 8003a0e:	4a69      	ldr	r2, [pc, #420]	; (8003bb4 <HAL_I2C_Init+0x284>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	3301      	adds	r3, #1
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	495c      	ldr	r1, [pc, #368]	; (8003ba4 <HAL_I2C_Init+0x274>)
 8003a34:	428b      	cmp	r3, r1
 8003a36:	d819      	bhi.n	8003a6c <HAL_I2C_Init+0x13c>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1e59      	subs	r1, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a46:	1c59      	adds	r1, r3, #1
 8003a48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a4c:	400b      	ands	r3, r1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_I2C_Init+0x138>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1e59      	subs	r1, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a60:	3301      	adds	r3, #1
 8003a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a66:	e051      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003a68:	2304      	movs	r3, #4
 8003a6a:	e04f      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d111      	bne.n	8003a98 <HAL_I2C_Init+0x168>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1e58      	subs	r0, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	440b      	add	r3, r1
 8003a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a86:	3301      	adds	r3, #1
 8003a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf0c      	ite	eq
 8003a90:	2301      	moveq	r3, #1
 8003a92:	2300      	movne	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	e012      	b.n	8003abe <HAL_I2C_Init+0x18e>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1e58      	subs	r0, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6859      	ldr	r1, [r3, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	0099      	lsls	r1, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aae:	3301      	adds	r3, #1
 8003ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Init+0x196>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e022      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10e      	bne.n	8003aec <HAL_I2C_Init+0x1bc>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1e58      	subs	r0, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	440b      	add	r3, r1
 8003adc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aea:	e00f      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	1e58      	subs	r0, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	0099      	lsls	r1, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b02:	3301      	adds	r3, #1
 8003b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	6809      	ldr	r1, [r1, #0]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69da      	ldr	r2, [r3, #28]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6911      	ldr	r1, [r2, #16]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68d2      	ldr	r2, [r2, #12]
 8003b46:	4311      	orrs	r1, r2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	000186a0 	.word	0x000186a0
 8003ba8:	001e847f 	.word	0x001e847f
 8003bac:	003d08ff 	.word	0x003d08ff
 8003bb0:	431bde83 	.word	0x431bde83
 8003bb4:	10624dd3 	.word	0x10624dd3

08003bb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af02      	add	r7, sp, #8
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	4608      	mov	r0, r1
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	817b      	strh	r3, [r7, #10]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	813b      	strh	r3, [r7, #8]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bd2:	f7ff fbd5 	bl	8003380 <HAL_GetTick>
 8003bd6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	f040 80d9 	bne.w	8003d98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	2319      	movs	r3, #25
 8003bec:	2201      	movs	r2, #1
 8003bee:	496d      	ldr	r1, [pc, #436]	; (8003da4 <HAL_I2C_Mem_Write+0x1ec>)
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 fcc1 	bl	8004578 <I2C_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e0cc      	b.n	8003d9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_I2C_Mem_Write+0x56>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e0c5      	b.n	8003d9a <HAL_I2C_Mem_Write+0x1e2>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d007      	beq.n	8003c34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2221      	movs	r2, #33	; 0x21
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2240      	movs	r2, #64	; 0x40
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a3a      	ldr	r2, [r7, #32]
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a4d      	ldr	r2, [pc, #308]	; (8003da8 <HAL_I2C_Mem_Write+0x1f0>)
 8003c74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c76:	88f8      	ldrh	r0, [r7, #6]
 8003c78:	893a      	ldrh	r2, [r7, #8]
 8003c7a:	8979      	ldrh	r1, [r7, #10]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	4603      	mov	r3, r0
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 faf8 	bl	800427c <I2C_RequestMemoryWrite>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d052      	beq.n	8003d38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e081      	b.n	8003d9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fd42 	bl	8004724 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00d      	beq.n	8003cc2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d107      	bne.n	8003cbe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e06b      	b.n	8003d9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	781a      	ldrb	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d11b      	bne.n	8003d38 <HAL_I2C_Mem_Write+0x180>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d017      	beq.n	8003d38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	781a      	ldrb	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1aa      	bne.n	8003c96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fd2e 	bl	80047a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00d      	beq.n	8003d6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d107      	bne.n	8003d68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e016      	b.n	8003d9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e000      	b.n	8003d9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
  }
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	00100002 	.word	0x00100002
 8003da8:	ffff0000 	.word	0xffff0000

08003dac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08c      	sub	sp, #48	; 0x30
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	4608      	mov	r0, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	461a      	mov	r2, r3
 8003dba:	4603      	mov	r3, r0
 8003dbc:	817b      	strh	r3, [r7, #10]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	813b      	strh	r3, [r7, #8]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dca:	f7ff fad9 	bl	8003380 <HAL_GetTick>
 8003dce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	f040 8244 	bne.w	8004266 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	2319      	movs	r3, #25
 8003de4:	2201      	movs	r2, #1
 8003de6:	4982      	ldr	r1, [pc, #520]	; (8003ff0 <HAL_I2C_Mem_Read+0x244>)
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 fbc5 	bl	8004578 <I2C_WaitOnFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003df4:	2302      	movs	r3, #2
 8003df6:	e237      	b.n	8004268 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_I2C_Mem_Read+0x5a>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e230      	b.n	8004268 <HAL_I2C_Mem_Read+0x4bc>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d007      	beq.n	8003e2c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2222      	movs	r2, #34	; 0x22
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2240      	movs	r2, #64	; 0x40
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4a62      	ldr	r2, [pc, #392]	; (8003ff4 <HAL_I2C_Mem_Read+0x248>)
 8003e6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e6e:	88f8      	ldrh	r0, [r7, #6]
 8003e70:	893a      	ldrh	r2, [r7, #8]
 8003e72:	8979      	ldrh	r1, [r7, #10]
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	9301      	str	r3, [sp, #4]
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 fa92 	bl	80043a8 <I2C_RequestMemoryRead>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e1ec      	b.n	8004268 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d113      	bne.n	8003ebe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	e1c0      	b.n	8004240 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d11e      	bne.n	8003f04 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ed6:	b672      	cpsid	i
}
 8003ed8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eda:	2300      	movs	r3, #0
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f00:	b662      	cpsie	i
}
 8003f02:	e035      	b.n	8003f70 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d11e      	bne.n	8003f4a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f1c:	b672      	cpsid	i
}
 8003f1e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f46:	b662      	cpsie	i
}
 8003f48:	e012      	b.n	8003f70 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f58:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003f70:	e166      	b.n	8004240 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	f200 811f 	bhi.w	80041ba <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d123      	bne.n	8003fcc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 fc4d 	bl	8004828 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e167      	b.n	8004268 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fca:	e139      	b.n	8004240 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d152      	bne.n	800407a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fda:	2200      	movs	r2, #0
 8003fdc:	4906      	ldr	r1, [pc, #24]	; (8003ff8 <HAL_I2C_Mem_Read+0x24c>)
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 faca 	bl	8004578 <I2C_WaitOnFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e13c      	b.n	8004268 <HAL_I2C_Mem_Read+0x4bc>
 8003fee:	bf00      	nop
 8003ff0:	00100002 	.word	0x00100002
 8003ff4:	ffff0000 	.word	0xffff0000
 8003ff8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003ffc:	b672      	cpsid	i
}
 8003ffe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800400e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	3b01      	subs	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004042:	b662      	cpsie	i
}
 8004044:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004078:	e0e2      	b.n	8004240 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004080:	2200      	movs	r2, #0
 8004082:	497b      	ldr	r1, [pc, #492]	; (8004270 <HAL_I2C_Mem_Read+0x4c4>)
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fa77 	bl	8004578 <I2C_WaitOnFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0e9      	b.n	8004268 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040a4:	b672      	cpsid	i
}
 80040a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80040da:	4b66      	ldr	r3, [pc, #408]	; (8004274 <HAL_I2C_Mem_Read+0x4c8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	08db      	lsrs	r3, r3, #3
 80040e0:	4a65      	ldr	r2, [pc, #404]	; (8004278 <HAL_I2C_Mem_Read+0x4cc>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	0a1a      	lsrs	r2, r3, #8
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	00da      	lsls	r2, r3, #3
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d118      	bne.n	8004132 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f043 0220 	orr.w	r2, r3, #32
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004122:	b662      	cpsie	i
}
 8004124:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e09a      	b.n	8004268 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b04      	cmp	r3, #4
 800413e:	d1d9      	bne.n	80040f4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004182:	b662      	cpsie	i
}
 8004184:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041b8:	e042      	b.n	8004240 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 fb32 	bl	8004828 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e04c      	b.n	8004268 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b04      	cmp	r3, #4
 800420c:	d118      	bne.n	8004240 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422a:	3b01      	subs	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004244:	2b00      	cmp	r3, #0
 8004246:	f47f ae94 	bne.w	8003f72 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	e000      	b.n	8004268 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004266:	2302      	movs	r3, #2
  }
}
 8004268:	4618      	mov	r0, r3
 800426a:	3728      	adds	r7, #40	; 0x28
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	00010004 	.word	0x00010004
 8004274:	20000010 	.word	0x20000010
 8004278:	14f8b589 	.word	0x14f8b589

0800427c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	4608      	mov	r0, r1
 8004286:	4611      	mov	r1, r2
 8004288:	461a      	mov	r2, r3
 800428a:	4603      	mov	r3, r0
 800428c:	817b      	strh	r3, [r7, #10]
 800428e:	460b      	mov	r3, r1
 8004290:	813b      	strh	r3, [r7, #8]
 8004292:	4613      	mov	r3, r2
 8004294:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f960 	bl	8004578 <I2C_WaitOnFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00d      	beq.n	80042da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042cc:	d103      	bne.n	80042d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e05f      	b.n	800439a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042da:	897b      	ldrh	r3, [r7, #10]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	6a3a      	ldr	r2, [r7, #32]
 80042ee:	492d      	ldr	r1, [pc, #180]	; (80043a4 <I2C_RequestMemoryWrite+0x128>)
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f998 	bl	8004626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e04c      	b.n	800439a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004318:	6a39      	ldr	r1, [r7, #32]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fa02 	bl	8004724 <I2C_WaitOnTXEFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00d      	beq.n	8004342 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	2b04      	cmp	r3, #4
 800432c:	d107      	bne.n	800433e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800433c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e02b      	b.n	800439a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d105      	bne.n	8004354 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004348:	893b      	ldrh	r3, [r7, #8]
 800434a:	b2da      	uxtb	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	611a      	str	r2, [r3, #16]
 8004352:	e021      	b.n	8004398 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004354:	893b      	ldrh	r3, [r7, #8]
 8004356:	0a1b      	lsrs	r3, r3, #8
 8004358:	b29b      	uxth	r3, r3
 800435a:	b2da      	uxtb	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004364:	6a39      	ldr	r1, [r7, #32]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f9dc 	bl	8004724 <I2C_WaitOnTXEFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	2b04      	cmp	r3, #4
 8004378:	d107      	bne.n	800438a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004388:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e005      	b.n	800439a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800438e:	893b      	ldrh	r3, [r7, #8]
 8004390:	b2da      	uxtb	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	00010002 	.word	0x00010002

080043a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	4608      	mov	r0, r1
 80043b2:	4611      	mov	r1, r2
 80043b4:	461a      	mov	r2, r3
 80043b6:	4603      	mov	r3, r0
 80043b8:	817b      	strh	r3, [r7, #10]
 80043ba:	460b      	mov	r3, r1
 80043bc:	813b      	strh	r3, [r7, #8]
 80043be:	4613      	mov	r3, r2
 80043c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f8c2 	bl	8004578 <I2C_WaitOnFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00d      	beq.n	8004416 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004408:	d103      	bne.n	8004412 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004410:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e0aa      	b.n	800456c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004416:	897b      	ldrh	r3, [r7, #10]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	461a      	mov	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004424:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	6a3a      	ldr	r2, [r7, #32]
 800442a:	4952      	ldr	r1, [pc, #328]	; (8004574 <I2C_RequestMemoryRead+0x1cc>)
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f8fa 	bl	8004626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e097      	b.n	800456c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004454:	6a39      	ldr	r1, [r7, #32]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f964 	bl	8004724 <I2C_WaitOnTXEFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00d      	beq.n	800447e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	2b04      	cmp	r3, #4
 8004468:	d107      	bne.n	800447a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004478:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e076      	b.n	800456c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800447e:	88fb      	ldrh	r3, [r7, #6]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d105      	bne.n	8004490 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004484:	893b      	ldrh	r3, [r7, #8]
 8004486:	b2da      	uxtb	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	611a      	str	r2, [r3, #16]
 800448e:	e021      	b.n	80044d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004490:	893b      	ldrh	r3, [r7, #8]
 8004492:	0a1b      	lsrs	r3, r3, #8
 8004494:	b29b      	uxth	r3, r3
 8004496:	b2da      	uxtb	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800449e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a0:	6a39      	ldr	r1, [r7, #32]
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 f93e 	bl	8004724 <I2C_WaitOnTXEFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00d      	beq.n	80044ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d107      	bne.n	80044c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e050      	b.n	800456c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ca:	893b      	ldrh	r3, [r7, #8]
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d6:	6a39      	ldr	r1, [r7, #32]
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f923 	bl	8004724 <I2C_WaitOnTXEFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00d      	beq.n	8004500 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d107      	bne.n	80044fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e035      	b.n	800456c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800450e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	2200      	movs	r2, #0
 8004518:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f82b 	bl	8004578 <I2C_WaitOnFlagUntilTimeout>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00d      	beq.n	8004544 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004536:	d103      	bne.n	8004540 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800453e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e013      	b.n	800456c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004544:	897b      	ldrh	r3, [r7, #10]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	b2da      	uxtb	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	6a3a      	ldr	r2, [r7, #32]
 8004558:	4906      	ldr	r1, [pc, #24]	; (8004574 <I2C_RequestMemoryRead+0x1cc>)
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f863 	bl	8004626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	00010002 	.word	0x00010002

08004578 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	4613      	mov	r3, r2
 8004586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004588:	e025      	b.n	80045d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004590:	d021      	beq.n	80045d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004592:	f7fe fef5 	bl	8003380 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d302      	bcc.n	80045a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d116      	bne.n	80045d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f043 0220 	orr.w	r2, r3, #32
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e023      	b.n	800461e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d10d      	bne.n	80045fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	43da      	mvns	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4013      	ands	r3, r2
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bf0c      	ite	eq
 80045f2:	2301      	moveq	r3, #1
 80045f4:	2300      	movne	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	e00c      	b.n	8004616 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	43da      	mvns	r2, r3
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4013      	ands	r3, r2
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	bf0c      	ite	eq
 800460e:	2301      	moveq	r3, #1
 8004610:	2300      	movne	r3, #0
 8004612:	b2db      	uxtb	r3, r3
 8004614:	461a      	mov	r2, r3
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	429a      	cmp	r2, r3
 800461a:	d0b6      	beq.n	800458a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b084      	sub	sp, #16
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	607a      	str	r2, [r7, #4]
 8004632:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004634:	e051      	b.n	80046da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004644:	d123      	bne.n	800468e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004654:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800465e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f043 0204 	orr.w	r2, r3, #4
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e046      	b.n	800471c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004694:	d021      	beq.n	80046da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004696:	f7fe fe73 	bl	8003380 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d302      	bcc.n	80046ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d116      	bne.n	80046da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f043 0220 	orr.w	r2, r3, #32
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e020      	b.n	800471c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	0c1b      	lsrs	r3, r3, #16
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d10c      	bne.n	80046fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	43da      	mvns	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4013      	ands	r3, r2
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	bf14      	ite	ne
 80046f6:	2301      	movne	r3, #1
 80046f8:	2300      	moveq	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	e00b      	b.n	8004716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	43da      	mvns	r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	4013      	ands	r3, r2
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	bf14      	ite	ne
 8004710:	2301      	movne	r3, #1
 8004712:	2300      	moveq	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d18d      	bne.n	8004636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004730:	e02d      	b.n	800478e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 f8ce 	bl	80048d4 <I2C_IsAcknowledgeFailed>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e02d      	b.n	800479e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d021      	beq.n	800478e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474a:	f7fe fe19 	bl	8003380 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	429a      	cmp	r2, r3
 8004758:	d302      	bcc.n	8004760 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d116      	bne.n	800478e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f043 0220 	orr.w	r2, r3, #32
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e007      	b.n	800479e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004798:	2b80      	cmp	r3, #128	; 0x80
 800479a:	d1ca      	bne.n	8004732 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b084      	sub	sp, #16
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047b2:	e02d      	b.n	8004810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 f88d 	bl	80048d4 <I2C_IsAcknowledgeFailed>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e02d      	b.n	8004820 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ca:	d021      	beq.n	8004810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047cc:	f7fe fdd8 	bl	8003380 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d302      	bcc.n	80047e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d116      	bne.n	8004810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	f043 0220 	orr.w	r2, r3, #32
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e007      	b.n	8004820 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	2b04      	cmp	r3, #4
 800481c:	d1ca      	bne.n	80047b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004834:	e042      	b.n	80048bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	f003 0310 	and.w	r3, r3, #16
 8004840:	2b10      	cmp	r3, #16
 8004842:	d119      	bne.n	8004878 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 0210 	mvn.w	r2, #16
 800484c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e029      	b.n	80048cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004878:	f7fe fd82 	bl	8003380 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	429a      	cmp	r2, r3
 8004886:	d302      	bcc.n	800488e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d116      	bne.n	80048bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	f043 0220 	orr.w	r2, r3, #32
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e007      	b.n	80048cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c6:	2b40      	cmp	r3, #64	; 0x40
 80048c8:	d1b5      	bne.n	8004836 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ea:	d11b      	bne.n	8004924 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	f043 0204 	orr.w	r2, r3, #4
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e000      	b.n	8004926 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr

08004930 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004932:	b08b      	sub	sp, #44	; 0x2c
 8004934:	af06      	add	r7, sp, #24
 8004936:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e0fd      	b.n	8004b3e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f009 ffd8 	bl	800e90c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2203      	movs	r2, #3
 8004960:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f002 fe7f 	bl	800766c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	687e      	ldr	r6, [r7, #4]
 8004976:	466d      	mov	r5, sp
 8004978:	f106 0410 	add.w	r4, r6, #16
 800497c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800497e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	602b      	str	r3, [r5, #0]
 8004984:	1d33      	adds	r3, r6, #4
 8004986:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004988:	6838      	ldr	r0, [r7, #0]
 800498a:	f002 fe49 	bl	8007620 <USB_CoreInit>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0ce      	b.n	8004b3e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f002 fe7a 	bl	80076a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049ac:	2300      	movs	r3, #0
 80049ae:	73fb      	strb	r3, [r7, #15]
 80049b0:	e04c      	b.n	8004a4c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	440b      	add	r3, r1
 80049c2:	3301      	adds	r3, #1
 80049c4:	2201      	movs	r2, #1
 80049c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	440b      	add	r3, r1
 80049d8:	7bfa      	ldrb	r2, [r7, #15]
 80049da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80049dc:	7bfa      	ldrb	r2, [r7, #15]
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	b298      	uxth	r0, r3
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	440b      	add	r3, r1
 80049ee:	3336      	adds	r3, #54	; 0x36
 80049f0:	4602      	mov	r2, r0
 80049f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	440b      	add	r3, r1
 8004a04:	3303      	adds	r3, #3
 8004a06:	2200      	movs	r2, #0
 8004a08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a0a:	7bfa      	ldrb	r2, [r7, #15]
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	440b      	add	r3, r1
 8004a18:	3338      	adds	r3, #56	; 0x38
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a1e:	7bfa      	ldrb	r2, [r7, #15]
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	440b      	add	r3, r1
 8004a2c:	333c      	adds	r3, #60	; 0x3c
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a32:	7bfa      	ldrb	r2, [r7, #15]
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	440b      	add	r3, r1
 8004a40:	3340      	adds	r3, #64	; 0x40
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	73fb      	strb	r3, [r7, #15]
 8004a4c:	7bfa      	ldrb	r2, [r7, #15]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d3ad      	bcc.n	80049b2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a56:	2300      	movs	r3, #0
 8004a58:	73fb      	strb	r3, [r7, #15]
 8004a5a:	e044      	b.n	8004ae6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a5c:	7bfa      	ldrb	r2, [r7, #15]
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	440b      	add	r3, r1
 8004a6a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004a6e:	2200      	movs	r2, #0
 8004a70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a72:	7bfa      	ldrb	r2, [r7, #15]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	440b      	add	r3, r1
 8004a80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a84:	7bfa      	ldrb	r2, [r7, #15]
 8004a86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a88:	7bfa      	ldrb	r2, [r7, #15]
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	440b      	add	r3, r1
 8004a96:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a9e:	7bfa      	ldrb	r2, [r7, #15]
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	440b      	add	r3, r1
 8004aac:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ab4:	7bfa      	ldrb	r2, [r7, #15]
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	440b      	add	r3, r1
 8004ac2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004aca:	7bfa      	ldrb	r2, [r7, #15]
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	440b      	add	r3, r1
 8004ad8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	73fb      	strb	r3, [r7, #15]
 8004ae6:	7bfa      	ldrb	r2, [r7, #15]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d3b5      	bcc.n	8004a5c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	603b      	str	r3, [r7, #0]
 8004af6:	687e      	ldr	r6, [r7, #4]
 8004af8:	466d      	mov	r5, sp
 8004afa:	f106 0410 	add.w	r4, r6, #16
 8004afe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	602b      	str	r3, [r5, #0]
 8004b06:	1d33      	adds	r3, r6, #4
 8004b08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b0a:	6838      	ldr	r0, [r7, #0]
 8004b0c:	f002 fdd4 	bl	80076b8 <USB_DevInit>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2202      	movs	r2, #2
 8004b1a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e00d      	b.n	8004b3e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f004 ff45 	bl	80099c6 <USB_DevDisconnect>

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b46 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b082      	sub	sp, #8
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_PCD_Start+0x16>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e016      	b.n	8004b8a <HAL_PCD_Start+0x44>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f002 fd69 	bl	8007640 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004b6e:	2101      	movs	r1, #1
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f00a f93e 	bl	800edf2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f004 ff19 	bl	80099b2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b088      	sub	sp, #32
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f004 ff1b 	bl	80099da <USB_ReadInterrupts>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bae:	d102      	bne.n	8004bb6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 fb61 	bl	8005278 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f004 ff0d 	bl	80099da <USB_ReadInterrupts>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bca:	d112      	bne.n	8004bf2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bde:	b292      	uxth	r2, r2
 8004be0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f009 ff0c 	bl	800ea02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004bea:	2100      	movs	r1, #0
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f925 	bl	8004e3c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f004 feef 	bl	80099da <USB_ReadInterrupts>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c06:	d10b      	bne.n	8004c20 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c1a:	b292      	uxth	r2, r2
 8004c1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f004 fed8 	bl	80099da <USB_ReadInterrupts>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c34:	d10b      	bne.n	8004c4e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c48:	b292      	uxth	r2, r2
 8004c4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f004 fec1 	bl	80099da <USB_ReadInterrupts>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c62:	d126      	bne.n	8004cb2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0204 	bic.w	r2, r2, #4
 8004c76:	b292      	uxth	r2, r2
 8004c78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0208 	bic.w	r2, r2, #8
 8004c8e:	b292      	uxth	r2, r2
 8004c90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f009 feed 	bl	800ea74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cac:	b292      	uxth	r2, r2
 8004cae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f004 fe8f 	bl	80099da <USB_ReadInterrupts>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc6:	f040 8084 	bne.w	8004dd2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004cca:	2300      	movs	r3, #0
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	e011      	b.n	8004cf4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	7ffb      	ldrb	r3, [r7, #31]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	441a      	add	r2, r3
 8004cdc:	7ffb      	ldrb	r3, [r7, #31]
 8004cde:	8812      	ldrh	r2, [r2, #0]
 8004ce0:	b292      	uxth	r2, r2
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	f107 0120 	add.w	r1, r7, #32
 8004ce8:	440b      	add	r3, r1
 8004cea:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004cee:	7ffb      	ldrb	r3, [r7, #31]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	77fb      	strb	r3, [r7, #31]
 8004cf4:	7ffb      	ldrb	r3, [r7, #31]
 8004cf6:	2b07      	cmp	r3, #7
 8004cf8:	d9ea      	bls.n	8004cd0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0201 	orr.w	r2, r2, #1
 8004d0c:	b292      	uxth	r2, r2
 8004d0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0201 	bic.w	r2, r2, #1
 8004d24:	b292      	uxth	r2, r2
 8004d26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004d2a:	bf00      	nop
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f6      	beq.n	8004d2c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d50:	b292      	uxth	r2, r2
 8004d52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004d56:	2300      	movs	r3, #0
 8004d58:	77fb      	strb	r3, [r7, #31]
 8004d5a:	e010      	b.n	8004d7e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004d5c:	7ffb      	ldrb	r3, [r7, #31]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6812      	ldr	r2, [r2, #0]
 8004d62:	4611      	mov	r1, r2
 8004d64:	7ffa      	ldrb	r2, [r7, #31]
 8004d66:	0092      	lsls	r2, r2, #2
 8004d68:	440a      	add	r2, r1
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	f107 0120 	add.w	r1, r7, #32
 8004d70:	440b      	add	r3, r1
 8004d72:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004d76:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004d78:	7ffb      	ldrb	r3, [r7, #31]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	77fb      	strb	r3, [r7, #31]
 8004d7e:	7ffb      	ldrb	r3, [r7, #31]
 8004d80:	2b07      	cmp	r3, #7
 8004d82:	d9eb      	bls.n	8004d5c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0208 	orr.w	r2, r2, #8
 8004d96:	b292      	uxth	r2, r2
 8004d98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dae:	b292      	uxth	r2, r2
 8004db0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0204 	orr.w	r2, r2, #4
 8004dc6:	b292      	uxth	r2, r2
 8004dc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f009 fe37 	bl	800ea40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f004 fdff 	bl	80099da <USB_ReadInterrupts>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004de6:	d10e      	bne.n	8004e06 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004dfa:	b292      	uxth	r2, r2
 8004dfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f009 fdf0 	bl	800e9e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f004 fde5 	bl	80099da <USB_ReadInterrupts>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e1a:	d10b      	bne.n	8004e34 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e2e:	b292      	uxth	r2, r2
 8004e30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004e34:	bf00      	nop
 8004e36:	3720      	adds	r7, #32
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_PCD_SetAddress+0x1a>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e013      	b.n	8004e7e <HAL_PCD_SetAddress+0x42>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	78fa      	ldrb	r2, [r7, #3]
 8004e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	78fa      	ldrb	r2, [r7, #3]
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f004 fd8c 	bl	800998c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	4608      	mov	r0, r1
 8004e90:	4611      	mov	r1, r2
 8004e92:	461a      	mov	r2, r3
 8004e94:	4603      	mov	r3, r0
 8004e96:	70fb      	strb	r3, [r7, #3]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	803b      	strh	r3, [r7, #0]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	da0e      	bge.n	8004eca <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eac:	78fb      	ldrb	r3, [r7, #3]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	705a      	strb	r2, [r3, #1]
 8004ec8:	e00e      	b.n	8004ee8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	f003 0207 	and.w	r2, r3, #7
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	4413      	add	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004ee8:	78fb      	ldrb	r3, [r7, #3]
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004ef4:	883a      	ldrh	r2, [r7, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	78ba      	ldrb	r2, [r7, #2]
 8004efe:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	785b      	ldrb	r3, [r3, #1]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d004      	beq.n	8004f12 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f12:	78bb      	ldrb	r3, [r7, #2]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d102      	bne.n	8004f1e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_PCD_EP_Open+0xa6>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e00e      	b.n	8004f4a <HAL_PCD_EP_Open+0xc4>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68f9      	ldr	r1, [r7, #12]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f002 fbdc 	bl	80076f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004f48:	7afb      	ldrb	r3, [r7, #11]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	da0e      	bge.n	8004f84 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f66:	78fb      	ldrb	r3, [r7, #3]
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	4613      	mov	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	4413      	add	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	705a      	strb	r2, [r3, #1]
 8004f82:	e00e      	b.n	8004fa2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	f003 0207 	and.w	r2, r3, #7
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	4413      	add	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004fa2:	78fb      	ldrb	r3, [r7, #3]
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_PCD_EP_Close+0x6a>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e00e      	b.n	8004fda <HAL_PCD_EP_Close+0x88>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68f9      	ldr	r1, [r7, #12]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f002 fefe 	bl	8007dcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b086      	sub	sp, #24
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	603b      	str	r3, [r7, #0]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ff2:	7afb      	ldrb	r3, [r7, #11]
 8004ff4:	f003 0207 	and.w	r2, r3, #7
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2200      	movs	r2, #0
 800501a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2200      	movs	r2, #0
 8005020:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005022:	7afb      	ldrb	r3, [r7, #11]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	b2da      	uxtb	r2, r3
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800502e:	7afb      	ldrb	r3, [r7, #11]
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	2b00      	cmp	r3, #0
 8005036:	d106      	bne.n	8005046 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6979      	ldr	r1, [r7, #20]
 800503e:	4618      	mov	r0, r3
 8005040:	f003 f8b0 	bl	80081a4 <USB_EPStartXfer>
 8005044:	e005      	b.n	8005052 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6979      	ldr	r1, [r7, #20]
 800504c:	4618      	mov	r0, r3
 800504e:	f003 f8a9 	bl	80081a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	f003 0207 	and.w	r2, r3, #7
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	4613      	mov	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	440b      	add	r3, r1
 800507a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800507e:	681b      	ldr	r3, [r3, #0]
}
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	bc80      	pop	{r7}
 8005088:	4770      	bx	lr

0800508a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b086      	sub	sp, #24
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	603b      	str	r3, [r7, #0]
 8005096:	460b      	mov	r3, r1
 8005098:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800509a:	7afb      	ldrb	r3, [r7, #11]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4413      	add	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2200      	movs	r2, #0
 80050ce:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2201      	movs	r2, #1
 80050d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050d6:	7afb      	ldrb	r3, [r7, #11]
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050e2:	7afb      	ldrb	r3, [r7, #11]
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d106      	bne.n	80050fa <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6979      	ldr	r1, [r7, #20]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f003 f856 	bl	80081a4 <USB_EPStartXfer>
 80050f8:	e005      	b.n	8005106 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6979      	ldr	r1, [r7, #20]
 8005100:	4618      	mov	r0, r3
 8005102:	f003 f84f 	bl	80081a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	f003 0207 	and.w	r2, r3, #7
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	429a      	cmp	r2, r3
 8005128:	d901      	bls.n	800512e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e04c      	b.n	80051c8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800512e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005132:	2b00      	cmp	r3, #0
 8005134:	da0e      	bge.n	8005154 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005136:	78fb      	ldrb	r3, [r7, #3]
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	4413      	add	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2201      	movs	r2, #1
 8005150:	705a      	strb	r2, [r3, #1]
 8005152:	e00c      	b.n	800516e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005154:	78fa      	ldrb	r2, [r7, #3]
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	4413      	add	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2201      	movs	r2, #1
 8005172:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	b2da      	uxtb	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005186:	2b01      	cmp	r3, #1
 8005188:	d101      	bne.n	800518e <HAL_PCD_EP_SetStall+0x7e>
 800518a:	2302      	movs	r3, #2
 800518c:	e01c      	b.n	80051c8 <HAL_PCD_EP_SetStall+0xb8>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68f9      	ldr	r1, [r7, #12]
 800519c:	4618      	mov	r0, r3
 800519e:	f004 faf8 	bl	8009792 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051a2:	78fb      	ldrb	r3, [r7, #3]
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d108      	bne.n	80051be <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80051b6:	4619      	mov	r1, r3
 80051b8:	4610      	mov	r0, r2
 80051ba:	f004 fc1d 	bl	80099f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	f003 020f 	and.w	r2, r3, #15
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d901      	bls.n	80051ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e040      	b.n	8005270 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	da0e      	bge.n	8005214 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051f6:	78fb      	ldrb	r3, [r7, #3]
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	4613      	mov	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	4413      	add	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2201      	movs	r2, #1
 8005210:	705a      	strb	r2, [r3, #1]
 8005212:	e00e      	b.n	8005232 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005214:	78fb      	ldrb	r3, [r7, #3]
 8005216:	f003 0207 	and.w	r2, r3, #7
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	4413      	add	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005238:	78fb      	ldrb	r3, [r7, #3]
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	b2da      	uxtb	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800524a:	2b01      	cmp	r3, #1
 800524c:	d101      	bne.n	8005252 <HAL_PCD_EP_ClrStall+0x82>
 800524e:	2302      	movs	r3, #2
 8005250:	e00e      	b.n	8005270 <HAL_PCD_EP_ClrStall+0xa0>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68f9      	ldr	r1, [r7, #12]
 8005260:	4618      	mov	r0, r3
 8005262:	f004 fae6 	bl	8009832 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08e      	sub	sp, #56	; 0x38
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005280:	e2ec      	b.n	800585c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800528a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800528c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800528e:	b2db      	uxtb	r3, r3
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005298:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800529c:	2b00      	cmp	r3, #0
 800529e:	f040 8161 	bne.w	8005564 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80052a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d152      	bne.n	8005352 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80052b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052bc:	81fb      	strh	r3, [r7, #14]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	89fb      	ldrh	r3, [r7, #14]
 80052c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3328      	adds	r3, #40	; 0x28
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052de:	b29b      	uxth	r3, r3
 80052e0:	461a      	mov	r2, r3
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	4413      	add	r3, r2
 80052ea:	3302      	adds	r3, #2
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6812      	ldr	r2, [r2, #0]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	695a      	ldr	r2, [r3, #20]
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	441a      	add	r2, r3
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005310:	2100      	movs	r1, #0
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f009 fb4d 	bl	800e9b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 829b 	beq.w	800585c <PCD_EP_ISR_Handler+0x5e4>
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f040 8296 	bne.w	800585c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005336:	b2db      	uxtb	r3, r3
 8005338:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800533c:	b2da      	uxtb	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	b292      	uxth	r2, r2
 8005344:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005350:	e284      	b.n	800585c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005362:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005368:	2b00      	cmp	r3, #0
 800536a:	d034      	beq.n	80053d6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005374:	b29b      	uxth	r3, r3
 8005376:	461a      	mov	r2, r3
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	4413      	add	r3, r2
 8005380:	3306      	adds	r3, #6
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6812      	ldr	r2, [r2, #0]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6818      	ldr	r0, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	f004 fb74 	bl	8009a98 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80053bc:	4013      	ands	r3, r2
 80053be:	823b      	strh	r3, [r7, #16]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	8a3a      	ldrh	r2, [r7, #16]
 80053c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053ca:	b292      	uxth	r2, r2
 80053cc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f009 fac2 	bl	800e958 <HAL_PCD_SetupStageCallback>
 80053d4:	e242      	b.n	800585c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80053d6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f280 823e 	bge.w	800585c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80053ec:	4013      	ands	r3, r2
 80053ee:	83bb      	strh	r3, [r7, #28]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	8bba      	ldrh	r2, [r7, #28]
 80053f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053fa:	b292      	uxth	r2, r2
 80053fc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005406:	b29b      	uxth	r3, r3
 8005408:	461a      	mov	r2, r3
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	4413      	add	r3, r2
 8005412:	3306      	adds	r3, #6
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6812      	ldr	r2, [r2, #0]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d019      	beq.n	8005466 <PCD_EP_ISR_Handler+0x1ee>
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d015      	beq.n	8005466 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6818      	ldr	r0, [r3, #0]
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	6959      	ldr	r1, [r3, #20]
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800544a:	b29b      	uxth	r3, r3
 800544c:	f004 fb24 	bl	8009a98 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	695a      	ldr	r2, [r3, #20]
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	441a      	add	r2, r3
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800545e:	2100      	movs	r1, #0
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f009 fa8b 	bl	800e97c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005472:	2b00      	cmp	r3, #0
 8005474:	f040 81f2 	bne.w	800585c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005486:	b29b      	uxth	r3, r3
 8005488:	461a      	mov	r2, r3
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	4413      	add	r3, r2
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d112      	bne.n	80054c6 <PCD_EP_ISR_Handler+0x24e>
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	801a      	strh	r2, [r3, #0]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054be:	b29a      	uxth	r2, r3
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	801a      	strh	r2, [r3, #0]
 80054c4:	e02f      	b.n	8005526 <PCD_EP_ISR_Handler+0x2ae>
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b3e      	cmp	r3, #62	; 0x3e
 80054cc:	d813      	bhi.n	80054f6 <PCD_EP_ISR_Handler+0x27e>
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	085b      	lsrs	r3, r3, #1
 80054d4:	633b      	str	r3, [r7, #48]	; 0x30
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <PCD_EP_ISR_Handler+0x270>
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	3301      	adds	r3, #1
 80054e6:	633b      	str	r3, [r7, #48]	; 0x30
 80054e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	029b      	lsls	r3, r3, #10
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	801a      	strh	r2, [r3, #0]
 80054f4:	e017      	b.n	8005526 <PCD_EP_ISR_Handler+0x2ae>
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	095b      	lsrs	r3, r3, #5
 80054fc:	633b      	str	r3, [r7, #48]	; 0x30
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	2b00      	cmp	r3, #0
 8005508:	d102      	bne.n	8005510 <PCD_EP_ISR_Handler+0x298>
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	3b01      	subs	r3, #1
 800550e:	633b      	str	r3, [r7, #48]	; 0x30
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	b29b      	uxth	r3, r3
 8005514:	029b      	lsls	r3, r3, #10
 8005516:	b29b      	uxth	r3, r3
 8005518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800551c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005520:	b29a      	uxth	r2, r3
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b29b      	uxth	r3, r3
 800552e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005536:	827b      	strh	r3, [r7, #18]
 8005538:	8a7b      	ldrh	r3, [r7, #18]
 800553a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800553e:	827b      	strh	r3, [r7, #18]
 8005540:	8a7b      	ldrh	r3, [r7, #18]
 8005542:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005546:	827b      	strh	r3, [r7, #18]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	8a7b      	ldrh	r3, [r7, #18]
 800554e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800555a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800555e:	b29b      	uxth	r3, r3
 8005560:	8013      	strh	r3, [r2, #0]
 8005562:	e17b      	b.n	800585c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	461a      	mov	r2, r3
 800556a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005576:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800557a:	2b00      	cmp	r3, #0
 800557c:	f280 80ea 	bge.w	8005754 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	b29a      	uxth	r2, r3
 8005592:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005596:	4013      	ands	r3, r2
 8005598:	853b      	strh	r3, [r7, #40]	; 0x28
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80055aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055ae:	b292      	uxth	r2, r2
 80055b0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80055b2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80055b6:	4613      	mov	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	4413      	add	r3, r2
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	7b1b      	ldrb	r3, [r3, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d122      	bne.n	8005616 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d8:	b29b      	uxth	r3, r3
 80055da:	461a      	mov	r2, r3
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	4413      	add	r3, r2
 80055e4:	3306      	adds	r3, #6
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6812      	ldr	r2, [r2, #0]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055f8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80055fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 8087 	beq.w	8005710 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	6959      	ldr	r1, [r3, #20]
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	88da      	ldrh	r2, [r3, #6]
 800560e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005610:	f004 fa42 	bl	8009a98 <USB_ReadPMA>
 8005614:	e07c      	b.n	8005710 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	78db      	ldrb	r3, [r3, #3]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d108      	bne.n	8005630 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800561e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005620:	461a      	mov	r2, r3
 8005622:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f927 	bl	8005878 <HAL_PCD_EP_DB_Receive>
 800562a:	4603      	mov	r3, r0
 800562c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800562e:	e06f      	b.n	8005710 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564a:	847b      	strh	r3, [r7, #34]	; 0x22
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	461a      	mov	r2, r3
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	441a      	add	r2, r3
 800565a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800565c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005668:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800566c:	b29b      	uxth	r3, r3
 800566e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d021      	beq.n	80056ce <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005692:	b29b      	uxth	r3, r3
 8005694:	461a      	mov	r2, r3
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	4413      	add	r3, r2
 800569e:	3302      	adds	r3, #2
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6812      	ldr	r2, [r2, #0]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056b2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80056b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d02a      	beq.n	8005710 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	6959      	ldr	r1, [r3, #20]
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	891a      	ldrh	r2, [r3, #8]
 80056c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056c8:	f004 f9e6 	bl	8009a98 <USB_ReadPMA>
 80056cc:	e020      	b.n	8005710 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	461a      	mov	r2, r3
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	4413      	add	r3, r2
 80056e2:	3306      	adds	r3, #6
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6812      	ldr	r2, [r2, #0]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056f6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80056f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d008      	beq.n	8005710 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6818      	ldr	r0, [r3, #0]
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	6959      	ldr	r1, [r3, #20]
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	895a      	ldrh	r2, [r3, #10]
 800570a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800570c:	f004 f9c4 	bl	8009a98 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	69da      	ldr	r2, [r3, #28]
 8005714:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005716:	441a      	add	r2, r3
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	695a      	ldr	r2, [r3, #20]
 8005720:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005722:	441a      	add	r2, r3
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d004      	beq.n	800573a <PCD_EP_ISR_Handler+0x4c2>
 8005730:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	429a      	cmp	r2, r3
 8005738:	d206      	bcs.n	8005748 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f009 f91b 	bl	800e97c <HAL_PCD_DataOutStageCallback>
 8005746:	e005      	b.n	8005754 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800574e:	4618      	mov	r0, r3
 8005750:	f002 fd28 	bl	80081a4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005754:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575a:	2b00      	cmp	r3, #0
 800575c:	d07e      	beq.n	800585c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800575e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	4613      	mov	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	4413      	add	r3, r2
 8005770:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	b29b      	uxth	r3, r3
 8005784:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578c:	843b      	strh	r3, [r7, #32]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	441a      	add	r2, r3
 800579c:	8c3b      	ldrh	r3, [r7, #32]
 800579e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	78db      	ldrb	r3, [r3, #3]
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d00c      	beq.n	80057cc <PCD_EP_ISR_Handler+0x554>
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	78db      	ldrb	r3, [r3, #3]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d008      	beq.n	80057cc <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d146      	bne.n	8005850 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80057c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80057c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d141      	bne.n	8005850 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	4413      	add	r3, r2
 80057e0:	3302      	adds	r3, #2
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6812      	ldr	r2, [r2, #0]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057f4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	8bfb      	ldrh	r3, [r7, #30]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d906      	bls.n	800580e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	699a      	ldr	r2, [r3, #24]
 8005804:	8bfb      	ldrh	r3, [r7, #30]
 8005806:	1ad2      	subs	r2, r2, r3
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	619a      	str	r2, [r3, #24]
 800580c:	e002      	b.n	8005814 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	2200      	movs	r2, #0
 8005812:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d106      	bne.n	800582a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	4619      	mov	r1, r3
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f009 f8c5 	bl	800e9b2 <HAL_PCD_DataInStageCallback>
 8005828:	e018      	b.n	800585c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	695a      	ldr	r2, [r3, #20]
 800582e:	8bfb      	ldrh	r3, [r7, #30]
 8005830:	441a      	add	r2, r3
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	69da      	ldr	r2, [r3, #28]
 800583a:	8bfb      	ldrh	r3, [r7, #30]
 800583c:	441a      	add	r2, r3
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005848:	4618      	mov	r0, r3
 800584a:	f002 fcab 	bl	80081a4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800584e:	e005      	b.n	800585c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005850:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005852:	461a      	mov	r2, r3
 8005854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f91b 	bl	8005a92 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005864:	b29b      	uxth	r3, r3
 8005866:	b21b      	sxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	f6ff ad0a 	blt.w	8005282 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3738      	adds	r7, #56	; 0x38
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	4613      	mov	r3, r2
 8005884:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d07e      	beq.n	800598e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005898:	b29b      	uxth	r3, r3
 800589a:	461a      	mov	r2, r3
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	4413      	add	r3, r2
 80058a4:	3302      	adds	r3, #2
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	6812      	ldr	r2, [r2, #0]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058b8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	8b7b      	ldrh	r3, [r7, #26]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d306      	bcc.n	80058d2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	699a      	ldr	r2, [r3, #24]
 80058c8:	8b7b      	ldrh	r3, [r7, #26]
 80058ca:	1ad2      	subs	r2, r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	619a      	str	r2, [r3, #24]
 80058d0:	e002      	b.n	80058d8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2200      	movs	r2, #0
 80058d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d123      	bne.n	8005928 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	461a      	mov	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fa:	833b      	strh	r3, [r7, #24]
 80058fc:	8b3b      	ldrh	r3, [r7, #24]
 80058fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005902:	833b      	strh	r3, [r7, #24]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	461a      	mov	r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	441a      	add	r2, r3
 8005912:	8b3b      	ldrh	r3, [r7, #24]
 8005914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800591c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005924:	b29b      	uxth	r3, r3
 8005926:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	d01f      	beq.n	8005972 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	b29b      	uxth	r3, r3
 8005944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594c:	82fb      	strh	r3, [r7, #22]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	441a      	add	r2, r3
 800595c:	8afb      	ldrh	r3, [r7, #22]
 800595e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800596a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800596e:	b29b      	uxth	r3, r3
 8005970:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005972:	8b7b      	ldrh	r3, [r7, #26]
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 8087 	beq.w	8005a88 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	6959      	ldr	r1, [r3, #20]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	891a      	ldrh	r2, [r3, #8]
 8005986:	8b7b      	ldrh	r3, [r7, #26]
 8005988:	f004 f886 	bl	8009a98 <USB_ReadPMA>
 800598c:	e07c      	b.n	8005a88 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005996:	b29b      	uxth	r3, r3
 8005998:	461a      	mov	r2, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	4413      	add	r3, r2
 80059a2:	3306      	adds	r3, #6
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	6812      	ldr	r2, [r2, #0]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059b6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	699a      	ldr	r2, [r3, #24]
 80059bc:	8b7b      	ldrh	r3, [r7, #26]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d306      	bcc.n	80059d0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	8b7b      	ldrh	r3, [r7, #26]
 80059c8:	1ad2      	subs	r2, r2, r3
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	619a      	str	r2, [r3, #24]
 80059ce:	e002      	b.n	80059d6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2200      	movs	r2, #0
 80059d4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d123      	bne.n	8005a26 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	461a      	mov	r2, r3
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f8:	83fb      	strh	r3, [r7, #30]
 80059fa:	8bfb      	ldrh	r3, [r7, #30]
 80059fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a00:	83fb      	strh	r3, [r7, #30]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	441a      	add	r2, r3
 8005a10:	8bfb      	ldrh	r3, [r7, #30]
 8005a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005a26:	88fb      	ldrh	r3, [r7, #6]
 8005a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d11f      	bne.n	8005a70 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4a:	83bb      	strh	r3, [r7, #28]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	461a      	mov	r2, r3
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	441a      	add	r2, r3
 8005a5a:	8bbb      	ldrh	r3, [r7, #28]
 8005a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005a70:	8b7b      	ldrh	r3, [r7, #26]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d008      	beq.n	8005a88 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6818      	ldr	r0, [r3, #0]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	6959      	ldr	r1, [r3, #20]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	895a      	ldrh	r2, [r3, #10]
 8005a82:	8b7b      	ldrh	r3, [r7, #26]
 8005a84:	f004 f808 	bl	8009a98 <USB_ReadPMA>
    }
  }

  return count;
 8005a88:	8b7b      	ldrh	r3, [r7, #26]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3720      	adds	r7, #32
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b0a2      	sub	sp, #136	; 0x88
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	60f8      	str	r0, [r7, #12]
 8005a9a:	60b9      	str	r1, [r7, #8]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 81c7 	beq.w	8005e3a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	4413      	add	r3, r2
 8005ac0:	3302      	adds	r3, #2
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ad4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	699a      	ldr	r2, [r3, #24]
 8005adc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d907      	bls.n	8005af4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	699a      	ldr	r2, [r3, #24]
 8005ae8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005aec:	1ad2      	subs	r2, r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	619a      	str	r2, [r3, #24]
 8005af2:	e002      	b.n	8005afa <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2200      	movs	r2, #0
 8005af8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f040 80b9 	bne.w	8005c76 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	785b      	ldrb	r3, [r3, #1]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d126      	bne.n	8005b5a <HAL_PCD_EP_DB_Transmit+0xc8>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	4413      	add	r3, r2
 8005b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	011a      	lsls	r2, r3, #4
 8005b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	801a      	strh	r2, [r3, #0]
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	801a      	strh	r2, [r3, #0]
 8005b58:	e01a      	b.n	8005b90 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	785b      	ldrb	r3, [r3, #1]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d116      	bne.n	8005b90 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	633b      	str	r3, [r7, #48]	; 0x30
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	4413      	add	r3, r2
 8005b78:	633b      	str	r3, [r7, #48]	; 0x30
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	011a      	lsls	r2, r3, #4
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	4413      	add	r3, r2
 8005b84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	623b      	str	r3, [r7, #32]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	785b      	ldrb	r3, [r3, #1]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d126      	bne.n	8005bec <HAL_PCD_EP_DB_Transmit+0x15a>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	61bb      	str	r3, [r7, #24]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	461a      	mov	r2, r3
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	61bb      	str	r3, [r7, #24]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	011a      	lsls	r2, r3, #4
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bc4:	617b      	str	r3, [r7, #20]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	801a      	strh	r2, [r3, #0]
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	801a      	strh	r2, [r3, #0]
 8005bea:	e017      	b.n	8005c1c <HAL_PCD_EP_DB_Transmit+0x18a>
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	785b      	ldrb	r3, [r3, #1]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d113      	bne.n	8005c1c <HAL_PCD_EP_DB_Transmit+0x18a>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	461a      	mov	r2, r3
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	4413      	add	r3, r2
 8005c04:	623b      	str	r3, [r7, #32]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	011a      	lsls	r2, r3, #4
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c14:	61fb      	str	r3, [r7, #28]
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	4619      	mov	r1, r3
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f008 fec5 	bl	800e9b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c28:	88fb      	ldrh	r3, [r7, #6]
 8005c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 82d4 	beq.w	80061dc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4e:	827b      	strh	r3, [r7, #18]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	461a      	mov	r2, r3
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	441a      	add	r2, r3
 8005c5e:	8a7b      	ldrh	r3, [r7, #18]
 8005c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	8013      	strh	r3, [r2, #0]
 8005c74:	e2b2      	b.n	80061dc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d021      	beq.n	8005cc4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	461a      	mov	r2, r3
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	441a      	add	r2, r3
 8005cac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	f040 8286 	bne.w	80061dc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	695a      	ldr	r2, [r3, #20]
 8005cd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005cd8:	441a      	add	r2, r3
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	69da      	ldr	r2, [r3, #28]
 8005ce2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ce6:	441a      	add	r2, r3
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	6a1a      	ldr	r2, [r3, #32]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d309      	bcc.n	8005d0c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	6a1a      	ldr	r2, [r3, #32]
 8005d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d04:	1ad2      	subs	r2, r2, r3
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	621a      	str	r2, [r3, #32]
 8005d0a:	e015      	b.n	8005d38 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d107      	bne.n	8005d24 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005d14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d18:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005d22:	e009      	b.n	8005d38 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2200      	movs	r2, #0
 8005d36:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d155      	bne.n	8005dec <HAL_PCD_EP_DB_Transmit+0x35a>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d54:	4413      	add	r3, r2
 8005d56:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	011a      	lsls	r2, r3, #4
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d60:	4413      	add	r3, r2
 8005d62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d66:	637b      	str	r3, [r7, #52]	; 0x34
 8005d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d112      	bne.n	8005d94 <HAL_PCD_EP_DB_Transmit+0x302>
 8005d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7c:	801a      	strh	r2, [r3, #0]
 8005d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d90:	801a      	strh	r2, [r3, #0]
 8005d92:	e047      	b.n	8005e24 <HAL_PCD_EP_DB_Transmit+0x392>
 8005d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d96:	2b3e      	cmp	r3, #62	; 0x3e
 8005d98:	d811      	bhi.n	8005dbe <HAL_PCD_EP_DB_Transmit+0x32c>
 8005d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d9c:	085b      	lsrs	r3, r3, #1
 8005d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dac:	3301      	adds	r3, #1
 8005dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8005db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	029b      	lsls	r3, r3, #10
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dba:	801a      	strh	r2, [r3, #0]
 8005dbc:	e032      	b.n	8005e24 <HAL_PCD_EP_DB_Transmit+0x392>
 8005dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc0:	095b      	lsrs	r3, r3, #5
 8005dc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc6:	f003 031f 	and.w	r3, r3, #31
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d102      	bne.n	8005dd4 <HAL_PCD_EP_DB_Transmit+0x342>
 8005dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	029b      	lsls	r3, r3, #10
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de8:	801a      	strh	r2, [r3, #0]
 8005dea:	e01b      	b.n	8005e24 <HAL_PCD_EP_DB_Transmit+0x392>
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	785b      	ldrb	r3, [r3, #1]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d117      	bne.n	8005e24 <HAL_PCD_EP_DB_Transmit+0x392>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	643b      	str	r3, [r7, #64]	; 0x40
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	461a      	mov	r2, r3
 8005e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e08:	4413      	add	r3, r2
 8005e0a:	643b      	str	r3, [r7, #64]	; 0x40
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	011a      	lsls	r2, r3, #4
 8005e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e14:	4413      	add	r3, r2
 8005e16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e22:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6818      	ldr	r0, [r3, #0]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	6959      	ldr	r1, [r3, #20]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	891a      	ldrh	r2, [r3, #8]
 8005e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	f003 fdeb 	bl	8009a0e <USB_WritePMA>
 8005e38:	e1d0      	b.n	80061dc <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	461a      	mov	r2, r3
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	4413      	add	r3, r2
 8005e4e:	3306      	adds	r3, #6
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	6812      	ldr	r2, [r2, #0]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e62:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d307      	bcc.n	8005e82 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	699a      	ldr	r2, [r3, #24]
 8005e76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005e7a:	1ad2      	subs	r2, r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	619a      	str	r2, [r3, #24]
 8005e80:	e002      	b.n	8005e88 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2200      	movs	r2, #0
 8005e86:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f040 80c4 	bne.w	800601a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	785b      	ldrb	r3, [r3, #1]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d126      	bne.n	8005ee8 <HAL_PCD_EP_DB_Transmit+0x456>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	461a      	mov	r2, r3
 8005eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eae:	4413      	add	r3, r2
 8005eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	011a      	lsls	r2, r3, #4
 8005eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eba:	4413      	add	r3, r2
 8005ebc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ec0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ed0:	801a      	strh	r2, [r3, #0]
 8005ed2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ee4:	801a      	strh	r2, [r3, #0]
 8005ee6:	e01a      	b.n	8005f1e <HAL_PCD_EP_DB_Transmit+0x48c>
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	785b      	ldrb	r3, [r3, #1]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d116      	bne.n	8005f1e <HAL_PCD_EP_DB_Transmit+0x48c>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	677b      	str	r3, [r7, #116]	; 0x74
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f04:	4413      	add	r3, r2
 8005f06:	677b      	str	r3, [r7, #116]	; 0x74
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	011a      	lsls	r2, r3, #4
 8005f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f10:	4413      	add	r3, r2
 8005f12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f16:	673b      	str	r3, [r7, #112]	; 0x70
 8005f18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	785b      	ldrb	r3, [r3, #1]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d12f      	bne.n	8005f8c <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f44:	4413      	add	r3, r2
 8005f46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	011a      	lsls	r2, r3, #4
 8005f50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f54:	4413      	add	r3, r2
 8005f56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f70:	801a      	strh	r2, [r3, #0]
 8005f72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f88:	801a      	strh	r2, [r3, #0]
 8005f8a:	e017      	b.n	8005fbc <HAL_PCD_EP_DB_Transmit+0x52a>
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	785b      	ldrb	r3, [r3, #1]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d113      	bne.n	8005fbc <HAL_PCD_EP_DB_Transmit+0x52a>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fa2:	4413      	add	r3, r2
 8005fa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	011a      	lsls	r2, r3, #4
 8005fac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fae:	4413      	add	r3, r2
 8005fb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005fb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fb8:	2200      	movs	r2, #0
 8005fba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f008 fcf5 	bl	800e9b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005fc8:	88fb      	ldrh	r3, [r7, #6]
 8005fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f040 8104 	bne.w	80061dc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	441a      	add	r2, r3
 8006000:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800600c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006014:	b29b      	uxth	r3, r3
 8006016:	8013      	strh	r3, [r2, #0]
 8006018:	e0e0      	b.n	80061dc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800601a:	88fb      	ldrh	r3, [r7, #6]
 800601c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d121      	bne.n	8006068 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	461a      	mov	r2, r3
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	b29b      	uxth	r3, r3
 8006036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	441a      	add	r2, r3
 8006050:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006064:	b29b      	uxth	r3, r3
 8006066:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800606e:	2b01      	cmp	r3, #1
 8006070:	f040 80b4 	bne.w	80061dc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	695a      	ldr	r2, [r3, #20]
 8006078:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800607c:	441a      	add	r2, r3
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	69da      	ldr	r2, [r3, #28]
 8006086:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800608a:	441a      	add	r2, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	6a1a      	ldr	r2, [r3, #32]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	429a      	cmp	r2, r3
 800609a:	d309      	bcc.n	80060b0 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	6a1a      	ldr	r2, [r3, #32]
 80060a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060a8:	1ad2      	subs	r2, r2, r3
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	621a      	str	r2, [r3, #32]
 80060ae:	e015      	b.n	80060dc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d107      	bne.n	80060c8 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80060b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80060bc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80060c6:	e009      	b.n	80060dc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2200      	movs	r2, #0
 80060d2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	667b      	str	r3, [r7, #100]	; 0x64
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	785b      	ldrb	r3, [r3, #1]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d155      	bne.n	8006196 <HAL_PCD_EP_DB_Transmit+0x704>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060fe:	4413      	add	r3, r2
 8006100:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	011a      	lsls	r2, r3, #4
 8006108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800610a:	4413      	add	r3, r2
 800610c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006110:	65bb      	str	r3, [r7, #88]	; 0x58
 8006112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006114:	2b00      	cmp	r3, #0
 8006116:	d112      	bne.n	800613e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	b29b      	uxth	r3, r3
 800611e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006122:	b29a      	uxth	r2, r3
 8006124:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006126:	801a      	strh	r2, [r3, #0]
 8006128:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b29b      	uxth	r3, r3
 800612e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006136:	b29a      	uxth	r2, r3
 8006138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800613a:	801a      	strh	r2, [r3, #0]
 800613c:	e044      	b.n	80061c8 <HAL_PCD_EP_DB_Transmit+0x736>
 800613e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006140:	2b3e      	cmp	r3, #62	; 0x3e
 8006142:	d811      	bhi.n	8006168 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006146:	085b      	lsrs	r3, r3, #1
 8006148:	657b      	str	r3, [r7, #84]	; 0x54
 800614a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006156:	3301      	adds	r3, #1
 8006158:	657b      	str	r3, [r7, #84]	; 0x54
 800615a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800615c:	b29b      	uxth	r3, r3
 800615e:	029b      	lsls	r3, r3, #10
 8006160:	b29a      	uxth	r2, r3
 8006162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006164:	801a      	strh	r2, [r3, #0]
 8006166:	e02f      	b.n	80061c8 <HAL_PCD_EP_DB_Transmit+0x736>
 8006168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	657b      	str	r3, [r7, #84]	; 0x54
 800616e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006170:	f003 031f 	and.w	r3, r3, #31
 8006174:	2b00      	cmp	r3, #0
 8006176:	d102      	bne.n	800617e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8006178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800617a:	3b01      	subs	r3, #1
 800617c:	657b      	str	r3, [r7, #84]	; 0x54
 800617e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006180:	b29b      	uxth	r3, r3
 8006182:	029b      	lsls	r3, r3, #10
 8006184:	b29b      	uxth	r3, r3
 8006186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800618e:	b29a      	uxth	r2, r3
 8006190:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006192:	801a      	strh	r2, [r3, #0]
 8006194:	e018      	b.n	80061c8 <HAL_PCD_EP_DB_Transmit+0x736>
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d114      	bne.n	80061c8 <HAL_PCD_EP_DB_Transmit+0x736>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	461a      	mov	r2, r3
 80061aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061ac:	4413      	add	r3, r2
 80061ae:	667b      	str	r3, [r7, #100]	; 0x64
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	011a      	lsls	r2, r3, #4
 80061b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061b8:	4413      	add	r3, r2
 80061ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061be:	663b      	str	r3, [r7, #96]	; 0x60
 80061c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061c6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6818      	ldr	r0, [r3, #0]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	6959      	ldr	r1, [r3, #20]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	895a      	ldrh	r2, [r3, #10]
 80061d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f003 fc19 	bl	8009a0e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f6:	823b      	strh	r3, [r7, #16]
 80061f8:	8a3b      	ldrh	r3, [r7, #16]
 80061fa:	f083 0310 	eor.w	r3, r3, #16
 80061fe:	823b      	strh	r3, [r7, #16]
 8006200:	8a3b      	ldrh	r3, [r7, #16]
 8006202:	f083 0320 	eor.w	r3, r3, #32
 8006206:	823b      	strh	r3, [r7, #16]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	441a      	add	r2, r3
 8006216:	8a3b      	ldrh	r3, [r7, #16]
 8006218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800621c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006228:	b29b      	uxth	r3, r3
 800622a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3788      	adds	r7, #136	; 0x88
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006236:	b480      	push	{r7}
 8006238:	b087      	sub	sp, #28
 800623a:	af00      	add	r7, sp, #0
 800623c:	60f8      	str	r0, [r7, #12]
 800623e:	607b      	str	r3, [r7, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	817b      	strh	r3, [r7, #10]
 8006244:	4613      	mov	r3, r2
 8006246:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006248:	897b      	ldrh	r3, [r7, #10]
 800624a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624e:	b29b      	uxth	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00b      	beq.n	800626c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006254:	897b      	ldrh	r3, [r7, #10]
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	4613      	mov	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4413      	add	r3, r2
 8006268:	617b      	str	r3, [r7, #20]
 800626a:	e009      	b.n	8006280 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800626c:	897a      	ldrh	r2, [r7, #10]
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	00db      	lsls	r3, r3, #3
 8006276:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	4413      	add	r3, r2
 800627e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006280:	893b      	ldrh	r3, [r7, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d107      	bne.n	8006296 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2200      	movs	r2, #0
 800628a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	b29a      	uxth	r2, r3
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	80da      	strh	r2, [r3, #6]
 8006294:	e00b      	b.n	80062ae <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2201      	movs	r2, #1
 800629a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	b29a      	uxth	r2, r3
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	0c1b      	lsrs	r3, r3, #16
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	371c      	adds	r7, #28
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bc80      	pop	{r7}
 80062b8:	4770      	bx	lr
	...

080062bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e26c      	b.n	80067a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 8087 	beq.w	80063ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80062dc:	4b92      	ldr	r3, [pc, #584]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f003 030c 	and.w	r3, r3, #12
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d00c      	beq.n	8006302 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80062e8:	4b8f      	ldr	r3, [pc, #572]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f003 030c 	and.w	r3, r3, #12
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d112      	bne.n	800631a <HAL_RCC_OscConfig+0x5e>
 80062f4:	4b8c      	ldr	r3, [pc, #560]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006300:	d10b      	bne.n	800631a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006302:	4b89      	ldr	r3, [pc, #548]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d06c      	beq.n	80063e8 <HAL_RCC_OscConfig+0x12c>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d168      	bne.n	80063e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e246      	b.n	80067a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006322:	d106      	bne.n	8006332 <HAL_RCC_OscConfig+0x76>
 8006324:	4b80      	ldr	r3, [pc, #512]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a7f      	ldr	r2, [pc, #508]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 800632a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	e02e      	b.n	8006390 <HAL_RCC_OscConfig+0xd4>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10c      	bne.n	8006354 <HAL_RCC_OscConfig+0x98>
 800633a:	4b7b      	ldr	r3, [pc, #492]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a7a      	ldr	r2, [pc, #488]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 8006340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	4b78      	ldr	r3, [pc, #480]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a77      	ldr	r2, [pc, #476]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 800634c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006350:	6013      	str	r3, [r2, #0]
 8006352:	e01d      	b.n	8006390 <HAL_RCC_OscConfig+0xd4>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800635c:	d10c      	bne.n	8006378 <HAL_RCC_OscConfig+0xbc>
 800635e:	4b72      	ldr	r3, [pc, #456]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a71      	ldr	r2, [pc, #452]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 8006364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	4b6f      	ldr	r3, [pc, #444]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a6e      	ldr	r2, [pc, #440]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 8006370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	e00b      	b.n	8006390 <HAL_RCC_OscConfig+0xd4>
 8006378:	4b6b      	ldr	r3, [pc, #428]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a6a      	ldr	r2, [pc, #424]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 800637e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	4b68      	ldr	r3, [pc, #416]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a67      	ldr	r2, [pc, #412]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 800638a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800638e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d013      	beq.n	80063c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006398:	f7fc fff2 	bl	8003380 <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800639e:	e008      	b.n	80063b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063a0:	f7fc ffee 	bl	8003380 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b64      	cmp	r3, #100	; 0x64
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e1fa      	b.n	80067a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063b2:	4b5d      	ldr	r3, [pc, #372]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0f0      	beq.n	80063a0 <HAL_RCC_OscConfig+0xe4>
 80063be:	e014      	b.n	80063ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c0:	f7fc ffde 	bl	8003380 <HAL_GetTick>
 80063c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063c6:	e008      	b.n	80063da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063c8:	f7fc ffda 	bl	8003380 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b64      	cmp	r3, #100	; 0x64
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e1e6      	b.n	80067a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063da:	4b53      	ldr	r3, [pc, #332]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1f0      	bne.n	80063c8 <HAL_RCC_OscConfig+0x10c>
 80063e6:	e000      	b.n	80063ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d063      	beq.n	80064be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063f6:	4b4c      	ldr	r3, [pc, #304]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f003 030c 	and.w	r3, r3, #12
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00b      	beq.n	800641a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006402:	4b49      	ldr	r3, [pc, #292]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f003 030c 	and.w	r3, r3, #12
 800640a:	2b08      	cmp	r3, #8
 800640c:	d11c      	bne.n	8006448 <HAL_RCC_OscConfig+0x18c>
 800640e:	4b46      	ldr	r3, [pc, #280]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d116      	bne.n	8006448 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800641a:	4b43      	ldr	r3, [pc, #268]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <HAL_RCC_OscConfig+0x176>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d001      	beq.n	8006432 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e1ba      	b.n	80067a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006432:	4b3d      	ldr	r3, [pc, #244]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	4939      	ldr	r1, [pc, #228]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 8006442:	4313      	orrs	r3, r2
 8006444:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006446:	e03a      	b.n	80064be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d020      	beq.n	8006492 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006450:	4b36      	ldr	r3, [pc, #216]	; (800652c <HAL_RCC_OscConfig+0x270>)
 8006452:	2201      	movs	r2, #1
 8006454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006456:	f7fc ff93 	bl	8003380 <HAL_GetTick>
 800645a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800645c:	e008      	b.n	8006470 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800645e:	f7fc ff8f 	bl	8003380 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b02      	cmp	r3, #2
 800646a:	d901      	bls.n	8006470 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e19b      	b.n	80067a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006470:	4b2d      	ldr	r3, [pc, #180]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0f0      	beq.n	800645e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800647c:	4b2a      	ldr	r3, [pc, #168]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	4927      	ldr	r1, [pc, #156]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 800648c:	4313      	orrs	r3, r2
 800648e:	600b      	str	r3, [r1, #0]
 8006490:	e015      	b.n	80064be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006492:	4b26      	ldr	r3, [pc, #152]	; (800652c <HAL_RCC_OscConfig+0x270>)
 8006494:	2200      	movs	r2, #0
 8006496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006498:	f7fc ff72 	bl	8003380 <HAL_GetTick>
 800649c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064a0:	f7fc ff6e 	bl	8003380 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e17a      	b.n	80067a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064b2:	4b1d      	ldr	r3, [pc, #116]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1f0      	bne.n	80064a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d03a      	beq.n	8006540 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d019      	beq.n	8006506 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064d2:	4b17      	ldr	r3, [pc, #92]	; (8006530 <HAL_RCC_OscConfig+0x274>)
 80064d4:	2201      	movs	r2, #1
 80064d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064d8:	f7fc ff52 	bl	8003380 <HAL_GetTick>
 80064dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064de:	e008      	b.n	80064f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064e0:	f7fc ff4e 	bl	8003380 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e15a      	b.n	80067a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064f2:	4b0d      	ldr	r3, [pc, #52]	; (8006528 <HAL_RCC_OscConfig+0x26c>)
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0f0      	beq.n	80064e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80064fe:	2001      	movs	r0, #1
 8006500:	f000 fb0a 	bl	8006b18 <RCC_Delay>
 8006504:	e01c      	b.n	8006540 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006506:	4b0a      	ldr	r3, [pc, #40]	; (8006530 <HAL_RCC_OscConfig+0x274>)
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800650c:	f7fc ff38 	bl	8003380 <HAL_GetTick>
 8006510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006512:	e00f      	b.n	8006534 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006514:	f7fc ff34 	bl	8003380 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d908      	bls.n	8006534 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e140      	b.n	80067a8 <HAL_RCC_OscConfig+0x4ec>
 8006526:	bf00      	nop
 8006528:	40021000 	.word	0x40021000
 800652c:	42420000 	.word	0x42420000
 8006530:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006534:	4b9e      	ldr	r3, [pc, #632]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 8006536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1e9      	bne.n	8006514 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 80a6 	beq.w	800669a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800654e:	2300      	movs	r3, #0
 8006550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006552:	4b97      	ldr	r3, [pc, #604]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10d      	bne.n	800657a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800655e:	4b94      	ldr	r3, [pc, #592]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	4a93      	ldr	r2, [pc, #588]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 8006564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006568:	61d3      	str	r3, [r2, #28]
 800656a:	4b91      	ldr	r3, [pc, #580]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006572:	60bb      	str	r3, [r7, #8]
 8006574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006576:	2301      	movs	r3, #1
 8006578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800657a:	4b8e      	ldr	r3, [pc, #568]	; (80067b4 <HAL_RCC_OscConfig+0x4f8>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006582:	2b00      	cmp	r3, #0
 8006584:	d118      	bne.n	80065b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006586:	4b8b      	ldr	r3, [pc, #556]	; (80067b4 <HAL_RCC_OscConfig+0x4f8>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a8a      	ldr	r2, [pc, #552]	; (80067b4 <HAL_RCC_OscConfig+0x4f8>)
 800658c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006592:	f7fc fef5 	bl	8003380 <HAL_GetTick>
 8006596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006598:	e008      	b.n	80065ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800659a:	f7fc fef1 	bl	8003380 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b64      	cmp	r3, #100	; 0x64
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e0fd      	b.n	80067a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ac:	4b81      	ldr	r3, [pc, #516]	; (80067b4 <HAL_RCC_OscConfig+0x4f8>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0f0      	beq.n	800659a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d106      	bne.n	80065ce <HAL_RCC_OscConfig+0x312>
 80065c0:	4b7b      	ldr	r3, [pc, #492]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	4a7a      	ldr	r2, [pc, #488]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 80065c6:	f043 0301 	orr.w	r3, r3, #1
 80065ca:	6213      	str	r3, [r2, #32]
 80065cc:	e02d      	b.n	800662a <HAL_RCC_OscConfig+0x36e>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10c      	bne.n	80065f0 <HAL_RCC_OscConfig+0x334>
 80065d6:	4b76      	ldr	r3, [pc, #472]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	4a75      	ldr	r2, [pc, #468]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 80065dc:	f023 0301 	bic.w	r3, r3, #1
 80065e0:	6213      	str	r3, [r2, #32]
 80065e2:	4b73      	ldr	r3, [pc, #460]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	4a72      	ldr	r2, [pc, #456]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 80065e8:	f023 0304 	bic.w	r3, r3, #4
 80065ec:	6213      	str	r3, [r2, #32]
 80065ee:	e01c      	b.n	800662a <HAL_RCC_OscConfig+0x36e>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	2b05      	cmp	r3, #5
 80065f6:	d10c      	bne.n	8006612 <HAL_RCC_OscConfig+0x356>
 80065f8:	4b6d      	ldr	r3, [pc, #436]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	4a6c      	ldr	r2, [pc, #432]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 80065fe:	f043 0304 	orr.w	r3, r3, #4
 8006602:	6213      	str	r3, [r2, #32]
 8006604:	4b6a      	ldr	r3, [pc, #424]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	4a69      	ldr	r2, [pc, #420]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 800660a:	f043 0301 	orr.w	r3, r3, #1
 800660e:	6213      	str	r3, [r2, #32]
 8006610:	e00b      	b.n	800662a <HAL_RCC_OscConfig+0x36e>
 8006612:	4b67      	ldr	r3, [pc, #412]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	4a66      	ldr	r2, [pc, #408]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 8006618:	f023 0301 	bic.w	r3, r3, #1
 800661c:	6213      	str	r3, [r2, #32]
 800661e:	4b64      	ldr	r3, [pc, #400]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	4a63      	ldr	r2, [pc, #396]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 8006624:	f023 0304 	bic.w	r3, r3, #4
 8006628:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d015      	beq.n	800665e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006632:	f7fc fea5 	bl	8003380 <HAL_GetTick>
 8006636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006638:	e00a      	b.n	8006650 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800663a:	f7fc fea1 	bl	8003380 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	f241 3288 	movw	r2, #5000	; 0x1388
 8006648:	4293      	cmp	r3, r2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e0ab      	b.n	80067a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006650:	4b57      	ldr	r3, [pc, #348]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0ee      	beq.n	800663a <HAL_RCC_OscConfig+0x37e>
 800665c:	e014      	b.n	8006688 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800665e:	f7fc fe8f 	bl	8003380 <HAL_GetTick>
 8006662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006664:	e00a      	b.n	800667c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006666:	f7fc fe8b 	bl	8003380 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	f241 3288 	movw	r2, #5000	; 0x1388
 8006674:	4293      	cmp	r3, r2
 8006676:	d901      	bls.n	800667c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e095      	b.n	80067a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800667c:	4b4c      	ldr	r3, [pc, #304]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1ee      	bne.n	8006666 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006688:	7dfb      	ldrb	r3, [r7, #23]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d105      	bne.n	800669a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800668e:	4b48      	ldr	r3, [pc, #288]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	4a47      	ldr	r2, [pc, #284]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 8006694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006698:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 8081 	beq.w	80067a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066a4:	4b42      	ldr	r3, [pc, #264]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f003 030c 	and.w	r3, r3, #12
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d061      	beq.n	8006774 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d146      	bne.n	8006746 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066b8:	4b3f      	ldr	r3, [pc, #252]	; (80067b8 <HAL_RCC_OscConfig+0x4fc>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066be:	f7fc fe5f 	bl	8003380 <HAL_GetTick>
 80066c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066c6:	f7fc fe5b 	bl	8003380 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e067      	b.n	80067a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066d8:	4b35      	ldr	r3, [pc, #212]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1f0      	bne.n	80066c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ec:	d108      	bne.n	8006700 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80066ee:	4b30      	ldr	r3, [pc, #192]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	492d      	ldr	r1, [pc, #180]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006700:	4b2b      	ldr	r3, [pc, #172]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a19      	ldr	r1, [r3, #32]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	430b      	orrs	r3, r1
 8006712:	4927      	ldr	r1, [pc, #156]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 8006714:	4313      	orrs	r3, r2
 8006716:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006718:	4b27      	ldr	r3, [pc, #156]	; (80067b8 <HAL_RCC_OscConfig+0x4fc>)
 800671a:	2201      	movs	r2, #1
 800671c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800671e:	f7fc fe2f 	bl	8003380 <HAL_GetTick>
 8006722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006724:	e008      	b.n	8006738 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006726:	f7fc fe2b 	bl	8003380 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	2b02      	cmp	r3, #2
 8006732:	d901      	bls.n	8006738 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e037      	b.n	80067a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006738:	4b1d      	ldr	r3, [pc, #116]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d0f0      	beq.n	8006726 <HAL_RCC_OscConfig+0x46a>
 8006744:	e02f      	b.n	80067a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006746:	4b1c      	ldr	r3, [pc, #112]	; (80067b8 <HAL_RCC_OscConfig+0x4fc>)
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800674c:	f7fc fe18 	bl	8003380 <HAL_GetTick>
 8006750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006752:	e008      	b.n	8006766 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006754:	f7fc fe14 	bl	8003380 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b02      	cmp	r3, #2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e020      	b.n	80067a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006766:	4b12      	ldr	r3, [pc, #72]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1f0      	bne.n	8006754 <HAL_RCC_OscConfig+0x498>
 8006772:	e018      	b.n	80067a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	69db      	ldr	r3, [r3, #28]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e013      	b.n	80067a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006780:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <HAL_RCC_OscConfig+0x4f4>)
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	429a      	cmp	r2, r3
 8006792:	d106      	bne.n	80067a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800679e:	429a      	cmp	r2, r3
 80067a0:	d001      	beq.n	80067a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e000      	b.n	80067a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	40021000 	.word	0x40021000
 80067b4:	40007000 	.word	0x40007000
 80067b8:	42420060 	.word	0x42420060

080067bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e0d0      	b.n	8006972 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067d0:	4b6a      	ldr	r3, [pc, #424]	; (800697c <HAL_RCC_ClockConfig+0x1c0>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0307 	and.w	r3, r3, #7
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d910      	bls.n	8006800 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067de:	4b67      	ldr	r3, [pc, #412]	; (800697c <HAL_RCC_ClockConfig+0x1c0>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f023 0207 	bic.w	r2, r3, #7
 80067e6:	4965      	ldr	r1, [pc, #404]	; (800697c <HAL_RCC_ClockConfig+0x1c0>)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ee:	4b63      	ldr	r3, [pc, #396]	; (800697c <HAL_RCC_ClockConfig+0x1c0>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d001      	beq.n	8006800 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e0b8      	b.n	8006972 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d020      	beq.n	800684e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d005      	beq.n	8006824 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006818:	4b59      	ldr	r3, [pc, #356]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	4a58      	ldr	r2, [pc, #352]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 800681e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006822:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0308 	and.w	r3, r3, #8
 800682c:	2b00      	cmp	r3, #0
 800682e:	d005      	beq.n	800683c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006830:	4b53      	ldr	r3, [pc, #332]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	4a52      	ldr	r2, [pc, #328]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 8006836:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800683a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800683c:	4b50      	ldr	r3, [pc, #320]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	494d      	ldr	r1, [pc, #308]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 800684a:	4313      	orrs	r3, r2
 800684c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d040      	beq.n	80068dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d107      	bne.n	8006872 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006862:	4b47      	ldr	r3, [pc, #284]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d115      	bne.n	800689a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e07f      	b.n	8006972 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	2b02      	cmp	r3, #2
 8006878:	d107      	bne.n	800688a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800687a:	4b41      	ldr	r3, [pc, #260]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d109      	bne.n	800689a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e073      	b.n	8006972 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800688a:	4b3d      	ldr	r3, [pc, #244]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e06b      	b.n	8006972 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800689a:	4b39      	ldr	r3, [pc, #228]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f023 0203 	bic.w	r2, r3, #3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	4936      	ldr	r1, [pc, #216]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068ac:	f7fc fd68 	bl	8003380 <HAL_GetTick>
 80068b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068b2:	e00a      	b.n	80068ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068b4:	f7fc fd64 	bl	8003380 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e053      	b.n	8006972 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068ca:	4b2d      	ldr	r3, [pc, #180]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f003 020c 	and.w	r2, r3, #12
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	429a      	cmp	r2, r3
 80068da:	d1eb      	bne.n	80068b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068dc:	4b27      	ldr	r3, [pc, #156]	; (800697c <HAL_RCC_ClockConfig+0x1c0>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d210      	bcs.n	800690c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ea:	4b24      	ldr	r3, [pc, #144]	; (800697c <HAL_RCC_ClockConfig+0x1c0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f023 0207 	bic.w	r2, r3, #7
 80068f2:	4922      	ldr	r1, [pc, #136]	; (800697c <HAL_RCC_ClockConfig+0x1c0>)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068fa:	4b20      	ldr	r3, [pc, #128]	; (800697c <HAL_RCC_ClockConfig+0x1c0>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0307 	and.w	r3, r3, #7
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	429a      	cmp	r2, r3
 8006906:	d001      	beq.n	800690c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e032      	b.n	8006972 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0304 	and.w	r3, r3, #4
 8006914:	2b00      	cmp	r3, #0
 8006916:	d008      	beq.n	800692a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006918:	4b19      	ldr	r3, [pc, #100]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	4916      	ldr	r1, [pc, #88]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 8006926:	4313      	orrs	r3, r2
 8006928:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	2b00      	cmp	r3, #0
 8006934:	d009      	beq.n	800694a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006936:	4b12      	ldr	r3, [pc, #72]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	490e      	ldr	r1, [pc, #56]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 8006946:	4313      	orrs	r3, r2
 8006948:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800694a:	f000 f821 	bl	8006990 <HAL_RCC_GetSysClockFreq>
 800694e:	4602      	mov	r2, r0
 8006950:	4b0b      	ldr	r3, [pc, #44]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	091b      	lsrs	r3, r3, #4
 8006956:	f003 030f 	and.w	r3, r3, #15
 800695a:	490a      	ldr	r1, [pc, #40]	; (8006984 <HAL_RCC_ClockConfig+0x1c8>)
 800695c:	5ccb      	ldrb	r3, [r1, r3]
 800695e:	fa22 f303 	lsr.w	r3, r2, r3
 8006962:	4a09      	ldr	r2, [pc, #36]	; (8006988 <HAL_RCC_ClockConfig+0x1cc>)
 8006964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006966:	4b09      	ldr	r3, [pc, #36]	; (800698c <HAL_RCC_ClockConfig+0x1d0>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4618      	mov	r0, r3
 800696c:	f7fc fae2 	bl	8002f34 <HAL_InitTick>

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	40022000 	.word	0x40022000
 8006980:	40021000 	.word	0x40021000
 8006984:	0800f658 	.word	0x0800f658
 8006988:	20000010 	.word	0x20000010
 800698c:	20000014 	.word	0x20000014

08006990 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006990:	b490      	push	{r4, r7}
 8006992:	b08a      	sub	sp, #40	; 0x28
 8006994:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006996:	4b2a      	ldr	r3, [pc, #168]	; (8006a40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006998:	1d3c      	adds	r4, r7, #4
 800699a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800699c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80069a0:	f240 2301 	movw	r3, #513	; 0x201
 80069a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	61fb      	str	r3, [r7, #28]
 80069aa:	2300      	movs	r3, #0
 80069ac:	61bb      	str	r3, [r7, #24]
 80069ae:	2300      	movs	r3, #0
 80069b0:	627b      	str	r3, [r7, #36]	; 0x24
 80069b2:	2300      	movs	r3, #0
 80069b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80069ba:	4b22      	ldr	r3, [pc, #136]	; (8006a44 <HAL_RCC_GetSysClockFreq+0xb4>)
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	f003 030c 	and.w	r3, r3, #12
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d002      	beq.n	80069d0 <HAL_RCC_GetSysClockFreq+0x40>
 80069ca:	2b08      	cmp	r3, #8
 80069cc:	d003      	beq.n	80069d6 <HAL_RCC_GetSysClockFreq+0x46>
 80069ce:	e02d      	b.n	8006a2c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80069d0:	4b1d      	ldr	r3, [pc, #116]	; (8006a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069d2:	623b      	str	r3, [r7, #32]
      break;
 80069d4:	e02d      	b.n	8006a32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	0c9b      	lsrs	r3, r3, #18
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80069e2:	4413      	add	r3, r2
 80069e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80069e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d013      	beq.n	8006a1c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80069f4:	4b13      	ldr	r3, [pc, #76]	; (8006a44 <HAL_RCC_GetSysClockFreq+0xb4>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	0c5b      	lsrs	r3, r3, #17
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006a02:	4413      	add	r3, r2
 8006a04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006a08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	4a0e      	ldr	r2, [pc, #56]	; (8006a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a0e:	fb02 f203 	mul.w	r2, r2, r3
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a18:	627b      	str	r3, [r7, #36]	; 0x24
 8006a1a:	e004      	b.n	8006a26 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	4a0b      	ldr	r2, [pc, #44]	; (8006a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a20:	fb02 f303 	mul.w	r3, r2, r3
 8006a24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	623b      	str	r3, [r7, #32]
      break;
 8006a2a:	e002      	b.n	8006a32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006a2c:	4b08      	ldr	r3, [pc, #32]	; (8006a50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a2e:	623b      	str	r3, [r7, #32]
      break;
 8006a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a32:	6a3b      	ldr	r3, [r7, #32]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3728      	adds	r7, #40	; 0x28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bc90      	pop	{r4, r7}
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	0800f14c 	.word	0x0800f14c
 8006a44:	40021000 	.word	0x40021000
 8006a48:	00f42400 	.word	0x00f42400
 8006a4c:	003d0900 	.word	0x003d0900
 8006a50:	007a1200 	.word	0x007a1200

08006a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a58:	4b02      	ldr	r3, [pc, #8]	; (8006a64 <HAL_RCC_GetHCLKFreq+0x10>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bc80      	pop	{r7}
 8006a62:	4770      	bx	lr
 8006a64:	20000010 	.word	0x20000010

08006a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a6c:	f7ff fff2 	bl	8006a54 <HAL_RCC_GetHCLKFreq>
 8006a70:	4602      	mov	r2, r0
 8006a72:	4b05      	ldr	r3, [pc, #20]	; (8006a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	0a1b      	lsrs	r3, r3, #8
 8006a78:	f003 0307 	and.w	r3, r3, #7
 8006a7c:	4903      	ldr	r1, [pc, #12]	; (8006a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a7e:	5ccb      	ldrb	r3, [r1, r3]
 8006a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	40021000 	.word	0x40021000
 8006a8c:	0800f668 	.word	0x0800f668

08006a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a94:	f7ff ffde 	bl	8006a54 <HAL_RCC_GetHCLKFreq>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	4b05      	ldr	r3, [pc, #20]	; (8006ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	0adb      	lsrs	r3, r3, #11
 8006aa0:	f003 0307 	and.w	r3, r3, #7
 8006aa4:	4903      	ldr	r1, [pc, #12]	; (8006ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006aa6:	5ccb      	ldrb	r3, [r1, r3]
 8006aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	40021000 	.word	0x40021000
 8006ab4:	0800f668 	.word	0x0800f668

08006ab8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	220f      	movs	r2, #15
 8006ac6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ac8:	4b11      	ldr	r3, [pc, #68]	; (8006b10 <HAL_RCC_GetClockConfig+0x58>)
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f003 0203 	and.w	r2, r3, #3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ad4:	4b0e      	ldr	r3, [pc, #56]	; (8006b10 <HAL_RCC_GetClockConfig+0x58>)
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ae0:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <HAL_RCC_GetClockConfig+0x58>)
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006aec:	4b08      	ldr	r3, [pc, #32]	; (8006b10 <HAL_RCC_GetClockConfig+0x58>)
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	08db      	lsrs	r3, r3, #3
 8006af2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006afa:	4b06      	ldr	r3, [pc, #24]	; (8006b14 <HAL_RCC_GetClockConfig+0x5c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0207 	and.w	r2, r3, #7
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006b06:	bf00      	nop
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr
 8006b10:	40021000 	.word	0x40021000
 8006b14:	40022000 	.word	0x40022000

08006b18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b20:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <RCC_Delay+0x34>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a0a      	ldr	r2, [pc, #40]	; (8006b50 <RCC_Delay+0x38>)
 8006b26:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2a:	0a5b      	lsrs	r3, r3, #9
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	fb02 f303 	mul.w	r3, r2, r3
 8006b32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b34:	bf00      	nop
  }
  while (Delay --);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	1e5a      	subs	r2, r3, #1
 8006b3a:	60fa      	str	r2, [r7, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1f9      	bne.n	8006b34 <RCC_Delay+0x1c>
}
 8006b40:	bf00      	nop
 8006b42:	bf00      	nop
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr
 8006b4c:	20000010 	.word	0x20000010
 8006b50:	10624dd3 	.word	0x10624dd3

08006b54 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	613b      	str	r3, [r7, #16]
 8006b60:	2300      	movs	r3, #0
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d07d      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006b70:	2300      	movs	r3, #0
 8006b72:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b74:	4b4f      	ldr	r3, [pc, #316]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10d      	bne.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b80:	4b4c      	ldr	r3, [pc, #304]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	4a4b      	ldr	r2, [pc, #300]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b8a:	61d3      	str	r3, [r2, #28]
 8006b8c:	4b49      	ldr	r3, [pc, #292]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b94:	60bb      	str	r3, [r7, #8]
 8006b96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b9c:	4b46      	ldr	r3, [pc, #280]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d118      	bne.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ba8:	4b43      	ldr	r3, [pc, #268]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a42      	ldr	r2, [pc, #264]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bb4:	f7fc fbe4 	bl	8003380 <HAL_GetTick>
 8006bb8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bba:	e008      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bbc:	f7fc fbe0 	bl	8003380 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b64      	cmp	r3, #100	; 0x64
 8006bc8:	d901      	bls.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e06d      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bce:	4b3a      	ldr	r3, [pc, #232]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0f0      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bda:	4b36      	ldr	r3, [pc, #216]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006be2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d02e      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d027      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bf8:	4b2e      	ldr	r3, [pc, #184]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c02:	4b2e      	ldr	r3, [pc, #184]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c04:	2201      	movs	r2, #1
 8006c06:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c08:	4b2c      	ldr	r3, [pc, #176]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c0e:	4a29      	ldr	r2, [pc, #164]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d014      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c1e:	f7fc fbaf 	bl	8003380 <HAL_GetTick>
 8006c22:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c24:	e00a      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c26:	f7fc fbab 	bl	8003380 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d901      	bls.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e036      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c3c:	4b1d      	ldr	r3, [pc, #116]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0ee      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c48:	4b1a      	ldr	r3, [pc, #104]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	4917      	ldr	r1, [pc, #92]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d105      	bne.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c60:	4b14      	ldr	r3, [pc, #80]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	4a13      	ldr	r2, [pc, #76]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d008      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c78:	4b0e      	ldr	r3, [pc, #56]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	490b      	ldr	r1, [pc, #44]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0310 	and.w	r3, r3, #16
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d008      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c96:	4b07      	ldr	r3, [pc, #28]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	4904      	ldr	r1, [pc, #16]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	40021000 	.word	0x40021000
 8006cb8:	40007000 	.word	0x40007000
 8006cbc:	42420440 	.word	0x42420440

08006cc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e076      	b.n	8006dc0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d108      	bne.n	8006cec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ce2:	d009      	beq.n	8006cf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	61da      	str	r2, [r3, #28]
 8006cea:	e005      	b.n	8006cf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d106      	bne.n	8006d18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fc f88a 	bl	8002e2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d40:	431a      	orrs	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	431a      	orrs	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d72:	431a      	orrs	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7c:	ea42 0103 	orr.w	r1, r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d84:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	0c1a      	lsrs	r2, r3, #16
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f002 0204 	and.w	r2, r2, #4
 8006d9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	69da      	ldr	r2, [r3, #28]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	603b      	str	r3, [r7, #0]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d101      	bne.n	8006dea <HAL_SPI_Transmit+0x22>
 8006de6:	2302      	movs	r3, #2
 8006de8:	e126      	b.n	8007038 <HAL_SPI_Transmit+0x270>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006df2:	f7fc fac5 	bl	8003380 <HAL_GetTick>
 8006df6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006df8:	88fb      	ldrh	r3, [r7, #6]
 8006dfa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d002      	beq.n	8006e0e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e08:	2302      	movs	r3, #2
 8006e0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e0c:	e10b      	b.n	8007026 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <HAL_SPI_Transmit+0x52>
 8006e14:	88fb      	ldrh	r3, [r7, #6]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d102      	bne.n	8006e20 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e1e:	e102      	b.n	8007026 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2203      	movs	r2, #3
 8006e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	88fa      	ldrh	r2, [r7, #6]
 8006e38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	88fa      	ldrh	r2, [r7, #6]
 8006e3e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e66:	d10f      	bne.n	8006e88 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e92:	2b40      	cmp	r3, #64	; 0x40
 8006e94:	d007      	beq.n	8006ea6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ea4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eae:	d14b      	bne.n	8006f48 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <HAL_SPI_Transmit+0xf6>
 8006eb8:	8afb      	ldrh	r3, [r7, #22]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d13e      	bne.n	8006f3c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec2:	881a      	ldrh	r2, [r3, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	1c9a      	adds	r2, r3, #2
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	3b01      	subs	r3, #1
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ee2:	e02b      	b.n	8006f3c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d112      	bne.n	8006f18 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	881a      	ldrh	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	1c9a      	adds	r2, r3, #2
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f16:	e011      	b.n	8006f3c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f18:	f7fc fa32 	bl	8003380 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d803      	bhi.n	8006f30 <HAL_SPI_Transmit+0x168>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2e:	d102      	bne.n	8006f36 <HAL_SPI_Transmit+0x16e>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d102      	bne.n	8006f3c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f3a:	e074      	b.n	8007026 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1ce      	bne.n	8006ee4 <HAL_SPI_Transmit+0x11c>
 8006f46:	e04c      	b.n	8006fe2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <HAL_SPI_Transmit+0x18e>
 8006f50:	8afb      	ldrh	r3, [r7, #22]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d140      	bne.n	8006fd8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	330c      	adds	r3, #12
 8006f60:	7812      	ldrb	r2, [r2, #0]
 8006f62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	3b01      	subs	r3, #1
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f7c:	e02c      	b.n	8006fd8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d113      	bne.n	8006fb4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	330c      	adds	r3, #12
 8006f96:	7812      	ldrb	r2, [r2, #0]
 8006f98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	86da      	strh	r2, [r3, #54]	; 0x36
 8006fb2:	e011      	b.n	8006fd8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fb4:	f7fc f9e4 	bl	8003380 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d803      	bhi.n	8006fcc <HAL_SPI_Transmit+0x204>
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fca:	d102      	bne.n	8006fd2 <HAL_SPI_Transmit+0x20a>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d102      	bne.n	8006fd8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006fd6:	e026      	b.n	8007026 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1cd      	bne.n	8006f7e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 f8b2 	bl	8007150 <SPI_EndRxTxTransaction>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d002      	beq.n	8006ff8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10a      	bne.n	8007016 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007000:	2300      	movs	r3, #0
 8007002:	613b      	str	r3, [r7, #16]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	613b      	str	r3, [r7, #16]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	613b      	str	r3, [r7, #16]
 8007014:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	77fb      	strb	r3, [r7, #31]
 8007022:	e000      	b.n	8007026 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007024:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007036:	7ffb      	ldrb	r3, [r7, #31]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3720      	adds	r7, #32
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b088      	sub	sp, #32
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	4613      	mov	r3, r2
 800704e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007050:	f7fc f996 	bl	8003380 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	1a9b      	subs	r3, r3, r2
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	4413      	add	r3, r2
 800705e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007060:	f7fc f98e 	bl	8003380 <HAL_GetTick>
 8007064:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007066:	4b39      	ldr	r3, [pc, #228]	; (800714c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	015b      	lsls	r3, r3, #5
 800706c:	0d1b      	lsrs	r3, r3, #20
 800706e:	69fa      	ldr	r2, [r7, #28]
 8007070:	fb02 f303 	mul.w	r3, r2, r3
 8007074:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007076:	e054      	b.n	8007122 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707e:	d050      	beq.n	8007122 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007080:	f7fc f97e 	bl	8003380 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	69fa      	ldr	r2, [r7, #28]
 800708c:	429a      	cmp	r2, r3
 800708e:	d902      	bls.n	8007096 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d13d      	bne.n	8007112 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070ae:	d111      	bne.n	80070d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070b8:	d004      	beq.n	80070c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070c2:	d107      	bne.n	80070d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070dc:	d10f      	bne.n	80070fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e017      	b.n	8007142 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	3b01      	subs	r3, #1
 8007120:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	4013      	ands	r3, r2
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	429a      	cmp	r2, r3
 8007130:	bf0c      	ite	eq
 8007132:	2301      	moveq	r3, #1
 8007134:	2300      	movne	r3, #0
 8007136:	b2db      	uxtb	r3, r3
 8007138:	461a      	mov	r2, r3
 800713a:	79fb      	ldrb	r3, [r7, #7]
 800713c:	429a      	cmp	r2, r3
 800713e:	d19b      	bne.n	8007078 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3720      	adds	r7, #32
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20000010 	.word	0x20000010

08007150 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af02      	add	r7, sp, #8
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2200      	movs	r2, #0
 8007164:	2180      	movs	r1, #128	; 0x80
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f7ff ff6a 	bl	8007040 <SPI_WaitFlagStateUntilTimeout>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d007      	beq.n	8007182 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007176:	f043 0220 	orr.w	r2, r3, #32
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e000      	b.n	8007184 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d101      	bne.n	800719e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e041      	b.n	8007222 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d106      	bne.n	80071b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f839 	bl	800722a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3304      	adds	r3, #4
 80071c8:	4619      	mov	r1, r3
 80071ca:	4610      	mov	r0, r2
 80071cc:	f000 f9b4 	bl	8007538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007232:	bf00      	nop
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr

0800723c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b01      	cmp	r3, #1
 800724e:	d001      	beq.n	8007254 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e03a      	b.n	80072ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2202      	movs	r2, #2
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68da      	ldr	r2, [r3, #12]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f042 0201 	orr.w	r2, r2, #1
 800726a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a18      	ldr	r2, [pc, #96]	; (80072d4 <HAL_TIM_Base_Start_IT+0x98>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d00e      	beq.n	8007294 <HAL_TIM_Base_Start_IT+0x58>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800727e:	d009      	beq.n	8007294 <HAL_TIM_Base_Start_IT+0x58>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a14      	ldr	r2, [pc, #80]	; (80072d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d004      	beq.n	8007294 <HAL_TIM_Base_Start_IT+0x58>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a13      	ldr	r2, [pc, #76]	; (80072dc <HAL_TIM_Base_Start_IT+0xa0>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d111      	bne.n	80072b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f003 0307 	and.w	r3, r3, #7
 800729e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b06      	cmp	r3, #6
 80072a4:	d010      	beq.n	80072c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f042 0201 	orr.w	r2, r2, #1
 80072b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072b6:	e007      	b.n	80072c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f042 0201 	orr.w	r2, r2, #1
 80072c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bc80      	pop	{r7}
 80072d2:	4770      	bx	lr
 80072d4:	40012c00 	.word	0x40012c00
 80072d8:	40000400 	.word	0x40000400
 80072dc:	40000800 	.word	0x40000800

080072e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d122      	bne.n	800733c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b02      	cmp	r3, #2
 8007302:	d11b      	bne.n	800733c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f06f 0202 	mvn.w	r2, #2
 800730c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	f003 0303 	and.w	r3, r3, #3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f8ed 	bl	8007502 <HAL_TIM_IC_CaptureCallback>
 8007328:	e005      	b.n	8007336 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f8e0 	bl	80074f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f8ef 	bl	8007514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	f003 0304 	and.w	r3, r3, #4
 8007346:	2b04      	cmp	r3, #4
 8007348:	d122      	bne.n	8007390 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f003 0304 	and.w	r3, r3, #4
 8007354:	2b04      	cmp	r3, #4
 8007356:	d11b      	bne.n	8007390 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f06f 0204 	mvn.w	r2, #4
 8007360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2202      	movs	r2, #2
 8007366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007372:	2b00      	cmp	r3, #0
 8007374:	d003      	beq.n	800737e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f8c3 	bl	8007502 <HAL_TIM_IC_CaptureCallback>
 800737c:	e005      	b.n	800738a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f8b6 	bl	80074f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f8c5 	bl	8007514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	f003 0308 	and.w	r3, r3, #8
 800739a:	2b08      	cmp	r3, #8
 800739c:	d122      	bne.n	80073e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f003 0308 	and.w	r3, r3, #8
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d11b      	bne.n	80073e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f06f 0208 	mvn.w	r2, #8
 80073b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2204      	movs	r2, #4
 80073ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	f003 0303 	and.w	r3, r3, #3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f899 	bl	8007502 <HAL_TIM_IC_CaptureCallback>
 80073d0:	e005      	b.n	80073de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f88c 	bl	80074f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f89b 	bl	8007514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f003 0310 	and.w	r3, r3, #16
 80073ee:	2b10      	cmp	r3, #16
 80073f0:	d122      	bne.n	8007438 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f003 0310 	and.w	r3, r3, #16
 80073fc:	2b10      	cmp	r3, #16
 80073fe:	d11b      	bne.n	8007438 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f06f 0210 	mvn.w	r2, #16
 8007408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2208      	movs	r2, #8
 800740e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f86f 	bl	8007502 <HAL_TIM_IC_CaptureCallback>
 8007424:	e005      	b.n	8007432 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f862 	bl	80074f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f871 	bl	8007514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b01      	cmp	r3, #1
 8007444:	d10e      	bne.n	8007464 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b01      	cmp	r3, #1
 8007452:	d107      	bne.n	8007464 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f06f 0201 	mvn.w	r2, #1
 800745c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7f9 fe16 	bl	8001090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800746e:	2b80      	cmp	r3, #128	; 0x80
 8007470:	d10e      	bne.n	8007490 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800747c:	2b80      	cmp	r3, #128	; 0x80
 800747e:	d107      	bne.n	8007490 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f8bf 	bl	800760e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749a:	2b40      	cmp	r3, #64	; 0x40
 800749c:	d10e      	bne.n	80074bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a8:	2b40      	cmp	r3, #64	; 0x40
 80074aa:	d107      	bne.n	80074bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f835 	bl	8007526 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	f003 0320 	and.w	r3, r3, #32
 80074c6:	2b20      	cmp	r3, #32
 80074c8:	d10e      	bne.n	80074e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f003 0320 	and.w	r3, r3, #32
 80074d4:	2b20      	cmp	r3, #32
 80074d6:	d107      	bne.n	80074e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f06f 0220 	mvn.w	r2, #32
 80074e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f88a 	bl	80075fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074e8:	bf00      	nop
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bc80      	pop	{r7}
 8007500:	4770      	bx	lr

08007502 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	bc80      	pop	{r7}
 8007512:	4770      	bx	lr

08007514 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	bc80      	pop	{r7}
 8007524:	4770      	bx	lr

08007526 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007526:	b480      	push	{r7}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800752e:	bf00      	nop
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	bc80      	pop	{r7}
 8007536:	4770      	bx	lr

08007538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a29      	ldr	r2, [pc, #164]	; (80075f0 <TIM_Base_SetConfig+0xb8>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d00b      	beq.n	8007568 <TIM_Base_SetConfig+0x30>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007556:	d007      	beq.n	8007568 <TIM_Base_SetConfig+0x30>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a26      	ldr	r2, [pc, #152]	; (80075f4 <TIM_Base_SetConfig+0xbc>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d003      	beq.n	8007568 <TIM_Base_SetConfig+0x30>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a25      	ldr	r2, [pc, #148]	; (80075f8 <TIM_Base_SetConfig+0xc0>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d108      	bne.n	800757a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800756e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	4313      	orrs	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a1c      	ldr	r2, [pc, #112]	; (80075f0 <TIM_Base_SetConfig+0xb8>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d00b      	beq.n	800759a <TIM_Base_SetConfig+0x62>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007588:	d007      	beq.n	800759a <TIM_Base_SetConfig+0x62>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a19      	ldr	r2, [pc, #100]	; (80075f4 <TIM_Base_SetConfig+0xbc>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d003      	beq.n	800759a <TIM_Base_SetConfig+0x62>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a18      	ldr	r2, [pc, #96]	; (80075f8 <TIM_Base_SetConfig+0xc0>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d108      	bne.n	80075ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a07      	ldr	r2, [pc, #28]	; (80075f0 <TIM_Base_SetConfig+0xb8>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d103      	bne.n	80075e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	691a      	ldr	r2, [r3, #16]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	615a      	str	r2, [r3, #20]
}
 80075e6:	bf00      	nop
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bc80      	pop	{r7}
 80075ee:	4770      	bx	lr
 80075f0:	40012c00 	.word	0x40012c00
 80075f4:	40000400 	.word	0x40000400
 80075f8:	40000800 	.word	0x40000800

080075fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	bc80      	pop	{r7}
 800760c:	4770      	bx	lr

0800760e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	bc80      	pop	{r7}
 800761e:	4770      	bx	lr

08007620 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007620:	b084      	sub	sp, #16
 8007622:	b480      	push	{r7}
 8007624:	b083      	sub	sp, #12
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	f107 0014 	add.w	r0, r7, #20
 800762e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	bc80      	pop	{r7}
 800763c:	b004      	add	sp, #16
 800763e:	4770      	bx	lr

08007640 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007650:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007654:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	b29a      	uxth	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	bc80      	pop	{r7}
 800766a:	4770      	bx	lr

0800766c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007674:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007678:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007680:	b29a      	uxth	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	b29b      	uxth	r3, r3
 8007686:	43db      	mvns	r3, r3
 8007688:	b29b      	uxth	r3, r3
 800768a:	4013      	ands	r3, r2
 800768c:	b29a      	uxth	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	bc80      	pop	{r7}
 800769e:	4770      	bx	lr

080076a0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bc80      	pop	{r7}
 80076b6:	4770      	bx	lr

080076b8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80076b8:	b084      	sub	sp, #16
 80076ba:	b480      	push	{r7}
 80076bc:	b083      	sub	sp, #12
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	f107 0014 	add.w	r0, r7, #20
 80076c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bc80      	pop	{r7}
 80076f4:	b004      	add	sp, #16
 80076f6:	4770      	bx	lr

080076f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b09b      	sub	sp, #108	; 0x6c
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29b      	uxth	r3, r3
 8007716:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800771a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800771e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	78db      	ldrb	r3, [r3, #3]
 8007726:	2b03      	cmp	r3, #3
 8007728:	d81f      	bhi.n	800776a <USB_ActivateEndpoint+0x72>
 800772a:	a201      	add	r2, pc, #4	; (adr r2, 8007730 <USB_ActivateEndpoint+0x38>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	08007741 	.word	0x08007741
 8007734:	0800775d 	.word	0x0800775d
 8007738:	08007773 	.word	0x08007773
 800773c:	0800774f 	.word	0x0800774f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007740:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007744:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007748:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800774c:	e012      	b.n	8007774 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800774e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007752:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007756:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800775a:	e00b      	b.n	8007774 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800775c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007760:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007764:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007768:	e004      	b.n	8007774 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007770:	e000      	b.n	8007774 <USB_ActivateEndpoint+0x7c>
      break;
 8007772:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	441a      	add	r2, r3
 800777e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800778e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007792:	b29b      	uxth	r3, r3
 8007794:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	4313      	orrs	r3, r2
 80077b6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	441a      	add	r2, r3
 80077c4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80077c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077d8:	b29b      	uxth	r3, r3
 80077da:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	7b1b      	ldrb	r3, [r3, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f040 8149 	bne.w	8007a78 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	785b      	ldrb	r3, [r3, #1]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 8084 	beq.w	80078f8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	617b      	str	r3, [r7, #20]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	461a      	mov	r2, r3
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	4413      	add	r3, r2
 8007802:	617b      	str	r3, [r7, #20]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	011a      	lsls	r2, r3, #4
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	4413      	add	r3, r2
 800780e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007812:	613b      	str	r3, [r7, #16]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	88db      	ldrh	r3, [r3, #6]
 8007818:	085b      	lsrs	r3, r3, #1
 800781a:	b29b      	uxth	r3, r3
 800781c:	005b      	lsls	r3, r3, #1
 800781e:	b29a      	uxth	r2, r3
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	81fb      	strh	r3, [r7, #14]
 8007832:	89fb      	ldrh	r3, [r7, #14]
 8007834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007838:	2b00      	cmp	r3, #0
 800783a:	d01b      	beq.n	8007874 <USB_ActivateEndpoint+0x17c>
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	b29b      	uxth	r3, r3
 800784a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800784e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007852:	81bb      	strh	r3, [r7, #12]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	441a      	add	r2, r3
 800785e:	89bb      	ldrh	r3, [r7, #12]
 8007860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800786c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007870:	b29b      	uxth	r3, r3
 8007872:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	78db      	ldrb	r3, [r3, #3]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d020      	beq.n	80078be <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	b29b      	uxth	r3, r3
 800788a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800788e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007892:	813b      	strh	r3, [r7, #8]
 8007894:	893b      	ldrh	r3, [r7, #8]
 8007896:	f083 0320 	eor.w	r3, r3, #32
 800789a:	813b      	strh	r3, [r7, #8]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	441a      	add	r2, r3
 80078a6:	893b      	ldrh	r3, [r7, #8]
 80078a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	8013      	strh	r3, [r2, #0]
 80078bc:	e27f      	b.n	8007dbe <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078d4:	817b      	strh	r3, [r7, #10]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	441a      	add	r2, r3
 80078e0:	897b      	ldrh	r3, [r7, #10]
 80078e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	8013      	strh	r3, [r2, #0]
 80078f6:	e262      	b.n	8007dbe <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007902:	b29b      	uxth	r3, r3
 8007904:	461a      	mov	r2, r3
 8007906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007908:	4413      	add	r3, r2
 800790a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	011a      	lsls	r2, r3, #4
 8007912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007914:	4413      	add	r3, r2
 8007916:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800791a:	62bb      	str	r3, [r7, #40]	; 0x28
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	88db      	ldrh	r3, [r3, #6]
 8007920:	085b      	lsrs	r3, r3, #1
 8007922:	b29b      	uxth	r3, r3
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	b29a      	uxth	r2, r3
 8007928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	627b      	str	r3, [r7, #36]	; 0x24
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007936:	b29b      	uxth	r3, r3
 8007938:	461a      	mov	r2, r3
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	4413      	add	r3, r2
 800793e:	627b      	str	r3, [r7, #36]	; 0x24
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	011a      	lsls	r2, r3, #4
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	4413      	add	r3, r2
 800794a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800794e:	623b      	str	r3, [r7, #32]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d112      	bne.n	800797e <USB_ActivateEndpoint+0x286>
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	b29b      	uxth	r3, r3
 800795e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007962:	b29a      	uxth	r2, r3
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	801a      	strh	r2, [r3, #0]
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	881b      	ldrh	r3, [r3, #0]
 800796c:	b29b      	uxth	r3, r3
 800796e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007976:	b29a      	uxth	r2, r3
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	801a      	strh	r2, [r3, #0]
 800797c:	e02f      	b.n	80079de <USB_ActivateEndpoint+0x2e6>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b3e      	cmp	r3, #62	; 0x3e
 8007984:	d813      	bhi.n	80079ae <USB_ActivateEndpoint+0x2b6>
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	085b      	lsrs	r3, r3, #1
 800798c:	663b      	str	r3, [r7, #96]	; 0x60
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <USB_ActivateEndpoint+0x2a8>
 800799a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800799c:	3301      	adds	r3, #1
 800799e:	663b      	str	r3, [r7, #96]	; 0x60
 80079a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	029b      	lsls	r3, r3, #10
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	6a3b      	ldr	r3, [r7, #32]
 80079aa:	801a      	strh	r2, [r3, #0]
 80079ac:	e017      	b.n	80079de <USB_ActivateEndpoint+0x2e6>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	095b      	lsrs	r3, r3, #5
 80079b4:	663b      	str	r3, [r7, #96]	; 0x60
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	f003 031f 	and.w	r3, r3, #31
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d102      	bne.n	80079c8 <USB_ActivateEndpoint+0x2d0>
 80079c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079c4:	3b01      	subs	r3, #1
 80079c6:	663b      	str	r3, [r7, #96]	; 0x60
 80079c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	029b      	lsls	r3, r3, #10
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d8:	b29a      	uxth	r2, r3
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	83fb      	strh	r3, [r7, #30]
 80079ec:	8bfb      	ldrh	r3, [r7, #30]
 80079ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d01b      	beq.n	8007a2e <USB_ActivateEndpoint+0x336>
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0c:	83bb      	strh	r3, [r7, #28]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	441a      	add	r2, r3
 8007a18:	8bbb      	ldrh	r3, [r7, #28]
 8007a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	881b      	ldrh	r3, [r3, #0]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a44:	837b      	strh	r3, [r7, #26]
 8007a46:	8b7b      	ldrh	r3, [r7, #26]
 8007a48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a4c:	837b      	strh	r3, [r7, #26]
 8007a4e:	8b7b      	ldrh	r3, [r7, #26]
 8007a50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a54:	837b      	strh	r3, [r7, #26]
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	441a      	add	r2, r3
 8007a60:	8b7b      	ldrh	r3, [r7, #26]
 8007a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	8013      	strh	r3, [r2, #0]
 8007a76:	e1a2      	b.n	8007dbe <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a8e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	441a      	add	r2, r3
 8007a9c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aa8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ac4:	4413      	add	r3, r2
 8007ac6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	011a      	lsls	r2, r3, #4
 8007ace:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ad6:	657b      	str	r3, [r7, #84]	; 0x54
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	891b      	ldrh	r3, [r3, #8]
 8007adc:	085b      	lsrs	r3, r3, #1
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	005b      	lsls	r3, r3, #1
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ae6:	801a      	strh	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	653b      	str	r3, [r7, #80]	; 0x50
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	461a      	mov	r2, r3
 8007af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007af8:	4413      	add	r3, r2
 8007afa:	653b      	str	r3, [r7, #80]	; 0x50
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	011a      	lsls	r2, r3, #4
 8007b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	895b      	ldrh	r3, [r3, #10]
 8007b10:	085b      	lsrs	r3, r3, #1
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	005b      	lsls	r3, r3, #1
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b1a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	785b      	ldrb	r3, [r3, #1]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f040 8091 	bne.w	8007c48 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4413      	add	r3, r2
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007b34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d01b      	beq.n	8007b76 <USB_ActivateEndpoint+0x47e>
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	881b      	ldrh	r3, [r3, #0]
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b54:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	441a      	add	r2, r3
 8007b60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	873b      	strh	r3, [r7, #56]	; 0x38
 8007b84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d01b      	beq.n	8007bc6 <USB_ActivateEndpoint+0x4ce>
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	441a      	add	r2, r3
 8007bb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bdc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007bde:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007be0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007be4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007be6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007be8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007bec:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	441a      	add	r2, r3
 8007bf8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c24:	867b      	strh	r3, [r7, #50]	; 0x32
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	441a      	add	r2, r3
 8007c30:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	8013      	strh	r3, [r2, #0]
 8007c46:	e0ba      	b.n	8007dbe <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007c58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d01d      	beq.n	8007ca0 <USB_ActivateEndpoint+0x5a8>
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4413      	add	r3, r2
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	441a      	add	r2, r3
 8007c88:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007cb0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d01d      	beq.n	8007cf8 <USB_ActivateEndpoint+0x600>
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	441a      	add	r2, r3
 8007ce0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	78db      	ldrb	r3, [r3, #3]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d024      	beq.n	8007d4a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007d1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007d1e:	f083 0320 	eor.w	r3, r3, #32
 8007d22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	441a      	add	r2, r3
 8007d30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	8013      	strh	r3, [r2, #0]
 8007d48:	e01d      	b.n	8007d86 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	441a      	add	r2, r3
 8007d6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	441a      	add	r2, r3
 8007da8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007dbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	376c      	adds	r7, #108	; 0x6c
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bc80      	pop	{r7}
 8007dca:	4770      	bx	lr

08007dcc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b08d      	sub	sp, #52	; 0x34
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	7b1b      	ldrb	r3, [r3, #12]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f040 808e 	bne.w	8007efc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	785b      	ldrb	r3, [r3, #1]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d044      	beq.n	8007e72 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	4413      	add	r3, r2
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	81bb      	strh	r3, [r7, #12]
 8007df6:	89bb      	ldrh	r3, [r7, #12]
 8007df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d01b      	beq.n	8007e38 <USB_DeactivateEndpoint+0x6c>
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	881b      	ldrh	r3, [r3, #0]
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e16:	817b      	strh	r3, [r7, #10]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	441a      	add	r2, r3
 8007e22:	897b      	ldrh	r3, [r7, #10]
 8007e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4413      	add	r3, r2
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e4e:	813b      	strh	r3, [r7, #8]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	441a      	add	r2, r3
 8007e5a:	893b      	ldrh	r3, [r7, #8]
 8007e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	8013      	strh	r3, [r2, #0]
 8007e70:	e192      	b.n	8008198 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	881b      	ldrh	r3, [r3, #0]
 8007e7e:	827b      	strh	r3, [r7, #18]
 8007e80:	8a7b      	ldrh	r3, [r7, #18]
 8007e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d01b      	beq.n	8007ec2 <USB_DeactivateEndpoint+0xf6>
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	881b      	ldrh	r3, [r3, #0]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea0:	823b      	strh	r3, [r7, #16]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	441a      	add	r2, r3
 8007eac:	8a3b      	ldrh	r3, [r7, #16]
 8007eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed8:	81fb      	strh	r3, [r7, #14]
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	441a      	add	r2, r3
 8007ee4:	89fb      	ldrh	r3, [r7, #14]
 8007ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	8013      	strh	r3, [r2, #0]
 8007efa:	e14d      	b.n	8008198 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	785b      	ldrb	r3, [r3, #1]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f040 80a5 	bne.w	8008050 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4413      	add	r3, r2
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	843b      	strh	r3, [r7, #32]
 8007f14:	8c3b      	ldrh	r3, [r7, #32]
 8007f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d01b      	beq.n	8007f56 <USB_DeactivateEndpoint+0x18a>
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f34:	83fb      	strh	r3, [r7, #30]
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	441a      	add	r2, r3
 8007f40:	8bfb      	ldrh	r3, [r7, #30]
 8007f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	83bb      	strh	r3, [r7, #28]
 8007f64:	8bbb      	ldrh	r3, [r7, #28]
 8007f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d01b      	beq.n	8007fa6 <USB_DeactivateEndpoint+0x1da>
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	881b      	ldrh	r3, [r3, #0]
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f84:	837b      	strh	r3, [r7, #26]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	441a      	add	r2, r3
 8007f90:	8b7b      	ldrh	r3, [r7, #26]
 8007f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fbc:	833b      	strh	r3, [r7, #24]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	441a      	add	r2, r3
 8007fc8:	8b3b      	ldrh	r3, [r7, #24]
 8007fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	881b      	ldrh	r3, [r3, #0]
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff4:	82fb      	strh	r3, [r7, #22]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	441a      	add	r2, r3
 8008000:	8afb      	ldrh	r3, [r7, #22]
 8008002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800800a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800800e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008012:	b29b      	uxth	r3, r3
 8008014:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	b29b      	uxth	r3, r3
 8008024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800802c:	82bb      	strh	r3, [r7, #20]
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	441a      	add	r2, r3
 8008038:	8abb      	ldrh	r3, [r7, #20]
 800803a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800803e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800804a:	b29b      	uxth	r3, r3
 800804c:	8013      	strh	r3, [r2, #0]
 800804e:	e0a3      	b.n	8008198 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800805e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d01b      	beq.n	80080a0 <USB_DeactivateEndpoint+0x2d4>
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4413      	add	r3, r2
 8008072:	881b      	ldrh	r3, [r3, #0]
 8008074:	b29b      	uxth	r3, r3
 8008076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800807a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800807e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	441a      	add	r2, r3
 800808a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800808c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008094:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800809c:	b29b      	uxth	r3, r3
 800809e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80080ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80080b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d01b      	beq.n	80080f0 <USB_DeactivateEndpoint+0x324>
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	881b      	ldrh	r3, [r3, #0]
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	441a      	add	r2, r3
 80080da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008106:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	441a      	add	r2, r3
 8008112:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800811c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008124:	b29b      	uxth	r3, r3
 8008126:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	b29b      	uxth	r3, r3
 8008136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800813a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800813e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	441a      	add	r2, r3
 800814a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800814c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800815c:	b29b      	uxth	r3, r3
 800815e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	881b      	ldrh	r3, [r3, #0]
 800816c:	b29b      	uxth	r3, r3
 800816e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008176:	847b      	strh	r3, [r7, #34]	; 0x22
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	441a      	add	r2, r3
 8008182:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800818c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008194:	b29b      	uxth	r3, r3
 8008196:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3734      	adds	r7, #52	; 0x34
 800819e:	46bd      	mov	sp, r7
 80081a0:	bc80      	pop	{r7}
 80081a2:	4770      	bx	lr

080081a4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b0cc      	sub	sp, #304	; 0x130
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	1d3b      	adds	r3, r7, #4
 80081ac:	6018      	str	r0, [r3, #0]
 80081ae:	463b      	mov	r3, r7
 80081b0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081b2:	463b      	mov	r3, r7
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	785b      	ldrb	r3, [r3, #1]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	f040 872e 	bne.w	800901a <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80081be:	463b      	mov	r3, r7
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	699a      	ldr	r2, [r3, #24]
 80081c4:	463b      	mov	r3, r7
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d905      	bls.n	80081da <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80081ce:	463b      	mov	r3, r7
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80081d8:	e004      	b.n	80081e4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80081da:	463b      	mov	r3, r7
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80081e4:	463b      	mov	r3, r7
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	7b1b      	ldrb	r3, [r3, #12]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d134      	bne.n	8008258 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80081ee:	463b      	mov	r3, r7
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6959      	ldr	r1, [r3, #20]
 80081f4:	463b      	mov	r3, r7
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	88da      	ldrh	r2, [r3, #6]
 80081fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081fe:	b29b      	uxth	r3, r3
 8008200:	1d38      	adds	r0, r7, #4
 8008202:	6800      	ldr	r0, [r0, #0]
 8008204:	f001 fc03 	bl	8009a0e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008208:	f107 0310 	add.w	r3, r7, #16
 800820c:	1d3a      	adds	r2, r7, #4
 800820e:	6812      	ldr	r2, [r2, #0]
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	1d3b      	adds	r3, r7, #4
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800821a:	b29b      	uxth	r3, r3
 800821c:	4619      	mov	r1, r3
 800821e:	f107 0310 	add.w	r3, r7, #16
 8008222:	f107 0210 	add.w	r2, r7, #16
 8008226:	6812      	ldr	r2, [r2, #0]
 8008228:	440a      	add	r2, r1
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	463b      	mov	r3, r7
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	011a      	lsls	r2, r3, #4
 8008234:	f107 0310 	add.w	r3, r7, #16
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4413      	add	r3, r2
 800823c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008240:	f107 030c 	add.w	r3, r7, #12
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800824a:	b29a      	uxth	r2, r3
 800824c:	f107 030c 	add.w	r3, r7, #12
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	801a      	strh	r2, [r3, #0]
 8008254:	f000 beac 	b.w	8008fb0 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008258:	463b      	mov	r3, r7
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	78db      	ldrb	r3, [r3, #3]
 800825e:	2b02      	cmp	r3, #2
 8008260:	f040 838c 	bne.w	800897c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008264:	463b      	mov	r3, r7
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6a1a      	ldr	r2, [r3, #32]
 800826a:	463b      	mov	r3, r7
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	429a      	cmp	r2, r3
 8008272:	f240 8330 	bls.w	80088d6 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008276:	1d3b      	adds	r3, r7, #4
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	463b      	mov	r3, r7
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	b29b      	uxth	r3, r3
 8008288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800828c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008290:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008294:	1d3b      	adds	r3, r7, #4
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	463b      	mov	r3, r7
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	441a      	add	r2, r3
 80082a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80082a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80082b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80082ba:	463b      	mov	r3, r7
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6a1a      	ldr	r2, [r3, #32]
 80082c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082c4:	1ad2      	subs	r2, r2, r3
 80082c6:	463b      	mov	r3, r7
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80082cc:	1d3b      	adds	r3, r7, #4
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	463b      	mov	r3, r7
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	881b      	ldrh	r3, [r3, #0]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 819e 	beq.w	8008624 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80082e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80082ec:	1d3a      	adds	r2, r7, #4
 80082ee:	6812      	ldr	r2, [r2, #0]
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	463b      	mov	r3, r7
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	785b      	ldrb	r3, [r3, #1]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d17a      	bne.n	80083f2 <USB_EPStartXfer+0x24e>
 80082fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008300:	1d3a      	adds	r2, r7, #4
 8008302:	6812      	ldr	r2, [r2, #0]
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	1d3b      	adds	r3, r7, #4
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800830e:	b29b      	uxth	r3, r3
 8008310:	4619      	mov	r1, r3
 8008312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008316:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800831a:	6812      	ldr	r2, [r2, #0]
 800831c:	440a      	add	r2, r1
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	463b      	mov	r3, r7
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	011a      	lsls	r2, r3, #4
 8008328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4413      	add	r3, r2
 8008330:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008338:	601a      	str	r2, [r3, #0]
 800833a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800833e:	2b00      	cmp	r3, #0
 8008340:	d11a      	bne.n	8008378 <USB_EPStartXfer+0x1d4>
 8008342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	b29b      	uxth	r3, r3
 800834c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008350:	b29a      	uxth	r2, r3
 8008352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	801a      	strh	r2, [r3, #0]
 800835a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	b29b      	uxth	r3, r3
 8008364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800836c:	b29a      	uxth	r2, r3
 800836e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	801a      	strh	r2, [r3, #0]
 8008376:	e062      	b.n	800843e <USB_EPStartXfer+0x29a>
 8008378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800837c:	2b3e      	cmp	r3, #62	; 0x3e
 800837e:	d819      	bhi.n	80083b4 <USB_EPStartXfer+0x210>
 8008380:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008384:	085b      	lsrs	r3, r3, #1
 8008386:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800838a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d004      	beq.n	80083a0 <USB_EPStartXfer+0x1fc>
 8008396:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800839a:	3301      	adds	r3, #1
 800839c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80083a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	029b      	lsls	r3, r3, #10
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	801a      	strh	r2, [r3, #0]
 80083b2:	e044      	b.n	800843e <USB_EPStartXfer+0x29a>
 80083b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083b8:	095b      	lsrs	r3, r3, #5
 80083ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80083be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083c2:	f003 031f 	and.w	r3, r3, #31
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d104      	bne.n	80083d4 <USB_EPStartXfer+0x230>
 80083ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083ce:	3b01      	subs	r3, #1
 80083d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80083d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083d8:	b29b      	uxth	r3, r3
 80083da:	029b      	lsls	r3, r3, #10
 80083dc:	b29b      	uxth	r3, r3
 80083de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	801a      	strh	r2, [r3, #0]
 80083f0:	e025      	b.n	800843e <USB_EPStartXfer+0x29a>
 80083f2:	463b      	mov	r3, r7
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	785b      	ldrb	r3, [r3, #1]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d120      	bne.n	800843e <USB_EPStartXfer+0x29a>
 80083fc:	1d3b      	adds	r3, r7, #4
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008404:	b29b      	uxth	r3, r3
 8008406:	4619      	mov	r1, r3
 8008408:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800840c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008410:	6812      	ldr	r2, [r2, #0]
 8008412:	440a      	add	r2, r1
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	463b      	mov	r3, r7
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	011a      	lsls	r2, r3, #4
 800841e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4413      	add	r3, r2
 8008426:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800842a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800842e:	601a      	str	r2, [r3, #0]
 8008430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008434:	b29a      	uxth	r2, r3
 8008436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800843e:	463b      	mov	r3, r7
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	895b      	ldrh	r3, [r3, #10]
 8008444:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008448:	463b      	mov	r3, r7
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6959      	ldr	r1, [r3, #20]
 800844e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008452:	b29b      	uxth	r3, r3
 8008454:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008458:	1d38      	adds	r0, r7, #4
 800845a:	6800      	ldr	r0, [r0, #0]
 800845c:	f001 fad7 	bl	8009a0e <USB_WritePMA>
            ep->xfer_buff += len;
 8008460:	463b      	mov	r3, r7
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	695a      	ldr	r2, [r3, #20]
 8008466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800846a:	441a      	add	r2, r3
 800846c:	463b      	mov	r3, r7
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008472:	463b      	mov	r3, r7
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6a1a      	ldr	r2, [r3, #32]
 8008478:	463b      	mov	r3, r7
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	429a      	cmp	r2, r3
 8008480:	d909      	bls.n	8008496 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8008482:	463b      	mov	r3, r7
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6a1a      	ldr	r2, [r3, #32]
 8008488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800848c:	1ad2      	subs	r2, r2, r3
 800848e:	463b      	mov	r3, r7
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	621a      	str	r2, [r3, #32]
 8008494:	e008      	b.n	80084a8 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8008496:	463b      	mov	r3, r7
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6a1b      	ldr	r3, [r3, #32]
 800849c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80084a0:	463b      	mov	r3, r7
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2200      	movs	r2, #0
 80084a6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80084a8:	463b      	mov	r3, r7
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	785b      	ldrb	r3, [r3, #1]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d17a      	bne.n	80085a8 <USB_EPStartXfer+0x404>
 80084b2:	f107 0318 	add.w	r3, r7, #24
 80084b6:	1d3a      	adds	r2, r7, #4
 80084b8:	6812      	ldr	r2, [r2, #0]
 80084ba:	601a      	str	r2, [r3, #0]
 80084bc:	1d3b      	adds	r3, r7, #4
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	4619      	mov	r1, r3
 80084c8:	f107 0318 	add.w	r3, r7, #24
 80084cc:	f107 0218 	add.w	r2, r7, #24
 80084d0:	6812      	ldr	r2, [r2, #0]
 80084d2:	440a      	add	r2, r1
 80084d4:	601a      	str	r2, [r3, #0]
 80084d6:	463b      	mov	r3, r7
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	011a      	lsls	r2, r3, #4
 80084de:	f107 0318 	add.w	r3, r7, #24
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4413      	add	r3, r2
 80084e6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80084ea:	f107 0314 	add.w	r3, r7, #20
 80084ee:	601a      	str	r2, [r3, #0]
 80084f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d11a      	bne.n	800852e <USB_EPStartXfer+0x38a>
 80084f8:	f107 0314 	add.w	r3, r7, #20
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	b29b      	uxth	r3, r3
 8008502:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008506:	b29a      	uxth	r2, r3
 8008508:	f107 0314 	add.w	r3, r7, #20
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	801a      	strh	r2, [r3, #0]
 8008510:	f107 0314 	add.w	r3, r7, #20
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	b29b      	uxth	r3, r3
 800851a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800851e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008522:	b29a      	uxth	r2, r3
 8008524:	f107 0314 	add.w	r3, r7, #20
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	801a      	strh	r2, [r3, #0]
 800852c:	e067      	b.n	80085fe <USB_EPStartXfer+0x45a>
 800852e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008532:	2b3e      	cmp	r3, #62	; 0x3e
 8008534:	d819      	bhi.n	800856a <USB_EPStartXfer+0x3c6>
 8008536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800853a:	085b      	lsrs	r3, r3, #1
 800853c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	2b00      	cmp	r3, #0
 800854a:	d004      	beq.n	8008556 <USB_EPStartXfer+0x3b2>
 800854c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008550:	3301      	adds	r3, #1
 8008552:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008556:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800855a:	b29b      	uxth	r3, r3
 800855c:	029b      	lsls	r3, r3, #10
 800855e:	b29a      	uxth	r2, r3
 8008560:	f107 0314 	add.w	r3, r7, #20
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	801a      	strh	r2, [r3, #0]
 8008568:	e049      	b.n	80085fe <USB_EPStartXfer+0x45a>
 800856a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800856e:	095b      	lsrs	r3, r3, #5
 8008570:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008578:	f003 031f 	and.w	r3, r3, #31
 800857c:	2b00      	cmp	r3, #0
 800857e:	d104      	bne.n	800858a <USB_EPStartXfer+0x3e6>
 8008580:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008584:	3b01      	subs	r3, #1
 8008586:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800858a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800858e:	b29b      	uxth	r3, r3
 8008590:	029b      	lsls	r3, r3, #10
 8008592:	b29b      	uxth	r3, r3
 8008594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800859c:	b29a      	uxth	r2, r3
 800859e:	f107 0314 	add.w	r3, r7, #20
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	801a      	strh	r2, [r3, #0]
 80085a6:	e02a      	b.n	80085fe <USB_EPStartXfer+0x45a>
 80085a8:	463b      	mov	r3, r7
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	785b      	ldrb	r3, [r3, #1]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d125      	bne.n	80085fe <USB_EPStartXfer+0x45a>
 80085b2:	f107 0320 	add.w	r3, r7, #32
 80085b6:	1d3a      	adds	r2, r7, #4
 80085b8:	6812      	ldr	r2, [r2, #0]
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	1d3b      	adds	r3, r7, #4
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	4619      	mov	r1, r3
 80085c8:	f107 0320 	add.w	r3, r7, #32
 80085cc:	f107 0220 	add.w	r2, r7, #32
 80085d0:	6812      	ldr	r2, [r2, #0]
 80085d2:	440a      	add	r2, r1
 80085d4:	601a      	str	r2, [r3, #0]
 80085d6:	463b      	mov	r3, r7
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	011a      	lsls	r2, r3, #4
 80085de:	f107 0320 	add.w	r3, r7, #32
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4413      	add	r3, r2
 80085e6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80085ea:	f107 031c 	add.w	r3, r7, #28
 80085ee:	601a      	str	r2, [r3, #0]
 80085f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	f107 031c 	add.w	r3, r7, #28
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80085fe:	463b      	mov	r3, r7
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	891b      	ldrh	r3, [r3, #8]
 8008604:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008608:	463b      	mov	r3, r7
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	6959      	ldr	r1, [r3, #20]
 800860e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008612:	b29b      	uxth	r3, r3
 8008614:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008618:	1d38      	adds	r0, r7, #4
 800861a:	6800      	ldr	r0, [r0, #0]
 800861c:	f001 f9f7 	bl	8009a0e <USB_WritePMA>
 8008620:	f000 bcc6 	b.w	8008fb0 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008624:	463b      	mov	r3, r7
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	785b      	ldrb	r3, [r3, #1]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d164      	bne.n	80086f8 <USB_EPStartXfer+0x554>
 800862e:	1d3b      	adds	r3, r7, #4
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	64bb      	str	r3, [r7, #72]	; 0x48
 8008634:	1d3b      	adds	r3, r7, #4
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800863c:	b29b      	uxth	r3, r3
 800863e:	461a      	mov	r2, r3
 8008640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008642:	4413      	add	r3, r2
 8008644:	64bb      	str	r3, [r7, #72]	; 0x48
 8008646:	463b      	mov	r3, r7
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	011a      	lsls	r2, r3, #4
 800864e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008650:	4413      	add	r3, r2
 8008652:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008656:	647b      	str	r3, [r7, #68]	; 0x44
 8008658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d112      	bne.n	8008686 <USB_EPStartXfer+0x4e2>
 8008660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	b29b      	uxth	r3, r3
 8008666:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800866a:	b29a      	uxth	r2, r3
 800866c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800866e:	801a      	strh	r2, [r3, #0]
 8008670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	b29b      	uxth	r3, r3
 8008676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800867a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800867e:	b29a      	uxth	r2, r3
 8008680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008682:	801a      	strh	r2, [r3, #0]
 8008684:	e057      	b.n	8008736 <USB_EPStartXfer+0x592>
 8008686:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800868a:	2b3e      	cmp	r3, #62	; 0x3e
 800868c:	d817      	bhi.n	80086be <USB_EPStartXfer+0x51a>
 800868e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008692:	085b      	lsrs	r3, r3, #1
 8008694:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800869c:	f003 0301 	and.w	r3, r3, #1
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d004      	beq.n	80086ae <USB_EPStartXfer+0x50a>
 80086a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80086a8:	3301      	adds	r3, #1
 80086aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80086ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	029b      	lsls	r3, r3, #10
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ba:	801a      	strh	r2, [r3, #0]
 80086bc:	e03b      	b.n	8008736 <USB_EPStartXfer+0x592>
 80086be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086c2:	095b      	lsrs	r3, r3, #5
 80086c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80086c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086cc:	f003 031f 	and.w	r3, r3, #31
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d104      	bne.n	80086de <USB_EPStartXfer+0x53a>
 80086d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80086d8:	3b01      	subs	r3, #1
 80086da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80086de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	029b      	lsls	r3, r3, #10
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086f4:	801a      	strh	r2, [r3, #0]
 80086f6:	e01e      	b.n	8008736 <USB_EPStartXfer+0x592>
 80086f8:	463b      	mov	r3, r7
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	785b      	ldrb	r3, [r3, #1]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d119      	bne.n	8008736 <USB_EPStartXfer+0x592>
 8008702:	1d3b      	adds	r3, r7, #4
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	653b      	str	r3, [r7, #80]	; 0x50
 8008708:	1d3b      	adds	r3, r7, #4
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008710:	b29b      	uxth	r3, r3
 8008712:	461a      	mov	r2, r3
 8008714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008716:	4413      	add	r3, r2
 8008718:	653b      	str	r3, [r7, #80]	; 0x50
 800871a:	463b      	mov	r3, r7
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	011a      	lsls	r2, r3, #4
 8008722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008724:	4413      	add	r3, r2
 8008726:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800872a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800872c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008730:	b29a      	uxth	r2, r3
 8008732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008734:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008736:	463b      	mov	r3, r7
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	891b      	ldrh	r3, [r3, #8]
 800873c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008740:	463b      	mov	r3, r7
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	6959      	ldr	r1, [r3, #20]
 8008746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800874a:	b29b      	uxth	r3, r3
 800874c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008750:	1d38      	adds	r0, r7, #4
 8008752:	6800      	ldr	r0, [r0, #0]
 8008754:	f001 f95b 	bl	8009a0e <USB_WritePMA>
            ep->xfer_buff += len;
 8008758:	463b      	mov	r3, r7
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	695a      	ldr	r2, [r3, #20]
 800875e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008762:	441a      	add	r2, r3
 8008764:	463b      	mov	r3, r7
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800876a:	463b      	mov	r3, r7
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	6a1a      	ldr	r2, [r3, #32]
 8008770:	463b      	mov	r3, r7
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	429a      	cmp	r2, r3
 8008778:	d909      	bls.n	800878e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800877a:	463b      	mov	r3, r7
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6a1a      	ldr	r2, [r3, #32]
 8008780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008784:	1ad2      	subs	r2, r2, r3
 8008786:	463b      	mov	r3, r7
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	621a      	str	r2, [r3, #32]
 800878c:	e008      	b.n	80087a0 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800878e:	463b      	mov	r3, r7
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	6a1b      	ldr	r3, [r3, #32]
 8008794:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008798:	463b      	mov	r3, r7
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2200      	movs	r2, #0
 800879e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80087a0:	1d3b      	adds	r3, r7, #4
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	643b      	str	r3, [r7, #64]	; 0x40
 80087a6:	463b      	mov	r3, r7
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	785b      	ldrb	r3, [r3, #1]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d164      	bne.n	800887a <USB_EPStartXfer+0x6d6>
 80087b0:	1d3b      	adds	r3, r7, #4
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80087b6:	1d3b      	adds	r3, r7, #4
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087be:	b29b      	uxth	r3, r3
 80087c0:	461a      	mov	r2, r3
 80087c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c4:	4413      	add	r3, r2
 80087c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80087c8:	463b      	mov	r3, r7
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	011a      	lsls	r2, r3, #4
 80087d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d2:	4413      	add	r3, r2
 80087d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087d8:	637b      	str	r3, [r7, #52]	; 0x34
 80087da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d112      	bne.n	8008808 <USB_EPStartXfer+0x664>
 80087e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e4:	881b      	ldrh	r3, [r3, #0]
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f0:	801a      	strh	r2, [r3, #0]
 80087f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008800:	b29a      	uxth	r2, r3
 8008802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008804:	801a      	strh	r2, [r3, #0]
 8008806:	e054      	b.n	80088b2 <USB_EPStartXfer+0x70e>
 8008808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800880c:	2b3e      	cmp	r3, #62	; 0x3e
 800880e:	d817      	bhi.n	8008840 <USB_EPStartXfer+0x69c>
 8008810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008814:	085b      	lsrs	r3, r3, #1
 8008816:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800881a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d004      	beq.n	8008830 <USB_EPStartXfer+0x68c>
 8008826:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800882a:	3301      	adds	r3, #1
 800882c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008830:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008834:	b29b      	uxth	r3, r3
 8008836:	029b      	lsls	r3, r3, #10
 8008838:	b29a      	uxth	r2, r3
 800883a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883c:	801a      	strh	r2, [r3, #0]
 800883e:	e038      	b.n	80088b2 <USB_EPStartXfer+0x70e>
 8008840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008844:	095b      	lsrs	r3, r3, #5
 8008846:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800884a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800884e:	f003 031f 	and.w	r3, r3, #31
 8008852:	2b00      	cmp	r3, #0
 8008854:	d104      	bne.n	8008860 <USB_EPStartXfer+0x6bc>
 8008856:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800885a:	3b01      	subs	r3, #1
 800885c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008860:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008864:	b29b      	uxth	r3, r3
 8008866:	029b      	lsls	r3, r3, #10
 8008868:	b29b      	uxth	r3, r3
 800886a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800886e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008872:	b29a      	uxth	r2, r3
 8008874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008876:	801a      	strh	r2, [r3, #0]
 8008878:	e01b      	b.n	80088b2 <USB_EPStartXfer+0x70e>
 800887a:	463b      	mov	r3, r7
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	785b      	ldrb	r3, [r3, #1]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d116      	bne.n	80088b2 <USB_EPStartXfer+0x70e>
 8008884:	1d3b      	adds	r3, r7, #4
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800888c:	b29b      	uxth	r3, r3
 800888e:	461a      	mov	r2, r3
 8008890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008892:	4413      	add	r3, r2
 8008894:	643b      	str	r3, [r7, #64]	; 0x40
 8008896:	463b      	mov	r3, r7
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	011a      	lsls	r2, r3, #4
 800889e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088a0:	4413      	add	r3, r2
 80088a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80088b2:	463b      	mov	r3, r7
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	895b      	ldrh	r3, [r3, #10]
 80088b8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088bc:	463b      	mov	r3, r7
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6959      	ldr	r1, [r3, #20]
 80088c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80088cc:	1d38      	adds	r0, r7, #4
 80088ce:	6800      	ldr	r0, [r0, #0]
 80088d0:	f001 f89d 	bl	8009a0e <USB_WritePMA>
 80088d4:	e36c      	b.n	8008fb0 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80088d6:	463b      	mov	r3, r7
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6a1b      	ldr	r3, [r3, #32]
 80088dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80088e0:	1d3b      	adds	r3, r7, #4
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	463b      	mov	r3, r7
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80088f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088fa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80088fe:	1d3b      	adds	r3, r7, #4
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	463b      	mov	r3, r7
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	441a      	add	r2, r3
 800890c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800891c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008920:	b29b      	uxth	r3, r3
 8008922:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008924:	1d3b      	adds	r3, r7, #4
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	65fb      	str	r3, [r7, #92]	; 0x5c
 800892a:	1d3b      	adds	r3, r7, #4
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008932:	b29b      	uxth	r3, r3
 8008934:	461a      	mov	r2, r3
 8008936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008938:	4413      	add	r3, r2
 800893a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800893c:	463b      	mov	r3, r7
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	011a      	lsls	r2, r3, #4
 8008944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008946:	4413      	add	r3, r2
 8008948:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800894c:	65bb      	str	r3, [r7, #88]	; 0x58
 800894e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008952:	b29a      	uxth	r2, r3
 8008954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008956:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008958:	463b      	mov	r3, r7
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	891b      	ldrh	r3, [r3, #8]
 800895e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008962:	463b      	mov	r3, r7
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6959      	ldr	r1, [r3, #20]
 8008968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800896c:	b29b      	uxth	r3, r3
 800896e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008972:	1d38      	adds	r0, r7, #4
 8008974:	6800      	ldr	r0, [r0, #0]
 8008976:	f001 f84a 	bl	8009a0e <USB_WritePMA>
 800897a:	e319      	b.n	8008fb0 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800897c:	1d3b      	adds	r3, r7, #4
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	463b      	mov	r3, r7
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4413      	add	r3, r2
 800898a:	881b      	ldrh	r3, [r3, #0]
 800898c:	b29b      	uxth	r3, r3
 800898e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008996:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800899a:	1d3b      	adds	r3, r7, #4
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	463b      	mov	r3, r7
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	441a      	add	r2, r3
 80089a8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80089ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089b4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80089b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089bc:	b29b      	uxth	r3, r3
 80089be:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80089c0:	463b      	mov	r3, r7
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6a1a      	ldr	r2, [r3, #32]
 80089c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ca:	1ad2      	subs	r2, r2, r3
 80089cc:	463b      	mov	r3, r7
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80089d2:	1d3b      	adds	r3, r7, #4
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	463b      	mov	r3, r7
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	881b      	ldrh	r3, [r3, #0]
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 8162 	beq.w	8008cb2 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80089ee:	1d3b      	adds	r3, r7, #4
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089f6:	463b      	mov	r3, r7
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	785b      	ldrb	r3, [r3, #1]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d164      	bne.n	8008aca <USB_EPStartXfer+0x926>
 8008a00:	1d3b      	adds	r3, r7, #4
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a06:	1d3b      	adds	r3, r7, #4
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	461a      	mov	r2, r3
 8008a12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a14:	4413      	add	r3, r2
 8008a16:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a18:	463b      	mov	r3, r7
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	011a      	lsls	r2, r3, #4
 8008a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a22:	4413      	add	r3, r2
 8008a24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a28:	677b      	str	r3, [r7, #116]	; 0x74
 8008a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d112      	bne.n	8008a58 <USB_EPStartXfer+0x8b4>
 8008a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a40:	801a      	strh	r2, [r3, #0]
 8008a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a44:	881b      	ldrh	r3, [r3, #0]
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a54:	801a      	strh	r2, [r3, #0]
 8008a56:	e057      	b.n	8008b08 <USB_EPStartXfer+0x964>
 8008a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a5c:	2b3e      	cmp	r3, #62	; 0x3e
 8008a5e:	d817      	bhi.n	8008a90 <USB_EPStartXfer+0x8ec>
 8008a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a64:	085b      	lsrs	r3, r3, #1
 8008a66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d004      	beq.n	8008a80 <USB_EPStartXfer+0x8dc>
 8008a76:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008a80:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	029b      	lsls	r3, r3, #10
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a8c:	801a      	strh	r2, [r3, #0]
 8008a8e:	e03b      	b.n	8008b08 <USB_EPStartXfer+0x964>
 8008a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a94:	095b      	lsrs	r3, r3, #5
 8008a96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a9e:	f003 031f 	and.w	r3, r3, #31
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d104      	bne.n	8008ab0 <USB_EPStartXfer+0x90c>
 8008aa6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008ab0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	029b      	lsls	r3, r3, #10
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ac6:	801a      	strh	r2, [r3, #0]
 8008ac8:	e01e      	b.n	8008b08 <USB_EPStartXfer+0x964>
 8008aca:	463b      	mov	r3, r7
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	785b      	ldrb	r3, [r3, #1]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d119      	bne.n	8008b08 <USB_EPStartXfer+0x964>
 8008ad4:	1d3b      	adds	r3, r7, #4
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008aea:	463b      	mov	r3, r7
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	011a      	lsls	r2, r3, #4
 8008af2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008af6:	4413      	add	r3, r2
 8008af8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008afc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008b08:	463b      	mov	r3, r7
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	895b      	ldrh	r3, [r3, #10]
 8008b0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b12:	463b      	mov	r3, r7
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6959      	ldr	r1, [r3, #20]
 8008b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008b22:	1d38      	adds	r0, r7, #4
 8008b24:	6800      	ldr	r0, [r0, #0]
 8008b26:	f000 ff72 	bl	8009a0e <USB_WritePMA>
          ep->xfer_buff += len;
 8008b2a:	463b      	mov	r3, r7
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	695a      	ldr	r2, [r3, #20]
 8008b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b34:	441a      	add	r2, r3
 8008b36:	463b      	mov	r3, r7
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008b3c:	463b      	mov	r3, r7
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6a1a      	ldr	r2, [r3, #32]
 8008b42:	463b      	mov	r3, r7
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d909      	bls.n	8008b60 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8008b4c:	463b      	mov	r3, r7
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6a1a      	ldr	r2, [r3, #32]
 8008b52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b56:	1ad2      	subs	r2, r2, r3
 8008b58:	463b      	mov	r3, r7
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	621a      	str	r2, [r3, #32]
 8008b5e:	e008      	b.n	8008b72 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8008b60:	463b      	mov	r3, r7
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008b6a:	463b      	mov	r3, r7
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f000 821a 	beq.w	8008fb0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008b7c:	463b      	mov	r3, r7
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	785b      	ldrb	r3, [r3, #1]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d164      	bne.n	8008c50 <USB_EPStartXfer+0xaac>
 8008b86:	1d3b      	adds	r3, r7, #4
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b8c:	1d3b      	adds	r3, r7, #4
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	461a      	mov	r2, r3
 8008b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b9a:	4413      	add	r3, r2
 8008b9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b9e:	463b      	mov	r3, r7
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	011a      	lsls	r2, r3, #4
 8008ba6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ba8:	4413      	add	r3, r2
 8008baa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008bae:	667b      	str	r3, [r7, #100]	; 0x64
 8008bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d112      	bne.n	8008bde <USB_EPStartXfer+0xa3a>
 8008bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bba:	881b      	ldrh	r3, [r3, #0]
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bc6:	801a      	strh	r2, [r3, #0]
 8008bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bca:	881b      	ldrh	r3, [r3, #0]
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bda:	801a      	strh	r2, [r3, #0]
 8008bdc:	e057      	b.n	8008c8e <USB_EPStartXfer+0xaea>
 8008bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008be2:	2b3e      	cmp	r3, #62	; 0x3e
 8008be4:	d817      	bhi.n	8008c16 <USB_EPStartXfer+0xa72>
 8008be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bea:	085b      	lsrs	r3, r3, #1
 8008bec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d004      	beq.n	8008c06 <USB_EPStartXfer+0xa62>
 8008bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c00:	3301      	adds	r3, #1
 8008c02:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	029b      	lsls	r3, r3, #10
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c12:	801a      	strh	r2, [r3, #0]
 8008c14:	e03b      	b.n	8008c8e <USB_EPStartXfer+0xaea>
 8008c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c1a:	095b      	lsrs	r3, r3, #5
 8008c1c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c24:	f003 031f 	and.w	r3, r3, #31
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d104      	bne.n	8008c36 <USB_EPStartXfer+0xa92>
 8008c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c30:	3b01      	subs	r3, #1
 8008c32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	029b      	lsls	r3, r3, #10
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c4c:	801a      	strh	r2, [r3, #0]
 8008c4e:	e01e      	b.n	8008c8e <USB_EPStartXfer+0xaea>
 8008c50:	463b      	mov	r3, r7
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	785b      	ldrb	r3, [r3, #1]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d119      	bne.n	8008c8e <USB_EPStartXfer+0xaea>
 8008c5a:	1d3b      	adds	r3, r7, #4
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	673b      	str	r3, [r7, #112]	; 0x70
 8008c60:	1d3b      	adds	r3, r7, #4
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c6e:	4413      	add	r3, r2
 8008c70:	673b      	str	r3, [r7, #112]	; 0x70
 8008c72:	463b      	mov	r3, r7
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	011a      	lsls	r2, r3, #4
 8008c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008c8e:	463b      	mov	r3, r7
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	891b      	ldrh	r3, [r3, #8]
 8008c94:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c98:	463b      	mov	r3, r7
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6959      	ldr	r1, [r3, #20]
 8008c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ca8:	1d38      	adds	r0, r7, #4
 8008caa:	6800      	ldr	r0, [r0, #0]
 8008cac:	f000 feaf 	bl	8009a0e <USB_WritePMA>
 8008cb0:	e17e      	b.n	8008fb0 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008cb2:	463b      	mov	r3, r7
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	785b      	ldrb	r3, [r3, #1]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d16f      	bne.n	8008d9c <USB_EPStartXfer+0xbf8>
 8008cbc:	1d3b      	adds	r3, r7, #4
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008cc4:	1d3b      	adds	r3, r7, #4
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	461a      	mov	r2, r3
 8008cd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008cda:	463b      	mov	r3, r7
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	011a      	lsls	r2, r3, #4
 8008ce2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008cec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d116      	bne.n	8008d26 <USB_EPStartXfer+0xb82>
 8008cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008cfc:	881b      	ldrh	r3, [r3, #0]
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d0a:	801a      	strh	r2, [r3, #0]
 8008d0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d10:	881b      	ldrh	r3, [r3, #0]
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d22:	801a      	strh	r2, [r3, #0]
 8008d24:	e05f      	b.n	8008de6 <USB_EPStartXfer+0xc42>
 8008d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d2a:	2b3e      	cmp	r3, #62	; 0x3e
 8008d2c:	d818      	bhi.n	8008d60 <USB_EPStartXfer+0xbbc>
 8008d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d32:	085b      	lsrs	r3, r3, #1
 8008d34:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008d38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d3c:	f003 0301 	and.w	r3, r3, #1
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d004      	beq.n	8008d4e <USB_EPStartXfer+0xbaa>
 8008d44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008d48:	3301      	adds	r3, #1
 8008d4a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008d4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	029b      	lsls	r3, r3, #10
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d5c:	801a      	strh	r2, [r3, #0]
 8008d5e:	e042      	b.n	8008de6 <USB_EPStartXfer+0xc42>
 8008d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d64:	095b      	lsrs	r3, r3, #5
 8008d66:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d6e:	f003 031f 	and.w	r3, r3, #31
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d104      	bne.n	8008d80 <USB_EPStartXfer+0xbdc>
 8008d76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008d80:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	029b      	lsls	r3, r3, #10
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d98:	801a      	strh	r2, [r3, #0]
 8008d9a:	e024      	b.n	8008de6 <USB_EPStartXfer+0xc42>
 8008d9c:	463b      	mov	r3, r7
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	785b      	ldrb	r3, [r3, #1]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d11f      	bne.n	8008de6 <USB_EPStartXfer+0xc42>
 8008da6:	1d3b      	adds	r3, r7, #4
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008dae:	1d3b      	adds	r3, r7, #4
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	461a      	mov	r2, r3
 8008dba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008dc4:	463b      	mov	r3, r7
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	011a      	lsls	r2, r3, #4
 8008dcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008de4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008de6:	463b      	mov	r3, r7
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	891b      	ldrh	r3, [r3, #8]
 8008dec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008df0:	463b      	mov	r3, r7
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	6959      	ldr	r1, [r3, #20]
 8008df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008e00:	1d38      	adds	r0, r7, #4
 8008e02:	6800      	ldr	r0, [r0, #0]
 8008e04:	f000 fe03 	bl	8009a0e <USB_WritePMA>
          ep->xfer_buff += len;
 8008e08:	463b      	mov	r3, r7
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	695a      	ldr	r2, [r3, #20]
 8008e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e12:	441a      	add	r2, r3
 8008e14:	463b      	mov	r3, r7
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008e1a:	463b      	mov	r3, r7
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	6a1a      	ldr	r2, [r3, #32]
 8008e20:	463b      	mov	r3, r7
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d909      	bls.n	8008e3e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8008e2a:	463b      	mov	r3, r7
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	6a1a      	ldr	r2, [r3, #32]
 8008e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e34:	1ad2      	subs	r2, r2, r3
 8008e36:	463b      	mov	r3, r7
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	621a      	str	r2, [r3, #32]
 8008e3c:	e008      	b.n	8008e50 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8008e3e:	463b      	mov	r3, r7
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	6a1b      	ldr	r3, [r3, #32]
 8008e44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008e48:	463b      	mov	r3, r7
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008e50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 80ab 	beq.w	8008fb0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008e5a:	1d3b      	adds	r3, r7, #4
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e62:	463b      	mov	r3, r7
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	785b      	ldrb	r3, [r3, #1]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d16f      	bne.n	8008f4c <USB_EPStartXfer+0xda8>
 8008e6c:	1d3b      	adds	r3, r7, #4
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e74:	1d3b      	adds	r3, r7, #4
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	461a      	mov	r2, r3
 8008e80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e84:	4413      	add	r3, r2
 8008e86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e8a:	463b      	mov	r3, r7
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	011a      	lsls	r2, r3, #4
 8008e92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e96:	4413      	add	r3, r2
 8008e98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ea0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d116      	bne.n	8008ed6 <USB_EPStartXfer+0xd32>
 8008ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008eac:	881b      	ldrh	r3, [r3, #0]
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008eba:	801a      	strh	r2, [r3, #0]
 8008ebc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ed2:	801a      	strh	r2, [r3, #0]
 8008ed4:	e05b      	b.n	8008f8e <USB_EPStartXfer+0xdea>
 8008ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eda:	2b3e      	cmp	r3, #62	; 0x3e
 8008edc:	d818      	bhi.n	8008f10 <USB_EPStartXfer+0xd6c>
 8008ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ee2:	085b      	lsrs	r3, r3, #1
 8008ee4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d004      	beq.n	8008efe <USB_EPStartXfer+0xd5a>
 8008ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ef8:	3301      	adds	r3, #1
 8008efa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	029b      	lsls	r3, r3, #10
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f0c:	801a      	strh	r2, [r3, #0]
 8008f0e:	e03e      	b.n	8008f8e <USB_EPStartXfer+0xdea>
 8008f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f14:	095b      	lsrs	r3, r3, #5
 8008f16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f1e:	f003 031f 	and.w	r3, r3, #31
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d104      	bne.n	8008f30 <USB_EPStartXfer+0xd8c>
 8008f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	029b      	lsls	r3, r3, #10
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f48:	801a      	strh	r2, [r3, #0]
 8008f4a:	e020      	b.n	8008f8e <USB_EPStartXfer+0xdea>
 8008f4c:	463b      	mov	r3, r7
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	785b      	ldrb	r3, [r3, #1]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d11b      	bne.n	8008f8e <USB_EPStartXfer+0xdea>
 8008f56:	1d3b      	adds	r3, r7, #4
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	461a      	mov	r2, r3
 8008f62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f66:	4413      	add	r3, r2
 8008f68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f6c:	463b      	mov	r3, r7
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	011a      	lsls	r2, r3, #4
 8008f74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f78:	4413      	add	r3, r2
 8008f7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008f8e:	463b      	mov	r3, r7
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	895b      	ldrh	r3, [r3, #10]
 8008f94:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f98:	463b      	mov	r3, r7
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6959      	ldr	r1, [r3, #20]
 8008f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008fa8:	1d38      	adds	r0, r7, #4
 8008faa:	6800      	ldr	r0, [r0, #0]
 8008fac:	f000 fd2f 	bl	8009a0e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008fb0:	1d3b      	adds	r3, r7, #4
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	463b      	mov	r3, r7
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	4413      	add	r3, r2
 8008fbe:	881b      	ldrh	r3, [r3, #0]
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	f107 020a 	add.w	r2, r7, #10
 8008fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fce:	8013      	strh	r3, [r2, #0]
 8008fd0:	f107 030a 	add.w	r3, r7, #10
 8008fd4:	f107 020a 	add.w	r2, r7, #10
 8008fd8:	8812      	ldrh	r2, [r2, #0]
 8008fda:	f082 0210 	eor.w	r2, r2, #16
 8008fde:	801a      	strh	r2, [r3, #0]
 8008fe0:	f107 030a 	add.w	r3, r7, #10
 8008fe4:	f107 020a 	add.w	r2, r7, #10
 8008fe8:	8812      	ldrh	r2, [r2, #0]
 8008fea:	f082 0220 	eor.w	r2, r2, #32
 8008fee:	801a      	strh	r2, [r3, #0]
 8008ff0:	1d3b      	adds	r3, r7, #4
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	463b      	mov	r3, r7
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	441a      	add	r2, r3
 8008ffe:	f107 030a 	add.w	r3, r7, #10
 8009002:	881b      	ldrh	r3, [r3, #0]
 8009004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800900c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009014:	b29b      	uxth	r3, r3
 8009016:	8013      	strh	r3, [r2, #0]
 8009018:	e3b5      	b.n	8009786 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800901a:	463b      	mov	r3, r7
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	7b1b      	ldrb	r3, [r3, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	f040 8090 	bne.w	8009146 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009026:	463b      	mov	r3, r7
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	699a      	ldr	r2, [r3, #24]
 800902c:	463b      	mov	r3, r7
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	429a      	cmp	r2, r3
 8009034:	d90e      	bls.n	8009054 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8009036:	463b      	mov	r3, r7
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009040:	463b      	mov	r3, r7
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	699a      	ldr	r2, [r3, #24]
 8009046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800904a:	1ad2      	subs	r2, r2, r3
 800904c:	463b      	mov	r3, r7
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	619a      	str	r2, [r3, #24]
 8009052:	e008      	b.n	8009066 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8009054:	463b      	mov	r3, r7
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800905e:	463b      	mov	r3, r7
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2200      	movs	r2, #0
 8009064:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009066:	1d3b      	adds	r3, r7, #4
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800906e:	1d3b      	adds	r3, r7, #4
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009076:	b29b      	uxth	r3, r3
 8009078:	461a      	mov	r2, r3
 800907a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800907e:	4413      	add	r3, r2
 8009080:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009084:	463b      	mov	r3, r7
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	011a      	lsls	r2, r3, #4
 800908c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009090:	4413      	add	r3, r2
 8009092:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009096:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800909a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d116      	bne.n	80090d0 <USB_EPStartXfer+0xf2c>
 80090a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090b4:	801a      	strh	r2, [r3, #0]
 80090b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090ba:	881b      	ldrh	r3, [r3, #0]
 80090bc:	b29b      	uxth	r3, r3
 80090be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090cc:	801a      	strh	r2, [r3, #0]
 80090ce:	e32c      	b.n	800972a <USB_EPStartXfer+0x1586>
 80090d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090d4:	2b3e      	cmp	r3, #62	; 0x3e
 80090d6:	d818      	bhi.n	800910a <USB_EPStartXfer+0xf66>
 80090d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090dc:	085b      	lsrs	r3, r3, #1
 80090de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80090e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d004      	beq.n	80090f8 <USB_EPStartXfer+0xf54>
 80090ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80090f2:	3301      	adds	r3, #1
 80090f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80090f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	029b      	lsls	r3, r3, #10
 8009100:	b29a      	uxth	r2, r3
 8009102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009106:	801a      	strh	r2, [r3, #0]
 8009108:	e30f      	b.n	800972a <USB_EPStartXfer+0x1586>
 800910a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800910e:	095b      	lsrs	r3, r3, #5
 8009110:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009118:	f003 031f 	and.w	r3, r3, #31
 800911c:	2b00      	cmp	r3, #0
 800911e:	d104      	bne.n	800912a <USB_EPStartXfer+0xf86>
 8009120:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009124:	3b01      	subs	r3, #1
 8009126:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800912a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800912e:	b29b      	uxth	r3, r3
 8009130:	029b      	lsls	r3, r3, #10
 8009132:	b29b      	uxth	r3, r3
 8009134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800913c:	b29a      	uxth	r2, r3
 800913e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009142:	801a      	strh	r2, [r3, #0]
 8009144:	e2f1      	b.n	800972a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009146:	463b      	mov	r3, r7
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	78db      	ldrb	r3, [r3, #3]
 800914c:	2b02      	cmp	r3, #2
 800914e:	f040 818f 	bne.w	8009470 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009152:	463b      	mov	r3, r7
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	785b      	ldrb	r3, [r3, #1]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d175      	bne.n	8009248 <USB_EPStartXfer+0x10a4>
 800915c:	1d3b      	adds	r3, r7, #4
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009164:	1d3b      	adds	r3, r7, #4
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800916c:	b29b      	uxth	r3, r3
 800916e:	461a      	mov	r2, r3
 8009170:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009174:	4413      	add	r3, r2
 8009176:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800917a:	463b      	mov	r3, r7
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	011a      	lsls	r2, r3, #4
 8009182:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009186:	4413      	add	r3, r2
 8009188:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800918c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009190:	463b      	mov	r3, r7
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d116      	bne.n	80091c8 <USB_EPStartXfer+0x1024>
 800919a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091ac:	801a      	strh	r2, [r3, #0]
 80091ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091b2:	881b      	ldrh	r3, [r3, #0]
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091be:	b29a      	uxth	r2, r3
 80091c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091c4:	801a      	strh	r2, [r3, #0]
 80091c6:	e065      	b.n	8009294 <USB_EPStartXfer+0x10f0>
 80091c8:	463b      	mov	r3, r7
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	2b3e      	cmp	r3, #62	; 0x3e
 80091d0:	d81a      	bhi.n	8009208 <USB_EPStartXfer+0x1064>
 80091d2:	463b      	mov	r3, r7
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	085b      	lsrs	r3, r3, #1
 80091da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80091de:	463b      	mov	r3, r7
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	f003 0301 	and.w	r3, r3, #1
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d004      	beq.n	80091f6 <USB_EPStartXfer+0x1052>
 80091ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091f0:	3301      	adds	r3, #1
 80091f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80091f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	029b      	lsls	r3, r3, #10
 80091fe:	b29a      	uxth	r2, r3
 8009200:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009204:	801a      	strh	r2, [r3, #0]
 8009206:	e045      	b.n	8009294 <USB_EPStartXfer+0x10f0>
 8009208:	463b      	mov	r3, r7
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	095b      	lsrs	r3, r3, #5
 8009210:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009214:	463b      	mov	r3, r7
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	f003 031f 	and.w	r3, r3, #31
 800921e:	2b00      	cmp	r3, #0
 8009220:	d104      	bne.n	800922c <USB_EPStartXfer+0x1088>
 8009222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009226:	3b01      	subs	r3, #1
 8009228:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800922c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009230:	b29b      	uxth	r3, r3
 8009232:	029b      	lsls	r3, r3, #10
 8009234:	b29b      	uxth	r3, r3
 8009236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800923a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800923e:	b29a      	uxth	r2, r3
 8009240:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009244:	801a      	strh	r2, [r3, #0]
 8009246:	e025      	b.n	8009294 <USB_EPStartXfer+0x10f0>
 8009248:	463b      	mov	r3, r7
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	785b      	ldrb	r3, [r3, #1]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d120      	bne.n	8009294 <USB_EPStartXfer+0x10f0>
 8009252:	1d3b      	adds	r3, r7, #4
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800925a:	1d3b      	adds	r3, r7, #4
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009262:	b29b      	uxth	r3, r3
 8009264:	461a      	mov	r2, r3
 8009266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800926a:	4413      	add	r3, r2
 800926c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009270:	463b      	mov	r3, r7
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	011a      	lsls	r2, r3, #4
 8009278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800927c:	4413      	add	r3, r2
 800927e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009282:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009286:	463b      	mov	r3, r7
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	b29a      	uxth	r2, r3
 800928e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009292:	801a      	strh	r2, [r3, #0]
 8009294:	1d3b      	adds	r3, r7, #4
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800929c:	463b      	mov	r3, r7
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	785b      	ldrb	r3, [r3, #1]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d175      	bne.n	8009392 <USB_EPStartXfer+0x11ee>
 80092a6:	1d3b      	adds	r3, r7, #4
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80092ae:	1d3b      	adds	r3, r7, #4
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	461a      	mov	r2, r3
 80092ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80092be:	4413      	add	r3, r2
 80092c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80092c4:	463b      	mov	r3, r7
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	011a      	lsls	r2, r3, #4
 80092cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80092d0:	4413      	add	r3, r2
 80092d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092da:	463b      	mov	r3, r7
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d116      	bne.n	8009312 <USB_EPStartXfer+0x116e>
 80092e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092f6:	801a      	strh	r2, [r3, #0]
 80092f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092fc:	881b      	ldrh	r3, [r3, #0]
 80092fe:	b29b      	uxth	r3, r3
 8009300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009308:	b29a      	uxth	r2, r3
 800930a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800930e:	801a      	strh	r2, [r3, #0]
 8009310:	e061      	b.n	80093d6 <USB_EPStartXfer+0x1232>
 8009312:	463b      	mov	r3, r7
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	2b3e      	cmp	r3, #62	; 0x3e
 800931a:	d81a      	bhi.n	8009352 <USB_EPStartXfer+0x11ae>
 800931c:	463b      	mov	r3, r7
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	085b      	lsrs	r3, r3, #1
 8009324:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009328:	463b      	mov	r3, r7
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	2b00      	cmp	r3, #0
 8009334:	d004      	beq.n	8009340 <USB_EPStartXfer+0x119c>
 8009336:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800933a:	3301      	adds	r3, #1
 800933c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009340:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009344:	b29b      	uxth	r3, r3
 8009346:	029b      	lsls	r3, r3, #10
 8009348:	b29a      	uxth	r2, r3
 800934a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800934e:	801a      	strh	r2, [r3, #0]
 8009350:	e041      	b.n	80093d6 <USB_EPStartXfer+0x1232>
 8009352:	463b      	mov	r3, r7
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	095b      	lsrs	r3, r3, #5
 800935a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800935e:	463b      	mov	r3, r7
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	f003 031f 	and.w	r3, r3, #31
 8009368:	2b00      	cmp	r3, #0
 800936a:	d104      	bne.n	8009376 <USB_EPStartXfer+0x11d2>
 800936c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009370:	3b01      	subs	r3, #1
 8009372:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009376:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800937a:	b29b      	uxth	r3, r3
 800937c:	029b      	lsls	r3, r3, #10
 800937e:	b29b      	uxth	r3, r3
 8009380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009388:	b29a      	uxth	r2, r3
 800938a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800938e:	801a      	strh	r2, [r3, #0]
 8009390:	e021      	b.n	80093d6 <USB_EPStartXfer+0x1232>
 8009392:	463b      	mov	r3, r7
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	785b      	ldrb	r3, [r3, #1]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d11c      	bne.n	80093d6 <USB_EPStartXfer+0x1232>
 800939c:	1d3b      	adds	r3, r7, #4
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	461a      	mov	r2, r3
 80093a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80093ac:	4413      	add	r3, r2
 80093ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093b2:	463b      	mov	r3, r7
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	011a      	lsls	r2, r3, #4
 80093ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80093be:	4413      	add	r3, r2
 80093c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093c8:	463b      	mov	r3, r7
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80093d4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80093d6:	463b      	mov	r3, r7
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	69db      	ldr	r3, [r3, #28]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 81a4 	beq.w	800972a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80093e2:	1d3b      	adds	r3, r7, #4
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	463b      	mov	r3, r7
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	881b      	ldrh	r3, [r3, #0]
 80093f2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80093f6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80093fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d005      	beq.n	800940e <USB_EPStartXfer+0x126a>
 8009402:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10d      	bne.n	800942a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800940e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009416:	2b00      	cmp	r3, #0
 8009418:	f040 8187 	bne.w	800972a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800941c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009424:	2b00      	cmp	r3, #0
 8009426:	f040 8180 	bne.w	800972a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800942a:	1d3b      	adds	r3, r7, #4
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	463b      	mov	r3, r7
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	881b      	ldrh	r3, [r3, #0]
 800943a:	b29b      	uxth	r3, r3
 800943c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009444:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009448:	1d3b      	adds	r3, r7, #4
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	463b      	mov	r3, r7
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	441a      	add	r2, r3
 8009456:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800945a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800945e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009466:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800946a:	b29b      	uxth	r3, r3
 800946c:	8013      	strh	r3, [r2, #0]
 800946e:	e15c      	b.n	800972a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009470:	463b      	mov	r3, r7
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	78db      	ldrb	r3, [r3, #3]
 8009476:	2b01      	cmp	r3, #1
 8009478:	f040 8155 	bne.w	8009726 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800947c:	463b      	mov	r3, r7
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	699a      	ldr	r2, [r3, #24]
 8009482:	463b      	mov	r3, r7
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	429a      	cmp	r2, r3
 800948a:	d90e      	bls.n	80094aa <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800948c:	463b      	mov	r3, r7
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8009496:	463b      	mov	r3, r7
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	699a      	ldr	r2, [r3, #24]
 800949c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094a0:	1ad2      	subs	r2, r2, r3
 80094a2:	463b      	mov	r3, r7
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	619a      	str	r2, [r3, #24]
 80094a8:	e008      	b.n	80094bc <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80094aa:	463b      	mov	r3, r7
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80094b4:	463b      	mov	r3, r7
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2200      	movs	r2, #0
 80094ba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80094bc:	463b      	mov	r3, r7
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	785b      	ldrb	r3, [r3, #1]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d16f      	bne.n	80095a6 <USB_EPStartXfer+0x1402>
 80094c6:	1d3b      	adds	r3, r7, #4
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80094ce:	1d3b      	adds	r3, r7, #4
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	461a      	mov	r2, r3
 80094da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80094de:	4413      	add	r3, r2
 80094e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80094e4:	463b      	mov	r3, r7
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	011a      	lsls	r2, r3, #4
 80094ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80094f0:	4413      	add	r3, r2
 80094f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80094f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80094fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d116      	bne.n	8009530 <USB_EPStartXfer+0x138c>
 8009502:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	b29b      	uxth	r3, r3
 800950a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800950e:	b29a      	uxth	r2, r3
 8009510:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009514:	801a      	strh	r2, [r3, #0]
 8009516:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	b29b      	uxth	r3, r3
 800951e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009526:	b29a      	uxth	r2, r3
 8009528:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800952c:	801a      	strh	r2, [r3, #0]
 800952e:	e05f      	b.n	80095f0 <USB_EPStartXfer+0x144c>
 8009530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009534:	2b3e      	cmp	r3, #62	; 0x3e
 8009536:	d818      	bhi.n	800956a <USB_EPStartXfer+0x13c6>
 8009538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800953c:	085b      	lsrs	r3, r3, #1
 800953e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	2b00      	cmp	r3, #0
 800954c:	d004      	beq.n	8009558 <USB_EPStartXfer+0x13b4>
 800954e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009552:	3301      	adds	r3, #1
 8009554:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800955c:	b29b      	uxth	r3, r3
 800955e:	029b      	lsls	r3, r3, #10
 8009560:	b29a      	uxth	r2, r3
 8009562:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009566:	801a      	strh	r2, [r3, #0]
 8009568:	e042      	b.n	80095f0 <USB_EPStartXfer+0x144c>
 800956a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800956e:	095b      	lsrs	r3, r3, #5
 8009570:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009578:	f003 031f 	and.w	r3, r3, #31
 800957c:	2b00      	cmp	r3, #0
 800957e:	d104      	bne.n	800958a <USB_EPStartXfer+0x13e6>
 8009580:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009584:	3b01      	subs	r3, #1
 8009586:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800958a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800958e:	b29b      	uxth	r3, r3
 8009590:	029b      	lsls	r3, r3, #10
 8009592:	b29b      	uxth	r3, r3
 8009594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800959c:	b29a      	uxth	r2, r3
 800959e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095a2:	801a      	strh	r2, [r3, #0]
 80095a4:	e024      	b.n	80095f0 <USB_EPStartXfer+0x144c>
 80095a6:	463b      	mov	r3, r7
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	785b      	ldrb	r3, [r3, #1]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d11f      	bne.n	80095f0 <USB_EPStartXfer+0x144c>
 80095b0:	1d3b      	adds	r3, r7, #4
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80095b8:	1d3b      	adds	r3, r7, #4
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	461a      	mov	r2, r3
 80095c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095c8:	4413      	add	r3, r2
 80095ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80095ce:	463b      	mov	r3, r7
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	011a      	lsls	r2, r3, #4
 80095d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095da:	4413      	add	r3, r2
 80095dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80095e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80095e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80095ee:	801a      	strh	r2, [r3, #0]
 80095f0:	1d3b      	adds	r3, r7, #4
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80095f8:	463b      	mov	r3, r7
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	785b      	ldrb	r3, [r3, #1]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d16f      	bne.n	80096e2 <USB_EPStartXfer+0x153e>
 8009602:	1d3b      	adds	r3, r7, #4
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800960a:	1d3b      	adds	r3, r7, #4
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009612:	b29b      	uxth	r3, r3
 8009614:	461a      	mov	r2, r3
 8009616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800961a:	4413      	add	r3, r2
 800961c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009620:	463b      	mov	r3, r7
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	011a      	lsls	r2, r3, #4
 8009628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800962c:	4413      	add	r3, r2
 800962e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009632:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800963a:	2b00      	cmp	r3, #0
 800963c:	d116      	bne.n	800966c <USB_EPStartXfer+0x14c8>
 800963e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009642:	881b      	ldrh	r3, [r3, #0]
 8009644:	b29b      	uxth	r3, r3
 8009646:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800964a:	b29a      	uxth	r2, r3
 800964c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009650:	801a      	strh	r2, [r3, #0]
 8009652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009656:	881b      	ldrh	r3, [r3, #0]
 8009658:	b29b      	uxth	r3, r3
 800965a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800965e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009662:	b29a      	uxth	r2, r3
 8009664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009668:	801a      	strh	r2, [r3, #0]
 800966a:	e05e      	b.n	800972a <USB_EPStartXfer+0x1586>
 800966c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009670:	2b3e      	cmp	r3, #62	; 0x3e
 8009672:	d818      	bhi.n	80096a6 <USB_EPStartXfer+0x1502>
 8009674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009678:	085b      	lsrs	r3, r3, #1
 800967a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800967e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009682:	f003 0301 	and.w	r3, r3, #1
 8009686:	2b00      	cmp	r3, #0
 8009688:	d004      	beq.n	8009694 <USB_EPStartXfer+0x14f0>
 800968a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800968e:	3301      	adds	r3, #1
 8009690:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009694:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009698:	b29b      	uxth	r3, r3
 800969a:	029b      	lsls	r3, r3, #10
 800969c:	b29a      	uxth	r2, r3
 800969e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096a2:	801a      	strh	r2, [r3, #0]
 80096a4:	e041      	b.n	800972a <USB_EPStartXfer+0x1586>
 80096a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096aa:	095b      	lsrs	r3, r3, #5
 80096ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80096b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096b4:	f003 031f 	and.w	r3, r3, #31
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d104      	bne.n	80096c6 <USB_EPStartXfer+0x1522>
 80096bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80096c0:	3b01      	subs	r3, #1
 80096c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80096c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	029b      	lsls	r3, r3, #10
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096d8:	b29a      	uxth	r2, r3
 80096da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096de:	801a      	strh	r2, [r3, #0]
 80096e0:	e023      	b.n	800972a <USB_EPStartXfer+0x1586>
 80096e2:	463b      	mov	r3, r7
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	785b      	ldrb	r3, [r3, #1]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d11e      	bne.n	800972a <USB_EPStartXfer+0x1586>
 80096ec:	1d3b      	adds	r3, r7, #4
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	461a      	mov	r2, r3
 80096f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096fc:	4413      	add	r3, r2
 80096fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009702:	463b      	mov	r3, r7
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	011a      	lsls	r2, r3, #4
 800970a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800970e:	4413      	add	r3, r2
 8009710:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800971c:	b29a      	uxth	r2, r3
 800971e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009722:	801a      	strh	r2, [r3, #0]
 8009724:	e001      	b.n	800972a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e02e      	b.n	8009788 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800972a:	1d3b      	adds	r3, r7, #4
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	463b      	mov	r3, r7
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4413      	add	r3, r2
 8009738:	881b      	ldrh	r3, [r3, #0]
 800973a:	b29b      	uxth	r3, r3
 800973c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009744:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009748:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800974c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009750:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009754:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009758:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800975c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009760:	1d3b      	adds	r3, r7, #4
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	463b      	mov	r3, r7
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	441a      	add	r2, r3
 800976e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800977a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800977e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009782:	b29b      	uxth	r3, r3
 8009784:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009792:	b480      	push	{r7}
 8009794:	b085      	sub	sp, #20
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	785b      	ldrb	r3, [r3, #1]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d020      	beq.n	80097e6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	881b      	ldrh	r3, [r3, #0]
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097ba:	81bb      	strh	r3, [r7, #12]
 80097bc:	89bb      	ldrh	r3, [r7, #12]
 80097be:	f083 0310 	eor.w	r3, r3, #16
 80097c2:	81bb      	strh	r3, [r7, #12]
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	441a      	add	r2, r3
 80097ce:	89bb      	ldrh	r3, [r7, #12]
 80097d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	8013      	strh	r3, [r2, #0]
 80097e4:	e01f      	b.n	8009826 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	881b      	ldrh	r3, [r3, #0]
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097fc:	81fb      	strh	r3, [r7, #14]
 80097fe:	89fb      	ldrh	r3, [r7, #14]
 8009800:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009804:	81fb      	strh	r3, [r7, #14]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	441a      	add	r2, r3
 8009810:	89fb      	ldrh	r3, [r7, #14]
 8009812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800981a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800981e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009822:	b29b      	uxth	r3, r3
 8009824:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	bc80      	pop	{r7}
 8009830:	4770      	bx	lr

08009832 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009832:	b480      	push	{r7}
 8009834:	b087      	sub	sp, #28
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	7b1b      	ldrb	r3, [r3, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	f040 809d 	bne.w	8009980 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	785b      	ldrb	r3, [r3, #1]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d04c      	beq.n	80098e8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4413      	add	r3, r2
 8009858:	881b      	ldrh	r3, [r3, #0]
 800985a:	823b      	strh	r3, [r7, #16]
 800985c:	8a3b      	ldrh	r3, [r7, #16]
 800985e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009862:	2b00      	cmp	r3, #0
 8009864:	d01b      	beq.n	800989e <USB_EPClearStall+0x6c>
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4413      	add	r3, r2
 8009870:	881b      	ldrh	r3, [r3, #0]
 8009872:	b29b      	uxth	r3, r3
 8009874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800987c:	81fb      	strh	r3, [r7, #14]
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	441a      	add	r2, r3
 8009888:	89fb      	ldrh	r3, [r7, #14]
 800988a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800988e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009896:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800989a:	b29b      	uxth	r3, r3
 800989c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	78db      	ldrb	r3, [r3, #3]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d06c      	beq.n	8009980 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	881b      	ldrh	r3, [r3, #0]
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098bc:	81bb      	strh	r3, [r7, #12]
 80098be:	89bb      	ldrh	r3, [r7, #12]
 80098c0:	f083 0320 	eor.w	r3, r3, #32
 80098c4:	81bb      	strh	r3, [r7, #12]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	441a      	add	r2, r3
 80098d0:	89bb      	ldrh	r3, [r7, #12]
 80098d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	8013      	strh	r3, [r2, #0]
 80098e6:	e04b      	b.n	8009980 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	4413      	add	r3, r2
 80098f2:	881b      	ldrh	r3, [r3, #0]
 80098f4:	82fb      	strh	r3, [r7, #22]
 80098f6:	8afb      	ldrh	r3, [r7, #22]
 80098f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d01b      	beq.n	8009938 <USB_EPClearStall+0x106>
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	881b      	ldrh	r3, [r3, #0]
 800990c:	b29b      	uxth	r3, r3
 800990e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009916:	82bb      	strh	r3, [r7, #20]
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	441a      	add	r2, r3
 8009922:	8abb      	ldrh	r3, [r7, #20]
 8009924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800992c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009934:	b29b      	uxth	r3, r3
 8009936:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	b29b      	uxth	r3, r3
 8009946:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800994a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800994e:	827b      	strh	r3, [r7, #18]
 8009950:	8a7b      	ldrh	r3, [r7, #18]
 8009952:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009956:	827b      	strh	r3, [r7, #18]
 8009958:	8a7b      	ldrh	r3, [r7, #18]
 800995a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800995e:	827b      	strh	r3, [r7, #18]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	441a      	add	r2, r3
 800996a:	8a7b      	ldrh	r3, [r7, #18]
 800996c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800997c:	b29b      	uxth	r3, r3
 800997e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	371c      	adds	r7, #28
 8009986:	46bd      	mov	sp, r7
 8009988:	bc80      	pop	{r7}
 800998a:	4770      	bx	lr

0800998c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	460b      	mov	r3, r1
 8009996:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009998:	78fb      	ldrb	r3, [r7, #3]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d103      	bne.n	80099a6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2280      	movs	r2, #128	; 0x80
 80099a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bc80      	pop	{r7}
 80099b0:	4770      	bx	lr

080099b2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b083      	sub	sp, #12
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bc80      	pop	{r7}
 80099c4:	4770      	bx	lr

080099c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80099c6:	b480      	push	{r7}
 80099c8:	b083      	sub	sp, #12
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bc80      	pop	{r7}
 80099d8:	4770      	bx	lr

080099da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80099da:	b480      	push	{r7}
 80099dc:	b085      	sub	sp, #20
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80099ec:	68fb      	ldr	r3, [r7, #12]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3714      	adds	r7, #20
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bc80      	pop	{r7}
 80099f6:	4770      	bx	lr

080099f8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bc80      	pop	{r7}
 8009a0c:	4770      	bx	lr

08009a0e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009a0e:	b480      	push	{r7}
 8009a10:	b08d      	sub	sp, #52	; 0x34
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	60f8      	str	r0, [r7, #12]
 8009a16:	60b9      	str	r1, [r7, #8]
 8009a18:	4611      	mov	r1, r2
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	80fb      	strh	r3, [r7, #6]
 8009a20:	4613      	mov	r3, r2
 8009a22:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009a24:	88bb      	ldrh	r3, [r7, #4]
 8009a26:	3301      	adds	r3, #1
 8009a28:	085b      	lsrs	r3, r3, #1
 8009a2a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009a34:	88fb      	ldrh	r3, [r7, #6]
 8009a36:	005a      	lsls	r2, r3, #1
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a40:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a46:	e01e      	b.n	8009a86 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a50:	3301      	adds	r3, #1
 8009a52:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	021b      	lsls	r3, r3, #8
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	461a      	mov	r2, r3
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a70:	3302      	adds	r3, #2
 8009a72:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	3302      	adds	r3, #2
 8009a78:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a82:	3b01      	subs	r3, #1
 8009a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1dd      	bne.n	8009a48 <USB_WritePMA+0x3a>
  }
}
 8009a8c:	bf00      	nop
 8009a8e:	bf00      	nop
 8009a90:	3734      	adds	r7, #52	; 0x34
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bc80      	pop	{r7}
 8009a96:	4770      	bx	lr

08009a98 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b08b      	sub	sp, #44	; 0x2c
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	4611      	mov	r1, r2
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	80fb      	strh	r3, [r7, #6]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009aae:	88bb      	ldrh	r3, [r7, #4]
 8009ab0:	085b      	lsrs	r3, r3, #1
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009abe:	88fb      	ldrh	r3, [r7, #6]
 8009ac0:	005a      	lsls	r2, r3, #1
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009aca:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	627b      	str	r3, [r7, #36]	; 0x24
 8009ad0:	e01b      	b.n	8009b0a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009ad2:	6a3b      	ldr	r3, [r7, #32]
 8009ad4:	881b      	ldrh	r3, [r3, #0]
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009ada:	6a3b      	ldr	r3, [r7, #32]
 8009adc:	3302      	adds	r3, #2
 8009ade:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	b2da      	uxtb	r2, r3
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	3301      	adds	r3, #1
 8009aec:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	0a1b      	lsrs	r3, r3, #8
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	3301      	adds	r3, #1
 8009afc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	3302      	adds	r3, #2
 8009b02:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b06:	3b01      	subs	r3, #1
 8009b08:	627b      	str	r3, [r7, #36]	; 0x24
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1e0      	bne.n	8009ad2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009b10:	88bb      	ldrh	r3, [r7, #4]
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d007      	beq.n	8009b2c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	881b      	ldrh	r3, [r3, #0]
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	b2da      	uxtb	r2, r3
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	701a      	strb	r2, [r3, #0]
  }
}
 8009b2c:	bf00      	nop
 8009b2e:	372c      	adds	r7, #44	; 0x2c
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bc80      	pop	{r7}
 8009b34:	4770      	bx	lr

08009b36 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b084      	sub	sp, #16
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
 8009b3e:	460b      	mov	r3, r1
 8009b40:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009b42:	2300      	movs	r3, #0
 8009b44:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	7c1b      	ldrb	r3, [r3, #16]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d115      	bne.n	8009b7a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009b4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b52:	2202      	movs	r2, #2
 8009b54:	2181      	movs	r1, #129	; 0x81
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f005 f80f 	bl	800eb7a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b66:	2202      	movs	r2, #2
 8009b68:	2101      	movs	r1, #1
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f005 f805 	bl	800eb7a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009b78:	e012      	b.n	8009ba0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009b7a:	2340      	movs	r3, #64	; 0x40
 8009b7c:	2202      	movs	r2, #2
 8009b7e:	2181      	movs	r1, #129	; 0x81
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f004 fffa 	bl	800eb7a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009b8c:	2340      	movs	r3, #64	; 0x40
 8009b8e:	2202      	movs	r2, #2
 8009b90:	2101      	movs	r1, #1
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f004 fff1 	bl	800eb7a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009ba0:	2308      	movs	r3, #8
 8009ba2:	2203      	movs	r2, #3
 8009ba4:	2182      	movs	r1, #130	; 0x82
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f004 ffe7 	bl	800eb7a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009bb2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009bb6:	f005 f907 	bl	800edc8 <USBD_static_malloc>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d102      	bne.n	8009bd2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	73fb      	strb	r3, [r7, #15]
 8009bd0:	e026      	b.n	8009c20 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bd8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	7c1b      	ldrb	r3, [r3, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d109      	bne.n	8009c10 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c06:	2101      	movs	r1, #1
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f005 f8a7 	bl	800ed5c <USBD_LL_PrepareReceive>
 8009c0e:	e007      	b.n	8009c20 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c16:	2340      	movs	r3, #64	; 0x40
 8009c18:	2101      	movs	r1, #1
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f005 f89e 	bl	800ed5c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b084      	sub	sp, #16
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	460b      	mov	r3, r1
 8009c34:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009c36:	2300      	movs	r3, #0
 8009c38:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009c3a:	2181      	movs	r1, #129	; 0x81
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f004 ffc2 	bl	800ebc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009c48:	2101      	movs	r1, #1
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f004 ffbb 	bl	800ebc6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009c58:	2182      	movs	r1, #130	; 0x82
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f004 ffb3 	bl	800ebc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00e      	beq.n	8009c8e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c80:	4618      	mov	r0, r3
 8009c82:	f005 f8ad 	bl	800ede0 <USBD_static_free>
    pdev->pClassData = NULL;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ca8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009caa:	2300      	movs	r3, #0
 8009cac:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d039      	beq.n	8009d36 <USBD_CDC_Setup+0x9e>
 8009cc2:	2b20      	cmp	r3, #32
 8009cc4:	d17f      	bne.n	8009dc6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	88db      	ldrh	r3, [r3, #6]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d029      	beq.n	8009d22 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	b25b      	sxtb	r3, r3
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	da11      	bge.n	8009cfc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	683a      	ldr	r2, [r7, #0]
 8009ce2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009ce4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	88d2      	ldrh	r2, [r2, #6]
 8009cea:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009cec:	6939      	ldr	r1, [r7, #16]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	88db      	ldrh	r3, [r3, #6]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f001 fa0a 	bl	800b10e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009cfa:	e06b      	b.n	8009dd4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	785a      	ldrb	r2, [r3, #1]
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	88db      	ldrh	r3, [r3, #6]
 8009d0a:	b2da      	uxtb	r2, r3
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009d12:	6939      	ldr	r1, [r7, #16]
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	88db      	ldrh	r3, [r3, #6]
 8009d18:	461a      	mov	r2, r3
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f001 fa25 	bl	800b16a <USBD_CtlPrepareRx>
      break;
 8009d20:	e058      	b.n	8009dd4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	7850      	ldrb	r0, [r2, #1]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	6839      	ldr	r1, [r7, #0]
 8009d32:	4798      	blx	r3
      break;
 8009d34:	e04e      	b.n	8009dd4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	785b      	ldrb	r3, [r3, #1]
 8009d3a:	2b0b      	cmp	r3, #11
 8009d3c:	d02e      	beq.n	8009d9c <USBD_CDC_Setup+0x104>
 8009d3e:	2b0b      	cmp	r3, #11
 8009d40:	dc38      	bgt.n	8009db4 <USBD_CDC_Setup+0x11c>
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d002      	beq.n	8009d4c <USBD_CDC_Setup+0xb4>
 8009d46:	2b0a      	cmp	r3, #10
 8009d48:	d014      	beq.n	8009d74 <USBD_CDC_Setup+0xdc>
 8009d4a:	e033      	b.n	8009db4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d52:	2b03      	cmp	r3, #3
 8009d54:	d107      	bne.n	8009d66 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009d56:	f107 030c 	add.w	r3, r7, #12
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f001 f9d5 	bl	800b10e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d64:	e02e      	b.n	8009dc4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f001 f966 	bl	800b03a <USBD_CtlError>
            ret = USBD_FAIL;
 8009d6e:	2302      	movs	r3, #2
 8009d70:	75fb      	strb	r3, [r7, #23]
          break;
 8009d72:	e027      	b.n	8009dc4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d7a:	2b03      	cmp	r3, #3
 8009d7c:	d107      	bne.n	8009d8e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009d7e:	f107 030f 	add.w	r3, r7, #15
 8009d82:	2201      	movs	r2, #1
 8009d84:	4619      	mov	r1, r3
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f001 f9c1 	bl	800b10e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d8c:	e01a      	b.n	8009dc4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f001 f952 	bl	800b03a <USBD_CtlError>
            ret = USBD_FAIL;
 8009d96:	2302      	movs	r3, #2
 8009d98:	75fb      	strb	r3, [r7, #23]
          break;
 8009d9a:	e013      	b.n	8009dc4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	d00d      	beq.n	8009dc2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009da6:	6839      	ldr	r1, [r7, #0]
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f001 f946 	bl	800b03a <USBD_CtlError>
            ret = USBD_FAIL;
 8009dae:	2302      	movs	r3, #2
 8009db0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009db2:	e006      	b.n	8009dc2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009db4:	6839      	ldr	r1, [r7, #0]
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f001 f93f 	bl	800b03a <USBD_CtlError>
          ret = USBD_FAIL;
 8009dbc:	2302      	movs	r3, #2
 8009dbe:	75fb      	strb	r3, [r7, #23]
          break;
 8009dc0:	e000      	b.n	8009dc4 <USBD_CDC_Setup+0x12c>
          break;
 8009dc2:	bf00      	nop
      }
      break;
 8009dc4:	e006      	b.n	8009dd4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009dc6:	6839      	ldr	r1, [r7, #0]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f001 f936 	bl	800b03a <USBD_CtlError>
      ret = USBD_FAIL;
 8009dce:	2302      	movs	r3, #2
 8009dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8009dd2:	bf00      	nop
  }

  return ret;
 8009dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3718      	adds	r7, #24
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b084      	sub	sp, #16
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	460b      	mov	r3, r1
 8009de8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009df0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009df8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d03a      	beq.n	8009e7a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009e04:	78fa      	ldrb	r2, [r7, #3]
 8009e06:	6879      	ldr	r1, [r7, #4]
 8009e08:	4613      	mov	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4413      	add	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	440b      	add	r3, r1
 8009e12:	331c      	adds	r3, #28
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d029      	beq.n	8009e6e <USBD_CDC_DataIn+0x90>
 8009e1a:	78fa      	ldrb	r2, [r7, #3]
 8009e1c:	6879      	ldr	r1, [r7, #4]
 8009e1e:	4613      	mov	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4413      	add	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	440b      	add	r3, r1
 8009e28:	331c      	adds	r3, #28
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	78f9      	ldrb	r1, [r7, #3]
 8009e2e:	68b8      	ldr	r0, [r7, #8]
 8009e30:	460b      	mov	r3, r1
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	440b      	add	r3, r1
 8009e36:	00db      	lsls	r3, r3, #3
 8009e38:	4403      	add	r3, r0
 8009e3a:	3338      	adds	r3, #56	; 0x38
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	fbb2 f1f3 	udiv	r1, r2, r3
 8009e42:	fb03 f301 	mul.w	r3, r3, r1
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d110      	bne.n	8009e6e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009e4c:	78fa      	ldrb	r2, [r7, #3]
 8009e4e:	6879      	ldr	r1, [r7, #4]
 8009e50:	4613      	mov	r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	4413      	add	r3, r2
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	440b      	add	r3, r1
 8009e5a:	331c      	adds	r3, #28
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009e60:	78f9      	ldrb	r1, [r7, #3]
 8009e62:	2300      	movs	r3, #0
 8009e64:	2200      	movs	r2, #0
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f004 ff55 	bl	800ed16 <USBD_LL_Transmit>
 8009e6c:	e003      	b.n	8009e76 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009e76:	2300      	movs	r3, #0
 8009e78:	e000      	b.n	8009e7c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009e7a:	2302      	movs	r3, #2
  }
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e96:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009e98:	78fb      	ldrb	r3, [r7, #3]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f004 ff80 	bl	800eda2 <USBD_LL_GetRxDataSize>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00d      	beq.n	8009ed0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009eba:	68db      	ldr	r3, [r3, #12]
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009ec8:	4611      	mov	r1, r2
 8009eca:	4798      	blx	r3

    return USBD_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	e000      	b.n	8009ed2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009ed0:	2302      	movs	r3, #2
  }
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b084      	sub	sp, #16
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ee8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d015      	beq.n	8009f20 <USBD_CDC_EP0_RxReady+0x46>
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009efa:	2bff      	cmp	r3, #255	; 0xff
 8009efc:	d010      	beq.n	8009f20 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009f0c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009f14:	b292      	uxth	r2, r2
 8009f16:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	22ff      	movs	r2, #255	; 0xff
 8009f1c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
	...

08009f2c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2243      	movs	r2, #67	; 0x43
 8009f38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009f3a:	4b03      	ldr	r3, [pc, #12]	; (8009f48 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bc80      	pop	{r7}
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	200000a4 	.word	0x200000a4

08009f4c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2243      	movs	r2, #67	; 0x43
 8009f58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009f5a:	4b03      	ldr	r3, [pc, #12]	; (8009f68 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bc80      	pop	{r7}
 8009f64:	4770      	bx	lr
 8009f66:	bf00      	nop
 8009f68:	20000060 	.word	0x20000060

08009f6c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2243      	movs	r2, #67	; 0x43
 8009f78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009f7a:	4b03      	ldr	r3, [pc, #12]	; (8009f88 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bc80      	pop	{r7}
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	200000e8 	.word	0x200000e8

08009f8c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	220a      	movs	r2, #10
 8009f98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009f9a:	4b03      	ldr	r3, [pc, #12]	; (8009fa8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bc80      	pop	{r7}
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	2000001c 	.word	0x2000001c

08009fac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009fb6:	2302      	movs	r3, #2
 8009fb8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d005      	beq.n	8009fcc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bc80      	pop	{r7}
 8009fd6:	4770      	bx	lr

08009fd8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b087      	sub	sp, #28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009ff6:	88fa      	ldrh	r2, [r7, #6]
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	371c      	adds	r7, #28
 800a004:	46bd      	mov	sp, r7
 800a006:	bc80      	pop	{r7}
 800a008:	4770      	bx	lr

0800a00a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b085      	sub	sp, #20
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a01a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	683a      	ldr	r2, [r7, #0]
 800a020:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3714      	adds	r7, #20
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bc80      	pop	{r7}
 800a02e:	4770      	bx	lr

0800a030 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a03e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a046:	2b00      	cmp	r3, #0
 800a048:	d01c      	beq.n	800a084 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a050:	2b00      	cmp	r3, #0
 800a052:	d115      	bne.n	800a080 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2201      	movs	r2, #1
 800a058:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a072:	b29b      	uxth	r3, r3
 800a074:	2181      	movs	r1, #129	; 0x81
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f004 fe4d 	bl	800ed16 <USBD_LL_Transmit>

      return USBD_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	e002      	b.n	800a086 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a080:	2301      	movs	r3, #1
 800a082:	e000      	b.n	800a086 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a084:	2302      	movs	r3, #2
  }
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a09c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d017      	beq.n	800a0d8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	7c1b      	ldrb	r3, [r3, #16]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d109      	bne.n	800a0c4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f004 fe4d 	bl	800ed5c <USBD_LL_PrepareReceive>
 800a0c2:	e007      	b.n	800a0d4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0ca:	2340      	movs	r3, #64	; 0x40
 800a0cc:	2101      	movs	r1, #1
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f004 fe44 	bl	800ed5c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	e000      	b.n	800a0da <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a0d8:	2302      	movs	r3, #2
  }
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b084      	sub	sp, #16
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	60f8      	str	r0, [r7, #12]
 800a0ea:	60b9      	str	r1, [r7, #8]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a0f6:	2302      	movs	r3, #2
 800a0f8:	e01a      	b.n	800a130 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a100:	2b00      	cmp	r3, #0
 800a102:	d003      	beq.n	800a10c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	79fa      	ldrb	r2, [r7, #7]
 800a126:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f004 fcb1 	bl	800ea90 <USBD_LL_Init>

  return USBD_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d006      	beq.n	800a15a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	683a      	ldr	r2, [r7, #0]
 800a150:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	73fb      	strb	r3, [r7, #15]
 800a158:	e001      	b.n	800a15e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a15a:	2302      	movs	r3, #2
 800a15c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3714      	adds	r7, #20
 800a164:	46bd      	mov	sp, r7
 800a166:	bc80      	pop	{r7}
 800a168:	4770      	bx	lr

0800a16a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b082      	sub	sp, #8
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f004 fce6 	bl	800eb44 <USBD_LL_Start>

  return USBD_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3708      	adds	r7, #8
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a182:	b480      	push	{r7}
 800a184:	b083      	sub	sp, #12
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	bc80      	pop	{r7}
 800a194:	4770      	bx	lr

0800a196 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b084      	sub	sp, #16
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a1a2:	2302      	movs	r3, #2
 800a1a4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00c      	beq.n	800a1ca <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	78fa      	ldrb	r2, [r7, #3]
 800a1ba:	4611      	mov	r1, r2
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	4798      	blx	r3
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	460b      	mov	r3, r1
 800a1de:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	78fa      	ldrb	r2, [r7, #3]
 800a1ea:	4611      	mov	r1, r2
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	4798      	blx	r3

  return USBD_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b082      	sub	sp, #8
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
 800a202:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a20a:	6839      	ldr	r1, [r7, #0]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 fed8 	bl	800afc2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2201      	movs	r2, #1
 800a216:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a220:	461a      	mov	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a22e:	f003 031f 	and.w	r3, r3, #31
 800a232:	2b02      	cmp	r3, #2
 800a234:	d016      	beq.n	800a264 <USBD_LL_SetupStage+0x6a>
 800a236:	2b02      	cmp	r3, #2
 800a238:	d81c      	bhi.n	800a274 <USBD_LL_SetupStage+0x7a>
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d002      	beq.n	800a244 <USBD_LL_SetupStage+0x4a>
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d008      	beq.n	800a254 <USBD_LL_SetupStage+0x5a>
 800a242:	e017      	b.n	800a274 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a24a:	4619      	mov	r1, r3
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 f9cb 	bl	800a5e8 <USBD_StdDevReq>
      break;
 800a252:	e01a      	b.n	800a28a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 fa2d 	bl	800a6bc <USBD_StdItfReq>
      break;
 800a262:	e012      	b.n	800a28a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a26a:	4619      	mov	r1, r3
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 fa6d 	bl	800a74c <USBD_StdEPReq>
      break;
 800a272:	e00a      	b.n	800a28a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a27a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	4619      	mov	r1, r3
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f004 fcbe 	bl	800ec04 <USBD_LL_StallEP>
      break;
 800a288:	bf00      	nop
  }

  return USBD_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3708      	adds	r7, #8
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	460b      	mov	r3, r1
 800a29e:	607a      	str	r2, [r7, #4]
 800a2a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a2a2:	7afb      	ldrb	r3, [r7, #11]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d14b      	bne.n	800a340 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a2ae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2b6:	2b03      	cmp	r3, #3
 800a2b8:	d134      	bne.n	800a324 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	68da      	ldr	r2, [r3, #12]
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d919      	bls.n	800a2fa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	68da      	ldr	r2, [r3, #12]
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	1ad2      	subs	r2, r2, r3
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	68da      	ldr	r2, [r3, #12]
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d203      	bcs.n	800a2e8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	e002      	b.n	800a2ee <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	6879      	ldr	r1, [r7, #4]
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 ff57 	bl	800b1a6 <USBD_CtlContinueRx>
 800a2f8:	e038      	b.n	800a36c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00a      	beq.n	800a31c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a30c:	2b03      	cmp	r3, #3
 800a30e:	d105      	bne.n	800a31c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f000 ff54 	bl	800b1ca <USBD_CtlSendStatus>
 800a322:	e023      	b.n	800a36c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a32a:	2b05      	cmp	r3, #5
 800a32c:	d11e      	bne.n	800a36c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2200      	movs	r2, #0
 800a332:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a336:	2100      	movs	r1, #0
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f004 fc63 	bl	800ec04 <USBD_LL_StallEP>
 800a33e:	e015      	b.n	800a36c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00d      	beq.n	800a368 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a352:	2b03      	cmp	r3, #3
 800a354:	d108      	bne.n	800a368 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	7afa      	ldrb	r2, [r7, #11]
 800a360:	4611      	mov	r1, r2
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	4798      	blx	r3
 800a366:	e001      	b.n	800a36c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a368:	2302      	movs	r3, #2
 800a36a:	e000      	b.n	800a36e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b086      	sub	sp, #24
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	60f8      	str	r0, [r7, #12]
 800a37e:	460b      	mov	r3, r1
 800a380:	607a      	str	r2, [r7, #4]
 800a382:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a384:	7afb      	ldrb	r3, [r7, #11]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d17f      	bne.n	800a48a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3314      	adds	r3, #20
 800a38e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a396:	2b02      	cmp	r3, #2
 800a398:	d15c      	bne.n	800a454 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	68da      	ldr	r2, [r3, #12]
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	691b      	ldr	r3, [r3, #16]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d915      	bls.n	800a3d2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	68da      	ldr	r2, [r3, #12]
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	1ad2      	subs	r2, r2, r3
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	6879      	ldr	r1, [r7, #4]
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f000 fec1 	bl	800b146 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f004 fcc6 	bl	800ed5c <USBD_LL_PrepareReceive>
 800a3d0:	e04e      	b.n	800a470 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	6912      	ldr	r2, [r2, #16]
 800a3da:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3de:	fb02 f201 	mul.w	r2, r2, r1
 800a3e2:	1a9b      	subs	r3, r3, r2
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d11c      	bne.n	800a422 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	689a      	ldr	r2, [r3, #8]
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d316      	bcc.n	800a422 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	689a      	ldr	r2, [r3, #8]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d20f      	bcs.n	800a422 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a402:	2200      	movs	r2, #0
 800a404:	2100      	movs	r1, #0
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f000 fe9d 	bl	800b146 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a414:	2300      	movs	r3, #0
 800a416:	2200      	movs	r2, #0
 800a418:	2100      	movs	r1, #0
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f004 fc9e 	bl	800ed5c <USBD_LL_PrepareReceive>
 800a420:	e026      	b.n	800a470 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00a      	beq.n	800a444 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a434:	2b03      	cmp	r3, #3
 800a436:	d105      	bne.n	800a444 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	68f8      	ldr	r0, [r7, #12]
 800a442:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a444:	2180      	movs	r1, #128	; 0x80
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f004 fbdc 	bl	800ec04 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f000 fecf 	bl	800b1f0 <USBD_CtlReceiveStatus>
 800a452:	e00d      	b.n	800a470 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a45a:	2b04      	cmp	r3, #4
 800a45c:	d004      	beq.n	800a468 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a464:	2b00      	cmp	r3, #0
 800a466:	d103      	bne.n	800a470 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a468:	2180      	movs	r1, #128	; 0x80
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f004 fbca 	bl	800ec04 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a476:	2b01      	cmp	r3, #1
 800a478:	d11d      	bne.n	800a4b6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f7ff fe81 	bl	800a182 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a488:	e015      	b.n	800a4b6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a490:	695b      	ldr	r3, [r3, #20]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00d      	beq.n	800a4b2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a49c:	2b03      	cmp	r3, #3
 800a49e:	d108      	bne.n	800a4b2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4a6:	695b      	ldr	r3, [r3, #20]
 800a4a8:	7afa      	ldrb	r2, [r7, #11]
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	4798      	blx	r3
 800a4b0:	e001      	b.n	800a4b6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	e000      	b.n	800a4b8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3718      	adds	r7, #24
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4c8:	2340      	movs	r3, #64	; 0x40
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f004 fb53 	bl	800eb7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2240      	movs	r2, #64	; 0x40
 800a4e0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4e4:	2340      	movs	r3, #64	; 0x40
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	2180      	movs	r1, #128	; 0x80
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f004 fb45 	bl	800eb7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2240      	movs	r2, #64	; 0x40
 800a4fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a520:	2b00      	cmp	r3, #0
 800a522:	d009      	beq.n	800a538 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	6852      	ldr	r2, [r2, #4]
 800a530:	b2d2      	uxtb	r2, r2
 800a532:	4611      	mov	r1, r2
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	4798      	blx	r3
  }

  return USBD_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a542:	b480      	push	{r7}
 800a544:	b083      	sub	sp, #12
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	460b      	mov	r3, r1
 800a54c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	78fa      	ldrb	r2, [r7, #3]
 800a552:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	370c      	adds	r7, #12
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bc80      	pop	{r7}
 800a55e:	4770      	bx	lr

0800a560 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2204      	movs	r2, #4
 800a578:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	370c      	adds	r7, #12
 800a582:	46bd      	mov	sp, r7
 800a584:	bc80      	pop	{r7}
 800a586:	4770      	bx	lr

0800a588 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a596:	2b04      	cmp	r3, #4
 800a598:	d105      	bne.n	800a5a6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bc80      	pop	{r7}
 800a5b0:	4770      	bx	lr

0800a5b2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b082      	sub	sp, #8
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5c0:	2b03      	cmp	r3, #3
 800a5c2:	d10b      	bne.n	800a5dc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5ca:	69db      	ldr	r3, [r3, #28]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d005      	beq.n	800a5dc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5d6:	69db      	ldr	r3, [r3, #28]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
	...

0800a5e8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5fe:	2b40      	cmp	r3, #64	; 0x40
 800a600:	d005      	beq.n	800a60e <USBD_StdDevReq+0x26>
 800a602:	2b40      	cmp	r3, #64	; 0x40
 800a604:	d84f      	bhi.n	800a6a6 <USBD_StdDevReq+0xbe>
 800a606:	2b00      	cmp	r3, #0
 800a608:	d009      	beq.n	800a61e <USBD_StdDevReq+0x36>
 800a60a:	2b20      	cmp	r3, #32
 800a60c:	d14b      	bne.n	800a6a6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	4798      	blx	r3
      break;
 800a61c:	e048      	b.n	800a6b0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	785b      	ldrb	r3, [r3, #1]
 800a622:	2b09      	cmp	r3, #9
 800a624:	d839      	bhi.n	800a69a <USBD_StdDevReq+0xb2>
 800a626:	a201      	add	r2, pc, #4	; (adr r2, 800a62c <USBD_StdDevReq+0x44>)
 800a628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a62c:	0800a67d 	.word	0x0800a67d
 800a630:	0800a691 	.word	0x0800a691
 800a634:	0800a69b 	.word	0x0800a69b
 800a638:	0800a687 	.word	0x0800a687
 800a63c:	0800a69b 	.word	0x0800a69b
 800a640:	0800a65f 	.word	0x0800a65f
 800a644:	0800a655 	.word	0x0800a655
 800a648:	0800a69b 	.word	0x0800a69b
 800a64c:	0800a673 	.word	0x0800a673
 800a650:	0800a669 	.word	0x0800a669
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a654:	6839      	ldr	r1, [r7, #0]
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 f9dc 	bl	800aa14 <USBD_GetDescriptor>
          break;
 800a65c:	e022      	b.n	800a6a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a65e:	6839      	ldr	r1, [r7, #0]
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 fb3f 	bl	800ace4 <USBD_SetAddress>
          break;
 800a666:	e01d      	b.n	800a6a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a668:	6839      	ldr	r1, [r7, #0]
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fb7e 	bl	800ad6c <USBD_SetConfig>
          break;
 800a670:	e018      	b.n	800a6a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a672:	6839      	ldr	r1, [r7, #0]
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fc07 	bl	800ae88 <USBD_GetConfig>
          break;
 800a67a:	e013      	b.n	800a6a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a67c:	6839      	ldr	r1, [r7, #0]
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 fc37 	bl	800aef2 <USBD_GetStatus>
          break;
 800a684:	e00e      	b.n	800a6a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a686:	6839      	ldr	r1, [r7, #0]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fc65 	bl	800af58 <USBD_SetFeature>
          break;
 800a68e:	e009      	b.n	800a6a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a690:	6839      	ldr	r1, [r7, #0]
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 fc74 	bl	800af80 <USBD_ClrFeature>
          break;
 800a698:	e004      	b.n	800a6a4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a69a:	6839      	ldr	r1, [r7, #0]
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 fccc 	bl	800b03a <USBD_CtlError>
          break;
 800a6a2:	bf00      	nop
      }
      break;
 800a6a4:	e004      	b.n	800a6b0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a6a6:	6839      	ldr	r1, [r7, #0]
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 fcc6 	bl	800b03a <USBD_CtlError>
      break;
 800a6ae:	bf00      	nop
  }

  return ret;
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop

0800a6bc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6d2:	2b40      	cmp	r3, #64	; 0x40
 800a6d4:	d005      	beq.n	800a6e2 <USBD_StdItfReq+0x26>
 800a6d6:	2b40      	cmp	r3, #64	; 0x40
 800a6d8:	d82e      	bhi.n	800a738 <USBD_StdItfReq+0x7c>
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <USBD_StdItfReq+0x26>
 800a6de:	2b20      	cmp	r3, #32
 800a6e0:	d12a      	bne.n	800a738 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d81d      	bhi.n	800a72a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	889b      	ldrh	r3, [r3, #4]
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d813      	bhi.n	800a720 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	6839      	ldr	r1, [r7, #0]
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	4798      	blx	r3
 800a706:	4603      	mov	r3, r0
 800a708:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	88db      	ldrh	r3, [r3, #6]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d110      	bne.n	800a734 <USBD_StdItfReq+0x78>
 800a712:	7bfb      	ldrb	r3, [r7, #15]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10d      	bne.n	800a734 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fd56 	bl	800b1ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a71e:	e009      	b.n	800a734 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a720:	6839      	ldr	r1, [r7, #0]
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 fc89 	bl	800b03a <USBD_CtlError>
          break;
 800a728:	e004      	b.n	800a734 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a72a:	6839      	ldr	r1, [r7, #0]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 fc84 	bl	800b03a <USBD_CtlError>
          break;
 800a732:	e000      	b.n	800a736 <USBD_StdItfReq+0x7a>
          break;
 800a734:	bf00      	nop
      }
      break;
 800a736:	e004      	b.n	800a742 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a738:	6839      	ldr	r1, [r7, #0]
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fc7d 	bl	800b03a <USBD_CtlError>
      break;
 800a740:	bf00      	nop
  }

  return USBD_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a756:	2300      	movs	r3, #0
 800a758:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	889b      	ldrh	r3, [r3, #4]
 800a75e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a768:	2b40      	cmp	r3, #64	; 0x40
 800a76a:	d007      	beq.n	800a77c <USBD_StdEPReq+0x30>
 800a76c:	2b40      	cmp	r3, #64	; 0x40
 800a76e:	f200 8146 	bhi.w	800a9fe <USBD_StdEPReq+0x2b2>
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00a      	beq.n	800a78c <USBD_StdEPReq+0x40>
 800a776:	2b20      	cmp	r3, #32
 800a778:	f040 8141 	bne.w	800a9fe <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	6839      	ldr	r1, [r7, #0]
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	4798      	blx	r3
      break;
 800a78a:	e13d      	b.n	800aa08 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a794:	2b20      	cmp	r3, #32
 800a796:	d10a      	bne.n	800a7ae <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	6839      	ldr	r1, [r7, #0]
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	4798      	blx	r3
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
 800a7ac:	e12d      	b.n	800aa0a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	785b      	ldrb	r3, [r3, #1]
 800a7b2:	2b03      	cmp	r3, #3
 800a7b4:	d007      	beq.n	800a7c6 <USBD_StdEPReq+0x7a>
 800a7b6:	2b03      	cmp	r3, #3
 800a7b8:	f300 811b 	bgt.w	800a9f2 <USBD_StdEPReq+0x2a6>
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d072      	beq.n	800a8a6 <USBD_StdEPReq+0x15a>
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d03a      	beq.n	800a83a <USBD_StdEPReq+0xee>
 800a7c4:	e115      	b.n	800a9f2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7cc:	2b02      	cmp	r3, #2
 800a7ce:	d002      	beq.n	800a7d6 <USBD_StdEPReq+0x8a>
 800a7d0:	2b03      	cmp	r3, #3
 800a7d2:	d015      	beq.n	800a800 <USBD_StdEPReq+0xb4>
 800a7d4:	e02b      	b.n	800a82e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7d6:	7bbb      	ldrb	r3, [r7, #14]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00c      	beq.n	800a7f6 <USBD_StdEPReq+0xaa>
 800a7dc:	7bbb      	ldrb	r3, [r7, #14]
 800a7de:	2b80      	cmp	r3, #128	; 0x80
 800a7e0:	d009      	beq.n	800a7f6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a7e2:	7bbb      	ldrb	r3, [r7, #14]
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f004 fa0c 	bl	800ec04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a7ec:	2180      	movs	r1, #128	; 0x80
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f004 fa08 	bl	800ec04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7f4:	e020      	b.n	800a838 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a7f6:	6839      	ldr	r1, [r7, #0]
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 fc1e 	bl	800b03a <USBD_CtlError>
              break;
 800a7fe:	e01b      	b.n	800a838 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	885b      	ldrh	r3, [r3, #2]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10e      	bne.n	800a826 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a808:	7bbb      	ldrb	r3, [r7, #14]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00b      	beq.n	800a826 <USBD_StdEPReq+0xda>
 800a80e:	7bbb      	ldrb	r3, [r7, #14]
 800a810:	2b80      	cmp	r3, #128	; 0x80
 800a812:	d008      	beq.n	800a826 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	88db      	ldrh	r3, [r3, #6]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d104      	bne.n	800a826 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a81c:	7bbb      	ldrb	r3, [r7, #14]
 800a81e:	4619      	mov	r1, r3
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f004 f9ef 	bl	800ec04 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fccf 	bl	800b1ca <USBD_CtlSendStatus>

              break;
 800a82c:	e004      	b.n	800a838 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a82e:	6839      	ldr	r1, [r7, #0]
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 fc02 	bl	800b03a <USBD_CtlError>
              break;
 800a836:	bf00      	nop
          }
          break;
 800a838:	e0e0      	b.n	800a9fc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a840:	2b02      	cmp	r3, #2
 800a842:	d002      	beq.n	800a84a <USBD_StdEPReq+0xfe>
 800a844:	2b03      	cmp	r3, #3
 800a846:	d015      	beq.n	800a874 <USBD_StdEPReq+0x128>
 800a848:	e026      	b.n	800a898 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a84a:	7bbb      	ldrb	r3, [r7, #14]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00c      	beq.n	800a86a <USBD_StdEPReq+0x11e>
 800a850:	7bbb      	ldrb	r3, [r7, #14]
 800a852:	2b80      	cmp	r3, #128	; 0x80
 800a854:	d009      	beq.n	800a86a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a856:	7bbb      	ldrb	r3, [r7, #14]
 800a858:	4619      	mov	r1, r3
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f004 f9d2 	bl	800ec04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a860:	2180      	movs	r1, #128	; 0x80
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f004 f9ce 	bl	800ec04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a868:	e01c      	b.n	800a8a4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a86a:	6839      	ldr	r1, [r7, #0]
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fbe4 	bl	800b03a <USBD_CtlError>
              break;
 800a872:	e017      	b.n	800a8a4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	885b      	ldrh	r3, [r3, #2]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d112      	bne.n	800a8a2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a87c:	7bbb      	ldrb	r3, [r7, #14]
 800a87e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a882:	2b00      	cmp	r3, #0
 800a884:	d004      	beq.n	800a890 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a886:	7bbb      	ldrb	r3, [r7, #14]
 800a888:	4619      	mov	r1, r3
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f004 f9d9 	bl	800ec42 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fc9a 	bl	800b1ca <USBD_CtlSendStatus>
              }
              break;
 800a896:	e004      	b.n	800a8a2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a898:	6839      	ldr	r1, [r7, #0]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fbcd 	bl	800b03a <USBD_CtlError>
              break;
 800a8a0:	e000      	b.n	800a8a4 <USBD_StdEPReq+0x158>
              break;
 800a8a2:	bf00      	nop
          }
          break;
 800a8a4:	e0aa      	b.n	800a9fc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d002      	beq.n	800a8b6 <USBD_StdEPReq+0x16a>
 800a8b0:	2b03      	cmp	r3, #3
 800a8b2:	d032      	beq.n	800a91a <USBD_StdEPReq+0x1ce>
 800a8b4:	e097      	b.n	800a9e6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8b6:	7bbb      	ldrb	r3, [r7, #14]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d007      	beq.n	800a8cc <USBD_StdEPReq+0x180>
 800a8bc:	7bbb      	ldrb	r3, [r7, #14]
 800a8be:	2b80      	cmp	r3, #128	; 0x80
 800a8c0:	d004      	beq.n	800a8cc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a8c2:	6839      	ldr	r1, [r7, #0]
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 fbb8 	bl	800b03a <USBD_CtlError>
                break;
 800a8ca:	e091      	b.n	800a9f0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	da0b      	bge.n	800a8ec <USBD_StdEPReq+0x1a0>
 800a8d4:	7bbb      	ldrb	r3, [r7, #14]
 800a8d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8da:	4613      	mov	r3, r2
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4413      	add	r3, r2
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	3310      	adds	r3, #16
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	e00b      	b.n	800a904 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8ec:	7bbb      	ldrb	r3, [r7, #14]
 800a8ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	4413      	add	r3, r2
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	4413      	add	r3, r2
 800a902:	3304      	adds	r3, #4
 800a904:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	2200      	movs	r2, #0
 800a90a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	2202      	movs	r2, #2
 800a910:	4619      	mov	r1, r3
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fbfb 	bl	800b10e <USBD_CtlSendData>
              break;
 800a918:	e06a      	b.n	800a9f0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a91a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	da11      	bge.n	800a946 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a922:	7bbb      	ldrb	r3, [r7, #14]
 800a924:	f003 020f 	and.w	r2, r3, #15
 800a928:	6879      	ldr	r1, [r7, #4]
 800a92a:	4613      	mov	r3, r2
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	4413      	add	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	440b      	add	r3, r1
 800a934:	3318      	adds	r3, #24
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d117      	bne.n	800a96c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a93c:	6839      	ldr	r1, [r7, #0]
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 fb7b 	bl	800b03a <USBD_CtlError>
                  break;
 800a944:	e054      	b.n	800a9f0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a946:	7bbb      	ldrb	r3, [r7, #14]
 800a948:	f003 020f 	and.w	r2, r3, #15
 800a94c:	6879      	ldr	r1, [r7, #4]
 800a94e:	4613      	mov	r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	4413      	add	r3, r2
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	440b      	add	r3, r1
 800a958:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d104      	bne.n	800a96c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a962:	6839      	ldr	r1, [r7, #0]
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fb68 	bl	800b03a <USBD_CtlError>
                  break;
 800a96a:	e041      	b.n	800a9f0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a96c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a970:	2b00      	cmp	r3, #0
 800a972:	da0b      	bge.n	800a98c <USBD_StdEPReq+0x240>
 800a974:	7bbb      	ldrb	r3, [r7, #14]
 800a976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a97a:	4613      	mov	r3, r2
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4413      	add	r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	3310      	adds	r3, #16
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	4413      	add	r3, r2
 800a988:	3304      	adds	r3, #4
 800a98a:	e00b      	b.n	800a9a4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a98c:	7bbb      	ldrb	r3, [r7, #14]
 800a98e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a992:	4613      	mov	r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4413      	add	r3, r2
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	3304      	adds	r3, #4
 800a9a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a9a6:	7bbb      	ldrb	r3, [r7, #14]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <USBD_StdEPReq+0x266>
 800a9ac:	7bbb      	ldrb	r3, [r7, #14]
 800a9ae:	2b80      	cmp	r3, #128	; 0x80
 800a9b0:	d103      	bne.n	800a9ba <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	601a      	str	r2, [r3, #0]
 800a9b8:	e00e      	b.n	800a9d8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a9ba:	7bbb      	ldrb	r3, [r7, #14]
 800a9bc:	4619      	mov	r1, r3
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f004 f95e 	bl	800ec80 <USBD_LL_IsStallEP>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d003      	beq.n	800a9d2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	601a      	str	r2, [r3, #0]
 800a9d0:	e002      	b.n	800a9d8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	2202      	movs	r2, #2
 800a9dc:	4619      	mov	r1, r3
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 fb95 	bl	800b10e <USBD_CtlSendData>
              break;
 800a9e4:	e004      	b.n	800a9f0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a9e6:	6839      	ldr	r1, [r7, #0]
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 fb26 	bl	800b03a <USBD_CtlError>
              break;
 800a9ee:	bf00      	nop
          }
          break;
 800a9f0:	e004      	b.n	800a9fc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a9f2:	6839      	ldr	r1, [r7, #0]
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fb20 	bl	800b03a <USBD_CtlError>
          break;
 800a9fa:	bf00      	nop
      }
      break;
 800a9fc:	e004      	b.n	800aa08 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a9fe:	6839      	ldr	r1, [r7, #0]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fb1a 	bl	800b03a <USBD_CtlError>
      break;
 800aa06:	bf00      	nop
  }

  return ret;
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
	...

0800aa14 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aa22:	2300      	movs	r3, #0
 800aa24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aa26:	2300      	movs	r3, #0
 800aa28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	885b      	ldrh	r3, [r3, #2]
 800aa2e:	0a1b      	lsrs	r3, r3, #8
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	3b01      	subs	r3, #1
 800aa34:	2b06      	cmp	r3, #6
 800aa36:	f200 8128 	bhi.w	800ac8a <USBD_GetDescriptor+0x276>
 800aa3a:	a201      	add	r2, pc, #4	; (adr r2, 800aa40 <USBD_GetDescriptor+0x2c>)
 800aa3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa40:	0800aa5d 	.word	0x0800aa5d
 800aa44:	0800aa75 	.word	0x0800aa75
 800aa48:	0800aab5 	.word	0x0800aab5
 800aa4c:	0800ac8b 	.word	0x0800ac8b
 800aa50:	0800ac8b 	.word	0x0800ac8b
 800aa54:	0800ac2b 	.word	0x0800ac2b
 800aa58:	0800ac57 	.word	0x0800ac57
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	7c12      	ldrb	r2, [r2, #16]
 800aa68:	f107 0108 	add.w	r1, r7, #8
 800aa6c:	4610      	mov	r0, r2
 800aa6e:	4798      	blx	r3
 800aa70:	60f8      	str	r0, [r7, #12]
      break;
 800aa72:	e112      	b.n	800ac9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	7c1b      	ldrb	r3, [r3, #16]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10d      	bne.n	800aa98 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa84:	f107 0208 	add.w	r2, r7, #8
 800aa88:	4610      	mov	r0, r2
 800aa8a:	4798      	blx	r3
 800aa8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	3301      	adds	r3, #1
 800aa92:	2202      	movs	r2, #2
 800aa94:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aa96:	e100      	b.n	800ac9a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa0:	f107 0208 	add.w	r2, r7, #8
 800aaa4:	4610      	mov	r0, r2
 800aaa6:	4798      	blx	r3
 800aaa8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	3301      	adds	r3, #1
 800aaae:	2202      	movs	r2, #2
 800aab0:	701a      	strb	r2, [r3, #0]
      break;
 800aab2:	e0f2      	b.n	800ac9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	885b      	ldrh	r3, [r3, #2]
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	2b05      	cmp	r3, #5
 800aabc:	f200 80ac 	bhi.w	800ac18 <USBD_GetDescriptor+0x204>
 800aac0:	a201      	add	r2, pc, #4	; (adr r2, 800aac8 <USBD_GetDescriptor+0xb4>)
 800aac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac6:	bf00      	nop
 800aac8:	0800aae1 	.word	0x0800aae1
 800aacc:	0800ab15 	.word	0x0800ab15
 800aad0:	0800ab49 	.word	0x0800ab49
 800aad4:	0800ab7d 	.word	0x0800ab7d
 800aad8:	0800abb1 	.word	0x0800abb1
 800aadc:	0800abe5 	.word	0x0800abe5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00b      	beq.n	800ab04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	7c12      	ldrb	r2, [r2, #16]
 800aaf8:	f107 0108 	add.w	r1, r7, #8
 800aafc:	4610      	mov	r0, r2
 800aafe:	4798      	blx	r3
 800ab00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab02:	e091      	b.n	800ac28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab04:	6839      	ldr	r1, [r7, #0]
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fa97 	bl	800b03a <USBD_CtlError>
            err++;
 800ab0c:	7afb      	ldrb	r3, [r7, #11]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	72fb      	strb	r3, [r7, #11]
          break;
 800ab12:	e089      	b.n	800ac28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00b      	beq.n	800ab38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	7c12      	ldrb	r2, [r2, #16]
 800ab2c:	f107 0108 	add.w	r1, r7, #8
 800ab30:	4610      	mov	r0, r2
 800ab32:	4798      	blx	r3
 800ab34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab36:	e077      	b.n	800ac28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab38:	6839      	ldr	r1, [r7, #0]
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 fa7d 	bl	800b03a <USBD_CtlError>
            err++;
 800ab40:	7afb      	ldrb	r3, [r7, #11]
 800ab42:	3301      	adds	r3, #1
 800ab44:	72fb      	strb	r3, [r7, #11]
          break;
 800ab46:	e06f      	b.n	800ac28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00b      	beq.n	800ab6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	7c12      	ldrb	r2, [r2, #16]
 800ab60:	f107 0108 	add.w	r1, r7, #8
 800ab64:	4610      	mov	r0, r2
 800ab66:	4798      	blx	r3
 800ab68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab6a:	e05d      	b.n	800ac28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 fa63 	bl	800b03a <USBD_CtlError>
            err++;
 800ab74:	7afb      	ldrb	r3, [r7, #11]
 800ab76:	3301      	adds	r3, #1
 800ab78:	72fb      	strb	r3, [r7, #11]
          break;
 800ab7a:	e055      	b.n	800ac28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00b      	beq.n	800aba0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	7c12      	ldrb	r2, [r2, #16]
 800ab94:	f107 0108 	add.w	r1, r7, #8
 800ab98:	4610      	mov	r0, r2
 800ab9a:	4798      	blx	r3
 800ab9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab9e:	e043      	b.n	800ac28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aba0:	6839      	ldr	r1, [r7, #0]
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 fa49 	bl	800b03a <USBD_CtlError>
            err++;
 800aba8:	7afb      	ldrb	r3, [r7, #11]
 800abaa:	3301      	adds	r3, #1
 800abac:	72fb      	strb	r3, [r7, #11]
          break;
 800abae:	e03b      	b.n	800ac28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abb6:	695b      	ldr	r3, [r3, #20]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00b      	beq.n	800abd4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abc2:	695b      	ldr	r3, [r3, #20]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	7c12      	ldrb	r2, [r2, #16]
 800abc8:	f107 0108 	add.w	r1, r7, #8
 800abcc:	4610      	mov	r0, r2
 800abce:	4798      	blx	r3
 800abd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abd2:	e029      	b.n	800ac28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abd4:	6839      	ldr	r1, [r7, #0]
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fa2f 	bl	800b03a <USBD_CtlError>
            err++;
 800abdc:	7afb      	ldrb	r3, [r7, #11]
 800abde:	3301      	adds	r3, #1
 800abe0:	72fb      	strb	r3, [r7, #11]
          break;
 800abe2:	e021      	b.n	800ac28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abea:	699b      	ldr	r3, [r3, #24]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00b      	beq.n	800ac08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abf6:	699b      	ldr	r3, [r3, #24]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	7c12      	ldrb	r2, [r2, #16]
 800abfc:	f107 0108 	add.w	r1, r7, #8
 800ac00:	4610      	mov	r0, r2
 800ac02:	4798      	blx	r3
 800ac04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac06:	e00f      	b.n	800ac28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fa15 	bl	800b03a <USBD_CtlError>
            err++;
 800ac10:	7afb      	ldrb	r3, [r7, #11]
 800ac12:	3301      	adds	r3, #1
 800ac14:	72fb      	strb	r3, [r7, #11]
          break;
 800ac16:	e007      	b.n	800ac28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 fa0d 	bl	800b03a <USBD_CtlError>
          err++;
 800ac20:	7afb      	ldrb	r3, [r7, #11]
 800ac22:	3301      	adds	r3, #1
 800ac24:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ac26:	e038      	b.n	800ac9a <USBD_GetDescriptor+0x286>
 800ac28:	e037      	b.n	800ac9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	7c1b      	ldrb	r3, [r3, #16]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d109      	bne.n	800ac46 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac3a:	f107 0208 	add.w	r2, r7, #8
 800ac3e:	4610      	mov	r0, r2
 800ac40:	4798      	blx	r3
 800ac42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac44:	e029      	b.n	800ac9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac46:	6839      	ldr	r1, [r7, #0]
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 f9f6 	bl	800b03a <USBD_CtlError>
        err++;
 800ac4e:	7afb      	ldrb	r3, [r7, #11]
 800ac50:	3301      	adds	r3, #1
 800ac52:	72fb      	strb	r3, [r7, #11]
      break;
 800ac54:	e021      	b.n	800ac9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	7c1b      	ldrb	r3, [r3, #16]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10d      	bne.n	800ac7a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac66:	f107 0208 	add.w	r2, r7, #8
 800ac6a:	4610      	mov	r0, r2
 800ac6c:	4798      	blx	r3
 800ac6e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	3301      	adds	r3, #1
 800ac74:	2207      	movs	r2, #7
 800ac76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac78:	e00f      	b.n	800ac9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac7a:	6839      	ldr	r1, [r7, #0]
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 f9dc 	bl	800b03a <USBD_CtlError>
        err++;
 800ac82:	7afb      	ldrb	r3, [r7, #11]
 800ac84:	3301      	adds	r3, #1
 800ac86:	72fb      	strb	r3, [r7, #11]
      break;
 800ac88:	e007      	b.n	800ac9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ac8a:	6839      	ldr	r1, [r7, #0]
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 f9d4 	bl	800b03a <USBD_CtlError>
      err++;
 800ac92:	7afb      	ldrb	r3, [r7, #11]
 800ac94:	3301      	adds	r3, #1
 800ac96:	72fb      	strb	r3, [r7, #11]
      break;
 800ac98:	bf00      	nop
  }

  if (err != 0U)
 800ac9a:	7afb      	ldrb	r3, [r7, #11]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d11c      	bne.n	800acda <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800aca0:	893b      	ldrh	r3, [r7, #8]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d011      	beq.n	800acca <USBD_GetDescriptor+0x2b6>
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	88db      	ldrh	r3, [r3, #6]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00d      	beq.n	800acca <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	88da      	ldrh	r2, [r3, #6]
 800acb2:	893b      	ldrh	r3, [r7, #8]
 800acb4:	4293      	cmp	r3, r2
 800acb6:	bf28      	it	cs
 800acb8:	4613      	movcs	r3, r2
 800acba:	b29b      	uxth	r3, r3
 800acbc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800acbe:	893b      	ldrh	r3, [r7, #8]
 800acc0:	461a      	mov	r2, r3
 800acc2:	68f9      	ldr	r1, [r7, #12]
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 fa22 	bl	800b10e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	88db      	ldrh	r3, [r3, #6]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d104      	bne.n	800acdc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 fa79 	bl	800b1ca <USBD_CtlSendStatus>
 800acd8:	e000      	b.n	800acdc <USBD_GetDescriptor+0x2c8>
    return;
 800acda:	bf00      	nop
    }
  }
}
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop

0800ace4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	889b      	ldrh	r3, [r3, #4]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d130      	bne.n	800ad58 <USBD_SetAddress+0x74>
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	88db      	ldrh	r3, [r3, #6]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d12c      	bne.n	800ad58 <USBD_SetAddress+0x74>
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	885b      	ldrh	r3, [r3, #2]
 800ad02:	2b7f      	cmp	r3, #127	; 0x7f
 800ad04:	d828      	bhi.n	800ad58 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	885b      	ldrh	r3, [r3, #2]
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad18:	2b03      	cmp	r3, #3
 800ad1a:	d104      	bne.n	800ad26 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ad1c:	6839      	ldr	r1, [r7, #0]
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 f98b 	bl	800b03a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad24:	e01d      	b.n	800ad62 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	7bfa      	ldrb	r2, [r7, #15]
 800ad2a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad2e:	7bfb      	ldrb	r3, [r7, #15]
 800ad30:	4619      	mov	r1, r3
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f003 ffd0 	bl	800ecd8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 fa46 	bl	800b1ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d004      	beq.n	800ad4e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2202      	movs	r2, #2
 800ad48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad4c:	e009      	b.n	800ad62 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2201      	movs	r2, #1
 800ad52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad56:	e004      	b.n	800ad62 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad58:	6839      	ldr	r1, [r7, #0]
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f96d 	bl	800b03a <USBD_CtlError>
  }
}
 800ad60:	bf00      	nop
 800ad62:	bf00      	nop
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
	...

0800ad6c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	885b      	ldrh	r3, [r3, #2]
 800ad7a:	b2da      	uxtb	r2, r3
 800ad7c:	4b41      	ldr	r3, [pc, #260]	; (800ae84 <USBD_SetConfig+0x118>)
 800ad7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad80:	4b40      	ldr	r3, [pc, #256]	; (800ae84 <USBD_SetConfig+0x118>)
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d904      	bls.n	800ad92 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ad88:	6839      	ldr	r1, [r7, #0]
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 f955 	bl	800b03a <USBD_CtlError>
 800ad90:	e075      	b.n	800ae7e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad98:	2b02      	cmp	r3, #2
 800ad9a:	d002      	beq.n	800ada2 <USBD_SetConfig+0x36>
 800ad9c:	2b03      	cmp	r3, #3
 800ad9e:	d023      	beq.n	800ade8 <USBD_SetConfig+0x7c>
 800ada0:	e062      	b.n	800ae68 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ada2:	4b38      	ldr	r3, [pc, #224]	; (800ae84 <USBD_SetConfig+0x118>)
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d01a      	beq.n	800ade0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800adaa:	4b36      	ldr	r3, [pc, #216]	; (800ae84 <USBD_SetConfig+0x118>)
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	461a      	mov	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2203      	movs	r2, #3
 800adb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800adbc:	4b31      	ldr	r3, [pc, #196]	; (800ae84 <USBD_SetConfig+0x118>)
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	4619      	mov	r1, r3
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7ff f9e7 	bl	800a196 <USBD_SetClassConfig>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b02      	cmp	r3, #2
 800adcc:	d104      	bne.n	800add8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800adce:	6839      	ldr	r1, [r7, #0]
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 f932 	bl	800b03a <USBD_CtlError>
            return;
 800add6:	e052      	b.n	800ae7e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 f9f6 	bl	800b1ca <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800adde:	e04e      	b.n	800ae7e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 f9f2 	bl	800b1ca <USBD_CtlSendStatus>
        break;
 800ade6:	e04a      	b.n	800ae7e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ade8:	4b26      	ldr	r3, [pc, #152]	; (800ae84 <USBD_SetConfig+0x118>)
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d112      	bne.n	800ae16 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2202      	movs	r2, #2
 800adf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800adf8:	4b22      	ldr	r3, [pc, #136]	; (800ae84 <USBD_SetConfig+0x118>)
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	461a      	mov	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ae02:	4b20      	ldr	r3, [pc, #128]	; (800ae84 <USBD_SetConfig+0x118>)
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	4619      	mov	r1, r3
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f7ff f9e3 	bl	800a1d4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 f9db 	bl	800b1ca <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ae14:	e033      	b.n	800ae7e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ae16:	4b1b      	ldr	r3, [pc, #108]	; (800ae84 <USBD_SetConfig+0x118>)
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d01d      	beq.n	800ae60 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7ff f9d1 	bl	800a1d4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ae32:	4b14      	ldr	r3, [pc, #80]	; (800ae84 <USBD_SetConfig+0x118>)
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	461a      	mov	r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ae3c:	4b11      	ldr	r3, [pc, #68]	; (800ae84 <USBD_SetConfig+0x118>)
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	4619      	mov	r1, r3
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f7ff f9a7 	bl	800a196 <USBD_SetClassConfig>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b02      	cmp	r3, #2
 800ae4c:	d104      	bne.n	800ae58 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ae4e:	6839      	ldr	r1, [r7, #0]
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 f8f2 	bl	800b03a <USBD_CtlError>
            return;
 800ae56:	e012      	b.n	800ae7e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 f9b6 	bl	800b1ca <USBD_CtlSendStatus>
        break;
 800ae5e:	e00e      	b.n	800ae7e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 f9b2 	bl	800b1ca <USBD_CtlSendStatus>
        break;
 800ae66:	e00a      	b.n	800ae7e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ae68:	6839      	ldr	r1, [r7, #0]
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 f8e5 	bl	800b03a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ae70:	4b04      	ldr	r3, [pc, #16]	; (800ae84 <USBD_SetConfig+0x118>)
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	4619      	mov	r1, r3
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f7ff f9ac 	bl	800a1d4 <USBD_ClrClassConfig>
        break;
 800ae7c:	bf00      	nop
    }
  }
}
 800ae7e:	3708      	adds	r7, #8
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	200001b1 	.word	0x200001b1

0800ae88 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	88db      	ldrh	r3, [r3, #6]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d004      	beq.n	800aea4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ae9a:	6839      	ldr	r1, [r7, #0]
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 f8cc 	bl	800b03a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aea2:	e022      	b.n	800aeea <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	dc02      	bgt.n	800aeb4 <USBD_GetConfig+0x2c>
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	dc03      	bgt.n	800aeba <USBD_GetConfig+0x32>
 800aeb2:	e015      	b.n	800aee0 <USBD_GetConfig+0x58>
 800aeb4:	2b03      	cmp	r3, #3
 800aeb6:	d00b      	beq.n	800aed0 <USBD_GetConfig+0x48>
 800aeb8:	e012      	b.n	800aee0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	3308      	adds	r3, #8
 800aec4:	2201      	movs	r2, #1
 800aec6:	4619      	mov	r1, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 f920 	bl	800b10e <USBD_CtlSendData>
        break;
 800aece:	e00c      	b.n	800aeea <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	3304      	adds	r3, #4
 800aed4:	2201      	movs	r2, #1
 800aed6:	4619      	mov	r1, r3
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 f918 	bl	800b10e <USBD_CtlSendData>
        break;
 800aede:	e004      	b.n	800aeea <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800aee0:	6839      	ldr	r1, [r7, #0]
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 f8a9 	bl	800b03a <USBD_CtlError>
        break;
 800aee8:	bf00      	nop
}
 800aeea:	bf00      	nop
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b082      	sub	sp, #8
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
 800aefa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af02:	3b01      	subs	r3, #1
 800af04:	2b02      	cmp	r3, #2
 800af06:	d81e      	bhi.n	800af46 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	88db      	ldrh	r3, [r3, #6]
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d004      	beq.n	800af1a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800af10:	6839      	ldr	r1, [r7, #0]
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f891 	bl	800b03a <USBD_CtlError>
        break;
 800af18:	e01a      	b.n	800af50 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2201      	movs	r2, #1
 800af1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af26:	2b00      	cmp	r3, #0
 800af28:	d005      	beq.n	800af36 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	f043 0202 	orr.w	r2, r3, #2
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	330c      	adds	r3, #12
 800af3a:	2202      	movs	r2, #2
 800af3c:	4619      	mov	r1, r3
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f8e5 	bl	800b10e <USBD_CtlSendData>
      break;
 800af44:	e004      	b.n	800af50 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 f876 	bl	800b03a <USBD_CtlError>
      break;
 800af4e:	bf00      	nop
  }
}
 800af50:	bf00      	nop
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	885b      	ldrh	r3, [r3, #2]
 800af66:	2b01      	cmp	r3, #1
 800af68:	d106      	bne.n	800af78 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2201      	movs	r2, #1
 800af6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f929 	bl	800b1ca <USBD_CtlSendStatus>
  }
}
 800af78:	bf00      	nop
 800af7a:	3708      	adds	r7, #8
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af90:	3b01      	subs	r3, #1
 800af92:	2b02      	cmp	r3, #2
 800af94:	d80b      	bhi.n	800afae <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	885b      	ldrh	r3, [r3, #2]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d10c      	bne.n	800afb8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f90f 	bl	800b1ca <USBD_CtlSendStatus>
      }
      break;
 800afac:	e004      	b.n	800afb8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800afae:	6839      	ldr	r1, [r7, #0]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 f842 	bl	800b03a <USBD_CtlError>
      break;
 800afb6:	e000      	b.n	800afba <USBD_ClrFeature+0x3a>
      break;
 800afb8:	bf00      	nop
  }
}
 800afba:	bf00      	nop
 800afbc:	3708      	adds	r7, #8
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800afc2:	b480      	push	{r7}
 800afc4:	b083      	sub	sp, #12
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
 800afca:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	781a      	ldrb	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	785a      	ldrb	r2, [r3, #1]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	3302      	adds	r3, #2
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	3303      	adds	r3, #3
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	b29b      	uxth	r3, r3
 800afec:	021b      	lsls	r3, r3, #8
 800afee:	b29b      	uxth	r3, r3
 800aff0:	4413      	add	r3, r2
 800aff2:	b29a      	uxth	r2, r3
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	3304      	adds	r3, #4
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	b29a      	uxth	r2, r3
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	3305      	adds	r3, #5
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	b29b      	uxth	r3, r3
 800b008:	021b      	lsls	r3, r3, #8
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	4413      	add	r3, r2
 800b00e:	b29a      	uxth	r2, r3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	3306      	adds	r3, #6
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	b29a      	uxth	r2, r3
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	3307      	adds	r3, #7
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	b29b      	uxth	r3, r3
 800b024:	021b      	lsls	r3, r3, #8
 800b026:	b29b      	uxth	r3, r3
 800b028:	4413      	add	r3, r2
 800b02a:	b29a      	uxth	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	80da      	strh	r2, [r3, #6]

}
 800b030:	bf00      	nop
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	bc80      	pop	{r7}
 800b038:	4770      	bx	lr

0800b03a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b082      	sub	sp, #8
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
 800b042:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b044:	2180      	movs	r1, #128	; 0x80
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f003 fddc 	bl	800ec04 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b04c:	2100      	movs	r1, #0
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f003 fdd8 	bl	800ec04 <USBD_LL_StallEP>
}
 800b054:	bf00      	nop
 800b056:	3708      	adds	r7, #8
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b068:	2300      	movs	r3, #0
 800b06a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d032      	beq.n	800b0d8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f000 f834 	bl	800b0e0 <USBD_GetLen>
 800b078:	4603      	mov	r3, r0
 800b07a:	3301      	adds	r3, #1
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	005b      	lsls	r3, r3, #1
 800b080:	b29a      	uxth	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b086:	7dfb      	ldrb	r3, [r7, #23]
 800b088:	1c5a      	adds	r2, r3, #1
 800b08a:	75fa      	strb	r2, [r7, #23]
 800b08c:	461a      	mov	r2, r3
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	4413      	add	r3, r2
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	7812      	ldrb	r2, [r2, #0]
 800b096:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b098:	7dfb      	ldrb	r3, [r7, #23]
 800b09a:	1c5a      	adds	r2, r3, #1
 800b09c:	75fa      	strb	r2, [r7, #23]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	2203      	movs	r2, #3
 800b0a6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b0a8:	e012      	b.n	800b0d0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	1c5a      	adds	r2, r3, #1
 800b0ae:	60fa      	str	r2, [r7, #12]
 800b0b0:	7dfa      	ldrb	r2, [r7, #23]
 800b0b2:	1c51      	adds	r1, r2, #1
 800b0b4:	75f9      	strb	r1, [r7, #23]
 800b0b6:	4611      	mov	r1, r2
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	440a      	add	r2, r1
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b0c0:	7dfb      	ldrb	r3, [r7, #23]
 800b0c2:	1c5a      	adds	r2, r3, #1
 800b0c4:	75fa      	strb	r2, [r7, #23]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d1e8      	bne.n	800b0aa <USBD_GetString+0x4e>
    }
  }
}
 800b0d8:	bf00      	nop
 800b0da:	3718      	adds	r7, #24
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b0ec:	e005      	b.n	800b0fa <USBD_GetLen+0x1a>
  {
    len++;
 800b0ee:	7bfb      	ldrb	r3, [r7, #15]
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1f5      	bne.n	800b0ee <USBD_GetLen+0xe>
  }

  return len;
 800b102:	7bfb      	ldrb	r3, [r7, #15]
}
 800b104:	4618      	mov	r0, r3
 800b106:	3714      	adds	r7, #20
 800b108:	46bd      	mov	sp, r7
 800b10a:	bc80      	pop	{r7}
 800b10c:	4770      	bx	lr

0800b10e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b084      	sub	sp, #16
 800b112:	af00      	add	r7, sp, #0
 800b114:	60f8      	str	r0, [r7, #12]
 800b116:	60b9      	str	r1, [r7, #8]
 800b118:	4613      	mov	r3, r2
 800b11a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2202      	movs	r2, #2
 800b120:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b124:	88fa      	ldrh	r2, [r7, #6]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b12a:	88fa      	ldrh	r2, [r7, #6]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b130:	88fb      	ldrh	r3, [r7, #6]
 800b132:	68ba      	ldr	r2, [r7, #8]
 800b134:	2100      	movs	r1, #0
 800b136:	68f8      	ldr	r0, [r7, #12]
 800b138:	f003 fded 	bl	800ed16 <USBD_LL_Transmit>

  return USBD_OK;
 800b13c:	2300      	movs	r3, #0
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b084      	sub	sp, #16
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	60f8      	str	r0, [r7, #12]
 800b14e:	60b9      	str	r1, [r7, #8]
 800b150:	4613      	mov	r3, r2
 800b152:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b154:	88fb      	ldrh	r3, [r7, #6]
 800b156:	68ba      	ldr	r2, [r7, #8]
 800b158:	2100      	movs	r1, #0
 800b15a:	68f8      	ldr	r0, [r7, #12]
 800b15c:	f003 fddb 	bl	800ed16 <USBD_LL_Transmit>

  return USBD_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b084      	sub	sp, #16
 800b16e:	af00      	add	r7, sp, #0
 800b170:	60f8      	str	r0, [r7, #12]
 800b172:	60b9      	str	r1, [r7, #8]
 800b174:	4613      	mov	r3, r2
 800b176:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2203      	movs	r2, #3
 800b17c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b180:	88fa      	ldrh	r2, [r7, #6]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b188:	88fa      	ldrh	r2, [r7, #6]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b190:	88fb      	ldrh	r3, [r7, #6]
 800b192:	68ba      	ldr	r2, [r7, #8]
 800b194:	2100      	movs	r1, #0
 800b196:	68f8      	ldr	r0, [r7, #12]
 800b198:	f003 fde0 	bl	800ed5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b084      	sub	sp, #16
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	60f8      	str	r0, [r7, #12]
 800b1ae:	60b9      	str	r1, [r7, #8]
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1b4:	88fb      	ldrh	r3, [r7, #6]
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	68f8      	ldr	r0, [r7, #12]
 800b1bc:	f003 fdce 	bl	800ed5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b082      	sub	sp, #8
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2204      	movs	r2, #4
 800b1d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b1da:	2300      	movs	r3, #0
 800b1dc:	2200      	movs	r2, #0
 800b1de:	2100      	movs	r1, #0
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f003 fd98 	bl	800ed16 <USBD_LL_Transmit>

  return USBD_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2205      	movs	r2, #5
 800b1fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b200:	2300      	movs	r3, #0
 800b202:	2200      	movs	r2, #0
 800b204:	2100      	movs	r1, #0
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f003 fda8 	bl	800ed5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b20c:	2300      	movs	r3, #0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3708      	adds	r7, #8
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
	...

0800b218 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b21e:	f3ef 8305 	mrs	r3, IPSR
 800b222:	60bb      	str	r3, [r7, #8]
  return(result);
 800b224:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b226:	2b00      	cmp	r3, #0
 800b228:	d10f      	bne.n	800b24a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b22a:	f3ef 8310 	mrs	r3, PRIMASK
 800b22e:	607b      	str	r3, [r7, #4]
  return(result);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d109      	bne.n	800b24a <osKernelInitialize+0x32>
 800b236:	4b10      	ldr	r3, [pc, #64]	; (800b278 <osKernelInitialize+0x60>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	d109      	bne.n	800b252 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b23e:	f3ef 8311 	mrs	r3, BASEPRI
 800b242:	603b      	str	r3, [r7, #0]
  return(result);
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d003      	beq.n	800b252 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b24a:	f06f 0305 	mvn.w	r3, #5
 800b24e:	60fb      	str	r3, [r7, #12]
 800b250:	e00c      	b.n	800b26c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b252:	4b09      	ldr	r3, [pc, #36]	; (800b278 <osKernelInitialize+0x60>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d105      	bne.n	800b266 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800b25a:	4b07      	ldr	r3, [pc, #28]	; (800b278 <osKernelInitialize+0x60>)
 800b25c:	2201      	movs	r2, #1
 800b25e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b260:	2300      	movs	r3, #0
 800b262:	60fb      	str	r3, [r7, #12]
 800b264:	e002      	b.n	800b26c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b266:	f04f 33ff 	mov.w	r3, #4294967295
 800b26a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b26c:	68fb      	ldr	r3, [r7, #12]
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3714      	adds	r7, #20
 800b272:	46bd      	mov	sp, r7
 800b274:	bc80      	pop	{r7}
 800b276:	4770      	bx	lr
 800b278:	200001b4 	.word	0x200001b4

0800b27c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b282:	f3ef 8305 	mrs	r3, IPSR
 800b286:	60bb      	str	r3, [r7, #8]
  return(result);
 800b288:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d10f      	bne.n	800b2ae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b28e:	f3ef 8310 	mrs	r3, PRIMASK
 800b292:	607b      	str	r3, [r7, #4]
  return(result);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d109      	bne.n	800b2ae <osKernelStart+0x32>
 800b29a:	4b11      	ldr	r3, [pc, #68]	; (800b2e0 <osKernelStart+0x64>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	d109      	bne.n	800b2b6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b2a2:	f3ef 8311 	mrs	r3, BASEPRI
 800b2a6:	603b      	str	r3, [r7, #0]
  return(result);
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d003      	beq.n	800b2b6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800b2ae:	f06f 0305 	mvn.w	r3, #5
 800b2b2:	60fb      	str	r3, [r7, #12]
 800b2b4:	e00e      	b.n	800b2d4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800b2b6:	4b0a      	ldr	r3, [pc, #40]	; (800b2e0 <osKernelStart+0x64>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d107      	bne.n	800b2ce <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800b2be:	4b08      	ldr	r3, [pc, #32]	; (800b2e0 <osKernelStart+0x64>)
 800b2c0:	2202      	movs	r2, #2
 800b2c2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800b2c4:	f001 fbc6 	bl	800ca54 <vTaskStartScheduler>
      stat = osOK;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	e002      	b.n	800b2d4 <osKernelStart+0x58>
    } else {
      stat = osError;
 800b2ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b2d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	200001b4 	.word	0x200001b4

0800b2e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b092      	sub	sp, #72	; 0x48
 800b2e8:	af04      	add	r7, sp, #16
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2f4:	f3ef 8305 	mrs	r3, IPSR
 800b2f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f040 8094 	bne.w	800b42a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b302:	f3ef 8310 	mrs	r3, PRIMASK
 800b306:	623b      	str	r3, [r7, #32]
  return(result);
 800b308:	6a3b      	ldr	r3, [r7, #32]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f040 808d 	bne.w	800b42a <osThreadNew+0x146>
 800b310:	4b48      	ldr	r3, [pc, #288]	; (800b434 <osThreadNew+0x150>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2b02      	cmp	r3, #2
 800b316:	d106      	bne.n	800b326 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b318:	f3ef 8311 	mrs	r3, BASEPRI
 800b31c:	61fb      	str	r3, [r7, #28]
  return(result);
 800b31e:	69fb      	ldr	r3, [r7, #28]
 800b320:	2b00      	cmp	r3, #0
 800b322:	f040 8082 	bne.w	800b42a <osThreadNew+0x146>
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d07e      	beq.n	800b42a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800b32c:	2380      	movs	r3, #128	; 0x80
 800b32e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800b330:	2318      	movs	r3, #24
 800b332:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800b334:	2300      	movs	r3, #0
 800b336:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800b338:	f107 031b 	add.w	r3, r7, #27
 800b33c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800b33e:	f04f 33ff 	mov.w	r3, #4294967295
 800b342:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d045      	beq.n	800b3d6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d002      	beq.n	800b358 <osThreadNew+0x74>
        name = attr->name;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	699b      	ldr	r3, [r3, #24]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d002      	beq.n	800b366 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d008      	beq.n	800b37e <osThreadNew+0x9a>
 800b36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b36e:	2b38      	cmp	r3, #56	; 0x38
 800b370:	d805      	bhi.n	800b37e <osThreadNew+0x9a>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	f003 0301 	and.w	r3, r3, #1
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d001      	beq.n	800b382 <osThreadNew+0x9e>
        return (NULL);
 800b37e:	2300      	movs	r3, #0
 800b380:	e054      	b.n	800b42c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	695b      	ldr	r3, [r3, #20]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d003      	beq.n	800b392 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	695b      	ldr	r3, [r3, #20]
 800b38e:	089b      	lsrs	r3, r3, #2
 800b390:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00e      	beq.n	800b3b8 <osThreadNew+0xd4>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	2b5b      	cmp	r3, #91	; 0x5b
 800b3a0:	d90a      	bls.n	800b3b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d006      	beq.n	800b3b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	695b      	ldr	r3, [r3, #20]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d002      	beq.n	800b3b8 <osThreadNew+0xd4>
        mem = 1;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3b6:	e010      	b.n	800b3da <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d10c      	bne.n	800b3da <osThreadNew+0xf6>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d108      	bne.n	800b3da <osThreadNew+0xf6>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	691b      	ldr	r3, [r3, #16]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d104      	bne.n	800b3da <osThreadNew+0xf6>
          mem = 0;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3d4:	e001      	b.n	800b3da <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800b3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d110      	bne.n	800b402 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b3e8:	9202      	str	r2, [sp, #8]
 800b3ea:	9301      	str	r3, [sp, #4]
 800b3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b3f6:	68f8      	ldr	r0, [r7, #12]
 800b3f8:	f001 f8e2 	bl	800c5c0 <xTaskCreateStatic>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	617b      	str	r3, [r7, #20]
 800b400:	e013      	b.n	800b42a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800b402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b404:	2b00      	cmp	r3, #0
 800b406:	d110      	bne.n	800b42a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40a:	b29a      	uxth	r2, r3
 800b40c:	f107 0314 	add.w	r3, r7, #20
 800b410:	9301      	str	r3, [sp, #4]
 800b412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b414:	9300      	str	r3, [sp, #0]
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f001 f92c 	bl	800c678 <xTaskCreate>
 800b420:	4603      	mov	r3, r0
 800b422:	2b01      	cmp	r3, #1
 800b424:	d001      	beq.n	800b42a <osThreadNew+0x146>
          hTask = NULL;
 800b426:	2300      	movs	r3, #0
 800b428:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b42a:	697b      	ldr	r3, [r7, #20]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3738      	adds	r7, #56	; 0x38
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	200001b4 	.word	0x200001b4

0800b438 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b440:	f3ef 8305 	mrs	r3, IPSR
 800b444:	613b      	str	r3, [r7, #16]
  return(result);
 800b446:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10f      	bne.n	800b46c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b44c:	f3ef 8310 	mrs	r3, PRIMASK
 800b450:	60fb      	str	r3, [r7, #12]
  return(result);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d109      	bne.n	800b46c <osDelay+0x34>
 800b458:	4b0d      	ldr	r3, [pc, #52]	; (800b490 <osDelay+0x58>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2b02      	cmp	r3, #2
 800b45e:	d109      	bne.n	800b474 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b460:	f3ef 8311 	mrs	r3, BASEPRI
 800b464:	60bb      	str	r3, [r7, #8]
  return(result);
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d003      	beq.n	800b474 <osDelay+0x3c>
    stat = osErrorISR;
 800b46c:	f06f 0305 	mvn.w	r3, #5
 800b470:	617b      	str	r3, [r7, #20]
 800b472:	e007      	b.n	800b484 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b474:	2300      	movs	r3, #0
 800b476:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d002      	beq.n	800b484 <osDelay+0x4c>
      vTaskDelay(ticks);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f001 fab4 	bl	800c9ec <vTaskDelay>
    }
  }

  return (stat);
 800b484:	697b      	ldr	r3, [r7, #20]
}
 800b486:	4618      	mov	r0, r3
 800b488:	3718      	adds	r7, #24
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	200001b4 	.word	0x200001b4

0800b494 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b494:	b580      	push	{r7, lr}
 800b496:	b08a      	sub	sp, #40	; 0x28
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b49c:	2300      	movs	r3, #0
 800b49e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4a0:	f3ef 8305 	mrs	r3, IPSR
 800b4a4:	613b      	str	r3, [r7, #16]
  return(result);
 800b4a6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f040 8085 	bne.w	800b5b8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4ae:	f3ef 8310 	mrs	r3, PRIMASK
 800b4b2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d17e      	bne.n	800b5b8 <osMutexNew+0x124>
 800b4ba:	4b42      	ldr	r3, [pc, #264]	; (800b5c4 <osMutexNew+0x130>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	d105      	bne.n	800b4ce <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b4c2:	f3ef 8311 	mrs	r3, BASEPRI
 800b4c6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d174      	bne.n	800b5b8 <osMutexNew+0x124>
    if (attr != NULL) {
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d003      	beq.n	800b4dc <osMutexNew+0x48>
      type = attr->attr_bits;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	623b      	str	r3, [r7, #32]
 800b4da:	e001      	b.n	800b4e0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b4e0:	6a3b      	ldr	r3, [r7, #32]
 800b4e2:	f003 0301 	and.w	r3, r3, #1
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d002      	beq.n	800b4f0 <osMutexNew+0x5c>
      rmtx = 1U;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	61fb      	str	r3, [r7, #28]
 800b4ee:	e001      	b.n	800b4f4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b4f4:	6a3b      	ldr	r3, [r7, #32]
 800b4f6:	f003 0308 	and.w	r3, r3, #8
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d15c      	bne.n	800b5b8 <osMutexNew+0x124>
      mem = -1;
 800b4fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b502:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d015      	beq.n	800b536 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d006      	beq.n	800b520 <osMutexNew+0x8c>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	2b4f      	cmp	r3, #79	; 0x4f
 800b518:	d902      	bls.n	800b520 <osMutexNew+0x8c>
          mem = 1;
 800b51a:	2301      	movs	r3, #1
 800b51c:	61bb      	str	r3, [r7, #24]
 800b51e:	e00c      	b.n	800b53a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d108      	bne.n	800b53a <osMutexNew+0xa6>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d104      	bne.n	800b53a <osMutexNew+0xa6>
            mem = 0;
 800b530:	2300      	movs	r3, #0
 800b532:	61bb      	str	r3, [r7, #24]
 800b534:	e001      	b.n	800b53a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800b536:	2300      	movs	r3, #0
 800b538:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d112      	bne.n	800b566 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d007      	beq.n	800b556 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	689b      	ldr	r3, [r3, #8]
 800b54a:	4619      	mov	r1, r3
 800b54c:	2004      	movs	r0, #4
 800b54e:	f000 fb15 	bl	800bb7c <xQueueCreateMutexStatic>
 800b552:	6278      	str	r0, [r7, #36]	; 0x24
 800b554:	e016      	b.n	800b584 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	4619      	mov	r1, r3
 800b55c:	2001      	movs	r0, #1
 800b55e:	f000 fb0d 	bl	800bb7c <xQueueCreateMutexStatic>
 800b562:	6278      	str	r0, [r7, #36]	; 0x24
 800b564:	e00e      	b.n	800b584 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d10b      	bne.n	800b584 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d004      	beq.n	800b57c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800b572:	2004      	movs	r0, #4
 800b574:	f000 faea 	bl	800bb4c <xQueueCreateMutex>
 800b578:	6278      	str	r0, [r7, #36]	; 0x24
 800b57a:	e003      	b.n	800b584 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800b57c:	2001      	movs	r0, #1
 800b57e:	f000 fae5 	bl	800bb4c <xQueueCreateMutex>
 800b582:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00c      	beq.n	800b5a4 <osMutexNew+0x110>
        if (attr != NULL) {
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d003      	beq.n	800b598 <osMutexNew+0x104>
          name = attr->name;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	617b      	str	r3, [r7, #20]
 800b596:	e001      	b.n	800b59c <osMutexNew+0x108>
        } else {
          name = NULL;
 800b598:	2300      	movs	r3, #0
 800b59a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800b59c:	6979      	ldr	r1, [r7, #20]
 800b59e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5a0:	f000 ffb2 	bl	800c508 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d006      	beq.n	800b5b8 <osMutexNew+0x124>
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d003      	beq.n	800b5b8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b2:	f043 0301 	orr.w	r3, r3, #1
 800b5b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3728      	adds	r7, #40	; 0x28
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	200001b4 	.word	0x200001b4

0800b5c8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b08c      	sub	sp, #48	; 0x30
 800b5cc:	af02      	add	r7, sp, #8
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5d8:	f3ef 8305 	mrs	r3, IPSR
 800b5dc:	61bb      	str	r3, [r7, #24]
  return(result);
 800b5de:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d16f      	bne.n	800b6c4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5e4:	f3ef 8310 	mrs	r3, PRIMASK
 800b5e8:	617b      	str	r3, [r7, #20]
  return(result);
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d169      	bne.n	800b6c4 <osMessageQueueNew+0xfc>
 800b5f0:	4b37      	ldr	r3, [pc, #220]	; (800b6d0 <osMessageQueueNew+0x108>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d105      	bne.n	800b604 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b5f8:	f3ef 8311 	mrs	r3, BASEPRI
 800b5fc:	613b      	str	r3, [r7, #16]
  return(result);
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d15f      	bne.n	800b6c4 <osMessageQueueNew+0xfc>
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d05c      	beq.n	800b6c4 <osMessageQueueNew+0xfc>
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d059      	beq.n	800b6c4 <osMessageQueueNew+0xfc>
    mem = -1;
 800b610:	f04f 33ff 	mov.w	r3, #4294967295
 800b614:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d029      	beq.n	800b670 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d012      	beq.n	800b64a <osMessageQueueNew+0x82>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	2b4f      	cmp	r3, #79	; 0x4f
 800b62a:	d90e      	bls.n	800b64a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b630:	2b00      	cmp	r3, #0
 800b632:	d00a      	beq.n	800b64a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	695a      	ldr	r2, [r3, #20]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	68b9      	ldr	r1, [r7, #8]
 800b63c:	fb01 f303 	mul.w	r3, r1, r3
 800b640:	429a      	cmp	r2, r3
 800b642:	d302      	bcc.n	800b64a <osMessageQueueNew+0x82>
        mem = 1;
 800b644:	2301      	movs	r3, #1
 800b646:	623b      	str	r3, [r7, #32]
 800b648:	e014      	b.n	800b674 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	689b      	ldr	r3, [r3, #8]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d110      	bne.n	800b674 <osMessageQueueNew+0xac>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d10c      	bne.n	800b674 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d108      	bne.n	800b674 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	695b      	ldr	r3, [r3, #20]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d104      	bne.n	800b674 <osMessageQueueNew+0xac>
          mem = 0;
 800b66a:	2300      	movs	r3, #0
 800b66c:	623b      	str	r3, [r7, #32]
 800b66e:	e001      	b.n	800b674 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800b670:	2300      	movs	r3, #0
 800b672:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b674:	6a3b      	ldr	r3, [r7, #32]
 800b676:	2b01      	cmp	r3, #1
 800b678:	d10b      	bne.n	800b692 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	691a      	ldr	r2, [r3, #16]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	2100      	movs	r1, #0
 800b684:	9100      	str	r1, [sp, #0]
 800b686:	68b9      	ldr	r1, [r7, #8]
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f000 f96d 	bl	800b968 <xQueueGenericCreateStatic>
 800b68e:	6278      	str	r0, [r7, #36]	; 0x24
 800b690:	e008      	b.n	800b6a4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800b692:	6a3b      	ldr	r3, [r7, #32]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d105      	bne.n	800b6a4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800b698:	2200      	movs	r2, #0
 800b69a:	68b9      	ldr	r1, [r7, #8]
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f000 f9da 	bl	800ba56 <xQueueGenericCreate>
 800b6a2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00c      	beq.n	800b6c4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d003      	beq.n	800b6b8 <osMessageQueueNew+0xf0>
        name = attr->name;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	61fb      	str	r3, [r7, #28]
 800b6b6:	e001      	b.n	800b6bc <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800b6bc:	69f9      	ldr	r1, [r7, #28]
 800b6be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6c0:	f000 ff22 	bl	800c508 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3728      	adds	r7, #40	; 0x28
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	200001b4 	.word	0x200001b4

0800b6d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b6d4:	b480      	push	{r7}
 800b6d6:	b085      	sub	sp, #20
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	4a06      	ldr	r2, [pc, #24]	; (800b6fc <vApplicationGetIdleTaskMemory+0x28>)
 800b6e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	4a05      	ldr	r2, [pc, #20]	; (800b700 <vApplicationGetIdleTaskMemory+0x2c>)
 800b6ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2280      	movs	r2, #128	; 0x80
 800b6f0:	601a      	str	r2, [r3, #0]
}
 800b6f2:	bf00      	nop
 800b6f4:	3714      	adds	r7, #20
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bc80      	pop	{r7}
 800b6fa:	4770      	bx	lr
 800b6fc:	200001b8 	.word	0x200001b8
 800b700:	20000214 	.word	0x20000214

0800b704 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b704:	b480      	push	{r7}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	4a07      	ldr	r2, [pc, #28]	; (800b730 <vApplicationGetTimerTaskMemory+0x2c>)
 800b714:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	4a06      	ldr	r2, [pc, #24]	; (800b734 <vApplicationGetTimerTaskMemory+0x30>)
 800b71a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b722:	601a      	str	r2, [r3, #0]
}
 800b724:	bf00      	nop
 800b726:	3714      	adds	r7, #20
 800b728:	46bd      	mov	sp, r7
 800b72a:	bc80      	pop	{r7}
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	20000414 	.word	0x20000414
 800b734:	20000470 	.word	0x20000470

0800b738 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f103 0208 	add.w	r2, r3, #8
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f04f 32ff 	mov.w	r2, #4294967295
 800b750:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f103 0208 	add.w	r2, r3, #8
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f103 0208 	add.w	r2, r3, #8
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b76c:	bf00      	nop
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	bc80      	pop	{r7}
 800b774:	4770      	bx	lr

0800b776 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b776:	b480      	push	{r7}
 800b778:	b083      	sub	sp, #12
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b784:	bf00      	nop
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	bc80      	pop	{r7}
 800b78c:	4770      	bx	lr

0800b78e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b78e:	b480      	push	{r7}
 800b790:	b085      	sub	sp, #20
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
 800b796:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	68fa      	ldr	r2, [r7, #12]
 800b7a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	689a      	ldr	r2, [r3, #8]
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	683a      	ldr	r2, [r7, #0]
 800b7b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	683a      	ldr	r2, [r7, #0]
 800b7b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	1c5a      	adds	r2, r3, #1
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	601a      	str	r2, [r3, #0]
}
 800b7ca:	bf00      	nop
 800b7cc:	3714      	adds	r7, #20
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bc80      	pop	{r7}
 800b7d2:	4770      	bx	lr

0800b7d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b085      	sub	sp, #20
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ea:	d103      	bne.n	800b7f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	691b      	ldr	r3, [r3, #16]
 800b7f0:	60fb      	str	r3, [r7, #12]
 800b7f2:	e00c      	b.n	800b80e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	3308      	adds	r3, #8
 800b7f8:	60fb      	str	r3, [r7, #12]
 800b7fa:	e002      	b.n	800b802 <vListInsert+0x2e>
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	60fb      	str	r3, [r7, #12]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	68ba      	ldr	r2, [r7, #8]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d2f6      	bcs.n	800b7fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	685a      	ldr	r2, [r3, #4]
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	683a      	ldr	r2, [r7, #0]
 800b81c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	683a      	ldr	r2, [r7, #0]
 800b828:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	1c5a      	adds	r2, r3, #1
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	601a      	str	r2, [r3, #0]
}
 800b83a:	bf00      	nop
 800b83c:	3714      	adds	r7, #20
 800b83e:	46bd      	mov	sp, r7
 800b840:	bc80      	pop	{r7}
 800b842:	4770      	bx	lr

0800b844 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	691b      	ldr	r3, [r3, #16]
 800b850:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	6892      	ldr	r2, [r2, #8]
 800b85a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	6852      	ldr	r2, [r2, #4]
 800b864:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d103      	bne.n	800b878 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	689a      	ldr	r2, [r3, #8]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	1e5a      	subs	r2, r3, #1
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3714      	adds	r7, #20
 800b890:	46bd      	mov	sp, r7
 800b892:	bc80      	pop	{r7}
 800b894:	4770      	bx	lr
	...

0800b898 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10a      	bne.n	800b8c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b0:	f383 8811 	msr	BASEPRI, r3
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b8be:	bf00      	nop
 800b8c0:	e7fe      	b.n	800b8c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b8c2:	f002 fb33 	bl	800df2c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ce:	68f9      	ldr	r1, [r7, #12]
 800b8d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b8d2:	fb01 f303 	mul.w	r3, r1, r3
 800b8d6:	441a      	add	r2, r3
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8f2:	3b01      	subs	r3, #1
 800b8f4:	68f9      	ldr	r1, [r7, #12]
 800b8f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b8f8:	fb01 f303 	mul.w	r3, r1, r3
 800b8fc:	441a      	add	r2, r3
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	22ff      	movs	r2, #255	; 0xff
 800b906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	22ff      	movs	r2, #255	; 0xff
 800b90e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d114      	bne.n	800b942 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	691b      	ldr	r3, [r3, #16]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d01a      	beq.n	800b956 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	3310      	adds	r3, #16
 800b924:	4618      	mov	r0, r3
 800b926:	f001 fb1f 	bl	800cf68 <xTaskRemoveFromEventList>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d012      	beq.n	800b956 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b930:	4b0c      	ldr	r3, [pc, #48]	; (800b964 <xQueueGenericReset+0xcc>)
 800b932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b936:	601a      	str	r2, [r3, #0]
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	e009      	b.n	800b956 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	3310      	adds	r3, #16
 800b946:	4618      	mov	r0, r3
 800b948:	f7ff fef6 	bl	800b738 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	3324      	adds	r3, #36	; 0x24
 800b950:	4618      	mov	r0, r3
 800b952:	f7ff fef1 	bl	800b738 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b956:	f002 fb19 	bl	800df8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b95a:	2301      	movs	r3, #1
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3710      	adds	r7, #16
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	e000ed04 	.word	0xe000ed04

0800b968 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b08e      	sub	sp, #56	; 0x38
 800b96c:	af02      	add	r7, sp, #8
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	607a      	str	r2, [r7, #4]
 800b974:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d10a      	bne.n	800b992 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b980:	f383 8811 	msr	BASEPRI, r3
 800b984:	f3bf 8f6f 	isb	sy
 800b988:	f3bf 8f4f 	dsb	sy
 800b98c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b98e:	bf00      	nop
 800b990:	e7fe      	b.n	800b990 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10a      	bne.n	800b9ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b9aa:	bf00      	nop
 800b9ac:	e7fe      	b.n	800b9ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d002      	beq.n	800b9ba <xQueueGenericCreateStatic+0x52>
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <xQueueGenericCreateStatic+0x56>
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e000      	b.n	800b9c0 <xQueueGenericCreateStatic+0x58>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d10a      	bne.n	800b9da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c8:	f383 8811 	msr	BASEPRI, r3
 800b9cc:	f3bf 8f6f 	isb	sy
 800b9d0:	f3bf 8f4f 	dsb	sy
 800b9d4:	623b      	str	r3, [r7, #32]
}
 800b9d6:	bf00      	nop
 800b9d8:	e7fe      	b.n	800b9d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d102      	bne.n	800b9e6 <xQueueGenericCreateStatic+0x7e>
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d101      	bne.n	800b9ea <xQueueGenericCreateStatic+0x82>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e000      	b.n	800b9ec <xQueueGenericCreateStatic+0x84>
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d10a      	bne.n	800ba06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f4:	f383 8811 	msr	BASEPRI, r3
 800b9f8:	f3bf 8f6f 	isb	sy
 800b9fc:	f3bf 8f4f 	dsb	sy
 800ba00:	61fb      	str	r3, [r7, #28]
}
 800ba02:	bf00      	nop
 800ba04:	e7fe      	b.n	800ba04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ba06:	2350      	movs	r3, #80	; 0x50
 800ba08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2b50      	cmp	r3, #80	; 0x50
 800ba0e:	d00a      	beq.n	800ba26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ba10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	61bb      	str	r3, [r7, #24]
}
 800ba22:	bf00      	nop
 800ba24:	e7fe      	b.n	800ba24 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ba2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00d      	beq.n	800ba4c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ba30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba32:	2201      	movs	r2, #1
 800ba34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba38:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ba3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba3e:	9300      	str	r3, [sp, #0]
 800ba40:	4613      	mov	r3, r2
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	68b9      	ldr	r1, [r7, #8]
 800ba46:	68f8      	ldr	r0, [r7, #12]
 800ba48:	f000 f843 	bl	800bad2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ba4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3730      	adds	r7, #48	; 0x30
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b08a      	sub	sp, #40	; 0x28
 800ba5a:	af02      	add	r7, sp, #8
 800ba5c:	60f8      	str	r0, [r7, #12]
 800ba5e:	60b9      	str	r1, [r7, #8]
 800ba60:	4613      	mov	r3, r2
 800ba62:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d10a      	bne.n	800ba80 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ba6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6e:	f383 8811 	msr	BASEPRI, r3
 800ba72:	f3bf 8f6f 	isb	sy
 800ba76:	f3bf 8f4f 	dsb	sy
 800ba7a:	613b      	str	r3, [r7, #16]
}
 800ba7c:	bf00      	nop
 800ba7e:	e7fe      	b.n	800ba7e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d102      	bne.n	800ba8c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ba86:	2300      	movs	r3, #0
 800ba88:	61fb      	str	r3, [r7, #28]
 800ba8a:	e004      	b.n	800ba96 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	68ba      	ldr	r2, [r7, #8]
 800ba90:	fb02 f303 	mul.w	r3, r2, r3
 800ba94:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ba96:	69fb      	ldr	r3, [r7, #28]
 800ba98:	3350      	adds	r3, #80	; 0x50
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f002 fb46 	bl	800e12c <pvPortMalloc>
 800baa0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800baa2:	69bb      	ldr	r3, [r7, #24]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d00f      	beq.n	800bac8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	3350      	adds	r3, #80	; 0x50
 800baac:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	2200      	movs	r2, #0
 800bab2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bab6:	79fa      	ldrb	r2, [r7, #7]
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	4613      	mov	r3, r2
 800babe:	697a      	ldr	r2, [r7, #20]
 800bac0:	68b9      	ldr	r1, [r7, #8]
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	f000 f805 	bl	800bad2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800bac8:	69bb      	ldr	r3, [r7, #24]
	}
 800baca:	4618      	mov	r0, r3
 800bacc:	3720      	adds	r7, #32
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b084      	sub	sp, #16
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	60f8      	str	r0, [r7, #12]
 800bada:	60b9      	str	r1, [r7, #8]
 800badc:	607a      	str	r2, [r7, #4]
 800bade:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d103      	bne.n	800baee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	69ba      	ldr	r2, [r7, #24]
 800baea:	601a      	str	r2, [r3, #0]
 800baec:	e002      	b.n	800baf4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800baee:	69bb      	ldr	r3, [r7, #24]
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	68fa      	ldr	r2, [r7, #12]
 800baf8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	68ba      	ldr	r2, [r7, #8]
 800bafe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bb00:	2101      	movs	r1, #1
 800bb02:	69b8      	ldr	r0, [r7, #24]
 800bb04:	f7ff fec8 	bl	800b898 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	78fa      	ldrb	r2, [r7, #3]
 800bb0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bb10:	bf00      	nop
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00e      	beq.n	800bb44 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bb38:	2300      	movs	r3, #0
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f838 	bl	800bbb4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bb44:	bf00      	nop
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b086      	sub	sp, #24
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	4603      	mov	r3, r0
 800bb54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bb56:	2301      	movs	r3, #1
 800bb58:	617b      	str	r3, [r7, #20]
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bb5e:	79fb      	ldrb	r3, [r7, #7]
 800bb60:	461a      	mov	r2, r3
 800bb62:	6939      	ldr	r1, [r7, #16]
 800bb64:	6978      	ldr	r0, [r7, #20]
 800bb66:	f7ff ff76 	bl	800ba56 <xQueueGenericCreate>
 800bb6a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	f7ff ffd3 	bl	800bb18 <prvInitialiseMutex>

		return pxNewQueue;
 800bb72:	68fb      	ldr	r3, [r7, #12]
	}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3718      	adds	r7, #24
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b088      	sub	sp, #32
 800bb80:	af02      	add	r7, sp, #8
 800bb82:	4603      	mov	r3, r0
 800bb84:	6039      	str	r1, [r7, #0]
 800bb86:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	617b      	str	r3, [r7, #20]
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bb90:	79fb      	ldrb	r3, [r7, #7]
 800bb92:	9300      	str	r3, [sp, #0]
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	2200      	movs	r2, #0
 800bb98:	6939      	ldr	r1, [r7, #16]
 800bb9a:	6978      	ldr	r0, [r7, #20]
 800bb9c:	f7ff fee4 	bl	800b968 <xQueueGenericCreateStatic>
 800bba0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f7ff ffb8 	bl	800bb18 <prvInitialiseMutex>

		return pxNewQueue;
 800bba8:	68fb      	ldr	r3, [r7, #12]
	}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3718      	adds	r7, #24
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
	...

0800bbb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b08e      	sub	sp, #56	; 0x38
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	607a      	str	r2, [r7, #4]
 800bbc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d10a      	bne.n	800bbe6 <xQueueGenericSend+0x32>
	__asm volatile
 800bbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd4:	f383 8811 	msr	BASEPRI, r3
 800bbd8:	f3bf 8f6f 	isb	sy
 800bbdc:	f3bf 8f4f 	dsb	sy
 800bbe0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bbe2:	bf00      	nop
 800bbe4:	e7fe      	b.n	800bbe4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d103      	bne.n	800bbf4 <xQueueGenericSend+0x40>
 800bbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d101      	bne.n	800bbf8 <xQueueGenericSend+0x44>
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	e000      	b.n	800bbfa <xQueueGenericSend+0x46>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d10a      	bne.n	800bc14 <xQueueGenericSend+0x60>
	__asm volatile
 800bbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc02:	f383 8811 	msr	BASEPRI, r3
 800bc06:	f3bf 8f6f 	isb	sy
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc10:	bf00      	nop
 800bc12:	e7fe      	b.n	800bc12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	2b02      	cmp	r3, #2
 800bc18:	d103      	bne.n	800bc22 <xQueueGenericSend+0x6e>
 800bc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d101      	bne.n	800bc26 <xQueueGenericSend+0x72>
 800bc22:	2301      	movs	r3, #1
 800bc24:	e000      	b.n	800bc28 <xQueueGenericSend+0x74>
 800bc26:	2300      	movs	r3, #0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d10a      	bne.n	800bc42 <xQueueGenericSend+0x8e>
	__asm volatile
 800bc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc30:	f383 8811 	msr	BASEPRI, r3
 800bc34:	f3bf 8f6f 	isb	sy
 800bc38:	f3bf 8f4f 	dsb	sy
 800bc3c:	623b      	str	r3, [r7, #32]
}
 800bc3e:	bf00      	nop
 800bc40:	e7fe      	b.n	800bc40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc42:	f001 fb8b 	bl	800d35c <xTaskGetSchedulerState>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d102      	bne.n	800bc52 <xQueueGenericSend+0x9e>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d101      	bne.n	800bc56 <xQueueGenericSend+0xa2>
 800bc52:	2301      	movs	r3, #1
 800bc54:	e000      	b.n	800bc58 <xQueueGenericSend+0xa4>
 800bc56:	2300      	movs	r3, #0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10a      	bne.n	800bc72 <xQueueGenericSend+0xbe>
	__asm volatile
 800bc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc60:	f383 8811 	msr	BASEPRI, r3
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	61fb      	str	r3, [r7, #28]
}
 800bc6e:	bf00      	nop
 800bc70:	e7fe      	b.n	800bc70 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc72:	f002 f95b 	bl	800df2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d302      	bcc.n	800bc88 <xQueueGenericSend+0xd4>
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d129      	bne.n	800bcdc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc88:	683a      	ldr	r2, [r7, #0]
 800bc8a:	68b9      	ldr	r1, [r7, #8]
 800bc8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc8e:	f000 fb2a 	bl	800c2e6 <prvCopyDataToQueue>
 800bc92:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d010      	beq.n	800bcbe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9e:	3324      	adds	r3, #36	; 0x24
 800bca0:	4618      	mov	r0, r3
 800bca2:	f001 f961 	bl	800cf68 <xTaskRemoveFromEventList>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d013      	beq.n	800bcd4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bcac:	4b3f      	ldr	r3, [pc, #252]	; (800bdac <xQueueGenericSend+0x1f8>)
 800bcae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcb2:	601a      	str	r2, [r3, #0]
 800bcb4:	f3bf 8f4f 	dsb	sy
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	e00a      	b.n	800bcd4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d007      	beq.n	800bcd4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bcc4:	4b39      	ldr	r3, [pc, #228]	; (800bdac <xQueueGenericSend+0x1f8>)
 800bcc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcca:	601a      	str	r2, [r3, #0]
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bcd4:	f002 f95a 	bl	800df8c <vPortExitCritical>
				return pdPASS;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	e063      	b.n	800bda4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d103      	bne.n	800bcea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bce2:	f002 f953 	bl	800df8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bce6:	2300      	movs	r3, #0
 800bce8:	e05c      	b.n	800bda4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d106      	bne.n	800bcfe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcf0:	f107 0314 	add.w	r3, r7, #20
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f001 f99b 	bl	800d030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bcfe:	f002 f945 	bl	800df8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd02:	f000 ff0d 	bl	800cb20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd06:	f002 f911 	bl	800df2c <vPortEnterCritical>
 800bd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd10:	b25b      	sxtb	r3, r3
 800bd12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd16:	d103      	bne.n	800bd20 <xQueueGenericSend+0x16c>
 800bd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd26:	b25b      	sxtb	r3, r3
 800bd28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd2c:	d103      	bne.n	800bd36 <xQueueGenericSend+0x182>
 800bd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd30:	2200      	movs	r2, #0
 800bd32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd36:	f002 f929 	bl	800df8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd3a:	1d3a      	adds	r2, r7, #4
 800bd3c:	f107 0314 	add.w	r3, r7, #20
 800bd40:	4611      	mov	r1, r2
 800bd42:	4618      	mov	r0, r3
 800bd44:	f001 f98a 	bl	800d05c <xTaskCheckForTimeOut>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d124      	bne.n	800bd98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bd4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd50:	f000 fbc1 	bl	800c4d6 <prvIsQueueFull>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d018      	beq.n	800bd8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	3310      	adds	r3, #16
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	4611      	mov	r1, r2
 800bd62:	4618      	mov	r0, r3
 800bd64:	f001 f8b0 	bl	800cec8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bd68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd6a:	f000 fb4c 	bl	800c406 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bd6e:	f000 fee5 	bl	800cb3c <xTaskResumeAll>
 800bd72:	4603      	mov	r3, r0
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	f47f af7c 	bne.w	800bc72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bd7a:	4b0c      	ldr	r3, [pc, #48]	; (800bdac <xQueueGenericSend+0x1f8>)
 800bd7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd80:	601a      	str	r2, [r3, #0]
 800bd82:	f3bf 8f4f 	dsb	sy
 800bd86:	f3bf 8f6f 	isb	sy
 800bd8a:	e772      	b.n	800bc72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bd8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd8e:	f000 fb3a 	bl	800c406 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd92:	f000 fed3 	bl	800cb3c <xTaskResumeAll>
 800bd96:	e76c      	b.n	800bc72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bd98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd9a:	f000 fb34 	bl	800c406 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd9e:	f000 fecd 	bl	800cb3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bda2:	2300      	movs	r3, #0
		}
	}
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3738      	adds	r7, #56	; 0x38
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	e000ed04 	.word	0xe000ed04

0800bdb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b08e      	sub	sp, #56	; 0x38
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	607a      	str	r2, [r7, #4]
 800bdbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d10a      	bne.n	800bdde <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdcc:	f383 8811 	msr	BASEPRI, r3
 800bdd0:	f3bf 8f6f 	isb	sy
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bdda:	bf00      	nop
 800bddc:	e7fe      	b.n	800bddc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d103      	bne.n	800bdec <xQueueGenericSendFromISR+0x3c>
 800bde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d101      	bne.n	800bdf0 <xQueueGenericSendFromISR+0x40>
 800bdec:	2301      	movs	r3, #1
 800bdee:	e000      	b.n	800bdf2 <xQueueGenericSendFromISR+0x42>
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d10a      	bne.n	800be0c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bdf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfa:	f383 8811 	msr	BASEPRI, r3
 800bdfe:	f3bf 8f6f 	isb	sy
 800be02:	f3bf 8f4f 	dsb	sy
 800be06:	623b      	str	r3, [r7, #32]
}
 800be08:	bf00      	nop
 800be0a:	e7fe      	b.n	800be0a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	2b02      	cmp	r3, #2
 800be10:	d103      	bne.n	800be1a <xQueueGenericSendFromISR+0x6a>
 800be12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be16:	2b01      	cmp	r3, #1
 800be18:	d101      	bne.n	800be1e <xQueueGenericSendFromISR+0x6e>
 800be1a:	2301      	movs	r3, #1
 800be1c:	e000      	b.n	800be20 <xQueueGenericSendFromISR+0x70>
 800be1e:	2300      	movs	r3, #0
 800be20:	2b00      	cmp	r3, #0
 800be22:	d10a      	bne.n	800be3a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800be24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be28:	f383 8811 	msr	BASEPRI, r3
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f3bf 8f4f 	dsb	sy
 800be34:	61fb      	str	r3, [r7, #28]
}
 800be36:	bf00      	nop
 800be38:	e7fe      	b.n	800be38 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be3a:	f002 f939 	bl	800e0b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800be3e:	f3ef 8211 	mrs	r2, BASEPRI
 800be42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be46:	f383 8811 	msr	BASEPRI, r3
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	61ba      	str	r2, [r7, #24]
 800be54:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800be56:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be62:	429a      	cmp	r2, r3
 800be64:	d302      	bcc.n	800be6c <xQueueGenericSendFromISR+0xbc>
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	2b02      	cmp	r3, #2
 800be6a:	d12c      	bne.n	800bec6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800be6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be76:	683a      	ldr	r2, [r7, #0]
 800be78:	68b9      	ldr	r1, [r7, #8]
 800be7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be7c:	f000 fa33 	bl	800c2e6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800be80:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800be84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be88:	d112      	bne.n	800beb0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d016      	beq.n	800bec0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be94:	3324      	adds	r3, #36	; 0x24
 800be96:	4618      	mov	r0, r3
 800be98:	f001 f866 	bl	800cf68 <xTaskRemoveFromEventList>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00e      	beq.n	800bec0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00b      	beq.n	800bec0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2201      	movs	r2, #1
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	e007      	b.n	800bec0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800beb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800beb4:	3301      	adds	r3, #1
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	b25a      	sxtb	r2, r3
 800beba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bec0:	2301      	movs	r3, #1
 800bec2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bec4:	e001      	b.n	800beca <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bec6:	2300      	movs	r3, #0
 800bec8:	637b      	str	r3, [r7, #52]	; 0x34
 800beca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800becc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bed4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3738      	adds	r7, #56	; 0x38
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b08c      	sub	sp, #48	; 0x30
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800beec:	2300      	movs	r3, #0
 800beee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d10a      	bne.n	800bf10 <xQueueReceive+0x30>
	__asm volatile
 800befa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befe:	f383 8811 	msr	BASEPRI, r3
 800bf02:	f3bf 8f6f 	isb	sy
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	623b      	str	r3, [r7, #32]
}
 800bf0c:	bf00      	nop
 800bf0e:	e7fe      	b.n	800bf0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d103      	bne.n	800bf1e <xQueueReceive+0x3e>
 800bf16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d101      	bne.n	800bf22 <xQueueReceive+0x42>
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e000      	b.n	800bf24 <xQueueReceive+0x44>
 800bf22:	2300      	movs	r3, #0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d10a      	bne.n	800bf3e <xQueueReceive+0x5e>
	__asm volatile
 800bf28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2c:	f383 8811 	msr	BASEPRI, r3
 800bf30:	f3bf 8f6f 	isb	sy
 800bf34:	f3bf 8f4f 	dsb	sy
 800bf38:	61fb      	str	r3, [r7, #28]
}
 800bf3a:	bf00      	nop
 800bf3c:	e7fe      	b.n	800bf3c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf3e:	f001 fa0d 	bl	800d35c <xTaskGetSchedulerState>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d102      	bne.n	800bf4e <xQueueReceive+0x6e>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d101      	bne.n	800bf52 <xQueueReceive+0x72>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e000      	b.n	800bf54 <xQueueReceive+0x74>
 800bf52:	2300      	movs	r3, #0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d10a      	bne.n	800bf6e <xQueueReceive+0x8e>
	__asm volatile
 800bf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5c:	f383 8811 	msr	BASEPRI, r3
 800bf60:	f3bf 8f6f 	isb	sy
 800bf64:	f3bf 8f4f 	dsb	sy
 800bf68:	61bb      	str	r3, [r7, #24]
}
 800bf6a:	bf00      	nop
 800bf6c:	e7fe      	b.n	800bf6c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf6e:	f001 ffdd 	bl	800df2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf76:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d01f      	beq.n	800bfbe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf7e:	68b9      	ldr	r1, [r7, #8]
 800bf80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf82:	f000 fa1a 	bl	800c3ba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf88:	1e5a      	subs	r2, r3, #1
 800bf8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf90:	691b      	ldr	r3, [r3, #16]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00f      	beq.n	800bfb6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf98:	3310      	adds	r3, #16
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f000 ffe4 	bl	800cf68 <xTaskRemoveFromEventList>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d007      	beq.n	800bfb6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bfa6:	4b3d      	ldr	r3, [pc, #244]	; (800c09c <xQueueReceive+0x1bc>)
 800bfa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfac:	601a      	str	r2, [r3, #0]
 800bfae:	f3bf 8f4f 	dsb	sy
 800bfb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bfb6:	f001 ffe9 	bl	800df8c <vPortExitCritical>
				return pdPASS;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e069      	b.n	800c092 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d103      	bne.n	800bfcc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bfc4:	f001 ffe2 	bl	800df8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	e062      	b.n	800c092 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d106      	bne.n	800bfe0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfd2:	f107 0310 	add.w	r3, r7, #16
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f001 f82a 	bl	800d030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfe0:	f001 ffd4 	bl	800df8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bfe4:	f000 fd9c 	bl	800cb20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfe8:	f001 ffa0 	bl	800df2c <vPortEnterCritical>
 800bfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bff2:	b25b      	sxtb	r3, r3
 800bff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff8:	d103      	bne.n	800c002 <xQueueReceive+0x122>
 800bffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c008:	b25b      	sxtb	r3, r3
 800c00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c00e:	d103      	bne.n	800c018 <xQueueReceive+0x138>
 800c010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c012:	2200      	movs	r2, #0
 800c014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c018:	f001 ffb8 	bl	800df8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c01c:	1d3a      	adds	r2, r7, #4
 800c01e:	f107 0310 	add.w	r3, r7, #16
 800c022:	4611      	mov	r1, r2
 800c024:	4618      	mov	r0, r3
 800c026:	f001 f819 	bl	800d05c <xTaskCheckForTimeOut>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d123      	bne.n	800c078 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c032:	f000 fa3a 	bl	800c4aa <prvIsQueueEmpty>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d017      	beq.n	800c06c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03e:	3324      	adds	r3, #36	; 0x24
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	4611      	mov	r1, r2
 800c044:	4618      	mov	r0, r3
 800c046:	f000 ff3f 	bl	800cec8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c04a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c04c:	f000 f9db 	bl	800c406 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c050:	f000 fd74 	bl	800cb3c <xTaskResumeAll>
 800c054:	4603      	mov	r3, r0
 800c056:	2b00      	cmp	r3, #0
 800c058:	d189      	bne.n	800bf6e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c05a:	4b10      	ldr	r3, [pc, #64]	; (800c09c <xQueueReceive+0x1bc>)
 800c05c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c060:	601a      	str	r2, [r3, #0]
 800c062:	f3bf 8f4f 	dsb	sy
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	e780      	b.n	800bf6e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c06c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c06e:	f000 f9ca 	bl	800c406 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c072:	f000 fd63 	bl	800cb3c <xTaskResumeAll>
 800c076:	e77a      	b.n	800bf6e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c07a:	f000 f9c4 	bl	800c406 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c07e:	f000 fd5d 	bl	800cb3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c084:	f000 fa11 	bl	800c4aa <prvIsQueueEmpty>
 800c088:	4603      	mov	r3, r0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f43f af6f 	beq.w	800bf6e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c090:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c092:	4618      	mov	r0, r3
 800c094:	3730      	adds	r7, #48	; 0x30
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	e000ed04 	.word	0xe000ed04

0800c0a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b08e      	sub	sp, #56	; 0x38
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d10a      	bne.n	800c0d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	623b      	str	r3, [r7, #32]
}
 800c0ce:	bf00      	nop
 800c0d0:	e7fe      	b.n	800c0d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00a      	beq.n	800c0f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	61fb      	str	r3, [r7, #28]
}
 800c0ec:	bf00      	nop
 800c0ee:	e7fe      	b.n	800c0ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0f0:	f001 f934 	bl	800d35c <xTaskGetSchedulerState>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d102      	bne.n	800c100 <xQueueSemaphoreTake+0x60>
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d101      	bne.n	800c104 <xQueueSemaphoreTake+0x64>
 800c100:	2301      	movs	r3, #1
 800c102:	e000      	b.n	800c106 <xQueueSemaphoreTake+0x66>
 800c104:	2300      	movs	r3, #0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d10a      	bne.n	800c120 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10e:	f383 8811 	msr	BASEPRI, r3
 800c112:	f3bf 8f6f 	isb	sy
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	61bb      	str	r3, [r7, #24]
}
 800c11c:	bf00      	nop
 800c11e:	e7fe      	b.n	800c11e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c120:	f001 ff04 	bl	800df2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c128:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d024      	beq.n	800c17a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c132:	1e5a      	subs	r2, r3, #1
 800c134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c136:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d104      	bne.n	800c14a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800c140:	f001 fa8c 	bl	800d65c <pvTaskIncrementMutexHeldCount>
 800c144:	4602      	mov	r2, r0
 800c146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c148:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d00f      	beq.n	800c172 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c154:	3310      	adds	r3, #16
 800c156:	4618      	mov	r0, r3
 800c158:	f000 ff06 	bl	800cf68 <xTaskRemoveFromEventList>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d007      	beq.n	800c172 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c162:	4b54      	ldr	r3, [pc, #336]	; (800c2b4 <xQueueSemaphoreTake+0x214>)
 800c164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c168:	601a      	str	r2, [r3, #0]
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c172:	f001 ff0b 	bl	800df8c <vPortExitCritical>
				return pdPASS;
 800c176:	2301      	movs	r3, #1
 800c178:	e097      	b.n	800c2aa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d111      	bne.n	800c1a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00a      	beq.n	800c19c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18a:	f383 8811 	msr	BASEPRI, r3
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	f3bf 8f4f 	dsb	sy
 800c196:	617b      	str	r3, [r7, #20]
}
 800c198:	bf00      	nop
 800c19a:	e7fe      	b.n	800c19a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c19c:	f001 fef6 	bl	800df8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	e082      	b.n	800c2aa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d106      	bne.n	800c1b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1aa:	f107 030c 	add.w	r3, r7, #12
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f000 ff3e 	bl	800d030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1b8:	f001 fee8 	bl	800df8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1bc:	f000 fcb0 	bl	800cb20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1c0:	f001 feb4 	bl	800df2c <vPortEnterCritical>
 800c1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1ca:	b25b      	sxtb	r3, r3
 800c1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d0:	d103      	bne.n	800c1da <xQueueSemaphoreTake+0x13a>
 800c1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1e0:	b25b      	sxtb	r3, r3
 800c1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e6:	d103      	bne.n	800c1f0 <xQueueSemaphoreTake+0x150>
 800c1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1f0:	f001 fecc 	bl	800df8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1f4:	463a      	mov	r2, r7
 800c1f6:	f107 030c 	add.w	r3, r7, #12
 800c1fa:	4611      	mov	r1, r2
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f000 ff2d 	bl	800d05c <xTaskCheckForTimeOut>
 800c202:	4603      	mov	r3, r0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d132      	bne.n	800c26e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c208:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c20a:	f000 f94e 	bl	800c4aa <prvIsQueueEmpty>
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d026      	beq.n	800c262 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d109      	bne.n	800c230 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c21c:	f001 fe86 	bl	800df2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800c220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	4618      	mov	r0, r3
 800c226:	f001 f8b7 	bl	800d398 <xTaskPriorityInherit>
 800c22a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c22c:	f001 feae 	bl	800df8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c232:	3324      	adds	r3, #36	; 0x24
 800c234:	683a      	ldr	r2, [r7, #0]
 800c236:	4611      	mov	r1, r2
 800c238:	4618      	mov	r0, r3
 800c23a:	f000 fe45 	bl	800cec8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c23e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c240:	f000 f8e1 	bl	800c406 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c244:	f000 fc7a 	bl	800cb3c <xTaskResumeAll>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f47f af68 	bne.w	800c120 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c250:	4b18      	ldr	r3, [pc, #96]	; (800c2b4 <xQueueSemaphoreTake+0x214>)
 800c252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c256:	601a      	str	r2, [r3, #0]
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	f3bf 8f6f 	isb	sy
 800c260:	e75e      	b.n	800c120 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c264:	f000 f8cf 	bl	800c406 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c268:	f000 fc68 	bl	800cb3c <xTaskResumeAll>
 800c26c:	e758      	b.n	800c120 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c26e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c270:	f000 f8c9 	bl	800c406 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c274:	f000 fc62 	bl	800cb3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c278:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c27a:	f000 f916 	bl	800c4aa <prvIsQueueEmpty>
 800c27e:	4603      	mov	r3, r0
 800c280:	2b00      	cmp	r3, #0
 800c282:	f43f af4d 	beq.w	800c120 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d00d      	beq.n	800c2a8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c28c:	f001 fe4e 	bl	800df2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c292:	f000 f811 	bl	800c2b8 <prvGetDisinheritPriorityAfterTimeout>
 800c296:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800c298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f001 f956 	bl	800d550 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c2a4:	f001 fe72 	bl	800df8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c2a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3738      	adds	r7, #56	; 0x38
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	e000ed04 	.word	0xe000ed04

0800c2b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b085      	sub	sp, #20
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d006      	beq.n	800c2d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c2d2:	60fb      	str	r3, [r7, #12]
 800c2d4:	e001      	b.n	800c2da <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c2da:	68fb      	ldr	r3, [r7, #12]
	}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3714      	adds	r7, #20
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bc80      	pop	{r7}
 800c2e4:	4770      	bx	lr

0800c2e6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b086      	sub	sp, #24
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	60f8      	str	r0, [r7, #12]
 800c2ee:	60b9      	str	r1, [r7, #8]
 800c2f0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c300:	2b00      	cmp	r3, #0
 800c302:	d10d      	bne.n	800c320 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d14d      	bne.n	800c3a8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	4618      	mov	r0, r3
 800c312:	f001 f8af 	bl	800d474 <xTaskPriorityDisinherit>
 800c316:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2200      	movs	r2, #0
 800c31c:	605a      	str	r2, [r3, #4]
 800c31e:	e043      	b.n	800c3a8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d119      	bne.n	800c35a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	6898      	ldr	r0, [r3, #8]
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c32e:	461a      	mov	r2, r3
 800c330:	68b9      	ldr	r1, [r7, #8]
 800c332:	f002 fdb9 	bl	800eea8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	689a      	ldr	r2, [r3, #8]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c33e:	441a      	add	r2, r3
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	689a      	ldr	r2, [r3, #8]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d32b      	bcc.n	800c3a8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681a      	ldr	r2, [r3, #0]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	609a      	str	r2, [r3, #8]
 800c358:	e026      	b.n	800c3a8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	68d8      	ldr	r0, [r3, #12]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c362:	461a      	mov	r2, r3
 800c364:	68b9      	ldr	r1, [r7, #8]
 800c366:	f002 fd9f 	bl	800eea8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	68da      	ldr	r2, [r3, #12]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c372:	425b      	negs	r3, r3
 800c374:	441a      	add	r2, r3
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	68da      	ldr	r2, [r3, #12]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	429a      	cmp	r2, r3
 800c384:	d207      	bcs.n	800c396 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	685a      	ldr	r2, [r3, #4]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38e:	425b      	negs	r3, r3
 800c390:	441a      	add	r2, r3
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2b02      	cmp	r3, #2
 800c39a:	d105      	bne.n	800c3a8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d002      	beq.n	800c3a8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	1c5a      	adds	r2, r3, #1
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c3b0:	697b      	ldr	r3, [r7, #20]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3718      	adds	r7, #24
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b082      	sub	sp, #8
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
 800c3c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d018      	beq.n	800c3fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	68da      	ldr	r2, [r3, #12]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d4:	441a      	add	r2, r3
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	68da      	ldr	r2, [r3, #12]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d303      	bcc.n	800c3ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	68d9      	ldr	r1, [r3, #12]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	6838      	ldr	r0, [r7, #0]
 800c3fa:	f002 fd55 	bl	800eea8 <memcpy>
	}
}
 800c3fe:	bf00      	nop
 800c400:	3708      	adds	r7, #8
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}

0800c406 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c406:	b580      	push	{r7, lr}
 800c408:	b084      	sub	sp, #16
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c40e:	f001 fd8d 	bl	800df2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c418:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c41a:	e011      	b.n	800c440 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c420:	2b00      	cmp	r3, #0
 800c422:	d012      	beq.n	800c44a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	3324      	adds	r3, #36	; 0x24
 800c428:	4618      	mov	r0, r3
 800c42a:	f000 fd9d 	bl	800cf68 <xTaskRemoveFromEventList>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d001      	beq.n	800c438 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c434:	f000 fe74 	bl	800d120 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c438:	7bfb      	ldrb	r3, [r7, #15]
 800c43a:	3b01      	subs	r3, #1
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c444:	2b00      	cmp	r3, #0
 800c446:	dce9      	bgt.n	800c41c <prvUnlockQueue+0x16>
 800c448:	e000      	b.n	800c44c <prvUnlockQueue+0x46>
					break;
 800c44a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	22ff      	movs	r2, #255	; 0xff
 800c450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c454:	f001 fd9a 	bl	800df8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c458:	f001 fd68 	bl	800df2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c462:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c464:	e011      	b.n	800c48a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d012      	beq.n	800c494 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	3310      	adds	r3, #16
 800c472:	4618      	mov	r0, r3
 800c474:	f000 fd78 	bl	800cf68 <xTaskRemoveFromEventList>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d001      	beq.n	800c482 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c47e:	f000 fe4f 	bl	800d120 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c482:	7bbb      	ldrb	r3, [r7, #14]
 800c484:	3b01      	subs	r3, #1
 800c486:	b2db      	uxtb	r3, r3
 800c488:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c48a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	dce9      	bgt.n	800c466 <prvUnlockQueue+0x60>
 800c492:	e000      	b.n	800c496 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c494:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	22ff      	movs	r2, #255	; 0xff
 800c49a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c49e:	f001 fd75 	bl	800df8c <vPortExitCritical>
}
 800c4a2:	bf00      	nop
 800c4a4:	3710      	adds	r7, #16
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b084      	sub	sp, #16
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4b2:	f001 fd3b 	bl	800df2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d102      	bne.n	800c4c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	60fb      	str	r3, [r7, #12]
 800c4c2:	e001      	b.n	800c4c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4c8:	f001 fd60 	bl	800df8c <vPortExitCritical>

	return xReturn;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3710      	adds	r7, #16
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b084      	sub	sp, #16
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4de:	f001 fd25 	bl	800df2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d102      	bne.n	800c4f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	60fb      	str	r3, [r7, #12]
 800c4f2:	e001      	b.n	800c4f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4f8:	f001 fd48 	bl	800df8c <vPortExitCritical>

	return xReturn;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3710      	adds	r7, #16
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
	...

0800c508 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c512:	2300      	movs	r3, #0
 800c514:	60fb      	str	r3, [r7, #12]
 800c516:	e014      	b.n	800c542 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c518:	4a0e      	ldr	r2, [pc, #56]	; (800c554 <vQueueAddToRegistry+0x4c>)
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d10b      	bne.n	800c53c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c524:	490b      	ldr	r1, [pc, #44]	; (800c554 <vQueueAddToRegistry+0x4c>)
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	683a      	ldr	r2, [r7, #0]
 800c52a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c52e:	4a09      	ldr	r2, [pc, #36]	; (800c554 <vQueueAddToRegistry+0x4c>)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	00db      	lsls	r3, r3, #3
 800c534:	4413      	add	r3, r2
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c53a:	e006      	b.n	800c54a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	3301      	adds	r3, #1
 800c540:	60fb      	str	r3, [r7, #12]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2b07      	cmp	r3, #7
 800c546:	d9e7      	bls.n	800c518 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c548:	bf00      	nop
 800c54a:	bf00      	nop
 800c54c:	3714      	adds	r7, #20
 800c54e:	46bd      	mov	sp, r7
 800c550:	bc80      	pop	{r7}
 800c552:	4770      	bx	lr
 800c554:	200026d8 	.word	0x200026d8

0800c558 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b086      	sub	sp, #24
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c568:	f001 fce0 	bl	800df2c <vPortEnterCritical>
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c572:	b25b      	sxtb	r3, r3
 800c574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c578:	d103      	bne.n	800c582 <vQueueWaitForMessageRestricted+0x2a>
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c588:	b25b      	sxtb	r3, r3
 800c58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c58e:	d103      	bne.n	800c598 <vQueueWaitForMessageRestricted+0x40>
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	2200      	movs	r2, #0
 800c594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c598:	f001 fcf8 	bl	800df8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d106      	bne.n	800c5b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	3324      	adds	r3, #36	; 0x24
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	68b9      	ldr	r1, [r7, #8]
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f000 fcaf 	bl	800cf10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c5b2:	6978      	ldr	r0, [r7, #20]
 800c5b4:	f7ff ff27 	bl	800c406 <prvUnlockQueue>
	}
 800c5b8:	bf00      	nop
 800c5ba:	3718      	adds	r7, #24
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b08e      	sub	sp, #56	; 0x38
 800c5c4:	af04      	add	r7, sp, #16
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	607a      	str	r2, [r7, #4]
 800c5cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d10a      	bne.n	800c5ea <xTaskCreateStatic+0x2a>
	__asm volatile
 800c5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d8:	f383 8811 	msr	BASEPRI, r3
 800c5dc:	f3bf 8f6f 	isb	sy
 800c5e0:	f3bf 8f4f 	dsb	sy
 800c5e4:	623b      	str	r3, [r7, #32]
}
 800c5e6:	bf00      	nop
 800c5e8:	e7fe      	b.n	800c5e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10a      	bne.n	800c606 <xTaskCreateStatic+0x46>
	__asm volatile
 800c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f4:	f383 8811 	msr	BASEPRI, r3
 800c5f8:	f3bf 8f6f 	isb	sy
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	61fb      	str	r3, [r7, #28]
}
 800c602:	bf00      	nop
 800c604:	e7fe      	b.n	800c604 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c606:	235c      	movs	r3, #92	; 0x5c
 800c608:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	2b5c      	cmp	r3, #92	; 0x5c
 800c60e:	d00a      	beq.n	800c626 <xTaskCreateStatic+0x66>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	61bb      	str	r3, [r7, #24]
}
 800c622:	bf00      	nop
 800c624:	e7fe      	b.n	800c624 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d01e      	beq.n	800c66a <xTaskCreateStatic+0xaa>
 800c62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d01b      	beq.n	800c66a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c634:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c63a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63e:	2202      	movs	r2, #2
 800c640:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c644:	2300      	movs	r3, #0
 800c646:	9303      	str	r3, [sp, #12]
 800c648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64a:	9302      	str	r3, [sp, #8]
 800c64c:	f107 0314 	add.w	r3, r7, #20
 800c650:	9301      	str	r3, [sp, #4]
 800c652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c654:	9300      	str	r3, [sp, #0]
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	68b9      	ldr	r1, [r7, #8]
 800c65c:	68f8      	ldr	r0, [r7, #12]
 800c65e:	f000 f850 	bl	800c702 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c662:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c664:	f000 f8d4 	bl	800c810 <prvAddNewTaskToReadyList>
 800c668:	e001      	b.n	800c66e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800c66a:	2300      	movs	r3, #0
 800c66c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c66e:	697b      	ldr	r3, [r7, #20]
	}
 800c670:	4618      	mov	r0, r3
 800c672:	3728      	adds	r7, #40	; 0x28
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b08c      	sub	sp, #48	; 0x30
 800c67c:	af04      	add	r7, sp, #16
 800c67e:	60f8      	str	r0, [r7, #12]
 800c680:	60b9      	str	r1, [r7, #8]
 800c682:	603b      	str	r3, [r7, #0]
 800c684:	4613      	mov	r3, r2
 800c686:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c688:	88fb      	ldrh	r3, [r7, #6]
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	4618      	mov	r0, r3
 800c68e:	f001 fd4d 	bl	800e12c <pvPortMalloc>
 800c692:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d00e      	beq.n	800c6b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800c69a:	205c      	movs	r0, #92	; 0x5c
 800c69c:	f001 fd46 	bl	800e12c <pvPortMalloc>
 800c6a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d003      	beq.n	800c6b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	697a      	ldr	r2, [r7, #20]
 800c6ac:	631a      	str	r2, [r3, #48]	; 0x30
 800c6ae:	e005      	b.n	800c6bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c6b0:	6978      	ldr	r0, [r7, #20]
 800c6b2:	f001 fdff 	bl	800e2b4 <vPortFree>
 800c6b6:	e001      	b.n	800c6bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d017      	beq.n	800c6f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6ca:	88fa      	ldrh	r2, [r7, #6]
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	9303      	str	r3, [sp, #12]
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	9302      	str	r3, [sp, #8]
 800c6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d6:	9301      	str	r3, [sp, #4]
 800c6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6da:	9300      	str	r3, [sp, #0]
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	68b9      	ldr	r1, [r7, #8]
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f000 f80e 	bl	800c702 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6e6:	69f8      	ldr	r0, [r7, #28]
 800c6e8:	f000 f892 	bl	800c810 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	61bb      	str	r3, [r7, #24]
 800c6f0:	e002      	b.n	800c6f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c6f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c6f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c6f8:	69bb      	ldr	r3, [r7, #24]
	}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3720      	adds	r7, #32
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}

0800c702 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c702:	b580      	push	{r7, lr}
 800c704:	b088      	sub	sp, #32
 800c706:	af00      	add	r7, sp, #0
 800c708:	60f8      	str	r0, [r7, #12]
 800c70a:	60b9      	str	r1, [r7, #8]
 800c70c:	607a      	str	r2, [r7, #4]
 800c70e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c712:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	461a      	mov	r2, r3
 800c71a:	21a5      	movs	r1, #165	; 0xa5
 800c71c:	f002 fbec 	bl	800eef8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800c720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c72a:	3b01      	subs	r3, #1
 800c72c:	009b      	lsls	r3, r3, #2
 800c72e:	4413      	add	r3, r2
 800c730:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800c732:	69bb      	ldr	r3, [r7, #24]
 800c734:	f023 0307 	bic.w	r3, r3, #7
 800c738:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	f003 0307 	and.w	r3, r3, #7
 800c740:	2b00      	cmp	r3, #0
 800c742:	d00a      	beq.n	800c75a <prvInitialiseNewTask+0x58>
	__asm volatile
 800c744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c748:	f383 8811 	msr	BASEPRI, r3
 800c74c:	f3bf 8f6f 	isb	sy
 800c750:	f3bf 8f4f 	dsb	sy
 800c754:	617b      	str	r3, [r7, #20]
}
 800c756:	bf00      	nop
 800c758:	e7fe      	b.n	800c758 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c75a:	2300      	movs	r3, #0
 800c75c:	61fb      	str	r3, [r7, #28]
 800c75e:	e012      	b.n	800c786 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c760:	68ba      	ldr	r2, [r7, #8]
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	4413      	add	r3, r2
 800c766:	7819      	ldrb	r1, [r3, #0]
 800c768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	4413      	add	r3, r2
 800c76e:	3334      	adds	r3, #52	; 0x34
 800c770:	460a      	mov	r2, r1
 800c772:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800c774:	68ba      	ldr	r2, [r7, #8]
 800c776:	69fb      	ldr	r3, [r7, #28]
 800c778:	4413      	add	r3, r2
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d006      	beq.n	800c78e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	3301      	adds	r3, #1
 800c784:	61fb      	str	r3, [r7, #28]
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	2b0f      	cmp	r3, #15
 800c78a:	d9e9      	bls.n	800c760 <prvInitialiseNewTask+0x5e>
 800c78c:	e000      	b.n	800c790 <prvInitialiseNewTask+0x8e>
		{
			break;
 800c78e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c792:	2200      	movs	r2, #0
 800c794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79a:	2b37      	cmp	r3, #55	; 0x37
 800c79c:	d901      	bls.n	800c7a2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c79e:	2337      	movs	r3, #55	; 0x37
 800c7a0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b6:	3304      	adds	r3, #4
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fe ffdc 	bl	800b776 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	3318      	adds	r3, #24
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7fe ffd7 	bl	800b776 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c7ec:	683a      	ldr	r2, [r7, #0]
 800c7ee:	68f9      	ldr	r1, [r7, #12]
 800c7f0:	69b8      	ldr	r0, [r7, #24]
 800c7f2:	f001 faad 	bl	800dd50 <pxPortInitialiseStack>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800c7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d002      	beq.n	800c808 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c806:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c808:	bf00      	nop
 800c80a:	3720      	adds	r7, #32
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c818:	f001 fb88 	bl	800df2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c81c:	4b2d      	ldr	r3, [pc, #180]	; (800c8d4 <prvAddNewTaskToReadyList+0xc4>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	3301      	adds	r3, #1
 800c822:	4a2c      	ldr	r2, [pc, #176]	; (800c8d4 <prvAddNewTaskToReadyList+0xc4>)
 800c824:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c826:	4b2c      	ldr	r3, [pc, #176]	; (800c8d8 <prvAddNewTaskToReadyList+0xc8>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d109      	bne.n	800c842 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c82e:	4a2a      	ldr	r2, [pc, #168]	; (800c8d8 <prvAddNewTaskToReadyList+0xc8>)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c834:	4b27      	ldr	r3, [pc, #156]	; (800c8d4 <prvAddNewTaskToReadyList+0xc4>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d110      	bne.n	800c85e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c83c:	f000 fc94 	bl	800d168 <prvInitialiseTaskLists>
 800c840:	e00d      	b.n	800c85e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c842:	4b26      	ldr	r3, [pc, #152]	; (800c8dc <prvAddNewTaskToReadyList+0xcc>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d109      	bne.n	800c85e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c84a:	4b23      	ldr	r3, [pc, #140]	; (800c8d8 <prvAddNewTaskToReadyList+0xc8>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c854:	429a      	cmp	r2, r3
 800c856:	d802      	bhi.n	800c85e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c858:	4a1f      	ldr	r2, [pc, #124]	; (800c8d8 <prvAddNewTaskToReadyList+0xc8>)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c85e:	4b20      	ldr	r3, [pc, #128]	; (800c8e0 <prvAddNewTaskToReadyList+0xd0>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	3301      	adds	r3, #1
 800c864:	4a1e      	ldr	r2, [pc, #120]	; (800c8e0 <prvAddNewTaskToReadyList+0xd0>)
 800c866:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c868:	4b1d      	ldr	r3, [pc, #116]	; (800c8e0 <prvAddNewTaskToReadyList+0xd0>)
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c874:	4b1b      	ldr	r3, [pc, #108]	; (800c8e4 <prvAddNewTaskToReadyList+0xd4>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d903      	bls.n	800c884 <prvAddNewTaskToReadyList+0x74>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c880:	4a18      	ldr	r2, [pc, #96]	; (800c8e4 <prvAddNewTaskToReadyList+0xd4>)
 800c882:	6013      	str	r3, [r2, #0]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c888:	4613      	mov	r3, r2
 800c88a:	009b      	lsls	r3, r3, #2
 800c88c:	4413      	add	r3, r2
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	4a15      	ldr	r2, [pc, #84]	; (800c8e8 <prvAddNewTaskToReadyList+0xd8>)
 800c892:	441a      	add	r2, r3
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	3304      	adds	r3, #4
 800c898:	4619      	mov	r1, r3
 800c89a:	4610      	mov	r0, r2
 800c89c:	f7fe ff77 	bl	800b78e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c8a0:	f001 fb74 	bl	800df8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c8a4:	4b0d      	ldr	r3, [pc, #52]	; (800c8dc <prvAddNewTaskToReadyList+0xcc>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d00e      	beq.n	800c8ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c8ac:	4b0a      	ldr	r3, [pc, #40]	; (800c8d8 <prvAddNewTaskToReadyList+0xc8>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d207      	bcs.n	800c8ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c8ba:	4b0c      	ldr	r3, [pc, #48]	; (800c8ec <prvAddNewTaskToReadyList+0xdc>)
 800c8bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8c0:	601a      	str	r2, [r3, #0]
 800c8c2:	f3bf 8f4f 	dsb	sy
 800c8c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8ca:	bf00      	nop
 800c8cc:	3708      	adds	r7, #8
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	20000d44 	.word	0x20000d44
 800c8d8:	20000870 	.word	0x20000870
 800c8dc:	20000d50 	.word	0x20000d50
 800c8e0:	20000d60 	.word	0x20000d60
 800c8e4:	20000d4c 	.word	0x20000d4c
 800c8e8:	20000874 	.word	0x20000874
 800c8ec:	e000ed04 	.word	0xe000ed04

0800c8f0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b08a      	sub	sp, #40	; 0x28
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d10a      	bne.n	800c91a <vTaskDelayUntil+0x2a>
	__asm volatile
 800c904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c908:	f383 8811 	msr	BASEPRI, r3
 800c90c:	f3bf 8f6f 	isb	sy
 800c910:	f3bf 8f4f 	dsb	sy
 800c914:	617b      	str	r3, [r7, #20]
}
 800c916:	bf00      	nop
 800c918:	e7fe      	b.n	800c918 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d10a      	bne.n	800c936 <vTaskDelayUntil+0x46>
	__asm volatile
 800c920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c924:	f383 8811 	msr	BASEPRI, r3
 800c928:	f3bf 8f6f 	isb	sy
 800c92c:	f3bf 8f4f 	dsb	sy
 800c930:	613b      	str	r3, [r7, #16]
}
 800c932:	bf00      	nop
 800c934:	e7fe      	b.n	800c934 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800c936:	4b2a      	ldr	r3, [pc, #168]	; (800c9e0 <vTaskDelayUntil+0xf0>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d00a      	beq.n	800c954 <vTaskDelayUntil+0x64>
	__asm volatile
 800c93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c942:	f383 8811 	msr	BASEPRI, r3
 800c946:	f3bf 8f6f 	isb	sy
 800c94a:	f3bf 8f4f 	dsb	sy
 800c94e:	60fb      	str	r3, [r7, #12]
}
 800c950:	bf00      	nop
 800c952:	e7fe      	b.n	800c952 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800c954:	f000 f8e4 	bl	800cb20 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c958:	4b22      	ldr	r3, [pc, #136]	; (800c9e4 <vTaskDelayUntil+0xf4>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	683a      	ldr	r2, [r7, #0]
 800c964:	4413      	add	r3, r2
 800c966:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	6a3a      	ldr	r2, [r7, #32]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d20b      	bcs.n	800c98a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	69fa      	ldr	r2, [r7, #28]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d211      	bcs.n	800c9a0 <vTaskDelayUntil+0xb0>
 800c97c:	69fa      	ldr	r2, [r7, #28]
 800c97e:	6a3b      	ldr	r3, [r7, #32]
 800c980:	429a      	cmp	r2, r3
 800c982:	d90d      	bls.n	800c9a0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c984:	2301      	movs	r3, #1
 800c986:	627b      	str	r3, [r7, #36]	; 0x24
 800c988:	e00a      	b.n	800c9a0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	69fa      	ldr	r2, [r7, #28]
 800c990:	429a      	cmp	r2, r3
 800c992:	d303      	bcc.n	800c99c <vTaskDelayUntil+0xac>
 800c994:	69fa      	ldr	r2, [r7, #28]
 800c996:	6a3b      	ldr	r3, [r7, #32]
 800c998:	429a      	cmp	r2, r3
 800c99a:	d901      	bls.n	800c9a0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c99c:	2301      	movs	r3, #1
 800c99e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	69fa      	ldr	r2, [r7, #28]
 800c9a4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d006      	beq.n	800c9ba <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c9ac:	69fa      	ldr	r2, [r7, #28]
 800c9ae:	6a3b      	ldr	r3, [r7, #32]
 800c9b0:	1ad3      	subs	r3, r2, r3
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f000 fe65 	bl	800d684 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c9ba:	f000 f8bf 	bl	800cb3c <xTaskResumeAll>
 800c9be:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d107      	bne.n	800c9d6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800c9c6:	4b08      	ldr	r3, [pc, #32]	; (800c9e8 <vTaskDelayUntil+0xf8>)
 800c9c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9cc:	601a      	str	r2, [r3, #0]
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c9d6:	bf00      	nop
 800c9d8:	3728      	adds	r7, #40	; 0x28
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	20000d6c 	.word	0x20000d6c
 800c9e4:	20000d48 	.word	0x20000d48
 800c9e8:	e000ed04 	.word	0xe000ed04

0800c9ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d017      	beq.n	800ca2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c9fe:	4b13      	ldr	r3, [pc, #76]	; (800ca4c <vTaskDelay+0x60>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d00a      	beq.n	800ca1c <vTaskDelay+0x30>
	__asm volatile
 800ca06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0a:	f383 8811 	msr	BASEPRI, r3
 800ca0e:	f3bf 8f6f 	isb	sy
 800ca12:	f3bf 8f4f 	dsb	sy
 800ca16:	60bb      	str	r3, [r7, #8]
}
 800ca18:	bf00      	nop
 800ca1a:	e7fe      	b.n	800ca1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ca1c:	f000 f880 	bl	800cb20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ca20:	2100      	movs	r1, #0
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 fe2e 	bl	800d684 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ca28:	f000 f888 	bl	800cb3c <xTaskResumeAll>
 800ca2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d107      	bne.n	800ca44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ca34:	4b06      	ldr	r3, [pc, #24]	; (800ca50 <vTaskDelay+0x64>)
 800ca36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca3a:	601a      	str	r2, [r3, #0]
 800ca3c:	f3bf 8f4f 	dsb	sy
 800ca40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ca44:	bf00      	nop
 800ca46:	3710      	adds	r7, #16
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	20000d6c 	.word	0x20000d6c
 800ca50:	e000ed04 	.word	0xe000ed04

0800ca54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b08a      	sub	sp, #40	; 0x28
 800ca58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ca62:	463a      	mov	r2, r7
 800ca64:	1d39      	adds	r1, r7, #4
 800ca66:	f107 0308 	add.w	r3, r7, #8
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7fe fe32 	bl	800b6d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ca70:	6839      	ldr	r1, [r7, #0]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	68ba      	ldr	r2, [r7, #8]
 800ca76:	9202      	str	r2, [sp, #8]
 800ca78:	9301      	str	r3, [sp, #4]
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	9300      	str	r3, [sp, #0]
 800ca7e:	2300      	movs	r3, #0
 800ca80:	460a      	mov	r2, r1
 800ca82:	4921      	ldr	r1, [pc, #132]	; (800cb08 <vTaskStartScheduler+0xb4>)
 800ca84:	4821      	ldr	r0, [pc, #132]	; (800cb0c <vTaskStartScheduler+0xb8>)
 800ca86:	f7ff fd9b 	bl	800c5c0 <xTaskCreateStatic>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	4a20      	ldr	r2, [pc, #128]	; (800cb10 <vTaskStartScheduler+0xbc>)
 800ca8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ca90:	4b1f      	ldr	r3, [pc, #124]	; (800cb10 <vTaskStartScheduler+0xbc>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d002      	beq.n	800ca9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	617b      	str	r3, [r7, #20]
 800ca9c:	e001      	b.n	800caa2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d102      	bne.n	800caae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800caa8:	f000 fe40 	bl	800d72c <xTimerCreateTimerTask>
 800caac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d116      	bne.n	800cae2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800cab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab8:	f383 8811 	msr	BASEPRI, r3
 800cabc:	f3bf 8f6f 	isb	sy
 800cac0:	f3bf 8f4f 	dsb	sy
 800cac4:	613b      	str	r3, [r7, #16]
}
 800cac6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cac8:	4b12      	ldr	r3, [pc, #72]	; (800cb14 <vTaskStartScheduler+0xc0>)
 800caca:	f04f 32ff 	mov.w	r2, #4294967295
 800cace:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cad0:	4b11      	ldr	r3, [pc, #68]	; (800cb18 <vTaskStartScheduler+0xc4>)
 800cad2:	2201      	movs	r2, #1
 800cad4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800cad6:	4b11      	ldr	r3, [pc, #68]	; (800cb1c <vTaskStartScheduler+0xc8>)
 800cad8:	2200      	movs	r2, #0
 800cada:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cadc:	f001 f9b4 	bl	800de48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cae0:	e00e      	b.n	800cb00 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cae8:	d10a      	bne.n	800cb00 <vTaskStartScheduler+0xac>
	__asm volatile
 800caea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caee:	f383 8811 	msr	BASEPRI, r3
 800caf2:	f3bf 8f6f 	isb	sy
 800caf6:	f3bf 8f4f 	dsb	sy
 800cafa:	60fb      	str	r3, [r7, #12]
}
 800cafc:	bf00      	nop
 800cafe:	e7fe      	b.n	800cafe <vTaskStartScheduler+0xaa>
}
 800cb00:	bf00      	nop
 800cb02:	3718      	adds	r7, #24
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	0800f15c 	.word	0x0800f15c
 800cb0c:	0800d139 	.word	0x0800d139
 800cb10:	20000d68 	.word	0x20000d68
 800cb14:	20000d64 	.word	0x20000d64
 800cb18:	20000d50 	.word	0x20000d50
 800cb1c:	20000d48 	.word	0x20000d48

0800cb20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cb20:	b480      	push	{r7}
 800cb22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cb24:	4b04      	ldr	r3, [pc, #16]	; (800cb38 <vTaskSuspendAll+0x18>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	4a03      	ldr	r2, [pc, #12]	; (800cb38 <vTaskSuspendAll+0x18>)
 800cb2c:	6013      	str	r3, [r2, #0]
}
 800cb2e:	bf00      	nop
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bc80      	pop	{r7}
 800cb34:	4770      	bx	lr
 800cb36:	bf00      	nop
 800cb38:	20000d6c 	.word	0x20000d6c

0800cb3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cb42:	2300      	movs	r3, #0
 800cb44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cb46:	2300      	movs	r3, #0
 800cb48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cb4a:	4b42      	ldr	r3, [pc, #264]	; (800cc54 <xTaskResumeAll+0x118>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d10a      	bne.n	800cb68 <xTaskResumeAll+0x2c>
	__asm volatile
 800cb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb56:	f383 8811 	msr	BASEPRI, r3
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	603b      	str	r3, [r7, #0]
}
 800cb64:	bf00      	nop
 800cb66:	e7fe      	b.n	800cb66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cb68:	f001 f9e0 	bl	800df2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cb6c:	4b39      	ldr	r3, [pc, #228]	; (800cc54 <xTaskResumeAll+0x118>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	3b01      	subs	r3, #1
 800cb72:	4a38      	ldr	r2, [pc, #224]	; (800cc54 <xTaskResumeAll+0x118>)
 800cb74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb76:	4b37      	ldr	r3, [pc, #220]	; (800cc54 <xTaskResumeAll+0x118>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d162      	bne.n	800cc44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cb7e:	4b36      	ldr	r3, [pc, #216]	; (800cc58 <xTaskResumeAll+0x11c>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d05e      	beq.n	800cc44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb86:	e02f      	b.n	800cbe8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800cb88:	4b34      	ldr	r3, [pc, #208]	; (800cc5c <xTaskResumeAll+0x120>)
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	3318      	adds	r3, #24
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7fe fe55 	bl	800b844 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	3304      	adds	r3, #4
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fe fe50 	bl	800b844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cba8:	4b2d      	ldr	r3, [pc, #180]	; (800cc60 <xTaskResumeAll+0x124>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d903      	bls.n	800cbb8 <xTaskResumeAll+0x7c>
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb4:	4a2a      	ldr	r2, [pc, #168]	; (800cc60 <xTaskResumeAll+0x124>)
 800cbb6:	6013      	str	r3, [r2, #0]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	4413      	add	r3, r2
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	4a27      	ldr	r2, [pc, #156]	; (800cc64 <xTaskResumeAll+0x128>)
 800cbc6:	441a      	add	r2, r3
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	3304      	adds	r3, #4
 800cbcc:	4619      	mov	r1, r3
 800cbce:	4610      	mov	r0, r2
 800cbd0:	f7fe fddd 	bl	800b78e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbd8:	4b23      	ldr	r3, [pc, #140]	; (800cc68 <xTaskResumeAll+0x12c>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d302      	bcc.n	800cbe8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cbe2:	4b22      	ldr	r3, [pc, #136]	; (800cc6c <xTaskResumeAll+0x130>)
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cbe8:	4b1c      	ldr	r3, [pc, #112]	; (800cc5c <xTaskResumeAll+0x120>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1cb      	bne.n	800cb88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d001      	beq.n	800cbfa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cbf6:	f000 fb8d 	bl	800d314 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cbfa:	4b1d      	ldr	r3, [pc, #116]	; (800cc70 <xTaskResumeAll+0x134>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d010      	beq.n	800cc28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cc06:	f000 f845 	bl	800cc94 <xTaskIncrementTick>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d002      	beq.n	800cc16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cc10:	4b16      	ldr	r3, [pc, #88]	; (800cc6c <xTaskResumeAll+0x130>)
 800cc12:	2201      	movs	r2, #1
 800cc14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	3b01      	subs	r3, #1
 800cc1a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d1f1      	bne.n	800cc06 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800cc22:	4b13      	ldr	r3, [pc, #76]	; (800cc70 <xTaskResumeAll+0x134>)
 800cc24:	2200      	movs	r2, #0
 800cc26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cc28:	4b10      	ldr	r3, [pc, #64]	; (800cc6c <xTaskResumeAll+0x130>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d009      	beq.n	800cc44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cc30:	2301      	movs	r3, #1
 800cc32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cc34:	4b0f      	ldr	r3, [pc, #60]	; (800cc74 <xTaskResumeAll+0x138>)
 800cc36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc3a:	601a      	str	r2, [r3, #0]
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc44:	f001 f9a2 	bl	800df8c <vPortExitCritical>

	return xAlreadyYielded;
 800cc48:	68bb      	ldr	r3, [r7, #8]
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	20000d6c 	.word	0x20000d6c
 800cc58:	20000d44 	.word	0x20000d44
 800cc5c:	20000d04 	.word	0x20000d04
 800cc60:	20000d4c 	.word	0x20000d4c
 800cc64:	20000874 	.word	0x20000874
 800cc68:	20000870 	.word	0x20000870
 800cc6c:	20000d58 	.word	0x20000d58
 800cc70:	20000d54 	.word	0x20000d54
 800cc74:	e000ed04 	.word	0xe000ed04

0800cc78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cc7e:	4b04      	ldr	r3, [pc, #16]	; (800cc90 <xTaskGetTickCount+0x18>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cc84:	687b      	ldr	r3, [r7, #4]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	370c      	adds	r7, #12
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bc80      	pop	{r7}
 800cc8e:	4770      	bx	lr
 800cc90:	20000d48 	.word	0x20000d48

0800cc94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc9e:	4b51      	ldr	r3, [pc, #324]	; (800cde4 <xTaskIncrementTick+0x150>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	f040 808e 	bne.w	800cdc4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cca8:	4b4f      	ldr	r3, [pc, #316]	; (800cde8 <xTaskIncrementTick+0x154>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	3301      	adds	r3, #1
 800ccae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ccb0:	4a4d      	ldr	r2, [pc, #308]	; (800cde8 <xTaskIncrementTick+0x154>)
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d120      	bne.n	800ccfe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ccbc:	4b4b      	ldr	r3, [pc, #300]	; (800cdec <xTaskIncrementTick+0x158>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d00a      	beq.n	800ccdc <xTaskIncrementTick+0x48>
	__asm volatile
 800ccc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccca:	f383 8811 	msr	BASEPRI, r3
 800ccce:	f3bf 8f6f 	isb	sy
 800ccd2:	f3bf 8f4f 	dsb	sy
 800ccd6:	603b      	str	r3, [r7, #0]
}
 800ccd8:	bf00      	nop
 800ccda:	e7fe      	b.n	800ccda <xTaskIncrementTick+0x46>
 800ccdc:	4b43      	ldr	r3, [pc, #268]	; (800cdec <xTaskIncrementTick+0x158>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	60fb      	str	r3, [r7, #12]
 800cce2:	4b43      	ldr	r3, [pc, #268]	; (800cdf0 <xTaskIncrementTick+0x15c>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a41      	ldr	r2, [pc, #260]	; (800cdec <xTaskIncrementTick+0x158>)
 800cce8:	6013      	str	r3, [r2, #0]
 800ccea:	4a41      	ldr	r2, [pc, #260]	; (800cdf0 <xTaskIncrementTick+0x15c>)
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	6013      	str	r3, [r2, #0]
 800ccf0:	4b40      	ldr	r3, [pc, #256]	; (800cdf4 <xTaskIncrementTick+0x160>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	4a3f      	ldr	r2, [pc, #252]	; (800cdf4 <xTaskIncrementTick+0x160>)
 800ccf8:	6013      	str	r3, [r2, #0]
 800ccfa:	f000 fb0b 	bl	800d314 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ccfe:	4b3e      	ldr	r3, [pc, #248]	; (800cdf8 <xTaskIncrementTick+0x164>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	693a      	ldr	r2, [r7, #16]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d34e      	bcc.n	800cda6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd08:	4b38      	ldr	r3, [pc, #224]	; (800cdec <xTaskIncrementTick+0x158>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d101      	bne.n	800cd16 <xTaskIncrementTick+0x82>
 800cd12:	2301      	movs	r3, #1
 800cd14:	e000      	b.n	800cd18 <xTaskIncrementTick+0x84>
 800cd16:	2300      	movs	r3, #0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d004      	beq.n	800cd26 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd1c:	4b36      	ldr	r3, [pc, #216]	; (800cdf8 <xTaskIncrementTick+0x164>)
 800cd1e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd22:	601a      	str	r2, [r3, #0]
					break;
 800cd24:	e03f      	b.n	800cda6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800cd26:	4b31      	ldr	r3, [pc, #196]	; (800cdec <xTaskIncrementTick+0x158>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	68db      	ldr	r3, [r3, #12]
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cd36:	693a      	ldr	r2, [r7, #16]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d203      	bcs.n	800cd46 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cd3e:	4a2e      	ldr	r2, [pc, #184]	; (800cdf8 <xTaskIncrementTick+0x164>)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6013      	str	r3, [r2, #0]
						break;
 800cd44:	e02f      	b.n	800cda6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	3304      	adds	r3, #4
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7fe fd7a 	bl	800b844 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d004      	beq.n	800cd62 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	3318      	adds	r3, #24
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7fe fd71 	bl	800b844 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd66:	4b25      	ldr	r3, [pc, #148]	; (800cdfc <xTaskIncrementTick+0x168>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d903      	bls.n	800cd76 <xTaskIncrementTick+0xe2>
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd72:	4a22      	ldr	r2, [pc, #136]	; (800cdfc <xTaskIncrementTick+0x168>)
 800cd74:	6013      	str	r3, [r2, #0]
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	4413      	add	r3, r2
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	4a1f      	ldr	r2, [pc, #124]	; (800ce00 <xTaskIncrementTick+0x16c>)
 800cd84:	441a      	add	r2, r3
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	3304      	adds	r3, #4
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	4610      	mov	r0, r2
 800cd8e:	f7fe fcfe 	bl	800b78e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd96:	4b1b      	ldr	r3, [pc, #108]	; (800ce04 <xTaskIncrementTick+0x170>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d3b3      	bcc.n	800cd08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cda0:	2301      	movs	r3, #1
 800cda2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cda4:	e7b0      	b.n	800cd08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cda6:	4b17      	ldr	r3, [pc, #92]	; (800ce04 <xTaskIncrementTick+0x170>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdac:	4914      	ldr	r1, [pc, #80]	; (800ce00 <xTaskIncrementTick+0x16c>)
 800cdae:	4613      	mov	r3, r2
 800cdb0:	009b      	lsls	r3, r3, #2
 800cdb2:	4413      	add	r3, r2
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	440b      	add	r3, r1
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d907      	bls.n	800cdce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	617b      	str	r3, [r7, #20]
 800cdc2:	e004      	b.n	800cdce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cdc4:	4b10      	ldr	r3, [pc, #64]	; (800ce08 <xTaskIncrementTick+0x174>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	3301      	adds	r3, #1
 800cdca:	4a0f      	ldr	r2, [pc, #60]	; (800ce08 <xTaskIncrementTick+0x174>)
 800cdcc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cdce:	4b0f      	ldr	r3, [pc, #60]	; (800ce0c <xTaskIncrementTick+0x178>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d001      	beq.n	800cdda <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cdda:	697b      	ldr	r3, [r7, #20]
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3718      	adds	r7, #24
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	20000d6c 	.word	0x20000d6c
 800cde8:	20000d48 	.word	0x20000d48
 800cdec:	20000cfc 	.word	0x20000cfc
 800cdf0:	20000d00 	.word	0x20000d00
 800cdf4:	20000d5c 	.word	0x20000d5c
 800cdf8:	20000d64 	.word	0x20000d64
 800cdfc:	20000d4c 	.word	0x20000d4c
 800ce00:	20000874 	.word	0x20000874
 800ce04:	20000870 	.word	0x20000870
 800ce08:	20000d54 	.word	0x20000d54
 800ce0c:	20000d58 	.word	0x20000d58

0800ce10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ce10:	b480      	push	{r7}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ce16:	4b27      	ldr	r3, [pc, #156]	; (800ceb4 <vTaskSwitchContext+0xa4>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d003      	beq.n	800ce26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ce1e:	4b26      	ldr	r3, [pc, #152]	; (800ceb8 <vTaskSwitchContext+0xa8>)
 800ce20:	2201      	movs	r2, #1
 800ce22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ce24:	e041      	b.n	800ceaa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ce26:	4b24      	ldr	r3, [pc, #144]	; (800ceb8 <vTaskSwitchContext+0xa8>)
 800ce28:	2200      	movs	r2, #0
 800ce2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ce2c:	4b23      	ldr	r3, [pc, #140]	; (800cebc <vTaskSwitchContext+0xac>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	60fb      	str	r3, [r7, #12]
 800ce32:	e010      	b.n	800ce56 <vTaskSwitchContext+0x46>
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d10a      	bne.n	800ce50 <vTaskSwitchContext+0x40>
	__asm volatile
 800ce3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce3e:	f383 8811 	msr	BASEPRI, r3
 800ce42:	f3bf 8f6f 	isb	sy
 800ce46:	f3bf 8f4f 	dsb	sy
 800ce4a:	607b      	str	r3, [r7, #4]
}
 800ce4c:	bf00      	nop
 800ce4e:	e7fe      	b.n	800ce4e <vTaskSwitchContext+0x3e>
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	3b01      	subs	r3, #1
 800ce54:	60fb      	str	r3, [r7, #12]
 800ce56:	491a      	ldr	r1, [pc, #104]	; (800cec0 <vTaskSwitchContext+0xb0>)
 800ce58:	68fa      	ldr	r2, [r7, #12]
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	4413      	add	r3, r2
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	440b      	add	r3, r1
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d0e4      	beq.n	800ce34 <vTaskSwitchContext+0x24>
 800ce6a:	68fa      	ldr	r2, [r7, #12]
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	4413      	add	r3, r2
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	4a12      	ldr	r2, [pc, #72]	; (800cec0 <vTaskSwitchContext+0xb0>)
 800ce76:	4413      	add	r3, r2
 800ce78:	60bb      	str	r3, [r7, #8]
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	685a      	ldr	r2, [r3, #4]
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	605a      	str	r2, [r3, #4]
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	685a      	ldr	r2, [r3, #4]
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	3308      	adds	r3, #8
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d104      	bne.n	800ce9a <vTaskSwitchContext+0x8a>
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	685a      	ldr	r2, [r3, #4]
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	605a      	str	r2, [r3, #4]
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	4a08      	ldr	r2, [pc, #32]	; (800cec4 <vTaskSwitchContext+0xb4>)
 800cea2:	6013      	str	r3, [r2, #0]
 800cea4:	4a05      	ldr	r2, [pc, #20]	; (800cebc <vTaskSwitchContext+0xac>)
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	6013      	str	r3, [r2, #0]
}
 800ceaa:	bf00      	nop
 800ceac:	3714      	adds	r7, #20
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bc80      	pop	{r7}
 800ceb2:	4770      	bx	lr
 800ceb4:	20000d6c 	.word	0x20000d6c
 800ceb8:	20000d58 	.word	0x20000d58
 800cebc:	20000d4c 	.word	0x20000d4c
 800cec0:	20000874 	.word	0x20000874
 800cec4:	20000870 	.word	0x20000870

0800cec8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d10a      	bne.n	800ceee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ced8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cedc:	f383 8811 	msr	BASEPRI, r3
 800cee0:	f3bf 8f6f 	isb	sy
 800cee4:	f3bf 8f4f 	dsb	sy
 800cee8:	60fb      	str	r3, [r7, #12]
}
 800ceea:	bf00      	nop
 800ceec:	e7fe      	b.n	800ceec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ceee:	4b07      	ldr	r3, [pc, #28]	; (800cf0c <vTaskPlaceOnEventList+0x44>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	3318      	adds	r3, #24
 800cef4:	4619      	mov	r1, r3
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7fe fc6c 	bl	800b7d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cefc:	2101      	movs	r1, #1
 800cefe:	6838      	ldr	r0, [r7, #0]
 800cf00:	f000 fbc0 	bl	800d684 <prvAddCurrentTaskToDelayedList>
}
 800cf04:	bf00      	nop
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	20000870 	.word	0x20000870

0800cf10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b086      	sub	sp, #24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d10a      	bne.n	800cf38 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf26:	f383 8811 	msr	BASEPRI, r3
 800cf2a:	f3bf 8f6f 	isb	sy
 800cf2e:	f3bf 8f4f 	dsb	sy
 800cf32:	617b      	str	r3, [r7, #20]
}
 800cf34:	bf00      	nop
 800cf36:	e7fe      	b.n	800cf36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf38:	4b0a      	ldr	r3, [pc, #40]	; (800cf64 <vTaskPlaceOnEventListRestricted+0x54>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	3318      	adds	r3, #24
 800cf3e:	4619      	mov	r1, r3
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f7fe fc24 	bl	800b78e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d002      	beq.n	800cf52 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cf4c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf50:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cf52:	6879      	ldr	r1, [r7, #4]
 800cf54:	68b8      	ldr	r0, [r7, #8]
 800cf56:	f000 fb95 	bl	800d684 <prvAddCurrentTaskToDelayedList>
	}
 800cf5a:	bf00      	nop
 800cf5c:	3718      	adds	r7, #24
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	20000870 	.word	0x20000870

0800cf68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b086      	sub	sp, #24
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	68db      	ldr	r3, [r3, #12]
 800cf76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d10a      	bne.n	800cf94 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	60fb      	str	r3, [r7, #12]
}
 800cf90:	bf00      	nop
 800cf92:	e7fe      	b.n	800cf92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	3318      	adds	r3, #24
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7fe fc53 	bl	800b844 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf9e:	4b1e      	ldr	r3, [pc, #120]	; (800d018 <xTaskRemoveFromEventList+0xb0>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d11d      	bne.n	800cfe2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	3304      	adds	r3, #4
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7fe fc4a 	bl	800b844 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfb4:	4b19      	ldr	r3, [pc, #100]	; (800d01c <xTaskRemoveFromEventList+0xb4>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d903      	bls.n	800cfc4 <xTaskRemoveFromEventList+0x5c>
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc0:	4a16      	ldr	r2, [pc, #88]	; (800d01c <xTaskRemoveFromEventList+0xb4>)
 800cfc2:	6013      	str	r3, [r2, #0]
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc8:	4613      	mov	r3, r2
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	4413      	add	r3, r2
 800cfce:	009b      	lsls	r3, r3, #2
 800cfd0:	4a13      	ldr	r2, [pc, #76]	; (800d020 <xTaskRemoveFromEventList+0xb8>)
 800cfd2:	441a      	add	r2, r3
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	3304      	adds	r3, #4
 800cfd8:	4619      	mov	r1, r3
 800cfda:	4610      	mov	r0, r2
 800cfdc:	f7fe fbd7 	bl	800b78e <vListInsertEnd>
 800cfe0:	e005      	b.n	800cfee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	3318      	adds	r3, #24
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	480e      	ldr	r0, [pc, #56]	; (800d024 <xTaskRemoveFromEventList+0xbc>)
 800cfea:	f7fe fbd0 	bl	800b78e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cff2:	4b0d      	ldr	r3, [pc, #52]	; (800d028 <xTaskRemoveFromEventList+0xc0>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d905      	bls.n	800d008 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cffc:	2301      	movs	r3, #1
 800cffe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d000:	4b0a      	ldr	r3, [pc, #40]	; (800d02c <xTaskRemoveFromEventList+0xc4>)
 800d002:	2201      	movs	r2, #1
 800d004:	601a      	str	r2, [r3, #0]
 800d006:	e001      	b.n	800d00c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d008:	2300      	movs	r3, #0
 800d00a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800d00c:	697b      	ldr	r3, [r7, #20]
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3718      	adds	r7, #24
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	20000d6c 	.word	0x20000d6c
 800d01c:	20000d4c 	.word	0x20000d4c
 800d020:	20000874 	.word	0x20000874
 800d024:	20000d04 	.word	0x20000d04
 800d028:	20000870 	.word	0x20000870
 800d02c:	20000d58 	.word	0x20000d58

0800d030 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d030:	b480      	push	{r7}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d038:	4b06      	ldr	r3, [pc, #24]	; (800d054 <vTaskInternalSetTimeOutState+0x24>)
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d040:	4b05      	ldr	r3, [pc, #20]	; (800d058 <vTaskInternalSetTimeOutState+0x28>)
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	605a      	str	r2, [r3, #4]
}
 800d048:	bf00      	nop
 800d04a:	370c      	adds	r7, #12
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bc80      	pop	{r7}
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop
 800d054:	20000d5c 	.word	0x20000d5c
 800d058:	20000d48 	.word	0x20000d48

0800d05c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b088      	sub	sp, #32
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d10a      	bne.n	800d082 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d070:	f383 8811 	msr	BASEPRI, r3
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	613b      	str	r3, [r7, #16]
}
 800d07e:	bf00      	nop
 800d080:	e7fe      	b.n	800d080 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d10a      	bne.n	800d09e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08c:	f383 8811 	msr	BASEPRI, r3
 800d090:	f3bf 8f6f 	isb	sy
 800d094:	f3bf 8f4f 	dsb	sy
 800d098:	60fb      	str	r3, [r7, #12]
}
 800d09a:	bf00      	nop
 800d09c:	e7fe      	b.n	800d09c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d09e:	f000 ff45 	bl	800df2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d0a2:	4b1d      	ldr	r3, [pc, #116]	; (800d118 <xTaskCheckForTimeOut+0xbc>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	69ba      	ldr	r2, [r7, #24]
 800d0ae:	1ad3      	subs	r3, r2, r3
 800d0b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ba:	d102      	bne.n	800d0c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	61fb      	str	r3, [r7, #28]
 800d0c0:	e023      	b.n	800d10a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	4b15      	ldr	r3, [pc, #84]	; (800d11c <xTaskCheckForTimeOut+0xc0>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d007      	beq.n	800d0de <xTaskCheckForTimeOut+0x82>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	685b      	ldr	r3, [r3, #4]
 800d0d2:	69ba      	ldr	r2, [r7, #24]
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d302      	bcc.n	800d0de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	61fb      	str	r3, [r7, #28]
 800d0dc:	e015      	b.n	800d10a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	697a      	ldr	r2, [r7, #20]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d20b      	bcs.n	800d100 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	1ad2      	subs	r2, r2, r3
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f7ff ff9b 	bl	800d030 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	61fb      	str	r3, [r7, #28]
 800d0fe:	e004      	b.n	800d10a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	2200      	movs	r2, #0
 800d104:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d106:	2301      	movs	r3, #1
 800d108:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d10a:	f000 ff3f 	bl	800df8c <vPortExitCritical>

	return xReturn;
 800d10e:	69fb      	ldr	r3, [r7, #28]
}
 800d110:	4618      	mov	r0, r3
 800d112:	3720      	adds	r7, #32
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}
 800d118:	20000d48 	.word	0x20000d48
 800d11c:	20000d5c 	.word	0x20000d5c

0800d120 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d120:	b480      	push	{r7}
 800d122:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d124:	4b03      	ldr	r3, [pc, #12]	; (800d134 <vTaskMissedYield+0x14>)
 800d126:	2201      	movs	r2, #1
 800d128:	601a      	str	r2, [r3, #0]
}
 800d12a:	bf00      	nop
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bc80      	pop	{r7}
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	20000d58 	.word	0x20000d58

0800d138 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d140:	f000 f852 	bl	800d1e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d144:	4b06      	ldr	r3, [pc, #24]	; (800d160 <prvIdleTask+0x28>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d9f9      	bls.n	800d140 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d14c:	4b05      	ldr	r3, [pc, #20]	; (800d164 <prvIdleTask+0x2c>)
 800d14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d152:	601a      	str	r2, [r3, #0]
 800d154:	f3bf 8f4f 	dsb	sy
 800d158:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d15c:	e7f0      	b.n	800d140 <prvIdleTask+0x8>
 800d15e:	bf00      	nop
 800d160:	20000874 	.word	0x20000874
 800d164:	e000ed04 	.word	0xe000ed04

0800d168 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d16e:	2300      	movs	r3, #0
 800d170:	607b      	str	r3, [r7, #4]
 800d172:	e00c      	b.n	800d18e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	4613      	mov	r3, r2
 800d178:	009b      	lsls	r3, r3, #2
 800d17a:	4413      	add	r3, r2
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	4a12      	ldr	r2, [pc, #72]	; (800d1c8 <prvInitialiseTaskLists+0x60>)
 800d180:	4413      	add	r3, r2
 800d182:	4618      	mov	r0, r3
 800d184:	f7fe fad8 	bl	800b738 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	3301      	adds	r3, #1
 800d18c:	607b      	str	r3, [r7, #4]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2b37      	cmp	r3, #55	; 0x37
 800d192:	d9ef      	bls.n	800d174 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d194:	480d      	ldr	r0, [pc, #52]	; (800d1cc <prvInitialiseTaskLists+0x64>)
 800d196:	f7fe facf 	bl	800b738 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d19a:	480d      	ldr	r0, [pc, #52]	; (800d1d0 <prvInitialiseTaskLists+0x68>)
 800d19c:	f7fe facc 	bl	800b738 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d1a0:	480c      	ldr	r0, [pc, #48]	; (800d1d4 <prvInitialiseTaskLists+0x6c>)
 800d1a2:	f7fe fac9 	bl	800b738 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d1a6:	480c      	ldr	r0, [pc, #48]	; (800d1d8 <prvInitialiseTaskLists+0x70>)
 800d1a8:	f7fe fac6 	bl	800b738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d1ac:	480b      	ldr	r0, [pc, #44]	; (800d1dc <prvInitialiseTaskLists+0x74>)
 800d1ae:	f7fe fac3 	bl	800b738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d1b2:	4b0b      	ldr	r3, [pc, #44]	; (800d1e0 <prvInitialiseTaskLists+0x78>)
 800d1b4:	4a05      	ldr	r2, [pc, #20]	; (800d1cc <prvInitialiseTaskLists+0x64>)
 800d1b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d1b8:	4b0a      	ldr	r3, [pc, #40]	; (800d1e4 <prvInitialiseTaskLists+0x7c>)
 800d1ba:	4a05      	ldr	r2, [pc, #20]	; (800d1d0 <prvInitialiseTaskLists+0x68>)
 800d1bc:	601a      	str	r2, [r3, #0]
}
 800d1be:	bf00      	nop
 800d1c0:	3708      	adds	r7, #8
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	20000874 	.word	0x20000874
 800d1cc:	20000cd4 	.word	0x20000cd4
 800d1d0:	20000ce8 	.word	0x20000ce8
 800d1d4:	20000d04 	.word	0x20000d04
 800d1d8:	20000d18 	.word	0x20000d18
 800d1dc:	20000d30 	.word	0x20000d30
 800d1e0:	20000cfc 	.word	0x20000cfc
 800d1e4:	20000d00 	.word	0x20000d00

0800d1e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1ee:	e019      	b.n	800d224 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d1f0:	f000 fe9c 	bl	800df2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d1f4:	4b10      	ldr	r3, [pc, #64]	; (800d238 <prvCheckTasksWaitingTermination+0x50>)
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	68db      	ldr	r3, [r3, #12]
 800d1fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	3304      	adds	r3, #4
 800d200:	4618      	mov	r0, r3
 800d202:	f7fe fb1f 	bl	800b844 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d206:	4b0d      	ldr	r3, [pc, #52]	; (800d23c <prvCheckTasksWaitingTermination+0x54>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	3b01      	subs	r3, #1
 800d20c:	4a0b      	ldr	r2, [pc, #44]	; (800d23c <prvCheckTasksWaitingTermination+0x54>)
 800d20e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d210:	4b0b      	ldr	r3, [pc, #44]	; (800d240 <prvCheckTasksWaitingTermination+0x58>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	3b01      	subs	r3, #1
 800d216:	4a0a      	ldr	r2, [pc, #40]	; (800d240 <prvCheckTasksWaitingTermination+0x58>)
 800d218:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d21a:	f000 feb7 	bl	800df8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 f848 	bl	800d2b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d224:	4b06      	ldr	r3, [pc, #24]	; (800d240 <prvCheckTasksWaitingTermination+0x58>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1e1      	bne.n	800d1f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d22c:	bf00      	nop
 800d22e:	bf00      	nop
 800d230:	3708      	adds	r7, #8
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	20000d18 	.word	0x20000d18
 800d23c:	20000d44 	.word	0x20000d44
 800d240:	20000d2c 	.word	0x20000d2c

0800d244 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800d244:	b480      	push	{r7}
 800d246:	b085      	sub	sp, #20
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800d24c:	2300      	movs	r3, #0
 800d24e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d250:	e005      	b.n	800d25e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	3301      	adds	r3, #1
 800d256:	607b      	str	r3, [r7, #4]
			ulCount++;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	3301      	adds	r3, #1
 800d25c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	2ba5      	cmp	r3, #165	; 0xa5
 800d264:	d0f5      	beq.n	800d252 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	089b      	lsrs	r3, r3, #2
 800d26a:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	b29b      	uxth	r3, r3
	}
 800d270:	4618      	mov	r0, r3
 800d272:	3714      	adds	r7, #20
 800d274:	46bd      	mov	sp, r7
 800d276:	bc80      	pop	{r7}
 800d278:	4770      	bx	lr
	...

0800d27c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b086      	sub	sp, #24
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d102      	bne.n	800d290 <uxTaskGetStackHighWaterMark+0x14>
 800d28a:	4b09      	ldr	r3, [pc, #36]	; (800d2b0 <uxTaskGetStackHighWaterMark+0x34>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	e000      	b.n	800d292 <uxTaskGetStackHighWaterMark+0x16>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d298:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800d29a:	6938      	ldr	r0, [r7, #16]
 800d29c:	f7ff ffd2 	bl	800d244 <prvTaskCheckFreeStackSpace>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
	}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3718      	adds	r7, #24
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	20000870 	.word	0x20000870

0800d2b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b084      	sub	sp, #16
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d108      	bne.n	800d2d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f000 fff2 	bl	800e2b4 <vPortFree>
				vPortFree( pxTCB );
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 ffef 	bl	800e2b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d2d6:	e018      	b.n	800d30a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d103      	bne.n	800d2ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 ffe6 	bl	800e2b4 <vPortFree>
	}
 800d2e8:	e00f      	b.n	800d30a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d2f0:	2b02      	cmp	r3, #2
 800d2f2:	d00a      	beq.n	800d30a <prvDeleteTCB+0x56>
	__asm volatile
 800d2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f8:	f383 8811 	msr	BASEPRI, r3
 800d2fc:	f3bf 8f6f 	isb	sy
 800d300:	f3bf 8f4f 	dsb	sy
 800d304:	60fb      	str	r3, [r7, #12]
}
 800d306:	bf00      	nop
 800d308:	e7fe      	b.n	800d308 <prvDeleteTCB+0x54>
	}
 800d30a:	bf00      	nop
 800d30c:	3710      	adds	r7, #16
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
	...

0800d314 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d31a:	4b0e      	ldr	r3, [pc, #56]	; (800d354 <prvResetNextTaskUnblockTime+0x40>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d101      	bne.n	800d328 <prvResetNextTaskUnblockTime+0x14>
 800d324:	2301      	movs	r3, #1
 800d326:	e000      	b.n	800d32a <prvResetNextTaskUnblockTime+0x16>
 800d328:	2300      	movs	r3, #0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d004      	beq.n	800d338 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d32e:	4b0a      	ldr	r3, [pc, #40]	; (800d358 <prvResetNextTaskUnblockTime+0x44>)
 800d330:	f04f 32ff 	mov.w	r2, #4294967295
 800d334:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d336:	e008      	b.n	800d34a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d338:	4b06      	ldr	r3, [pc, #24]	; (800d354 <prvResetNextTaskUnblockTime+0x40>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	4a04      	ldr	r2, [pc, #16]	; (800d358 <prvResetNextTaskUnblockTime+0x44>)
 800d348:	6013      	str	r3, [r2, #0]
}
 800d34a:	bf00      	nop
 800d34c:	370c      	adds	r7, #12
 800d34e:	46bd      	mov	sp, r7
 800d350:	bc80      	pop	{r7}
 800d352:	4770      	bx	lr
 800d354:	20000cfc 	.word	0x20000cfc
 800d358:	20000d64 	.word	0x20000d64

0800d35c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d362:	4b0b      	ldr	r3, [pc, #44]	; (800d390 <xTaskGetSchedulerState+0x34>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d102      	bne.n	800d370 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d36a:	2301      	movs	r3, #1
 800d36c:	607b      	str	r3, [r7, #4]
 800d36e:	e008      	b.n	800d382 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d370:	4b08      	ldr	r3, [pc, #32]	; (800d394 <xTaskGetSchedulerState+0x38>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d102      	bne.n	800d37e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d378:	2302      	movs	r3, #2
 800d37a:	607b      	str	r3, [r7, #4]
 800d37c:	e001      	b.n	800d382 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d37e:	2300      	movs	r3, #0
 800d380:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d382:	687b      	ldr	r3, [r7, #4]
	}
 800d384:	4618      	mov	r0, r3
 800d386:	370c      	adds	r7, #12
 800d388:	46bd      	mov	sp, r7
 800d38a:	bc80      	pop	{r7}
 800d38c:	4770      	bx	lr
 800d38e:	bf00      	nop
 800d390:	20000d50 	.word	0x20000d50
 800d394:	20000d6c 	.word	0x20000d6c

0800d398 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b084      	sub	sp, #16
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d056      	beq.n	800d45c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3b2:	4b2d      	ldr	r3, [pc, #180]	; (800d468 <xTaskPriorityInherit+0xd0>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d246      	bcs.n	800d44a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	699b      	ldr	r3, [r3, #24]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	db06      	blt.n	800d3d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3c4:	4b28      	ldr	r3, [pc, #160]	; (800d468 <xTaskPriorityInherit+0xd0>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	6959      	ldr	r1, [r3, #20]
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3da:	4613      	mov	r3, r2
 800d3dc:	009b      	lsls	r3, r3, #2
 800d3de:	4413      	add	r3, r2
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	4a22      	ldr	r2, [pc, #136]	; (800d46c <xTaskPriorityInherit+0xd4>)
 800d3e4:	4413      	add	r3, r2
 800d3e6:	4299      	cmp	r1, r3
 800d3e8:	d101      	bne.n	800d3ee <xTaskPriorityInherit+0x56>
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e000      	b.n	800d3f0 <xTaskPriorityInherit+0x58>
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d022      	beq.n	800d43a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	3304      	adds	r3, #4
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7fe fa23 	bl	800b844 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d3fe:	4b1a      	ldr	r3, [pc, #104]	; (800d468 <xTaskPriorityInherit+0xd0>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d40c:	4b18      	ldr	r3, [pc, #96]	; (800d470 <xTaskPriorityInherit+0xd8>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	429a      	cmp	r2, r3
 800d412:	d903      	bls.n	800d41c <xTaskPriorityInherit+0x84>
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d418:	4a15      	ldr	r2, [pc, #84]	; (800d470 <xTaskPriorityInherit+0xd8>)
 800d41a:	6013      	str	r3, [r2, #0]
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d420:	4613      	mov	r3, r2
 800d422:	009b      	lsls	r3, r3, #2
 800d424:	4413      	add	r3, r2
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	4a10      	ldr	r2, [pc, #64]	; (800d46c <xTaskPriorityInherit+0xd4>)
 800d42a:	441a      	add	r2, r3
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	3304      	adds	r3, #4
 800d430:	4619      	mov	r1, r3
 800d432:	4610      	mov	r0, r2
 800d434:	f7fe f9ab 	bl	800b78e <vListInsertEnd>
 800d438:	e004      	b.n	800d444 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d43a:	4b0b      	ldr	r3, [pc, #44]	; (800d468 <xTaskPriorityInherit+0xd0>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d444:	2301      	movs	r3, #1
 800d446:	60fb      	str	r3, [r7, #12]
 800d448:	e008      	b.n	800d45c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d44e:	4b06      	ldr	r3, [pc, #24]	; (800d468 <xTaskPriorityInherit+0xd0>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d454:	429a      	cmp	r2, r3
 800d456:	d201      	bcs.n	800d45c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d458:	2301      	movs	r3, #1
 800d45a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d45c:	68fb      	ldr	r3, [r7, #12]
	}
 800d45e:	4618      	mov	r0, r3
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	20000870 	.word	0x20000870
 800d46c:	20000874 	.word	0x20000874
 800d470:	20000d4c 	.word	0x20000d4c

0800d474 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d474:	b580      	push	{r7, lr}
 800d476:	b086      	sub	sp, #24
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d480:	2300      	movs	r3, #0
 800d482:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d056      	beq.n	800d538 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d48a:	4b2e      	ldr	r3, [pc, #184]	; (800d544 <xTaskPriorityDisinherit+0xd0>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	693a      	ldr	r2, [r7, #16]
 800d490:	429a      	cmp	r2, r3
 800d492:	d00a      	beq.n	800d4aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d498:	f383 8811 	msr	BASEPRI, r3
 800d49c:	f3bf 8f6f 	isb	sy
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	60fb      	str	r3, [r7, #12]
}
 800d4a6:	bf00      	nop
 800d4a8:	e7fe      	b.n	800d4a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d10a      	bne.n	800d4c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b6:	f383 8811 	msr	BASEPRI, r3
 800d4ba:	f3bf 8f6f 	isb	sy
 800d4be:	f3bf 8f4f 	dsb	sy
 800d4c2:	60bb      	str	r3, [r7, #8]
}
 800d4c4:	bf00      	nop
 800d4c6:	e7fe      	b.n	800d4c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4cc:	1e5a      	subs	r2, r3, #1
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d02c      	beq.n	800d538 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d128      	bne.n	800d538 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	3304      	adds	r3, #4
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7fe f9aa 	bl	800b844 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d508:	4b0f      	ldr	r3, [pc, #60]	; (800d548 <xTaskPriorityDisinherit+0xd4>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d903      	bls.n	800d518 <xTaskPriorityDisinherit+0xa4>
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d514:	4a0c      	ldr	r2, [pc, #48]	; (800d548 <xTaskPriorityDisinherit+0xd4>)
 800d516:	6013      	str	r3, [r2, #0]
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d51c:	4613      	mov	r3, r2
 800d51e:	009b      	lsls	r3, r3, #2
 800d520:	4413      	add	r3, r2
 800d522:	009b      	lsls	r3, r3, #2
 800d524:	4a09      	ldr	r2, [pc, #36]	; (800d54c <xTaskPriorityDisinherit+0xd8>)
 800d526:	441a      	add	r2, r3
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	3304      	adds	r3, #4
 800d52c:	4619      	mov	r1, r3
 800d52e:	4610      	mov	r0, r2
 800d530:	f7fe f92d 	bl	800b78e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d534:	2301      	movs	r3, #1
 800d536:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d538:	697b      	ldr	r3, [r7, #20]
	}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3718      	adds	r7, #24
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	20000870 	.word	0x20000870
 800d548:	20000d4c 	.word	0x20000d4c
 800d54c:	20000874 	.word	0x20000874

0800d550 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d550:	b580      	push	{r7, lr}
 800d552:	b088      	sub	sp, #32
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d55e:	2301      	movs	r3, #1
 800d560:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d06f      	beq.n	800d648 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d10a      	bne.n	800d586 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d574:	f383 8811 	msr	BASEPRI, r3
 800d578:	f3bf 8f6f 	isb	sy
 800d57c:	f3bf 8f4f 	dsb	sy
 800d580:	60fb      	str	r3, [r7, #12]
}
 800d582:	bf00      	nop
 800d584:	e7fe      	b.n	800d584 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d58a:	683a      	ldr	r2, [r7, #0]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d902      	bls.n	800d596 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	61fb      	str	r3, [r7, #28]
 800d594:	e002      	b.n	800d59c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d59a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a0:	69fa      	ldr	r2, [r7, #28]
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d050      	beq.n	800d648 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5aa:	697a      	ldr	r2, [r7, #20]
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d14b      	bne.n	800d648 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d5b0:	4b27      	ldr	r3, [pc, #156]	; (800d650 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	69ba      	ldr	r2, [r7, #24]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d10a      	bne.n	800d5d0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5be:	f383 8811 	msr	BASEPRI, r3
 800d5c2:	f3bf 8f6f 	isb	sy
 800d5c6:	f3bf 8f4f 	dsb	sy
 800d5ca:	60bb      	str	r3, [r7, #8]
}
 800d5cc:	bf00      	nop
 800d5ce:	e7fe      	b.n	800d5ce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	69fa      	ldr	r2, [r7, #28]
 800d5da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d5dc:	69bb      	ldr	r3, [r7, #24]
 800d5de:	699b      	ldr	r3, [r3, #24]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	db04      	blt.n	800d5ee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5e4:	69fb      	ldr	r3, [r7, #28]
 800d5e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d5ea:	69bb      	ldr	r3, [r7, #24]
 800d5ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d5ee:	69bb      	ldr	r3, [r7, #24]
 800d5f0:	6959      	ldr	r1, [r3, #20]
 800d5f2:	693a      	ldr	r2, [r7, #16]
 800d5f4:	4613      	mov	r3, r2
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	4413      	add	r3, r2
 800d5fa:	009b      	lsls	r3, r3, #2
 800d5fc:	4a15      	ldr	r2, [pc, #84]	; (800d654 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d5fe:	4413      	add	r3, r2
 800d600:	4299      	cmp	r1, r3
 800d602:	d101      	bne.n	800d608 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800d604:	2301      	movs	r3, #1
 800d606:	e000      	b.n	800d60a <vTaskPriorityDisinheritAfterTimeout+0xba>
 800d608:	2300      	movs	r3, #0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d01c      	beq.n	800d648 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d60e:	69bb      	ldr	r3, [r7, #24]
 800d610:	3304      	adds	r3, #4
 800d612:	4618      	mov	r0, r3
 800d614:	f7fe f916 	bl	800b844 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d618:	69bb      	ldr	r3, [r7, #24]
 800d61a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d61c:	4b0e      	ldr	r3, [pc, #56]	; (800d658 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	429a      	cmp	r2, r3
 800d622:	d903      	bls.n	800d62c <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800d624:	69bb      	ldr	r3, [r7, #24]
 800d626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d628:	4a0b      	ldr	r2, [pc, #44]	; (800d658 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d62a:	6013      	str	r3, [r2, #0]
 800d62c:	69bb      	ldr	r3, [r7, #24]
 800d62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d630:	4613      	mov	r3, r2
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	4413      	add	r3, r2
 800d636:	009b      	lsls	r3, r3, #2
 800d638:	4a06      	ldr	r2, [pc, #24]	; (800d654 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d63a:	441a      	add	r2, r3
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	3304      	adds	r3, #4
 800d640:	4619      	mov	r1, r3
 800d642:	4610      	mov	r0, r2
 800d644:	f7fe f8a3 	bl	800b78e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d648:	bf00      	nop
 800d64a:	3720      	adds	r7, #32
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}
 800d650:	20000870 	.word	0x20000870
 800d654:	20000874 	.word	0x20000874
 800d658:	20000d4c 	.word	0x20000d4c

0800d65c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800d65c:	b480      	push	{r7}
 800d65e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d660:	4b07      	ldr	r3, [pc, #28]	; (800d680 <pvTaskIncrementMutexHeldCount+0x24>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d004      	beq.n	800d672 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d668:	4b05      	ldr	r3, [pc, #20]	; (800d680 <pvTaskIncrementMutexHeldCount+0x24>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d66e:	3201      	adds	r2, #1
 800d670:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d672:	4b03      	ldr	r3, [pc, #12]	; (800d680 <pvTaskIncrementMutexHeldCount+0x24>)
 800d674:	681b      	ldr	r3, [r3, #0]
	}
 800d676:	4618      	mov	r0, r3
 800d678:	46bd      	mov	sp, r7
 800d67a:	bc80      	pop	{r7}
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop
 800d680:	20000870 	.word	0x20000870

0800d684 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d68e:	4b21      	ldr	r3, [pc, #132]	; (800d714 <prvAddCurrentTaskToDelayedList+0x90>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d694:	4b20      	ldr	r3, [pc, #128]	; (800d718 <prvAddCurrentTaskToDelayedList+0x94>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	3304      	adds	r3, #4
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7fe f8d2 	bl	800b844 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6a6:	d10a      	bne.n	800d6be <prvAddCurrentTaskToDelayedList+0x3a>
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d007      	beq.n	800d6be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6ae:	4b1a      	ldr	r3, [pc, #104]	; (800d718 <prvAddCurrentTaskToDelayedList+0x94>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	3304      	adds	r3, #4
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	4819      	ldr	r0, [pc, #100]	; (800d71c <prvAddCurrentTaskToDelayedList+0x98>)
 800d6b8:	f7fe f869 	bl	800b78e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d6bc:	e026      	b.n	800d70c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	4413      	add	r3, r2
 800d6c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d6c6:	4b14      	ldr	r3, [pc, #80]	; (800d718 <prvAddCurrentTaskToDelayedList+0x94>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	68ba      	ldr	r2, [r7, #8]
 800d6cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d6ce:	68ba      	ldr	r2, [r7, #8]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d209      	bcs.n	800d6ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6d6:	4b12      	ldr	r3, [pc, #72]	; (800d720 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d6d8:	681a      	ldr	r2, [r3, #0]
 800d6da:	4b0f      	ldr	r3, [pc, #60]	; (800d718 <prvAddCurrentTaskToDelayedList+0x94>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	3304      	adds	r3, #4
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	4610      	mov	r0, r2
 800d6e4:	f7fe f876 	bl	800b7d4 <vListInsert>
}
 800d6e8:	e010      	b.n	800d70c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6ea:	4b0e      	ldr	r3, [pc, #56]	; (800d724 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d6ec:	681a      	ldr	r2, [r3, #0]
 800d6ee:	4b0a      	ldr	r3, [pc, #40]	; (800d718 <prvAddCurrentTaskToDelayedList+0x94>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	3304      	adds	r3, #4
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	4610      	mov	r0, r2
 800d6f8:	f7fe f86c 	bl	800b7d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d6fc:	4b0a      	ldr	r3, [pc, #40]	; (800d728 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	68ba      	ldr	r2, [r7, #8]
 800d702:	429a      	cmp	r2, r3
 800d704:	d202      	bcs.n	800d70c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d706:	4a08      	ldr	r2, [pc, #32]	; (800d728 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	6013      	str	r3, [r2, #0]
}
 800d70c:	bf00      	nop
 800d70e:	3710      	adds	r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	20000d48 	.word	0x20000d48
 800d718:	20000870 	.word	0x20000870
 800d71c:	20000d30 	.word	0x20000d30
 800d720:	20000d00 	.word	0x20000d00
 800d724:	20000cfc 	.word	0x20000cfc
 800d728:	20000d64 	.word	0x20000d64

0800d72c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b08a      	sub	sp, #40	; 0x28
 800d730:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d732:	2300      	movs	r3, #0
 800d734:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d736:	f000 facb 	bl	800dcd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d73a:	4b1c      	ldr	r3, [pc, #112]	; (800d7ac <xTimerCreateTimerTask+0x80>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d021      	beq.n	800d786 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d742:	2300      	movs	r3, #0
 800d744:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d746:	2300      	movs	r3, #0
 800d748:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d74a:	1d3a      	adds	r2, r7, #4
 800d74c:	f107 0108 	add.w	r1, r7, #8
 800d750:	f107 030c 	add.w	r3, r7, #12
 800d754:	4618      	mov	r0, r3
 800d756:	f7fd ffd5 	bl	800b704 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d75a:	6879      	ldr	r1, [r7, #4]
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	68fa      	ldr	r2, [r7, #12]
 800d760:	9202      	str	r2, [sp, #8]
 800d762:	9301      	str	r3, [sp, #4]
 800d764:	2302      	movs	r3, #2
 800d766:	9300      	str	r3, [sp, #0]
 800d768:	2300      	movs	r3, #0
 800d76a:	460a      	mov	r2, r1
 800d76c:	4910      	ldr	r1, [pc, #64]	; (800d7b0 <xTimerCreateTimerTask+0x84>)
 800d76e:	4811      	ldr	r0, [pc, #68]	; (800d7b4 <xTimerCreateTimerTask+0x88>)
 800d770:	f7fe ff26 	bl	800c5c0 <xTaskCreateStatic>
 800d774:	4603      	mov	r3, r0
 800d776:	4a10      	ldr	r2, [pc, #64]	; (800d7b8 <xTimerCreateTimerTask+0x8c>)
 800d778:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d77a:	4b0f      	ldr	r3, [pc, #60]	; (800d7b8 <xTimerCreateTimerTask+0x8c>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d001      	beq.n	800d786 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d782:	2301      	movs	r3, #1
 800d784:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d10a      	bne.n	800d7a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d790:	f383 8811 	msr	BASEPRI, r3
 800d794:	f3bf 8f6f 	isb	sy
 800d798:	f3bf 8f4f 	dsb	sy
 800d79c:	613b      	str	r3, [r7, #16]
}
 800d79e:	bf00      	nop
 800d7a0:	e7fe      	b.n	800d7a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d7a2:	697b      	ldr	r3, [r7, #20]
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3718      	adds	r7, #24
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	20000da0 	.word	0x20000da0
 800d7b0:	0800f164 	.word	0x0800f164
 800d7b4:	0800d8d9 	.word	0x0800d8d9
 800d7b8:	20000da4 	.word	0x20000da4

0800d7bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b08a      	sub	sp, #40	; 0x28
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	60f8      	str	r0, [r7, #12]
 800d7c4:	60b9      	str	r1, [r7, #8]
 800d7c6:	607a      	str	r2, [r7, #4]
 800d7c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d10a      	bne.n	800d7ea <xTimerGenericCommand+0x2e>
	__asm volatile
 800d7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d8:	f383 8811 	msr	BASEPRI, r3
 800d7dc:	f3bf 8f6f 	isb	sy
 800d7e0:	f3bf 8f4f 	dsb	sy
 800d7e4:	623b      	str	r3, [r7, #32]
}
 800d7e6:	bf00      	nop
 800d7e8:	e7fe      	b.n	800d7e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d7ea:	4b1a      	ldr	r3, [pc, #104]	; (800d854 <xTimerGenericCommand+0x98>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d02a      	beq.n	800d848 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	2b05      	cmp	r3, #5
 800d802:	dc18      	bgt.n	800d836 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d804:	f7ff fdaa 	bl	800d35c <xTaskGetSchedulerState>
 800d808:	4603      	mov	r3, r0
 800d80a:	2b02      	cmp	r3, #2
 800d80c:	d109      	bne.n	800d822 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d80e:	4b11      	ldr	r3, [pc, #68]	; (800d854 <xTimerGenericCommand+0x98>)
 800d810:	6818      	ldr	r0, [r3, #0]
 800d812:	f107 0110 	add.w	r1, r7, #16
 800d816:	2300      	movs	r3, #0
 800d818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d81a:	f7fe f9cb 	bl	800bbb4 <xQueueGenericSend>
 800d81e:	6278      	str	r0, [r7, #36]	; 0x24
 800d820:	e012      	b.n	800d848 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d822:	4b0c      	ldr	r3, [pc, #48]	; (800d854 <xTimerGenericCommand+0x98>)
 800d824:	6818      	ldr	r0, [r3, #0]
 800d826:	f107 0110 	add.w	r1, r7, #16
 800d82a:	2300      	movs	r3, #0
 800d82c:	2200      	movs	r2, #0
 800d82e:	f7fe f9c1 	bl	800bbb4 <xQueueGenericSend>
 800d832:	6278      	str	r0, [r7, #36]	; 0x24
 800d834:	e008      	b.n	800d848 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d836:	4b07      	ldr	r3, [pc, #28]	; (800d854 <xTimerGenericCommand+0x98>)
 800d838:	6818      	ldr	r0, [r3, #0]
 800d83a:	f107 0110 	add.w	r1, r7, #16
 800d83e:	2300      	movs	r3, #0
 800d840:	683a      	ldr	r2, [r7, #0]
 800d842:	f7fe fab5 	bl	800bdb0 <xQueueGenericSendFromISR>
 800d846:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3728      	adds	r7, #40	; 0x28
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	20000da0 	.word	0x20000da0

0800d858 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b088      	sub	sp, #32
 800d85c:	af02      	add	r7, sp, #8
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d862:	4b1c      	ldr	r3, [pc, #112]	; (800d8d4 <prvProcessExpiredTimer+0x7c>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	3304      	adds	r3, #4
 800d870:	4618      	mov	r0, r3
 800d872:	f7fd ffe7 	bl	800b844 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	69db      	ldr	r3, [r3, #28]
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d122      	bne.n	800d8c4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	699a      	ldr	r2, [r3, #24]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	18d1      	adds	r1, r2, r3
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	683a      	ldr	r2, [r7, #0]
 800d88a:	6978      	ldr	r0, [r7, #20]
 800d88c:	f000 f8c8 	bl	800da20 <prvInsertTimerInActiveList>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d016      	beq.n	800d8c4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d896:	2300      	movs	r3, #0
 800d898:	9300      	str	r3, [sp, #0]
 800d89a:	2300      	movs	r3, #0
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	2100      	movs	r1, #0
 800d8a0:	6978      	ldr	r0, [r7, #20]
 800d8a2:	f7ff ff8b 	bl	800d7bc <xTimerGenericCommand>
 800d8a6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d10a      	bne.n	800d8c4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800d8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b2:	f383 8811 	msr	BASEPRI, r3
 800d8b6:	f3bf 8f6f 	isb	sy
 800d8ba:	f3bf 8f4f 	dsb	sy
 800d8be:	60fb      	str	r3, [r7, #12]
}
 800d8c0:	bf00      	nop
 800d8c2:	e7fe      	b.n	800d8c2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c8:	6978      	ldr	r0, [r7, #20]
 800d8ca:	4798      	blx	r3
}
 800d8cc:	bf00      	nop
 800d8ce:	3718      	adds	r7, #24
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	20000d98 	.word	0x20000d98

0800d8d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b084      	sub	sp, #16
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d8e0:	f107 0308 	add.w	r3, r7, #8
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f000 f857 	bl	800d998 <prvGetNextExpireTime>
 800d8ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	68f8      	ldr	r0, [r7, #12]
 800d8f2:	f000 f803 	bl	800d8fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d8f6:	f000 f8d5 	bl	800daa4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d8fa:	e7f1      	b.n	800d8e0 <prvTimerTask+0x8>

0800d8fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d906:	f7ff f90b 	bl	800cb20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d90a:	f107 0308 	add.w	r3, r7, #8
 800d90e:	4618      	mov	r0, r3
 800d910:	f000 f866 	bl	800d9e0 <prvSampleTimeNow>
 800d914:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d130      	bne.n	800d97e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d10a      	bne.n	800d938 <prvProcessTimerOrBlockTask+0x3c>
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	429a      	cmp	r2, r3
 800d928:	d806      	bhi.n	800d938 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d92a:	f7ff f907 	bl	800cb3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d92e:	68f9      	ldr	r1, [r7, #12]
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f7ff ff91 	bl	800d858 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d936:	e024      	b.n	800d982 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d008      	beq.n	800d950 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d93e:	4b13      	ldr	r3, [pc, #76]	; (800d98c <prvProcessTimerOrBlockTask+0x90>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	bf0c      	ite	eq
 800d948:	2301      	moveq	r3, #1
 800d94a:	2300      	movne	r3, #0
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d950:	4b0f      	ldr	r3, [pc, #60]	; (800d990 <prvProcessTimerOrBlockTask+0x94>)
 800d952:	6818      	ldr	r0, [r3, #0]
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	1ad3      	subs	r3, r2, r3
 800d95a:	683a      	ldr	r2, [r7, #0]
 800d95c:	4619      	mov	r1, r3
 800d95e:	f7fe fdfb 	bl	800c558 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d962:	f7ff f8eb 	bl	800cb3c <xTaskResumeAll>
 800d966:	4603      	mov	r3, r0
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d10a      	bne.n	800d982 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d96c:	4b09      	ldr	r3, [pc, #36]	; (800d994 <prvProcessTimerOrBlockTask+0x98>)
 800d96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d972:	601a      	str	r2, [r3, #0]
 800d974:	f3bf 8f4f 	dsb	sy
 800d978:	f3bf 8f6f 	isb	sy
}
 800d97c:	e001      	b.n	800d982 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d97e:	f7ff f8dd 	bl	800cb3c <xTaskResumeAll>
}
 800d982:	bf00      	nop
 800d984:	3710      	adds	r7, #16
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	20000d9c 	.word	0x20000d9c
 800d990:	20000da0 	.word	0x20000da0
 800d994:	e000ed04 	.word	0xe000ed04

0800d998 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d998:	b480      	push	{r7}
 800d99a:	b085      	sub	sp, #20
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d9a0:	4b0e      	ldr	r3, [pc, #56]	; (800d9dc <prvGetNextExpireTime+0x44>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	bf0c      	ite	eq
 800d9aa:	2301      	moveq	r3, #1
 800d9ac:	2300      	movne	r3, #0
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d105      	bne.n	800d9ca <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d9be:	4b07      	ldr	r3, [pc, #28]	; (800d9dc <prvGetNextExpireTime+0x44>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	60fb      	str	r3, [r7, #12]
 800d9c8:	e001      	b.n	800d9ce <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3714      	adds	r7, #20
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bc80      	pop	{r7}
 800d9d8:	4770      	bx	lr
 800d9da:	bf00      	nop
 800d9dc:	20000d98 	.word	0x20000d98

0800d9e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b084      	sub	sp, #16
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d9e8:	f7ff f946 	bl	800cc78 <xTaskGetTickCount>
 800d9ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d9ee:	4b0b      	ldr	r3, [pc, #44]	; (800da1c <prvSampleTimeNow+0x3c>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	68fa      	ldr	r2, [r7, #12]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d205      	bcs.n	800da04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d9f8:	f000 f908 	bl	800dc0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2201      	movs	r2, #1
 800da00:	601a      	str	r2, [r3, #0]
 800da02:	e002      	b.n	800da0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2200      	movs	r2, #0
 800da08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800da0a:	4a04      	ldr	r2, [pc, #16]	; (800da1c <prvSampleTimeNow+0x3c>)
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800da10:	68fb      	ldr	r3, [r7, #12]
}
 800da12:	4618      	mov	r0, r3
 800da14:	3710      	adds	r7, #16
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	20000da8 	.word	0x20000da8

0800da20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b086      	sub	sp, #24
 800da24:	af00      	add	r7, sp, #0
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	60b9      	str	r1, [r7, #8]
 800da2a:	607a      	str	r2, [r7, #4]
 800da2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800da2e:	2300      	movs	r3, #0
 800da30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	68ba      	ldr	r2, [r7, #8]
 800da36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	68fa      	ldr	r2, [r7, #12]
 800da3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800da3e:	68ba      	ldr	r2, [r7, #8]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	429a      	cmp	r2, r3
 800da44:	d812      	bhi.n	800da6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da46:	687a      	ldr	r2, [r7, #4]
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	1ad2      	subs	r2, r2, r3
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	699b      	ldr	r3, [r3, #24]
 800da50:	429a      	cmp	r2, r3
 800da52:	d302      	bcc.n	800da5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800da54:	2301      	movs	r3, #1
 800da56:	617b      	str	r3, [r7, #20]
 800da58:	e01b      	b.n	800da92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800da5a:	4b10      	ldr	r3, [pc, #64]	; (800da9c <prvInsertTimerInActiveList+0x7c>)
 800da5c:	681a      	ldr	r2, [r3, #0]
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	3304      	adds	r3, #4
 800da62:	4619      	mov	r1, r3
 800da64:	4610      	mov	r0, r2
 800da66:	f7fd feb5 	bl	800b7d4 <vListInsert>
 800da6a:	e012      	b.n	800da92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	429a      	cmp	r2, r3
 800da72:	d206      	bcs.n	800da82 <prvInsertTimerInActiveList+0x62>
 800da74:	68ba      	ldr	r2, [r7, #8]
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d302      	bcc.n	800da82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800da7c:	2301      	movs	r3, #1
 800da7e:	617b      	str	r3, [r7, #20]
 800da80:	e007      	b.n	800da92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800da82:	4b07      	ldr	r3, [pc, #28]	; (800daa0 <prvInsertTimerInActiveList+0x80>)
 800da84:	681a      	ldr	r2, [r3, #0]
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	3304      	adds	r3, #4
 800da8a:	4619      	mov	r1, r3
 800da8c:	4610      	mov	r0, r2
 800da8e:	f7fd fea1 	bl	800b7d4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800da92:	697b      	ldr	r3, [r7, #20]
}
 800da94:	4618      	mov	r0, r3
 800da96:	3718      	adds	r7, #24
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	20000d9c 	.word	0x20000d9c
 800daa0:	20000d98 	.word	0x20000d98

0800daa4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b08e      	sub	sp, #56	; 0x38
 800daa8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800daaa:	e09d      	b.n	800dbe8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	da18      	bge.n	800dae4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dab2:	1d3b      	adds	r3, r7, #4
 800dab4:	3304      	adds	r3, #4
 800dab6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d10a      	bne.n	800dad4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac2:	f383 8811 	msr	BASEPRI, r3
 800dac6:	f3bf 8f6f 	isb	sy
 800daca:	f3bf 8f4f 	dsb	sy
 800dace:	61fb      	str	r3, [r7, #28]
}
 800dad0:	bf00      	nop
 800dad2:	e7fe      	b.n	800dad2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dada:	6850      	ldr	r0, [r2, #4]
 800dadc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dade:	6892      	ldr	r2, [r2, #8]
 800dae0:	4611      	mov	r1, r2
 800dae2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	db7d      	blt.n	800dbe6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800daee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf0:	695b      	ldr	r3, [r3, #20]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d004      	beq.n	800db00 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800daf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf8:	3304      	adds	r3, #4
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fd fea2 	bl	800b844 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db00:	463b      	mov	r3, r7
 800db02:	4618      	mov	r0, r3
 800db04:	f7ff ff6c 	bl	800d9e0 <prvSampleTimeNow>
 800db08:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2b09      	cmp	r3, #9
 800db0e:	d86b      	bhi.n	800dbe8 <prvProcessReceivedCommands+0x144>
 800db10:	a201      	add	r2, pc, #4	; (adr r2, 800db18 <prvProcessReceivedCommands+0x74>)
 800db12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db16:	bf00      	nop
 800db18:	0800db41 	.word	0x0800db41
 800db1c:	0800db41 	.word	0x0800db41
 800db20:	0800db41 	.word	0x0800db41
 800db24:	0800dbe9 	.word	0x0800dbe9
 800db28:	0800db9d 	.word	0x0800db9d
 800db2c:	0800dbd5 	.word	0x0800dbd5
 800db30:	0800db41 	.word	0x0800db41
 800db34:	0800db41 	.word	0x0800db41
 800db38:	0800dbe9 	.word	0x0800dbe9
 800db3c:	0800db9d 	.word	0x0800db9d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800db40:	68ba      	ldr	r2, [r7, #8]
 800db42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db44:	699b      	ldr	r3, [r3, #24]
 800db46:	18d1      	adds	r1, r2, r3
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db4e:	f7ff ff67 	bl	800da20 <prvInsertTimerInActiveList>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d047      	beq.n	800dbe8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db5e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800db60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db62:	69db      	ldr	r3, [r3, #28]
 800db64:	2b01      	cmp	r3, #1
 800db66:	d13f      	bne.n	800dbe8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800db68:	68ba      	ldr	r2, [r7, #8]
 800db6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6c:	699b      	ldr	r3, [r3, #24]
 800db6e:	441a      	add	r2, r3
 800db70:	2300      	movs	r3, #0
 800db72:	9300      	str	r3, [sp, #0]
 800db74:	2300      	movs	r3, #0
 800db76:	2100      	movs	r1, #0
 800db78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db7a:	f7ff fe1f 	bl	800d7bc <xTimerGenericCommand>
 800db7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800db80:	6a3b      	ldr	r3, [r7, #32]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d130      	bne.n	800dbe8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800db86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db8a:	f383 8811 	msr	BASEPRI, r3
 800db8e:	f3bf 8f6f 	isb	sy
 800db92:	f3bf 8f4f 	dsb	sy
 800db96:	61bb      	str	r3, [r7, #24]
}
 800db98:	bf00      	nop
 800db9a:	e7fe      	b.n	800db9a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800db9c:	68ba      	ldr	r2, [r7, #8]
 800db9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba4:	699b      	ldr	r3, [r3, #24]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d10a      	bne.n	800dbc0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800dbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbae:	f383 8811 	msr	BASEPRI, r3
 800dbb2:	f3bf 8f6f 	isb	sy
 800dbb6:	f3bf 8f4f 	dsb	sy
 800dbba:	617b      	str	r3, [r7, #20]
}
 800dbbc:	bf00      	nop
 800dbbe:	e7fe      	b.n	800dbbe <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc2:	699a      	ldr	r2, [r3, #24]
 800dbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc6:	18d1      	adds	r1, r2, r3
 800dbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbce:	f7ff ff27 	bl	800da20 <prvInsertTimerInActiveList>
					break;
 800dbd2:	e009      	b.n	800dbe8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800dbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d104      	bne.n	800dbe8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800dbde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbe0:	f000 fb68 	bl	800e2b4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dbe4:	e000      	b.n	800dbe8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dbe6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dbe8:	4b07      	ldr	r3, [pc, #28]	; (800dc08 <prvProcessReceivedCommands+0x164>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	1d39      	adds	r1, r7, #4
 800dbee:	2200      	movs	r2, #0
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7fe f975 	bl	800bee0 <xQueueReceive>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	f47f af57 	bne.w	800daac <prvProcessReceivedCommands+0x8>
	}
}
 800dbfe:	bf00      	nop
 800dc00:	bf00      	nop
 800dc02:	3730      	adds	r7, #48	; 0x30
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	20000da0 	.word	0x20000da0

0800dc0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b088      	sub	sp, #32
 800dc10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc12:	e045      	b.n	800dca0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc14:	4b2c      	ldr	r3, [pc, #176]	; (800dcc8 <prvSwitchTimerLists+0xbc>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc1e:	4b2a      	ldr	r3, [pc, #168]	; (800dcc8 <prvSwitchTimerLists+0xbc>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	68db      	ldr	r3, [r3, #12]
 800dc24:	68db      	ldr	r3, [r3, #12]
 800dc26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	3304      	adds	r3, #4
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7fd fe09 	bl	800b844 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc36:	68f8      	ldr	r0, [r7, #12]
 800dc38:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	69db      	ldr	r3, [r3, #28]
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d12e      	bne.n	800dca0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	699b      	ldr	r3, [r3, #24]
 800dc46:	693a      	ldr	r2, [r7, #16]
 800dc48:	4413      	add	r3, r2
 800dc4a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dc4c:	68ba      	ldr	r2, [r7, #8]
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d90e      	bls.n	800dc72 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	68ba      	ldr	r2, [r7, #8]
 800dc58:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dc60:	4b19      	ldr	r3, [pc, #100]	; (800dcc8 <prvSwitchTimerLists+0xbc>)
 800dc62:	681a      	ldr	r2, [r3, #0]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	3304      	adds	r3, #4
 800dc68:	4619      	mov	r1, r3
 800dc6a:	4610      	mov	r0, r2
 800dc6c:	f7fd fdb2 	bl	800b7d4 <vListInsert>
 800dc70:	e016      	b.n	800dca0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dc72:	2300      	movs	r3, #0
 800dc74:	9300      	str	r3, [sp, #0]
 800dc76:	2300      	movs	r3, #0
 800dc78:	693a      	ldr	r2, [r7, #16]
 800dc7a:	2100      	movs	r1, #0
 800dc7c:	68f8      	ldr	r0, [r7, #12]
 800dc7e:	f7ff fd9d 	bl	800d7bc <xTimerGenericCommand>
 800dc82:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d10a      	bne.n	800dca0 <prvSwitchTimerLists+0x94>
	__asm volatile
 800dc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8e:	f383 8811 	msr	BASEPRI, r3
 800dc92:	f3bf 8f6f 	isb	sy
 800dc96:	f3bf 8f4f 	dsb	sy
 800dc9a:	603b      	str	r3, [r7, #0]
}
 800dc9c:	bf00      	nop
 800dc9e:	e7fe      	b.n	800dc9e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dca0:	4b09      	ldr	r3, [pc, #36]	; (800dcc8 <prvSwitchTimerLists+0xbc>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d1b4      	bne.n	800dc14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dcaa:	4b07      	ldr	r3, [pc, #28]	; (800dcc8 <prvSwitchTimerLists+0xbc>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dcb0:	4b06      	ldr	r3, [pc, #24]	; (800dccc <prvSwitchTimerLists+0xc0>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4a04      	ldr	r2, [pc, #16]	; (800dcc8 <prvSwitchTimerLists+0xbc>)
 800dcb6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dcb8:	4a04      	ldr	r2, [pc, #16]	; (800dccc <prvSwitchTimerLists+0xc0>)
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	6013      	str	r3, [r2, #0]
}
 800dcbe:	bf00      	nop
 800dcc0:	3718      	adds	r7, #24
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	20000d98 	.word	0x20000d98
 800dccc:	20000d9c 	.word	0x20000d9c

0800dcd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b082      	sub	sp, #8
 800dcd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dcd6:	f000 f929 	bl	800df2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dcda:	4b15      	ldr	r3, [pc, #84]	; (800dd30 <prvCheckForValidListAndQueue+0x60>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d120      	bne.n	800dd24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dce2:	4814      	ldr	r0, [pc, #80]	; (800dd34 <prvCheckForValidListAndQueue+0x64>)
 800dce4:	f7fd fd28 	bl	800b738 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dce8:	4813      	ldr	r0, [pc, #76]	; (800dd38 <prvCheckForValidListAndQueue+0x68>)
 800dcea:	f7fd fd25 	bl	800b738 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dcee:	4b13      	ldr	r3, [pc, #76]	; (800dd3c <prvCheckForValidListAndQueue+0x6c>)
 800dcf0:	4a10      	ldr	r2, [pc, #64]	; (800dd34 <prvCheckForValidListAndQueue+0x64>)
 800dcf2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dcf4:	4b12      	ldr	r3, [pc, #72]	; (800dd40 <prvCheckForValidListAndQueue+0x70>)
 800dcf6:	4a10      	ldr	r2, [pc, #64]	; (800dd38 <prvCheckForValidListAndQueue+0x68>)
 800dcf8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	9300      	str	r3, [sp, #0]
 800dcfe:	4b11      	ldr	r3, [pc, #68]	; (800dd44 <prvCheckForValidListAndQueue+0x74>)
 800dd00:	4a11      	ldr	r2, [pc, #68]	; (800dd48 <prvCheckForValidListAndQueue+0x78>)
 800dd02:	2110      	movs	r1, #16
 800dd04:	200a      	movs	r0, #10
 800dd06:	f7fd fe2f 	bl	800b968 <xQueueGenericCreateStatic>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	4a08      	ldr	r2, [pc, #32]	; (800dd30 <prvCheckForValidListAndQueue+0x60>)
 800dd0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dd10:	4b07      	ldr	r3, [pc, #28]	; (800dd30 <prvCheckForValidListAndQueue+0x60>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d005      	beq.n	800dd24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dd18:	4b05      	ldr	r3, [pc, #20]	; (800dd30 <prvCheckForValidListAndQueue+0x60>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	490b      	ldr	r1, [pc, #44]	; (800dd4c <prvCheckForValidListAndQueue+0x7c>)
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7fe fbf2 	bl	800c508 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd24:	f000 f932 	bl	800df8c <vPortExitCritical>
}
 800dd28:	bf00      	nop
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	20000da0 	.word	0x20000da0
 800dd34:	20000d70 	.word	0x20000d70
 800dd38:	20000d84 	.word	0x20000d84
 800dd3c:	20000d98 	.word	0x20000d98
 800dd40:	20000d9c 	.word	0x20000d9c
 800dd44:	20000e4c 	.word	0x20000e4c
 800dd48:	20000dac 	.word	0x20000dac
 800dd4c:	0800f16c 	.word	0x0800f16c

0800dd50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dd50:	b480      	push	{r7}
 800dd52:	b085      	sub	sp, #20
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	60b9      	str	r1, [r7, #8]
 800dd5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	3b04      	subs	r3, #4
 800dd60:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dd68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	3b04      	subs	r3, #4
 800dd6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	f023 0201 	bic.w	r2, r3, #1
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	3b04      	subs	r3, #4
 800dd7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dd80:	4a08      	ldr	r2, [pc, #32]	; (800dda4 <pxPortInitialiseStack+0x54>)
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	3b14      	subs	r3, #20
 800dd8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dd8c:	687a      	ldr	r2, [r7, #4]
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	3b20      	subs	r3, #32
 800dd96:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dd98:	68fb      	ldr	r3, [r7, #12]
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3714      	adds	r7, #20
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bc80      	pop	{r7}
 800dda2:	4770      	bx	lr
 800dda4:	0800dda9 	.word	0x0800dda9

0800dda8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b085      	sub	sp, #20
 800ddac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ddb2:	4b12      	ldr	r3, [pc, #72]	; (800ddfc <prvTaskExitError+0x54>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddba:	d00a      	beq.n	800ddd2 <prvTaskExitError+0x2a>
	__asm volatile
 800ddbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc0:	f383 8811 	msr	BASEPRI, r3
 800ddc4:	f3bf 8f6f 	isb	sy
 800ddc8:	f3bf 8f4f 	dsb	sy
 800ddcc:	60fb      	str	r3, [r7, #12]
}
 800ddce:	bf00      	nop
 800ddd0:	e7fe      	b.n	800ddd0 <prvTaskExitError+0x28>
	__asm volatile
 800ddd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd6:	f383 8811 	msr	BASEPRI, r3
 800ddda:	f3bf 8f6f 	isb	sy
 800ddde:	f3bf 8f4f 	dsb	sy
 800dde2:	60bb      	str	r3, [r7, #8]
}
 800dde4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dde6:	bf00      	nop
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d0fc      	beq.n	800dde8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ddee:	bf00      	nop
 800ddf0:	bf00      	nop
 800ddf2:	3714      	adds	r7, #20
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bc80      	pop	{r7}
 800ddf8:	4770      	bx	lr
 800ddfa:	bf00      	nop
 800ddfc:	2000012c 	.word	0x2000012c

0800de00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800de00:	4b07      	ldr	r3, [pc, #28]	; (800de20 <pxCurrentTCBConst2>)
 800de02:	6819      	ldr	r1, [r3, #0]
 800de04:	6808      	ldr	r0, [r1, #0]
 800de06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800de0a:	f380 8809 	msr	PSP, r0
 800de0e:	f3bf 8f6f 	isb	sy
 800de12:	f04f 0000 	mov.w	r0, #0
 800de16:	f380 8811 	msr	BASEPRI, r0
 800de1a:	f04e 0e0d 	orr.w	lr, lr, #13
 800de1e:	4770      	bx	lr

0800de20 <pxCurrentTCBConst2>:
 800de20:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800de24:	bf00      	nop
 800de26:	bf00      	nop

0800de28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800de28:	4806      	ldr	r0, [pc, #24]	; (800de44 <prvPortStartFirstTask+0x1c>)
 800de2a:	6800      	ldr	r0, [r0, #0]
 800de2c:	6800      	ldr	r0, [r0, #0]
 800de2e:	f380 8808 	msr	MSP, r0
 800de32:	b662      	cpsie	i
 800de34:	b661      	cpsie	f
 800de36:	f3bf 8f4f 	dsb	sy
 800de3a:	f3bf 8f6f 	isb	sy
 800de3e:	df00      	svc	0
 800de40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800de42:	bf00      	nop
 800de44:	e000ed08 	.word	0xe000ed08

0800de48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800de4e:	4b32      	ldr	r3, [pc, #200]	; (800df18 <xPortStartScheduler+0xd0>)
 800de50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	b2db      	uxtb	r3, r3
 800de58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	22ff      	movs	r2, #255	; 0xff
 800de5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	b2db      	uxtb	r3, r3
 800de66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de68:	78fb      	ldrb	r3, [r7, #3]
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800de70:	b2da      	uxtb	r2, r3
 800de72:	4b2a      	ldr	r3, [pc, #168]	; (800df1c <xPortStartScheduler+0xd4>)
 800de74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de76:	4b2a      	ldr	r3, [pc, #168]	; (800df20 <xPortStartScheduler+0xd8>)
 800de78:	2207      	movs	r2, #7
 800de7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de7c:	e009      	b.n	800de92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800de7e:	4b28      	ldr	r3, [pc, #160]	; (800df20 <xPortStartScheduler+0xd8>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	3b01      	subs	r3, #1
 800de84:	4a26      	ldr	r2, [pc, #152]	; (800df20 <xPortStartScheduler+0xd8>)
 800de86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de88:	78fb      	ldrb	r3, [r7, #3]
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	005b      	lsls	r3, r3, #1
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de92:	78fb      	ldrb	r3, [r7, #3]
 800de94:	b2db      	uxtb	r3, r3
 800de96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de9a:	2b80      	cmp	r3, #128	; 0x80
 800de9c:	d0ef      	beq.n	800de7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800de9e:	4b20      	ldr	r3, [pc, #128]	; (800df20 <xPortStartScheduler+0xd8>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f1c3 0307 	rsb	r3, r3, #7
 800dea6:	2b04      	cmp	r3, #4
 800dea8:	d00a      	beq.n	800dec0 <xPortStartScheduler+0x78>
	__asm volatile
 800deaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deae:	f383 8811 	msr	BASEPRI, r3
 800deb2:	f3bf 8f6f 	isb	sy
 800deb6:	f3bf 8f4f 	dsb	sy
 800deba:	60bb      	str	r3, [r7, #8]
}
 800debc:	bf00      	nop
 800debe:	e7fe      	b.n	800debe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dec0:	4b17      	ldr	r3, [pc, #92]	; (800df20 <xPortStartScheduler+0xd8>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	021b      	lsls	r3, r3, #8
 800dec6:	4a16      	ldr	r2, [pc, #88]	; (800df20 <xPortStartScheduler+0xd8>)
 800dec8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800deca:	4b15      	ldr	r3, [pc, #84]	; (800df20 <xPortStartScheduler+0xd8>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ded2:	4a13      	ldr	r2, [pc, #76]	; (800df20 <xPortStartScheduler+0xd8>)
 800ded4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	b2da      	uxtb	r2, r3
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dede:	4b11      	ldr	r3, [pc, #68]	; (800df24 <xPortStartScheduler+0xdc>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4a10      	ldr	r2, [pc, #64]	; (800df24 <xPortStartScheduler+0xdc>)
 800dee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dee8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800deea:	4b0e      	ldr	r3, [pc, #56]	; (800df24 <xPortStartScheduler+0xdc>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4a0d      	ldr	r2, [pc, #52]	; (800df24 <xPortStartScheduler+0xdc>)
 800def0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800def4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800def6:	f000 f8b9 	bl	800e06c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800defa:	4b0b      	ldr	r3, [pc, #44]	; (800df28 <xPortStartScheduler+0xe0>)
 800defc:	2200      	movs	r2, #0
 800defe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800df00:	f7ff ff92 	bl	800de28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800df04:	f7fe ff84 	bl	800ce10 <vTaskSwitchContext>
	prvTaskExitError();
 800df08:	f7ff ff4e 	bl	800dda8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800df0c:	2300      	movs	r3, #0
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3710      	adds	r7, #16
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	e000e400 	.word	0xe000e400
 800df1c:	20000e9c 	.word	0x20000e9c
 800df20:	20000ea0 	.word	0x20000ea0
 800df24:	e000ed20 	.word	0xe000ed20
 800df28:	2000012c 	.word	0x2000012c

0800df2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800df2c:	b480      	push	{r7}
 800df2e:	b083      	sub	sp, #12
 800df30:	af00      	add	r7, sp, #0
	__asm volatile
 800df32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df36:	f383 8811 	msr	BASEPRI, r3
 800df3a:	f3bf 8f6f 	isb	sy
 800df3e:	f3bf 8f4f 	dsb	sy
 800df42:	607b      	str	r3, [r7, #4]
}
 800df44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800df46:	4b0f      	ldr	r3, [pc, #60]	; (800df84 <vPortEnterCritical+0x58>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	3301      	adds	r3, #1
 800df4c:	4a0d      	ldr	r2, [pc, #52]	; (800df84 <vPortEnterCritical+0x58>)
 800df4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800df50:	4b0c      	ldr	r3, [pc, #48]	; (800df84 <vPortEnterCritical+0x58>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	2b01      	cmp	r3, #1
 800df56:	d10f      	bne.n	800df78 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800df58:	4b0b      	ldr	r3, [pc, #44]	; (800df88 <vPortEnterCritical+0x5c>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d00a      	beq.n	800df78 <vPortEnterCritical+0x4c>
	__asm volatile
 800df62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df66:	f383 8811 	msr	BASEPRI, r3
 800df6a:	f3bf 8f6f 	isb	sy
 800df6e:	f3bf 8f4f 	dsb	sy
 800df72:	603b      	str	r3, [r7, #0]
}
 800df74:	bf00      	nop
 800df76:	e7fe      	b.n	800df76 <vPortEnterCritical+0x4a>
	}
}
 800df78:	bf00      	nop
 800df7a:	370c      	adds	r7, #12
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bc80      	pop	{r7}
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	2000012c 	.word	0x2000012c
 800df88:	e000ed04 	.word	0xe000ed04

0800df8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800df92:	4b11      	ldr	r3, [pc, #68]	; (800dfd8 <vPortExitCritical+0x4c>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d10a      	bne.n	800dfb0 <vPortExitCritical+0x24>
	__asm volatile
 800df9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df9e:	f383 8811 	msr	BASEPRI, r3
 800dfa2:	f3bf 8f6f 	isb	sy
 800dfa6:	f3bf 8f4f 	dsb	sy
 800dfaa:	607b      	str	r3, [r7, #4]
}
 800dfac:	bf00      	nop
 800dfae:	e7fe      	b.n	800dfae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dfb0:	4b09      	ldr	r3, [pc, #36]	; (800dfd8 <vPortExitCritical+0x4c>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	3b01      	subs	r3, #1
 800dfb6:	4a08      	ldr	r2, [pc, #32]	; (800dfd8 <vPortExitCritical+0x4c>)
 800dfb8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dfba:	4b07      	ldr	r3, [pc, #28]	; (800dfd8 <vPortExitCritical+0x4c>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d105      	bne.n	800dfce <vPortExitCritical+0x42>
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	f383 8811 	msr	BASEPRI, r3
}
 800dfcc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dfce:	bf00      	nop
 800dfd0:	370c      	adds	r7, #12
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bc80      	pop	{r7}
 800dfd6:	4770      	bx	lr
 800dfd8:	2000012c 	.word	0x2000012c
 800dfdc:	00000000 	.word	0x00000000

0800dfe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dfe0:	f3ef 8009 	mrs	r0, PSP
 800dfe4:	f3bf 8f6f 	isb	sy
 800dfe8:	4b0d      	ldr	r3, [pc, #52]	; (800e020 <pxCurrentTCBConst>)
 800dfea:	681a      	ldr	r2, [r3, #0]
 800dfec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800dff0:	6010      	str	r0, [r2, #0]
 800dff2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800dff6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dffa:	f380 8811 	msr	BASEPRI, r0
 800dffe:	f7fe ff07 	bl	800ce10 <vTaskSwitchContext>
 800e002:	f04f 0000 	mov.w	r0, #0
 800e006:	f380 8811 	msr	BASEPRI, r0
 800e00a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e00e:	6819      	ldr	r1, [r3, #0]
 800e010:	6808      	ldr	r0, [r1, #0]
 800e012:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e016:	f380 8809 	msr	PSP, r0
 800e01a:	f3bf 8f6f 	isb	sy
 800e01e:	4770      	bx	lr

0800e020 <pxCurrentTCBConst>:
 800e020:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e024:	bf00      	nop
 800e026:	bf00      	nop

0800e028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
	__asm volatile
 800e02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e032:	f383 8811 	msr	BASEPRI, r3
 800e036:	f3bf 8f6f 	isb	sy
 800e03a:	f3bf 8f4f 	dsb	sy
 800e03e:	607b      	str	r3, [r7, #4]
}
 800e040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e042:	f7fe fe27 	bl	800cc94 <xTaskIncrementTick>
 800e046:	4603      	mov	r3, r0
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d003      	beq.n	800e054 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e04c:	4b06      	ldr	r3, [pc, #24]	; (800e068 <SysTick_Handler+0x40>)
 800e04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e052:	601a      	str	r2, [r3, #0]
 800e054:	2300      	movs	r3, #0
 800e056:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	f383 8811 	msr	BASEPRI, r3
}
 800e05e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e060:	bf00      	nop
 800e062:	3708      	adds	r7, #8
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}
 800e068:	e000ed04 	.word	0xe000ed04

0800e06c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e06c:	b480      	push	{r7}
 800e06e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e070:	4b0a      	ldr	r3, [pc, #40]	; (800e09c <vPortSetupTimerInterrupt+0x30>)
 800e072:	2200      	movs	r2, #0
 800e074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e076:	4b0a      	ldr	r3, [pc, #40]	; (800e0a0 <vPortSetupTimerInterrupt+0x34>)
 800e078:	2200      	movs	r2, #0
 800e07a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e07c:	4b09      	ldr	r3, [pc, #36]	; (800e0a4 <vPortSetupTimerInterrupt+0x38>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4a09      	ldr	r2, [pc, #36]	; (800e0a8 <vPortSetupTimerInterrupt+0x3c>)
 800e082:	fba2 2303 	umull	r2, r3, r2, r3
 800e086:	099b      	lsrs	r3, r3, #6
 800e088:	4a08      	ldr	r2, [pc, #32]	; (800e0ac <vPortSetupTimerInterrupt+0x40>)
 800e08a:	3b01      	subs	r3, #1
 800e08c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e08e:	4b03      	ldr	r3, [pc, #12]	; (800e09c <vPortSetupTimerInterrupt+0x30>)
 800e090:	2207      	movs	r2, #7
 800e092:	601a      	str	r2, [r3, #0]
}
 800e094:	bf00      	nop
 800e096:	46bd      	mov	sp, r7
 800e098:	bc80      	pop	{r7}
 800e09a:	4770      	bx	lr
 800e09c:	e000e010 	.word	0xe000e010
 800e0a0:	e000e018 	.word	0xe000e018
 800e0a4:	20000010 	.word	0x20000010
 800e0a8:	10624dd3 	.word	0x10624dd3
 800e0ac:	e000e014 	.word	0xe000e014

0800e0b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b085      	sub	sp, #20
 800e0b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e0b6:	f3ef 8305 	mrs	r3, IPSR
 800e0ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2b0f      	cmp	r3, #15
 800e0c0:	d914      	bls.n	800e0ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e0c2:	4a16      	ldr	r2, [pc, #88]	; (800e11c <vPortValidateInterruptPriority+0x6c>)
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	4413      	add	r3, r2
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e0cc:	4b14      	ldr	r3, [pc, #80]	; (800e120 <vPortValidateInterruptPriority+0x70>)
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	7afa      	ldrb	r2, [r7, #11]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d20a      	bcs.n	800e0ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0da:	f383 8811 	msr	BASEPRI, r3
 800e0de:	f3bf 8f6f 	isb	sy
 800e0e2:	f3bf 8f4f 	dsb	sy
 800e0e6:	607b      	str	r3, [r7, #4]
}
 800e0e8:	bf00      	nop
 800e0ea:	e7fe      	b.n	800e0ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e0ec:	4b0d      	ldr	r3, [pc, #52]	; (800e124 <vPortValidateInterruptPriority+0x74>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e0f4:	4b0c      	ldr	r3, [pc, #48]	; (800e128 <vPortValidateInterruptPriority+0x78>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d90a      	bls.n	800e112 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e100:	f383 8811 	msr	BASEPRI, r3
 800e104:	f3bf 8f6f 	isb	sy
 800e108:	f3bf 8f4f 	dsb	sy
 800e10c:	603b      	str	r3, [r7, #0]
}
 800e10e:	bf00      	nop
 800e110:	e7fe      	b.n	800e110 <vPortValidateInterruptPriority+0x60>
	}
 800e112:	bf00      	nop
 800e114:	3714      	adds	r7, #20
 800e116:	46bd      	mov	sp, r7
 800e118:	bc80      	pop	{r7}
 800e11a:	4770      	bx	lr
 800e11c:	e000e3f0 	.word	0xe000e3f0
 800e120:	20000e9c 	.word	0x20000e9c
 800e124:	e000ed0c 	.word	0xe000ed0c
 800e128:	20000ea0 	.word	0x20000ea0

0800e12c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b08a      	sub	sp, #40	; 0x28
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e134:	2300      	movs	r3, #0
 800e136:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e138:	f7fe fcf2 	bl	800cb20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e13c:	4b58      	ldr	r3, [pc, #352]	; (800e2a0 <pvPortMalloc+0x174>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d101      	bne.n	800e148 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e144:	f000 f910 	bl	800e368 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e148:	4b56      	ldr	r3, [pc, #344]	; (800e2a4 <pvPortMalloc+0x178>)
 800e14a:	681a      	ldr	r2, [r3, #0]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	4013      	ands	r3, r2
 800e150:	2b00      	cmp	r3, #0
 800e152:	f040 808e 	bne.w	800e272 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d01d      	beq.n	800e198 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e15c:	2208      	movs	r2, #8
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	4413      	add	r3, r2
 800e162:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f003 0307 	and.w	r3, r3, #7
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d014      	beq.n	800e198 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f023 0307 	bic.w	r3, r3, #7
 800e174:	3308      	adds	r3, #8
 800e176:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f003 0307 	and.w	r3, r3, #7
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d00a      	beq.n	800e198 <pvPortMalloc+0x6c>
	__asm volatile
 800e182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e186:	f383 8811 	msr	BASEPRI, r3
 800e18a:	f3bf 8f6f 	isb	sy
 800e18e:	f3bf 8f4f 	dsb	sy
 800e192:	617b      	str	r3, [r7, #20]
}
 800e194:	bf00      	nop
 800e196:	e7fe      	b.n	800e196 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d069      	beq.n	800e272 <pvPortMalloc+0x146>
 800e19e:	4b42      	ldr	r3, [pc, #264]	; (800e2a8 <pvPortMalloc+0x17c>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d864      	bhi.n	800e272 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e1a8:	4b40      	ldr	r3, [pc, #256]	; (800e2ac <pvPortMalloc+0x180>)
 800e1aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e1ac:	4b3f      	ldr	r3, [pc, #252]	; (800e2ac <pvPortMalloc+0x180>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1b2:	e004      	b.n	800e1be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	687a      	ldr	r2, [r7, #4]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d903      	bls.n	800e1d0 <pvPortMalloc+0xa4>
 800e1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d1f1      	bne.n	800e1b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e1d0:	4b33      	ldr	r3, [pc, #204]	; (800e2a0 <pvPortMalloc+0x174>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d04b      	beq.n	800e272 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e1da:	6a3b      	ldr	r3, [r7, #32]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2208      	movs	r2, #8
 800e1e0:	4413      	add	r3, r2
 800e1e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	6a3b      	ldr	r3, [r7, #32]
 800e1ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ee:	685a      	ldr	r2, [r3, #4]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	1ad2      	subs	r2, r2, r3
 800e1f4:	2308      	movs	r3, #8
 800e1f6:	005b      	lsls	r3, r3, #1
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d91f      	bls.n	800e23c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e1fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	4413      	add	r3, r2
 800e202:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e204:	69bb      	ldr	r3, [r7, #24]
 800e206:	f003 0307 	and.w	r3, r3, #7
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d00a      	beq.n	800e224 <pvPortMalloc+0xf8>
	__asm volatile
 800e20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e212:	f383 8811 	msr	BASEPRI, r3
 800e216:	f3bf 8f6f 	isb	sy
 800e21a:	f3bf 8f4f 	dsb	sy
 800e21e:	613b      	str	r3, [r7, #16]
}
 800e220:	bf00      	nop
 800e222:	e7fe      	b.n	800e222 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e226:	685a      	ldr	r2, [r3, #4]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	1ad2      	subs	r2, r2, r3
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e232:	687a      	ldr	r2, [r7, #4]
 800e234:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e236:	69b8      	ldr	r0, [r7, #24]
 800e238:	f000 f8f8 	bl	800e42c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e23c:	4b1a      	ldr	r3, [pc, #104]	; (800e2a8 <pvPortMalloc+0x17c>)
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	1ad3      	subs	r3, r2, r3
 800e246:	4a18      	ldr	r2, [pc, #96]	; (800e2a8 <pvPortMalloc+0x17c>)
 800e248:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e24a:	4b17      	ldr	r3, [pc, #92]	; (800e2a8 <pvPortMalloc+0x17c>)
 800e24c:	681a      	ldr	r2, [r3, #0]
 800e24e:	4b18      	ldr	r3, [pc, #96]	; (800e2b0 <pvPortMalloc+0x184>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	429a      	cmp	r2, r3
 800e254:	d203      	bcs.n	800e25e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e256:	4b14      	ldr	r3, [pc, #80]	; (800e2a8 <pvPortMalloc+0x17c>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	4a15      	ldr	r2, [pc, #84]	; (800e2b0 <pvPortMalloc+0x184>)
 800e25c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e260:	685a      	ldr	r2, [r3, #4]
 800e262:	4b10      	ldr	r3, [pc, #64]	; (800e2a4 <pvPortMalloc+0x178>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	431a      	orrs	r2, r3
 800e268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26e:	2200      	movs	r2, #0
 800e270:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e272:	f7fe fc63 	bl	800cb3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e276:	69fb      	ldr	r3, [r7, #28]
 800e278:	f003 0307 	and.w	r3, r3, #7
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d00a      	beq.n	800e296 <pvPortMalloc+0x16a>
	__asm volatile
 800e280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e284:	f383 8811 	msr	BASEPRI, r3
 800e288:	f3bf 8f6f 	isb	sy
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	60fb      	str	r3, [r7, #12]
}
 800e292:	bf00      	nop
 800e294:	e7fe      	b.n	800e294 <pvPortMalloc+0x168>
	return pvReturn;
 800e296:	69fb      	ldr	r3, [r7, #28]
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3728      	adds	r7, #40	; 0x28
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}
 800e2a0:	20002248 	.word	0x20002248
 800e2a4:	20002254 	.word	0x20002254
 800e2a8:	2000224c 	.word	0x2000224c
 800e2ac:	20002240 	.word	0x20002240
 800e2b0:	20002250 	.word	0x20002250

0800e2b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b086      	sub	sp, #24
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d048      	beq.n	800e358 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e2c6:	2308      	movs	r3, #8
 800e2c8:	425b      	negs	r3, r3
 800e2ca:	697a      	ldr	r2, [r7, #20]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	685a      	ldr	r2, [r3, #4]
 800e2d8:	4b21      	ldr	r3, [pc, #132]	; (800e360 <vPortFree+0xac>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4013      	ands	r3, r2
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d10a      	bne.n	800e2f8 <vPortFree+0x44>
	__asm volatile
 800e2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e6:	f383 8811 	msr	BASEPRI, r3
 800e2ea:	f3bf 8f6f 	isb	sy
 800e2ee:	f3bf 8f4f 	dsb	sy
 800e2f2:	60fb      	str	r3, [r7, #12]
}
 800e2f4:	bf00      	nop
 800e2f6:	e7fe      	b.n	800e2f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d00a      	beq.n	800e316 <vPortFree+0x62>
	__asm volatile
 800e300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e304:	f383 8811 	msr	BASEPRI, r3
 800e308:	f3bf 8f6f 	isb	sy
 800e30c:	f3bf 8f4f 	dsb	sy
 800e310:	60bb      	str	r3, [r7, #8]
}
 800e312:	bf00      	nop
 800e314:	e7fe      	b.n	800e314 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	685a      	ldr	r2, [r3, #4]
 800e31a:	4b11      	ldr	r3, [pc, #68]	; (800e360 <vPortFree+0xac>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	4013      	ands	r3, r2
 800e320:	2b00      	cmp	r3, #0
 800e322:	d019      	beq.n	800e358 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d115      	bne.n	800e358 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	685a      	ldr	r2, [r3, #4]
 800e330:	4b0b      	ldr	r3, [pc, #44]	; (800e360 <vPortFree+0xac>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	43db      	mvns	r3, r3
 800e336:	401a      	ands	r2, r3
 800e338:	693b      	ldr	r3, [r7, #16]
 800e33a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e33c:	f7fe fbf0 	bl	800cb20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	685a      	ldr	r2, [r3, #4]
 800e344:	4b07      	ldr	r3, [pc, #28]	; (800e364 <vPortFree+0xb0>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4413      	add	r3, r2
 800e34a:	4a06      	ldr	r2, [pc, #24]	; (800e364 <vPortFree+0xb0>)
 800e34c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e34e:	6938      	ldr	r0, [r7, #16]
 800e350:	f000 f86c 	bl	800e42c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e354:	f7fe fbf2 	bl	800cb3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e358:	bf00      	nop
 800e35a:	3718      	adds	r7, #24
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	20002254 	.word	0x20002254
 800e364:	2000224c 	.word	0x2000224c

0800e368 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e368:	b480      	push	{r7}
 800e36a:	b085      	sub	sp, #20
 800e36c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e36e:	f241 339c 	movw	r3, #5020	; 0x139c
 800e372:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e374:	4b27      	ldr	r3, [pc, #156]	; (800e414 <prvHeapInit+0xac>)
 800e376:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	f003 0307 	and.w	r3, r3, #7
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d00c      	beq.n	800e39c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	3307      	adds	r3, #7
 800e386:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f023 0307 	bic.w	r3, r3, #7
 800e38e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e390:	68ba      	ldr	r2, [r7, #8]
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	1ad3      	subs	r3, r2, r3
 800e396:	4a1f      	ldr	r2, [pc, #124]	; (800e414 <prvHeapInit+0xac>)
 800e398:	4413      	add	r3, r2
 800e39a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e3a0:	4a1d      	ldr	r2, [pc, #116]	; (800e418 <prvHeapInit+0xb0>)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e3a6:	4b1c      	ldr	r3, [pc, #112]	; (800e418 <prvHeapInit+0xb0>)
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	68ba      	ldr	r2, [r7, #8]
 800e3b0:	4413      	add	r3, r2
 800e3b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e3b4:	2208      	movs	r2, #8
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	1a9b      	subs	r3, r3, r2
 800e3ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f023 0307 	bic.w	r3, r3, #7
 800e3c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	4a15      	ldr	r2, [pc, #84]	; (800e41c <prvHeapInit+0xb4>)
 800e3c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e3ca:	4b14      	ldr	r3, [pc, #80]	; (800e41c <prvHeapInit+0xb4>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e3d2:	4b12      	ldr	r3, [pc, #72]	; (800e41c <prvHeapInit+0xb4>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	68fa      	ldr	r2, [r7, #12]
 800e3e2:	1ad2      	subs	r2, r2, r3
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e3e8:	4b0c      	ldr	r3, [pc, #48]	; (800e41c <prvHeapInit+0xb4>)
 800e3ea:	681a      	ldr	r2, [r3, #0]
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	4a0a      	ldr	r2, [pc, #40]	; (800e420 <prvHeapInit+0xb8>)
 800e3f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	4a09      	ldr	r2, [pc, #36]	; (800e424 <prvHeapInit+0xbc>)
 800e3fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e400:	4b09      	ldr	r3, [pc, #36]	; (800e428 <prvHeapInit+0xc0>)
 800e402:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e406:	601a      	str	r2, [r3, #0]
}
 800e408:	bf00      	nop
 800e40a:	3714      	adds	r7, #20
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bc80      	pop	{r7}
 800e410:	4770      	bx	lr
 800e412:	bf00      	nop
 800e414:	20000ea4 	.word	0x20000ea4
 800e418:	20002240 	.word	0x20002240
 800e41c:	20002248 	.word	0x20002248
 800e420:	20002250 	.word	0x20002250
 800e424:	2000224c 	.word	0x2000224c
 800e428:	20002254 	.word	0x20002254

0800e42c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e42c:	b480      	push	{r7}
 800e42e:	b085      	sub	sp, #20
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e434:	4b27      	ldr	r3, [pc, #156]	; (800e4d4 <prvInsertBlockIntoFreeList+0xa8>)
 800e436:	60fb      	str	r3, [r7, #12]
 800e438:	e002      	b.n	800e440 <prvInsertBlockIntoFreeList+0x14>
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	60fb      	str	r3, [r7, #12]
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	687a      	ldr	r2, [r7, #4]
 800e446:	429a      	cmp	r2, r3
 800e448:	d8f7      	bhi.n	800e43a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	685b      	ldr	r3, [r3, #4]
 800e452:	68ba      	ldr	r2, [r7, #8]
 800e454:	4413      	add	r3, r2
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	429a      	cmp	r2, r3
 800e45a:	d108      	bne.n	800e46e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	685a      	ldr	r2, [r3, #4]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	685b      	ldr	r3, [r3, #4]
 800e464:	441a      	add	r2, r3
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	685b      	ldr	r3, [r3, #4]
 800e476:	68ba      	ldr	r2, [r7, #8]
 800e478:	441a      	add	r2, r3
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d118      	bne.n	800e4b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	4b14      	ldr	r3, [pc, #80]	; (800e4d8 <prvInsertBlockIntoFreeList+0xac>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d00d      	beq.n	800e4aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	685a      	ldr	r2, [r3, #4]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	685b      	ldr	r3, [r3, #4]
 800e498:	441a      	add	r2, r3
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	601a      	str	r2, [r3, #0]
 800e4a8:	e008      	b.n	800e4bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e4aa:	4b0b      	ldr	r3, [pc, #44]	; (800e4d8 <prvInsertBlockIntoFreeList+0xac>)
 800e4ac:	681a      	ldr	r2, [r3, #0]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	601a      	str	r2, [r3, #0]
 800e4b2:	e003      	b.n	800e4bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	681a      	ldr	r2, [r3, #0]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e4bc:	68fa      	ldr	r2, [r7, #12]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d002      	beq.n	800e4ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	687a      	ldr	r2, [r7, #4]
 800e4c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4ca:	bf00      	nop
 800e4cc:	3714      	adds	r7, #20
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bc80      	pop	{r7}
 800e4d2:	4770      	bx	lr
 800e4d4:	20002240 	.word	0x20002240
 800e4d8:	20002248 	.word	0x20002248

0800e4dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	4912      	ldr	r1, [pc, #72]	; (800e52c <MX_USB_DEVICE_Init+0x50>)
 800e4e4:	4812      	ldr	r0, [pc, #72]	; (800e530 <MX_USB_DEVICE_Init+0x54>)
 800e4e6:	f7fb fdfc 	bl	800a0e2 <USBD_Init>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d001      	beq.n	800e4f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e4f0:	f7f2 fde0 	bl	80010b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e4f4:	490f      	ldr	r1, [pc, #60]	; (800e534 <MX_USB_DEVICE_Init+0x58>)
 800e4f6:	480e      	ldr	r0, [pc, #56]	; (800e530 <MX_USB_DEVICE_Init+0x54>)
 800e4f8:	f7fb fe1e 	bl	800a138 <USBD_RegisterClass>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d001      	beq.n	800e506 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e502:	f7f2 fdd7 	bl	80010b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e506:	490c      	ldr	r1, [pc, #48]	; (800e538 <MX_USB_DEVICE_Init+0x5c>)
 800e508:	4809      	ldr	r0, [pc, #36]	; (800e530 <MX_USB_DEVICE_Init+0x54>)
 800e50a:	f7fb fd4f 	bl	8009fac <USBD_CDC_RegisterInterface>
 800e50e:	4603      	mov	r3, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d001      	beq.n	800e518 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e514:	f7f2 fdce 	bl	80010b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e518:	4805      	ldr	r0, [pc, #20]	; (800e530 <MX_USB_DEVICE_Init+0x54>)
 800e51a:	f7fb fe26 	bl	800a16a <USBD_Start>
 800e51e:	4603      	mov	r3, r0
 800e520:	2b00      	cmp	r3, #0
 800e522:	d001      	beq.n	800e528 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e524:	f7f2 fdc6 	bl	80010b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e528:	bf00      	nop
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	20000140 	.word	0x20000140
 800e530:	20002718 	.word	0x20002718
 800e534:	20000028 	.word	0x20000028
 800e538:	20000130 	.word	0x20000130

0800e53c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e540:	2200      	movs	r2, #0
 800e542:	4905      	ldr	r1, [pc, #20]	; (800e558 <CDC_Init_FS+0x1c>)
 800e544:	4805      	ldr	r0, [pc, #20]	; (800e55c <CDC_Init_FS+0x20>)
 800e546:	f7fb fd47 	bl	8009fd8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e54a:	4905      	ldr	r1, [pc, #20]	; (800e560 <CDC_Init_FS+0x24>)
 800e54c:	4803      	ldr	r0, [pc, #12]	; (800e55c <CDC_Init_FS+0x20>)
 800e54e:	f7fb fd5c 	bl	800a00a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e552:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e554:	4618      	mov	r0, r3
 800e556:	bd80      	pop	{r7, pc}
 800e558:	20002dc4 	.word	0x20002dc4
 800e55c:	20002718 	.word	0x20002718
 800e560:	200029dc 	.word	0x200029dc

0800e564 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e564:	b480      	push	{r7}
 800e566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e568:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bc80      	pop	{r7}
 800e570:	4770      	bx	lr
	...

0800e574 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e574:	b480      	push	{r7}
 800e576:	b083      	sub	sp, #12
 800e578:	af00      	add	r7, sp, #0
 800e57a:	4603      	mov	r3, r0
 800e57c:	6039      	str	r1, [r7, #0]
 800e57e:	71fb      	strb	r3, [r7, #7]
 800e580:	4613      	mov	r3, r2
 800e582:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e584:	79fb      	ldrb	r3, [r7, #7]
 800e586:	2b23      	cmp	r3, #35	; 0x23
 800e588:	d84a      	bhi.n	800e620 <CDC_Control_FS+0xac>
 800e58a:	a201      	add	r2, pc, #4	; (adr r2, 800e590 <CDC_Control_FS+0x1c>)
 800e58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e590:	0800e621 	.word	0x0800e621
 800e594:	0800e621 	.word	0x0800e621
 800e598:	0800e621 	.word	0x0800e621
 800e59c:	0800e621 	.word	0x0800e621
 800e5a0:	0800e621 	.word	0x0800e621
 800e5a4:	0800e621 	.word	0x0800e621
 800e5a8:	0800e621 	.word	0x0800e621
 800e5ac:	0800e621 	.word	0x0800e621
 800e5b0:	0800e621 	.word	0x0800e621
 800e5b4:	0800e621 	.word	0x0800e621
 800e5b8:	0800e621 	.word	0x0800e621
 800e5bc:	0800e621 	.word	0x0800e621
 800e5c0:	0800e621 	.word	0x0800e621
 800e5c4:	0800e621 	.word	0x0800e621
 800e5c8:	0800e621 	.word	0x0800e621
 800e5cc:	0800e621 	.word	0x0800e621
 800e5d0:	0800e621 	.word	0x0800e621
 800e5d4:	0800e621 	.word	0x0800e621
 800e5d8:	0800e621 	.word	0x0800e621
 800e5dc:	0800e621 	.word	0x0800e621
 800e5e0:	0800e621 	.word	0x0800e621
 800e5e4:	0800e621 	.word	0x0800e621
 800e5e8:	0800e621 	.word	0x0800e621
 800e5ec:	0800e621 	.word	0x0800e621
 800e5f0:	0800e621 	.word	0x0800e621
 800e5f4:	0800e621 	.word	0x0800e621
 800e5f8:	0800e621 	.word	0x0800e621
 800e5fc:	0800e621 	.word	0x0800e621
 800e600:	0800e621 	.word	0x0800e621
 800e604:	0800e621 	.word	0x0800e621
 800e608:	0800e621 	.word	0x0800e621
 800e60c:	0800e621 	.word	0x0800e621
 800e610:	0800e621 	.word	0x0800e621
 800e614:	0800e621 	.word	0x0800e621
 800e618:	0800e621 	.word	0x0800e621
 800e61c:	0800e621 	.word	0x0800e621
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e620:	bf00      	nop
  }

  return (USBD_OK);
 800e622:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e624:	4618      	mov	r0, r3
 800e626:	370c      	adds	r7, #12
 800e628:	46bd      	mov	sp, r7
 800e62a:	bc80      	pop	{r7}
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop

0800e630 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b084      	sub	sp, #16
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
 800e638:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 800e63a:	2300      	movs	r3, #0
 800e63c:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < (*Len); i++)
 800e63e:	2300      	movs	r3, #0
 800e640:	60fb      	str	r3, [r7, #12]
 800e642:	e00c      	b.n	800e65e <CDC_Receive_FS+0x2e>
	{
		xQueueSendToBackFromISR(qUSB_rcvQueue, &Buf[i], &xHigherPriorityTaskWoken );
 800e644:	4b14      	ldr	r3, [pc, #80]	; (800e698 <CDC_Receive_FS+0x68>)
 800e646:	6818      	ldr	r0, [r3, #0]
 800e648:	687a      	ldr	r2, [r7, #4]
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	18d1      	adds	r1, r2, r3
 800e64e:	f107 0208 	add.w	r2, r7, #8
 800e652:	2300      	movs	r3, #0
 800e654:	f7fd fbac 	bl	800bdb0 <xQueueGenericSendFromISR>
	for (uint32_t i = 0; i < (*Len); i++)
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	3301      	adds	r3, #1
 800e65c:	60fb      	str	r3, [r7, #12]
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	68fa      	ldr	r2, [r7, #12]
 800e664:	429a      	cmp	r2, r3
 800e666:	d3ed      	bcc.n	800e644 <CDC_Receive_FS+0x14>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e668:	6879      	ldr	r1, [r7, #4]
 800e66a:	480c      	ldr	r0, [pc, #48]	; (800e69c <CDC_Receive_FS+0x6c>)
 800e66c:	f7fb fccd 	bl	800a00a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e670:	480a      	ldr	r0, [pc, #40]	; (800e69c <CDC_Receive_FS+0x6c>)
 800e672:	f7fb fd0c 	bl	800a08e <USBD_CDC_ReceivePacket>
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d007      	beq.n	800e68c <CDC_Receive_FS+0x5c>
 800e67c:	4b08      	ldr	r3, [pc, #32]	; (800e6a0 <CDC_Receive_FS+0x70>)
 800e67e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e682:	601a      	str	r2, [r3, #0]
 800e684:	f3bf 8f4f 	dsb	sy
 800e688:	f3bf 8f6f 	isb	sy
  return (USBD_OK);
 800e68c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3710      	adds	r7, #16
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
 800e696:	bf00      	nop
 800e698:	20002494 	.word	0x20002494
 800e69c:	20002718 	.word	0x20002718
 800e6a0:	e000ed04 	.word	0xe000ed04

0800e6a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	460b      	mov	r3, r1
 800e6ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e6b4:	4b0d      	ldr	r3, [pc, #52]	; (800e6ec <CDC_Transmit_FS+0x48>)
 800e6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d001      	beq.n	800e6ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	e00b      	b.n	800e6e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e6ca:	887b      	ldrh	r3, [r7, #2]
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	6879      	ldr	r1, [r7, #4]
 800e6d0:	4806      	ldr	r0, [pc, #24]	; (800e6ec <CDC_Transmit_FS+0x48>)
 800e6d2:	f7fb fc81 	bl	8009fd8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e6d6:	4805      	ldr	r0, [pc, #20]	; (800e6ec <CDC_Transmit_FS+0x48>)
 800e6d8:	f7fb fcaa 	bl	800a030 <USBD_CDC_TransmitPacket>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e6e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3710      	adds	r7, #16
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	20002718 	.word	0x20002718

0800e6f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b083      	sub	sp, #12
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	6039      	str	r1, [r7, #0]
 800e6fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	2212      	movs	r2, #18
 800e700:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e702:	4b03      	ldr	r3, [pc, #12]	; (800e710 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e704:	4618      	mov	r0, r3
 800e706:	370c      	adds	r7, #12
 800e708:	46bd      	mov	sp, r7
 800e70a:	bc80      	pop	{r7}
 800e70c:	4770      	bx	lr
 800e70e:	bf00      	nop
 800e710:	2000015c 	.word	0x2000015c

0800e714 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e714:	b480      	push	{r7}
 800e716:	b083      	sub	sp, #12
 800e718:	af00      	add	r7, sp, #0
 800e71a:	4603      	mov	r3, r0
 800e71c:	6039      	str	r1, [r7, #0]
 800e71e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	2204      	movs	r2, #4
 800e724:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e726:	4b03      	ldr	r3, [pc, #12]	; (800e734 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e728:	4618      	mov	r0, r3
 800e72a:	370c      	adds	r7, #12
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bc80      	pop	{r7}
 800e730:	4770      	bx	lr
 800e732:	bf00      	nop
 800e734:	20000170 	.word	0x20000170

0800e738 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b082      	sub	sp, #8
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	4603      	mov	r3, r0
 800e740:	6039      	str	r1, [r7, #0]
 800e742:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e744:	79fb      	ldrb	r3, [r7, #7]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d105      	bne.n	800e756 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e74a:	683a      	ldr	r2, [r7, #0]
 800e74c:	4907      	ldr	r1, [pc, #28]	; (800e76c <USBD_FS_ProductStrDescriptor+0x34>)
 800e74e:	4808      	ldr	r0, [pc, #32]	; (800e770 <USBD_FS_ProductStrDescriptor+0x38>)
 800e750:	f7fc fc84 	bl	800b05c <USBD_GetString>
 800e754:	e004      	b.n	800e760 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e756:	683a      	ldr	r2, [r7, #0]
 800e758:	4904      	ldr	r1, [pc, #16]	; (800e76c <USBD_FS_ProductStrDescriptor+0x34>)
 800e75a:	4805      	ldr	r0, [pc, #20]	; (800e770 <USBD_FS_ProductStrDescriptor+0x38>)
 800e75c:	f7fc fc7e 	bl	800b05c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e760:	4b02      	ldr	r3, [pc, #8]	; (800e76c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e762:	4618      	mov	r0, r3
 800e764:	3708      	adds	r7, #8
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop
 800e76c:	200031ac 	.word	0x200031ac
 800e770:	0800f174 	.word	0x0800f174

0800e774 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	4603      	mov	r3, r0
 800e77c:	6039      	str	r1, [r7, #0]
 800e77e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e780:	683a      	ldr	r2, [r7, #0]
 800e782:	4904      	ldr	r1, [pc, #16]	; (800e794 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e784:	4804      	ldr	r0, [pc, #16]	; (800e798 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e786:	f7fc fc69 	bl	800b05c <USBD_GetString>
  return USBD_StrDesc;
 800e78a:	4b02      	ldr	r3, [pc, #8]	; (800e794 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3708      	adds	r7, #8
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}
 800e794:	200031ac 	.word	0x200031ac
 800e798:	0800f180 	.word	0x0800f180

0800e79c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	6039      	str	r1, [r7, #0]
 800e7a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	221a      	movs	r2, #26
 800e7ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e7ae:	f000 f843 	bl	800e838 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e7b2:	4b02      	ldr	r3, [pc, #8]	; (800e7bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3708      	adds	r7, #8
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	20000174 	.word	0x20000174

0800e7c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b082      	sub	sp, #8
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	6039      	str	r1, [r7, #0]
 800e7ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e7cc:	79fb      	ldrb	r3, [r7, #7]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d105      	bne.n	800e7de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e7d2:	683a      	ldr	r2, [r7, #0]
 800e7d4:	4907      	ldr	r1, [pc, #28]	; (800e7f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e7d6:	4808      	ldr	r0, [pc, #32]	; (800e7f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e7d8:	f7fc fc40 	bl	800b05c <USBD_GetString>
 800e7dc:	e004      	b.n	800e7e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e7de:	683a      	ldr	r2, [r7, #0]
 800e7e0:	4904      	ldr	r1, [pc, #16]	; (800e7f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e7e2:	4805      	ldr	r0, [pc, #20]	; (800e7f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e7e4:	f7fc fc3a 	bl	800b05c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e7e8:	4b02      	ldr	r3, [pc, #8]	; (800e7f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3708      	adds	r7, #8
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	200031ac 	.word	0x200031ac
 800e7f8:	0800f194 	.word	0x0800f194

0800e7fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b082      	sub	sp, #8
 800e800:	af00      	add	r7, sp, #0
 800e802:	4603      	mov	r3, r0
 800e804:	6039      	str	r1, [r7, #0]
 800e806:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e808:	79fb      	ldrb	r3, [r7, #7]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d105      	bne.n	800e81a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e80e:	683a      	ldr	r2, [r7, #0]
 800e810:	4907      	ldr	r1, [pc, #28]	; (800e830 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e812:	4808      	ldr	r0, [pc, #32]	; (800e834 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e814:	f7fc fc22 	bl	800b05c <USBD_GetString>
 800e818:	e004      	b.n	800e824 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e81a:	683a      	ldr	r2, [r7, #0]
 800e81c:	4904      	ldr	r1, [pc, #16]	; (800e830 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e81e:	4805      	ldr	r0, [pc, #20]	; (800e834 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e820:	f7fc fc1c 	bl	800b05c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e824:	4b02      	ldr	r3, [pc, #8]	; (800e830 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e826:	4618      	mov	r0, r3
 800e828:	3708      	adds	r7, #8
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}
 800e82e:	bf00      	nop
 800e830:	200031ac 	.word	0x200031ac
 800e834:	0800f1a0 	.word	0x0800f1a0

0800e838 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e83e:	4b0f      	ldr	r3, [pc, #60]	; (800e87c <Get_SerialNum+0x44>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e844:	4b0e      	ldr	r3, [pc, #56]	; (800e880 <Get_SerialNum+0x48>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e84a:	4b0e      	ldr	r3, [pc, #56]	; (800e884 <Get_SerialNum+0x4c>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e850:	68fa      	ldr	r2, [r7, #12]
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	4413      	add	r3, r2
 800e856:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d009      	beq.n	800e872 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e85e:	2208      	movs	r2, #8
 800e860:	4909      	ldr	r1, [pc, #36]	; (800e888 <Get_SerialNum+0x50>)
 800e862:	68f8      	ldr	r0, [r7, #12]
 800e864:	f000 f814 	bl	800e890 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e868:	2204      	movs	r2, #4
 800e86a:	4908      	ldr	r1, [pc, #32]	; (800e88c <Get_SerialNum+0x54>)
 800e86c:	68b8      	ldr	r0, [r7, #8]
 800e86e:	f000 f80f 	bl	800e890 <IntToUnicode>
  }
}
 800e872:	bf00      	nop
 800e874:	3710      	adds	r7, #16
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	1ffff7e8 	.word	0x1ffff7e8
 800e880:	1ffff7ec 	.word	0x1ffff7ec
 800e884:	1ffff7f0 	.word	0x1ffff7f0
 800e888:	20000176 	.word	0x20000176
 800e88c:	20000186 	.word	0x20000186

0800e890 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e890:	b480      	push	{r7}
 800e892:	b087      	sub	sp, #28
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	4613      	mov	r3, r2
 800e89c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	75fb      	strb	r3, [r7, #23]
 800e8a6:	e027      	b.n	800e8f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	0f1b      	lsrs	r3, r3, #28
 800e8ac:	2b09      	cmp	r3, #9
 800e8ae:	d80b      	bhi.n	800e8c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	0f1b      	lsrs	r3, r3, #28
 800e8b4:	b2da      	uxtb	r2, r3
 800e8b6:	7dfb      	ldrb	r3, [r7, #23]
 800e8b8:	005b      	lsls	r3, r3, #1
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	440b      	add	r3, r1
 800e8c0:	3230      	adds	r2, #48	; 0x30
 800e8c2:	b2d2      	uxtb	r2, r2
 800e8c4:	701a      	strb	r2, [r3, #0]
 800e8c6:	e00a      	b.n	800e8de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	0f1b      	lsrs	r3, r3, #28
 800e8cc:	b2da      	uxtb	r2, r3
 800e8ce:	7dfb      	ldrb	r3, [r7, #23]
 800e8d0:	005b      	lsls	r3, r3, #1
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	440b      	add	r3, r1
 800e8d8:	3237      	adds	r2, #55	; 0x37
 800e8da:	b2d2      	uxtb	r2, r2
 800e8dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	011b      	lsls	r3, r3, #4
 800e8e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e8e4:	7dfb      	ldrb	r3, [r7, #23]
 800e8e6:	005b      	lsls	r3, r3, #1
 800e8e8:	3301      	adds	r3, #1
 800e8ea:	68ba      	ldr	r2, [r7, #8]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e8f2:	7dfb      	ldrb	r3, [r7, #23]
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	75fb      	strb	r3, [r7, #23]
 800e8f8:	7dfa      	ldrb	r2, [r7, #23]
 800e8fa:	79fb      	ldrb	r3, [r7, #7]
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	d3d3      	bcc.n	800e8a8 <IntToUnicode+0x18>
  }
}
 800e900:	bf00      	nop
 800e902:	bf00      	nop
 800e904:	371c      	adds	r7, #28
 800e906:	46bd      	mov	sp, r7
 800e908:	bc80      	pop	{r7}
 800e90a:	4770      	bx	lr

0800e90c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	4a0d      	ldr	r2, [pc, #52]	; (800e950 <HAL_PCD_MspInit+0x44>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d113      	bne.n	800e946 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e91e:	4b0d      	ldr	r3, [pc, #52]	; (800e954 <HAL_PCD_MspInit+0x48>)
 800e920:	69db      	ldr	r3, [r3, #28]
 800e922:	4a0c      	ldr	r2, [pc, #48]	; (800e954 <HAL_PCD_MspInit+0x48>)
 800e924:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e928:	61d3      	str	r3, [r2, #28]
 800e92a:	4b0a      	ldr	r3, [pc, #40]	; (800e954 <HAL_PCD_MspInit+0x48>)
 800e92c:	69db      	ldr	r3, [r3, #28]
 800e92e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e932:	60fb      	str	r3, [r7, #12]
 800e934:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800e936:	2200      	movs	r2, #0
 800e938:	2105      	movs	r1, #5
 800e93a:	2014      	movs	r0, #20
 800e93c:	f7f4 fddf 	bl	80034fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800e940:	2014      	movs	r0, #20
 800e942:	f7f4 fdf8 	bl	8003536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e946:	bf00      	nop
 800e948:	3710      	adds	r7, #16
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	40005c00 	.word	0x40005c00
 800e954:	40021000 	.word	0x40021000

0800e958 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800e96c:	4619      	mov	r1, r3
 800e96e:	4610      	mov	r0, r2
 800e970:	f7fb fc43 	bl	800a1fa <USBD_LL_SetupStage>
}
 800e974:	bf00      	nop
 800e976:	3708      	adds	r7, #8
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	460b      	mov	r3, r1
 800e986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800e98e:	78fa      	ldrb	r2, [r7, #3]
 800e990:	6879      	ldr	r1, [r7, #4]
 800e992:	4613      	mov	r3, r2
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	4413      	add	r3, r2
 800e998:	00db      	lsls	r3, r3, #3
 800e99a:	440b      	add	r3, r1
 800e99c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e9a0:	681a      	ldr	r2, [r3, #0]
 800e9a2:	78fb      	ldrb	r3, [r7, #3]
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	f7fb fc75 	bl	800a294 <USBD_LL_DataOutStage>
}
 800e9aa:	bf00      	nop
 800e9ac:	3708      	adds	r7, #8
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}

0800e9b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9b2:	b580      	push	{r7, lr}
 800e9b4:	b082      	sub	sp, #8
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
 800e9ba:	460b      	mov	r3, r1
 800e9bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800e9c4:	78fa      	ldrb	r2, [r7, #3]
 800e9c6:	6879      	ldr	r1, [r7, #4]
 800e9c8:	4613      	mov	r3, r2
 800e9ca:	009b      	lsls	r3, r3, #2
 800e9cc:	4413      	add	r3, r2
 800e9ce:	00db      	lsls	r3, r3, #3
 800e9d0:	440b      	add	r3, r1
 800e9d2:	333c      	adds	r3, #60	; 0x3c
 800e9d4:	681a      	ldr	r2, [r3, #0]
 800e9d6:	78fb      	ldrb	r3, [r7, #3]
 800e9d8:	4619      	mov	r1, r3
 800e9da:	f7fb fccc 	bl	800a376 <USBD_LL_DataInStage>
}
 800e9de:	bf00      	nop
 800e9e0:	3708      	adds	r7, #8
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}

0800e9e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9e6:	b580      	push	{r7, lr}
 800e9e8:	b082      	sub	sp, #8
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7fb fddc 	bl	800a5b2 <USBD_LL_SOF>
}
 800e9fa:	bf00      	nop
 800e9fc:	3708      	adds	r7, #8
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}

0800ea02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea02:	b580      	push	{r7, lr}
 800ea04:	b084      	sub	sp, #16
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	689b      	ldr	r3, [r3, #8]
 800ea12:	2b02      	cmp	r3, #2
 800ea14:	d001      	beq.n	800ea1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ea16:	f7f2 fb4d 	bl	80010b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ea20:	7bfa      	ldrb	r2, [r7, #15]
 800ea22:	4611      	mov	r1, r2
 800ea24:	4618      	mov	r0, r3
 800ea26:	f7fb fd8c 	bl	800a542 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7fb fd45 	bl	800a4c0 <USBD_LL_Reset>
}
 800ea36:	bf00      	nop
 800ea38:	3710      	adds	r7, #16
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
	...

0800ea40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7fb fd86 	bl	800a560 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	699b      	ldr	r3, [r3, #24]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d005      	beq.n	800ea68 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea5c:	4b04      	ldr	r3, [pc, #16]	; (800ea70 <HAL_PCD_SuspendCallback+0x30>)
 800ea5e:	691b      	ldr	r3, [r3, #16]
 800ea60:	4a03      	ldr	r2, [pc, #12]	; (800ea70 <HAL_PCD_SuspendCallback+0x30>)
 800ea62:	f043 0306 	orr.w	r3, r3, #6
 800ea66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ea68:	bf00      	nop
 800ea6a:	3708      	adds	r7, #8
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}
 800ea70:	e000ed00 	.word	0xe000ed00

0800ea74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7fb fd80 	bl	800a588 <USBD_LL_Resume>
}
 800ea88:	bf00      	nop
 800ea8a:	3708      	adds	r7, #8
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b082      	sub	sp, #8
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ea98:	4a28      	ldr	r2, [pc, #160]	; (800eb3c <USBD_LL_Init+0xac>)
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	4a26      	ldr	r2, [pc, #152]	; (800eb3c <USBD_LL_Init+0xac>)
 800eaa4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800eaa8:	4b24      	ldr	r3, [pc, #144]	; (800eb3c <USBD_LL_Init+0xac>)
 800eaaa:	4a25      	ldr	r2, [pc, #148]	; (800eb40 <USBD_LL_Init+0xb0>)
 800eaac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800eaae:	4b23      	ldr	r3, [pc, #140]	; (800eb3c <USBD_LL_Init+0xac>)
 800eab0:	2208      	movs	r2, #8
 800eab2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800eab4:	4b21      	ldr	r3, [pc, #132]	; (800eb3c <USBD_LL_Init+0xac>)
 800eab6:	2202      	movs	r2, #2
 800eab8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800eaba:	4b20      	ldr	r3, [pc, #128]	; (800eb3c <USBD_LL_Init+0xac>)
 800eabc:	2200      	movs	r2, #0
 800eabe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800eac0:	4b1e      	ldr	r3, [pc, #120]	; (800eb3c <USBD_LL_Init+0xac>)
 800eac2:	2200      	movs	r2, #0
 800eac4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800eac6:	4b1d      	ldr	r3, [pc, #116]	; (800eb3c <USBD_LL_Init+0xac>)
 800eac8:	2200      	movs	r2, #0
 800eaca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800eacc:	481b      	ldr	r0, [pc, #108]	; (800eb3c <USBD_LL_Init+0xac>)
 800eace:	f7f5 ff2f 	bl	8004930 <HAL_PCD_Init>
 800ead2:	4603      	mov	r3, r0
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d001      	beq.n	800eadc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ead8:	f7f2 faec 	bl	80010b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800eae2:	2318      	movs	r3, #24
 800eae4:	2200      	movs	r2, #0
 800eae6:	2100      	movs	r1, #0
 800eae8:	f7f7 fba5 	bl	8006236 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800eaf2:	2358      	movs	r3, #88	; 0x58
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	2180      	movs	r1, #128	; 0x80
 800eaf8:	f7f7 fb9d 	bl	8006236 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800eb02:	23c0      	movs	r3, #192	; 0xc0
 800eb04:	2200      	movs	r2, #0
 800eb06:	2181      	movs	r1, #129	; 0x81
 800eb08:	f7f7 fb95 	bl	8006236 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800eb12:	f44f 7388 	mov.w	r3, #272	; 0x110
 800eb16:	2200      	movs	r2, #0
 800eb18:	2101      	movs	r1, #1
 800eb1a:	f7f7 fb8c 	bl	8006236 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800eb24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eb28:	2200      	movs	r2, #0
 800eb2a:	2182      	movs	r1, #130	; 0x82
 800eb2c:	f7f7 fb83 	bl	8006236 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800eb30:	2300      	movs	r3, #0
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3708      	adds	r7, #8
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	200033ac 	.word	0x200033ac
 800eb40:	40005c00 	.word	0x40005c00

0800eb44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb50:	2300      	movs	r3, #0
 800eb52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7f5 fff3 	bl	8004b46 <HAL_PCD_Start>
 800eb60:	4603      	mov	r3, r0
 800eb62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb64:	7bfb      	ldrb	r3, [r7, #15]
 800eb66:	4618      	mov	r0, r3
 800eb68:	f000 f94e 	bl	800ee08 <USBD_Get_USB_Status>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb70:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3710      	adds	r7, #16
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}

0800eb7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800eb7a:	b580      	push	{r7, lr}
 800eb7c:	b084      	sub	sp, #16
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
 800eb82:	4608      	mov	r0, r1
 800eb84:	4611      	mov	r1, r2
 800eb86:	461a      	mov	r2, r3
 800eb88:	4603      	mov	r3, r0
 800eb8a:	70fb      	strb	r3, [r7, #3]
 800eb8c:	460b      	mov	r3, r1
 800eb8e:	70bb      	strb	r3, [r7, #2]
 800eb90:	4613      	mov	r3, r2
 800eb92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb94:	2300      	movs	r3, #0
 800eb96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800eba2:	78bb      	ldrb	r3, [r7, #2]
 800eba4:	883a      	ldrh	r2, [r7, #0]
 800eba6:	78f9      	ldrb	r1, [r7, #3]
 800eba8:	f7f6 f96d 	bl	8004e86 <HAL_PCD_EP_Open>
 800ebac:	4603      	mov	r3, r0
 800ebae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebb0:	7bfb      	ldrb	r3, [r7, #15]
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f000 f928 	bl	800ee08 <USBD_Get_USB_Status>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3710      	adds	r7, #16
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}

0800ebc6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebc6:	b580      	push	{r7, lr}
 800ebc8:	b084      	sub	sp, #16
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
 800ebce:	460b      	mov	r3, r1
 800ebd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebe0:	78fa      	ldrb	r2, [r7, #3]
 800ebe2:	4611      	mov	r1, r2
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7f6 f9b4 	bl	8004f52 <HAL_PCD_EP_Close>
 800ebea:	4603      	mov	r3, r0
 800ebec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebee:	7bfb      	ldrb	r3, [r7, #15]
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f000 f909 	bl	800ee08 <USBD_Get_USB_Status>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebfa:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3710      	adds	r7, #16
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec10:	2300      	movs	r3, #0
 800ec12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec14:	2300      	movs	r3, #0
 800ec16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec1e:	78fa      	ldrb	r2, [r7, #3]
 800ec20:	4611      	mov	r1, r2
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7f6 fa74 	bl	8005110 <HAL_PCD_EP_SetStall>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec2c:	7bfb      	ldrb	r3, [r7, #15]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f000 f8ea 	bl	800ee08 <USBD_Get_USB_Status>
 800ec34:	4603      	mov	r3, r0
 800ec36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec38:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3710      	adds	r7, #16
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}

0800ec42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec42:	b580      	push	{r7, lr}
 800ec44:	b084      	sub	sp, #16
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	6078      	str	r0, [r7, #4]
 800ec4a:	460b      	mov	r3, r1
 800ec4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec52:	2300      	movs	r3, #0
 800ec54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec5c:	78fa      	ldrb	r2, [r7, #3]
 800ec5e:	4611      	mov	r1, r2
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7f6 fab5 	bl	80051d0 <HAL_PCD_EP_ClrStall>
 800ec66:	4603      	mov	r3, r0
 800ec68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec6a:	7bfb      	ldrb	r3, [r7, #15]
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f000 f8cb 	bl	800ee08 <USBD_Get_USB_Status>
 800ec72:	4603      	mov	r3, r0
 800ec74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec76:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3710      	adds	r7, #16
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec80:	b480      	push	{r7}
 800ec82:	b085      	sub	sp, #20
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	460b      	mov	r3, r1
 800ec8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ec94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	da0c      	bge.n	800ecb6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ec9c:	78fb      	ldrb	r3, [r7, #3]
 800ec9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eca2:	68f9      	ldr	r1, [r7, #12]
 800eca4:	1c5a      	adds	r2, r3, #1
 800eca6:	4613      	mov	r3, r2
 800eca8:	009b      	lsls	r3, r3, #2
 800ecaa:	4413      	add	r3, r2
 800ecac:	00db      	lsls	r3, r3, #3
 800ecae:	440b      	add	r3, r1
 800ecb0:	3302      	adds	r3, #2
 800ecb2:	781b      	ldrb	r3, [r3, #0]
 800ecb4:	e00b      	b.n	800ecce <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ecb6:	78fb      	ldrb	r3, [r7, #3]
 800ecb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ecbc:	68f9      	ldr	r1, [r7, #12]
 800ecbe:	4613      	mov	r3, r2
 800ecc0:	009b      	lsls	r3, r3, #2
 800ecc2:	4413      	add	r3, r2
 800ecc4:	00db      	lsls	r3, r3, #3
 800ecc6:	440b      	add	r3, r1
 800ecc8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800eccc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3714      	adds	r7, #20
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bc80      	pop	{r7}
 800ecd6:	4770      	bx	lr

0800ecd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	460b      	mov	r3, r1
 800ece2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ece4:	2300      	movs	r3, #0
 800ece6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ece8:	2300      	movs	r3, #0
 800ecea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ecf2:	78fa      	ldrb	r2, [r7, #3]
 800ecf4:	4611      	mov	r1, r2
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7f6 f8a0 	bl	8004e3c <HAL_PCD_SetAddress>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed00:	7bfb      	ldrb	r3, [r7, #15]
 800ed02:	4618      	mov	r0, r3
 800ed04:	f000 f880 	bl	800ee08 <USBD_Get_USB_Status>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3710      	adds	r7, #16
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}

0800ed16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ed16:	b580      	push	{r7, lr}
 800ed18:	b086      	sub	sp, #24
 800ed1a:	af00      	add	r7, sp, #0
 800ed1c:	60f8      	str	r0, [r7, #12]
 800ed1e:	607a      	str	r2, [r7, #4]
 800ed20:	461a      	mov	r2, r3
 800ed22:	460b      	mov	r3, r1
 800ed24:	72fb      	strb	r3, [r7, #11]
 800ed26:	4613      	mov	r3, r2
 800ed28:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ed38:	893b      	ldrh	r3, [r7, #8]
 800ed3a:	7af9      	ldrb	r1, [r7, #11]
 800ed3c:	687a      	ldr	r2, [r7, #4]
 800ed3e:	f7f6 f9a4 	bl	800508a <HAL_PCD_EP_Transmit>
 800ed42:	4603      	mov	r3, r0
 800ed44:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed46:	7dfb      	ldrb	r3, [r7, #23]
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f000 f85d 	bl	800ee08 <USBD_Get_USB_Status>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ed52:	7dbb      	ldrb	r3, [r7, #22]
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3718      	adds	r7, #24
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b086      	sub	sp, #24
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	60f8      	str	r0, [r7, #12]
 800ed64:	607a      	str	r2, [r7, #4]
 800ed66:	461a      	mov	r2, r3
 800ed68:	460b      	mov	r3, r1
 800ed6a:	72fb      	strb	r3, [r7, #11]
 800ed6c:	4613      	mov	r3, r2
 800ed6e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed70:	2300      	movs	r3, #0
 800ed72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed74:	2300      	movs	r3, #0
 800ed76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ed7e:	893b      	ldrh	r3, [r7, #8]
 800ed80:	7af9      	ldrb	r1, [r7, #11]
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	f7f6 f92d 	bl	8004fe2 <HAL_PCD_EP_Receive>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed8c:	7dfb      	ldrb	r3, [r7, #23]
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f000 f83a 	bl	800ee08 <USBD_Get_USB_Status>
 800ed94:	4603      	mov	r3, r0
 800ed96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ed98:	7dbb      	ldrb	r3, [r7, #22]
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3718      	adds	r7, #24
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}

0800eda2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eda2:	b580      	push	{r7, lr}
 800eda4:	b082      	sub	sp, #8
 800eda6:	af00      	add	r7, sp, #0
 800eda8:	6078      	str	r0, [r7, #4]
 800edaa:	460b      	mov	r3, r1
 800edac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800edb4:	78fa      	ldrb	r2, [r7, #3]
 800edb6:	4611      	mov	r1, r2
 800edb8:	4618      	mov	r0, r3
 800edba:	f7f6 f94f 	bl	800505c <HAL_PCD_EP_GetRxCount>
 800edbe:	4603      	mov	r3, r0
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3708      	adds	r7, #8
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}

0800edc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800edc8:	b480      	push	{r7}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800edd0:	4b02      	ldr	r3, [pc, #8]	; (800eddc <USBD_static_malloc+0x14>)
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	370c      	adds	r7, #12
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bc80      	pop	{r7}
 800edda:	4770      	bx	lr
 800eddc:	20002258 	.word	0x20002258

0800ede0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b083      	sub	sp, #12
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]

}
 800ede8:	bf00      	nop
 800edea:	370c      	adds	r7, #12
 800edec:	46bd      	mov	sp, r7
 800edee:	bc80      	pop	{r7}
 800edf0:	4770      	bx	lr

0800edf2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edf2:	b480      	push	{r7}
 800edf4:	b083      	sub	sp, #12
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6078      	str	r0, [r7, #4]
 800edfa:	460b      	mov	r3, r1
 800edfc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800edfe:	bf00      	nop
 800ee00:	370c      	adds	r7, #12
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bc80      	pop	{r7}
 800ee06:	4770      	bx	lr

0800ee08 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b085      	sub	sp, #20
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	4603      	mov	r3, r0
 800ee10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee12:	2300      	movs	r3, #0
 800ee14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ee16:	79fb      	ldrb	r3, [r7, #7]
 800ee18:	2b03      	cmp	r3, #3
 800ee1a:	d817      	bhi.n	800ee4c <USBD_Get_USB_Status+0x44>
 800ee1c:	a201      	add	r2, pc, #4	; (adr r2, 800ee24 <USBD_Get_USB_Status+0x1c>)
 800ee1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee22:	bf00      	nop
 800ee24:	0800ee35 	.word	0x0800ee35
 800ee28:	0800ee3b 	.word	0x0800ee3b
 800ee2c:	0800ee41 	.word	0x0800ee41
 800ee30:	0800ee47 	.word	0x0800ee47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ee34:	2300      	movs	r3, #0
 800ee36:	73fb      	strb	r3, [r7, #15]
    break;
 800ee38:	e00b      	b.n	800ee52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ee3a:	2302      	movs	r3, #2
 800ee3c:	73fb      	strb	r3, [r7, #15]
    break;
 800ee3e:	e008      	b.n	800ee52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ee40:	2301      	movs	r3, #1
 800ee42:	73fb      	strb	r3, [r7, #15]
    break;
 800ee44:	e005      	b.n	800ee52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ee46:	2302      	movs	r3, #2
 800ee48:	73fb      	strb	r3, [r7, #15]
    break;
 800ee4a:	e002      	b.n	800ee52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ee4c:	2302      	movs	r3, #2
 800ee4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ee50:	bf00      	nop
  }
  return usb_status;
 800ee52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3714      	adds	r7, #20
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bc80      	pop	{r7}
 800ee5c:	4770      	bx	lr
 800ee5e:	bf00      	nop

0800ee60 <__libc_init_array>:
 800ee60:	b570      	push	{r4, r5, r6, lr}
 800ee62:	2600      	movs	r6, #0
 800ee64:	4d0c      	ldr	r5, [pc, #48]	; (800ee98 <__libc_init_array+0x38>)
 800ee66:	4c0d      	ldr	r4, [pc, #52]	; (800ee9c <__libc_init_array+0x3c>)
 800ee68:	1b64      	subs	r4, r4, r5
 800ee6a:	10a4      	asrs	r4, r4, #2
 800ee6c:	42a6      	cmp	r6, r4
 800ee6e:	d109      	bne.n	800ee84 <__libc_init_array+0x24>
 800ee70:	f000 f862 	bl	800ef38 <_init>
 800ee74:	2600      	movs	r6, #0
 800ee76:	4d0a      	ldr	r5, [pc, #40]	; (800eea0 <__libc_init_array+0x40>)
 800ee78:	4c0a      	ldr	r4, [pc, #40]	; (800eea4 <__libc_init_array+0x44>)
 800ee7a:	1b64      	subs	r4, r4, r5
 800ee7c:	10a4      	asrs	r4, r4, #2
 800ee7e:	42a6      	cmp	r6, r4
 800ee80:	d105      	bne.n	800ee8e <__libc_init_array+0x2e>
 800ee82:	bd70      	pop	{r4, r5, r6, pc}
 800ee84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee88:	4798      	blx	r3
 800ee8a:	3601      	adds	r6, #1
 800ee8c:	e7ee      	b.n	800ee6c <__libc_init_array+0xc>
 800ee8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee92:	4798      	blx	r3
 800ee94:	3601      	adds	r6, #1
 800ee96:	e7f2      	b.n	800ee7e <__libc_init_array+0x1e>
 800ee98:	0800f73c 	.word	0x0800f73c
 800ee9c:	0800f73c 	.word	0x0800f73c
 800eea0:	0800f73c 	.word	0x0800f73c
 800eea4:	0800f740 	.word	0x0800f740

0800eea8 <memcpy>:
 800eea8:	440a      	add	r2, r1
 800eeaa:	4291      	cmp	r1, r2
 800eeac:	f100 33ff 	add.w	r3, r0, #4294967295
 800eeb0:	d100      	bne.n	800eeb4 <memcpy+0xc>
 800eeb2:	4770      	bx	lr
 800eeb4:	b510      	push	{r4, lr}
 800eeb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eeba:	4291      	cmp	r1, r2
 800eebc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eec0:	d1f9      	bne.n	800eeb6 <memcpy+0xe>
 800eec2:	bd10      	pop	{r4, pc}

0800eec4 <memmove>:
 800eec4:	4288      	cmp	r0, r1
 800eec6:	b510      	push	{r4, lr}
 800eec8:	eb01 0402 	add.w	r4, r1, r2
 800eecc:	d902      	bls.n	800eed4 <memmove+0x10>
 800eece:	4284      	cmp	r4, r0
 800eed0:	4623      	mov	r3, r4
 800eed2:	d807      	bhi.n	800eee4 <memmove+0x20>
 800eed4:	1e43      	subs	r3, r0, #1
 800eed6:	42a1      	cmp	r1, r4
 800eed8:	d008      	beq.n	800eeec <memmove+0x28>
 800eeda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eede:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eee2:	e7f8      	b.n	800eed6 <memmove+0x12>
 800eee4:	4601      	mov	r1, r0
 800eee6:	4402      	add	r2, r0
 800eee8:	428a      	cmp	r2, r1
 800eeea:	d100      	bne.n	800eeee <memmove+0x2a>
 800eeec:	bd10      	pop	{r4, pc}
 800eeee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eef2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eef6:	e7f7      	b.n	800eee8 <memmove+0x24>

0800eef8 <memset>:
 800eef8:	4603      	mov	r3, r0
 800eefa:	4402      	add	r2, r0
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d100      	bne.n	800ef02 <memset+0xa>
 800ef00:	4770      	bx	lr
 800ef02:	f803 1b01 	strb.w	r1, [r3], #1
 800ef06:	e7f9      	b.n	800eefc <memset+0x4>

0800ef08 <strstr>:
 800ef08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef0a:	780c      	ldrb	r4, [r1, #0]
 800ef0c:	b164      	cbz	r4, 800ef28 <strstr+0x20>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	781a      	ldrb	r2, [r3, #0]
 800ef12:	4618      	mov	r0, r3
 800ef14:	1c5e      	adds	r6, r3, #1
 800ef16:	b90a      	cbnz	r2, 800ef1c <strstr+0x14>
 800ef18:	4610      	mov	r0, r2
 800ef1a:	e005      	b.n	800ef28 <strstr+0x20>
 800ef1c:	4294      	cmp	r4, r2
 800ef1e:	d108      	bne.n	800ef32 <strstr+0x2a>
 800ef20:	460d      	mov	r5, r1
 800ef22:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800ef26:	b902      	cbnz	r2, 800ef2a <strstr+0x22>
 800ef28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef2a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800ef2e:	4297      	cmp	r7, r2
 800ef30:	d0f7      	beq.n	800ef22 <strstr+0x1a>
 800ef32:	4633      	mov	r3, r6
 800ef34:	e7ec      	b.n	800ef10 <strstr+0x8>
	...

0800ef38 <_init>:
 800ef38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef3a:	bf00      	nop
 800ef3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef3e:	bc08      	pop	{r3}
 800ef40:	469e      	mov	lr, r3
 800ef42:	4770      	bx	lr

0800ef44 <_fini>:
 800ef44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef46:	bf00      	nop
 800ef48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef4a:	bc08      	pop	{r3}
 800ef4c:	469e      	mov	lr, r3
 800ef4e:	4770      	bx	lr
