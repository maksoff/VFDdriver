
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec60  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a4  0800ed70  0800ed70  0001ed70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f614  0800f614  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800f614  0800f614  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f614  0800f614  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f614  0800f614  0001f614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f618  0800f618  0001f618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800f61c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034e4  20000190  0800f7ac  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003674  0800f7ac  00023674  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fbce  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006353  00000000  00000000  0004fd87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020e0  00000000  00000000  000560e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ec0  00000000  00000000  000581c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e68b  00000000  00000000  0005a080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028d04  00000000  00000000  0007870b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ec27  00000000  00000000  000a140f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00140036  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000891c  00000000  00000000  0014008c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000190 	.word	0x20000190
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ed58 	.word	0x0800ed58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000194 	.word	0x20000194
 800014c:	0800ed58 	.word	0x0800ed58

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qUSB_rcv */
  qUSB_rcvHandle = osMessageQueueNew (32, sizeof(uint8_t), &qUSB_rcv_attributes);
 8000178:	4a1e      	ldr	r2, [pc, #120]	; (80001f4 <MX_FREERTOS_Init+0x80>)
 800017a:	2101      	movs	r1, #1
 800017c:	2020      	movs	r0, #32
 800017e:	f00b facf 	bl	800b720 <osMessageQueueNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a1c      	ldr	r2, [pc, #112]	; (80001f8 <MX_FREERTOS_Init+0x84>)
 8000186:	6013      	str	r3, [r2, #0]

  /* creation of qVFD */
  qVFDHandle = osMessageQueueNew (16, sizeof(uint16_t), &qVFD_attributes);
 8000188:	4a1c      	ldr	r2, [pc, #112]	; (80001fc <MX_FREERTOS_Init+0x88>)
 800018a:	2102      	movs	r1, #2
 800018c:	2010      	movs	r0, #16
 800018e:	f00b fac7 	bl	800b720 <osMessageQueueNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a1a      	ldr	r2, [pc, #104]	; (8000200 <MX_FREERTOS_Init+0x8c>)
 8000196:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000198:	4a1a      	ldr	r2, [pc, #104]	; (8000204 <MX_FREERTOS_Init+0x90>)
 800019a:	2100      	movs	r1, #0
 800019c:	481a      	ldr	r0, [pc, #104]	; (8000208 <MX_FREERTOS_Init+0x94>)
 800019e:	f00b f9e7 	bl	800b570 <osThreadNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a19      	ldr	r2, [pc, #100]	; (800020c <MX_FREERTOS_Init+0x98>)
 80001a6:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 80001a8:	4a19      	ldr	r2, [pc, #100]	; (8000210 <MX_FREERTOS_Init+0x9c>)
 80001aa:	2100      	movs	r1, #0
 80001ac:	4819      	ldr	r0, [pc, #100]	; (8000214 <MX_FREERTOS_Init+0xa0>)
 80001ae:	f00b f9df 	bl	800b570 <osThreadNew>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a18      	ldr	r2, [pc, #96]	; (8000218 <MX_FREERTOS_Init+0xa4>)
 80001b6:	6013      	str	r3, [r2, #0]

  /* creation of taskUSB_rcv */
  taskUSB_rcvHandle = osThreadNew(StartUSB_rcv, NULL, &taskUSB_rcv_attributes);
 80001b8:	4a18      	ldr	r2, [pc, #96]	; (800021c <MX_FREERTOS_Init+0xa8>)
 80001ba:	2100      	movs	r1, #0
 80001bc:	4818      	ldr	r0, [pc, #96]	; (8000220 <MX_FREERTOS_Init+0xac>)
 80001be:	f00b f9d7 	bl	800b570 <osThreadNew>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a17      	ldr	r2, [pc, #92]	; (8000224 <MX_FREERTOS_Init+0xb0>)
 80001c6:	6013      	str	r3, [r2, #0]

  /* creation of UARTtask */
  UARTtaskHandle = osThreadNew(StartUARTtask, NULL, &UARTtask_attributes);
 80001c8:	4a17      	ldr	r2, [pc, #92]	; (8000228 <MX_FREERTOS_Init+0xb4>)
 80001ca:	2100      	movs	r1, #0
 80001cc:	4817      	ldr	r0, [pc, #92]	; (800022c <MX_FREERTOS_Init+0xb8>)
 80001ce:	f00b f9cf 	bl	800b570 <osThreadNew>
 80001d2:	4603      	mov	r3, r0
 80001d4:	4a16      	ldr	r2, [pc, #88]	; (8000230 <MX_FREERTOS_Init+0xbc>)
 80001d6:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(StartEncoder, NULL, &Encoder_attributes);
 80001d8:	4a16      	ldr	r2, [pc, #88]	; (8000234 <MX_FREERTOS_Init+0xc0>)
 80001da:	2100      	movs	r1, #0
 80001dc:	4816      	ldr	r0, [pc, #88]	; (8000238 <MX_FREERTOS_Init+0xc4>)
 80001de:	f00b f9c7 	bl	800b570 <osThreadNew>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4a15      	ldr	r2, [pc, #84]	; (800023c <MX_FREERTOS_Init+0xc8>)
 80001e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  qUSB_rcvQueue = qUSB_rcvHandle; // adding to freertos_inc.h
 80001e8:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <MX_FREERTOS_Init+0x84>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a14      	ldr	r2, [pc, #80]	; (8000240 <MX_FREERTOS_Init+0xcc>)
 80001ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	0800f08c 	.word	0x0800f08c
 80001f8:	20002488 	.word	0x20002488
 80001fc:	0800f0a4 	.word	0x0800f0a4
 8000200:	2000248c 	.word	0x2000248c
 8000204:	0800efd8 	.word	0x0800efd8
 8000208:	08000245 	.word	0x08000245
 800020c:	20002478 	.word	0x20002478
 8000210:	0800effc 	.word	0x0800effc
 8000214:	0800027d 	.word	0x0800027d
 8000218:	2000247c 	.word	0x2000247c
 800021c:	0800f020 	.word	0x0800f020
 8000220:	080002c1 	.word	0x080002c1
 8000224:	20002484 	.word	0x20002484
 8000228:	0800f044 	.word	0x0800f044
 800022c:	08000309 	.word	0x08000309
 8000230:	20002480 	.word	0x20002480
 8000234:	0800f068 	.word	0x0800f068
 8000238:	08000345 	.word	0x08000345
 800023c:	20002494 	.word	0x20002494
 8000240:	20002490 	.word	0x20002490

08000244 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800024c:	f00e f856 	bl	800e2fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */


  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000256:	4808      	ldr	r0, [pc, #32]	; (8000278 <StartDefaultTask+0x34>)
 8000258:	f003 f9d3 	bl	8003602 <HAL_GPIO_WritePin>
  osDelay(10);
 800025c:	200a      	movs	r0, #10
 800025e:	f00b fa31 	bl	800b6c4 <osDelay>
  init_microrl();
 8000262:	f002 fa89 	bl	8002778 <init_microrl>
  set_CDC_ready(); // allow to send
 8000266:	f002 fac1 	bl	80027ec <set_CDC_ready>

  //vTaskDelete(NULL);
  /* Infinite loop */
  for(;;)
  {
    process_encoder();
 800026a:	f000 fc9d 	bl	8000ba8 <process_encoder>
    osDelay(1);
 800026e:	2001      	movs	r0, #1
 8000270:	f00b fa28 	bl	800b6c4 <osDelay>
    process_encoder();
 8000274:	e7f9      	b.n	800026a <StartDefaultTask+0x26>
 8000276:	bf00      	nop
 8000278:	40010800 	.word	0x40010800

0800027c <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 8000284:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000288:	617b      	str	r3, [r7, #20]

	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 800028a:	f00c fc2f 	bl	800caec <xTaskGetTickCount>
 800028e:	4603      	mov	r3, r0
 8000290:	613b      	str	r3, [r7, #16]

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000296:	4808      	ldr	r0, [pc, #32]	; (80002b8 <StartLEDheartbeat+0x3c>)
 8000298:	f003 f9cb 	bl	8003632 <HAL_GPIO_TogglePin>
		tick_counter++;
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <StartLEDheartbeat+0x40>)
 800029e:	881b      	ldrh	r3, [r3, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <StartLEDheartbeat+0x40>)
 80002a6:	801a      	strh	r2, [r3, #0]
				if (++cnt >= ALPHAS + DIGITS + ALPHAR + SPECIAL)
					cnt = 0;

		}

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80002a8:	f107 0310 	add.w	r3, r7, #16
 80002ac:	6979      	ldr	r1, [r7, #20]
 80002ae:	4618      	mov	r0, r3
 80002b0:	f00c fa58 	bl	800c764 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 80002b4:	e7e9      	b.n	800028a <StartLEDheartbeat+0xe>
 80002b6:	bf00      	nop
 80002b8:	40011000 	.word	0x40011000
 80002bc:	200001ae 	.word	0x200001ae

080002c0 <StartUSB_rcv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSB_rcv */
void StartUSB_rcv(void *argument)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	char buf;

	UBaseType_t uxHighWaterMark, uxHighWaterMark_old;

	/* Inspect our own high water mark on entering the task. */
	uxHighWaterMark_old = uxTaskGetStackHighWaterMark( NULL );
 80002c8:	2000      	movs	r0, #0
 80002ca:	f00c ff11 	bl	800d0f0 <uxTaskGetStackHighWaterMark>
 80002ce:	6178      	str	r0, [r7, #20]
	uxHighWaterMark = uxHighWaterMark_old;
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80002d4:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <StartUSB_rcv+0x44>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f107 010f 	add.w	r1, r7, #15
 80002dc:	f04f 32ff 	mov.w	r2, #4294967295
 80002e0:	4618      	mov	r0, r3
 80002e2:	f00b fe5b 	bl	800bf9c <xQueueReceive>
	  microrl_print_char(buf);
 80002e6:	7bfb      	ldrb	r3, [r7, #15]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f001 ff01 	bl	80020f0 <microrl_print_char>
	  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80002ee:	2000      	movs	r0, #0
 80002f0:	f00c fefe 	bl	800d0f0 <uxTaskGetStackHighWaterMark>
 80002f4:	6138      	str	r0, [r7, #16]
	  if (uxHighWaterMark < uxHighWaterMark_old)
 80002f6:	693a      	ldr	r2, [r7, #16]
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d2ea      	bcs.n	80002d4 <StartUSB_rcv+0x14>
	  {
		  uxHighWaterMark_old = uxHighWaterMark;
 80002fe:	693b      	ldr	r3, [r7, #16]
 8000300:	617b      	str	r3, [r7, #20]
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 8000302:	e7e7      	b.n	80002d4 <StartUSB_rcv+0x14>
 8000304:	20002490 	.word	0x20002490

08000308 <StartUARTtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTtask */
void StartUARTtask(void *argument)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  uint8_t data;
  for(;;)
  {
	HAL_UART_Receive_IT(&huart2, &data, 1);
 8000310:	f107 030f 	add.w	r3, r7, #15
 8000314:	2201      	movs	r2, #1
 8000316:	4619      	mov	r1, r3
 8000318:	4809      	ldr	r0, [pc, #36]	; (8000340 <StartUARTtask+0x38>)
 800031a:	f006 feb8 	bl	800708e <HAL_UART_Receive_IT>
	/* Wait to be notified of an interrupt. */
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 800031e:	f04f 31ff 	mov.w	r1, #4294967295
 8000322:	2001      	movs	r0, #1
 8000324:	f00c ffe0 	bl	800d2e8 <ulTaskNotifyTake>
	if (get_nema())
 8000328:	f002 fba6 	bl	8002a78 <get_nema>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0ee      	beq.n	8000310 <StartUARTtask+0x8>
		CDC_Transmit_FS(&data, 1);
 8000332:	f107 030f 	add.w	r3, r7, #15
 8000336:	2101      	movs	r1, #1
 8000338:	4618      	mov	r0, r3
 800033a:	f00e f8c3 	bl	800e4c4 <CDC_Transmit_FS>
	HAL_UART_Receive_IT(&huart2, &data, 1);
 800033e:	e7e7      	b.n	8000310 <StartUARTtask+0x8>
 8000340:	2000266c 	.word	0x2000266c

08000344 <StartEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoder */
void StartEncoder(void *argument)
{
 8000344:	b5b0      	push	{r4, r5, r7, lr}
 8000346:	b0b0      	sub	sp, #192	; 0xc0
 8000348:	af04      	add	r7, sp, #16
 800034a:	6078      	str	r0, [r7, #4]

	static bool invert = true;
	static bool released = true;


  osDelay(500);
 800034c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000350:	f00b f9b8 	bl	800b6c4 <osDelay>
  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 8000354:	2201      	movs	r2, #1
 8000356:	2120      	movs	r1, #32
 8000358:	48c5      	ldr	r0, [pc, #788]	; (8000670 <StartEncoder+0x32c>)
 800035a:	f003 f952 	bl	8003602 <HAL_GPIO_WritePin>
  union VFD {
	  uint8_t arr2[11][3];
	  uint8_t arr1[11*3];
  } vfd;

  for (int i = 0; i < sizeof(vfd.arr1); i++)
 800035e:	2300      	movs	r3, #0
 8000360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000364:	e00b      	b.n	800037e <StartEncoder+0x3a>
  {
	  vfd.arr1[i] = 0xFF;
 8000366:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800036a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800036e:	4413      	add	r3, r2
 8000370:	22ff      	movs	r2, #255	; 0xff
 8000372:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < sizeof(vfd.arr1); i++)
 8000374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000378:	3301      	adds	r3, #1
 800037a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800037e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000382:	2b20      	cmp	r3, #32
 8000384:	d9ef      	bls.n	8000366 <StartEncoder+0x22>
  }
  uint8_t data;


  data = 0b01000000; // command 2, write to Display port
 8000386:	2340      	movs	r3, #64	; 0x40
 8000388:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800038c:	2200      	movs	r2, #0
 800038e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000392:	48b7      	ldr	r0, [pc, #732]	; (8000670 <StartEncoder+0x32c>)
 8000394:	f003 f935 	bl	8003602 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000398:	f107 0147 	add.w	r1, r7, #71	; 0x47
 800039c:	f04f 33ff 	mov.w	r3, #4294967295
 80003a0:	2201      	movs	r2, #1
 80003a2:	48b4      	ldr	r0, [pc, #720]	; (8000674 <StartEncoder+0x330>)
 80003a4:	f006 f9fa 	bl	800679c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80003a8:	2201      	movs	r2, #1
 80003aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ae:	48b0      	ldr	r0, [pc, #704]	; (8000670 <StartEncoder+0x32c>)
 80003b0:	f003 f927 	bl	8003602 <HAL_GPIO_WritePin>
  osDelay(10);
 80003b4:	200a      	movs	r0, #10
 80003b6:	f00b f985 	bl	800b6c4 <osDelay>
  data = 0b11000000; // command 3, set address to 0
 80003ba:	23c0      	movs	r3, #192	; 0xc0
 80003bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003c6:	48aa      	ldr	r0, [pc, #680]	; (8000670 <StartEncoder+0x32c>)
 80003c8:	f003 f91b 	bl	8003602 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80003cc:	f107 0147 	add.w	r1, r7, #71	; 0x47
 80003d0:	f04f 33ff 	mov.w	r3, #4294967295
 80003d4:	2201      	movs	r2, #1
 80003d6:	48a7      	ldr	r0, [pc, #668]	; (8000674 <StartEncoder+0x330>)
 80003d8:	f006 f9e0 	bl	800679c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80003dc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80003e0:	f04f 33ff 	mov.w	r3, #4294967295
 80003e4:	2221      	movs	r2, #33	; 0x21
 80003e6:	48a3      	ldr	r0, [pc, #652]	; (8000674 <StartEncoder+0x330>)
 80003e8:	f006 f9d8 	bl	800679c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80003ec:	2201      	movs	r2, #1
 80003ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f2:	489f      	ldr	r0, [pc, #636]	; (8000670 <StartEncoder+0x32c>)
 80003f4:	f003 f905 	bl	8003602 <HAL_GPIO_WritePin>
  osDelay(10);
 80003f8:	200a      	movs	r0, #10
 80003fa:	f00b f963 	bl	800b6c4 <osDelay>
  // init display, 11 digits 17 segments
  data = 0b00000111; // command 1, 11 digits 17 segments
 80003fe:	2307      	movs	r3, #7
 8000400:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000404:	2200      	movs	r2, #0
 8000406:	f44f 7180 	mov.w	r1, #256	; 0x100
 800040a:	4899      	ldr	r0, [pc, #612]	; (8000670 <StartEncoder+0x32c>)
 800040c:	f003 f8f9 	bl	8003602 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000410:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8000414:	f04f 33ff 	mov.w	r3, #4294967295
 8000418:	2201      	movs	r2, #1
 800041a:	4896      	ldr	r0, [pc, #600]	; (8000674 <StartEncoder+0x330>)
 800041c:	f006 f9be 	bl	800679c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000420:	2201      	movs	r2, #1
 8000422:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000426:	4892      	ldr	r0, [pc, #584]	; (8000670 <StartEncoder+0x32c>)
 8000428:	f003 f8eb 	bl	8003602 <HAL_GPIO_WritePin>
  osDelay(10);
 800042c:	200a      	movs	r0, #10
 800042e:	f00b f949 	bl	800b6c4 <osDelay>

  for (uint8_t i = 0; i <= 0b111; i++)
 8000432:	2300      	movs	r3, #0
 8000434:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8000438:	e02d      	b.n	8000496 <StartEncoder+0x152>
  {
	  data = 0b10000000; // command 4
 800043a:	2380      	movs	r3, #128	; 0x80
 800043c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  data |= 1<<3; // enable/disable display
 8000440:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000444:	f043 0308 	orr.w	r3, r3, #8
 8000448:	b2db      	uxtb	r3, r3
 800044a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  data |= i; // set brightness
 800044e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000452:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000456:	4313      	orrs	r3, r2
 8000458:	b2db      	uxtb	r3, r3
 800045a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000464:	4882      	ldr	r0, [pc, #520]	; (8000670 <StartEncoder+0x32c>)
 8000466:	f003 f8cc 	bl	8003602 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800046a:	f107 0147 	add.w	r1, r7, #71	; 0x47
 800046e:	f04f 33ff 	mov.w	r3, #4294967295
 8000472:	2201      	movs	r2, #1
 8000474:	487f      	ldr	r0, [pc, #508]	; (8000674 <StartEncoder+0x330>)
 8000476:	f006 f991 	bl	800679c <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800047a:	2201      	movs	r2, #1
 800047c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000480:	487b      	ldr	r0, [pc, #492]	; (8000670 <StartEncoder+0x32c>)
 8000482:	f003 f8be 	bl	8003602 <HAL_GPIO_WritePin>
	  osDelay(250);
 8000486:	20fa      	movs	r0, #250	; 0xfa
 8000488:	f00b f91c 	bl	800b6c4 <osDelay>
  for (uint8_t i = 0; i <= 0b111; i++)
 800048c:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000490:	3301      	adds	r3, #1
 8000492:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8000496:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800049a:	2b07      	cmp	r3, #7
 800049c:	d9cd      	bls.n	800043a <StartEncoder+0xf6>
  }



  for (int i = 0; i < 11; i++)
 800049e:	2300      	movs	r3, #0
 80004a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80004a4:	e041      	b.n	800052a <StartEncoder+0x1e6>
  {
	  for (int b = 0; b < 3; b++) // erasing from right to left
 80004a6:	2300      	movs	r3, #0
 80004a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80004ac:	e012      	b.n	80004d4 <StartEncoder+0x190>
	  {
		  vfd.arr2[i][b] = 0;
 80004ae:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80004b2:	4613      	mov	r3, r2
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	4413      	add	r3, r2
 80004b8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80004bc:	441a      	add	r2, r3
 80004be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80004c2:	4413      	add	r3, r2
 80004c4:	3b68      	subs	r3, #104	; 0x68
 80004c6:	2200      	movs	r2, #0
 80004c8:	701a      	strb	r2, [r3, #0]
	  for (int b = 0; b < 3; b++) // erasing from right to left
 80004ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80004ce:	3301      	adds	r3, #1
 80004d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80004d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80004d8:	2b02      	cmp	r3, #2
 80004da:	dde8      	ble.n	80004ae <StartEncoder+0x16a>
	  }
	  data = 0b11000000; // command 3, set address to 0
 80004dc:	23c0      	movs	r3, #192	; 0xc0
 80004de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e8:	4861      	ldr	r0, [pc, #388]	; (8000670 <StartEncoder+0x32c>)
 80004ea:	f003 f88a 	bl	8003602 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80004ee:	f107 0147 	add.w	r1, r7, #71	; 0x47
 80004f2:	f04f 33ff 	mov.w	r3, #4294967295
 80004f6:	2201      	movs	r2, #1
 80004f8:	485e      	ldr	r0, [pc, #376]	; (8000674 <StartEncoder+0x330>)
 80004fa:	f006 f94f 	bl	800679c <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80004fe:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
 8000506:	2221      	movs	r2, #33	; 0x21
 8000508:	485a      	ldr	r0, [pc, #360]	; (8000674 <StartEncoder+0x330>)
 800050a:	f006 f947 	bl	800679c <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800050e:	2201      	movs	r2, #1
 8000510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000514:	4856      	ldr	r0, [pc, #344]	; (8000670 <StartEncoder+0x32c>)
 8000516:	f003 f874 	bl	8003602 <HAL_GPIO_WritePin>
	  osDelay(150);
 800051a:	2096      	movs	r0, #150	; 0x96
 800051c:	f00b f8d2 	bl	800b6c4 <osDelay>
  for (int i = 0; i < 11; i++)
 8000520:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000524:	3301      	adds	r3, #1
 8000526:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800052a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800052e:	2b0a      	cmp	r3, #10
 8000530:	ddb9      	ble.n	80004a6 <StartEncoder+0x162>
  }
  osDelay (500);
 8000532:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000536:	f00b f8c5 	bl	800b6c4 <osDelay>

  //erase everything... just in case
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 800053a:	2300      	movs	r3, #0
 800053c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000540:	e00b      	b.n	800055a <StartEncoder+0x216>
	  vfd.arr1[a] = 0;
 8000542:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000546:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800054a:	4413      	add	r3, r2
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000550:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000554:	3301      	adds	r3, #1
 8000556:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800055a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800055e:	2b20      	cmp	r3, #32
 8000560:	d9ef      	bls.n	8000542 <StartEncoder+0x1fe>


  // fill everything
    for (int j = 1; j < 15; j++)
 8000562:	2301      	movs	r3, #1
 8000564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000568:	e06a      	b.n	8000640 <StartEncoder+0x2fc>
    {
  	  uint32_t temp = 1<<j;
 800056a:	2201      	movs	r2, #1
 800056c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000570:	fa02 f303 	lsl.w	r3, r2, r3
 8000574:	66fb      	str	r3, [r7, #108]	; 0x6c
  	  for (int i = 1; i < 11; i++)
 8000576:	2301      	movs	r3, #1
 8000578:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800057c:	e035      	b.n	80005ea <StartEncoder+0x2a6>
  	  {
  		  for (int b = 0; b < 3; b++)
 800057e:	2300      	movs	r3, #0
 8000580:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000584:	e028      	b.n	80005d8 <StartEncoder+0x294>
  		  {
  			  vfd.arr2[i][b] |= (temp>>(b<<3))&0xFF;
 8000586:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800058a:	4613      	mov	r3, r2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	4413      	add	r3, r2
 8000590:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000594:	441a      	add	r2, r3
 8000596:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800059a:	4413      	add	r3, r2
 800059c:	3b68      	subs	r3, #104	; 0x68
 800059e:	781a      	ldrb	r2, [r3, #0]
 80005a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80005a4:	00db      	lsls	r3, r3, #3
 80005a6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80005a8:	fa21 f303 	lsr.w	r3, r1, r3
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4313      	orrs	r3, r2
 80005b0:	b2d9      	uxtb	r1, r3
 80005b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80005b6:	4613      	mov	r3, r2
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	4413      	add	r3, r2
 80005bc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80005c0:	441a      	add	r2, r3
 80005c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80005c6:	4413      	add	r3, r2
 80005c8:	3b68      	subs	r3, #104	; 0x68
 80005ca:	460a      	mov	r2, r1
 80005cc:	701a      	strb	r2, [r3, #0]
  		  for (int b = 0; b < 3; b++)
 80005ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80005d2:	3301      	adds	r3, #1
 80005d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80005d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80005dc:	2b02      	cmp	r3, #2
 80005de:	ddd2      	ble.n	8000586 <StartEncoder+0x242>
  	  for (int i = 1; i < 11; i++)
 80005e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80005e4:	3301      	adds	r3, #1
 80005e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80005ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80005ee:	2b0a      	cmp	r3, #10
 80005f0:	ddc5      	ble.n	800057e <StartEncoder+0x23a>
  		  }
  	  }
  	  data = 0b11000000; // command 3, set address to 0
 80005f2:	23c0      	movs	r3, #192	; 0xc0
 80005f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fe:	481c      	ldr	r0, [pc, #112]	; (8000670 <StartEncoder+0x32c>)
 8000600:	f002 ffff 	bl	8003602 <HAL_GPIO_WritePin>
  	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000604:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	2201      	movs	r2, #1
 800060e:	4819      	ldr	r0, [pc, #100]	; (8000674 <StartEncoder+0x330>)
 8000610:	f006 f8c4 	bl	800679c <HAL_SPI_Transmit>
  	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000614:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	2221      	movs	r2, #33	; 0x21
 800061e:	4815      	ldr	r0, [pc, #84]	; (8000674 <StartEncoder+0x330>)
 8000620:	f006 f8bc 	bl	800679c <HAL_SPI_Transmit>
  	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062a:	4811      	ldr	r0, [pc, #68]	; (8000670 <StartEncoder+0x32c>)
 800062c:	f002 ffe9 	bl	8003602 <HAL_GPIO_WritePin>
  	  osDelay(100);
 8000630:	2064      	movs	r0, #100	; 0x64
 8000632:	f00b f847 	bl	800b6c4 <osDelay>
    for (int j = 1; j < 15; j++)
 8000636:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800063a:	3301      	adds	r3, #1
 800063c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000640:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000644:	2b0e      	cmp	r3, #14
 8000646:	dd90      	ble.n	800056a <StartEncoder+0x226>
    }

    const uint8_t arr[][2] = {{6, 0},
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <StartEncoder+0x334>)
 800064a:	f107 0414 	add.w	r4, r7, #20
 800064e:	461d      	mov	r5, r3
 8000650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065c:	682b      	ldr	r3, [r5, #0]
 800065e:	8023      	strh	r3, [r4, #0]
					   {9, 16},
					   {10, 16},
					   {10, 15},
    };

    for (int j = 0; j < sizeof(arr)/2; j++)
 8000660:	2300      	movs	r3, #0
 8000662:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000666:	e078      	b.n	800075a <StartEncoder+0x416>
    {
		for (int b = 0; b < 3; b++)
 8000668:	2300      	movs	r3, #0
 800066a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800066e:	e049      	b.n	8000704 <StartEncoder+0x3c0>
 8000670:	40010c00 	.word	0x40010c00
 8000674:	200025cc 	.word	0x200025cc
 8000678:	0800edcc 	.word	0x0800edcc
		  vfd.arr2[arr[j][0]][b] |= ((1<<arr[j][1])>>(b<<3))&0xFF;
 800067c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000686:	4413      	add	r3, r2
 8000688:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 800068c:	461a      	mov	r2, r3
 800068e:	4613      	mov	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	4413      	add	r3, r2
 8000694:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000698:	441a      	add	r2, r3
 800069a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800069e:	4413      	add	r3, r2
 80006a0:	3b68      	subs	r3, #104	; 0x68
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	b25a      	sxtb	r2, r3
 80006a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80006b0:	440b      	add	r3, r1
 80006b2:	f813 3c9b 	ldrb.w	r3, [r3, #-155]
 80006b6:	4619      	mov	r1, r3
 80006b8:	2301      	movs	r3, #1
 80006ba:	fa03 f101 	lsl.w	r1, r3, r1
 80006be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006c2:	00db      	lsls	r3, r3, #3
 80006c4:	fa41 f303 	asr.w	r3, r1, r3
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	4313      	orrs	r3, r2
 80006cc:	b259      	sxtb	r1, r3
 80006ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80006d8:	4413      	add	r3, r2
 80006da:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 80006de:	461a      	mov	r2, r3
 80006e0:	b2c9      	uxtb	r1, r1
 80006e2:	4613      	mov	r3, r2
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	4413      	add	r3, r2
 80006e8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80006ec:	441a      	add	r2, r3
 80006ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006f2:	4413      	add	r3, r2
 80006f4:	3b68      	subs	r3, #104	; 0x68
 80006f6:	460a      	mov	r2, r1
 80006f8:	701a      	strb	r2, [r3, #0]
		for (int b = 0; b < 3; b++)
 80006fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006fe:	3301      	adds	r3, #1
 8000700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000704:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000708:	2b02      	cmp	r3, #2
 800070a:	ddb7      	ble.n	800067c <StartEncoder+0x338>
		data = 0b11000000; // command 3, set address to 0
 800070c:	23c0      	movs	r3, #192	; 0xc0
 800070e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000718:	48bd      	ldr	r0, [pc, #756]	; (8000a10 <StartEncoder+0x6cc>)
 800071a:	f002 ff72 	bl	8003602 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800071e:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8000722:	f04f 33ff 	mov.w	r3, #4294967295
 8000726:	2201      	movs	r2, #1
 8000728:	48ba      	ldr	r0, [pc, #744]	; (8000a14 <StartEncoder+0x6d0>)
 800072a:	f006 f837 	bl	800679c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 800072e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000732:	f04f 33ff 	mov.w	r3, #4294967295
 8000736:	2221      	movs	r2, #33	; 0x21
 8000738:	48b6      	ldr	r0, [pc, #728]	; (8000a14 <StartEncoder+0x6d0>)
 800073a:	f006 f82f 	bl	800679c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800073e:	2201      	movs	r2, #1
 8000740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000744:	48b2      	ldr	r0, [pc, #712]	; (8000a10 <StartEncoder+0x6cc>)
 8000746:	f002 ff5c 	bl	8003602 <HAL_GPIO_WritePin>
		osDelay(100);
 800074a:	2064      	movs	r0, #100	; 0x64
 800074c:	f00a ffba 	bl	800b6c4 <osDelay>
    for (int j = 0; j < sizeof(arr)/2; j++)
 8000750:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000754:	3301      	adds	r3, #1
 8000756:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800075a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800075e:	2b18      	cmp	r3, #24
 8000760:	d982      	bls.n	8000668 <StartEncoder+0x324>
    }

    osDelay(500);
 8000762:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000766:	f00a ffad 	bl	800b6c4 <osDelay>

    //erase everything... just in case
    for (int a = 0; a < sizeof(vfd.arr1); a++)
 800076a:	2300      	movs	r3, #0
 800076c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000770:	e00b      	b.n	800078a <StartEncoder+0x446>
  	  vfd.arr1[a] = 0;
 8000772:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000776:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800077a:	4413      	add	r3, r2
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
    for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000780:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000784:	3301      	adds	r3, #1
 8000786:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800078a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800078e:	2b20      	cmp	r3, #32
 8000790:	d9ef      	bls.n	8000772 <StartEncoder+0x42e>
//    {
//        vfd.arr2[i+1][0] = vfd_digits[i]&0xFF;
//        vfd.arr2[i+1][1] = (vfd_digits[i]>>8)&0xFF;
//    }

	data = 0b11000000; // command 3, set address to 0
 8000792:	23c0      	movs	r3, #192	; 0xc0
 8000794:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079e:	489c      	ldr	r0, [pc, #624]	; (8000a10 <StartEncoder+0x6cc>)
 80007a0:	f002 ff2f 	bl	8003602 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80007a4:	f107 0147 	add.w	r1, r7, #71	; 0x47
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	2201      	movs	r2, #1
 80007ae:	4899      	ldr	r0, [pc, #612]	; (8000a14 <StartEncoder+0x6d0>)
 80007b0:	f005 fff4 	bl	800679c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80007b4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
 80007bc:	2221      	movs	r2, #33	; 0x21
 80007be:	4895      	ldr	r0, [pc, #596]	; (8000a14 <StartEncoder+0x6d0>)
 80007c0:	f005 ffec 	bl	800679c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80007c4:	2201      	movs	r2, #1
 80007c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ca:	4891      	ldr	r0, [pc, #580]	; (8000a10 <StartEncoder+0x6cc>)
 80007cc:	f002 ff19 	bl	8003602 <HAL_GPIO_WritePin>
	//osDelay(100);


	const char * demo = "VFD FV651G";
 80007d0:	4b91      	ldr	r3, [pc, #580]	; (8000a18 <StartEncoder+0x6d4>)
 80007d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	while (*demo)
 80007d6:	e012      	b.n	80007fe <StartEncoder+0x4ba>
	{
		uint16_t temp = get_char(*(demo++));
 80007d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fb1d 	bl	8002e24 <get_char>
 80007ea:	4603      	mov	r3, r0
 80007ec:	827b      	strh	r3, [r7, #18]
		xQueueSendToBack(qVFDHandle, &temp, 100);
 80007ee:	4b8b      	ldr	r3, [pc, #556]	; (8000a1c <StartEncoder+0x6d8>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	f107 0112 	add.w	r1, r7, #18
 80007f6:	2300      	movs	r3, #0
 80007f8:	2264      	movs	r2, #100	; 0x64
 80007fa:	f00b fa39 	bl	800bc70 <xQueueGenericSend>
	while (*demo)
 80007fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d1e7      	bne.n	80007d8 <StartEncoder+0x494>
	}


  /* Infinite loop */
  uint16_t old_time = 0xffff;
 8000808:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	  uint16_t buf;
	  union uTIME {
		  uint8_t u8[2];
		  uint16_t u16;
	  } time;
	  HAL_I2C_Mem_Read(&hi2c1, D3231_ADDRESS, 1, 1, time.u8, 2, 7);
 8000810:	2307      	movs	r3, #7
 8000812:	9302      	str	r3, [sp, #8]
 8000814:	2302      	movs	r3, #2
 8000816:	9301      	str	r3, [sp, #4]
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2301      	movs	r3, #1
 8000820:	2201      	movs	r2, #1
 8000822:	21d0      	movs	r1, #208	; 0xd0
 8000824:	487e      	ldr	r0, [pc, #504]	; (8000a20 <StartEncoder+0x6dc>)
 8000826:	f003 f883 	bl	8003930 <HAL_I2C_Mem_Read>
	  if (show_clock)
 800082a:	4b7e      	ldr	r3, [pc, #504]	; (8000a24 <StartEncoder+0x6e0>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d078      	beq.n	8000924 <StartEncoder+0x5e0>
	  {
		  if (old_time != time.u16)
 8000832:	89bb      	ldrh	r3, [r7, #12]
 8000834:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8000838:	429a      	cmp	r2, r3
 800083a:	f000 80dc 	beq.w	80009f6 <StartEncoder+0x6b2>
		  {
			  old_time = time.u16;
 800083e:	89bb      	ldrh	r3, [r7, #12]
 8000840:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
			  uint8_t clock [4];
			  clock[0] = time.u8[0] & 0xF;
 8000844:	7b3b      	ldrb	r3, [r7, #12]
 8000846:	f003 030f 	and.w	r3, r3, #15
 800084a:	b2db      	uxtb	r3, r3
 800084c:	723b      	strb	r3, [r7, #8]
			  clock[1] = (time.u8[0] >> 4) & 0xF;
 800084e:	7b3b      	ldrb	r3, [r7, #12]
 8000850:	091b      	lsrs	r3, r3, #4
 8000852:	b2db      	uxtb	r3, r3
 8000854:	727b      	strb	r3, [r7, #9]
			  clock[2] = time.u8[1] & 0xF;
 8000856:	7b7b      	ldrb	r3, [r7, #13]
 8000858:	f003 030f 	and.w	r3, r3, #15
 800085c:	b2db      	uxtb	r3, r3
 800085e:	72bb      	strb	r3, [r7, #10]
			  clock[3] = (time.u8[1] >> 4) & 0xF;
 8000860:	7b7b      	ldrb	r3, [r7, #13]
 8000862:	091b      	lsrs	r3, r3, #4
 8000864:	b2db      	uxtb	r3, r3
 8000866:	72fb      	strb	r3, [r7, #11]

			  //erase everything...
			  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000868:	2300      	movs	r3, #0
 800086a:	67bb      	str	r3, [r7, #120]	; 0x78
 800086c:	e008      	b.n	8000880 <StartEncoder+0x53c>
				  vfd.arr1[a] = 0;
 800086e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000874:	4413      	add	r3, r2
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
			  for (int a = 0; a < sizeof(vfd.arr1); a++)
 800087a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800087c:	3301      	adds	r3, #1
 800087e:	67bb      	str	r3, [r7, #120]	; 0x78
 8000880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000882:	2b20      	cmp	r3, #32
 8000884:	d9f3      	bls.n	800086e <StartEncoder+0x52a>

			  for (int i = 0; i < 4; i++)
 8000886:	2300      	movs	r3, #0
 8000888:	677b      	str	r3, [r7, #116]	; 0x74
 800088a:	e047      	b.n	800091c <StartEncoder+0x5d8>
			  {
				  buf = get_char(clock[i]);
 800088c:	f107 0208 	add.w	r2, r7, #8
 8000890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000892:	4413      	add	r3, r2
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f002 fac4 	bl	8002e24 <get_char>
 800089c:	4603      	mov	r3, r0
 800089e:	823b      	strh	r3, [r7, #16]

				  vfd.arr2[4+i][0] = buf & 0xFF;
 80008a0:	8a39      	ldrh	r1, [r7, #16]
 80008a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008a4:	1d1a      	adds	r2, r3, #4
 80008a6:	b2c9      	uxtb	r1, r1
 80008a8:	4613      	mov	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80008b2:	4413      	add	r3, r2
 80008b4:	3b68      	subs	r3, #104	; 0x68
 80008b6:	460a      	mov	r2, r1
 80008b8:	701a      	strb	r2, [r3, #0]
				  vfd.arr2[4+i][1] = (buf>>8)&0xFF;
 80008ba:	8a3b      	ldrh	r3, [r7, #16]
 80008bc:	0a1b      	lsrs	r3, r3, #8
 80008be:	b299      	uxth	r1, r3
 80008c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008c2:	1d1a      	adds	r2, r3, #4
 80008c4:	b2c9      	uxtb	r1, r1
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80008d0:	4413      	add	r3, r2
 80008d2:	3b67      	subs	r3, #103	; 0x67
 80008d4:	460a      	mov	r2, r1
 80008d6:	701a      	strb	r2, [r3, #0]
					data = 0b11000000; // command 3, set address to 0
 80008d8:	23c0      	movs	r3, #192	; 0xc0
 80008da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008e4:	484a      	ldr	r0, [pc, #296]	; (8000a10 <StartEncoder+0x6cc>)
 80008e6:	f002 fe8c 	bl	8003602 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80008ea:	f107 0147 	add.w	r1, r7, #71	; 0x47
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295
 80008f2:	2201      	movs	r2, #1
 80008f4:	4847      	ldr	r0, [pc, #284]	; (8000a14 <StartEncoder+0x6d0>)
 80008f6:	f005 ff51 	bl	800679c <HAL_SPI_Transmit>
					HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80008fa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000902:	2221      	movs	r2, #33	; 0x21
 8000904:	4843      	ldr	r0, [pc, #268]	; (8000a14 <StartEncoder+0x6d0>)
 8000906:	f005 ff49 	bl	800679c <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800090a:	2201      	movs	r2, #1
 800090c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000910:	483f      	ldr	r0, [pc, #252]	; (8000a10 <StartEncoder+0x6cc>)
 8000912:	f002 fe76 	bl	8003602 <HAL_GPIO_WritePin>
			  for (int i = 0; i < 4; i++)
 8000916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000918:	3301      	adds	r3, #1
 800091a:	677b      	str	r3, [r7, #116]	; 0x74
 800091c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800091e:	2b03      	cmp	r3, #3
 8000920:	ddb4      	ble.n	800088c <StartEncoder+0x548>
 8000922:	e068      	b.n	80009f6 <StartEncoder+0x6b2>

		  }
	  }
	  else
	  {
		  if(qVFDHandle && xQueueReceive(qVFDHandle, &buf, 1))
 8000924:	4b3d      	ldr	r3, [pc, #244]	; (8000a1c <StartEncoder+0x6d8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d064      	beq.n	80009f6 <StartEncoder+0x6b2>
 800092c:	4b3b      	ldr	r3, [pc, #236]	; (8000a1c <StartEncoder+0x6d8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f107 0110 	add.w	r1, r7, #16
 8000934:	2201      	movs	r2, #1
 8000936:	4618      	mov	r0, r3
 8000938:	f00b fb30 	bl	800bf9c <xQueueReceive>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d059      	beq.n	80009f6 <StartEncoder+0x6b2>
		  {
				for (int i = 10; i > 1; i--)
 8000942:	230a      	movs	r3, #10
 8000944:	673b      	str	r3, [r7, #112]	; 0x70
 8000946:	e02a      	b.n	800099e <StartEncoder+0x65a>
				{
					vfd.arr2[i][0] = vfd.arr2[i-1][0];
 8000948:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800094a:	1e5a      	subs	r2, r3, #1
 800094c:	4613      	mov	r3, r2
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	4413      	add	r3, r2
 8000952:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000956:	4413      	add	r3, r2
 8000958:	3b68      	subs	r3, #104	; 0x68
 800095a:	7819      	ldrb	r1, [r3, #0]
 800095c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800095e:	4613      	mov	r3, r2
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	4413      	add	r3, r2
 8000964:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000968:	4413      	add	r3, r2
 800096a:	3b68      	subs	r3, #104	; 0x68
 800096c:	460a      	mov	r2, r1
 800096e:	701a      	strb	r2, [r3, #0]
					vfd.arr2[i][1] = vfd.arr2[i-1][1];
 8000970:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000972:	1e5a      	subs	r2, r3, #1
 8000974:	4613      	mov	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	4413      	add	r3, r2
 800097a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800097e:	4413      	add	r3, r2
 8000980:	3b67      	subs	r3, #103	; 0x67
 8000982:	7819      	ldrb	r1, [r3, #0]
 8000984:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000986:	4613      	mov	r3, r2
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	4413      	add	r3, r2
 800098c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000990:	4413      	add	r3, r2
 8000992:	3b67      	subs	r3, #103	; 0x67
 8000994:	460a      	mov	r2, r1
 8000996:	701a      	strb	r2, [r3, #0]
				for (int i = 10; i > 1; i--)
 8000998:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800099a:	3b01      	subs	r3, #1
 800099c:	673b      	str	r3, [r7, #112]	; 0x70
 800099e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	dcd1      	bgt.n	8000948 <StartEncoder+0x604>
				}
				vfd.arr2[1][0] = buf & 0xFF;
 80009a4:	8a3b      	ldrh	r3, [r7, #16]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
				vfd.arr2[1][1] = (buf>>8)&0xFF;
 80009ac:	8a3b      	ldrh	r3, [r7, #16]
 80009ae:	0a1b      	lsrs	r3, r3, #8
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
				data = 0b11000000; // command 3, set address to 0
 80009b8:	23c0      	movs	r3, #192	; 0xc0
 80009ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c4:	4812      	ldr	r0, [pc, #72]	; (8000a10 <StartEncoder+0x6cc>)
 80009c6:	f002 fe1c 	bl	8003602 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80009ca:	f107 0147 	add.w	r1, r7, #71	; 0x47
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	2201      	movs	r2, #1
 80009d4:	480f      	ldr	r0, [pc, #60]	; (8000a14 <StartEncoder+0x6d0>)
 80009d6:	f005 fee1 	bl	800679c <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80009da:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	2221      	movs	r2, #33	; 0x21
 80009e4:	480b      	ldr	r0, [pc, #44]	; (8000a14 <StartEncoder+0x6d0>)
 80009e6:	f005 fed9 	bl	800679c <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f0:	4807      	ldr	r0, [pc, #28]	; (8000a10 <StartEncoder+0x6cc>)
 80009f2:	f002 fe06 	bl	8003602 <HAL_GPIO_WritePin>
		  }
	  }

	  if (HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin))
 80009f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <StartEncoder+0x6cc>)
 80009fc:	f002 fdea 	bl	80035d4 <HAL_GPIO_ReadPin>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d012      	beq.n	8000a2c <StartEncoder+0x6e8>
	  {
		  released = true;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <StartEncoder+0x6e4>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	e024      	b.n	8000a58 <StartEncoder+0x714>
 8000a0e:	bf00      	nop
 8000a10:	40010c00 	.word	0x40010c00
 8000a14:	200025cc 	.word	0x200025cc
 8000a18:	0800edc0 	.word	0x0800edc0
 8000a1c:	2000248c 	.word	0x2000248c
 8000a20:	20002498 	.word	0x20002498
 8000a24:	2000000d 	.word	0x2000000d
 8000a28:	20000000 	.word	0x20000000
	  } else if (released)
 8000a2c:	4b44      	ldr	r3, [pc, #272]	; (8000b40 <StartEncoder+0x7fc>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d011      	beq.n	8000a58 <StartEncoder+0x714>
	  {
		  released = false;
 8000a34:	4b42      	ldr	r3, [pc, #264]	; (8000b40 <StartEncoder+0x7fc>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
		  invert = !invert;
 8000a3a:	4b42      	ldr	r3, [pc, #264]	; (8000b44 <StartEncoder+0x800>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	bf14      	ite	ne
 8000a42:	2301      	movne	r3, #1
 8000a44:	2300      	moveq	r3, #0
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	f083 0301 	eor.w	r3, r3, #1
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	4b3b      	ldr	r3, [pc, #236]	; (8000b44 <StartEncoder+0x800>)
 8000a56:	701a      	strb	r2, [r3, #0]
	  }

	  data = 0b01000001; // command 2, write to LED port
 8000a58:	2341      	movs	r3, #65	; 0x41
 8000a5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a64:	4838      	ldr	r0, [pc, #224]	; (8000b48 <StartEncoder+0x804>)
 8000a66:	f002 fdcc 	bl	8003602 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000a6a:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	2201      	movs	r2, #1
 8000a74:	4835      	ldr	r0, [pc, #212]	; (8000b4c <StartEncoder+0x808>)
 8000a76:	f005 fe91 	bl	800679c <HAL_SPI_Transmit>
	  osDelay(10);
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	f00a fe22 	bl	800b6c4 <osDelay>

	  data = ~(1<<((tick_counter >> 1)&0b11));
 8000a80:	4b33      	ldr	r3, [pc, #204]	; (8000b50 <StartEncoder+0x80c>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	085b      	lsrs	r3, r3, #1
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	f003 0303 	and.w	r3, r3, #3
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
//	  if (invert)
//		  data =~data;
	  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, invert);
 8000a9c:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <StartEncoder+0x800>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	2120      	movs	r1, #32
 8000aa4:	4828      	ldr	r0, [pc, #160]	; (8000b48 <StartEncoder+0x804>)
 8000aa6:	f002 fdac 	bl	8003602 <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000aaa:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4825      	ldr	r0, [pc, #148]	; (8000b4c <StartEncoder+0x808>)
 8000ab6:	f005 fe71 	bl	800679c <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000aba:	2201      	movs	r2, #1
 8000abc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac0:	4821      	ldr	r0, [pc, #132]	; (8000b48 <StartEncoder+0x804>)
 8000ac2:	f002 fd9e 	bl	8003602 <HAL_GPIO_WritePin>

	  osDelay(10);
 8000ac6:	200a      	movs	r0, #10
 8000ac8:	f00a fdfc 	bl	800b6c4 <osDelay>
	  data = 0b10000000; // command 4
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  data |= invert<<3; // enable/disable display
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <StartEncoder+0x800>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	b25a      	sxtb	r2, r3
 8000ada:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ade:	b25b      	sxtb	r3, r3
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  data |= ((encoder_value >> 2) - 1)&0b111; // set brightness
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <StartEncoder+0x810>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	089b      	lsrs	r3, r3, #2
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	3b01      	subs	r3, #1
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	b25b      	sxtb	r3, r3
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	b25a      	sxtb	r2, r3
 8000b00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b04:	b25b      	sxtb	r3, r3
 8000b06:	4313      	orrs	r3, r2
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b16:	480c      	ldr	r0, [pc, #48]	; (8000b48 <StartEncoder+0x804>)
 8000b18:	f002 fd73 	bl	8003602 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000b1c:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8000b20:	f04f 33ff 	mov.w	r3, #4294967295
 8000b24:	2201      	movs	r2, #1
 8000b26:	4809      	ldr	r0, [pc, #36]	; (8000b4c <StartEncoder+0x808>)
 8000b28:	f005 fe38 	bl	800679c <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <StartEncoder+0x804>)
 8000b34:	f002 fd65 	bl	8003602 <HAL_GPIO_WritePin>
	  osDelay(10);
 8000b38:	200a      	movs	r0, #10
 8000b3a:	f00a fdc3 	bl	800b6c4 <osDelay>
  {
 8000b3e:	e667      	b.n	8000810 <StartEncoder+0x4cc>
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000001 	.word	0x20000001
 8000b48:	40010c00 	.word	0x40010c00
 8000b4c:	200025cc 	.word	0x200025cc
 8000b50:	200001ae 	.word	0x200001ae
 8000b54:	200001ac 	.word	0x200001ac

08000b58 <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	if (huart != &huart2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <HAL_UART_RxCpltCallback+0x44>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d115      	bne.n	8000b94 <HAL_UART_RxCpltCallback+0x3c>
		return;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]


   /* Notify the task that the transmission is complete by setting the TX_BIT
   in the task's notification value. */
	vTaskNotifyGiveFromISR( UARTtaskHandle,
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_UART_RxCpltCallback+0x48>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f107 020c 	add.w	r2, r7, #12
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f00c fbfe 	bl	800d378 <vTaskNotifyGiveFromISR>

   /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context switch
   should be performed to ensure the interrupt returns directly to the highest
   priority task.  The macro used for this purpose is dependent on the port in
   use and may be called portEND_SWITCHING_ISR(). */
   portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d009      	beq.n	8000b96 <HAL_UART_RxCpltCallback+0x3e>
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <HAL_UART_RxCpltCallback+0x4c>)
 8000b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	f3bf 8f4f 	dsb	sy
 8000b8e:	f3bf 8f6f 	isb	sy
 8000b92:	e000      	b.n	8000b96 <HAL_UART_RxCpltCallback+0x3e>
		return;
 8000b94:	bf00      	nop
}
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000266c 	.word	0x2000266c
 8000ba0:	20002480 	.word	0x20002480
 8000ba4:	e000ed04 	.word	0xe000ed04

08000ba8 <process_encoder>:

void process_encoder(void)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
	static uint8_t old;
	uint8_t new;
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000bae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb2:	483c      	ldr	r0, [pc, #240]	; (8000ca4 <process_encoder+0xfc>)
 8000bb4:	f002 fd0e 	bl	80035d4 <HAL_GPIO_ReadPin>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	461c      	mov	r4, r3
		   0b10*HAL_GPIO_ReadPin(enc_b_GPIO_Port, enc_b_Pin));
 8000bbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc0:	4838      	ldr	r0, [pc, #224]	; (8000ca4 <process_encoder+0xfc>)
 8000bc2:	f002 fd07 	bl	80035d4 <HAL_GPIO_ReadPin>
 8000bc6:	4603      	mov	r3, r0
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4423      	add	r3, r4
 8000bce:	71fb      	strb	r3, [r7, #7]
	switch(old)
 8000bd0:	4b35      	ldr	r3, [pc, #212]	; (8000ca8 <process_encoder+0x100>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b03      	cmp	r3, #3
 8000bd6:	d85e      	bhi.n	8000c96 <process_encoder+0xee>
 8000bd8:	a201      	add	r2, pc, #4	; (adr r2, 8000be0 <process_encoder+0x38>)
 8000bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bde:	bf00      	nop
 8000be0:	08000c17 	.word	0x08000c17
 8000be4:	08000c3d 	.word	0x08000c3d
 8000be8:	08000bf1 	.word	0x08000bf1
 8000bec:	08000c63 	.word	0x08000c63
		{
		case 2:
			{
			if(new == 3) encoder_value++;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d105      	bne.n	8000c02 <process_encoder+0x5a>
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <process_encoder+0x104>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <process_encoder+0x104>)
 8000c00:	801a      	strh	r2, [r3, #0]
			if(new == 0) encoder_value--;
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d13f      	bne.n	8000c88 <process_encoder+0xe0>
 8000c08:	4b28      	ldr	r3, [pc, #160]	; (8000cac <process_encoder+0x104>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	4b26      	ldr	r3, [pc, #152]	; (8000cac <process_encoder+0x104>)
 8000c12:	801a      	strh	r2, [r3, #0]
			break;
 8000c14:	e038      	b.n	8000c88 <process_encoder+0xe0>
			}

		case 0:
			{
			if(new == 2) encoder_value++;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d105      	bne.n	8000c28 <process_encoder+0x80>
 8000c1c:	4b23      	ldr	r3, [pc, #140]	; (8000cac <process_encoder+0x104>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	4b21      	ldr	r3, [pc, #132]	; (8000cac <process_encoder+0x104>)
 8000c26:	801a      	strh	r2, [r3, #0]
			if(new == 1) encoder_value--;
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d12e      	bne.n	8000c8c <process_encoder+0xe4>
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <process_encoder+0x104>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <process_encoder+0x104>)
 8000c38:	801a      	strh	r2, [r3, #0]
			break;
 8000c3a:	e027      	b.n	8000c8c <process_encoder+0xe4>
			}
		case 1:
			{
			if(new == 0) encoder_value++;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d105      	bne.n	8000c4e <process_encoder+0xa6>
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <process_encoder+0x104>)
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	3301      	adds	r3, #1
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <process_encoder+0x104>)
 8000c4c:	801a      	strh	r2, [r3, #0]
			if(new == 3) encoder_value--;
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b03      	cmp	r3, #3
 8000c52:	d11d      	bne.n	8000c90 <process_encoder+0xe8>
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <process_encoder+0x104>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <process_encoder+0x104>)
 8000c5e:	801a      	strh	r2, [r3, #0]
			break;
 8000c60:	e016      	b.n	8000c90 <process_encoder+0xe8>
			}
		case 3:
			{
			if(new == 1) encoder_value++;
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d105      	bne.n	8000c74 <process_encoder+0xcc>
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <process_encoder+0x104>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <process_encoder+0x104>)
 8000c72:	801a      	strh	r2, [r3, #0]
			if(new == 2) encoder_value--;
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d10c      	bne.n	8000c94 <process_encoder+0xec>
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <process_encoder+0x104>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <process_encoder+0x104>)
 8000c84:	801a      	strh	r2, [r3, #0]
			break;
 8000c86:	e005      	b.n	8000c94 <process_encoder+0xec>
			break;
 8000c88:	bf00      	nop
 8000c8a:	e004      	b.n	8000c96 <process_encoder+0xee>
			break;
 8000c8c:	bf00      	nop
 8000c8e:	e002      	b.n	8000c96 <process_encoder+0xee>
			break;
 8000c90:	bf00      	nop
 8000c92:	e000      	b.n	8000c96 <process_encoder+0xee>
			break;
 8000c94:	bf00      	nop
			}
		}
	old = new;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <process_encoder+0x100>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	7013      	strb	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd90      	pop	{r4, r7, pc}
 8000ca4:	40010c00 	.word	0x40010c00
 8000ca8:	200001b0 	.word	0x200001b0
 8000cac:	200001ac 	.word	0x200001ac

08000cb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc4:	4b49      	ldr	r3, [pc, #292]	; (8000dec <MX_GPIO_Init+0x13c>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a48      	ldr	r2, [pc, #288]	; (8000dec <MX_GPIO_Init+0x13c>)
 8000cca:	f043 0310 	orr.w	r3, r3, #16
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b46      	ldr	r3, [pc, #280]	; (8000dec <MX_GPIO_Init+0x13c>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0310 	and.w	r3, r3, #16
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cdc:	4b43      	ldr	r3, [pc, #268]	; (8000dec <MX_GPIO_Init+0x13c>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a42      	ldr	r2, [pc, #264]	; (8000dec <MX_GPIO_Init+0x13c>)
 8000ce2:	f043 0320 	orr.w	r3, r3, #32
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b40      	ldr	r3, [pc, #256]	; (8000dec <MX_GPIO_Init+0x13c>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0320 	and.w	r3, r3, #32
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <MX_GPIO_Init+0x13c>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a3c      	ldr	r2, [pc, #240]	; (8000dec <MX_GPIO_Init+0x13c>)
 8000cfa:	f043 0304 	orr.w	r3, r3, #4
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b3a      	ldr	r3, [pc, #232]	; (8000dec <MX_GPIO_Init+0x13c>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	4b37      	ldr	r3, [pc, #220]	; (8000dec <MX_GPIO_Init+0x13c>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a36      	ldr	r2, [pc, #216]	; (8000dec <MX_GPIO_Init+0x13c>)
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b34      	ldr	r3, [pc, #208]	; (8000dec <MX_GPIO_Init+0x13c>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d2a:	4831      	ldr	r0, [pc, #196]	; (8000df0 <MX_GPIO_Init+0x140>)
 8000d2c:	f002 fc69 	bl	8003602 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 5189 	mov.w	r1, #4384	; 0x1120
 8000d36:	482f      	ldr	r0, [pc, #188]	; (8000df4 <MX_GPIO_Init+0x144>)
 8000d38:	f002 fc63 	bl	8003602 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d42:	482d      	ldr	r0, [pc, #180]	; (8000df8 <MX_GPIO_Init+0x148>)
 8000d44:	f002 fc5d 	bl	8003602 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4823      	ldr	r0, [pc, #140]	; (8000df0 <MX_GPIO_Init+0x140>)
 8000d62:	f002 fab3 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d66:	2301      	movs	r3, #1
 8000d68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d6a:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <MX_GPIO_Init+0x14c>)
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4619      	mov	r1, r3
 8000d78:	481f      	ldr	r0, [pc, #124]	; (8000df8 <MX_GPIO_Init+0x148>)
 8000d7a:	f002 faa7 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin|enc_s_Pin;
 8000d7e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000d82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	4818      	ldr	r0, [pc, #96]	; (8000df4 <MX_GPIO_Init+0x144>)
 8000d94:	f002 fa9a 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8000d98:	f44f 5389 	mov.w	r3, #4384	; 0x1120
 8000d9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	4619      	mov	r1, r3
 8000db0:	4810      	ldr	r0, [pc, #64]	; (8000df4 <MX_GPIO_Init+0x144>)
 8000db2:	f002 fa8b 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480a      	ldr	r0, [pc, #40]	; (8000df8 <MX_GPIO_Init+0x148>)
 8000dd0:	f002 fa7c 	bl	80032cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2105      	movs	r1, #5
 8000dd8:	2006      	movs	r0, #6
 8000dda:	f002 f99c 	bl	8003116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000dde:	2006      	movs	r0, #6
 8000de0:	f002 f9b5 	bl	800314e <HAL_NVIC_EnableIRQ>

}
 8000de4:	bf00      	nop
 8000de6:	3720      	adds	r7, #32
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40011000 	.word	0x40011000
 8000df4:	40010c00 	.word	0x40010c00
 8000df8:	40010800 	.word	0x40010800
 8000dfc:	10110000 	.word	0x10110000

08000e00 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <MX_I2C1_Init+0x50>)
 8000e06:	4a13      	ldr	r2, [pc, #76]	; (8000e54 <MX_I2C1_Init+0x54>)
 8000e08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_I2C1_Init+0x50>)
 8000e0c:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <MX_I2C1_Init+0x58>)
 8000e0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_I2C1_Init+0x50>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_I2C1_Init+0x50>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_I2C1_Init+0x50>)
 8000e1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <MX_I2C1_Init+0x50>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_I2C1_Init+0x50>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <MX_I2C1_Init+0x50>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_I2C1_Init+0x50>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e3c:	4804      	ldr	r0, [pc, #16]	; (8000e50 <MX_I2C1_Init+0x50>)
 8000e3e:	f002 fc33 	bl	80036a8 <HAL_I2C_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e48:	f000 f8c8 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20002498 	.word	0x20002498
 8000e54:	40005400 	.word	0x40005400
 8000e58:	000186a0 	.word	0x000186a0

08000e5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a15      	ldr	r2, [pc, #84]	; (8000ecc <HAL_I2C_MspInit+0x70>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d123      	bne.n	8000ec4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_I2C_MspInit+0x74>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a13      	ldr	r2, [pc, #76]	; (8000ed0 <HAL_I2C_MspInit+0x74>)
 8000e82:	f043 0308 	orr.w	r3, r3, #8
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_I2C_MspInit+0x74>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0308 	and.w	r3, r3, #8
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e94:	23c0      	movs	r3, #192	; 0xc0
 8000e96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e98:	2312      	movs	r3, #18
 8000e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <HAL_I2C_MspInit+0x78>)
 8000ea8:	f002 fa10 	bl	80032cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_I2C_MspInit+0x74>)
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <HAL_I2C_MspInit+0x74>)
 8000eb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb6:	61d3      	str	r3, [r2, #28]
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_I2C_MspInit+0x74>)
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40005400 	.word	0x40005400
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010c00 	.word	0x40010c00

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000edc:	f002 f834 	bl	8002f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee0:	f000 f80f 	bl	8000f02 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee4:	f7ff fee4 	bl	8000cb0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000ee8:	f001 fdd0 	bl	8002a8c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000eec:	f001 ff1e 	bl	8002d2c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ef0:	f7ff ff86 	bl	8000e00 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ef4:	f00a fad6 	bl	800b4a4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ef8:	f7ff f93c 	bl	8000174 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000efc:	f00a fb04 	bl	800b508 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <main+0x28>

08000f02 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b094      	sub	sp, #80	; 0x50
 8000f06:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f0c:	2228      	movs	r2, #40	; 0x28
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f00d ff01 	bl	800ed18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f32:	2301      	movs	r3, #1
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f42:	2301      	movs	r3, #1
 8000f44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f46:	2302      	movs	r3, #2
 8000f48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f50:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f54:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f004 fe98 	bl	8005c90 <HAL_RCC_OscConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000f66:	f000 f839 	bl	8000fdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6a:	230f      	movs	r3, #15
 8000f6c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f7a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2102      	movs	r1, #2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f005 f902 	bl	8006190 <HAL_RCC_ClockConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f92:	f000 f823 	bl	8000fdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f96:	2310      	movs	r3, #16
 8000f98:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f005 fac1 	bl	8006528 <HAL_RCCEx_PeriphCLKConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000fac:	f000 f816 	bl	8000fdc <Error_Handler>
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3750      	adds	r7, #80	; 0x50
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d101      	bne.n	8000fce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fca:	f001 ffd3 	bl	8002f74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40012c00 	.word	0x40012c00

08000fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
}
 8000fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <Error_Handler+0x8>

08000fe6 <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b085      	sub	sp, #20
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	5c8a      	ldrb	r2, [r1, r2]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b3f      	cmp	r3, #63	; 0x3f
 8001004:	dd02      	ble.n	800100c <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3b40      	subs	r3, #64	; 0x40
 800100a:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	5cd3      	ldrb	r3, [r2, r3]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <hist_is_space_for_new+0x1a>
		return true;
 8001032:	2301      	movs	r3, #1
 8001034:	e01e      	b.n	8001074 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	429a      	cmp	r2, r3
 8001040:	db0c      	blt.n	800105c <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	4413      	add	r3, r2
 8001050:	3b01      	subs	r3, #1
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	429a      	cmp	r2, r3
 8001056:	da0c      	bge.n	8001072 <hist_is_space_for_new+0x56>
			return true;
 8001058:	2301      	movs	r3, #1
 800105a:	e00b      	b.n	8001074 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	3b01      	subs	r3, #1
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	da01      	bge.n	8001072 <hist_is_space_for_new+0x56>
			return true;
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <hist_is_space_for_new+0x58>
	}
	return false;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr

0800107e <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	60f8      	str	r0, [r7, #12]
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b3e      	cmp	r3, #62	; 0x3e
 800108e:	dc61      	bgt.n	8001154 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8001090:	e002      	b.n	8001098 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f7ff ffa7 	bl	8000fe6 <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f7ff ffbe 	bl	800101c <hist_is_space_for_new>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0f5      	beq.n	8001092 <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	5cd3      	ldrb	r3, [r2, r3]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d105      	bne.n	80010be <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	b2d1      	uxtb	r1, r2
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	da0a      	bge.n	80010e2 <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	3301      	adds	r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	4618      	mov	r0, r3
 80010dc:	f00d fdf4 	bl	800ecc8 <memcpy>
 80010e0:	e018      	b.n	8001114 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80010ea:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	3301      	adds	r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f00d fde4 	bl	800ecc8 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	18d1      	adds	r1, r2, r3
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	461a      	mov	r2, r3
 8001110:	f00d fdda 	bl	800ecc8 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	b2d1      	uxtb	r1, r2
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	2b3f      	cmp	r3, #63	; 0x3f
 8001134:	dd05      	ble.n	8001142 <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	2100      	movs	r1, #0
 800114a:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2200      	movs	r2, #0
 8001150:	649a      	str	r2, [r3, #72]	; 0x48
 8001152:	e000      	b.n	8001156 <hist_save_line+0xd8>
		return;
 8001154:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	; 0x30
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 8001172:	e010      	b.n	8001196 <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001178:	4413      	add	r3, r2
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001180:	4413      	add	r3, r2
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8001184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001186:	2b3f      	cmp	r3, #63	; 0x3f
 8001188:	dd02      	ble.n	8001190 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 800118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118c:	3b40      	subs	r3, #64	; 0x40
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8001190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001192:	3301      	adds	r3, #1
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119a:	4413      	add	r3, r2
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1e8      	bne.n	8001174 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d176      	bne.n	8001296 <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011ae:	429a      	cmp	r2, r3
 80011b0:	f2c0 80d6 	blt.w	8001360 <hist_restore_line+0x204>
			int header = pThis->begin;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 80011be:	e010      	b.n	80011e2 <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	4413      	add	r3, r2
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011cc:	4413      	add	r3, r2
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	2b3f      	cmp	r3, #63	; 0x3f
 80011d4:	dd02      	ble.n	80011dc <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	3b40      	subs	r3, #64	; 0x40
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	3301      	adds	r3, #1
 80011e0:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	4413      	add	r3, r2
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d007      	beq.n	80011fe <hist_restore_line+0xa2>
 80011ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	1e5a      	subs	r2, r3, #1
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d1e0      	bne.n	80011c0 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	4413      	add	r3, r2
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 80aa 	beq.w	8001360 <hist_restore_line+0x204>
					pThis->cur++;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001210:	1c5a      	adds	r2, r3, #1
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	4413      	add	r3, r2
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	4413      	add	r3, r2
 8001224:	2b3f      	cmp	r3, #63	; 0x3f
 8001226:	dc11      	bgt.n	800124c <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 8001228:	2233      	movs	r2, #51	; 0x33
 800122a:	2100      	movs	r1, #0
 800122c:	68b8      	ldr	r0, [r7, #8]
 800122e:	f00d fd73 	bl	800ed18 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	3301      	adds	r3, #1
 8001238:	18d1      	adds	r1, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	4413      	add	r3, r2
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	68b8      	ldr	r0, [r7, #8]
 8001246:	f00d fd3f 	bl	800ecc8 <memcpy>
 800124a:	e01f      	b.n	800128c <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001252:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 8001254:	2233      	movs	r2, #51	; 0x33
 8001256:	2100      	movs	r1, #0
 8001258:	68b8      	ldr	r0, [r7, #8]
 800125a:	f00d fd5d 	bl	800ed18 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001262:	3301      	adds	r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4619      	mov	r1, r3
 800126a:	68b8      	ldr	r0, [r7, #8]
 800126c:	f00d fd2c 	bl	800ecc8 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	18d0      	adds	r0, r2, r3
 8001276:	68f9      	ldr	r1, [r7, #12]
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	4413      	add	r3, r2
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	461a      	mov	r2, r3
 8001288:	f00d fd1e 	bl	800ecc8 <memcpy>
				}
				return pThis->ring_buf[header];
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	4413      	add	r3, r2
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	e066      	b.n	8001364 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800129a:	2b00      	cmp	r3, #0
 800129c:	dd5e      	ble.n	800135c <hist_restore_line+0x200>
				pThis->cur--;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a2:	1e5a      	subs	r2, r3, #1
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	61fb      	str	r3, [r7, #28]
			int j = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 80012b2:	e010      	b.n	80012d6 <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	4413      	add	r3, r2
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	69fa      	ldr	r2, [r7, #28]
 80012c0:	4413      	add	r3, r2
 80012c2:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	2b3f      	cmp	r3, #63	; 0x3f
 80012c8:	dd02      	ble.n	80012d0 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b40      	subs	r3, #64	; 0x40
 80012ce:	61fb      	str	r3, [r7, #28]
				j++;
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	3301      	adds	r3, #1
 80012d4:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	4413      	add	r3, r2
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d006      	beq.n	80012f0 <hist_restore_line+0x194>
 80012e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	1ad2      	subs	r2, r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d1e1      	bne.n	80012b4 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	4413      	add	r3, r2
 80012fe:	2b3f      	cmp	r3, #63	; 0x3f
 8001300:	dc0c      	bgt.n	800131c <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	3301      	adds	r3, #1
 8001308:	18d1      	adds	r1, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	68b8      	ldr	r0, [r7, #8]
 8001316:	f00d fcd7 	bl	800ecc8 <memcpy>
 800131a:	e01a      	b.n	8001352 <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001322:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3301      	adds	r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	4619      	mov	r1, r3
 8001330:	68b8      	ldr	r0, [r7, #8]
 8001332:	f00d fcc9 	bl	800ecc8 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	18d0      	adds	r0, r2, r3
 800133c:	68f9      	ldr	r1, [r7, #12]
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	4413      	add	r3, r2
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	461a      	mov	r2, r3
 800134e:	f00d fcbb 	bl	800ecc8 <memcpy>
			}
			return pThis->ring_buf[header];
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	4413      	add	r3, r2
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	e003      	b.n	8001364 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 800135c:	2300      	movs	r3, #0
 800135e:	e001      	b.n	8001364 <hist_restore_line+0x208>
		}
	}
	return -1;
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001364:	4618      	mov	r0, r3
 8001366:	3730      	adds	r7, #48	; 0x30
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
	int ind = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8001380:	e002      	b.n	8001388 <split+0x1c>
			ind++;
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	3301      	adds	r3, #1
 8001386:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4413      	add	r3, r2
 800138e:	3354      	adds	r3, #84	; 0x54
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d103      	bne.n	800139e <split+0x32>
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	429a      	cmp	r2, r3
 800139c:	dbf1      	blt.n	8001382 <split+0x16>
		}
		if (!(ind < limit)) return i;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	db01      	blt.n	80013aa <split+0x3e>
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	e024      	b.n	80013f4 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	1c58      	adds	r0, r3, #1
 80013b6:	6178      	str	r0, [r7, #20]
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	4403      	add	r3, r0
 80013be:	440a      	add	r2, r1
 80013c0:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	dd05      	ble.n	80013d4 <split+0x68>
			return -1;
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295
 80013cc:	e012      	b.n	80013f4 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	3301      	adds	r3, #1
 80013d2:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4413      	add	r3, r2
 80013da:	3354      	adds	r3, #84	; 0x54
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <split+0x7e>
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	dbf1      	blt.n	80013ce <split+0x62>
		}
		if (!(ind < limit)) return i;
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dbca      	blt.n	8001388 <split+0x1c>
 80013f2:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	371c      	adds	r7, #28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001410:	4610      	mov	r0, r2
 8001412:	4798      	blx	r3
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800142a:	4803      	ldr	r0, [pc, #12]	; (8001438 <terminal_backspace+0x1c>)
 800142c:	4798      	blx	r3
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	0800ee10 	.word	0x0800ee10

0800143c <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800144a:	4803      	ldr	r0, [pc, #12]	; (8001458 <terminal_newline+0x1c>)
 800144c:	4798      	blx	r3
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	0800ee18 	.word	0x0800ee18

0800145c <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	2300      	movs	r3, #0
 800146c:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001478:	d235      	bcs.n	80014e6 <u16bit_to_str+0x8a>
		while (nmb > 0) {
 800147a:	e01a      	b.n	80014b2 <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <u16bit_to_str+0x9c>)
 8001480:	fba3 2301 	umull	r2, r3, r3, r1
 8001484:	08da      	lsrs	r2, r3, #3
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	1aca      	subs	r2, r1, r3
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	1c59      	adds	r1, r3, #1
 8001496:	6179      	str	r1, [r7, #20]
 8001498:	3230      	adds	r2, #48	; 0x30
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	f107 0118 	add.w	r1, r7, #24
 80014a0:	440b      	add	r3, r1
 80014a2:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a13      	ldr	r2, [pc, #76]	; (80014f8 <u16bit_to_str+0x9c>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	08db      	lsrs	r3, r3, #3
 80014b0:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1e1      	bne.n	800147c <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 80014b8:	2300      	movs	r3, #0
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	e00f      	b.n	80014de <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	1e5a      	subs	r2, r3, #1
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	1c59      	adds	r1, r3, #1
 80014ca:	6039      	str	r1, [r7, #0]
 80014cc:	f107 0118 	add.w	r1, r7, #24
 80014d0:	440a      	add	r2, r1
 80014d2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80014d6:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	3301      	adds	r3, #1
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dbeb      	blt.n	80014be <u16bit_to_str+0x62>
	}
	*buf = '\0';
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
	return buf;
 80014ec:	683b      	ldr	r3, [r7, #0]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	371c      	adds	r7, #28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	cccccccd 	.word	0xcccccccd

080014fc <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	4a1d      	ldr	r2, [pc, #116]	; (8001590 <terminal_move_cursor+0x94>)
 800151c:	6812      	ldr	r2, [r2, #0]
 800151e:	4611      	mov	r1, r2
 8001520:	8019      	strh	r1, [r3, #0]
 8001522:	3302      	adds	r3, #2
 8001524:	0c12      	lsrs	r2, r2, #16
 8001526:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	dd0f      	ble.n	800154e <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	3302      	adds	r3, #2
 8001536:	4619      	mov	r1, r3
 8001538:	4610      	mov	r0, r2
 800153a:	f7ff ff8f 	bl	800145c <u16bit_to_str>
 800153e:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	4914      	ldr	r1, [pc, #80]	; (8001594 <terminal_move_cursor+0x98>)
 8001544:	461a      	mov	r2, r3
 8001546:	460b      	mov	r3, r1
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	8013      	strh	r3, [r2, #0]
 800154c:	e013      	b.n	8001576 <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	da18      	bge.n	8001586 <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	425b      	negs	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	3302      	adds	r3, #2
 8001560:	4619      	mov	r1, r3
 8001562:	4610      	mov	r0, r2
 8001564:	f7ff ff7a 	bl	800145c <u16bit_to_str>
 8001568:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	490a      	ldr	r1, [pc, #40]	; (8001598 <terminal_move_cursor+0x9c>)
 800156e:	461a      	mov	r2, r3
 8001570:	460b      	mov	r3, r1
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800157c:	f107 020c 	add.w	r2, r7, #12
 8001580:	4610      	mov	r0, r2
 8001582:	4798      	blx	r3
 8001584:	e000      	b.n	8001588 <terminal_move_cursor+0x8c>
		return;
 8001586:	bf00      	nop
}
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	0800ee1c 	.word	0x0800ee1c
 8001594:	0800ee20 	.word	0x0800ee20
 8001598:	0800ee24 	.word	0x0800ee24

0800159c <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	4a15      	ldr	r2, [pc, #84]	; (8001600 <terminal_reset_cursor+0x64>)
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	4611      	mov	r1, r2
 80015ae:	8019      	strh	r1, [r3, #0]
 80015b0:	3302      	adds	r3, #2
 80015b2:	0c12      	lsrs	r2, r2, #16
 80015b4:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	3302      	adds	r3, #2
 80015bc:	4619      	mov	r1, r3
 80015be:	203a      	movs	r0, #58	; 0x3a
 80015c0:	f7ff ff4c 	bl	800145c <u16bit_to_str>
 80015c4:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <terminal_reset_cursor+0x68>)
 80015ca:	6810      	ldr	r0, [r2, #0]
 80015cc:	6018      	str	r0, [r3, #0]
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3303      	adds	r3, #3
 80015d2:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 80015d4:	69f9      	ldr	r1, [r7, #28]
 80015d6:	2005      	movs	r0, #5
 80015d8:	f7ff ff40 	bl	800145c <u16bit_to_str>
 80015dc:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	4909      	ldr	r1, [pc, #36]	; (8001608 <terminal_reset_cursor+0x6c>)
 80015e2:	461a      	mov	r2, r3
 80015e4:	460b      	mov	r3, r1
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015f0:	f107 020c 	add.w	r2, r7, #12
 80015f4:	4610      	mov	r0, r2
 80015f6:	4798      	blx	r3
}
 80015f8:	bf00      	nop
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	0800ee1c 	.word	0x0800ee1c
 8001604:	0800ee28 	.word	0x0800ee28
 8001608:	0800ee20 	.word	0x0800ee20

0800160c <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800161e:	4816      	ldr	r0, [pc, #88]	; (8001678 <terminal_print_line+0x6c>)
 8001620:	4798      	blx	r3

	char nch [] = {0,0};
 8001622:	2300      	movs	r3, #0
 8001624:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	e014      	b.n	8001656 <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	4413      	add	r3, r2
 8001632:	3354      	adds	r3, #84	; 0x54
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 8001638:	7c3b      	ldrb	r3, [r7, #16]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <terminal_print_line+0x36>
			nch[0] = ' ';
 800163e:	2320      	movs	r3, #32
 8001640:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001648:	f107 0210 	add.w	r2, r7, #16
 800164c:	4610      	mov	r0, r2
 800164e:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	429a      	cmp	r2, r3
 8001660:	dbe4      	blt.n	800162c <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7ff ff9a 	bl	800159c <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f7ff ff46 	bl	80014fc <terminal_move_cursor>
}
 8001670:	bf00      	nop
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	0800ee2c 	.word	0x0800ee2c

0800167c <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3354      	adds	r3, #84	; 0x54
 800168a:	2233      	movs	r2, #51	; 0x33
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f00d fb42 	bl	800ed18 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3304      	adds	r3, #4
 8001698:	2240      	movs	r2, #64	; 0x40
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f00d fb3b 	bl	800ed18 <memset>
	pThis->ring_hist.begin = 0;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pThis->execute = NULL;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	pThis->get_completion = NULL;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif
	pThis->prompt_str = prompt_default;
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <microrl_init+0x78>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000004 	.word	0x20000004

080016f8 <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	1d18      	adds	r0, r3, #4
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3354      	adds	r3, #84	; 0x54
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff fcfb 	bl	800115c <hist_restore_line>
 8001766:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	db1a      	blt.n	80017a4 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	3354      	adds	r3, #84	; 0x54
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		terminal_reset_cursor (pThis);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ff04 	bl	800159c <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800179a:	461a      	mov	r2, r3
 800179c:	2100      	movs	r1, #0
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ff34 	bl	800160c <terminal_print_line>
	}
}
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	2b5b      	cmp	r3, #91	; 0x5b
 80017bc:	d104      	bne.n	80017c8 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
		return 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	e07b      	b.n	80018c0 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d14f      	bne.n	8001870 <escape_process+0xc4>
		if (ch == 'A') {
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	2b41      	cmp	r3, #65	; 0x41
 80017d4:	d105      	bne.n	80017e2 <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 80017d6:	2100      	movs	r1, #0
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ffb7 	bl	800174c <hist_search>
#endif
			return 1;
 80017de:	2301      	movs	r3, #1
 80017e0:	e06e      	b.n	80018c0 <escape_process+0x114>
		} else if (ch == 'B') {
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	2b42      	cmp	r3, #66	; 0x42
 80017e6:	d105      	bne.n	80017f4 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 80017e8:	2101      	movs	r1, #1
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ffae 	bl	800174c <hist_search>
#endif
			return 1;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e065      	b.n	80018c0 <escape_process+0x114>
		} else if (ch == 'C') {
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	2b43      	cmp	r3, #67	; 0x43
 80017f8:	d114      	bne.n	8001824 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001806:	429a      	cmp	r2, r3
 8001808:	da0a      	bge.n	8001820 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 800180a:	2101      	movs	r1, #1
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff fe75 	bl	80014fc <terminal_move_cursor>
				pThis->cursor++;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 8001820:	2301      	movs	r3, #1
 8001822:	e04d      	b.n	80018c0 <escape_process+0x114>
		} else if (ch == 'D') {
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	2b44      	cmp	r3, #68	; 0x44
 8001828:	d112      	bne.n	8001850 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001830:	2b00      	cmp	r3, #0
 8001832:	dd0b      	ble.n	800184c <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 8001834:	f04f 31ff 	mov.w	r1, #4294967295
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff fe5f 	bl	80014fc <terminal_move_cursor>
				pThis->cursor--;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001844:	1e5a      	subs	r2, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 800184c:	2301      	movs	r3, #1
 800184e:	e037      	b.n	80018c0 <escape_process+0x114>
		} else if (ch == '7') {
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	2b37      	cmp	r3, #55	; 0x37
 8001854:	d104      	bne.n	8001860 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2202      	movs	r2, #2
 800185a:	701a      	strb	r2, [r3, #0]
			return 0;
 800185c:	2300      	movs	r3, #0
 800185e:	e02f      	b.n	80018c0 <escape_process+0x114>
		} else if (ch == '8') {
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	2b38      	cmp	r3, #56	; 0x38
 8001864:	d12b      	bne.n	80018be <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2203      	movs	r2, #3
 800186a:	701a      	strb	r2, [r3, #0]
			return 0;
 800186c:	2300      	movs	r3, #0
 800186e:	e027      	b.n	80018c0 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	2b7e      	cmp	r3, #126	; 0x7e
 8001874:	d123      	bne.n	80018be <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d108      	bne.n	8001890 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fe8c 	bl	800159c <terminal_reset_cursor>
			pThis->cursor = 0;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 800188c:	2301      	movs	r3, #1
 800188e:	e017      	b.n	80018c0 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b03      	cmp	r3, #3
 8001896:	d112      	bne.n	80018be <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	4619      	mov	r1, r3
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff fe27 	bl	80014fc <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	2b32      	cmp	r3, #50	; 0x32
 80018e0:	dc60      	bgt.n	80019a4 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018ee:	4619      	mov	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	440b      	add	r3, r1
 80018f4:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	3354      	adds	r3, #84	; 0x54
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor + len,
 8001900:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800190e:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 8001910:	461a      	mov	r2, r3
 8001912:	f00d f9e7 	bl	800ece4 <memmove>
		for (i = 0; i < len; i++) {
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e025      	b.n	8001968 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	441a      	add	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	440b      	add	r3, r1
 800192c:	7811      	ldrb	r1, [r2, #0]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	4413      	add	r3, r2
 8001932:	460a      	mov	r2, r1
 8001934:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	4413      	add	r3, r2
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	4413      	add	r3, r2
 8001946:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800194a:	2b20      	cmp	r3, #32
 800194c:	d109      	bne.n	8001962 <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	4413      	add	r3, r2
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4413      	add	r3, r2
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	429a      	cmp	r2, r3
 800196e:	dbd5      	blt.n	800191c <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	441a      	add	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdlen += len;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	441a      	add	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	4413      	add	r3, r2
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <microrl_insert_text+0xde>
	}
	return false;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019bc:	2b00      	cmp	r3, #0
 80019be:	dd31      	ble.n	8001a24 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff fd2b 	bl	800141c <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019d2:	3b01      	subs	r3, #1
 80019d4:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3354      	adds	r3, #84	; 0x54
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor-1,
 80019e0:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 80019f2:	461a      	mov	r2, r3
 80019f4:	f00d f976 	bl	800ece4 <memmove>
		pThis->cursor--;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019fe:	1e5a      	subs	r2, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1c:	1e5a      	subs	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f7fe fb92 	bl	8000164 <strlen>
 8001a40:	4603      	mov	r3, r0
 8001a42:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	e019      	b.n	8001a7e <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fb85 	bl	8000164 <strlen>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d20a      	bcs.n	8001a78 <common_len+0x4c>
			shortest = arr[i];
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f7fe fb78 	bl	8000164 <strlen>
 8001a74:	4603      	mov	r3, r0
 8001a76:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1de      	bne.n	8001a4a <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	e01f      	b.n	8001ad2 <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	e012      	b.n	8001abe <common_len+0x92>
			if (shortest[i] != arr[j][i])
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	781a      	ldrb	r2, [r3, #0]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	440b      	add	r3, r1
 8001aa8:	6819      	ldr	r1, [r3, #0]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	440b      	add	r3, r1
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <common_len+0x8c>
				return i;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	e011      	b.n	8001adc <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	3301      	adds	r3, #1
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1e5      	bne.n	8001a98 <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	dbdb      	blt.n	8001a92 <common_len+0x66>

	return i;
 8001ada:	697b      	ldr	r3, [r7, #20]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 8001ae4:	b5b0      	push	{r4, r5, r7, lr}
 8001ae6:	b08c      	sub	sp, #48	; 0x30
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 809c 	beq.w	8001c30 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001afe:	f107 020c 	add.w	r2, r7, #12
 8001b02:	4619      	mov	r1, r3
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff fc31 	bl	800136c <split>
 8001b0a:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b12:	3b01      	subs	r3, #1
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	4413      	add	r3, r2
 8001b18:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d109      	bne.n	8001b34 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 8001b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a42      	ldr	r2, [pc, #264]	; (8001c38 <microrl_get_complite+0x154>)
 8001b30:	f843 2c24 	str.w	r2, [r3, #-36]
	compl_token = pThis->get_completion (status, tkn_arr);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3a:	f107 020c 	add.w	r2, r7, #12
 8001b3e:	4611      	mov	r1, r2
 8001b40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b42:	4798      	blx	r3
 8001b44:	6238      	str	r0, [r7, #32]
	if (compl_token[0] != NULL) {
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d071      	beq.n	8001c32 <microrl_get_complite+0x14e>
		int i = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
		int len;

		if (compl_token[1] == NULL) {
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	3304      	adds	r3, #4
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d107      	bne.n	8001b6c <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe faff 	bl	8000164 <strlen>
 8001b66:	4603      	mov	r3, r0
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6a:	e026      	b.n	8001bba <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8001b6c:	6a38      	ldr	r0, [r7, #32]
 8001b6e:	f7ff ff5d 	bl	8001a2c <common_len>
 8001b72:	6278      	str	r0, [r7, #36]	; 0x24
			terminal_newline (pThis);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff fc61 	bl	800143c <terminal_newline>
			while (compl_token [i] != NULL) {
 8001b7a:	e011      	b.n	8001ba0 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b84:	0092      	lsls	r2, r2, #2
 8001b86:	6a39      	ldr	r1, [r7, #32]
 8001b88:	440a      	add	r2, r1
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4798      	blx	r3
				pThis->print (" ");
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b96:	4829      	ldr	r0, [pc, #164]	; (8001c3c <microrl_get_complite+0x158>)
 8001b98:	4798      	blx	r3
				i++;
 8001b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
			while (compl_token [i] != NULL) {
 8001ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	6a3a      	ldr	r2, [r7, #32]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1e6      	bne.n	8001b7c <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff fc44 	bl	800143c <terminal_newline>
			print_prompt (pThis);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff fc22 	bl	80013fe <print_prompt>
		}
		
		if (len) {
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d02b      	beq.n	8001c18 <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	681c      	ldr	r4, [r3, #0]
 8001bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001bce:	4413      	add	r3, r2
 8001bd0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fac5 	bl	8000164 <strlen>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 8001bde:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be2:	3b01      	subs	r3, #1
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001bea:	4413      	add	r3, r2
 8001bec:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fab7 	bl	8000164 <strlen>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff fe62 	bl	80018c8 <microrl_insert_text>
			if (compl_token[1] == NULL) 
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	3304      	adds	r3, #4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d104      	bne.n	8001c18 <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 8001c0e:	2201      	movs	r2, #1
 8001c10:	490a      	ldr	r1, [pc, #40]	; (8001c3c <microrl_get_complite+0x158>)
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fe58 	bl	80018c8 <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff fcbf 	bl	800159c <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c24:	461a      	mov	r2, r3
 8001c26:	2100      	movs	r1, #0
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff fcef 	bl	800160c <terminal_print_line>
 8001c2e:	e000      	b.n	8001c32 <microrl_get_complite+0x14e>
		return;
 8001c30:	bf00      	nop
	} 
}
 8001c32:	3730      	adds	r7, #48	; 0x30
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bdb0      	pop	{r4, r5, r7, pc}
 8001c38:	0800ee30 	.word	0x0800ee30
 8001c3c:	0800ee34 	.word	0x0800ee34

08001c40 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff fbf7 	bl	800143c <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	dd0a      	ble.n	8001c6e <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	1d18      	adds	r0, r3, #4
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c68:	461a      	mov	r2, r3
 8001c6a:	f7ff fa08 	bl	800107e <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c74:	f107 0208 	add.w	r2, r7, #8
 8001c78:	4619      	mov	r1, r3
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff fb76 	bl	800136c <split>
 8001c80:	61f8      	str	r0, [r7, #28]
	if (status == -1){
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d109      	bne.n	8001c9e <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c90:	4817      	ldr	r0, [pc, #92]	; (8001cf0 <new_line_handler+0xb0>)
 8001c92:	4798      	blx	r3
		pThis->print (ENDL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c9a:	4816      	ldr	r0, [pc, #88]	; (8001cf4 <new_line_handler+0xb4>)
 8001c9c:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	dd0c      	ble.n	8001cbe <new_line_handler+0x7e>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb4:	f107 0208 	add.w	r2, r7, #8
 8001cb8:	4611      	mov	r1, r2
 8001cba:	69f8      	ldr	r0, [r7, #28]
 8001cbc:	4798      	blx	r3
	print_prompt (pThis);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff fb9d 	bl	80013fe <print_prompt>
	pThis->cmdlen = 0;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3354      	adds	r3, #84	; 0x54
 8001cd8:	2233      	movs	r2, #51	; 0x33
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f00d f81b 	bl	800ed18 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8001ce8:	bf00      	nop
 8001cea:	3720      	adds	r7, #32
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	0800ee38 	.word	0x0800ee38
 8001cf4:	0800ee18 	.word	0x0800ee18

08001cf8 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	785b      	ldrb	r3, [r3, #1]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00d      	beq.n	8001d26 <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	4619      	mov	r1, r3
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fd4b 	bl	80017ac <escape_process>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 81e3 	beq.w	80020e4 <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 8001d24:	e1de      	b.n	80020e4 <microrl_insert_char+0x3ec>
		switch (ch) {
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	2b7e      	cmp	r3, #126	; 0x7e
 8001d2c:	f200 81af 	bhi.w	800208e <microrl_insert_char+0x396>
 8001d30:	a201      	add	r2, pc, #4	; (adr r2, 8001d38 <microrl_insert_char+0x40>)
 8001d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d36:	bf00      	nop
 8001d38:	08001fcb 	.word	0x08001fcb
 8001d3c:	08002003 	.word	0x08002003
 8001d40:	0800207b 	.word	0x0800207b
 8001d44:	0800208f 	.word	0x0800208f
 8001d48:	08001fa7 	.word	0x08001fa7
 8001d4c:	08001fdb 	.word	0x08001fdb
 8001d50:	0800208f 	.word	0x0800208f
 8001d54:	0800203b 	.word	0x0800203b
 8001d58:	08001f5d 	.word	0x08001f5d
 8001d5c:	08001f35 	.word	0x08001f35
 8001d60:	08001f8f 	.word	0x08001f8f
 8001d64:	0800208f 	.word	0x0800208f
 8001d68:	08001f35 	.word	0x08001f35
 8001d6c:	08002031 	.word	0x08002031
 8001d70:	0800208f 	.word	0x0800208f
 8001d74:	08002027 	.word	0x08002027
 8001d78:	0800208f 	.word	0x0800208f
 8001d7c:	08002057 	.word	0x08002057
 8001d80:	0800208f 	.word	0x0800208f
 8001d84:	0800208f 	.word	0x0800208f
 8001d88:	08001f73 	.word	0x08001f73
 8001d8c:	0800208f 	.word	0x0800208f
 8001d90:	0800208f 	.word	0x0800208f
 8001d94:	0800208f 	.word	0x0800208f
 8001d98:	0800208f 	.word	0x0800208f
 8001d9c:	0800208f 	.word	0x0800208f
 8001da0:	08001f65 	.word	0x08001f65
 8001da4:	0800208f 	.word	0x0800208f
 8001da8:	0800208f 	.word	0x0800208f
 8001dac:	0800208f 	.word	0x0800208f
 8001db0:	0800208f 	.word	0x0800208f
 8001db4:	0800208f 	.word	0x0800208f
 8001db8:	0800208f 	.word	0x0800208f
 8001dbc:	0800208f 	.word	0x0800208f
 8001dc0:	0800208f 	.word	0x0800208f
 8001dc4:	0800208f 	.word	0x0800208f
 8001dc8:	0800208f 	.word	0x0800208f
 8001dcc:	0800208f 	.word	0x0800208f
 8001dd0:	0800208f 	.word	0x0800208f
 8001dd4:	0800208f 	.word	0x0800208f
 8001dd8:	0800208f 	.word	0x0800208f
 8001ddc:	0800208f 	.word	0x0800208f
 8001de0:	0800208f 	.word	0x0800208f
 8001de4:	0800208f 	.word	0x0800208f
 8001de8:	0800208f 	.word	0x0800208f
 8001dec:	0800208f 	.word	0x0800208f
 8001df0:	0800208f 	.word	0x0800208f
 8001df4:	0800208f 	.word	0x0800208f
 8001df8:	0800208f 	.word	0x0800208f
 8001dfc:	0800208f 	.word	0x0800208f
 8001e00:	0800208f 	.word	0x0800208f
 8001e04:	0800208f 	.word	0x0800208f
 8001e08:	0800208f 	.word	0x0800208f
 8001e0c:	0800208f 	.word	0x0800208f
 8001e10:	0800208f 	.word	0x0800208f
 8001e14:	0800208f 	.word	0x0800208f
 8001e18:	0800208f 	.word	0x0800208f
 8001e1c:	0800208f 	.word	0x0800208f
 8001e20:	0800208f 	.word	0x0800208f
 8001e24:	0800208f 	.word	0x0800208f
 8001e28:	0800208f 	.word	0x0800208f
 8001e2c:	0800208f 	.word	0x0800208f
 8001e30:	0800208f 	.word	0x0800208f
 8001e34:	0800208f 	.word	0x0800208f
 8001e38:	0800208f 	.word	0x0800208f
 8001e3c:	0800208f 	.word	0x0800208f
 8001e40:	0800208f 	.word	0x0800208f
 8001e44:	0800208f 	.word	0x0800208f
 8001e48:	0800208f 	.word	0x0800208f
 8001e4c:	0800208f 	.word	0x0800208f
 8001e50:	0800208f 	.word	0x0800208f
 8001e54:	0800208f 	.word	0x0800208f
 8001e58:	0800208f 	.word	0x0800208f
 8001e5c:	0800208f 	.word	0x0800208f
 8001e60:	0800208f 	.word	0x0800208f
 8001e64:	0800208f 	.word	0x0800208f
 8001e68:	0800208f 	.word	0x0800208f
 8001e6c:	0800208f 	.word	0x0800208f
 8001e70:	0800208f 	.word	0x0800208f
 8001e74:	0800208f 	.word	0x0800208f
 8001e78:	0800208f 	.word	0x0800208f
 8001e7c:	0800208f 	.word	0x0800208f
 8001e80:	0800208f 	.word	0x0800208f
 8001e84:	0800208f 	.word	0x0800208f
 8001e88:	0800208f 	.word	0x0800208f
 8001e8c:	0800208f 	.word	0x0800208f
 8001e90:	0800208f 	.word	0x0800208f
 8001e94:	0800208f 	.word	0x0800208f
 8001e98:	0800208f 	.word	0x0800208f
 8001e9c:	0800208f 	.word	0x0800208f
 8001ea0:	0800208f 	.word	0x0800208f
 8001ea4:	0800208f 	.word	0x0800208f
 8001ea8:	0800208f 	.word	0x0800208f
 8001eac:	0800208f 	.word	0x0800208f
 8001eb0:	0800208f 	.word	0x0800208f
 8001eb4:	0800208f 	.word	0x0800208f
 8001eb8:	0800208f 	.word	0x0800208f
 8001ebc:	0800208f 	.word	0x0800208f
 8001ec0:	0800208f 	.word	0x0800208f
 8001ec4:	0800208f 	.word	0x0800208f
 8001ec8:	0800208f 	.word	0x0800208f
 8001ecc:	0800208f 	.word	0x0800208f
 8001ed0:	0800208f 	.word	0x0800208f
 8001ed4:	0800208f 	.word	0x0800208f
 8001ed8:	0800208f 	.word	0x0800208f
 8001edc:	0800208f 	.word	0x0800208f
 8001ee0:	0800208f 	.word	0x0800208f
 8001ee4:	0800208f 	.word	0x0800208f
 8001ee8:	0800208f 	.word	0x0800208f
 8001eec:	0800208f 	.word	0x0800208f
 8001ef0:	0800208f 	.word	0x0800208f
 8001ef4:	0800208f 	.word	0x0800208f
 8001ef8:	0800208f 	.word	0x0800208f
 8001efc:	0800208f 	.word	0x0800208f
 8001f00:	0800208f 	.word	0x0800208f
 8001f04:	0800208f 	.word	0x0800208f
 8001f08:	0800208f 	.word	0x0800208f
 8001f0c:	0800208f 	.word	0x0800208f
 8001f10:	0800208f 	.word	0x0800208f
 8001f14:	0800208f 	.word	0x0800208f
 8001f18:	0800208f 	.word	0x0800208f
 8001f1c:	0800208f 	.word	0x0800208f
 8001f20:	0800208f 	.word	0x0800208f
 8001f24:	0800208f 	.word	0x0800208f
 8001f28:	0800208f 	.word	0x0800208f
 8001f2c:	0800208f 	.word	0x0800208f
 8001f30:	0800203b 	.word	0x0800203b
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	789b      	ldrb	r3, [r3, #2]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b0d      	cmp	r3, #13
 8001f3e:	d101      	bne.n	8001f44 <microrl_insert_char+0x24c>
 8001f40:	230a      	movs	r3, #10
 8001f42:	e000      	b.n	8001f46 <microrl_insert_char+0x24e>
 8001f44:	230d      	movs	r3, #13
 8001f46:	4293      	cmp	r3, r2
 8001f48:	f000 80c1 	beq.w	80020ce <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff fe73 	bl	8001c40 <new_line_handler>
				break;
 8001f5a:	e0c3      	b.n	80020e4 <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff fdc1 	bl	8001ae4 <microrl_get_complite>
			break;
 8001f62:	e0bf      	b.n	80020e4 <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	705a      	strb	r2, [r3, #1]
			break;
 8001f6a:	e0bb      	b.n	80020e4 <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff fd1e 	bl	80019ae <microrl_backspace>
					while (pThis->cursor > 0) {
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	dcf7      	bgt.n	8001f6c <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f82:	461a      	mov	r2, r3
 8001f84:	2100      	movs	r1, #0
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff fb40 	bl	800160c <terminal_print_line>
			break;
 8001f8c:	e0aa      	b.n	80020e4 <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f94:	4855      	ldr	r0, [pc, #340]	; (80020ec <microrl_insert_char+0x3f4>)
 8001f96:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8001fa4:	e09e      	b.n	80020e4 <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff faa0 	bl	80014fc <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001fc8:	e08c      	b.n	80020e4 <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff fae6 	bl	800159c <terminal_reset_cursor>
				pThis->cursor = 0;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001fd8:	e084      	b.n	80020e4 <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	da73      	bge.n	80020d2 <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 8001fea:	2101      	movs	r1, #1
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff fa85 	bl	80014fc <terminal_move_cursor>
				pThis->cursor++;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8002000:	e067      	b.n	80020d2 <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002008:	2b00      	cmp	r3, #0
 800200a:	d064      	beq.n	80020d6 <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 800200c:	f04f 31ff 	mov.w	r1, #4294967295
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff fa73 	bl	80014fc <terminal_move_cursor>
				pThis->cursor--;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800201c:	1e5a      	subs	r2, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8002024:	e057      	b.n	80020d6 <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 8002026:	2100      	movs	r1, #0
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff fb8f 	bl	800174c <hist_search>
			break;
 800202e:	e059      	b.n	80020e4 <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 8002030:	2101      	movs	r1, #1
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff fb8a 	bl	800174c <hist_search>
			break;
 8002038:	e054      	b.n	80020e4 <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff fcb7 	bl	80019ae <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800204c:	461a      	mov	r2, r3
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff fadc 	bl	800160c <terminal_print_line>
			break;
 8002054:	e046      	b.n	80020e4 <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff f9f0 	bl	800143c <terminal_newline>
				print_prompt (pThis);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff f9ce 	bl	80013fe <print_prompt>
				terminal_reset_cursor (pThis);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff fa9a 	bl	800159c <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800206e:	461a      	mov	r2, r3
 8002070:	2100      	movs	r1, #0
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff faca 	bl	800160c <terminal_print_line>
			break;
 8002078:	e034      	b.n	80020e4 <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002080:	2b00      	cmp	r3, #0
 8002082:	d02a      	beq.n	80020da <microrl_insert_char+0x3e2>
				pThis->sigint();
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800208a:	4798      	blx	r3
			break;
 800208c:	e025      	b.n	80020da <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b20      	cmp	r3, #32
 8002092:	d104      	bne.n	800209e <microrl_insert_char+0x3a6>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	2b00      	cmp	r3, #0
 800209c:	d01f      	beq.n	80020de <microrl_insert_char+0x3e6>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b1f      	cmp	r3, #31
 80020a2:	dd1c      	ble.n	80020de <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 80020a4:	463b      	mov	r3, r7
 80020a6:	2201      	movs	r2, #1
 80020a8:	4619      	mov	r1, r3
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff fc0c 	bl	80018c8 <microrl_insert_text>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d015      	beq.n	80020e2 <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020bc:	1e59      	subs	r1, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020c4:	461a      	mov	r2, r3
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff faa0 	bl	800160c <terminal_print_line>
			break;
 80020cc:	e009      	b.n	80020e2 <microrl_insert_char+0x3ea>
					break;
 80020ce:	bf00      	nop
 80020d0:	e008      	b.n	80020e4 <microrl_insert_char+0x3ec>
			break;
 80020d2:	bf00      	nop
 80020d4:	e006      	b.n	80020e4 <microrl_insert_char+0x3ec>
			break;
 80020d6:	bf00      	nop
 80020d8:	e004      	b.n	80020e4 <microrl_insert_char+0x3ec>
			break;
 80020da:	bf00      	nop
 80020dc:	e002      	b.n	80020e4 <microrl_insert_char+0x3ec>
	}
 80020de:	bf00      	nop
 80020e0:	e000      	b.n	80020e4 <microrl_insert_char+0x3ec>
			break;
 80020e2:	bf00      	nop
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	0800ee2c 	.word	0x0800ee2c

080020f0 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <microrl_print_char+0x20>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	79fa      	ldrb	r2, [r7, #7]
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fdf8 	bl	8001cf8 <microrl_insert_char>
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000008 	.word	0x20000008

08002114 <print>:

void print (const char * str)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 800211c:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <print+0x84>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	f083 0301 	eor.w	r3, r3, #1
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <print+0x1e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b1b      	cmp	r3, #27
 8002130:	d02b      	beq.n	800218a <print+0x76>
		return;
	if (!CDC_is_ready)
 8002132:	4b1a      	ldr	r3, [pc, #104]	; (800219c <print+0x88>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	f083 0301 	eor.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d126      	bne.n	800218e <print+0x7a>
		return;
	uint16_t len = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 8002144:	89fb      	ldrh	r3, [r7, #14]
 8002146:	3301      	adds	r3, #1
 8002148:	81fb      	strh	r3, [r7, #14]
 800214a:	89fb      	ldrh	r3, [r7, #14]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	4413      	add	r3, r2
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f6      	bne.n	8002144 <print+0x30>
	uint32_t timeout = HAL_GetTick();
 8002156:	f000 ff1f 	bl	8002f98 <HAL_GetTick>
 800215a:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 800215c:	e006      	b.n	800216c <print+0x58>
		if (HAL_GetTick() - timeout >= 5)
 800215e:	f000 ff1b 	bl	8002f98 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b04      	cmp	r3, #4
 800216a:	d807      	bhi.n	800217c <print+0x68>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <print+0x8c>)
 800216e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002172:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f1      	bne.n	800215e <print+0x4a>
 800217a:	e000      	b.n	800217e <print+0x6a>
			break;
 800217c:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 800217e:	89fb      	ldrh	r3, [r7, #14]
 8002180:	4619      	mov	r1, r3
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f00c f99e 	bl	800e4c4 <CDC_Transmit_FS>
 8002188:	e002      	b.n	8002190 <print+0x7c>
		return;
 800218a:	bf00      	nop
 800218c:	e000      	b.n	8002190 <print+0x7c>
		return;
 800218e:	bf00      	nop
}
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000000c 	.word	0x2000000c
 800219c:	200001b1 	.word	0x200001b1
 80021a0:	200026f4 	.word	0x200026f4

080021a4 <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	e010      	b.n	80021d6 <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 80021b4:	490c      	ldr	r1, [pc, #48]	; (80021e8 <find_color_by_name+0x44>)
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	440b      	add	r3, r1
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	79fa      	ldrb	r2, [r7, #7]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d101      	bne.n	80021d0 <find_color_by_name+0x2c>
		{
			return i;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	e006      	b.n	80021de <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	3301      	adds	r3, #1
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b10      	cmp	r3, #16
 80021da:	d9eb      	bls.n	80021b4 <find_color_by_name+0x10>
		}
	}
	return 0;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	0800f47c 	.word	0x0800f47c

080021ec <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ffd2 	bl	80021a4 <find_color_by_name>
 8002200:	4602      	mov	r2, r0
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	4a08      	ldr	r2, [pc, #32]	; (8002230 <print_color+0x44>)
 800220e:	4413      	add	r3, r2
 8002210:	3301      	adds	r3, #1
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff7e 	bl	8002114 <print>
	print(str);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ff7b 	bl	8002114 <print>
	print(COLOR_NC);
 800221e:	4805      	ldr	r0, [pc, #20]	; (8002234 <print_color+0x48>)
 8002220:	f7ff ff78 	bl	8002114 <print>
	return 0;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	0800f47c 	.word	0x0800f47c
 8002234:	0800ee50 	.word	0x0800ee50

08002238 <str_length>:

int str_length(const char * str)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8002244:	e002      	b.n	800224c <str_length+0x14>
		i++;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3301      	adds	r3, #1
 800224a:	60fb      	str	r3, [r7, #12]
	while (str[i])
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f6      	bne.n	8002246 <str_length+0xe>
	return i;
 8002258:	68fb      	ldr	r3, [r7, #12]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <print_help>:


int print_help(int argc, const char * const * argv)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
	print(_VER);
 800226e:	4858      	ldr	r0, [pc, #352]	; (80023d0 <print_help+0x16c>)
 8002270:	f7ff ff50 	bl	8002114 <print>
	print(ENDL);
 8002274:	4857      	ldr	r0, [pc, #348]	; (80023d4 <print_help+0x170>)
 8002276:	f7ff ff4d 	bl	8002114 <print>
	print ("Use ");
 800227a:	4857      	ldr	r0, [pc, #348]	; (80023d8 <print_help+0x174>)
 800227c:	f7ff ff4a 	bl	8002114 <print>
	print_color("TAB", C_GREEN);
 8002280:	2105      	movs	r1, #5
 8002282:	4856      	ldr	r0, [pc, #344]	; (80023dc <print_help+0x178>)
 8002284:	f7ff ffb2 	bl	80021ec <print_color>
	print(" key for completion");
 8002288:	4855      	ldr	r0, [pc, #340]	; (80023e0 <print_help+0x17c>)
 800228a:	f7ff ff43 	bl	8002114 <print>
	print (ENDL);
 800228e:	4851      	ldr	r0, [pc, #324]	; (80023d4 <print_help+0x170>)
 8002290:	f7ff ff40 	bl	8002114 <print>
	print ("Available commands:");
 8002294:	4853      	ldr	r0, [pc, #332]	; (80023e4 <print_help+0x180>)
 8002296:	f7ff ff3d 	bl	8002114 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	e08a      	b.n	80023b6 <print_help+0x152>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 80022a0:	4a51      	ldr	r2, [pc, #324]	; (80023e8 <print_help+0x184>)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	019b      	lsls	r3, r3, #6
 80022a6:	4413      	add	r3, r2
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ae:	d11b      	bne.n	80022e8 <print_help+0x84>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	4a4c      	ldr	r2, [pc, #304]	; (80023e8 <print_help+0x184>)
 80022b6:	019b      	lsls	r3, r3, #6
 80022b8:	4413      	add	r3, r2
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c0:	d004      	beq.n	80022cc <print_help+0x68>
				print_color(" aka ", C_L_PURPLE);
 80022c2:	210c      	movs	r1, #12
 80022c4:	4849      	ldr	r0, [pc, #292]	; (80023ec <print_help+0x188>)
 80022c6:	f7ff ff91 	bl	80021ec <print_color>
 80022ca:	e003      	b.n	80022d4 <print_help+0x70>
			else
				print_color("/", C_L_PURPLE);
 80022cc:	210c      	movs	r1, #12
 80022ce:	4848      	ldr	r0, [pc, #288]	; (80023f0 <print_help+0x18c>)
 80022d0:	f7ff ff8c 	bl	80021ec <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	019b      	lsls	r3, r3, #6
 80022d8:	4a43      	ldr	r2, [pc, #268]	; (80023e8 <print_help+0x184>)
 80022da:	4413      	add	r3, r2
 80022dc:	3304      	adds	r3, #4
 80022de:	210b      	movs	r1, #11
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff83 	bl	80021ec <print_color>
 80022e6:	e063      	b.n	80023b0 <print_help+0x14c>
		}
		else
		{
			print(ENDL);
 80022e8:	483a      	ldr	r0, [pc, #232]	; (80023d4 <print_help+0x170>)
 80022ea:	f7ff ff13 	bl	8002114 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 80022ee:	f06f 0303 	mvn.w	r3, #3
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	e005      	b.n	8002302 <print_help+0x9e>
				print(" ");
 80022f6:	483f      	ldr	r0, [pc, #252]	; (80023f4 <print_help+0x190>)
 80022f8:	f7ff ff0c 	bl	8002114 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	3301      	adds	r3, #1
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	4a39      	ldr	r2, [pc, #228]	; (80023e8 <print_help+0x184>)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	019b      	lsls	r3, r3, #6
 8002308:	4413      	add	r3, r2
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	429a      	cmp	r2, r3
 8002310:	dbf1      	blt.n	80022f6 <print_help+0x92>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	019b      	lsls	r3, r3, #6
 8002316:	4a34      	ldr	r2, [pc, #208]	; (80023e8 <print_help+0x184>)
 8002318:	4413      	add	r3, r2
 800231a:	1d1a      	adds	r2, r3, #4
 800231c:	4932      	ldr	r1, [pc, #200]	; (80023e8 <print_help+0x184>)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	019b      	lsls	r3, r3, #6
 8002322:	440b      	add	r3, r1
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4934      	ldr	r1, [pc, #208]	; (80023f8 <print_help+0x194>)
 8002328:	5ccb      	ldrb	r3, [r1, r3]
 800232a:	4619      	mov	r1, r3
 800232c:	4610      	mov	r0, r2
 800232e:	f7ff ff5d 	bl	80021ec <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	e005      	b.n	8002344 <print_help+0xe0>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 8002338:	482e      	ldr	r0, [pc, #184]	; (80023f4 <print_help+0x190>)
 800233a:	f7ff feeb 	bl	8002114 <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3301      	adds	r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	4a28      	ldr	r2, [pc, #160]	; (80023e8 <print_help+0x184>)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	019b      	lsls	r3, r3, #6
 800234a:	4413      	add	r3, r2
 800234c:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 800234e:	f1c3 040c 	rsb	r4, r3, #12
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	019b      	lsls	r3, r3, #6
 8002356:	4a24      	ldr	r2, [pc, #144]	; (80023e8 <print_help+0x184>)
 8002358:	4413      	add	r3, r2
 800235a:	3304      	adds	r3, #4
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff6b 	bl	8002238 <str_length>
 8002362:	4603      	mov	r3, r0
 8002364:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	429a      	cmp	r2, r3
 800236a:	dbe5      	blt.n	8002338 <print_help+0xd4>
			switch (microrl_actions[i].level){
 800236c:	4a1e      	ldr	r2, [pc, #120]	; (80023e8 <print_help+0x184>)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	019b      	lsls	r3, r3, #6
 8002372:	4413      	add	r3, r2
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <print_help+0x11c>
 800237a:	2b01      	cmp	r3, #1
 800237c:	d004      	beq.n	8002388 <print_help+0x124>
 800237e:	e007      	b.n	8002390 <print_help+0x12c>
			case 0:
				print ("-");
 8002380:	481e      	ldr	r0, [pc, #120]	; (80023fc <print_help+0x198>)
 8002382:	f7ff fec7 	bl	8002114 <print>
				break;
 8002386:	e007      	b.n	8002398 <print_help+0x134>
			case 1:
				print ("^");
 8002388:	481d      	ldr	r0, [pc, #116]	; (8002400 <print_help+0x19c>)
 800238a:	f7ff fec3 	bl	8002114 <print>
				break;
 800238e:	e003      	b.n	8002398 <print_help+0x134>
			default:
				print ("#");
 8002390:	481c      	ldr	r0, [pc, #112]	; (8002404 <print_help+0x1a0>)
 8002392:	f7ff febf 	bl	8002114 <print>
				break;
 8002396:	bf00      	nop
			}
			print (" ");
 8002398:	4816      	ldr	r0, [pc, #88]	; (80023f4 <print_help+0x190>)
 800239a:	f7ff febb 	bl	8002114 <print>
			print (microrl_actions[i].help_msg);
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	019b      	lsls	r3, r3, #6
 80023a2:	3308      	adds	r3, #8
 80023a4:	4a10      	ldr	r2, [pc, #64]	; (80023e8 <print_help+0x184>)
 80023a6:	4413      	add	r3, r2
 80023a8:	3306      	adds	r3, #6
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff feb2 	bl	8002114 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	3301      	adds	r3, #1
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2b0e      	cmp	r3, #14
 80023ba:	f67f af71 	bls.w	80022a0 <print_help+0x3c>
		}
	}
	print(ENDL);
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <print_help+0x170>)
 80023c0:	f7ff fea8 	bl	8002114 <print>
	return 0;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	371c      	adds	r7, #28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd90      	pop	{r4, r7, pc}
 80023ce:	bf00      	nop
 80023d0:	0800ee58 	.word	0x0800ee58
 80023d4:	0800ee68 	.word	0x0800ee68
 80023d8:	0800ee6c 	.word	0x0800ee6c
 80023dc:	0800ee74 	.word	0x0800ee74
 80023e0:	0800ee78 	.word	0x0800ee78
 80023e4:	0800ee8c 	.word	0x0800ee8c
 80023e8:	0800f0bc 	.word	0x0800f0bc
 80023ec:	0800eea0 	.word	0x0800eea0
 80023f0:	0800eea8 	.word	0x0800eea8
 80023f4:	0800eeac 	.word	0x0800eeac
 80023f8:	0800f538 	.word	0x0800f538
 80023fc:	0800eeb0 	.word	0x0800eeb0
 8002400:	0800eeb4 	.word	0x0800eeb4
 8002404:	0800eeb8 	.word	0x0800eeb8

08002408 <execute>:



int execute (int argc, const char * const * argv)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
//	print_help(argc, argv);
//	return 0;
	int (*func)   (int argc, const char * const * argv ) = NULL;
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 800241e:	2300      	movs	r3, #0
 8002420:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	e050      	b.n	80024ca <execute+0xc2>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	e03f      	b.n	80024ae <execute+0xa6>
		{
			tokens_found = false;
 800242e:	2300      	movs	r3, #0
 8002430:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 8002432:	4a52      	ldr	r2, [pc, #328]	; (800257c <execute+0x174>)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	019b      	lsls	r3, r3, #6
 8002438:	4413      	add	r3, r2
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d001      	beq.n	800244a <execute+0x42>
				synonym_level = current_level; // save the synonym level
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d003      	beq.n	800245a <execute+0x52>
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	429a      	cmp	r2, r3
 8002458:	db2d      	blt.n	80024b6 <execute+0xae>
				break;
			if (current_level == i)
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	429a      	cmp	r2, r3
 8002460:	d101      	bne.n	8002466 <execute+0x5e>
				last_main_synonym = n;
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	4413      	add	r3, r2
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	019b      	lsls	r3, r3, #6
 8002474:	4941      	ldr	r1, [pc, #260]	; (800257c <execute+0x174>)
 8002476:	440b      	add	r3, r1
 8002478:	3304      	adds	r3, #4
 800247a:	4619      	mov	r1, r3
 800247c:	4610      	mov	r0, r2
 800247e:	f7fd fe67 	bl	8000150 <strcmp>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10f      	bne.n	80024a8 <execute+0xa0>
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	429a      	cmp	r2, r3
 800248e:	d10b      	bne.n	80024a8 <execute+0xa0>
					(i == synonym_level))
			{
				tokens_found = true;
 8002490:	2301      	movs	r3, #1
 8002492:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	623a      	str	r2, [r7, #32]
 800249a:	4a38      	ldr	r2, [pc, #224]	; (800257c <execute+0x174>)
 800249c:	019b      	lsls	r3, r3, #6
 800249e:	4413      	add	r3, r2
 80024a0:	333c      	adds	r3, #60	; 0x3c
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80024a6:	e007      	b.n	80024b8 <execute+0xb0>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	3301      	adds	r3, #1
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b0e      	cmp	r3, #14
 80024b2:	d9bc      	bls.n	800242e <execute+0x26>
 80024b4:	e000      	b.n	80024b8 <execute+0xb0>
				break;
 80024b6:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 80024b8:	7efb      	ldrb	r3, [r7, #27]
 80024ba:	f083 0301 	eor.w	r3, r3, #1
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d107      	bne.n	80024d4 <execute+0xcc>
	for (int i = 0; i < argc; i++)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3301      	adds	r3, #1
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	dbaa      	blt.n	8002428 <execute+0x20>
 80024d2:	e000      	b.n	80024d6 <execute+0xce>
			break;
 80024d4:	bf00      	nop
	}

	if (func != NULL)
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <execute+0xe0>
	{
		return func(argc, argv); // function found
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	6839      	ldr	r1, [r7, #0]
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	4798      	blx	r3
 80024e4:	4603      	mov	r3, r0
 80024e6:	e045      	b.n	8002574 <execute+0x16c>
	} else if (tokens_found)
 80024e8:	7efb      	ldrb	r3, [r7, #27]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d021      	beq.n	8002532 <execute+0x12a>
	{
		print_color ("command: '", C_L_RED);
 80024ee:	210a      	movs	r1, #10
 80024f0:	4823      	ldr	r0, [pc, #140]	; (8002580 <execute+0x178>)
 80024f2:	f7ff fe7b 	bl	80021ec <print_color>
		print_color ((char*)argv[0], C_L_RED);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	210a      	movs	r1, #10
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fe75 	bl	80021ec <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 8002502:	210a      	movs	r1, #10
 8002504:	481f      	ldr	r0, [pc, #124]	; (8002584 <execute+0x17c>)
 8002506:	f7ff fe71 	bl	80021ec <print_color>
		print(ENDL);
 800250a:	481f      	ldr	r0, [pc, #124]	; (8002588 <execute+0x180>)
 800250c:	f7ff fe02 	bl	8002114 <print>
		print_color ("use '", C_NC);
 8002510:	2100      	movs	r1, #0
 8002512:	481e      	ldr	r0, [pc, #120]	; (800258c <execute+0x184>)
 8002514:	f7ff fe6a 	bl	80021ec <print_color>
		print_color ("?", C_GREEN);
 8002518:	2105      	movs	r1, #5
 800251a:	481d      	ldr	r0, [pc, #116]	; (8002590 <execute+0x188>)
 800251c:	f7ff fe66 	bl	80021ec <print_color>
		print_color ("' for help", C_NC);
 8002520:	2100      	movs	r1, #0
 8002522:	481c      	ldr	r0, [pc, #112]	; (8002594 <execute+0x18c>)
 8002524:	f7ff fe62 	bl	80021ec <print_color>
		print (ENDL);
 8002528:	4817      	ldr	r0, [pc, #92]	; (8002588 <execute+0x180>)
 800252a:	f7ff fdf3 	bl	8002114 <print>
		return 1;
 800252e:	2301      	movs	r3, #1
 8002530:	e020      	b.n	8002574 <execute+0x16c>
	}
	else
	{
		print_color ("command: '", C_RED);
 8002532:	2109      	movs	r1, #9
 8002534:	4812      	ldr	r0, [pc, #72]	; (8002580 <execute+0x178>)
 8002536:	f7ff fe59 	bl	80021ec <print_color>
		print_color ((char*)argv[0], C_RED);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2109      	movs	r1, #9
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fe53 	bl	80021ec <print_color>
		print_color ("' not found", C_RED);
 8002546:	2109      	movs	r1, #9
 8002548:	4813      	ldr	r0, [pc, #76]	; (8002598 <execute+0x190>)
 800254a:	f7ff fe4f 	bl	80021ec <print_color>
		print(ENDL);
 800254e:	480e      	ldr	r0, [pc, #56]	; (8002588 <execute+0x180>)
 8002550:	f7ff fde0 	bl	8002114 <print>
		print_color ("use '", C_NC);
 8002554:	2100      	movs	r1, #0
 8002556:	480d      	ldr	r0, [pc, #52]	; (800258c <execute+0x184>)
 8002558:	f7ff fe48 	bl	80021ec <print_color>
		print_color ("?", C_GREEN);
 800255c:	2105      	movs	r1, #5
 800255e:	480c      	ldr	r0, [pc, #48]	; (8002590 <execute+0x188>)
 8002560:	f7ff fe44 	bl	80021ec <print_color>
		print_color ("' for help", C_NC);
 8002564:	2100      	movs	r1, #0
 8002566:	480b      	ldr	r0, [pc, #44]	; (8002594 <execute+0x18c>)
 8002568:	f7ff fe40 	bl	80021ec <print_color>
		print (ENDL);
 800256c:	4806      	ldr	r0, [pc, #24]	; (8002588 <execute+0x180>)
 800256e:	f7ff fdd1 	bl	8002114 <print>
		return 1;
 8002572:	2301      	movs	r3, #1

	}
}
 8002574:	4618      	mov	r0, r3
 8002576:	3728      	adds	r7, #40	; 0x28
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	0800f0bc 	.word	0x0800f0bc
 8002580:	0800eebc 	.word	0x0800eebc
 8002584:	0800eec8 	.word	0x0800eec8
 8002588:	0800ee68 	.word	0x0800ee68
 800258c:	0800eee8 	.word	0x0800eee8
 8002590:	0800eef0 	.word	0x0800eef0
 8002594:	0800eef4 	.word	0x0800eef4
 8002598:	0800ef00 	.word	0x0800ef00

0800259c <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08c      	sub	sp, #48	; 0x30
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
	int j = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 80025aa:	4b5b      	ldr	r3, [pc, #364]	; (8002718 <complet+0x17c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d11b      	bne.n	80025ee <complet+0x52>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 80025b6:	2300      	movs	r3, #0
 80025b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ba:	e014      	b.n	80025e6 <complet+0x4a>
			if (microrl_actions[i].level == 0)
 80025bc:	4a57      	ldr	r2, [pc, #348]	; (800271c <complet+0x180>)
 80025be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c0:	019b      	lsls	r3, r3, #6
 80025c2:	4413      	add	r3, r2
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10a      	bne.n	80025e0 <complet+0x44>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025d2:	0192      	lsls	r2, r2, #6
 80025d4:	4951      	ldr	r1, [pc, #324]	; (800271c <complet+0x180>)
 80025d6:	440a      	add	r2, r1
 80025d8:	3204      	adds	r2, #4
 80025da:	494f      	ldr	r1, [pc, #316]	; (8002718 <complet+0x17c>)
 80025dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 80025e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e2:	3301      	adds	r3, #1
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	2b0e      	cmp	r3, #14
 80025ea:	d9e7      	bls.n	80025bc <complet+0x20>
 80025ec:	e08a      	b.n	8002704 <complet+0x168>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025f4:	3b01      	subs	r3, #1
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 8002608:	2300      	movs	r3, #0
 800260a:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 800260c:	2300      	movs	r3, #0
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	e072      	b.n	80026f8 <complet+0x15c>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	e061      	b.n	80026dc <complet+0x140>
			{
				tokens_found = false;
 8002618:	2300      	movs	r3, #0
 800261a:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 800261c:	4a3f      	ldr	r2, [pc, #252]	; (800271c <complet+0x180>)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	019b      	lsls	r3, r3, #6
 8002622:	4413      	add	r3, r2
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262e:	d001      	beq.n	8002634 <complet+0x98>
					synonym_level = current_level; // save the synonym level
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263a:	d003      	beq.n	8002644 <complet+0xa8>
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	429a      	cmp	r2, r3
 8002642:	db4f      	blt.n	80026e4 <complet+0x148>
					break;
				if (current_level == i)
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	429a      	cmp	r2, r3
 800264a:	d101      	bne.n	8002650 <complet+0xb4>
					last_main_synonym = n;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	429a      	cmp	r2, r3
 8002658:	d122      	bne.n	80026a0 <complet+0x104>
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	019b      	lsls	r3, r3, #6
 800265e:	4a2f      	ldr	r2, [pc, #188]	; (800271c <complet+0x180>)
 8002660:	4413      	add	r3, r2
 8002662:	3304      	adds	r3, #4
 8002664:	6939      	ldr	r1, [r7, #16]
 8002666:	4618      	mov	r0, r3
 8002668:	f00c fb5e 	bl	800ed28 <strstr>
 800266c:	4602      	mov	r2, r0
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	019b      	lsls	r3, r3, #6
 8002672:	492a      	ldr	r1, [pc, #168]	; (800271c <complet+0x180>)
 8002674:	440b      	add	r3, r1
 8002676:	3304      	adds	r3, #4
 8002678:	429a      	cmp	r2, r3
 800267a:	d111      	bne.n	80026a0 <complet+0x104>
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	429a      	cmp	r2, r3
 8002682:	d10d      	bne.n	80026a0 <complet+0x104>
										(i == synonym_level))
				{
					tokens_found = true;
 8002684:	2301      	movs	r3, #1
 8002686:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	0192      	lsls	r2, r2, #6
 8002692:	4922      	ldr	r1, [pc, #136]	; (800271c <complet+0x180>)
 8002694:	440a      	add	r2, r1
 8002696:	3204      	adds	r2, #4
 8002698:	491f      	ldr	r1, [pc, #124]	; (8002718 <complet+0x17c>)
 800269a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800269e:	e01a      	b.n	80026d6 <complet+0x13a>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	4413      	add	r3, r2
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	019b      	lsls	r3, r3, #6
 80026ae:	491b      	ldr	r1, [pc, #108]	; (800271c <complet+0x180>)
 80026b0:	440b      	add	r3, r1
 80026b2:	3304      	adds	r3, #4
 80026b4:	4619      	mov	r1, r3
 80026b6:	4610      	mov	r0, r2
 80026b8:	f7fd fd4a 	bl	8000150 <strcmp>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <complet+0x13a>
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d105      	bne.n	80026d6 <complet+0x13a>
				{
					last_main_synonym++;
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	3301      	adds	r3, #1
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 80026d0:	2301      	movs	r3, #1
 80026d2:	77fb      	strb	r3, [r7, #31]
					break;
 80026d4:	e007      	b.n	80026e6 <complet+0x14a>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	3301      	adds	r3, #1
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b0e      	cmp	r3, #14
 80026e0:	d99a      	bls.n	8002618 <complet+0x7c>
 80026e2:	e000      	b.n	80026e6 <complet+0x14a>
					break;
 80026e4:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 80026e6:	7ffb      	ldrb	r3, [r7, #31]
 80026e8:	f083 0301 	eor.w	r3, r3, #1
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d107      	bne.n	8002702 <complet+0x166>
		for (int i = 0; i < argc; i++)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	3301      	adds	r3, #1
 80026f6:	61bb      	str	r3, [r7, #24]
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	db88      	blt.n	8002612 <complet+0x76>
 8002700:	e000      	b.n	8002704 <complet+0x168>
				break;
 8002702:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <complet+0x17c>)
 8002706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002708:	2100      	movs	r1, #0
 800270a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 800270e:	4b02      	ldr	r3, [pc, #8]	; (8002718 <complet+0x17c>)
}
 8002710:	4618      	mov	r0, r3
 8002712:	3730      	adds	r7, #48	; 0x30
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	200024ec 	.word	0x200024ec
 800271c:	0800f0bc 	.word	0x0800f0bc

08002720 <sigint>:
#endif


void sigint (void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <sigint+0x48>)
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]


	print (ENDL);
 800272c:	480f      	ldr	r0, [pc, #60]	; (800276c <sigint+0x4c>)
 800272e:	f7ff fcf1 	bl	8002114 <print>
	print ("^C catched!");
 8002732:	480f      	ldr	r0, [pc, #60]	; (8002770 <sigint+0x50>)
 8002734:	f7ff fcee 	bl	8002114 <print>
	int i = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 800273c:	e009      	b.n	8002752 <sigint+0x32>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 800273e:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <sigint+0x54>)
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	4a08      	ldr	r2, [pc, #32]	; (800276c <sigint+0x4c>)
 800274a:	5cd3      	ldrb	r3, [r2, r3]
 800274c:	4619      	mov	r1, r3
 800274e:	f7ff fad3 	bl	8001cf8 <microrl_insert_char>
	while (ENTER[i])
 8002752:	4a06      	ldr	r2, [pc, #24]	; (800276c <sigint+0x4c>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4413      	add	r3, r2
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1ef      	bne.n	800273e <sigint+0x1e>
}
 800275e:	bf00      	nop
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	200001b2 	.word	0x200001b2
 800276c:	0800ee68 	.word	0x0800ee68
 8002770:	0800ef0c 	.word	0x0800ef0c
 8002774:	20000008 	.word	0x20000008

08002778 <init_microrl>:

void init_microrl(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <init_microrl+0x38>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	490c      	ldr	r1, [pc, #48]	; (80027b4 <init_microrl+0x3c>)
 8002782:	4618      	mov	r0, r3
 8002784:	f7fe ff7a 	bl	800167c <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <init_microrl+0x38>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	490a      	ldr	r1, [pc, #40]	; (80027b8 <init_microrl+0x40>)
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe ffc0 	bl	8001714 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <init_microrl+0x38>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4908      	ldr	r1, [pc, #32]	; (80027bc <init_microrl+0x44>)
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe ffac 	bl	80016f8 <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <init_microrl+0x38>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4906      	ldr	r1, [pc, #24]	; (80027c0 <init_microrl+0x48>)
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe ffc2 	bl	8001730 <microrl_set_sigint_callback>
}
 80027ac:	bf00      	nop
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000008 	.word	0x20000008
 80027b4:	08002115 	.word	0x08002115
 80027b8:	08002409 	.word	0x08002409
 80027bc:	0800259d 	.word	0x0800259d
 80027c0:	08002721 	.word	0x08002721

080027c4 <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 80027ce:	4805      	ldr	r0, [pc, #20]	; (80027e4 <clear_screen+0x20>)
 80027d0:	f7ff fca0 	bl	8002114 <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 80027d4:	4804      	ldr	r0, [pc, #16]	; (80027e8 <clear_screen+0x24>)
 80027d6:	f7ff fc9d 	bl	8002114 <print>
	return 0;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	0800ef18 	.word	0x0800ef18
 80027e8:	0800ef20 	.word	0x0800ef20

080027ec <set_CDC_ready>:


void set_CDC_ready(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
	CDC_is_ready = true;
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <set_CDC_ready+0x14>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
}
 80027f6:	bf00      	nop
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	200001b1 	.word	0x200001b1

08002804 <color_toggle>:


int color_toggle 	(int argc, const char * const * argv)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <color_toggle+0x30>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	f083 0301 	eor.w	r3, r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf14      	ite	ne
 800281c:	2301      	movne	r3, #1
 800281e:	2300      	moveq	r3, #0
 8002820:	b2da      	uxtb	r2, r3
 8002822:	4b04      	ldr	r3, [pc, #16]	; (8002834 <color_toggle+0x30>)
 8002824:	701a      	strb	r2, [r3, #0]
	return 0;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	2000000c 	.word	0x2000000c

08002838 <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
	color_out = 1;
 8002842:	4b07      	ldr	r3, [pc, #28]	; (8002860 <color_on+0x28>)
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 8002848:	2105      	movs	r1, #5
 800284a:	4806      	ldr	r0, [pc, #24]	; (8002864 <color_on+0x2c>)
 800284c:	f7ff fcce 	bl	80021ec <print_color>
	print(ENDL);
 8002850:	4805      	ldr	r0, [pc, #20]	; (8002868 <color_on+0x30>)
 8002852:	f7ff fc5f 	bl	8002114 <print>
	return 0;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	2000000c 	.word	0x2000000c
 8002864:	0800ef24 	.word	0x0800ef24
 8002868:	0800ee68 	.word	0x0800ee68

0800286c <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
	color_out = 0;
 8002876:	4b07      	ldr	r3, [pc, #28]	; (8002894 <color_off+0x28>)
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 800287c:	4806      	ldr	r0, [pc, #24]	; (8002898 <color_off+0x2c>)
 800287e:	f7ff fc49 	bl	8002114 <print>
	print(ENDL);
 8002882:	4806      	ldr	r0, [pc, #24]	; (800289c <color_off+0x30>)
 8002884:	f7ff fc46 	bl	8002114 <print>
	return 0;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	2000000c 	.word	0x2000000c
 8002898:	0800ef38 	.word	0x0800ef38
 800289c:	0800ee68 	.word	0x0800ee68

080028a0 <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
	if (color_out)
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <color_show+0x34>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d004      	beq.n	80028bc <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 80028b2:	2105      	movs	r1, #5
 80028b4:	4808      	ldr	r0, [pc, #32]	; (80028d8 <color_show+0x38>)
 80028b6:	f7ff fc99 	bl	80021ec <print_color>
 80028ba:	e002      	b.n	80028c2 <color_show+0x22>
	else
		print ("Color output is OFF");
 80028bc:	4807      	ldr	r0, [pc, #28]	; (80028dc <color_show+0x3c>)
 80028be:	f7ff fc29 	bl	8002114 <print>
	print(ENDL);
 80028c2:	4807      	ldr	r0, [pc, #28]	; (80028e0 <color_show+0x40>)
 80028c4:	f7ff fc26 	bl	8002114 <print>
	return 0;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	2000000c 	.word	0x2000000c
 80028d8:	0800ef24 	.word	0x0800ef24
 80028dc:	0800ef38 	.word	0x0800ef38
 80028e0:	0800ee68 	.word	0x0800ee68

080028e4 <nema_toggle>:


int nema_toggle 	(int argc, const char * const * argv)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
	nema_out ^= 1;
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <nema_toggle+0x30>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	f083 0301 	eor.w	r3, r3, #1
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf14      	ite	ne
 80028fc:	2301      	movne	r3, #1
 80028fe:	2300      	moveq	r3, #0
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4b04      	ldr	r3, [pc, #16]	; (8002914 <nema_toggle+0x30>)
 8002904:	701a      	strb	r2, [r3, #0]
	return 0;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	200001b2 	.word	0x200001b2

08002918 <nema_on>:

int nema_on 		(int argc, const char * const * argv)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
	nema_out = 1;
 8002922:	4b07      	ldr	r3, [pc, #28]	; (8002940 <nema_on+0x28>)
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
	print_color ("NEMA output is ON", C_GREEN);
 8002928:	2105      	movs	r1, #5
 800292a:	4806      	ldr	r0, [pc, #24]	; (8002944 <nema_on+0x2c>)
 800292c:	f7ff fc5e 	bl	80021ec <print_color>
	print(ENDL);
 8002930:	4805      	ldr	r0, [pc, #20]	; (8002948 <nema_on+0x30>)
 8002932:	f7ff fbef 	bl	8002114 <print>
	return 0;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	200001b2 	.word	0x200001b2
 8002944:	0800ef4c 	.word	0x0800ef4c
 8002948:	0800ee68 	.word	0x0800ee68

0800294c <nema_off>:

int nema_off 		(int argc, const char * const * argv)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
	nema_out = 0;
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <nema_off+0x28>)
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
	print ("NEM output is OFF");
 800295c:	4806      	ldr	r0, [pc, #24]	; (8002978 <nema_off+0x2c>)
 800295e:	f7ff fbd9 	bl	8002114 <print>
	print(ENDL);
 8002962:	4806      	ldr	r0, [pc, #24]	; (800297c <nema_off+0x30>)
 8002964:	f7ff fbd6 	bl	8002114 <print>
	return 0;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	200001b2 	.word	0x200001b2
 8002978:	0800ef60 	.word	0x0800ef60
 800297c:	0800ee68 	.word	0x0800ee68

08002980 <vfd>:

int vfd (int argc, const char * const * argv)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
	for (int i = 1; i < argc; i++)
 800298a:	2301      	movs	r3, #1
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	e028      	b.n	80029e2 <vfd+0x62>
	{
		uint16_t temp = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	81fb      	strh	r3, [r7, #14]
		char * pchar = (char*)argv[i];
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	4413      	add	r3, r2
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	613b      	str	r3, [r7, #16]
		xQueueSendToBack(qVFDHandle, &temp, 100);
 80029a0:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <vfd+0x74>)
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	f107 010e 	add.w	r1, r7, #14
 80029a8:	2300      	movs	r3, #0
 80029aa:	2264      	movs	r2, #100	; 0x64
 80029ac:	f009 f960 	bl	800bc70 <xQueueGenericSend>
		while (*pchar)
 80029b0:	e010      	b.n	80029d4 <vfd+0x54>
		{
			temp = get_char(*(pchar++));
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	613a      	str	r2, [r7, #16]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 fa32 	bl	8002e24 <get_char>
 80029c0:	4603      	mov	r3, r0
 80029c2:	81fb      	strh	r3, [r7, #14]
			xQueueSendToBack(qVFDHandle, &temp, 100);
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <vfd+0x74>)
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	f107 010e 	add.w	r1, r7, #14
 80029cc:	2300      	movs	r3, #0
 80029ce:	2264      	movs	r2, #100	; 0x64
 80029d0:	f009 f94e 	bl	800bc70 <xQueueGenericSend>
		while (*pchar)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1ea      	bne.n	80029b2 <vfd+0x32>
	for (int i = 1; i < argc; i++)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	3301      	adds	r3, #1
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	dbd2      	blt.n	8002990 <vfd+0x10>
		}
	}
	return 0;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	2000248c 	.word	0x2000248c

080029f8 <show_encoder>:


int show_encoder (int argc, const char * const * argv)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]

	uint32_t buf = encoder_value;
 8002a02:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <show_encoder+0x78>)
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	617b      	str	r3, [r7, #20]
	char str [8];

	for (int i = 0; i < 5; i++)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	e01d      	b.n	8002a4a <show_encoder+0x52>
	{
		str[4 - i] = buf % 10 + '0';
 8002a0e:	6979      	ldr	r1, [r7, #20]
 8002a10:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <show_encoder+0x7c>)
 8002a12:	fba3 2301 	umull	r2, r3, r3, r1
 8002a16:	08da      	lsrs	r2, r3, #3
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	1aca      	subs	r2, r1, r3
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f1c3 0304 	rsb	r3, r3, #4
 8002a2a:	3230      	adds	r2, #48	; 0x30
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	f107 0118 	add.w	r1, r7, #24
 8002a32:	440b      	add	r3, r1
 8002a34:	f803 2c10 	strb.w	r2, [r3, #-16]
		buf /= 10;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <show_encoder+0x7c>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	08db      	lsrs	r3, r3, #3
 8002a42:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 5; i++)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	3301      	adds	r3, #1
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	ddde      	ble.n	8002a0e <show_encoder+0x16>
	}
	str[5] = '\r';
 8002a50:	230d      	movs	r3, #13
 8002a52:	737b      	strb	r3, [r7, #13]
	str[6] = '\n';
 8002a54:	230a      	movs	r3, #10
 8002a56:	73bb      	strb	r3, [r7, #14]
	str[7] = '\0';
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73fb      	strb	r3, [r7, #15]
	print(str);
 8002a5c:	f107 0308 	add.w	r3, r7, #8
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fb57 	bl	8002114 <print>
	return 0;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	200001ac 	.word	0x200001ac
 8002a74:	cccccccd 	.word	0xcccccccd

08002a78 <get_nema>:


bool get_nema(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
	return nema_out;
 8002a7c:	4b02      	ldr	r3, [pc, #8]	; (8002a88 <get_nema+0x10>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	200001b2 	.word	0x200001b2

08002a8c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002a90:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <MX_SPI2_Init+0x64>)
 8002a92:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <MX_SPI2_Init+0x68>)
 8002a94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a96:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <MX_SPI2_Init+0x64>)
 8002a98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a9e:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <MX_SPI2_Init+0x64>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <MX_SPI2_Init+0x64>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002aaa:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <MX_SPI2_Init+0x64>)
 8002aac:	2202      	movs	r2, #2
 8002aae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <MX_SPI2_Init+0x64>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <MX_SPI2_Init+0x64>)
 8002ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002abc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002abe:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <MX_SPI2_Init+0x64>)
 8002ac0:	2218      	movs	r2, #24
 8002ac2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <MX_SPI2_Init+0x64>)
 8002ac6:	2280      	movs	r2, #128	; 0x80
 8002ac8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <MX_SPI2_Init+0x64>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <MX_SPI2_Init+0x64>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <MX_SPI2_Init+0x64>)
 8002ad8:	220a      	movs	r2, #10
 8002ada:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002adc:	4804      	ldr	r0, [pc, #16]	; (8002af0 <MX_SPI2_Init+0x64>)
 8002ade:	f003 fdd9 	bl	8006694 <HAL_SPI_Init>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002ae8:	f7fe fa78 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	200025cc 	.word	0x200025cc
 8002af4:	40003800 	.word	0x40003800

08002af8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 0310 	add.w	r3, r7, #16
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1c      	ldr	r2, [pc, #112]	; (8002b84 <HAL_SPI_MspInit+0x8c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d131      	bne.n	8002b7c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b18:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <HAL_SPI_MspInit+0x90>)
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	4a1a      	ldr	r2, [pc, #104]	; (8002b88 <HAL_SPI_MspInit+0x90>)
 8002b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b22:	61d3      	str	r3, [r2, #28]
 8002b24:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <HAL_SPI_MspInit+0x90>)
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b30:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <HAL_SPI_MspInit+0x90>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <HAL_SPI_MspInit+0x90>)
 8002b36:	f043 0308 	orr.w	r3, r3, #8
 8002b3a:	6193      	str	r3, [r2, #24]
 8002b3c:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_SPI_MspInit+0x90>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002b48:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002b4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b52:	2303      	movs	r3, #3
 8002b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b56:	f107 0310 	add.w	r3, r7, #16
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	480b      	ldr	r0, [pc, #44]	; (8002b8c <HAL_SPI_MspInit+0x94>)
 8002b5e:	f000 fbb5 	bl	80032cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002b62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b70:	f107 0310 	add.w	r3, r7, #16
 8002b74:	4619      	mov	r1, r3
 8002b76:	4805      	ldr	r0, [pc, #20]	; (8002b8c <HAL_SPI_MspInit+0x94>)
 8002b78:	f000 fba8 	bl	80032cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	3720      	adds	r7, #32
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40003800 	.word	0x40003800
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40010c00 	.word	0x40010c00

08002b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b96:	4b18      	ldr	r3, [pc, #96]	; (8002bf8 <HAL_MspInit+0x68>)
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	4a17      	ldr	r2, [pc, #92]	; (8002bf8 <HAL_MspInit+0x68>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6193      	str	r3, [r2, #24]
 8002ba2:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <HAL_MspInit+0x68>)
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <HAL_MspInit+0x68>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	4a11      	ldr	r2, [pc, #68]	; (8002bf8 <HAL_MspInit+0x68>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	61d3      	str	r3, [r2, #28]
 8002bba:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <HAL_MspInit+0x68>)
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	607b      	str	r3, [r7, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	210f      	movs	r1, #15
 8002bca:	f06f 0001 	mvn.w	r0, #1
 8002bce:	f000 faa2 	bl	8003116 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <HAL_MspInit+0x6c>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <HAL_MspInit+0x6c>)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40010000 	.word	0x40010000

08002c00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08c      	sub	sp, #48	; 0x30
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002c10:	2200      	movs	r2, #0
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	2019      	movs	r0, #25
 8002c16:	f000 fa7e 	bl	8003116 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002c1a:	2019      	movs	r0, #25
 8002c1c:	f000 fa97 	bl	800314e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c20:	4b1e      	ldr	r3, [pc, #120]	; (8002c9c <HAL_InitTick+0x9c>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	4a1d      	ldr	r2, [pc, #116]	; (8002c9c <HAL_InitTick+0x9c>)
 8002c26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c2a:	6193      	str	r3, [r2, #24]
 8002c2c:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <HAL_InitTick+0x9c>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c38:	f107 0210 	add.w	r2, r7, #16
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	4611      	mov	r1, r2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 fc22 	bl	800648c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002c48:	f003 fc0c 	bl	8006464 <HAL_RCC_GetPCLK2Freq>
 8002c4c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c50:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <HAL_InitTick+0xa0>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	0c9b      	lsrs	r3, r3, #18
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_InitTick+0xa4>)
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <HAL_InitTick+0xa8>)
 8002c60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <HAL_InitTick+0xa4>)
 8002c64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c68:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002c6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ca4 <HAL_InitTick+0xa4>)
 8002c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <HAL_InitTick+0xa4>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_InitTick+0xa4>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002c7c:	4809      	ldr	r0, [pc, #36]	; (8002ca4 <HAL_InitTick+0xa4>)
 8002c7e:	f003 ff6f 	bl	8006b60 <HAL_TIM_Base_Init>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d104      	bne.n	8002c92 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002c88:	4806      	ldr	r0, [pc, #24]	; (8002ca4 <HAL_InitTick+0xa4>)
 8002c8a:	f003 ffc1 	bl	8006c10 <HAL_TIM_Base_Start_IT>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	e000      	b.n	8002c94 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3730      	adds	r7, #48	; 0x30
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	431bde83 	.word	0x431bde83
 8002ca4:	20002624 	.word	0x20002624
 8002ca8:	40012c00 	.word	0x40012c00

08002cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cb0:	e7fe      	b.n	8002cb0 <NMI_Handler+0x4>

08002cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cb6:	e7fe      	b.n	8002cb6 <HardFault_Handler+0x4>

08002cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cbc:	e7fe      	b.n	8002cbc <MemManage_Handler+0x4>

08002cbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cc2:	e7fe      	b.n	8002cc2 <BusFault_Handler+0x4>

08002cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cc8:	e7fe      	b.n	8002cc8 <UsageFault_Handler+0x4>

08002cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002cda:	2001      	movs	r0, #1
 8002cdc:	f000 fcc2 	bl	8003664 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002ce8:	4802      	ldr	r0, [pc, #8]	; (8002cf4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002cea:	f001 fc3d 	bl	8004568 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20003388 	.word	0x20003388

08002cf8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cfc:	4802      	ldr	r0, [pc, #8]	; (8002d08 <TIM1_UP_IRQHandler+0x10>)
 8002cfe:	f003 ffd9 	bl	8006cb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20002624 	.word	0x20002624

08002d0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d10:	4802      	ldr	r0, [pc, #8]	; (8002d1c <USART2_IRQHandler+0x10>)
 8002d12:	f004 f9ed 	bl	80070f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	2000266c 	.word	0x2000266c

08002d20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <MX_USART2_UART_Init+0x4c>)
 8002d32:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <MX_USART2_UART_Init+0x50>)
 8002d34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <MX_USART2_UART_Init+0x4c>)
 8002d38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <MX_USART2_UART_Init+0x4c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <MX_USART2_UART_Init+0x4c>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <MX_USART2_UART_Init+0x4c>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <MX_USART2_UART_Init+0x4c>)
 8002d52:	220c      	movs	r2, #12
 8002d54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <MX_USART2_UART_Init+0x4c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <MX_USART2_UART_Init+0x4c>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d62:	4805      	ldr	r0, [pc, #20]	; (8002d78 <MX_USART2_UART_Init+0x4c>)
 8002d64:	f004 f946 	bl	8006ff4 <HAL_UART_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d6e:	f7fe f935 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	2000266c 	.word	0x2000266c
 8002d7c:	40004400 	.word	0x40004400

08002d80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d88:	f107 0310 	add.w	r3, r7, #16
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1f      	ldr	r2, [pc, #124]	; (8002e18 <HAL_UART_MspInit+0x98>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d137      	bne.n	8002e10 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002da0:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <HAL_UART_MspInit+0x9c>)
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	4a1d      	ldr	r2, [pc, #116]	; (8002e1c <HAL_UART_MspInit+0x9c>)
 8002da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002daa:	61d3      	str	r3, [r2, #28]
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <HAL_UART_MspInit+0x9c>)
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db8:	4b18      	ldr	r3, [pc, #96]	; (8002e1c <HAL_UART_MspInit+0x9c>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	4a17      	ldr	r2, [pc, #92]	; (8002e1c <HAL_UART_MspInit+0x9c>)
 8002dbe:	f043 0304 	orr.w	r3, r3, #4
 8002dc2:	6193      	str	r3, [r2, #24]
 8002dc4:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <HAL_UART_MspInit+0x9c>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dd0:	2304      	movs	r3, #4
 8002dd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ddc:	f107 0310 	add.w	r3, r7, #16
 8002de0:	4619      	mov	r1, r3
 8002de2:	480f      	ldr	r0, [pc, #60]	; (8002e20 <HAL_UART_MspInit+0xa0>)
 8002de4:	f000 fa72 	bl	80032cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002de8:	2308      	movs	r3, #8
 8002dea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df4:	f107 0310 	add.w	r3, r7, #16
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4809      	ldr	r0, [pc, #36]	; (8002e20 <HAL_UART_MspInit+0xa0>)
 8002dfc:	f000 fa66 	bl	80032cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002e00:	2200      	movs	r2, #0
 8002e02:	2105      	movs	r1, #5
 8002e04:	2026      	movs	r0, #38	; 0x26
 8002e06:	f000 f986 	bl	8003116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e0a:	2026      	movs	r0, #38	; 0x26
 8002e0c:	f000 f99f 	bl	800314e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002e10:	bf00      	nop
 8002e12:	3720      	adds	r7, #32
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40004400 	.word	0x40004400
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40010800 	.word	0x40010800

08002e24 <get_char>:
const uint8_t ALPHAS = (sizeof(vfd_alpha)/sizeof(vfd_alpha[0]));
const uint8_t ALPHAR = (sizeof(vfd_alpha_ru)/sizeof(vfd_alpha_ru[0]));
const uint8_t SPECIAL = (sizeof(vfd_special)/sizeof(vfd_special[0]));

uint16_t get_char(char input)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
	if ('0' <= input && input <= '9')
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	2b2f      	cmp	r3, #47	; 0x2f
 8002e32:	d908      	bls.n	8002e46 <get_char+0x22>
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	2b39      	cmp	r3, #57	; 0x39
 8002e38:	d805      	bhi.n	8002e46 <get_char+0x22>
		return vfd_digits[input - '0'];
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	3b30      	subs	r3, #48	; 0x30
 8002e3e:	4a2a      	ldr	r2, [pc, #168]	; (8002ee8 <get_char+0xc4>)
 8002e40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e44:	e04a      	b.n	8002edc <get_char+0xb8>
	if (0 <= input && input <= 9)
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	2b09      	cmp	r3, #9
 8002e4a:	d804      	bhi.n	8002e56 <get_char+0x32>
		return vfd_digits[(uint8_t)input];
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	4a26      	ldr	r2, [pc, #152]	; (8002ee8 <get_char+0xc4>)
 8002e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e54:	e042      	b.n	8002edc <get_char+0xb8>
	if ('a' <= input && input <= 'z')
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	2b60      	cmp	r3, #96	; 0x60
 8002e5a:	d908      	bls.n	8002e6e <get_char+0x4a>
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	2b7a      	cmp	r3, #122	; 0x7a
 8002e60:	d805      	bhi.n	8002e6e <get_char+0x4a>
		return vfd_alpha[input - 'a'];
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	3b61      	subs	r3, #97	; 0x61
 8002e66:	4a21      	ldr	r2, [pc, #132]	; (8002eec <get_char+0xc8>)
 8002e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e6c:	e036      	b.n	8002edc <get_char+0xb8>
	if ('A' <= input && input <= 'Z')
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	2b40      	cmp	r3, #64	; 0x40
 8002e72:	d908      	bls.n	8002e86 <get_char+0x62>
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	2b5a      	cmp	r3, #90	; 0x5a
 8002e78:	d805      	bhi.n	8002e86 <get_char+0x62>
		return vfd_alpha[input - 'A'];
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	3b41      	subs	r3, #65	; 0x41
 8002e7e:	4a1b      	ldr	r2, [pc, #108]	; (8002eec <get_char+0xc8>)
 8002e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e84:	e02a      	b.n	8002edc <get_char+0xb8>
	if (192 <= input && input <= 223)
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	2bbf      	cmp	r3, #191	; 0xbf
 8002e8a:	d908      	bls.n	8002e9e <get_char+0x7a>
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	2bdf      	cmp	r3, #223	; 0xdf
 8002e90:	d805      	bhi.n	8002e9e <get_char+0x7a>
		return vfd_alpha_ru[input - 192];
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	3bc0      	subs	r3, #192	; 0xc0
 8002e96:	4a16      	ldr	r2, [pc, #88]	; (8002ef0 <get_char+0xcc>)
 8002e98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e9c:	e01e      	b.n	8002edc <get_char+0xb8>
	if (224 <= input && input <= 255)
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	2bdf      	cmp	r3, #223	; 0xdf
 8002ea2:	d905      	bls.n	8002eb0 <get_char+0x8c>
		return vfd_alpha_ru[input - 224];
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	3be0      	subs	r3, #224	; 0xe0
 8002ea8:	4a11      	ldr	r2, [pc, #68]	; (8002ef0 <get_char+0xcc>)
 8002eaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002eae:	e015      	b.n	8002edc <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	e00e      	b.n	8002ed4 <get_char+0xb0>
		if (vfd_special_char[i] == input)
 8002eb6:	4a0f      	ldr	r2, [pc, #60]	; (8002ef4 <get_char+0xd0>)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4413      	add	r3, r2
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	79fa      	ldrb	r2, [r7, #7]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d104      	bne.n	8002ece <get_char+0xaa>
			return vfd_special[i];
 8002ec4:	4a0c      	ldr	r2, [pc, #48]	; (8002ef8 <get_char+0xd4>)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ecc:	e006      	b.n	8002edc <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b10      	cmp	r3, #16
 8002ed8:	d9ed      	bls.n	8002eb6 <get_char+0x92>
	return 0;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	0800f554 	.word	0x0800f554
 8002eec:	0800f568 	.word	0x0800f568
 8002ef0:	0800f59c 	.word	0x0800f59c
 8002ef4:	0800f600 	.word	0x0800f600
 8002ef8:	0800f5dc 	.word	0x0800f5dc

08002efc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002efc:	480c      	ldr	r0, [pc, #48]	; (8002f30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002efe:	490d      	ldr	r1, [pc, #52]	; (8002f34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f00:	4a0d      	ldr	r2, [pc, #52]	; (8002f38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f04:	e002      	b.n	8002f0c <LoopCopyDataInit>

08002f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f0a:	3304      	adds	r3, #4

08002f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f10:	d3f9      	bcc.n	8002f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f12:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f14:	4c0a      	ldr	r4, [pc, #40]	; (8002f40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f18:	e001      	b.n	8002f1e <LoopFillZerobss>

08002f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f1c:	3204      	adds	r2, #4

08002f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f20:	d3fb      	bcc.n	8002f1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f22:	f7ff fefd 	bl	8002d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f26:	f00b feab 	bl	800ec80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f2a:	f7fd ffd5 	bl	8000ed8 <main>
  bx lr
 8002f2e:	4770      	bx	lr
  ldr r0, =_sdata
 8002f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f34:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8002f38:	0800f61c 	.word	0x0800f61c
  ldr r2, =_sbss
 8002f3c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8002f40:	20003674 	.word	0x20003674

08002f44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f44:	e7fe      	b.n	8002f44 <ADC1_2_IRQHandler>
	...

08002f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <HAL_Init+0x28>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a07      	ldr	r2, [pc, #28]	; (8002f70 <HAL_Init+0x28>)
 8002f52:	f043 0310 	orr.w	r3, r3, #16
 8002f56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f58:	2003      	movs	r0, #3
 8002f5a:	f000 f8d1 	bl	8003100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f7ff fe4e 	bl	8002c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f64:	f7ff fe14 	bl	8002b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40022000 	.word	0x40022000

08002f74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <HAL_IncTick+0x1c>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_IncTick+0x20>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4413      	add	r3, r2
 8002f84:	4a03      	ldr	r2, [pc, #12]	; (8002f94 <HAL_IncTick+0x20>)
 8002f86:	6013      	str	r3, [r2, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	20000018 	.word	0x20000018
 8002f94:	200026b0 	.word	0x200026b0

08002f98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f9c:	4b02      	ldr	r3, [pc, #8]	; (8002fa8 <HAL_GetTick+0x10>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	200026b0 	.word	0x200026b0

08002fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fde:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	60d3      	str	r3, [r2, #12]
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <__NVIC_GetPriorityGrouping+0x18>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	0a1b      	lsrs	r3, r3, #8
 8002ffe:	f003 0307 	and.w	r3, r3, #7
}
 8003002:	4618      	mov	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	2b00      	cmp	r3, #0
 8003020:	db0b      	blt.n	800303a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	f003 021f 	and.w	r2, r3, #31
 8003028:	4906      	ldr	r1, [pc, #24]	; (8003044 <__NVIC_EnableIRQ+0x34>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	2001      	movs	r0, #1
 8003032:	fa00 f202 	lsl.w	r2, r0, r2
 8003036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	e000e100 	.word	0xe000e100

08003048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	6039      	str	r1, [r7, #0]
 8003052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003058:	2b00      	cmp	r3, #0
 800305a:	db0a      	blt.n	8003072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	b2da      	uxtb	r2, r3
 8003060:	490c      	ldr	r1, [pc, #48]	; (8003094 <__NVIC_SetPriority+0x4c>)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	0112      	lsls	r2, r2, #4
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	440b      	add	r3, r1
 800306c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003070:	e00a      	b.n	8003088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	4908      	ldr	r1, [pc, #32]	; (8003098 <__NVIC_SetPriority+0x50>)
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	3b04      	subs	r3, #4
 8003080:	0112      	lsls	r2, r2, #4
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	440b      	add	r3, r1
 8003086:	761a      	strb	r2, [r3, #24]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	e000e100 	.word	0xe000e100
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f1c3 0307 	rsb	r3, r3, #7
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	bf28      	it	cs
 80030ba:	2304      	movcs	r3, #4
 80030bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3304      	adds	r3, #4
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d902      	bls.n	80030cc <NVIC_EncodePriority+0x30>
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3b03      	subs	r3, #3
 80030ca:	e000      	b.n	80030ce <NVIC_EncodePriority+0x32>
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	f04f 32ff 	mov.w	r2, #4294967295
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	401a      	ands	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e4:	f04f 31ff 	mov.w	r1, #4294967295
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fa01 f303 	lsl.w	r3, r1, r3
 80030ee:	43d9      	mvns	r1, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f4:	4313      	orrs	r3, r2
         );
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3724      	adds	r7, #36	; 0x24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr

08003100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff ff4f 	bl	8002fac <__NVIC_SetPriorityGrouping>
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003116:	b580      	push	{r7, lr}
 8003118:	b086      	sub	sp, #24
 800311a:	af00      	add	r7, sp, #0
 800311c:	4603      	mov	r3, r0
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
 8003122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003128:	f7ff ff64 	bl	8002ff4 <__NVIC_GetPriorityGrouping>
 800312c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	6978      	ldr	r0, [r7, #20]
 8003134:	f7ff ffb2 	bl	800309c <NVIC_EncodePriority>
 8003138:	4602      	mov	r2, r0
 800313a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800313e:	4611      	mov	r1, r2
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff81 	bl	8003048 <__NVIC_SetPriority>
}
 8003146:	bf00      	nop
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	4603      	mov	r3, r0
 8003156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff ff57 	bl	8003010 <__NVIC_EnableIRQ>
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800316a:	b480      	push	{r7}
 800316c:	b085      	sub	sp, #20
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800317c:	2b02      	cmp	r3, #2
 800317e:	d008      	beq.n	8003192 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2204      	movs	r2, #4
 8003184:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e020      	b.n	80031d4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 020e 	bic.w	r2, r2, #14
 80031a0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0201 	bic.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	2101      	movs	r1, #1
 80031bc:	fa01 f202 	lsl.w	r2, r1, r2
 80031c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr
	...

080031e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d005      	beq.n	8003202 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2204      	movs	r2, #4
 80031fa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
 8003200:	e051      	b.n	80032a6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 020e 	bic.w	r2, r2, #14
 8003210:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a22      	ldr	r2, [pc, #136]	; (80032b0 <HAL_DMA_Abort_IT+0xd0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d029      	beq.n	8003280 <HAL_DMA_Abort_IT+0xa0>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a20      	ldr	r2, [pc, #128]	; (80032b4 <HAL_DMA_Abort_IT+0xd4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d022      	beq.n	800327c <HAL_DMA_Abort_IT+0x9c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1f      	ldr	r2, [pc, #124]	; (80032b8 <HAL_DMA_Abort_IT+0xd8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d01a      	beq.n	8003276 <HAL_DMA_Abort_IT+0x96>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1d      	ldr	r2, [pc, #116]	; (80032bc <HAL_DMA_Abort_IT+0xdc>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d012      	beq.n	8003270 <HAL_DMA_Abort_IT+0x90>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1c      	ldr	r2, [pc, #112]	; (80032c0 <HAL_DMA_Abort_IT+0xe0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00a      	beq.n	800326a <HAL_DMA_Abort_IT+0x8a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1a      	ldr	r2, [pc, #104]	; (80032c4 <HAL_DMA_Abort_IT+0xe4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d102      	bne.n	8003264 <HAL_DMA_Abort_IT+0x84>
 800325e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003262:	e00e      	b.n	8003282 <HAL_DMA_Abort_IT+0xa2>
 8003264:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003268:	e00b      	b.n	8003282 <HAL_DMA_Abort_IT+0xa2>
 800326a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800326e:	e008      	b.n	8003282 <HAL_DMA_Abort_IT+0xa2>
 8003270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003274:	e005      	b.n	8003282 <HAL_DMA_Abort_IT+0xa2>
 8003276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800327a:	e002      	b.n	8003282 <HAL_DMA_Abort_IT+0xa2>
 800327c:	2310      	movs	r3, #16
 800327e:	e000      	b.n	8003282 <HAL_DMA_Abort_IT+0xa2>
 8003280:	2301      	movs	r3, #1
 8003282:	4a11      	ldr	r2, [pc, #68]	; (80032c8 <HAL_DMA_Abort_IT+0xe8>)
 8003284:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	4798      	blx	r3
    } 
  }
  return status;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40020008 	.word	0x40020008
 80032b4:	4002001c 	.word	0x4002001c
 80032b8:	40020030 	.word	0x40020030
 80032bc:	40020044 	.word	0x40020044
 80032c0:	40020058 	.word	0x40020058
 80032c4:	4002006c 	.word	0x4002006c
 80032c8:	40020000 	.word	0x40020000

080032cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b08b      	sub	sp, #44	; 0x2c
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032d6:	2300      	movs	r3, #0
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80032da:	2300      	movs	r3, #0
 80032dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032de:	e169      	b.n	80035b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80032e0:	2201      	movs	r2, #1
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	f040 8158 	bne.w	80035ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4a9a      	ldr	r2, [pc, #616]	; (800356c <HAL_GPIO_Init+0x2a0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d05e      	beq.n	80033c6 <HAL_GPIO_Init+0xfa>
 8003308:	4a98      	ldr	r2, [pc, #608]	; (800356c <HAL_GPIO_Init+0x2a0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d875      	bhi.n	80033fa <HAL_GPIO_Init+0x12e>
 800330e:	4a98      	ldr	r2, [pc, #608]	; (8003570 <HAL_GPIO_Init+0x2a4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d058      	beq.n	80033c6 <HAL_GPIO_Init+0xfa>
 8003314:	4a96      	ldr	r2, [pc, #600]	; (8003570 <HAL_GPIO_Init+0x2a4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d86f      	bhi.n	80033fa <HAL_GPIO_Init+0x12e>
 800331a:	4a96      	ldr	r2, [pc, #600]	; (8003574 <HAL_GPIO_Init+0x2a8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d052      	beq.n	80033c6 <HAL_GPIO_Init+0xfa>
 8003320:	4a94      	ldr	r2, [pc, #592]	; (8003574 <HAL_GPIO_Init+0x2a8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d869      	bhi.n	80033fa <HAL_GPIO_Init+0x12e>
 8003326:	4a94      	ldr	r2, [pc, #592]	; (8003578 <HAL_GPIO_Init+0x2ac>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d04c      	beq.n	80033c6 <HAL_GPIO_Init+0xfa>
 800332c:	4a92      	ldr	r2, [pc, #584]	; (8003578 <HAL_GPIO_Init+0x2ac>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d863      	bhi.n	80033fa <HAL_GPIO_Init+0x12e>
 8003332:	4a92      	ldr	r2, [pc, #584]	; (800357c <HAL_GPIO_Init+0x2b0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d046      	beq.n	80033c6 <HAL_GPIO_Init+0xfa>
 8003338:	4a90      	ldr	r2, [pc, #576]	; (800357c <HAL_GPIO_Init+0x2b0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d85d      	bhi.n	80033fa <HAL_GPIO_Init+0x12e>
 800333e:	2b12      	cmp	r3, #18
 8003340:	d82a      	bhi.n	8003398 <HAL_GPIO_Init+0xcc>
 8003342:	2b12      	cmp	r3, #18
 8003344:	d859      	bhi.n	80033fa <HAL_GPIO_Init+0x12e>
 8003346:	a201      	add	r2, pc, #4	; (adr r2, 800334c <HAL_GPIO_Init+0x80>)
 8003348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334c:	080033c7 	.word	0x080033c7
 8003350:	080033a1 	.word	0x080033a1
 8003354:	080033b3 	.word	0x080033b3
 8003358:	080033f5 	.word	0x080033f5
 800335c:	080033fb 	.word	0x080033fb
 8003360:	080033fb 	.word	0x080033fb
 8003364:	080033fb 	.word	0x080033fb
 8003368:	080033fb 	.word	0x080033fb
 800336c:	080033fb 	.word	0x080033fb
 8003370:	080033fb 	.word	0x080033fb
 8003374:	080033fb 	.word	0x080033fb
 8003378:	080033fb 	.word	0x080033fb
 800337c:	080033fb 	.word	0x080033fb
 8003380:	080033fb 	.word	0x080033fb
 8003384:	080033fb 	.word	0x080033fb
 8003388:	080033fb 	.word	0x080033fb
 800338c:	080033fb 	.word	0x080033fb
 8003390:	080033a9 	.word	0x080033a9
 8003394:	080033bd 	.word	0x080033bd
 8003398:	4a79      	ldr	r2, [pc, #484]	; (8003580 <HAL_GPIO_Init+0x2b4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d013      	beq.n	80033c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800339e:	e02c      	b.n	80033fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	623b      	str	r3, [r7, #32]
          break;
 80033a6:	e029      	b.n	80033fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	3304      	adds	r3, #4
 80033ae:	623b      	str	r3, [r7, #32]
          break;
 80033b0:	e024      	b.n	80033fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	3308      	adds	r3, #8
 80033b8:	623b      	str	r3, [r7, #32]
          break;
 80033ba:	e01f      	b.n	80033fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	330c      	adds	r3, #12
 80033c2:	623b      	str	r3, [r7, #32]
          break;
 80033c4:	e01a      	b.n	80033fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d102      	bne.n	80033d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033ce:	2304      	movs	r3, #4
 80033d0:	623b      	str	r3, [r7, #32]
          break;
 80033d2:	e013      	b.n	80033fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d105      	bne.n	80033e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033dc:	2308      	movs	r3, #8
 80033de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	611a      	str	r2, [r3, #16]
          break;
 80033e6:	e009      	b.n	80033fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033e8:	2308      	movs	r3, #8
 80033ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	615a      	str	r2, [r3, #20]
          break;
 80033f2:	e003      	b.n	80033fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033f4:	2300      	movs	r3, #0
 80033f6:	623b      	str	r3, [r7, #32]
          break;
 80033f8:	e000      	b.n	80033fc <HAL_GPIO_Init+0x130>
          break;
 80033fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	2bff      	cmp	r3, #255	; 0xff
 8003400:	d801      	bhi.n	8003406 <HAL_GPIO_Init+0x13a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	e001      	b.n	800340a <HAL_GPIO_Init+0x13e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3304      	adds	r3, #4
 800340a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2bff      	cmp	r3, #255	; 0xff
 8003410:	d802      	bhi.n	8003418 <HAL_GPIO_Init+0x14c>
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	e002      	b.n	800341e <HAL_GPIO_Init+0x152>
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	3b08      	subs	r3, #8
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	210f      	movs	r1, #15
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	fa01 f303 	lsl.w	r3, r1, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	401a      	ands	r2, r3
 8003430:	6a39      	ldr	r1, [r7, #32]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	fa01 f303 	lsl.w	r3, r1, r3
 8003438:	431a      	orrs	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80b1 	beq.w	80035ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800344c:	4b4d      	ldr	r3, [pc, #308]	; (8003584 <HAL_GPIO_Init+0x2b8>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	4a4c      	ldr	r2, [pc, #304]	; (8003584 <HAL_GPIO_Init+0x2b8>)
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	6193      	str	r3, [r2, #24]
 8003458:	4b4a      	ldr	r3, [pc, #296]	; (8003584 <HAL_GPIO_Init+0x2b8>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003464:	4a48      	ldr	r2, [pc, #288]	; (8003588 <HAL_GPIO_Init+0x2bc>)
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	089b      	lsrs	r3, r3, #2
 800346a:	3302      	adds	r3, #2
 800346c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003470:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	220f      	movs	r2, #15
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4013      	ands	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a40      	ldr	r2, [pc, #256]	; (800358c <HAL_GPIO_Init+0x2c0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d013      	beq.n	80034b8 <HAL_GPIO_Init+0x1ec>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a3f      	ldr	r2, [pc, #252]	; (8003590 <HAL_GPIO_Init+0x2c4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00d      	beq.n	80034b4 <HAL_GPIO_Init+0x1e8>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a3e      	ldr	r2, [pc, #248]	; (8003594 <HAL_GPIO_Init+0x2c8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d007      	beq.n	80034b0 <HAL_GPIO_Init+0x1e4>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a3d      	ldr	r2, [pc, #244]	; (8003598 <HAL_GPIO_Init+0x2cc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d101      	bne.n	80034ac <HAL_GPIO_Init+0x1e0>
 80034a8:	2303      	movs	r3, #3
 80034aa:	e006      	b.n	80034ba <HAL_GPIO_Init+0x1ee>
 80034ac:	2304      	movs	r3, #4
 80034ae:	e004      	b.n	80034ba <HAL_GPIO_Init+0x1ee>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e002      	b.n	80034ba <HAL_GPIO_Init+0x1ee>
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <HAL_GPIO_Init+0x1ee>
 80034b8:	2300      	movs	r3, #0
 80034ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034bc:	f002 0203 	and.w	r2, r2, #3
 80034c0:	0092      	lsls	r2, r2, #2
 80034c2:	4093      	lsls	r3, r2
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034ca:	492f      	ldr	r1, [pc, #188]	; (8003588 <HAL_GPIO_Init+0x2bc>)
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	089b      	lsrs	r3, r3, #2
 80034d0:	3302      	adds	r3, #2
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d006      	beq.n	80034f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034e4:	4b2d      	ldr	r3, [pc, #180]	; (800359c <HAL_GPIO_Init+0x2d0>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	492c      	ldr	r1, [pc, #176]	; (800359c <HAL_GPIO_Init+0x2d0>)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	600b      	str	r3, [r1, #0]
 80034f0:	e006      	b.n	8003500 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034f2:	4b2a      	ldr	r3, [pc, #168]	; (800359c <HAL_GPIO_Init+0x2d0>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	4928      	ldr	r1, [pc, #160]	; (800359c <HAL_GPIO_Init+0x2d0>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d006      	beq.n	800351a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800350c:	4b23      	ldr	r3, [pc, #140]	; (800359c <HAL_GPIO_Init+0x2d0>)
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	4922      	ldr	r1, [pc, #136]	; (800359c <HAL_GPIO_Init+0x2d0>)
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	4313      	orrs	r3, r2
 8003516:	604b      	str	r3, [r1, #4]
 8003518:	e006      	b.n	8003528 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800351a:	4b20      	ldr	r3, [pc, #128]	; (800359c <HAL_GPIO_Init+0x2d0>)
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	43db      	mvns	r3, r3
 8003522:	491e      	ldr	r1, [pc, #120]	; (800359c <HAL_GPIO_Init+0x2d0>)
 8003524:	4013      	ands	r3, r2
 8003526:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d006      	beq.n	8003542 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003534:	4b19      	ldr	r3, [pc, #100]	; (800359c <HAL_GPIO_Init+0x2d0>)
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	4918      	ldr	r1, [pc, #96]	; (800359c <HAL_GPIO_Init+0x2d0>)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	4313      	orrs	r3, r2
 800353e:	608b      	str	r3, [r1, #8]
 8003540:	e006      	b.n	8003550 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003542:	4b16      	ldr	r3, [pc, #88]	; (800359c <HAL_GPIO_Init+0x2d0>)
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	43db      	mvns	r3, r3
 800354a:	4914      	ldr	r1, [pc, #80]	; (800359c <HAL_GPIO_Init+0x2d0>)
 800354c:	4013      	ands	r3, r2
 800354e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d021      	beq.n	80035a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800355c:	4b0f      	ldr	r3, [pc, #60]	; (800359c <HAL_GPIO_Init+0x2d0>)
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	490e      	ldr	r1, [pc, #56]	; (800359c <HAL_GPIO_Init+0x2d0>)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	4313      	orrs	r3, r2
 8003566:	60cb      	str	r3, [r1, #12]
 8003568:	e021      	b.n	80035ae <HAL_GPIO_Init+0x2e2>
 800356a:	bf00      	nop
 800356c:	10320000 	.word	0x10320000
 8003570:	10310000 	.word	0x10310000
 8003574:	10220000 	.word	0x10220000
 8003578:	10210000 	.word	0x10210000
 800357c:	10120000 	.word	0x10120000
 8003580:	10110000 	.word	0x10110000
 8003584:	40021000 	.word	0x40021000
 8003588:	40010000 	.word	0x40010000
 800358c:	40010800 	.word	0x40010800
 8003590:	40010c00 	.word	0x40010c00
 8003594:	40011000 	.word	0x40011000
 8003598:	40011400 	.word	0x40011400
 800359c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_GPIO_Init+0x304>)
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	4909      	ldr	r1, [pc, #36]	; (80035d0 <HAL_GPIO_Init+0x304>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	3301      	adds	r3, #1
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	fa22 f303 	lsr.w	r3, r2, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f47f ae8e 	bne.w	80032e0 <HAL_GPIO_Init+0x14>
  }
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	372c      	adds	r7, #44	; 0x2c
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	40010400 	.word	0x40010400

080035d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	887b      	ldrh	r3, [r7, #2]
 80035e6:	4013      	ands	r3, r2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
 80035f0:	e001      	b.n	80035f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035f2:	2300      	movs	r3, #0
 80035f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr

08003602 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	807b      	strh	r3, [r7, #2]
 800360e:	4613      	mov	r3, r2
 8003610:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003612:	787b      	ldrb	r3, [r7, #1]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003618:	887a      	ldrh	r2, [r7, #2]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800361e:	e003      	b.n	8003628 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003620:	887b      	ldrh	r3, [r7, #2]
 8003622:	041a      	lsls	r2, r3, #16
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	611a      	str	r2, [r3, #16]
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr

08003632 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003632:	b480      	push	{r7}
 8003634:	b085      	sub	sp, #20
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	460b      	mov	r3, r1
 800363c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003644:	887a      	ldrh	r2, [r7, #2]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4013      	ands	r3, r2
 800364a:	041a      	lsls	r2, r3, #16
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	43d9      	mvns	r1, r3
 8003650:	887b      	ldrh	r3, [r7, #2]
 8003652:	400b      	ands	r3, r1
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	611a      	str	r2, [r3, #16]
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800366e:	4b08      	ldr	r3, [pc, #32]	; (8003690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003670:	695a      	ldr	r2, [r3, #20]
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	4013      	ands	r3, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d006      	beq.n	8003688 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800367a:	4a05      	ldr	r2, [pc, #20]	; (8003690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	4618      	mov	r0, r3
 8003684:	f000 f806 	bl	8003694 <HAL_GPIO_EXTI_Callback>
  }
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40010400 	.word	0x40010400

08003694 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e12b      	b.n	8003912 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fd fbc4 	bl	8000e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2224      	movs	r2, #36	; 0x24
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0201 	bic.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800370a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800370c:	f002 fe96 	bl	800643c <HAL_RCC_GetPCLK1Freq>
 8003710:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4a81      	ldr	r2, [pc, #516]	; (800391c <HAL_I2C_Init+0x274>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d807      	bhi.n	800372c <HAL_I2C_Init+0x84>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4a80      	ldr	r2, [pc, #512]	; (8003920 <HAL_I2C_Init+0x278>)
 8003720:	4293      	cmp	r3, r2
 8003722:	bf94      	ite	ls
 8003724:	2301      	movls	r3, #1
 8003726:	2300      	movhi	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	e006      	b.n	800373a <HAL_I2C_Init+0x92>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4a7d      	ldr	r2, [pc, #500]	; (8003924 <HAL_I2C_Init+0x27c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	bf94      	ite	ls
 8003734:	2301      	movls	r3, #1
 8003736:	2300      	movhi	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e0e7      	b.n	8003912 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4a78      	ldr	r2, [pc, #480]	; (8003928 <HAL_I2C_Init+0x280>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	0c9b      	lsrs	r3, r3, #18
 800374c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4a6a      	ldr	r2, [pc, #424]	; (800391c <HAL_I2C_Init+0x274>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d802      	bhi.n	800377c <HAL_I2C_Init+0xd4>
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	3301      	adds	r3, #1
 800377a:	e009      	b.n	8003790 <HAL_I2C_Init+0xe8>
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003782:	fb02 f303 	mul.w	r3, r2, r3
 8003786:	4a69      	ldr	r2, [pc, #420]	; (800392c <HAL_I2C_Init+0x284>)
 8003788:	fba2 2303 	umull	r2, r3, r2, r3
 800378c:	099b      	lsrs	r3, r3, #6
 800378e:	3301      	adds	r3, #1
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	430b      	orrs	r3, r1
 8003796:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	495c      	ldr	r1, [pc, #368]	; (800391c <HAL_I2C_Init+0x274>)
 80037ac:	428b      	cmp	r3, r1
 80037ae:	d819      	bhi.n	80037e4 <HAL_I2C_Init+0x13c>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1e59      	subs	r1, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80037be:	1c59      	adds	r1, r3, #1
 80037c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037c4:	400b      	ands	r3, r1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_I2C_Init+0x138>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1e59      	subs	r1, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80037d8:	3301      	adds	r3, #1
 80037da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037de:	e051      	b.n	8003884 <HAL_I2C_Init+0x1dc>
 80037e0:	2304      	movs	r3, #4
 80037e2:	e04f      	b.n	8003884 <HAL_I2C_Init+0x1dc>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d111      	bne.n	8003810 <HAL_I2C_Init+0x168>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1e58      	subs	r0, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6859      	ldr	r1, [r3, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	440b      	add	r3, r1
 80037fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80037fe:	3301      	adds	r3, #1
 8003800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003804:	2b00      	cmp	r3, #0
 8003806:	bf0c      	ite	eq
 8003808:	2301      	moveq	r3, #1
 800380a:	2300      	movne	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	e012      	b.n	8003836 <HAL_I2C_Init+0x18e>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1e58      	subs	r0, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6859      	ldr	r1, [r3, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	0099      	lsls	r1, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	fbb0 f3f3 	udiv	r3, r0, r3
 8003826:	3301      	adds	r3, #1
 8003828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382c:	2b00      	cmp	r3, #0
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_I2C_Init+0x196>
 800383a:	2301      	movs	r3, #1
 800383c:	e022      	b.n	8003884 <HAL_I2C_Init+0x1dc>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10e      	bne.n	8003864 <HAL_I2C_Init+0x1bc>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1e58      	subs	r0, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6859      	ldr	r1, [r3, #4]
 800384e:	460b      	mov	r3, r1
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	440b      	add	r3, r1
 8003854:	fbb0 f3f3 	udiv	r3, r0, r3
 8003858:	3301      	adds	r3, #1
 800385a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003862:	e00f      	b.n	8003884 <HAL_I2C_Init+0x1dc>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1e58      	subs	r0, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	0099      	lsls	r1, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	fbb0 f3f3 	udiv	r3, r0, r3
 800387a:	3301      	adds	r3, #1
 800387c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003880:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	6809      	ldr	r1, [r1, #0]
 8003888:	4313      	orrs	r3, r2
 800388a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69da      	ldr	r2, [r3, #28]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6911      	ldr	r1, [r2, #16]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	68d2      	ldr	r2, [r2, #12]
 80038be:	4311      	orrs	r1, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	430b      	orrs	r3, r1
 80038c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	000186a0 	.word	0x000186a0
 8003920:	001e847f 	.word	0x001e847f
 8003924:	003d08ff 	.word	0x003d08ff
 8003928:	431bde83 	.word	0x431bde83
 800392c:	10624dd3 	.word	0x10624dd3

08003930 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08c      	sub	sp, #48	; 0x30
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	4608      	mov	r0, r1
 800393a:	4611      	mov	r1, r2
 800393c:	461a      	mov	r2, r3
 800393e:	4603      	mov	r3, r0
 8003940:	817b      	strh	r3, [r7, #10]
 8003942:	460b      	mov	r3, r1
 8003944:	813b      	strh	r3, [r7, #8]
 8003946:	4613      	mov	r3, r2
 8003948:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800394e:	f7ff fb23 	bl	8002f98 <HAL_GetTick>
 8003952:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b20      	cmp	r3, #32
 800395e:	f040 8244 	bne.w	8003dea <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	2319      	movs	r3, #25
 8003968:	2201      	movs	r2, #1
 800396a:	4982      	ldr	r1, [pc, #520]	; (8003b74 <HAL_I2C_Mem_Read+0x244>)
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fb2f 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003978:	2302      	movs	r3, #2
 800397a:	e237      	b.n	8003dec <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_I2C_Mem_Read+0x5a>
 8003986:	2302      	movs	r3, #2
 8003988:	e230      	b.n	8003dec <HAL_I2C_Mem_Read+0x4bc>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b01      	cmp	r3, #1
 800399e:	d007      	beq.n	80039b0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2222      	movs	r2, #34	; 0x22
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2240      	movs	r2, #64	; 0x40
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80039e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4a62      	ldr	r2, [pc, #392]	; (8003b78 <HAL_I2C_Mem_Read+0x248>)
 80039f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039f2:	88f8      	ldrh	r0, [r7, #6]
 80039f4:	893a      	ldrh	r2, [r7, #8]
 80039f6:	8979      	ldrh	r1, [r7, #10]
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	4603      	mov	r3, r0
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f9fc 	bl	8003e00 <I2C_RequestMemoryRead>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e1ec      	b.n	8003dec <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d113      	bne.n	8003a42 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e1c0      	b.n	8003dc4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d11e      	bne.n	8003a88 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a5a:	b672      	cpsid	i
}
 8003a5c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a84:	b662      	cpsie	i
}
 8003a86:	e035      	b.n	8003af4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d11e      	bne.n	8003ace <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003aa0:	b672      	cpsid	i
}
 8003aa2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003aca:	b662      	cpsie	i
}
 8003acc:	e012      	b.n	8003af4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003adc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003af4:	e166      	b.n	8003dc4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	f200 811f 	bhi.w	8003d3e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d123      	bne.n	8003b50 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 fb76 	bl	80041fe <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e167      	b.n	8003dec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b4e:	e139      	b.n	8003dc4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d152      	bne.n	8003bfe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5e:	2200      	movs	r2, #0
 8003b60:	4906      	ldr	r1, [pc, #24]	; (8003b7c <HAL_I2C_Mem_Read+0x24c>)
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 fa34 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d008      	beq.n	8003b80 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e13c      	b.n	8003dec <HAL_I2C_Mem_Read+0x4bc>
 8003b72:	bf00      	nop
 8003b74:	00100002 	.word	0x00100002
 8003b78:	ffff0000 	.word	0xffff0000
 8003b7c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003b80:	b672      	cpsid	i
}
 8003b82:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003bc6:	b662      	cpsie	i
}
 8003bc8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bfc:	e0e2      	b.n	8003dc4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	2200      	movs	r2, #0
 8003c06:	497b      	ldr	r1, [pc, #492]	; (8003df4 <HAL_I2C_Mem_Read+0x4c4>)
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 f9e1 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0e9      	b.n	8003dec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c28:	b672      	cpsid	i
}
 8003c2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c5e:	4b66      	ldr	r3, [pc, #408]	; (8003df8 <HAL_I2C_Mem_Read+0x4c8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	08db      	lsrs	r3, r3, #3
 8003c64:	4a65      	ldr	r2, [pc, #404]	; (8003dfc <HAL_I2C_Mem_Read+0x4cc>)
 8003c66:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6a:	0a1a      	lsrs	r2, r3, #8
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	00da      	lsls	r2, r3, #3
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d118      	bne.n	8003cb6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f043 0220 	orr.w	r2, r3, #32
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003ca6:	b662      	cpsie	i
}
 8003ca8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e09a      	b.n	8003dec <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d1d9      	bne.n	8003c78 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d06:	b662      	cpsie	i
}
 8003d08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d3c:	e042      	b.n	8003dc4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fa5b 	bl	80041fe <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e04c      	b.n	8003dec <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d118      	bne.n	8003dc4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f47f ae94 	bne.w	8003af6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	e000      	b.n	8003dec <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003dea:	2302      	movs	r3, #2
  }
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3728      	adds	r7, #40	; 0x28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	00010004 	.word	0x00010004
 8003df8:	20000010 	.word	0x20000010
 8003dfc:	14f8b589 	.word	0x14f8b589

08003e00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	4608      	mov	r0, r1
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4603      	mov	r3, r0
 8003e10:	817b      	strh	r3, [r7, #10]
 8003e12:	460b      	mov	r3, r1
 8003e14:	813b      	strh	r3, [r7, #8]
 8003e16:	4613      	mov	r3, r2
 8003e18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f8c2 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00d      	beq.n	8003e6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e60:	d103      	bne.n	8003e6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e0aa      	b.n	8003fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e6e:	897b      	ldrh	r3, [r7, #10]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	6a3a      	ldr	r2, [r7, #32]
 8003e82:	4952      	ldr	r1, [pc, #328]	; (8003fcc <I2C_RequestMemoryRead+0x1cc>)
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f8fa 	bl	800407e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e097      	b.n	8003fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eac:	6a39      	ldr	r1, [r7, #32]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f964 	bl	800417c <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00d      	beq.n	8003ed6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d107      	bne.n	8003ed2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e076      	b.n	8003fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ed6:	88fb      	ldrh	r3, [r7, #6]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d105      	bne.n	8003ee8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003edc:	893b      	ldrh	r3, [r7, #8]
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	611a      	str	r2, [r3, #16]
 8003ee6:	e021      	b.n	8003f2c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ee8:	893b      	ldrh	r3, [r7, #8]
 8003eea:	0a1b      	lsrs	r3, r3, #8
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef8:	6a39      	ldr	r1, [r7, #32]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f93e 	bl	800417c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00d      	beq.n	8003f22 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d107      	bne.n	8003f1e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e050      	b.n	8003fc4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f22:	893b      	ldrh	r3, [r7, #8]
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2e:	6a39      	ldr	r1, [r7, #32]
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 f923 	bl	800417c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00d      	beq.n	8003f58 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d107      	bne.n	8003f54 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e035      	b.n	8003fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f66:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f82b 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00d      	beq.n	8003f9c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f8e:	d103      	bne.n	8003f98 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e013      	b.n	8003fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f9c:	897b      	ldrh	r3, [r7, #10]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	6a3a      	ldr	r2, [r7, #32]
 8003fb0:	4906      	ldr	r1, [pc, #24]	; (8003fcc <I2C_RequestMemoryRead+0x1cc>)
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 f863 	bl	800407e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	00010002 	.word	0x00010002

08003fd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fe0:	e025      	b.n	800402e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe8:	d021      	beq.n	800402e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fea:	f7fe ffd5 	bl	8002f98 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d302      	bcc.n	8004000 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d116      	bne.n	800402e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f043 0220 	orr.w	r2, r3, #32
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e023      	b.n	8004076 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	d10d      	bne.n	8004054 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	43da      	mvns	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4013      	ands	r3, r2
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	bf0c      	ite	eq
 800404a:	2301      	moveq	r3, #1
 800404c:	2300      	movne	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	e00c      	b.n	800406e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	43da      	mvns	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4013      	ands	r3, r2
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	bf0c      	ite	eq
 8004066:	2301      	moveq	r3, #1
 8004068:	2300      	movne	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	461a      	mov	r2, r3
 800406e:	79fb      	ldrb	r3, [r7, #7]
 8004070:	429a      	cmp	r2, r3
 8004072:	d0b6      	beq.n	8003fe2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	60f8      	str	r0, [r7, #12]
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	607a      	str	r2, [r7, #4]
 800408a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800408c:	e051      	b.n	8004132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409c:	d123      	bne.n	80040e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	f043 0204 	orr.w	r2, r3, #4
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e046      	b.n	8004174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ec:	d021      	beq.n	8004132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ee:	f7fe ff53 	bl	8002f98 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d302      	bcc.n	8004104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d116      	bne.n	8004132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f043 0220 	orr.w	r2, r3, #32
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e020      	b.n	8004174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	0c1b      	lsrs	r3, r3, #16
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b01      	cmp	r3, #1
 800413a:	d10c      	bne.n	8004156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	43da      	mvns	r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4013      	ands	r3, r2
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	bf14      	ite	ne
 800414e:	2301      	movne	r3, #1
 8004150:	2300      	moveq	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	e00b      	b.n	800416e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	43da      	mvns	r2, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	4013      	ands	r3, r2
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf14      	ite	ne
 8004168:	2301      	movne	r3, #1
 800416a:	2300      	moveq	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d18d      	bne.n	800408e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004188:	e02d      	b.n	80041e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f88d 	bl	80042aa <I2C_IsAcknowledgeFailed>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e02d      	b.n	80041f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d021      	beq.n	80041e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a2:	f7fe fef9 	bl	8002f98 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d302      	bcc.n	80041b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d116      	bne.n	80041e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f043 0220 	orr.w	r2, r3, #32
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e007      	b.n	80041f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f0:	2b80      	cmp	r3, #128	; 0x80
 80041f2:	d1ca      	bne.n	800418a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800420a:	e042      	b.n	8004292 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b10      	cmp	r3, #16
 8004218:	d119      	bne.n	800424e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f06f 0210 	mvn.w	r2, #16
 8004222:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e029      	b.n	80042a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424e:	f7fe fea3 	bl	8002f98 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	429a      	cmp	r2, r3
 800425c:	d302      	bcc.n	8004264 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d116      	bne.n	8004292 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	f043 0220 	orr.w	r2, r3, #32
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e007      	b.n	80042a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	d1b5      	bne.n	800420c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c0:	d11b      	bne.n	80042fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f043 0204 	orr.w	r2, r3, #4
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr

08004306 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004306:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004308:	b08b      	sub	sp, #44	; 0x2c
 800430a:	af06      	add	r7, sp, #24
 800430c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e0fd      	b.n	8004514 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d106      	bne.n	8004332 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f00a f9fd 	bl	800e72c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2203      	movs	r2, #3
 8004336:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f003 fada 	bl	80078f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	603b      	str	r3, [r7, #0]
 800434a:	687e      	ldr	r6, [r7, #4]
 800434c:	466d      	mov	r5, sp
 800434e:	f106 0410 	add.w	r4, r6, #16
 8004352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	602b      	str	r3, [r5, #0]
 800435a:	1d33      	adds	r3, r6, #4
 800435c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800435e:	6838      	ldr	r0, [r7, #0]
 8004360:	f003 faa4 	bl	80078ac <USB_CoreInit>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2202      	movs	r2, #2
 800436e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e0ce      	b.n	8004514 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f003 fad5 	bl	800792c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004382:	2300      	movs	r3, #0
 8004384:	73fb      	strb	r3, [r7, #15]
 8004386:	e04c      	b.n	8004422 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	440b      	add	r3, r1
 8004398:	3301      	adds	r3, #1
 800439a:	2201      	movs	r2, #1
 800439c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	440b      	add	r3, r1
 80043ae:	7bfa      	ldrb	r2, [r7, #15]
 80043b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043b2:	7bfa      	ldrb	r2, [r7, #15]
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	b298      	uxth	r0, r3
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	440b      	add	r3, r1
 80043c4:	3336      	adds	r3, #54	; 0x36
 80043c6:	4602      	mov	r2, r0
 80043c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	440b      	add	r3, r1
 80043da:	3303      	adds	r3, #3
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043e0:	7bfa      	ldrb	r2, [r7, #15]
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	440b      	add	r3, r1
 80043ee:	3338      	adds	r3, #56	; 0x38
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043f4:	7bfa      	ldrb	r2, [r7, #15]
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	440b      	add	r3, r1
 8004402:	333c      	adds	r3, #60	; 0x3c
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004408:	7bfa      	ldrb	r2, [r7, #15]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	440b      	add	r3, r1
 8004416:	3340      	adds	r3, #64	; 0x40
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	3301      	adds	r3, #1
 8004420:	73fb      	strb	r3, [r7, #15]
 8004422:	7bfa      	ldrb	r2, [r7, #15]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	429a      	cmp	r2, r3
 800442a:	d3ad      	bcc.n	8004388 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800442c:	2300      	movs	r3, #0
 800442e:	73fb      	strb	r3, [r7, #15]
 8004430:	e044      	b.n	80044bc <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004432:	7bfa      	ldrb	r2, [r7, #15]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	440b      	add	r3, r1
 8004440:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004448:	7bfa      	ldrb	r2, [r7, #15]
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	440b      	add	r3, r1
 8004456:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800445a:	7bfa      	ldrb	r2, [r7, #15]
 800445c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800445e:	7bfa      	ldrb	r2, [r7, #15]
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	4613      	mov	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	440b      	add	r3, r1
 800446c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004470:	2200      	movs	r2, #0
 8004472:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004474:	7bfa      	ldrb	r2, [r7, #15]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	440b      	add	r3, r1
 8004482:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800448a:	7bfa      	ldrb	r2, [r7, #15]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	440b      	add	r3, r1
 8004498:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044a0:	7bfa      	ldrb	r2, [r7, #15]
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	440b      	add	r3, r1
 80044ae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	3301      	adds	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
 80044bc:	7bfa      	ldrb	r2, [r7, #15]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d3b5      	bcc.n	8004432 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	687e      	ldr	r6, [r7, #4]
 80044ce:	466d      	mov	r5, sp
 80044d0:	f106 0410 	add.w	r4, r6, #16
 80044d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	602b      	str	r3, [r5, #0]
 80044dc:	1d33      	adds	r3, r6, #4
 80044de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044e0:	6838      	ldr	r0, [r7, #0]
 80044e2:	f003 fa2f 	bl	8007944 <USB_DevInit>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e00d      	b.n	8004514 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f005 fba0 	bl	8009c52 <USB_DevDisconnect>

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800451c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800452a:	2b01      	cmp	r3, #1
 800452c:	d101      	bne.n	8004532 <HAL_PCD_Start+0x16>
 800452e:	2302      	movs	r3, #2
 8004530:	e016      	b.n	8004560 <HAL_PCD_Start+0x44>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f003 f9c4 	bl	80078cc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004544:	2101      	movs	r1, #1
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f00a fb63 	bl	800ec12 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f005 fb74 	bl	8009c3e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f005 fb76 	bl	8009c66 <USB_ReadInterrupts>
 800457a:	4603      	mov	r3, r0
 800457c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004584:	d102      	bne.n	800458c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fb61 	bl	8004c4e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f005 fb68 	bl	8009c66 <USB_ReadInterrupts>
 8004596:	4603      	mov	r3, r0
 8004598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800459c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a0:	d112      	bne.n	80045c8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b4:	b292      	uxth	r2, r2
 80045b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f00a f931 	bl	800e822 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80045c0:	2100      	movs	r1, #0
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f925 	bl	8004812 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f005 fb4a 	bl	8009c66 <USB_ReadInterrupts>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045dc:	d10b      	bne.n	80045f6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045f0:	b292      	uxth	r2, r2
 80045f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f005 fb33 	bl	8009c66 <USB_ReadInterrupts>
 8004600:	4603      	mov	r3, r0
 8004602:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800460a:	d10b      	bne.n	8004624 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004614:	b29a      	uxth	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800461e:	b292      	uxth	r2, r2
 8004620:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f005 fb1c 	bl	8009c66 <USB_ReadInterrupts>
 800462e:	4603      	mov	r3, r0
 8004630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004638:	d126      	bne.n	8004688 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004642:	b29a      	uxth	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0204 	bic.w	r2, r2, #4
 800464c:	b292      	uxth	r2, r2
 800464e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800465a:	b29a      	uxth	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0208 	bic.w	r2, r2, #8
 8004664:	b292      	uxth	r2, r2
 8004666:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f00a f912 	bl	800e894 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004678:	b29a      	uxth	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004682:	b292      	uxth	r2, r2
 8004684:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f005 faea 	bl	8009c66 <USB_ReadInterrupts>
 8004692:	4603      	mov	r3, r0
 8004694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800469c:	f040 8084 	bne.w	80047a8 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80046a0:	2300      	movs	r3, #0
 80046a2:	77fb      	strb	r3, [r7, #31]
 80046a4:	e011      	b.n	80046ca <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	7ffb      	ldrb	r3, [r7, #31]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	441a      	add	r2, r3
 80046b2:	7ffb      	ldrb	r3, [r7, #31]
 80046b4:	8812      	ldrh	r2, [r2, #0]
 80046b6:	b292      	uxth	r2, r2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	f107 0120 	add.w	r1, r7, #32
 80046be:	440b      	add	r3, r1
 80046c0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80046c4:	7ffb      	ldrb	r3, [r7, #31]
 80046c6:	3301      	adds	r3, #1
 80046c8:	77fb      	strb	r3, [r7, #31]
 80046ca:	7ffb      	ldrb	r3, [r7, #31]
 80046cc:	2b07      	cmp	r3, #7
 80046ce:	d9ea      	bls.n	80046a6 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046d8:	b29a      	uxth	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	b292      	uxth	r2, r2
 80046e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0201 	bic.w	r2, r2, #1
 80046fa:	b292      	uxth	r2, r2
 80046fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004700:	bf00      	nop
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800470a:	b29b      	uxth	r3, r3
 800470c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f6      	beq.n	8004702 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800471c:	b29a      	uxth	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004726:	b292      	uxth	r2, r2
 8004728:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800472c:	2300      	movs	r3, #0
 800472e:	77fb      	strb	r3, [r7, #31]
 8004730:	e010      	b.n	8004754 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004732:	7ffb      	ldrb	r3, [r7, #31]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	4611      	mov	r1, r2
 800473a:	7ffa      	ldrb	r2, [r7, #31]
 800473c:	0092      	lsls	r2, r2, #2
 800473e:	440a      	add	r2, r1
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	f107 0120 	add.w	r1, r7, #32
 8004746:	440b      	add	r3, r1
 8004748:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800474c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800474e:	7ffb      	ldrb	r3, [r7, #31]
 8004750:	3301      	adds	r3, #1
 8004752:	77fb      	strb	r3, [r7, #31]
 8004754:	7ffb      	ldrb	r3, [r7, #31]
 8004756:	2b07      	cmp	r3, #7
 8004758:	d9eb      	bls.n	8004732 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004762:	b29a      	uxth	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0208 	orr.w	r2, r2, #8
 800476c:	b292      	uxth	r2, r2
 800476e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800477a:	b29a      	uxth	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004784:	b292      	uxth	r2, r2
 8004786:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004792:	b29a      	uxth	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0204 	orr.w	r2, r2, #4
 800479c:	b292      	uxth	r2, r2
 800479e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f00a f85c 	bl	800e860 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f005 fa5a 	bl	8009c66 <USB_ReadInterrupts>
 80047b2:	4603      	mov	r3, r0
 80047b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047bc:	d10e      	bne.n	80047dc <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80047d0:	b292      	uxth	r2, r2
 80047d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f00a f815 	bl	800e806 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f005 fa40 	bl	8009c66 <USB_ReadInterrupts>
 80047e6:	4603      	mov	r3, r0
 80047e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f0:	d10b      	bne.n	800480a <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004804:	b292      	uxth	r2, r2
 8004806:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800480a:	bf00      	nop
 800480c:	3720      	adds	r7, #32
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	460b      	mov	r3, r1
 800481c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_PCD_SetAddress+0x1a>
 8004828:	2302      	movs	r3, #2
 800482a:	e013      	b.n	8004854 <HAL_PCD_SetAddress+0x42>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	78fa      	ldrb	r2, [r7, #3]
 8004842:	4611      	mov	r1, r2
 8004844:	4618      	mov	r0, r3
 8004846:	f005 f9e7 	bl	8009c18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	4608      	mov	r0, r1
 8004866:	4611      	mov	r1, r2
 8004868:	461a      	mov	r2, r3
 800486a:	4603      	mov	r3, r0
 800486c:	70fb      	strb	r3, [r7, #3]
 800486e:	460b      	mov	r3, r1
 8004870:	803b      	strh	r3, [r7, #0]
 8004872:	4613      	mov	r3, r2
 8004874:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800487a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800487e:	2b00      	cmp	r3, #0
 8004880:	da0e      	bge.n	80048a0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004882:	78fb      	ldrb	r3, [r7, #3]
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	4613      	mov	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	4413      	add	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	705a      	strb	r2, [r3, #1]
 800489e:	e00e      	b.n	80048be <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	f003 0207 	and.w	r2, r3, #7
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	4413      	add	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80048be:	78fb      	ldrb	r3, [r7, #3]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80048ca:	883a      	ldrh	r2, [r7, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	78ba      	ldrb	r2, [r7, #2]
 80048d4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	785b      	ldrb	r3, [r3, #1]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d004      	beq.n	80048e8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80048e8:	78bb      	ldrb	r3, [r7, #2]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d102      	bne.n	80048f4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_PCD_EP_Open+0xa6>
 80048fe:	2302      	movs	r3, #2
 8004900:	e00e      	b.n	8004920 <HAL_PCD_EP_Open+0xc4>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68f9      	ldr	r1, [r7, #12]
 8004910:	4618      	mov	r0, r3
 8004912:	f003 f837 	bl	8007984 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800491e:	7afb      	ldrb	r3, [r7, #11]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004934:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004938:	2b00      	cmp	r3, #0
 800493a:	da0e      	bge.n	800495a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	4413      	add	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	705a      	strb	r2, [r3, #1]
 8004958:	e00e      	b.n	8004978 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800495a:	78fb      	ldrb	r3, [r7, #3]
 800495c:	f003 0207 	and.w	r2, r3, #7
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	4413      	add	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	b2da      	uxtb	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800498a:	2b01      	cmp	r3, #1
 800498c:	d101      	bne.n	8004992 <HAL_PCD_EP_Close+0x6a>
 800498e:	2302      	movs	r3, #2
 8004990:	e00e      	b.n	80049b0 <HAL_PCD_EP_Close+0x88>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68f9      	ldr	r1, [r7, #12]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f003 fb59 	bl	8008058 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	460b      	mov	r3, r1
 80049c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049c8:	7afb      	ldrb	r3, [r7, #11]
 80049ca:	f003 0207 	and.w	r2, r3, #7
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4413      	add	r3, r2
 80049de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2200      	movs	r2, #0
 80049f0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2200      	movs	r2, #0
 80049f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049f8:	7afb      	ldrb	r3, [r7, #11]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a04:	7afb      	ldrb	r3, [r7, #11]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6979      	ldr	r1, [r7, #20]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f003 fd0b 	bl	8008430 <USB_EPStartXfer>
 8004a1a:	e005      	b.n	8004a28 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6979      	ldr	r1, [r7, #20]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f003 fd04 	bl	8008430 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a3e:	78fb      	ldrb	r3, [r7, #3]
 8004a40:	f003 0207 	and.w	r2, r3, #7
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	440b      	add	r3, r1
 8004a50:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004a54:	681b      	ldr	r3, [r3, #0]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr

08004a60 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	607a      	str	r2, [r7, #4]
 8004a6a:	603b      	str	r3, [r7, #0]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a70:	7afb      	ldrb	r3, [r7, #11]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	4413      	add	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aac:	7afb      	ldrb	r3, [r7, #11]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ab8:	7afb      	ldrb	r3, [r7, #11]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d106      	bne.n	8004ad0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6979      	ldr	r1, [r7, #20]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f003 fcb1 	bl	8008430 <USB_EPStartXfer>
 8004ace:	e005      	b.n	8004adc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6979      	ldr	r1, [r7, #20]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f003 fcaa 	bl	8008430 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	460b      	mov	r3, r1
 8004af0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	f003 0207 	and.w	r2, r3, #7
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d901      	bls.n	8004b04 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e04c      	b.n	8004b9e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	da0e      	bge.n	8004b2a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	4413      	add	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	705a      	strb	r2, [r3, #1]
 8004b28:	e00c      	b.n	8004b44 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b2a:	78fa      	ldrb	r2, [r7, #3]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2201      	movs	r2, #1
 8004b48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b4a:	78fb      	ldrb	r3, [r7, #3]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_PCD_EP_SetStall+0x7e>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e01c      	b.n	8004b9e <HAL_PCD_EP_SetStall+0xb8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68f9      	ldr	r1, [r7, #12]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f004 ff53 	bl	8009a1e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d108      	bne.n	8004b94 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4610      	mov	r0, r2
 8004b90:	f005 f878 	bl	8009c84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	f003 020f 	and.w	r2, r3, #15
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d901      	bls.n	8004bc4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e040      	b.n	8004c46 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	da0e      	bge.n	8004bea <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	4413      	add	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	705a      	strb	r2, [r3, #1]
 8004be8:	e00e      	b.n	8004c08 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	f003 0207 	and.w	r2, r3, #7
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	4413      	add	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c0e:	78fb      	ldrb	r3, [r7, #3]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_PCD_EP_ClrStall+0x82>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e00e      	b.n	8004c46 <HAL_PCD_EP_ClrStall+0xa0>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68f9      	ldr	r1, [r7, #12]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f004 ff41 	bl	8009abe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b08e      	sub	sp, #56	; 0x38
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004c56:	e2ec      	b.n	8005232 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c60:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004c62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004c6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f040 8161 	bne.w	8004f3a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004c78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c7a:	f003 0310 	and.w	r3, r3, #16
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d152      	bne.n	8004d28 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c92:	81fb      	strh	r3, [r7, #14]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	89fb      	ldrh	r3, [r7, #14]
 8004c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	3328      	adds	r3, #40	; 0x28
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3302      	adds	r3, #2
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	695a      	ldr	r2, [r3, #20]
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	441a      	add	r2, r3
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f009 fd72 	bl	800e7d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 829b 	beq.w	8005232 <PCD_EP_ISR_Handler+0x5e4>
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f040 8296 	bne.w	8005232 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	b292      	uxth	r2, r2
 8004d1a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d26:	e284      	b.n	8005232 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004d38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d034      	beq.n	8004dac <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	4413      	add	r3, r2
 8004d56:	3306      	adds	r3, #6
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	f004 ffcf 	bl	8009d24 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004d92:	4013      	ands	r3, r2
 8004d94:	823b      	strh	r3, [r7, #16]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	8a3a      	ldrh	r2, [r7, #16]
 8004d9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004da0:	b292      	uxth	r2, r2
 8004da2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f009 fce7 	bl	800e778 <HAL_PCD_SetupStageCallback>
 8004daa:	e242      	b.n	8005232 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004dac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f280 823e 	bge.w	8005232 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	83bb      	strh	r3, [r7, #28]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	8bba      	ldrh	r2, [r7, #28]
 8004dcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dd0:	b292      	uxth	r2, r2
 8004dd2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	461a      	mov	r2, r3
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	4413      	add	r3, r2
 8004de8:	3306      	adds	r3, #6
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6812      	ldr	r2, [r2, #0]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d019      	beq.n	8004e3c <PCD_EP_ISR_Handler+0x1ee>
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d015      	beq.n	8004e3c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6818      	ldr	r0, [r3, #0]
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	6959      	ldr	r1, [r3, #20]
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	f004 ff7f 	bl	8009d24 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	695a      	ldr	r2, [r3, #20]
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	441a      	add	r2, r3
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004e34:	2100      	movs	r1, #0
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f009 fcb0 	bl	800e79c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f040 81f2 	bne.w	8005232 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	61bb      	str	r3, [r7, #24]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	461a      	mov	r2, r3
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	4413      	add	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d112      	bne.n	8004e9c <PCD_EP_ISR_Handler+0x24e>
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	801a      	strh	r2, [r3, #0]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	801a      	strh	r2, [r3, #0]
 8004e9a:	e02f      	b.n	8004efc <PCD_EP_ISR_Handler+0x2ae>
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	2b3e      	cmp	r3, #62	; 0x3e
 8004ea2:	d813      	bhi.n	8004ecc <PCD_EP_ISR_Handler+0x27e>
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	085b      	lsrs	r3, r3, #1
 8004eaa:	633b      	str	r3, [r7, #48]	; 0x30
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <PCD_EP_ISR_Handler+0x270>
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	3301      	adds	r3, #1
 8004ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	029b      	lsls	r3, r3, #10
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	801a      	strh	r2, [r3, #0]
 8004eca:	e017      	b.n	8004efc <PCD_EP_ISR_Handler+0x2ae>
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	095b      	lsrs	r3, r3, #5
 8004ed2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f003 031f 	and.w	r3, r3, #31
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d102      	bne.n	8004ee6 <PCD_EP_ISR_Handler+0x298>
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	029b      	lsls	r3, r3, #10
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0c:	827b      	strh	r3, [r7, #18]
 8004f0e:	8a7b      	ldrh	r3, [r7, #18]
 8004f10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f14:	827b      	strh	r3, [r7, #18]
 8004f16:	8a7b      	ldrh	r3, [r7, #18]
 8004f18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f1c:	827b      	strh	r3, [r7, #18]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	8a7b      	ldrh	r3, [r7, #18]
 8004f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	8013      	strh	r3, [r2, #0]
 8004f38:	e17b      	b.n	8005232 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004f4c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f280 80ea 	bge.w	800512a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	461a      	mov	r2, r3
 8004f76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004f80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f84:	b292      	uxth	r2, r2
 8004f86:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004f88:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	7b1b      	ldrb	r3, [r3, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d122      	bne.n	8004fec <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	4413      	add	r3, r2
 8004fba:	3306      	adds	r3, #6
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fce:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004fd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 8087 	beq.w	80050e6 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	6959      	ldr	r1, [r3, #20]
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	88da      	ldrh	r2, [r3, #6]
 8004fe4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004fe6:	f004 fe9d 	bl	8009d24 <USB_ReadPMA>
 8004fea:	e07c      	b.n	80050e6 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	78db      	ldrb	r3, [r3, #3]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d108      	bne.n	8005006 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004ff4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f927 	bl	800524e <HAL_PCD_EP_DB_Receive>
 8005000:	4603      	mov	r3, r0
 8005002:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005004:	e06f      	b.n	80050e6 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005020:	847b      	strh	r3, [r7, #34]	; 0x22
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	441a      	add	r2, r3
 8005030:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800503e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005042:	b29b      	uxth	r3, r3
 8005044:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d021      	beq.n	80050a4 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005068:	b29b      	uxth	r3, r3
 800506a:	461a      	mov	r2, r3
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	4413      	add	r3, r2
 8005074:	3302      	adds	r3, #2
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6812      	ldr	r2, [r2, #0]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005088:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800508a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800508c:	2b00      	cmp	r3, #0
 800508e:	d02a      	beq.n	80050e6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6818      	ldr	r0, [r3, #0]
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	6959      	ldr	r1, [r3, #20]
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	891a      	ldrh	r2, [r3, #8]
 800509c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800509e:	f004 fe41 	bl	8009d24 <USB_ReadPMA>
 80050a2:	e020      	b.n	80050e6 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	4413      	add	r3, r2
 80050b8:	3306      	adds	r3, #6
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6812      	ldr	r2, [r2, #0]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050cc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80050ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6818      	ldr	r0, [r3, #0]
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	6959      	ldr	r1, [r3, #20]
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	895a      	ldrh	r2, [r3, #10]
 80050e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050e2:	f004 fe1f 	bl	8009d24 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	69da      	ldr	r2, [r3, #28]
 80050ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050ec:	441a      	add	r2, r3
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	695a      	ldr	r2, [r3, #20]
 80050f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050f8:	441a      	add	r2, r3
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d004      	beq.n	8005110 <PCD_EP_ISR_Handler+0x4c2>
 8005106:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	429a      	cmp	r2, r3
 800510e:	d206      	bcs.n	800511e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	4619      	mov	r1, r3
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f009 fb40 	bl	800e79c <HAL_PCD_DataOutStageCallback>
 800511c:	e005      	b.n	800512a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005124:	4618      	mov	r0, r3
 8005126:	f003 f983 	bl	8008430 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800512a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800512c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005130:	2b00      	cmp	r3, #0
 8005132:	d07e      	beq.n	8005232 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005134:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	4413      	add	r3, r2
 8005146:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	461a      	mov	r2, r3
 800514e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	b29b      	uxth	r3, r3
 800515a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800515e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005162:	843b      	strh	r3, [r7, #32]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	461a      	mov	r2, r3
 800516a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	441a      	add	r2, r3
 8005172:	8c3b      	ldrh	r3, [r7, #32]
 8005174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800517c:	b29b      	uxth	r3, r3
 800517e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	78db      	ldrb	r3, [r3, #3]
 8005184:	2b03      	cmp	r3, #3
 8005186:	d00c      	beq.n	80051a2 <PCD_EP_ISR_Handler+0x554>
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	78db      	ldrb	r3, [r3, #3]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d008      	beq.n	80051a2 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005194:	2b02      	cmp	r3, #2
 8005196:	d146      	bne.n	8005226 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005198:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800519a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d141      	bne.n	8005226 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4413      	add	r3, r2
 80051b6:	3302      	adds	r3, #2
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051ca:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	699a      	ldr	r2, [r3, #24]
 80051d0:	8bfb      	ldrh	r3, [r7, #30]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d906      	bls.n	80051e4 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	8bfb      	ldrh	r3, [r7, #30]
 80051dc:	1ad2      	subs	r2, r2, r3
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	619a      	str	r2, [r3, #24]
 80051e2:	e002      	b.n	80051ea <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	2200      	movs	r2, #0
 80051e8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	4619      	mov	r1, r3
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f009 faea 	bl	800e7d2 <HAL_PCD_DataInStageCallback>
 80051fe:	e018      	b.n	8005232 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	695a      	ldr	r2, [r3, #20]
 8005204:	8bfb      	ldrh	r3, [r7, #30]
 8005206:	441a      	add	r2, r3
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	8bfb      	ldrh	r3, [r7, #30]
 8005212:	441a      	add	r2, r3
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800521e:	4618      	mov	r0, r3
 8005220:	f003 f906 	bl	8008430 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005224:	e005      	b.n	8005232 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005226:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005228:	461a      	mov	r2, r3
 800522a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f91b 	bl	8005468 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800523a:	b29b      	uxth	r3, r3
 800523c:	b21b      	sxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	f6ff ad0a 	blt.w	8004c58 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3738      	adds	r7, #56	; 0x38
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b088      	sub	sp, #32
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	4613      	mov	r3, r2
 800525a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d07e      	beq.n	8005364 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800526e:	b29b      	uxth	r3, r3
 8005270:	461a      	mov	r2, r3
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	4413      	add	r3, r2
 800527a:	3302      	adds	r3, #2
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	6812      	ldr	r2, [r2, #0]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800528e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	699a      	ldr	r2, [r3, #24]
 8005294:	8b7b      	ldrh	r3, [r7, #26]
 8005296:	429a      	cmp	r2, r3
 8005298:	d306      	bcc.n	80052a8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	699a      	ldr	r2, [r3, #24]
 800529e:	8b7b      	ldrh	r3, [r7, #26]
 80052a0:	1ad2      	subs	r2, r2, r3
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	619a      	str	r2, [r3, #24]
 80052a6:	e002      	b.n	80052ae <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2200      	movs	r2, #0
 80052ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d123      	bne.n	80052fe <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d0:	833b      	strh	r3, [r7, #24]
 80052d2:	8b3b      	ldrh	r3, [r7, #24]
 80052d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052d8:	833b      	strh	r3, [r7, #24]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	441a      	add	r2, r3
 80052e8:	8b3b      	ldrh	r3, [r7, #24]
 80052ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80052fe:	88fb      	ldrh	r3, [r7, #6]
 8005300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01f      	beq.n	8005348 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	b29b      	uxth	r3, r3
 800531a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005322:	82fb      	strh	r3, [r7, #22]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	441a      	add	r2, r3
 8005332:	8afb      	ldrh	r3, [r7, #22]
 8005334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800533c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005340:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005344:	b29b      	uxth	r3, r3
 8005346:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005348:	8b7b      	ldrh	r3, [r7, #26]
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 8087 	beq.w	800545e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	6959      	ldr	r1, [r3, #20]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	891a      	ldrh	r2, [r3, #8]
 800535c:	8b7b      	ldrh	r3, [r7, #26]
 800535e:	f004 fce1 	bl	8009d24 <USB_ReadPMA>
 8005362:	e07c      	b.n	800545e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800536c:	b29b      	uxth	r3, r3
 800536e:	461a      	mov	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	4413      	add	r3, r2
 8005378:	3306      	adds	r3, #6
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800538c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	8b7b      	ldrh	r3, [r7, #26]
 8005394:	429a      	cmp	r2, r3
 8005396:	d306      	bcc.n	80053a6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	699a      	ldr	r2, [r3, #24]
 800539c:	8b7b      	ldrh	r3, [r7, #26]
 800539e:	1ad2      	subs	r2, r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	619a      	str	r2, [r3, #24]
 80053a4:	e002      	b.n	80053ac <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2200      	movs	r2, #0
 80053aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d123      	bne.n	80053fc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ce:	83fb      	strh	r3, [r7, #30]
 80053d0:	8bfb      	ldrh	r3, [r7, #30]
 80053d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053d6:	83fb      	strh	r3, [r7, #30]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	441a      	add	r2, r3
 80053e6:	8bfb      	ldrh	r3, [r7, #30]
 80053e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80053fc:	88fb      	ldrh	r3, [r7, #6]
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d11f      	bne.n	8005446 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b29b      	uxth	r3, r3
 8005418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800541c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005420:	83bb      	strh	r3, [r7, #28]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	441a      	add	r2, r3
 8005430:	8bbb      	ldrh	r3, [r7, #28]
 8005432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800543a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005442:	b29b      	uxth	r3, r3
 8005444:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005446:	8b7b      	ldrh	r3, [r7, #26]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d008      	beq.n	800545e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	6959      	ldr	r1, [r3, #20]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	895a      	ldrh	r2, [r3, #10]
 8005458:	8b7b      	ldrh	r3, [r7, #26]
 800545a:	f004 fc63 	bl	8009d24 <USB_ReadPMA>
    }
  }

  return count;
 800545e:	8b7b      	ldrh	r3, [r7, #26]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3720      	adds	r7, #32
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b0a2      	sub	sp, #136	; 0x88
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	4613      	mov	r3, r2
 8005474:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005476:	88fb      	ldrh	r3, [r7, #6]
 8005478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 81c7 	beq.w	8005810 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800548a:	b29b      	uxth	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	4413      	add	r3, r2
 8005496:	3302      	adds	r3, #2
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	6812      	ldr	r2, [r2, #0]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d907      	bls.n	80054ca <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80054c2:	1ad2      	subs	r2, r2, r3
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	619a      	str	r2, [r3, #24]
 80054c8:	e002      	b.n	80054d0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2200      	movs	r2, #0
 80054ce:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f040 80b9 	bne.w	800564c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	785b      	ldrb	r3, [r3, #1]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d126      	bne.n	8005530 <HAL_PCD_EP_DB_Transmit+0xc8>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	4413      	add	r3, r2
 80054f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	011a      	lsls	r2, r3, #4
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	4413      	add	r3, r2
 8005504:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	b29b      	uxth	r3, r3
 8005510:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005514:	b29a      	uxth	r2, r3
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	801a      	strh	r2, [r3, #0]
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	b29b      	uxth	r3, r3
 8005520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005528:	b29a      	uxth	r2, r3
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	801a      	strh	r2, [r3, #0]
 800552e:	e01a      	b.n	8005566 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	785b      	ldrb	r3, [r3, #1]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d116      	bne.n	8005566 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	633b      	str	r3, [r7, #48]	; 0x30
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005546:	b29b      	uxth	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	4413      	add	r3, r2
 800554e:	633b      	str	r3, [r7, #48]	; 0x30
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	011a      	lsls	r2, r3, #4
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	4413      	add	r3, r2
 800555a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800555e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	2200      	movs	r2, #0
 8005564:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	623b      	str	r3, [r7, #32]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	785b      	ldrb	r3, [r3, #1]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d126      	bne.n	80055c2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005582:	b29b      	uxth	r3, r3
 8005584:	461a      	mov	r2, r3
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	4413      	add	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	011a      	lsls	r2, r3, #4
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	4413      	add	r3, r2
 8005596:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	801a      	strh	r2, [r3, #0]
 80055c0:	e017      	b.n	80055f2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	785b      	ldrb	r3, [r3, #1]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d113      	bne.n	80055f2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	4413      	add	r3, r2
 80055da:	623b      	str	r3, [r7, #32]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	011a      	lsls	r2, r3, #4
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	4413      	add	r3, r2
 80055e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055ea:	61fb      	str	r3, [r7, #28]
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	2200      	movs	r2, #0
 80055f0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	4619      	mov	r1, r3
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f009 f8ea 	bl	800e7d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80055fe:	88fb      	ldrh	r3, [r7, #6]
 8005600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 82d4 	beq.w	8005bb2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b29b      	uxth	r3, r3
 800561c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005624:	827b      	strh	r3, [r7, #18]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	461a      	mov	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	441a      	add	r2, r3
 8005634:	8a7b      	ldrh	r3, [r7, #18]
 8005636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800563a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800563e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005646:	b29b      	uxth	r3, r3
 8005648:	8013      	strh	r3, [r2, #0]
 800564a:	e2b2      	b.n	8005bb2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800564c:	88fb      	ldrh	r3, [r7, #6]
 800564e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d021      	beq.n	800569a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005670:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	441a      	add	r2, r3
 8005682:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800568a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800568e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005696:	b29b      	uxth	r3, r3
 8005698:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	f040 8286 	bne.w	8005bb2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	695a      	ldr	r2, [r3, #20]
 80056aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056ae:	441a      	add	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	69da      	ldr	r2, [r3, #28]
 80056b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056bc:	441a      	add	r2, r3
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	6a1a      	ldr	r2, [r3, #32]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d309      	bcc.n	80056e2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
 80056d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056da:	1ad2      	subs	r2, r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	621a      	str	r2, [r3, #32]
 80056e0:	e015      	b.n	800570e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d107      	bne.n	80056fa <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80056ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056ee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80056f8:	e009      	b.n	800570e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2200      	movs	r2, #0
 800570c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	785b      	ldrb	r3, [r3, #1]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d155      	bne.n	80057c2 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	63bb      	str	r3, [r7, #56]	; 0x38
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005724:	b29b      	uxth	r3, r3
 8005726:	461a      	mov	r2, r3
 8005728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572a:	4413      	add	r3, r2
 800572c:	63bb      	str	r3, [r7, #56]	; 0x38
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	011a      	lsls	r2, r3, #4
 8005734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005736:	4413      	add	r3, r2
 8005738:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800573c:	637b      	str	r3, [r7, #52]	; 0x34
 800573e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005740:	2b00      	cmp	r3, #0
 8005742:	d112      	bne.n	800576a <HAL_PCD_EP_DB_Transmit+0x302>
 8005744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	b29b      	uxth	r3, r3
 800574a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800574e:	b29a      	uxth	r2, r3
 8005750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005752:	801a      	strh	r2, [r3, #0]
 8005754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800575e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005762:	b29a      	uxth	r2, r3
 8005764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005766:	801a      	strh	r2, [r3, #0]
 8005768:	e047      	b.n	80057fa <HAL_PCD_EP_DB_Transmit+0x392>
 800576a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800576c:	2b3e      	cmp	r3, #62	; 0x3e
 800576e:	d811      	bhi.n	8005794 <HAL_PCD_EP_DB_Transmit+0x32c>
 8005770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005772:	085b      	lsrs	r3, r3, #1
 8005774:	64bb      	str	r3, [r7, #72]	; 0x48
 8005776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005782:	3301      	adds	r3, #1
 8005784:	64bb      	str	r3, [r7, #72]	; 0x48
 8005786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005788:	b29b      	uxth	r3, r3
 800578a:	029b      	lsls	r3, r3, #10
 800578c:	b29a      	uxth	r2, r3
 800578e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005790:	801a      	strh	r2, [r3, #0]
 8005792:	e032      	b.n	80057fa <HAL_PCD_EP_DB_Transmit+0x392>
 8005794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	64bb      	str	r3, [r7, #72]	; 0x48
 800579a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800579c:	f003 031f 	and.w	r3, r3, #31
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d102      	bne.n	80057aa <HAL_PCD_EP_DB_Transmit+0x342>
 80057a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057a6:	3b01      	subs	r3, #1
 80057a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80057aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	029b      	lsls	r3, r3, #10
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057be:	801a      	strh	r2, [r3, #0]
 80057c0:	e01b      	b.n	80057fa <HAL_PCD_EP_DB_Transmit+0x392>
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	785b      	ldrb	r3, [r3, #1]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d117      	bne.n	80057fa <HAL_PCD_EP_DB_Transmit+0x392>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	643b      	str	r3, [r7, #64]	; 0x40
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057d8:	b29b      	uxth	r3, r3
 80057da:	461a      	mov	r2, r3
 80057dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057de:	4413      	add	r3, r2
 80057e0:	643b      	str	r3, [r7, #64]	; 0x40
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	011a      	lsls	r2, r3, #4
 80057e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ea:	4413      	add	r3, r2
 80057ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6959      	ldr	r1, [r3, #20]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	891a      	ldrh	r2, [r3, #8]
 8005806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005808:	b29b      	uxth	r3, r3
 800580a:	f004 fa46 	bl	8009c9a <USB_WritePMA>
 800580e:	e1d0      	b.n	8005bb2 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005818:	b29b      	uxth	r3, r3
 800581a:	461a      	mov	r2, r3
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	4413      	add	r3, r2
 8005824:	3306      	adds	r3, #6
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	6812      	ldr	r2, [r2, #0]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005838:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	699a      	ldr	r2, [r3, #24]
 8005840:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005844:	429a      	cmp	r2, r3
 8005846:	d307      	bcc.n	8005858 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	699a      	ldr	r2, [r3, #24]
 800584c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005850:	1ad2      	subs	r2, r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	619a      	str	r2, [r3, #24]
 8005856:	e002      	b.n	800585e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2200      	movs	r2, #0
 800585c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	2b00      	cmp	r3, #0
 8005864:	f040 80c4 	bne.w	80059f0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d126      	bne.n	80058be <HAL_PCD_EP_DB_Transmit+0x456>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800587e:	b29b      	uxth	r3, r3
 8005880:	461a      	mov	r2, r3
 8005882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005884:	4413      	add	r3, r2
 8005886:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	011a      	lsls	r2, r3, #4
 800588e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005890:	4413      	add	r3, r2
 8005892:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005896:	66bb      	str	r3, [r7, #104]	; 0x68
 8005898:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	b29b      	uxth	r3, r3
 800589e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058a6:	801a      	strh	r2, [r3, #0]
 80058a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058ba:	801a      	strh	r2, [r3, #0]
 80058bc:	e01a      	b.n	80058f4 <HAL_PCD_EP_DB_Transmit+0x48c>
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	785b      	ldrb	r3, [r3, #1]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d116      	bne.n	80058f4 <HAL_PCD_EP_DB_Transmit+0x48c>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	677b      	str	r3, [r7, #116]	; 0x74
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	461a      	mov	r2, r3
 80058d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058da:	4413      	add	r3, r2
 80058dc:	677b      	str	r3, [r7, #116]	; 0x74
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	011a      	lsls	r2, r3, #4
 80058e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058e6:	4413      	add	r3, r2
 80058e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058ec:	673b      	str	r3, [r7, #112]	; 0x70
 80058ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058f0:	2200      	movs	r2, #0
 80058f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	785b      	ldrb	r3, [r3, #1]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d12f      	bne.n	8005962 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005912:	b29b      	uxth	r3, r3
 8005914:	461a      	mov	r2, r3
 8005916:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800591a:	4413      	add	r3, r2
 800591c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	011a      	lsls	r2, r3, #4
 8005926:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800592a:	4413      	add	r3, r2
 800592c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005934:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	b29b      	uxth	r3, r3
 800593c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005940:	b29a      	uxth	r2, r3
 8005942:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005946:	801a      	strh	r2, [r3, #0]
 8005948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	b29b      	uxth	r3, r3
 8005950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005958:	b29a      	uxth	r2, r3
 800595a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800595e:	801a      	strh	r2, [r3, #0]
 8005960:	e017      	b.n	8005992 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	785b      	ldrb	r3, [r3, #1]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d113      	bne.n	8005992 <HAL_PCD_EP_DB_Transmit+0x52a>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005972:	b29b      	uxth	r3, r3
 8005974:	461a      	mov	r2, r3
 8005976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005978:	4413      	add	r3, r2
 800597a:	67bb      	str	r3, [r7, #120]	; 0x78
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	011a      	lsls	r2, r3, #4
 8005982:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005984:	4413      	add	r3, r2
 8005986:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800598a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800598c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800598e:	2200      	movs	r2, #0
 8005990:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	4619      	mov	r1, r3
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f008 ff1a 	bl	800e7d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800599e:	88fb      	ldrh	r3, [r7, #6]
 80059a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f040 8104 	bne.w	8005bb2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	461a      	mov	r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	461a      	mov	r2, r3
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	441a      	add	r2, r3
 80059d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80059da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	8013      	strh	r3, [r2, #0]
 80059ee:	e0e0      	b.n	8005bb2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80059f0:	88fb      	ldrh	r3, [r7, #6]
 80059f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d121      	bne.n	8005a3e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a14:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	441a      	add	r2, r3
 8005a26:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	f040 80b4 	bne.w	8005bb2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	695a      	ldr	r2, [r3, #20]
 8005a4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a52:	441a      	add	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	69da      	ldr	r2, [r3, #28]
 8005a5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a60:	441a      	add	r2, r3
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	6a1a      	ldr	r2, [r3, #32]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d309      	bcc.n	8005a86 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	6a1a      	ldr	r2, [r3, #32]
 8005a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a7e:	1ad2      	subs	r2, r2, r3
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	621a      	str	r2, [r3, #32]
 8005a84:	e015      	b.n	8005ab2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d107      	bne.n	8005a9e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005a8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a92:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005a9c:	e009      	b.n	8005ab2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	667b      	str	r3, [r7, #100]	; 0x64
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d155      	bne.n	8005b6c <HAL_PCD_EP_DB_Transmit+0x704>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ad4:	4413      	add	r3, r2
 8005ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	011a      	lsls	r2, r3, #4
 8005ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ae6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d112      	bne.n	8005b14 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005aee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005afc:	801a      	strh	r2, [r3, #0]
 8005afe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b10:	801a      	strh	r2, [r3, #0]
 8005b12:	e044      	b.n	8005b9e <HAL_PCD_EP_DB_Transmit+0x736>
 8005b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b16:	2b3e      	cmp	r3, #62	; 0x3e
 8005b18:	d811      	bhi.n	8005b3e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b1c:	085b      	lsrs	r3, r3, #1
 8005b1e:	657b      	str	r3, [r7, #84]	; 0x54
 8005b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	657b      	str	r3, [r7, #84]	; 0x54
 8005b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	029b      	lsls	r3, r3, #10
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b3a:	801a      	strh	r2, [r3, #0]
 8005b3c:	e02f      	b.n	8005b9e <HAL_PCD_EP_DB_Transmit+0x736>
 8005b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b40:	095b      	lsrs	r3, r3, #5
 8005b42:	657b      	str	r3, [r7, #84]	; 0x54
 8005b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b50:	3b01      	subs	r3, #1
 8005b52:	657b      	str	r3, [r7, #84]	; 0x54
 8005b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	029b      	lsls	r3, r3, #10
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b68:	801a      	strh	r2, [r3, #0]
 8005b6a:	e018      	b.n	8005b9e <HAL_PCD_EP_DB_Transmit+0x736>
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	785b      	ldrb	r3, [r3, #1]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d114      	bne.n	8005b9e <HAL_PCD_EP_DB_Transmit+0x736>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b82:	4413      	add	r3, r2
 8005b84:	667b      	str	r3, [r7, #100]	; 0x64
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	011a      	lsls	r2, r3, #4
 8005b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b8e:	4413      	add	r3, r2
 8005b90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b94:	663b      	str	r3, [r7, #96]	; 0x60
 8005b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b9c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6818      	ldr	r0, [r3, #0]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	6959      	ldr	r1, [r3, #20]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	895a      	ldrh	r2, [r3, #10]
 8005baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	f004 f874 	bl	8009c9a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bcc:	823b      	strh	r3, [r7, #16]
 8005bce:	8a3b      	ldrh	r3, [r7, #16]
 8005bd0:	f083 0310 	eor.w	r3, r3, #16
 8005bd4:	823b      	strh	r3, [r7, #16]
 8005bd6:	8a3b      	ldrh	r3, [r7, #16]
 8005bd8:	f083 0320 	eor.w	r3, r3, #32
 8005bdc:	823b      	strh	r3, [r7, #16]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	441a      	add	r2, r3
 8005bec:	8a3b      	ldrh	r3, [r7, #16]
 8005bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3788      	adds	r7, #136	; 0x88
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	607b      	str	r3, [r7, #4]
 8005c16:	460b      	mov	r3, r1
 8005c18:	817b      	strh	r3, [r7, #10]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005c1e:	897b      	ldrh	r3, [r7, #10]
 8005c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00b      	beq.n	8005c42 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c2a:	897b      	ldrh	r3, [r7, #10]
 8005c2c:	f003 0307 	and.w	r3, r3, #7
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	00db      	lsls	r3, r3, #3
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	e009      	b.n	8005c56 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c42:	897a      	ldrh	r2, [r7, #10]
 8005c44:	4613      	mov	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005c56:	893b      	ldrh	r3, [r7, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d107      	bne.n	8005c6c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	80da      	strh	r2, [r3, #6]
 8005c6a:	e00b      	b.n	8005c84 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	0c1b      	lsrs	r3, r3, #16
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr

08005c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e26c      	b.n	800617c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 8087 	beq.w	8005dbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cb0:	4b92      	ldr	r3, [pc, #584]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f003 030c 	and.w	r3, r3, #12
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d00c      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005cbc:	4b8f      	ldr	r3, [pc, #572]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f003 030c 	and.w	r3, r3, #12
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d112      	bne.n	8005cee <HAL_RCC_OscConfig+0x5e>
 8005cc8:	4b8c      	ldr	r3, [pc, #560]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd4:	d10b      	bne.n	8005cee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cd6:	4b89      	ldr	r3, [pc, #548]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d06c      	beq.n	8005dbc <HAL_RCC_OscConfig+0x12c>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d168      	bne.n	8005dbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e246      	b.n	800617c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf6:	d106      	bne.n	8005d06 <HAL_RCC_OscConfig+0x76>
 8005cf8:	4b80      	ldr	r3, [pc, #512]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a7f      	ldr	r2, [pc, #508]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	e02e      	b.n	8005d64 <HAL_RCC_OscConfig+0xd4>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10c      	bne.n	8005d28 <HAL_RCC_OscConfig+0x98>
 8005d0e:	4b7b      	ldr	r3, [pc, #492]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a7a      	ldr	r2, [pc, #488]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	4b78      	ldr	r3, [pc, #480]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a77      	ldr	r2, [pc, #476]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005d20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	e01d      	b.n	8005d64 <HAL_RCC_OscConfig+0xd4>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d30:	d10c      	bne.n	8005d4c <HAL_RCC_OscConfig+0xbc>
 8005d32:	4b72      	ldr	r3, [pc, #456]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a71      	ldr	r2, [pc, #452]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	4b6f      	ldr	r3, [pc, #444]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a6e      	ldr	r2, [pc, #440]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	e00b      	b.n	8005d64 <HAL_RCC_OscConfig+0xd4>
 8005d4c:	4b6b      	ldr	r3, [pc, #428]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a6a      	ldr	r2, [pc, #424]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	4b68      	ldr	r3, [pc, #416]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a67      	ldr	r2, [pc, #412]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d013      	beq.n	8005d94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d6c:	f7fd f914 	bl	8002f98 <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d74:	f7fd f910 	bl	8002f98 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b64      	cmp	r3, #100	; 0x64
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e1fa      	b.n	800617c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d86:	4b5d      	ldr	r3, [pc, #372]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0f0      	beq.n	8005d74 <HAL_RCC_OscConfig+0xe4>
 8005d92:	e014      	b.n	8005dbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d94:	f7fd f900 	bl	8002f98 <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d9c:	f7fd f8fc 	bl	8002f98 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b64      	cmp	r3, #100	; 0x64
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e1e6      	b.n	800617c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dae:	4b53      	ldr	r3, [pc, #332]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0x10c>
 8005dba:	e000      	b.n	8005dbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d063      	beq.n	8005e92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dca:	4b4c      	ldr	r3, [pc, #304]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f003 030c 	and.w	r3, r3, #12
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00b      	beq.n	8005dee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005dd6:	4b49      	ldr	r3, [pc, #292]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f003 030c 	and.w	r3, r3, #12
 8005dde:	2b08      	cmp	r3, #8
 8005de0:	d11c      	bne.n	8005e1c <HAL_RCC_OscConfig+0x18c>
 8005de2:	4b46      	ldr	r3, [pc, #280]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d116      	bne.n	8005e1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dee:	4b43      	ldr	r3, [pc, #268]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <HAL_RCC_OscConfig+0x176>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d001      	beq.n	8005e06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e1ba      	b.n	800617c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e06:	4b3d      	ldr	r3, [pc, #244]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	4939      	ldr	r1, [pc, #228]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e1a:	e03a      	b.n	8005e92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d020      	beq.n	8005e66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e24:	4b36      	ldr	r3, [pc, #216]	; (8005f00 <HAL_RCC_OscConfig+0x270>)
 8005e26:	2201      	movs	r2, #1
 8005e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e2a:	f7fd f8b5 	bl	8002f98 <HAL_GetTick>
 8005e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e30:	e008      	b.n	8005e44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e32:	f7fd f8b1 	bl	8002f98 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e19b      	b.n	800617c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e44:	4b2d      	ldr	r3, [pc, #180]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d0f0      	beq.n	8005e32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e50:	4b2a      	ldr	r3, [pc, #168]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	4927      	ldr	r1, [pc, #156]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	600b      	str	r3, [r1, #0]
 8005e64:	e015      	b.n	8005e92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e66:	4b26      	ldr	r3, [pc, #152]	; (8005f00 <HAL_RCC_OscConfig+0x270>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6c:	f7fd f894 	bl	8002f98 <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e74:	f7fd f890 	bl	8002f98 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e17a      	b.n	800617c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e86:	4b1d      	ldr	r3, [pc, #116]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1f0      	bne.n	8005e74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d03a      	beq.n	8005f14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d019      	beq.n	8005eda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ea6:	4b17      	ldr	r3, [pc, #92]	; (8005f04 <HAL_RCC_OscConfig+0x274>)
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eac:	f7fd f874 	bl	8002f98 <HAL_GetTick>
 8005eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eb4:	f7fd f870 	bl	8002f98 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e15a      	b.n	800617c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	; (8005efc <HAL_RCC_OscConfig+0x26c>)
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f0      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005ed2:	2001      	movs	r0, #1
 8005ed4:	f000 fb0a 	bl	80064ec <RCC_Delay>
 8005ed8:	e01c      	b.n	8005f14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eda:	4b0a      	ldr	r3, [pc, #40]	; (8005f04 <HAL_RCC_OscConfig+0x274>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ee0:	f7fd f85a 	bl	8002f98 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ee6:	e00f      	b.n	8005f08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ee8:	f7fd f856 	bl	8002f98 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d908      	bls.n	8005f08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e140      	b.n	800617c <HAL_RCC_OscConfig+0x4ec>
 8005efa:	bf00      	nop
 8005efc:	40021000 	.word	0x40021000
 8005f00:	42420000 	.word	0x42420000
 8005f04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f08:	4b9e      	ldr	r3, [pc, #632]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e9      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 80a6 	beq.w	800606e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f22:	2300      	movs	r3, #0
 8005f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f26:	4b97      	ldr	r3, [pc, #604]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10d      	bne.n	8005f4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f32:	4b94      	ldr	r3, [pc, #592]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	4a93      	ldr	r2, [pc, #588]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8005f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f3c:	61d3      	str	r3, [r2, #28]
 8005f3e:	4b91      	ldr	r3, [pc, #580]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f46:	60bb      	str	r3, [r7, #8]
 8005f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f4e:	4b8e      	ldr	r3, [pc, #568]	; (8006188 <HAL_RCC_OscConfig+0x4f8>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d118      	bne.n	8005f8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f5a:	4b8b      	ldr	r3, [pc, #556]	; (8006188 <HAL_RCC_OscConfig+0x4f8>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a8a      	ldr	r2, [pc, #552]	; (8006188 <HAL_RCC_OscConfig+0x4f8>)
 8005f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f66:	f7fd f817 	bl	8002f98 <HAL_GetTick>
 8005f6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f6e:	f7fd f813 	bl	8002f98 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b64      	cmp	r3, #100	; 0x64
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e0fd      	b.n	800617c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f80:	4b81      	ldr	r3, [pc, #516]	; (8006188 <HAL_RCC_OscConfig+0x4f8>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0f0      	beq.n	8005f6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d106      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x312>
 8005f94:	4b7b      	ldr	r3, [pc, #492]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	4a7a      	ldr	r2, [pc, #488]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8005f9a:	f043 0301 	orr.w	r3, r3, #1
 8005f9e:	6213      	str	r3, [r2, #32]
 8005fa0:	e02d      	b.n	8005ffe <HAL_RCC_OscConfig+0x36e>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10c      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x334>
 8005faa:	4b76      	ldr	r3, [pc, #472]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	4a75      	ldr	r2, [pc, #468]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8005fb0:	f023 0301 	bic.w	r3, r3, #1
 8005fb4:	6213      	str	r3, [r2, #32]
 8005fb6:	4b73      	ldr	r3, [pc, #460]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	4a72      	ldr	r2, [pc, #456]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8005fbc:	f023 0304 	bic.w	r3, r3, #4
 8005fc0:	6213      	str	r3, [r2, #32]
 8005fc2:	e01c      	b.n	8005ffe <HAL_RCC_OscConfig+0x36e>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	2b05      	cmp	r3, #5
 8005fca:	d10c      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x356>
 8005fcc:	4b6d      	ldr	r3, [pc, #436]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	4a6c      	ldr	r2, [pc, #432]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8005fd2:	f043 0304 	orr.w	r3, r3, #4
 8005fd6:	6213      	str	r3, [r2, #32]
 8005fd8:	4b6a      	ldr	r3, [pc, #424]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	4a69      	ldr	r2, [pc, #420]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8005fde:	f043 0301 	orr.w	r3, r3, #1
 8005fe2:	6213      	str	r3, [r2, #32]
 8005fe4:	e00b      	b.n	8005ffe <HAL_RCC_OscConfig+0x36e>
 8005fe6:	4b67      	ldr	r3, [pc, #412]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	4a66      	ldr	r2, [pc, #408]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8005fec:	f023 0301 	bic.w	r3, r3, #1
 8005ff0:	6213      	str	r3, [r2, #32]
 8005ff2:	4b64      	ldr	r3, [pc, #400]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	4a63      	ldr	r2, [pc, #396]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8005ff8:	f023 0304 	bic.w	r3, r3, #4
 8005ffc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d015      	beq.n	8006032 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006006:	f7fc ffc7 	bl	8002f98 <HAL_GetTick>
 800600a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800600c:	e00a      	b.n	8006024 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800600e:	f7fc ffc3 	bl	8002f98 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	f241 3288 	movw	r2, #5000	; 0x1388
 800601c:	4293      	cmp	r3, r2
 800601e:	d901      	bls.n	8006024 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e0ab      	b.n	800617c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006024:	4b57      	ldr	r3, [pc, #348]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0ee      	beq.n	800600e <HAL_RCC_OscConfig+0x37e>
 8006030:	e014      	b.n	800605c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006032:	f7fc ffb1 	bl	8002f98 <HAL_GetTick>
 8006036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006038:	e00a      	b.n	8006050 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800603a:	f7fc ffad 	bl	8002f98 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	f241 3288 	movw	r2, #5000	; 0x1388
 8006048:	4293      	cmp	r3, r2
 800604a:	d901      	bls.n	8006050 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e095      	b.n	800617c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006050:	4b4c      	ldr	r3, [pc, #304]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1ee      	bne.n	800603a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800605c:	7dfb      	ldrb	r3, [r7, #23]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d105      	bne.n	800606e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006062:	4b48      	ldr	r3, [pc, #288]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	4a47      	ldr	r2, [pc, #284]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8006068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800606c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 8081 	beq.w	800617a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006078:	4b42      	ldr	r3, [pc, #264]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f003 030c 	and.w	r3, r3, #12
 8006080:	2b08      	cmp	r3, #8
 8006082:	d061      	beq.n	8006148 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	2b02      	cmp	r3, #2
 800608a:	d146      	bne.n	800611a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800608c:	4b3f      	ldr	r3, [pc, #252]	; (800618c <HAL_RCC_OscConfig+0x4fc>)
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006092:	f7fc ff81 	bl	8002f98 <HAL_GetTick>
 8006096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006098:	e008      	b.n	80060ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800609a:	f7fc ff7d 	bl	8002f98 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d901      	bls.n	80060ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e067      	b.n	800617c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060ac:	4b35      	ldr	r3, [pc, #212]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1f0      	bne.n	800609a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060c0:	d108      	bne.n	80060d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80060c2:	4b30      	ldr	r3, [pc, #192]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	492d      	ldr	r1, [pc, #180]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060d4:	4b2b      	ldr	r3, [pc, #172]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a19      	ldr	r1, [r3, #32]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	430b      	orrs	r3, r1
 80060e6:	4927      	ldr	r1, [pc, #156]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060ec:	4b27      	ldr	r3, [pc, #156]	; (800618c <HAL_RCC_OscConfig+0x4fc>)
 80060ee:	2201      	movs	r2, #1
 80060f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f2:	f7fc ff51 	bl	8002f98 <HAL_GetTick>
 80060f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060f8:	e008      	b.n	800610c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060fa:	f7fc ff4d 	bl	8002f98 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e037      	b.n	800617c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800610c:	4b1d      	ldr	r3, [pc, #116]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d0f0      	beq.n	80060fa <HAL_RCC_OscConfig+0x46a>
 8006118:	e02f      	b.n	800617a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800611a:	4b1c      	ldr	r3, [pc, #112]	; (800618c <HAL_RCC_OscConfig+0x4fc>)
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006120:	f7fc ff3a 	bl	8002f98 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006128:	f7fc ff36 	bl	8002f98 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e020      	b.n	800617c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800613a:	4b12      	ldr	r3, [pc, #72]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f0      	bne.n	8006128 <HAL_RCC_OscConfig+0x498>
 8006146:	e018      	b.n	800617a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e013      	b.n	800617c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006154:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <HAL_RCC_OscConfig+0x4f4>)
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	429a      	cmp	r2, r3
 8006166:	d106      	bne.n	8006176 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006172:	429a      	cmp	r2, r3
 8006174:	d001      	beq.n	800617a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e000      	b.n	800617c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40021000 	.word	0x40021000
 8006188:	40007000 	.word	0x40007000
 800618c:	42420060 	.word	0x42420060

08006190 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e0d0      	b.n	8006346 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061a4:	4b6a      	ldr	r3, [pc, #424]	; (8006350 <HAL_RCC_ClockConfig+0x1c0>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d910      	bls.n	80061d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061b2:	4b67      	ldr	r3, [pc, #412]	; (8006350 <HAL_RCC_ClockConfig+0x1c0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f023 0207 	bic.w	r2, r3, #7
 80061ba:	4965      	ldr	r1, [pc, #404]	; (8006350 <HAL_RCC_ClockConfig+0x1c0>)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	4313      	orrs	r3, r2
 80061c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061c2:	4b63      	ldr	r3, [pc, #396]	; (8006350 <HAL_RCC_ClockConfig+0x1c0>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d001      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e0b8      	b.n	8006346 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d020      	beq.n	8006222 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061ec:	4b59      	ldr	r3, [pc, #356]	; (8006354 <HAL_RCC_ClockConfig+0x1c4>)
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	4a58      	ldr	r2, [pc, #352]	; (8006354 <HAL_RCC_ClockConfig+0x1c4>)
 80061f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80061f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0308 	and.w	r3, r3, #8
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006204:	4b53      	ldr	r3, [pc, #332]	; (8006354 <HAL_RCC_ClockConfig+0x1c4>)
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	4a52      	ldr	r2, [pc, #328]	; (8006354 <HAL_RCC_ClockConfig+0x1c4>)
 800620a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800620e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006210:	4b50      	ldr	r3, [pc, #320]	; (8006354 <HAL_RCC_ClockConfig+0x1c4>)
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	494d      	ldr	r1, [pc, #308]	; (8006354 <HAL_RCC_ClockConfig+0x1c4>)
 800621e:	4313      	orrs	r3, r2
 8006220:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d040      	beq.n	80062b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d107      	bne.n	8006246 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006236:	4b47      	ldr	r3, [pc, #284]	; (8006354 <HAL_RCC_ClockConfig+0x1c4>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d115      	bne.n	800626e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e07f      	b.n	8006346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b02      	cmp	r3, #2
 800624c:	d107      	bne.n	800625e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800624e:	4b41      	ldr	r3, [pc, #260]	; (8006354 <HAL_RCC_ClockConfig+0x1c4>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d109      	bne.n	800626e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e073      	b.n	8006346 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800625e:	4b3d      	ldr	r3, [pc, #244]	; (8006354 <HAL_RCC_ClockConfig+0x1c4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e06b      	b.n	8006346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800626e:	4b39      	ldr	r3, [pc, #228]	; (8006354 <HAL_RCC_ClockConfig+0x1c4>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f023 0203 	bic.w	r2, r3, #3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	4936      	ldr	r1, [pc, #216]	; (8006354 <HAL_RCC_ClockConfig+0x1c4>)
 800627c:	4313      	orrs	r3, r2
 800627e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006280:	f7fc fe8a 	bl	8002f98 <HAL_GetTick>
 8006284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006286:	e00a      	b.n	800629e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006288:	f7fc fe86 	bl	8002f98 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	f241 3288 	movw	r2, #5000	; 0x1388
 8006296:	4293      	cmp	r3, r2
 8006298:	d901      	bls.n	800629e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e053      	b.n	8006346 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800629e:	4b2d      	ldr	r3, [pc, #180]	; (8006354 <HAL_RCC_ClockConfig+0x1c4>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f003 020c 	and.w	r2, r3, #12
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d1eb      	bne.n	8006288 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062b0:	4b27      	ldr	r3, [pc, #156]	; (8006350 <HAL_RCC_ClockConfig+0x1c0>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d210      	bcs.n	80062e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062be:	4b24      	ldr	r3, [pc, #144]	; (8006350 <HAL_RCC_ClockConfig+0x1c0>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f023 0207 	bic.w	r2, r3, #7
 80062c6:	4922      	ldr	r1, [pc, #136]	; (8006350 <HAL_RCC_ClockConfig+0x1c0>)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ce:	4b20      	ldr	r3, [pc, #128]	; (8006350 <HAL_RCC_ClockConfig+0x1c0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d001      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e032      	b.n	8006346 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d008      	beq.n	80062fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062ec:	4b19      	ldr	r3, [pc, #100]	; (8006354 <HAL_RCC_ClockConfig+0x1c4>)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	4916      	ldr	r1, [pc, #88]	; (8006354 <HAL_RCC_ClockConfig+0x1c4>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0308 	and.w	r3, r3, #8
 8006306:	2b00      	cmp	r3, #0
 8006308:	d009      	beq.n	800631e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800630a:	4b12      	ldr	r3, [pc, #72]	; (8006354 <HAL_RCC_ClockConfig+0x1c4>)
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	490e      	ldr	r1, [pc, #56]	; (8006354 <HAL_RCC_ClockConfig+0x1c4>)
 800631a:	4313      	orrs	r3, r2
 800631c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800631e:	f000 f821 	bl	8006364 <HAL_RCC_GetSysClockFreq>
 8006322:	4602      	mov	r2, r0
 8006324:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <HAL_RCC_ClockConfig+0x1c4>)
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	091b      	lsrs	r3, r3, #4
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	490a      	ldr	r1, [pc, #40]	; (8006358 <HAL_RCC_ClockConfig+0x1c8>)
 8006330:	5ccb      	ldrb	r3, [r1, r3]
 8006332:	fa22 f303 	lsr.w	r3, r2, r3
 8006336:	4a09      	ldr	r2, [pc, #36]	; (800635c <HAL_RCC_ClockConfig+0x1cc>)
 8006338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800633a:	4b09      	ldr	r3, [pc, #36]	; (8006360 <HAL_RCC_ClockConfig+0x1d0>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f7fc fc5e 	bl	8002c00 <HAL_InitTick>

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	40022000 	.word	0x40022000
 8006354:	40021000 	.word	0x40021000
 8006358:	0800f53c 	.word	0x0800f53c
 800635c:	20000010 	.word	0x20000010
 8006360:	20000014 	.word	0x20000014

08006364 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006364:	b490      	push	{r4, r7}
 8006366:	b08a      	sub	sp, #40	; 0x28
 8006368:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800636a:	4b2a      	ldr	r3, [pc, #168]	; (8006414 <HAL_RCC_GetSysClockFreq+0xb0>)
 800636c:	1d3c      	adds	r4, r7, #4
 800636e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006374:	f240 2301 	movw	r3, #513	; 0x201
 8006378:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	61fb      	str	r3, [r7, #28]
 800637e:	2300      	movs	r3, #0
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	2300      	movs	r3, #0
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
 8006386:	2300      	movs	r3, #0
 8006388:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800638e:	4b22      	ldr	r3, [pc, #136]	; (8006418 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	f003 030c 	and.w	r3, r3, #12
 800639a:	2b04      	cmp	r3, #4
 800639c:	d002      	beq.n	80063a4 <HAL_RCC_GetSysClockFreq+0x40>
 800639e:	2b08      	cmp	r3, #8
 80063a0:	d003      	beq.n	80063aa <HAL_RCC_GetSysClockFreq+0x46>
 80063a2:	e02d      	b.n	8006400 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80063a4:	4b1d      	ldr	r3, [pc, #116]	; (800641c <HAL_RCC_GetSysClockFreq+0xb8>)
 80063a6:	623b      	str	r3, [r7, #32]
      break;
 80063a8:	e02d      	b.n	8006406 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	0c9b      	lsrs	r3, r3, #18
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80063b6:	4413      	add	r3, r2
 80063b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80063bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d013      	beq.n	80063f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80063c8:	4b13      	ldr	r3, [pc, #76]	; (8006418 <HAL_RCC_GetSysClockFreq+0xb4>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	0c5b      	lsrs	r3, r3, #17
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80063d6:	4413      	add	r3, r2
 80063d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80063dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	4a0e      	ldr	r2, [pc, #56]	; (800641c <HAL_RCC_GetSysClockFreq+0xb8>)
 80063e2:	fb02 f203 	mul.w	r2, r2, r3
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
 80063ee:	e004      	b.n	80063fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	4a0b      	ldr	r2, [pc, #44]	; (8006420 <HAL_RCC_GetSysClockFreq+0xbc>)
 80063f4:	fb02 f303 	mul.w	r3, r2, r3
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	623b      	str	r3, [r7, #32]
      break;
 80063fe:	e002      	b.n	8006406 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006400:	4b08      	ldr	r3, [pc, #32]	; (8006424 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006402:	623b      	str	r3, [r7, #32]
      break;
 8006404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006406:	6a3b      	ldr	r3, [r7, #32]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3728      	adds	r7, #40	; 0x28
 800640c:	46bd      	mov	sp, r7
 800640e:	bc90      	pop	{r4, r7}
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	0800ef74 	.word	0x0800ef74
 8006418:	40021000 	.word	0x40021000
 800641c:	00f42400 	.word	0x00f42400
 8006420:	003d0900 	.word	0x003d0900
 8006424:	007a1200 	.word	0x007a1200

08006428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800642c:	4b02      	ldr	r3, [pc, #8]	; (8006438 <HAL_RCC_GetHCLKFreq+0x10>)
 800642e:	681b      	ldr	r3, [r3, #0]
}
 8006430:	4618      	mov	r0, r3
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr
 8006438:	20000010 	.word	0x20000010

0800643c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006440:	f7ff fff2 	bl	8006428 <HAL_RCC_GetHCLKFreq>
 8006444:	4602      	mov	r2, r0
 8006446:	4b05      	ldr	r3, [pc, #20]	; (800645c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	0a1b      	lsrs	r3, r3, #8
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	4903      	ldr	r1, [pc, #12]	; (8006460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006452:	5ccb      	ldrb	r3, [r1, r3]
 8006454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006458:	4618      	mov	r0, r3
 800645a:	bd80      	pop	{r7, pc}
 800645c:	40021000 	.word	0x40021000
 8006460:	0800f54c 	.word	0x0800f54c

08006464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006468:	f7ff ffde 	bl	8006428 <HAL_RCC_GetHCLKFreq>
 800646c:	4602      	mov	r2, r0
 800646e:	4b05      	ldr	r3, [pc, #20]	; (8006484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	0adb      	lsrs	r3, r3, #11
 8006474:	f003 0307 	and.w	r3, r3, #7
 8006478:	4903      	ldr	r1, [pc, #12]	; (8006488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800647a:	5ccb      	ldrb	r3, [r1, r3]
 800647c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006480:	4618      	mov	r0, r3
 8006482:	bd80      	pop	{r7, pc}
 8006484:	40021000 	.word	0x40021000
 8006488:	0800f54c 	.word	0x0800f54c

0800648c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	220f      	movs	r2, #15
 800649a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800649c:	4b11      	ldr	r3, [pc, #68]	; (80064e4 <HAL_RCC_GetClockConfig+0x58>)
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f003 0203 	and.w	r2, r3, #3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80064a8:	4b0e      	ldr	r3, [pc, #56]	; (80064e4 <HAL_RCC_GetClockConfig+0x58>)
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80064b4:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <HAL_RCC_GetClockConfig+0x58>)
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80064c0:	4b08      	ldr	r3, [pc, #32]	; (80064e4 <HAL_RCC_GetClockConfig+0x58>)
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	08db      	lsrs	r3, r3, #3
 80064c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064ce:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <HAL_RCC_GetClockConfig+0x5c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0207 	and.w	r2, r3, #7
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr
 80064e4:	40021000 	.word	0x40021000
 80064e8:	40022000 	.word	0x40022000

080064ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80064f4:	4b0a      	ldr	r3, [pc, #40]	; (8006520 <RCC_Delay+0x34>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a0a      	ldr	r2, [pc, #40]	; (8006524 <RCC_Delay+0x38>)
 80064fa:	fba2 2303 	umull	r2, r3, r2, r3
 80064fe:	0a5b      	lsrs	r3, r3, #9
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	fb02 f303 	mul.w	r3, r2, r3
 8006506:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006508:	bf00      	nop
  }
  while (Delay --);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	1e5a      	subs	r2, r3, #1
 800650e:	60fa      	str	r2, [r7, #12]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1f9      	bne.n	8006508 <RCC_Delay+0x1c>
}
 8006514:	bf00      	nop
 8006516:	bf00      	nop
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr
 8006520:	20000010 	.word	0x20000010
 8006524:	10624dd3 	.word	0x10624dd3

08006528 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	613b      	str	r3, [r7, #16]
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d07d      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006544:	2300      	movs	r3, #0
 8006546:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006548:	4b4f      	ldr	r3, [pc, #316]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10d      	bne.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006554:	4b4c      	ldr	r3, [pc, #304]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	4a4b      	ldr	r2, [pc, #300]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800655a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800655e:	61d3      	str	r3, [r2, #28]
 8006560:	4b49      	ldr	r3, [pc, #292]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006568:	60bb      	str	r3, [r7, #8]
 800656a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800656c:	2301      	movs	r3, #1
 800656e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006570:	4b46      	ldr	r3, [pc, #280]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006578:	2b00      	cmp	r3, #0
 800657a:	d118      	bne.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800657c:	4b43      	ldr	r3, [pc, #268]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a42      	ldr	r2, [pc, #264]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006586:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006588:	f7fc fd06 	bl	8002f98 <HAL_GetTick>
 800658c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800658e:	e008      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006590:	f7fc fd02 	bl	8002f98 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b64      	cmp	r3, #100	; 0x64
 800659c:	d901      	bls.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e06d      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065a2:	4b3a      	ldr	r3, [pc, #232]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0f0      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065ae:	4b36      	ldr	r3, [pc, #216]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d02e      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d027      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065cc:	4b2e      	ldr	r3, [pc, #184]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80065d6:	4b2e      	ldr	r3, [pc, #184]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80065d8:	2201      	movs	r2, #1
 80065da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065dc:	4b2c      	ldr	r3, [pc, #176]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80065e2:	4a29      	ldr	r2, [pc, #164]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d014      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f2:	f7fc fcd1 	bl	8002f98 <HAL_GetTick>
 80065f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f8:	e00a      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065fa:	f7fc fccd 	bl	8002f98 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	f241 3288 	movw	r2, #5000	; 0x1388
 8006608:	4293      	cmp	r3, r2
 800660a:	d901      	bls.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e036      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006610:	4b1d      	ldr	r3, [pc, #116]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0ee      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800661c:	4b1a      	ldr	r3, [pc, #104]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	4917      	ldr	r1, [pc, #92]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800662a:	4313      	orrs	r3, r2
 800662c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800662e:	7dfb      	ldrb	r3, [r7, #23]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d105      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006634:	4b14      	ldr	r3, [pc, #80]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	4a13      	ldr	r2, [pc, #76]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800663a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800663e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d008      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800664c:	4b0e      	ldr	r3, [pc, #56]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	490b      	ldr	r1, [pc, #44]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800665a:	4313      	orrs	r3, r2
 800665c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0310 	and.w	r3, r3, #16
 8006666:	2b00      	cmp	r3, #0
 8006668:	d008      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800666a:	4b07      	ldr	r3, [pc, #28]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	4904      	ldr	r1, [pc, #16]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006678:	4313      	orrs	r3, r2
 800667a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40021000 	.word	0x40021000
 800668c:	40007000 	.word	0x40007000
 8006690:	42420440 	.word	0x42420440

08006694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e076      	b.n	8006794 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d108      	bne.n	80066c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066b6:	d009      	beq.n	80066cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	61da      	str	r2, [r3, #28]
 80066be:	e005      	b.n	80066cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d106      	bne.n	80066ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7fc fa06 	bl	8002af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006702:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800671e:	431a      	orrs	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	431a      	orrs	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	431a      	orrs	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800673c:	431a      	orrs	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006750:	ea42 0103 	orr.w	r1, r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006758:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	0c1a      	lsrs	r2, r3, #16
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f002 0204 	and.w	r2, r2, #4
 8006772:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69da      	ldr	r2, [r3, #28]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006782:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	603b      	str	r3, [r7, #0]
 80067a8:	4613      	mov	r3, r2
 80067aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d101      	bne.n	80067be <HAL_SPI_Transmit+0x22>
 80067ba:	2302      	movs	r3, #2
 80067bc:	e126      	b.n	8006a0c <HAL_SPI_Transmit+0x270>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067c6:	f7fc fbe7 	bl	8002f98 <HAL_GetTick>
 80067ca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80067cc:	88fb      	ldrh	r3, [r7, #6]
 80067ce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d002      	beq.n	80067e2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80067dc:	2302      	movs	r3, #2
 80067de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067e0:	e10b      	b.n	80069fa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <HAL_SPI_Transmit+0x52>
 80067e8:	88fb      	ldrh	r3, [r7, #6]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d102      	bne.n	80067f4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067f2:	e102      	b.n	80069fa <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2203      	movs	r2, #3
 80067f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	88fa      	ldrh	r2, [r7, #6]
 800680c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	88fa      	ldrh	r2, [r7, #6]
 8006812:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800683a:	d10f      	bne.n	800685c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800684a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800685a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006866:	2b40      	cmp	r3, #64	; 0x40
 8006868:	d007      	beq.n	800687a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006878:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006882:	d14b      	bne.n	800691c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <HAL_SPI_Transmit+0xf6>
 800688c:	8afb      	ldrh	r3, [r7, #22]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d13e      	bne.n	8006910 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006896:	881a      	ldrh	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a2:	1c9a      	adds	r2, r3, #2
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068b6:	e02b      	b.n	8006910 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d112      	bne.n	80068ec <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ca:	881a      	ldrh	r2, [r3, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	1c9a      	adds	r2, r3, #2
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80068ea:	e011      	b.n	8006910 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068ec:	f7fc fb54 	bl	8002f98 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d803      	bhi.n	8006904 <HAL_SPI_Transmit+0x168>
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006902:	d102      	bne.n	800690a <HAL_SPI_Transmit+0x16e>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d102      	bne.n	8006910 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800690e:	e074      	b.n	80069fa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1ce      	bne.n	80068b8 <HAL_SPI_Transmit+0x11c>
 800691a:	e04c      	b.n	80069b6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <HAL_SPI_Transmit+0x18e>
 8006924:	8afb      	ldrh	r3, [r7, #22]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d140      	bne.n	80069ac <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	330c      	adds	r3, #12
 8006934:	7812      	ldrb	r2, [r2, #0]
 8006936:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006946:	b29b      	uxth	r3, r3
 8006948:	3b01      	subs	r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006950:	e02c      	b.n	80069ac <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b02      	cmp	r3, #2
 800695e:	d113      	bne.n	8006988 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	330c      	adds	r3, #12
 800696a:	7812      	ldrb	r2, [r2, #0]
 800696c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800697c:	b29b      	uxth	r3, r3
 800697e:	3b01      	subs	r3, #1
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	86da      	strh	r2, [r3, #54]	; 0x36
 8006986:	e011      	b.n	80069ac <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006988:	f7fc fb06 	bl	8002f98 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	429a      	cmp	r2, r3
 8006996:	d803      	bhi.n	80069a0 <HAL_SPI_Transmit+0x204>
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699e:	d102      	bne.n	80069a6 <HAL_SPI_Transmit+0x20a>
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d102      	bne.n	80069ac <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80069aa:	e026      	b.n	80069fa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1cd      	bne.n	8006952 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069b6:	69ba      	ldr	r2, [r7, #24]
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 f8b2 	bl	8006b24 <SPI_EndRxTxTransaction>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d002      	beq.n	80069cc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2220      	movs	r2, #32
 80069ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10a      	bne.n	80069ea <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069d4:	2300      	movs	r3, #0
 80069d6:	613b      	str	r3, [r7, #16]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	613b      	str	r3, [r7, #16]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	613b      	str	r3, [r7, #16]
 80069e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	77fb      	strb	r3, [r7, #31]
 80069f6:	e000      	b.n	80069fa <HAL_SPI_Transmit+0x25e>
  }

error:
 80069f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3720      	adds	r7, #32
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b088      	sub	sp, #32
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	603b      	str	r3, [r7, #0]
 8006a20:	4613      	mov	r3, r2
 8006a22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a24:	f7fc fab8 	bl	8002f98 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2c:	1a9b      	subs	r3, r3, r2
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	4413      	add	r3, r2
 8006a32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a34:	f7fc fab0 	bl	8002f98 <HAL_GetTick>
 8006a38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a3a:	4b39      	ldr	r3, [pc, #228]	; (8006b20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	015b      	lsls	r3, r3, #5
 8006a40:	0d1b      	lsrs	r3, r3, #20
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	fb02 f303 	mul.w	r3, r2, r3
 8006a48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a4a:	e054      	b.n	8006af6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a52:	d050      	beq.n	8006af6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a54:	f7fc faa0 	bl	8002f98 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	69fa      	ldr	r2, [r7, #28]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d902      	bls.n	8006a6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d13d      	bne.n	8006ae6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a82:	d111      	bne.n	8006aa8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a8c:	d004      	beq.n	8006a98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a96:	d107      	bne.n	8006aa8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aa6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ab0:	d10f      	bne.n	8006ad2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ad0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e017      	b.n	8006b16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d101      	bne.n	8006af0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	3b01      	subs	r3, #1
 8006af4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4013      	ands	r3, r2
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	bf0c      	ite	eq
 8006b06:	2301      	moveq	r3, #1
 8006b08:	2300      	movne	r3, #0
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	79fb      	ldrb	r3, [r7, #7]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d19b      	bne.n	8006a4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3720      	adds	r7, #32
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000010 	.word	0x20000010

08006b24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af02      	add	r7, sp, #8
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2200      	movs	r2, #0
 8006b38:	2180      	movs	r1, #128	; 0x80
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f7ff ff6a 	bl	8006a14 <SPI_WaitFlagStateUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d007      	beq.n	8006b56 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4a:	f043 0220 	orr.w	r2, r3, #32
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e000      	b.n	8006b58 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e041      	b.n	8006bf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f839 	bl	8006bfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	f000 f9b4 	bl	8006f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bc80      	pop	{r7}
 8006c0e:	4770      	bx	lr

08006c10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d001      	beq.n	8006c28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e03a      	b.n	8006c9e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68da      	ldr	r2, [r3, #12]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f042 0201 	orr.w	r2, r2, #1
 8006c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a18      	ldr	r2, [pc, #96]	; (8006ca8 <HAL_TIM_Base_Start_IT+0x98>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d00e      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0x58>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c52:	d009      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0x58>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a14      	ldr	r2, [pc, #80]	; (8006cac <HAL_TIM_Base_Start_IT+0x9c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d004      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0x58>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a13      	ldr	r2, [pc, #76]	; (8006cb0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d111      	bne.n	8006c8c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b06      	cmp	r3, #6
 8006c78:	d010      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f042 0201 	orr.w	r2, r2, #1
 8006c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8a:	e007      	b.n	8006c9c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0201 	orr.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bc80      	pop	{r7}
 8006ca6:	4770      	bx	lr
 8006ca8:	40012c00 	.word	0x40012c00
 8006cac:	40000400 	.word	0x40000400
 8006cb0:	40000800 	.word	0x40000800

08006cb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d122      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d11b      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f06f 0202 	mvn.w	r2, #2
 8006ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	f003 0303 	and.w	r3, r3, #3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f8ed 	bl	8006ed6 <HAL_TIM_IC_CaptureCallback>
 8006cfc:	e005      	b.n	8006d0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f8e0 	bl	8006ec4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f8ef 	bl	8006ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	f003 0304 	and.w	r3, r3, #4
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d122      	bne.n	8006d64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	d11b      	bne.n	8006d64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f06f 0204 	mvn.w	r2, #4
 8006d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2202      	movs	r2, #2
 8006d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f8c3 	bl	8006ed6 <HAL_TIM_IC_CaptureCallback>
 8006d50:	e005      	b.n	8006d5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f8b6 	bl	8006ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f8c5 	bl	8006ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	f003 0308 	and.w	r3, r3, #8
 8006d6e:	2b08      	cmp	r3, #8
 8006d70:	d122      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f003 0308 	and.w	r3, r3, #8
 8006d7c:	2b08      	cmp	r3, #8
 8006d7e:	d11b      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f06f 0208 	mvn.w	r2, #8
 8006d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2204      	movs	r2, #4
 8006d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f899 	bl	8006ed6 <HAL_TIM_IC_CaptureCallback>
 8006da4:	e005      	b.n	8006db2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f88c 	bl	8006ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f89b 	bl	8006ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	f003 0310 	and.w	r3, r3, #16
 8006dc2:	2b10      	cmp	r3, #16
 8006dc4:	d122      	bne.n	8006e0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f003 0310 	and.w	r3, r3, #16
 8006dd0:	2b10      	cmp	r3, #16
 8006dd2:	d11b      	bne.n	8006e0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f06f 0210 	mvn.w	r2, #16
 8006ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2208      	movs	r2, #8
 8006de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f86f 	bl	8006ed6 <HAL_TIM_IC_CaptureCallback>
 8006df8:	e005      	b.n	8006e06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f862 	bl	8006ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f871 	bl	8006ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d10e      	bne.n	8006e38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d107      	bne.n	8006e38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f06f 0201 	mvn.w	r2, #1
 8006e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fa f8c0 	bl	8000fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e42:	2b80      	cmp	r3, #128	; 0x80
 8006e44:	d10e      	bne.n	8006e64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e50:	2b80      	cmp	r3, #128	; 0x80
 8006e52:	d107      	bne.n	8006e64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f8bf 	bl	8006fe2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6e:	2b40      	cmp	r3, #64	; 0x40
 8006e70:	d10e      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7c:	2b40      	cmp	r3, #64	; 0x40
 8006e7e:	d107      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f835 	bl	8006efa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	f003 0320 	and.w	r3, r3, #32
 8006e9a:	2b20      	cmp	r3, #32
 8006e9c:	d10e      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f003 0320 	and.w	r3, r3, #32
 8006ea8:	2b20      	cmp	r3, #32
 8006eaa:	d107      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f06f 0220 	mvn.w	r2, #32
 8006eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f88a 	bl	8006fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ebc:	bf00      	nop
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bc80      	pop	{r7}
 8006ed4:	4770      	bx	lr

08006ed6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ede:	bf00      	nop
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bc80      	pop	{r7}
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bc80      	pop	{r7}
 8006ef8:	4770      	bx	lr

08006efa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bc80      	pop	{r7}
 8006f0a:	4770      	bx	lr

08006f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a29      	ldr	r2, [pc, #164]	; (8006fc4 <TIM_Base_SetConfig+0xb8>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d00b      	beq.n	8006f3c <TIM_Base_SetConfig+0x30>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f2a:	d007      	beq.n	8006f3c <TIM_Base_SetConfig+0x30>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a26      	ldr	r2, [pc, #152]	; (8006fc8 <TIM_Base_SetConfig+0xbc>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <TIM_Base_SetConfig+0x30>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a25      	ldr	r2, [pc, #148]	; (8006fcc <TIM_Base_SetConfig+0xc0>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d108      	bne.n	8006f4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a1c      	ldr	r2, [pc, #112]	; (8006fc4 <TIM_Base_SetConfig+0xb8>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d00b      	beq.n	8006f6e <TIM_Base_SetConfig+0x62>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f5c:	d007      	beq.n	8006f6e <TIM_Base_SetConfig+0x62>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a19      	ldr	r2, [pc, #100]	; (8006fc8 <TIM_Base_SetConfig+0xbc>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d003      	beq.n	8006f6e <TIM_Base_SetConfig+0x62>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a18      	ldr	r2, [pc, #96]	; (8006fcc <TIM_Base_SetConfig+0xc0>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d108      	bne.n	8006f80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a07      	ldr	r2, [pc, #28]	; (8006fc4 <TIM_Base_SetConfig+0xb8>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d103      	bne.n	8006fb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	691a      	ldr	r2, [r3, #16]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	615a      	str	r2, [r3, #20]
}
 8006fba:	bf00      	nop
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bc80      	pop	{r7}
 8006fc2:	4770      	bx	lr
 8006fc4:	40012c00 	.word	0x40012c00
 8006fc8:	40000400 	.word	0x40000400
 8006fcc:	40000800 	.word	0x40000800

08006fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bc80      	pop	{r7}
 8006fe0:	4770      	bx	lr

08006fe2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fea:	bf00      	nop
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bc80      	pop	{r7}
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e03f      	b.n	8007086 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d106      	bne.n	8007020 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7fb feb0 	bl	8002d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2224      	movs	r2, #36	; 0x24
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68da      	ldr	r2, [r3, #12]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007036:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fba9 	bl	8007790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	691a      	ldr	r2, [r3, #16]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800704c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	695a      	ldr	r2, [r3, #20]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800705c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800706c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2220      	movs	r2, #32
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2220      	movs	r2, #32
 8007080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b084      	sub	sp, #16
 8007092:	af00      	add	r7, sp, #0
 8007094:	60f8      	str	r0, [r7, #12]
 8007096:	60b9      	str	r1, [r7, #8]
 8007098:	4613      	mov	r3, r2
 800709a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b20      	cmp	r3, #32
 80070a6:	d11d      	bne.n	80070e4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d002      	beq.n	80070b4 <HAL_UART_Receive_IT+0x26>
 80070ae:	88fb      	ldrh	r3, [r7, #6]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e016      	b.n	80070e6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <HAL_UART_Receive_IT+0x38>
 80070c2:	2302      	movs	r3, #2
 80070c4:	e00f      	b.n	80070e6 <HAL_UART_Receive_IT+0x58>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80070d4:	88fb      	ldrh	r3, [r7, #6]
 80070d6:	461a      	mov	r2, r3
 80070d8:	68b9      	ldr	r1, [r7, #8]
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f000 f9cf 	bl	800747e <UART_Start_Receive_IT>
 80070e0:	4603      	mov	r3, r0
 80070e2:	e000      	b.n	80070e6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80070e4:	2302      	movs	r3, #2
  }
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08a      	sub	sp, #40	; 0x28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007110:	2300      	movs	r3, #0
 8007112:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007114:	2300      	movs	r3, #0
 8007116:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	f003 030f 	and.w	r3, r3, #15
 800711e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10d      	bne.n	8007142 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	f003 0320 	and.w	r3, r3, #32
 800712c:	2b00      	cmp	r3, #0
 800712e:	d008      	beq.n	8007142 <HAL_UART_IRQHandler+0x52>
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa7f 	bl	800763e <UART_Receive_IT>
      return;
 8007140:	e17b      	b.n	800743a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 80b1 	beq.w	80072ac <HAL_UART_IRQHandler+0x1bc>
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b00      	cmp	r3, #0
 8007152:	d105      	bne.n	8007160 <HAL_UART_IRQHandler+0x70>
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 80a6 	beq.w	80072ac <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <HAL_UART_IRQHandler+0x90>
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007178:	f043 0201 	orr.w	r2, r3, #1
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	f003 0304 	and.w	r3, r3, #4
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <HAL_UART_IRQHandler+0xb0>
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007198:	f043 0202 	orr.w	r2, r3, #2
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00a      	beq.n	80071c0 <HAL_UART_IRQHandler+0xd0>
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d005      	beq.n	80071c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b8:	f043 0204 	orr.w	r2, r3, #4
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00f      	beq.n	80071ea <HAL_UART_IRQHandler+0xfa>
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	f003 0320 	and.w	r3, r3, #32
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d104      	bne.n	80071de <HAL_UART_IRQHandler+0xee>
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d005      	beq.n	80071ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	f043 0208 	orr.w	r2, r3, #8
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 811e 	beq.w	8007430 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	f003 0320 	and.w	r3, r3, #32
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d007      	beq.n	800720e <HAL_UART_IRQHandler+0x11e>
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	f003 0320 	and.w	r3, r3, #32
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fa18 	bl	800763e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007218:	2b00      	cmp	r3, #0
 800721a:	bf14      	ite	ne
 800721c:	2301      	movne	r3, #1
 800721e:	2300      	moveq	r3, #0
 8007220:	b2db      	uxtb	r3, r3
 8007222:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b00      	cmp	r3, #0
 800722e:	d102      	bne.n	8007236 <HAL_UART_IRQHandler+0x146>
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d031      	beq.n	800729a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f95a 	bl	80074f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007246:	2b00      	cmp	r3, #0
 8007248:	d023      	beq.n	8007292 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	695a      	ldr	r2, [r3, #20]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007258:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725e:	2b00      	cmp	r3, #0
 8007260:	d013      	beq.n	800728a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007266:	4a76      	ldr	r2, [pc, #472]	; (8007440 <HAL_UART_IRQHandler+0x350>)
 8007268:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726e:	4618      	mov	r0, r3
 8007270:	f7fb ffb6 	bl	80031e0 <HAL_DMA_Abort_IT>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d016      	beq.n	80072a8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007284:	4610      	mov	r0, r2
 8007286:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007288:	e00e      	b.n	80072a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f8e3 	bl	8007456 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007290:	e00a      	b.n	80072a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f8df 	bl	8007456 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007298:	e006      	b.n	80072a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f8db 	bl	8007456 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80072a6:	e0c3      	b.n	8007430 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a8:	bf00      	nop
    return;
 80072aa:	e0c1      	b.n	8007430 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	f040 80a1 	bne.w	80073f8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	f003 0310 	and.w	r3, r3, #16
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 809b 	beq.w	80073f8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80072c2:	6a3b      	ldr	r3, [r7, #32]
 80072c4:	f003 0310 	and.w	r3, r3, #16
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 8095 	beq.w	80073f8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	60fb      	str	r3, [r7, #12]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	60fb      	str	r3, [r7, #12]
 80072e2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d04e      	beq.n	8007390 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80072fc:	8a3b      	ldrh	r3, [r7, #16]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f000 8098 	beq.w	8007434 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007308:	8a3a      	ldrh	r2, [r7, #16]
 800730a:	429a      	cmp	r2, r3
 800730c:	f080 8092 	bcs.w	8007434 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	8a3a      	ldrh	r2, [r7, #16]
 8007314:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	2b20      	cmp	r3, #32
 800731e:	d02b      	beq.n	8007378 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800732e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695a      	ldr	r2, [r3, #20]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0201 	bic.w	r2, r2, #1
 800733e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	695a      	ldr	r2, [r3, #20]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800734e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2220      	movs	r2, #32
 8007354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0210 	bic.w	r2, r2, #16
 800736c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007372:	4618      	mov	r0, r3
 8007374:	f7fb fef9 	bl	800316a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007380:	b29b      	uxth	r3, r3
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	b29b      	uxth	r3, r3
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f86d 	bl	8007468 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800738e:	e051      	b.n	8007434 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007398:	b29b      	uxth	r3, r3
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d047      	beq.n	8007438 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80073a8:	8a7b      	ldrh	r3, [r7, #18]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d044      	beq.n	8007438 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68da      	ldr	r2, [r3, #12]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80073bc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	695a      	ldr	r2, [r3, #20]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 0201 	bic.w	r2, r2, #1
 80073cc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f022 0210 	bic.w	r2, r2, #16
 80073ea:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073ec:	8a7b      	ldrh	r3, [r7, #18]
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f839 	bl	8007468 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80073f6:	e01f      	b.n	8007438 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d008      	beq.n	8007414 <HAL_UART_IRQHandler+0x324>
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f8af 	bl	8007570 <UART_Transmit_IT>
    return;
 8007412:	e012      	b.n	800743a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00d      	beq.n	800743a <HAL_UART_IRQHandler+0x34a>
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007424:	2b00      	cmp	r3, #0
 8007426:	d008      	beq.n	800743a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f8f0 	bl	800760e <UART_EndTransmit_IT>
    return;
 800742e:	e004      	b.n	800743a <HAL_UART_IRQHandler+0x34a>
    return;
 8007430:	bf00      	nop
 8007432:	e002      	b.n	800743a <HAL_UART_IRQHandler+0x34a>
      return;
 8007434:	bf00      	nop
 8007436:	e000      	b.n	800743a <HAL_UART_IRQHandler+0x34a>
      return;
 8007438:	bf00      	nop
  }
}
 800743a:	3728      	adds	r7, #40	; 0x28
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	08007549 	.word	0x08007549

08007444 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	bc80      	pop	{r7}
 8007454:	4770      	bx	lr

08007456 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007456:	b480      	push	{r7}
 8007458:	b083      	sub	sp, #12
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800745e:	bf00      	nop
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	bc80      	pop	{r7}
 8007466:	4770      	bx	lr

08007468 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	460b      	mov	r3, r1
 8007472:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	bc80      	pop	{r7}
 800747c:	4770      	bx	lr

0800747e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800747e:	b480      	push	{r7}
 8007480:	b085      	sub	sp, #20
 8007482:	af00      	add	r7, sp, #0
 8007484:	60f8      	str	r0, [r7, #12]
 8007486:	60b9      	str	r1, [r7, #8]
 8007488:	4613      	mov	r3, r2
 800748a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	88fa      	ldrh	r2, [r7, #6]
 8007496:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	88fa      	ldrh	r2, [r7, #6]
 800749c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2222      	movs	r2, #34	; 0x22
 80074a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68da      	ldr	r2, [r3, #12]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074c2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	695a      	ldr	r2, [r3, #20]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f042 0201 	orr.w	r2, r2, #1
 80074d2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f042 0220 	orr.w	r2, r2, #32
 80074e2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bc80      	pop	{r7}
 80074ee:	4770      	bx	lr

080074f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68da      	ldr	r2, [r3, #12]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007506:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	695a      	ldr	r2, [r3, #20]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0201 	bic.w	r2, r2, #1
 8007516:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751c:	2b01      	cmp	r3, #1
 800751e:	d107      	bne.n	8007530 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68da      	ldr	r2, [r3, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 0210 	bic.w	r2, r2, #16
 800752e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2220      	movs	r2, #32
 8007534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800753e:	bf00      	nop
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	bc80      	pop	{r7}
 8007546:	4770      	bx	lr

08007548 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f7ff ff77 	bl	8007456 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007568:	bf00      	nop
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b21      	cmp	r3, #33	; 0x21
 8007582:	d13e      	bne.n	8007602 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800758c:	d114      	bne.n	80075b8 <UART_Transmit_IT+0x48>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d110      	bne.n	80075b8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	461a      	mov	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	1c9a      	adds	r2, r3, #2
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	621a      	str	r2, [r3, #32]
 80075b6:	e008      	b.n	80075ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	1c59      	adds	r1, r3, #1
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6211      	str	r1, [r2, #32]
 80075c2:	781a      	ldrb	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	3b01      	subs	r3, #1
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	4619      	mov	r1, r3
 80075d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10f      	bne.n	80075fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68da      	ldr	r2, [r3, #12]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68da      	ldr	r2, [r3, #12]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	e000      	b.n	8007604 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007602:	2302      	movs	r3, #2
  }
}
 8007604:	4618      	mov	r0, r3
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	bc80      	pop	{r7}
 800760c:	4770      	bx	lr

0800760e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b082      	sub	sp, #8
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68da      	ldr	r2, [r3, #12]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007624:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2220      	movs	r2, #32
 800762a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff ff08 	bl	8007444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b086      	sub	sp, #24
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b22      	cmp	r3, #34	; 0x22
 8007650:	f040 8099 	bne.w	8007786 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800765c:	d117      	bne.n	800768e <UART_Receive_IT+0x50>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d113      	bne.n	800768e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007666:	2300      	movs	r3, #0
 8007668:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	b29b      	uxth	r3, r3
 8007678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767c:	b29a      	uxth	r2, r3
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007686:	1c9a      	adds	r2, r3, #2
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	629a      	str	r2, [r3, #40]	; 0x28
 800768c:	e026      	b.n	80076dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007692:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007694:	2300      	movs	r3, #0
 8007696:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a0:	d007      	beq.n	80076b2 <UART_Receive_IT+0x74>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10a      	bne.n	80076c0 <UART_Receive_IT+0x82>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d106      	bne.n	80076c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	701a      	strb	r2, [r3, #0]
 80076be:	e008      	b.n	80076d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	3b01      	subs	r3, #1
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	4619      	mov	r1, r3
 80076ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d148      	bne.n	8007782 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68da      	ldr	r2, [r3, #12]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 0220 	bic.w	r2, r2, #32
 80076fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68da      	ldr	r2, [r3, #12]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800770e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	695a      	ldr	r2, [r3, #20]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0201 	bic.w	r2, r2, #1
 800771e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2220      	movs	r2, #32
 8007724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772c:	2b01      	cmp	r3, #1
 800772e:	d123      	bne.n	8007778 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0210 	bic.w	r2, r2, #16
 8007744:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0310 	and.w	r3, r3, #16
 8007750:	2b10      	cmp	r3, #16
 8007752:	d10a      	bne.n	800776a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007754:	2300      	movs	r3, #0
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff fe79 	bl	8007468 <HAL_UARTEx_RxEventCallback>
 8007776:	e002      	b.n	800777e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7f9 f9ed 	bl	8000b58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	e002      	b.n	8007788 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	e000      	b.n	8007788 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007786:	2302      	movs	r3, #2
  }
}
 8007788:	4618      	mov	r0, r3
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689a      	ldr	r2, [r3, #8]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	431a      	orrs	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80077ca:	f023 030c 	bic.w	r3, r3, #12
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	6812      	ldr	r2, [r2, #0]
 80077d2:	68b9      	ldr	r1, [r7, #8]
 80077d4:	430b      	orrs	r3, r1
 80077d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	699a      	ldr	r2, [r3, #24]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a2c      	ldr	r2, [pc, #176]	; (80078a4 <UART_SetConfig+0x114>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d103      	bne.n	8007800 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80077f8:	f7fe fe34 	bl	8006464 <HAL_RCC_GetPCLK2Freq>
 80077fc:	60f8      	str	r0, [r7, #12]
 80077fe:	e002      	b.n	8007806 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007800:	f7fe fe1c 	bl	800643c <HAL_RCC_GetPCLK1Freq>
 8007804:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	4613      	mov	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	009a      	lsls	r2, r3, #2
 8007810:	441a      	add	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	fbb2 f3f3 	udiv	r3, r2, r3
 800781c:	4a22      	ldr	r2, [pc, #136]	; (80078a8 <UART_SetConfig+0x118>)
 800781e:	fba2 2303 	umull	r2, r3, r2, r3
 8007822:	095b      	lsrs	r3, r3, #5
 8007824:	0119      	lsls	r1, r3, #4
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	4613      	mov	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	009a      	lsls	r2, r3, #2
 8007830:	441a      	add	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	fbb2 f2f3 	udiv	r2, r2, r3
 800783c:	4b1a      	ldr	r3, [pc, #104]	; (80078a8 <UART_SetConfig+0x118>)
 800783e:	fba3 0302 	umull	r0, r3, r3, r2
 8007842:	095b      	lsrs	r3, r3, #5
 8007844:	2064      	movs	r0, #100	; 0x64
 8007846:	fb00 f303 	mul.w	r3, r0, r3
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	011b      	lsls	r3, r3, #4
 800784e:	3332      	adds	r3, #50	; 0x32
 8007850:	4a15      	ldr	r2, [pc, #84]	; (80078a8 <UART_SetConfig+0x118>)
 8007852:	fba2 2303 	umull	r2, r3, r2, r3
 8007856:	095b      	lsrs	r3, r3, #5
 8007858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800785c:	4419      	add	r1, r3
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	4613      	mov	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	009a      	lsls	r2, r3, #2
 8007868:	441a      	add	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	fbb2 f2f3 	udiv	r2, r2, r3
 8007874:	4b0c      	ldr	r3, [pc, #48]	; (80078a8 <UART_SetConfig+0x118>)
 8007876:	fba3 0302 	umull	r0, r3, r3, r2
 800787a:	095b      	lsrs	r3, r3, #5
 800787c:	2064      	movs	r0, #100	; 0x64
 800787e:	fb00 f303 	mul.w	r3, r0, r3
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	011b      	lsls	r3, r3, #4
 8007886:	3332      	adds	r3, #50	; 0x32
 8007888:	4a07      	ldr	r2, [pc, #28]	; (80078a8 <UART_SetConfig+0x118>)
 800788a:	fba2 2303 	umull	r2, r3, r2, r3
 800788e:	095b      	lsrs	r3, r3, #5
 8007890:	f003 020f 	and.w	r2, r3, #15
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	440a      	add	r2, r1
 800789a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800789c:	bf00      	nop
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	40013800 	.word	0x40013800
 80078a8:	51eb851f 	.word	0x51eb851f

080078ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80078ac:	b084      	sub	sp, #16
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	f107 0014 	add.w	r0, r7, #20
 80078ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bc80      	pop	{r7}
 80078c8:	b004      	add	sp, #16
 80078ca:	4770      	bx	lr

080078cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80078dc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80078e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bc80      	pop	{r7}
 80078f6:	4770      	bx	lr

080078f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007900:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007904:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800790c:	b29a      	uxth	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	b29b      	uxth	r3, r3
 8007912:	43db      	mvns	r3, r3
 8007914:	b29b      	uxth	r3, r3
 8007916:	4013      	ands	r3, r2
 8007918:	b29a      	uxth	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3714      	adds	r7, #20
 8007926:	46bd      	mov	sp, r7
 8007928:	bc80      	pop	{r7}
 800792a:	4770      	bx	lr

0800792c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	460b      	mov	r3, r1
 8007936:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	bc80      	pop	{r7}
 8007942:	4770      	bx	lr

08007944 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007944:	b084      	sub	sp, #16
 8007946:	b480      	push	{r7}
 8007948:	b083      	sub	sp, #12
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	f107 0014 	add.w	r0, r7, #20
 8007952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	b004      	add	sp, #16
 8007982:	4770      	bx	lr

08007984 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007984:	b480      	push	{r7}
 8007986:	b09b      	sub	sp, #108	; 0x6c
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80079a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079aa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	78db      	ldrb	r3, [r3, #3]
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d81f      	bhi.n	80079f6 <USB_ActivateEndpoint+0x72>
 80079b6:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <USB_ActivateEndpoint+0x38>)
 80079b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079bc:	080079cd 	.word	0x080079cd
 80079c0:	080079e9 	.word	0x080079e9
 80079c4:	080079ff 	.word	0x080079ff
 80079c8:	080079db 	.word	0x080079db
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80079cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80079d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079d4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80079d8:	e012      	b.n	8007a00 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80079da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80079de:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80079e2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80079e6:	e00b      	b.n	8007a00 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80079e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80079ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80079f0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80079f4:	e004      	b.n	8007a00 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80079fc:	e000      	b.n	8007a00 <USB_ActivateEndpoint+0x7c>
      break;
 80079fe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	441a      	add	r2, r3
 8007a0a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	4313      	orrs	r3, r2
 8007a42:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	441a      	add	r2, r3
 8007a50:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	7b1b      	ldrb	r3, [r3, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f040 8149 	bne.w	8007d04 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	785b      	ldrb	r3, [r3, #1]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 8084 	beq.w	8007b84 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	617b      	str	r3, [r7, #20]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	461a      	mov	r2, r3
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	617b      	str	r3, [r7, #20]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	011a      	lsls	r2, r3, #4
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a9e:	613b      	str	r3, [r7, #16]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	88db      	ldrh	r3, [r3, #6]
 8007aa4:	085b      	lsrs	r3, r3, #1
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4413      	add	r3, r2
 8007aba:	881b      	ldrh	r3, [r3, #0]
 8007abc:	81fb      	strh	r3, [r7, #14]
 8007abe:	89fb      	ldrh	r3, [r7, #14]
 8007ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d01b      	beq.n	8007b00 <USB_ActivateEndpoint+0x17c>
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	881b      	ldrh	r3, [r3, #0]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ade:	81bb      	strh	r3, [r7, #12]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	441a      	add	r2, r3
 8007aea:	89bb      	ldrh	r3, [r7, #12]
 8007aec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007af0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007af8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	78db      	ldrb	r3, [r3, #3]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d020      	beq.n	8007b4a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b1e:	813b      	strh	r3, [r7, #8]
 8007b20:	893b      	ldrh	r3, [r7, #8]
 8007b22:	f083 0320 	eor.w	r3, r3, #32
 8007b26:	813b      	strh	r3, [r7, #8]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	441a      	add	r2, r3
 8007b32:	893b      	ldrh	r3, [r7, #8]
 8007b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	8013      	strh	r3, [r2, #0]
 8007b48:	e27f      	b.n	800804a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	881b      	ldrh	r3, [r3, #0]
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b60:	817b      	strh	r3, [r7, #10]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	441a      	add	r2, r3
 8007b6c:	897b      	ldrh	r3, [r7, #10]
 8007b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	8013      	strh	r3, [r2, #0]
 8007b82:	e262      	b.n	800804a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	461a      	mov	r2, r3
 8007b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b94:	4413      	add	r3, r2
 8007b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	011a      	lsls	r2, r3, #4
 8007b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	88db      	ldrh	r3, [r3, #6]
 8007bac:	085b      	lsrs	r3, r3, #1
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	005b      	lsls	r3, r3, #1
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	627b      	str	r3, [r7, #36]	; 0x24
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	4413      	add	r3, r2
 8007bca:	627b      	str	r3, [r7, #36]	; 0x24
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	011a      	lsls	r2, r3, #4
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bda:	623b      	str	r3, [r7, #32]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d112      	bne.n	8007c0a <USB_ActivateEndpoint+0x286>
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	881b      	ldrh	r3, [r3, #0]
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	801a      	strh	r2, [r3, #0]
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	881b      	ldrh	r3, [r3, #0]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	6a3b      	ldr	r3, [r7, #32]
 8007c06:	801a      	strh	r2, [r3, #0]
 8007c08:	e02f      	b.n	8007c6a <USB_ActivateEndpoint+0x2e6>
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c10:	d813      	bhi.n	8007c3a <USB_ActivateEndpoint+0x2b6>
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	085b      	lsrs	r3, r3, #1
 8007c18:	663b      	str	r3, [r7, #96]	; 0x60
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d002      	beq.n	8007c2c <USB_ActivateEndpoint+0x2a8>
 8007c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c28:	3301      	adds	r3, #1
 8007c2a:	663b      	str	r3, [r7, #96]	; 0x60
 8007c2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	029b      	lsls	r3, r3, #10
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	801a      	strh	r2, [r3, #0]
 8007c38:	e017      	b.n	8007c6a <USB_ActivateEndpoint+0x2e6>
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	095b      	lsrs	r3, r3, #5
 8007c40:	663b      	str	r3, [r7, #96]	; 0x60
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	f003 031f 	and.w	r3, r3, #31
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d102      	bne.n	8007c54 <USB_ActivateEndpoint+0x2d0>
 8007c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c50:	3b01      	subs	r3, #1
 8007c52:	663b      	str	r3, [r7, #96]	; 0x60
 8007c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	029b      	lsls	r3, r3, #10
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	83fb      	strh	r3, [r7, #30]
 8007c78:	8bfb      	ldrh	r3, [r7, #30]
 8007c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d01b      	beq.n	8007cba <USB_ActivateEndpoint+0x336>
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c98:	83bb      	strh	r3, [r7, #28]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	441a      	add	r2, r3
 8007ca4:	8bbb      	ldrh	r3, [r7, #28]
 8007ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd0:	837b      	strh	r3, [r7, #26]
 8007cd2:	8b7b      	ldrh	r3, [r7, #26]
 8007cd4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007cd8:	837b      	strh	r3, [r7, #26]
 8007cda:	8b7b      	ldrh	r3, [r7, #26]
 8007cdc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ce0:	837b      	strh	r3, [r7, #26]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	441a      	add	r2, r3
 8007cec:	8b7b      	ldrh	r3, [r7, #26]
 8007cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	8013      	strh	r3, [r2, #0]
 8007d02:	e1a2      	b.n	800804a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	881b      	ldrh	r3, [r3, #0]
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	441a      	add	r2, r3
 8007d28:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d34:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d50:	4413      	add	r3, r2
 8007d52:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	011a      	lsls	r2, r3, #4
 8007d5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d62:	657b      	str	r3, [r7, #84]	; 0x54
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	891b      	ldrh	r3, [r3, #8]
 8007d68:	085b      	lsrs	r3, r3, #1
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	005b      	lsls	r3, r3, #1
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d72:	801a      	strh	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	653b      	str	r3, [r7, #80]	; 0x50
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d84:	4413      	add	r3, r2
 8007d86:	653b      	str	r3, [r7, #80]	; 0x50
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	011a      	lsls	r2, r3, #4
 8007d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	895b      	ldrh	r3, [r3, #10]
 8007d9c:	085b      	lsrs	r3, r3, #1
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	005b      	lsls	r3, r3, #1
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007da6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	785b      	ldrb	r3, [r3, #1]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f040 8091 	bne.w	8007ed4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007dc0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d01b      	beq.n	8007e02 <USB_ActivateEndpoint+0x47e>
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	441a      	add	r2, r3
 8007dec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007df6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	873b      	strh	r3, [r7, #56]	; 0x38
 8007e10:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d01b      	beq.n	8007e52 <USB_ActivateEndpoint+0x4ce>
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e30:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	441a      	add	r2, r3
 8007e3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e68:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007e6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007e6c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e70:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007e72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007e74:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e78:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	441a      	add	r2, r3
 8007e84:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eb0:	867b      	strh	r3, [r7, #50]	; 0x32
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	441a      	add	r2, r3
 8007ebc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	8013      	strh	r3, [r2, #0]
 8007ed2:	e0ba      	b.n	800804a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007ee4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d01d      	beq.n	8007f2c <USB_ActivateEndpoint+0x5a8>
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f06:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	441a      	add	r2, r3
 8007f14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007f3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d01d      	beq.n	8007f84 <USB_ActivateEndpoint+0x600>
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	441a      	add	r2, r3
 8007f6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	78db      	ldrb	r3, [r3, #3]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d024      	beq.n	8007fd6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fa2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007fa6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007faa:	f083 0320 	eor.w	r3, r3, #32
 8007fae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	441a      	add	r2, r3
 8007fbc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	8013      	strh	r3, [r2, #0]
 8007fd4:	e01d      	b.n	8008012 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	881b      	ldrh	r3, [r3, #0]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	441a      	add	r2, r3
 8007ffa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800800a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800800e:	b29b      	uxth	r3, r3
 8008010:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	b29b      	uxth	r3, r3
 8008020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008028:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	441a      	add	r2, r3
 8008034:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800803a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800803e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008046:	b29b      	uxth	r3, r3
 8008048:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800804a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800804e:	4618      	mov	r0, r3
 8008050:	376c      	adds	r7, #108	; 0x6c
 8008052:	46bd      	mov	sp, r7
 8008054:	bc80      	pop	{r7}
 8008056:	4770      	bx	lr

08008058 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008058:	b480      	push	{r7}
 800805a:	b08d      	sub	sp, #52	; 0x34
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	7b1b      	ldrb	r3, [r3, #12]
 8008066:	2b00      	cmp	r3, #0
 8008068:	f040 808e 	bne.w	8008188 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	785b      	ldrb	r3, [r3, #1]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d044      	beq.n	80080fe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	881b      	ldrh	r3, [r3, #0]
 8008080:	81bb      	strh	r3, [r7, #12]
 8008082:	89bb      	ldrh	r3, [r7, #12]
 8008084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008088:	2b00      	cmp	r3, #0
 800808a:	d01b      	beq.n	80080c4 <USB_DeactivateEndpoint+0x6c>
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	881b      	ldrh	r3, [r3, #0]
 8008098:	b29b      	uxth	r3, r3
 800809a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800809e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a2:	817b      	strh	r3, [r7, #10]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	441a      	add	r2, r3
 80080ae:	897b      	ldrh	r3, [r7, #10]
 80080b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	881b      	ldrh	r3, [r3, #0]
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080da:	813b      	strh	r3, [r7, #8]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	441a      	add	r2, r3
 80080e6:	893b      	ldrh	r3, [r7, #8]
 80080e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	8013      	strh	r3, [r2, #0]
 80080fc:	e192      	b.n	8008424 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	881b      	ldrh	r3, [r3, #0]
 800810a:	827b      	strh	r3, [r7, #18]
 800810c:	8a7b      	ldrh	r3, [r7, #18]
 800810e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d01b      	beq.n	800814e <USB_DeactivateEndpoint+0xf6>
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	b29b      	uxth	r3, r3
 8008124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800812c:	823b      	strh	r3, [r7, #16]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	441a      	add	r2, r3
 8008138:	8a3b      	ldrh	r3, [r7, #16]
 800813a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800813e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008142:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800814a:	b29b      	uxth	r3, r3
 800814c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4413      	add	r3, r2
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	b29b      	uxth	r3, r3
 800815c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008164:	81fb      	strh	r3, [r7, #14]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	441a      	add	r2, r3
 8008170:	89fb      	ldrh	r3, [r7, #14]
 8008172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800817a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800817e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008182:	b29b      	uxth	r3, r3
 8008184:	8013      	strh	r3, [r2, #0]
 8008186:	e14d      	b.n	8008424 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	785b      	ldrb	r3, [r3, #1]
 800818c:	2b00      	cmp	r3, #0
 800818e:	f040 80a5 	bne.w	80082dc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4413      	add	r3, r2
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	843b      	strh	r3, [r7, #32]
 80081a0:	8c3b      	ldrh	r3, [r7, #32]
 80081a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d01b      	beq.n	80081e2 <USB_DeactivateEndpoint+0x18a>
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	4413      	add	r3, r2
 80081b4:	881b      	ldrh	r3, [r3, #0]
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c0:	83fb      	strh	r3, [r7, #30]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	441a      	add	r2, r3
 80081cc:	8bfb      	ldrh	r3, [r7, #30]
 80081ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081de:	b29b      	uxth	r3, r3
 80081e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4413      	add	r3, r2
 80081ec:	881b      	ldrh	r3, [r3, #0]
 80081ee:	83bb      	strh	r3, [r7, #28]
 80081f0:	8bbb      	ldrh	r3, [r7, #28]
 80081f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d01b      	beq.n	8008232 <USB_DeactivateEndpoint+0x1da>
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	b29b      	uxth	r3, r3
 8008208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800820c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008210:	837b      	strh	r3, [r7, #26]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	441a      	add	r2, r3
 800821c:	8b7b      	ldrh	r3, [r7, #26]
 800821e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800822a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800822e:	b29b      	uxth	r3, r3
 8008230:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4413      	add	r3, r2
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	b29b      	uxth	r3, r3
 8008240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008248:	833b      	strh	r3, [r7, #24]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	441a      	add	r2, r3
 8008254:	8b3b      	ldrh	r3, [r7, #24]
 8008256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800825a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800825e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008262:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008266:	b29b      	uxth	r3, r3
 8008268:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	b29b      	uxth	r3, r3
 8008278:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800827c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008280:	82fb      	strh	r3, [r7, #22]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	441a      	add	r2, r3
 800828c:	8afb      	ldrh	r3, [r7, #22]
 800828e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800829a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800829e:	b29b      	uxth	r3, r3
 80082a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082b8:	82bb      	strh	r3, [r7, #20]
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	441a      	add	r2, r3
 80082c4:	8abb      	ldrh	r3, [r7, #20]
 80082c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	8013      	strh	r3, [r2, #0]
 80082da:	e0a3      	b.n	8008424 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80082ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80082ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d01b      	beq.n	800832c <USB_DeactivateEndpoint+0x2d4>
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	b29b      	uxth	r3, r3
 8008302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800830a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	441a      	add	r2, r3
 8008316:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800831c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008320:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008328:	b29b      	uxth	r3, r3
 800832a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	881b      	ldrh	r3, [r3, #0]
 8008338:	857b      	strh	r3, [r7, #42]	; 0x2a
 800833a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800833c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008340:	2b00      	cmp	r3, #0
 8008342:	d01b      	beq.n	800837c <USB_DeactivateEndpoint+0x324>
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	881b      	ldrh	r3, [r3, #0]
 8008350:	b29b      	uxth	r3, r3
 8008352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800835a:	853b      	strh	r3, [r7, #40]	; 0x28
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	441a      	add	r2, r3
 8008366:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800836c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008374:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008378:	b29b      	uxth	r3, r3
 800837a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	881b      	ldrh	r3, [r3, #0]
 8008388:	b29b      	uxth	r3, r3
 800838a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800838e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008392:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	441a      	add	r2, r3
 800839e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80083a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	441a      	add	r2, r3
 80083d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008402:	847b      	strh	r3, [r7, #34]	; 0x22
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	441a      	add	r2, r3
 800840e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800841c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008420:	b29b      	uxth	r3, r3
 8008422:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3734      	adds	r7, #52	; 0x34
 800842a:	46bd      	mov	sp, r7
 800842c:	bc80      	pop	{r7}
 800842e:	4770      	bx	lr

08008430 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b0cc      	sub	sp, #304	; 0x130
 8008434:	af00      	add	r7, sp, #0
 8008436:	1d3b      	adds	r3, r7, #4
 8008438:	6018      	str	r0, [r3, #0]
 800843a:	463b      	mov	r3, r7
 800843c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800843e:	463b      	mov	r3, r7
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	785b      	ldrb	r3, [r3, #1]
 8008444:	2b01      	cmp	r3, #1
 8008446:	f040 872e 	bne.w	80092a6 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800844a:	463b      	mov	r3, r7
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	699a      	ldr	r2, [r3, #24]
 8008450:	463b      	mov	r3, r7
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	429a      	cmp	r2, r3
 8008458:	d905      	bls.n	8008466 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800845a:	463b      	mov	r3, r7
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008464:	e004      	b.n	8008470 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008466:	463b      	mov	r3, r7
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008470:	463b      	mov	r3, r7
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	7b1b      	ldrb	r3, [r3, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d134      	bne.n	80084e4 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800847a:	463b      	mov	r3, r7
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	6959      	ldr	r1, [r3, #20]
 8008480:	463b      	mov	r3, r7
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	88da      	ldrh	r2, [r3, #6]
 8008486:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800848a:	b29b      	uxth	r3, r3
 800848c:	1d38      	adds	r0, r7, #4
 800848e:	6800      	ldr	r0, [r0, #0]
 8008490:	f001 fc03 	bl	8009c9a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008494:	f107 0310 	add.w	r3, r7, #16
 8008498:	1d3a      	adds	r2, r7, #4
 800849a:	6812      	ldr	r2, [r2, #0]
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	1d3b      	adds	r3, r7, #4
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	4619      	mov	r1, r3
 80084aa:	f107 0310 	add.w	r3, r7, #16
 80084ae:	f107 0210 	add.w	r2, r7, #16
 80084b2:	6812      	ldr	r2, [r2, #0]
 80084b4:	440a      	add	r2, r1
 80084b6:	601a      	str	r2, [r3, #0]
 80084b8:	463b      	mov	r3, r7
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	011a      	lsls	r2, r3, #4
 80084c0:	f107 0310 	add.w	r3, r7, #16
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4413      	add	r3, r2
 80084c8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80084cc:	f107 030c 	add.w	r3, r7, #12
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	f107 030c 	add.w	r3, r7, #12
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	801a      	strh	r2, [r3, #0]
 80084e0:	f000 beac 	b.w	800923c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80084e4:	463b      	mov	r3, r7
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	78db      	ldrb	r3, [r3, #3]
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	f040 838c 	bne.w	8008c08 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80084f0:	463b      	mov	r3, r7
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6a1a      	ldr	r2, [r3, #32]
 80084f6:	463b      	mov	r3, r7
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	f240 8330 	bls.w	8008b62 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008502:	1d3b      	adds	r3, r7, #4
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	463b      	mov	r3, r7
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4413      	add	r3, r2
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	b29b      	uxth	r3, r3
 8008514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800851c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008520:	1d3b      	adds	r3, r7, #4
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	463b      	mov	r3, r7
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	441a      	add	r2, r3
 800852e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800853a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800853e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008542:	b29b      	uxth	r3, r3
 8008544:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008546:	463b      	mov	r3, r7
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6a1a      	ldr	r2, [r3, #32]
 800854c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008550:	1ad2      	subs	r2, r2, r3
 8008552:	463b      	mov	r3, r7
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008558:	1d3b      	adds	r3, r7, #4
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	463b      	mov	r3, r7
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4413      	add	r3, r2
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	b29b      	uxth	r3, r3
 800856a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800856e:	2b00      	cmp	r3, #0
 8008570:	f000 819e 	beq.w	80088b0 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008574:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008578:	1d3a      	adds	r2, r7, #4
 800857a:	6812      	ldr	r2, [r2, #0]
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	463b      	mov	r3, r7
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	785b      	ldrb	r3, [r3, #1]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d17a      	bne.n	800867e <USB_EPStartXfer+0x24e>
 8008588:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800858c:	1d3a      	adds	r2, r7, #4
 800858e:	6812      	ldr	r2, [r2, #0]
 8008590:	601a      	str	r2, [r3, #0]
 8008592:	1d3b      	adds	r3, r7, #4
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800859a:	b29b      	uxth	r3, r3
 800859c:	4619      	mov	r1, r3
 800859e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80085a6:	6812      	ldr	r2, [r2, #0]
 80085a8:	440a      	add	r2, r1
 80085aa:	601a      	str	r2, [r3, #0]
 80085ac:	463b      	mov	r3, r7
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	011a      	lsls	r2, r3, #4
 80085b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4413      	add	r3, r2
 80085bc:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80085c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d11a      	bne.n	8008604 <USB_EPStartXfer+0x1d4>
 80085ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085dc:	b29a      	uxth	r2, r3
 80085de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	801a      	strh	r2, [r3, #0]
 80085e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	801a      	strh	r2, [r3, #0]
 8008602:	e062      	b.n	80086ca <USB_EPStartXfer+0x29a>
 8008604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008608:	2b3e      	cmp	r3, #62	; 0x3e
 800860a:	d819      	bhi.n	8008640 <USB_EPStartXfer+0x210>
 800860c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008610:	085b      	lsrs	r3, r3, #1
 8008612:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d004      	beq.n	800862c <USB_EPStartXfer+0x1fc>
 8008622:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008626:	3301      	adds	r3, #1
 8008628:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800862c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008630:	b29b      	uxth	r3, r3
 8008632:	029b      	lsls	r3, r3, #10
 8008634:	b29a      	uxth	r2, r3
 8008636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	801a      	strh	r2, [r3, #0]
 800863e:	e044      	b.n	80086ca <USB_EPStartXfer+0x29a>
 8008640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008644:	095b      	lsrs	r3, r3, #5
 8008646:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800864a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800864e:	f003 031f 	and.w	r3, r3, #31
 8008652:	2b00      	cmp	r3, #0
 8008654:	d104      	bne.n	8008660 <USB_EPStartXfer+0x230>
 8008656:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800865a:	3b01      	subs	r3, #1
 800865c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008660:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008664:	b29b      	uxth	r3, r3
 8008666:	029b      	lsls	r3, r3, #10
 8008668:	b29b      	uxth	r3, r3
 800866a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800866e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008672:	b29a      	uxth	r2, r3
 8008674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	801a      	strh	r2, [r3, #0]
 800867c:	e025      	b.n	80086ca <USB_EPStartXfer+0x29a>
 800867e:	463b      	mov	r3, r7
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	785b      	ldrb	r3, [r3, #1]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d120      	bne.n	80086ca <USB_EPStartXfer+0x29a>
 8008688:	1d3b      	adds	r3, r7, #4
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008690:	b29b      	uxth	r3, r3
 8008692:	4619      	mov	r1, r3
 8008694:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008698:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800869c:	6812      	ldr	r2, [r2, #0]
 800869e:	440a      	add	r2, r1
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	463b      	mov	r3, r7
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	011a      	lsls	r2, r3, #4
 80086aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4413      	add	r3, r2
 80086b2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80086b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80086ba:	601a      	str	r2, [r3, #0]
 80086bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80086ca:	463b      	mov	r3, r7
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	895b      	ldrh	r3, [r3, #10]
 80086d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086d4:	463b      	mov	r3, r7
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6959      	ldr	r1, [r3, #20]
 80086da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086de:	b29b      	uxth	r3, r3
 80086e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80086e4:	1d38      	adds	r0, r7, #4
 80086e6:	6800      	ldr	r0, [r0, #0]
 80086e8:	f001 fad7 	bl	8009c9a <USB_WritePMA>
            ep->xfer_buff += len;
 80086ec:	463b      	mov	r3, r7
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	695a      	ldr	r2, [r3, #20]
 80086f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086f6:	441a      	add	r2, r3
 80086f8:	463b      	mov	r3, r7
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80086fe:	463b      	mov	r3, r7
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6a1a      	ldr	r2, [r3, #32]
 8008704:	463b      	mov	r3, r7
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	429a      	cmp	r2, r3
 800870c:	d909      	bls.n	8008722 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800870e:	463b      	mov	r3, r7
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6a1a      	ldr	r2, [r3, #32]
 8008714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008718:	1ad2      	subs	r2, r2, r3
 800871a:	463b      	mov	r3, r7
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	621a      	str	r2, [r3, #32]
 8008720:	e008      	b.n	8008734 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8008722:	463b      	mov	r3, r7
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800872c:	463b      	mov	r3, r7
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2200      	movs	r2, #0
 8008732:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008734:	463b      	mov	r3, r7
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d17a      	bne.n	8008834 <USB_EPStartXfer+0x404>
 800873e:	f107 0318 	add.w	r3, r7, #24
 8008742:	1d3a      	adds	r2, r7, #4
 8008744:	6812      	ldr	r2, [r2, #0]
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	1d3b      	adds	r3, r7, #4
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008750:	b29b      	uxth	r3, r3
 8008752:	4619      	mov	r1, r3
 8008754:	f107 0318 	add.w	r3, r7, #24
 8008758:	f107 0218 	add.w	r2, r7, #24
 800875c:	6812      	ldr	r2, [r2, #0]
 800875e:	440a      	add	r2, r1
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	463b      	mov	r3, r7
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	011a      	lsls	r2, r3, #4
 800876a:	f107 0318 	add.w	r3, r7, #24
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4413      	add	r3, r2
 8008772:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008776:	f107 0314 	add.w	r3, r7, #20
 800877a:	601a      	str	r2, [r3, #0]
 800877c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008780:	2b00      	cmp	r3, #0
 8008782:	d11a      	bne.n	80087ba <USB_EPStartXfer+0x38a>
 8008784:	f107 0314 	add.w	r3, r7, #20
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	881b      	ldrh	r3, [r3, #0]
 800878c:	b29b      	uxth	r3, r3
 800878e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008792:	b29a      	uxth	r2, r3
 8008794:	f107 0314 	add.w	r3, r7, #20
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	801a      	strh	r2, [r3, #0]
 800879c:	f107 0314 	add.w	r3, r7, #20
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	f107 0314 	add.w	r3, r7, #20
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	801a      	strh	r2, [r3, #0]
 80087b8:	e067      	b.n	800888a <USB_EPStartXfer+0x45a>
 80087ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087be:	2b3e      	cmp	r3, #62	; 0x3e
 80087c0:	d819      	bhi.n	80087f6 <USB_EPStartXfer+0x3c6>
 80087c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087c6:	085b      	lsrs	r3, r3, #1
 80087c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80087cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d0:	f003 0301 	and.w	r3, r3, #1
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d004      	beq.n	80087e2 <USB_EPStartXfer+0x3b2>
 80087d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80087dc:	3301      	adds	r3, #1
 80087de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80087e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	029b      	lsls	r3, r3, #10
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	f107 0314 	add.w	r3, r7, #20
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	801a      	strh	r2, [r3, #0]
 80087f4:	e049      	b.n	800888a <USB_EPStartXfer+0x45a>
 80087f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087fa:	095b      	lsrs	r3, r3, #5
 80087fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008804:	f003 031f 	and.w	r3, r3, #31
 8008808:	2b00      	cmp	r3, #0
 800880a:	d104      	bne.n	8008816 <USB_EPStartXfer+0x3e6>
 800880c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008810:	3b01      	subs	r3, #1
 8008812:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008816:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800881a:	b29b      	uxth	r3, r3
 800881c:	029b      	lsls	r3, r3, #10
 800881e:	b29b      	uxth	r3, r3
 8008820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008828:	b29a      	uxth	r2, r3
 800882a:	f107 0314 	add.w	r3, r7, #20
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	801a      	strh	r2, [r3, #0]
 8008832:	e02a      	b.n	800888a <USB_EPStartXfer+0x45a>
 8008834:	463b      	mov	r3, r7
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	785b      	ldrb	r3, [r3, #1]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d125      	bne.n	800888a <USB_EPStartXfer+0x45a>
 800883e:	f107 0320 	add.w	r3, r7, #32
 8008842:	1d3a      	adds	r2, r7, #4
 8008844:	6812      	ldr	r2, [r2, #0]
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	1d3b      	adds	r3, r7, #4
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008850:	b29b      	uxth	r3, r3
 8008852:	4619      	mov	r1, r3
 8008854:	f107 0320 	add.w	r3, r7, #32
 8008858:	f107 0220 	add.w	r2, r7, #32
 800885c:	6812      	ldr	r2, [r2, #0]
 800885e:	440a      	add	r2, r1
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	463b      	mov	r3, r7
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	011a      	lsls	r2, r3, #4
 800886a:	f107 0320 	add.w	r3, r7, #32
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4413      	add	r3, r2
 8008872:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008876:	f107 031c 	add.w	r3, r7, #28
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008880:	b29a      	uxth	r2, r3
 8008882:	f107 031c 	add.w	r3, r7, #28
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800888a:	463b      	mov	r3, r7
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	891b      	ldrh	r3, [r3, #8]
 8008890:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008894:	463b      	mov	r3, r7
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6959      	ldr	r1, [r3, #20]
 800889a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800889e:	b29b      	uxth	r3, r3
 80088a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80088a4:	1d38      	adds	r0, r7, #4
 80088a6:	6800      	ldr	r0, [r0, #0]
 80088a8:	f001 f9f7 	bl	8009c9a <USB_WritePMA>
 80088ac:	f000 bcc6 	b.w	800923c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80088b0:	463b      	mov	r3, r7
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	785b      	ldrb	r3, [r3, #1]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d164      	bne.n	8008984 <USB_EPStartXfer+0x554>
 80088ba:	1d3b      	adds	r3, r7, #4
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	64bb      	str	r3, [r7, #72]	; 0x48
 80088c0:	1d3b      	adds	r3, r7, #4
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	461a      	mov	r2, r3
 80088cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ce:	4413      	add	r3, r2
 80088d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80088d2:	463b      	mov	r3, r7
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	011a      	lsls	r2, r3, #4
 80088da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088dc:	4413      	add	r3, r2
 80088de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088e2:	647b      	str	r3, [r7, #68]	; 0x44
 80088e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d112      	bne.n	8008912 <USB_EPStartXfer+0x4e2>
 80088ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088fa:	801a      	strh	r2, [r3, #0]
 80088fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088fe:	881b      	ldrh	r3, [r3, #0]
 8008900:	b29b      	uxth	r3, r3
 8008902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800890a:	b29a      	uxth	r2, r3
 800890c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800890e:	801a      	strh	r2, [r3, #0]
 8008910:	e057      	b.n	80089c2 <USB_EPStartXfer+0x592>
 8008912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008916:	2b3e      	cmp	r3, #62	; 0x3e
 8008918:	d817      	bhi.n	800894a <USB_EPStartXfer+0x51a>
 800891a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800891e:	085b      	lsrs	r3, r3, #1
 8008920:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d004      	beq.n	800893a <USB_EPStartXfer+0x50a>
 8008930:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008934:	3301      	adds	r3, #1
 8008936:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800893a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800893e:	b29b      	uxth	r3, r3
 8008940:	029b      	lsls	r3, r3, #10
 8008942:	b29a      	uxth	r2, r3
 8008944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008946:	801a      	strh	r2, [r3, #0]
 8008948:	e03b      	b.n	80089c2 <USB_EPStartXfer+0x592>
 800894a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800894e:	095b      	lsrs	r3, r3, #5
 8008950:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008958:	f003 031f 	and.w	r3, r3, #31
 800895c:	2b00      	cmp	r3, #0
 800895e:	d104      	bne.n	800896a <USB_EPStartXfer+0x53a>
 8008960:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008964:	3b01      	subs	r3, #1
 8008966:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800896a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800896e:	b29b      	uxth	r3, r3
 8008970:	029b      	lsls	r3, r3, #10
 8008972:	b29b      	uxth	r3, r3
 8008974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800897c:	b29a      	uxth	r2, r3
 800897e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008980:	801a      	strh	r2, [r3, #0]
 8008982:	e01e      	b.n	80089c2 <USB_EPStartXfer+0x592>
 8008984:	463b      	mov	r3, r7
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	785b      	ldrb	r3, [r3, #1]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d119      	bne.n	80089c2 <USB_EPStartXfer+0x592>
 800898e:	1d3b      	adds	r3, r7, #4
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	653b      	str	r3, [r7, #80]	; 0x50
 8008994:	1d3b      	adds	r3, r7, #4
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800899c:	b29b      	uxth	r3, r3
 800899e:	461a      	mov	r2, r3
 80089a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089a2:	4413      	add	r3, r2
 80089a4:	653b      	str	r3, [r7, #80]	; 0x50
 80089a6:	463b      	mov	r3, r7
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	011a      	lsls	r2, r3, #4
 80089ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089b0:	4413      	add	r3, r2
 80089b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089bc:	b29a      	uxth	r2, r3
 80089be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80089c2:	463b      	mov	r3, r7
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	891b      	ldrh	r3, [r3, #8]
 80089c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089cc:	463b      	mov	r3, r7
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6959      	ldr	r1, [r3, #20]
 80089d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80089dc:	1d38      	adds	r0, r7, #4
 80089de:	6800      	ldr	r0, [r0, #0]
 80089e0:	f001 f95b 	bl	8009c9a <USB_WritePMA>
            ep->xfer_buff += len;
 80089e4:	463b      	mov	r3, r7
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	695a      	ldr	r2, [r3, #20]
 80089ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ee:	441a      	add	r2, r3
 80089f0:	463b      	mov	r3, r7
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80089f6:	463b      	mov	r3, r7
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6a1a      	ldr	r2, [r3, #32]
 80089fc:	463b      	mov	r3, r7
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d909      	bls.n	8008a1a <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8008a06:	463b      	mov	r3, r7
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	6a1a      	ldr	r2, [r3, #32]
 8008a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a10:	1ad2      	subs	r2, r2, r3
 8008a12:	463b      	mov	r3, r7
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	621a      	str	r2, [r3, #32]
 8008a18:	e008      	b.n	8008a2c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8008a1a:	463b      	mov	r3, r7
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6a1b      	ldr	r3, [r3, #32]
 8008a20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008a24:	463b      	mov	r3, r7
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a2c:	1d3b      	adds	r3, r7, #4
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	643b      	str	r3, [r7, #64]	; 0x40
 8008a32:	463b      	mov	r3, r7
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	785b      	ldrb	r3, [r3, #1]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d164      	bne.n	8008b06 <USB_EPStartXfer+0x6d6>
 8008a3c:	1d3b      	adds	r3, r7, #4
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a42:	1d3b      	adds	r3, r7, #4
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a50:	4413      	add	r3, r2
 8008a52:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a54:	463b      	mov	r3, r7
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	011a      	lsls	r2, r3, #4
 8008a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5e:	4413      	add	r3, r2
 8008a60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a64:	637b      	str	r3, [r7, #52]	; 0x34
 8008a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d112      	bne.n	8008a94 <USB_EPStartXfer+0x664>
 8008a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a70:	881b      	ldrh	r3, [r3, #0]
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7c:	801a      	strh	r2, [r3, #0]
 8008a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a80:	881b      	ldrh	r3, [r3, #0]
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a90:	801a      	strh	r2, [r3, #0]
 8008a92:	e054      	b.n	8008b3e <USB_EPStartXfer+0x70e>
 8008a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a98:	2b3e      	cmp	r3, #62	; 0x3e
 8008a9a:	d817      	bhi.n	8008acc <USB_EPStartXfer+0x69c>
 8008a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aa0:	085b      	lsrs	r3, r3, #1
 8008aa2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d004      	beq.n	8008abc <USB_EPStartXfer+0x68c>
 8008ab2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008abc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	029b      	lsls	r3, r3, #10
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac8:	801a      	strh	r2, [r3, #0]
 8008aca:	e038      	b.n	8008b3e <USB_EPStartXfer+0x70e>
 8008acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ad0:	095b      	lsrs	r3, r3, #5
 8008ad2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ada:	f003 031f 	and.w	r3, r3, #31
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d104      	bne.n	8008aec <USB_EPStartXfer+0x6bc>
 8008ae2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008aec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	029b      	lsls	r3, r3, #10
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b02:	801a      	strh	r2, [r3, #0]
 8008b04:	e01b      	b.n	8008b3e <USB_EPStartXfer+0x70e>
 8008b06:	463b      	mov	r3, r7
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	785b      	ldrb	r3, [r3, #1]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d116      	bne.n	8008b3e <USB_EPStartXfer+0x70e>
 8008b10:	1d3b      	adds	r3, r7, #4
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b1e:	4413      	add	r3, r2
 8008b20:	643b      	str	r3, [r7, #64]	; 0x40
 8008b22:	463b      	mov	r3, r7
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	011a      	lsls	r2, r3, #4
 8008b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b3e:	463b      	mov	r3, r7
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	895b      	ldrh	r3, [r3, #10]
 8008b44:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b48:	463b      	mov	r3, r7
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6959      	ldr	r1, [r3, #20]
 8008b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008b58:	1d38      	adds	r0, r7, #4
 8008b5a:	6800      	ldr	r0, [r0, #0]
 8008b5c:	f001 f89d 	bl	8009c9a <USB_WritePMA>
 8008b60:	e36c      	b.n	800923c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008b62:	463b      	mov	r3, r7
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6a1b      	ldr	r3, [r3, #32]
 8008b68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008b6c:	1d3b      	adds	r3, r7, #4
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	463b      	mov	r3, r7
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b86:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008b8a:	1d3b      	adds	r3, r7, #4
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	463b      	mov	r3, r7
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	441a      	add	r2, r3
 8008b98:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008bb0:	1d3b      	adds	r3, r7, #4
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bb6:	1d3b      	adds	r3, r7, #4
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bc4:	4413      	add	r3, r2
 8008bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bc8:	463b      	mov	r3, r7
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	011a      	lsls	r2, r3, #4
 8008bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008bd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008be2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008be4:	463b      	mov	r3, r7
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	891b      	ldrh	r3, [r3, #8]
 8008bea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bee:	463b      	mov	r3, r7
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	6959      	ldr	r1, [r3, #20]
 8008bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008bfe:	1d38      	adds	r0, r7, #4
 8008c00:	6800      	ldr	r0, [r0, #0]
 8008c02:	f001 f84a 	bl	8009c9a <USB_WritePMA>
 8008c06:	e319      	b.n	800923c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008c08:	1d3b      	adds	r3, r7, #4
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	463b      	mov	r3, r7
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4413      	add	r3, r2
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c22:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008c26:	1d3b      	adds	r3, r7, #4
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	463b      	mov	r3, r7
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	441a      	add	r2, r3
 8008c34:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008c38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c40:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008c4c:	463b      	mov	r3, r7
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6a1a      	ldr	r2, [r3, #32]
 8008c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c56:	1ad2      	subs	r2, r2, r3
 8008c58:	463b      	mov	r3, r7
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008c5e:	1d3b      	adds	r3, r7, #4
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	463b      	mov	r3, r7
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	881b      	ldrh	r3, [r3, #0]
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f000 8162 	beq.w	8008f3e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c7a:	1d3b      	adds	r3, r7, #4
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c82:	463b      	mov	r3, r7
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	785b      	ldrb	r3, [r3, #1]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d164      	bne.n	8008d56 <USB_EPStartXfer+0x926>
 8008c8c:	1d3b      	adds	r3, r7, #4
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c92:	1d3b      	adds	r3, r7, #4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ca0:	4413      	add	r3, r2
 8008ca2:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ca4:	463b      	mov	r3, r7
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	011a      	lsls	r2, r3, #4
 8008cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cae:	4413      	add	r3, r2
 8008cb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008cb4:	677b      	str	r3, [r7, #116]	; 0x74
 8008cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d112      	bne.n	8008ce4 <USB_EPStartXfer+0x8b4>
 8008cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cc0:	881b      	ldrh	r3, [r3, #0]
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ccc:	801a      	strh	r2, [r3, #0]
 8008cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cd0:	881b      	ldrh	r3, [r3, #0]
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ce0:	801a      	strh	r2, [r3, #0]
 8008ce2:	e057      	b.n	8008d94 <USB_EPStartXfer+0x964>
 8008ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ce8:	2b3e      	cmp	r3, #62	; 0x3e
 8008cea:	d817      	bhi.n	8008d1c <USB_EPStartXfer+0x8ec>
 8008cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cf0:	085b      	lsrs	r3, r3, #1
 8008cf2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d004      	beq.n	8008d0c <USB_EPStartXfer+0x8dc>
 8008d02:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008d06:	3301      	adds	r3, #1
 8008d08:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008d0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	029b      	lsls	r3, r3, #10
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d18:	801a      	strh	r2, [r3, #0]
 8008d1a:	e03b      	b.n	8008d94 <USB_EPStartXfer+0x964>
 8008d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d20:	095b      	lsrs	r3, r3, #5
 8008d22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d2a:	f003 031f 	and.w	r3, r3, #31
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d104      	bne.n	8008d3c <USB_EPStartXfer+0x90c>
 8008d32:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008d36:	3b01      	subs	r3, #1
 8008d38:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008d3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	029b      	lsls	r3, r3, #10
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d52:	801a      	strh	r2, [r3, #0]
 8008d54:	e01e      	b.n	8008d94 <USB_EPStartXfer+0x964>
 8008d56:	463b      	mov	r3, r7
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	785b      	ldrb	r3, [r3, #1]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d119      	bne.n	8008d94 <USB_EPStartXfer+0x964>
 8008d60:	1d3b      	adds	r3, r7, #4
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d70:	4413      	add	r3, r2
 8008d72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d76:	463b      	mov	r3, r7
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	011a      	lsls	r2, r3, #4
 8008d7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d82:	4413      	add	r3, r2
 8008d84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d92:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008d94:	463b      	mov	r3, r7
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	895b      	ldrh	r3, [r3, #10]
 8008d9a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d9e:	463b      	mov	r3, r7
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6959      	ldr	r1, [r3, #20]
 8008da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008dae:	1d38      	adds	r0, r7, #4
 8008db0:	6800      	ldr	r0, [r0, #0]
 8008db2:	f000 ff72 	bl	8009c9a <USB_WritePMA>
          ep->xfer_buff += len;
 8008db6:	463b      	mov	r3, r7
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	695a      	ldr	r2, [r3, #20]
 8008dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dc0:	441a      	add	r2, r3
 8008dc2:	463b      	mov	r3, r7
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008dc8:	463b      	mov	r3, r7
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6a1a      	ldr	r2, [r3, #32]
 8008dce:	463b      	mov	r3, r7
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d909      	bls.n	8008dec <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8008dd8:	463b      	mov	r3, r7
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6a1a      	ldr	r2, [r3, #32]
 8008dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008de2:	1ad2      	subs	r2, r2, r3
 8008de4:	463b      	mov	r3, r7
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	621a      	str	r2, [r3, #32]
 8008dea:	e008      	b.n	8008dfe <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8008dec:	463b      	mov	r3, r7
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008df6:	463b      	mov	r3, r7
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f000 821a 	beq.w	800923c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008e08:	463b      	mov	r3, r7
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	785b      	ldrb	r3, [r3, #1]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d164      	bne.n	8008edc <USB_EPStartXfer+0xaac>
 8008e12:	1d3b      	adds	r3, r7, #4
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e18:	1d3b      	adds	r3, r7, #4
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	461a      	mov	r2, r3
 8008e24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e26:	4413      	add	r3, r2
 8008e28:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e2a:	463b      	mov	r3, r7
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	011a      	lsls	r2, r3, #4
 8008e32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e34:	4413      	add	r3, r2
 8008e36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e3a:	667b      	str	r3, [r7, #100]	; 0x64
 8008e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d112      	bne.n	8008e6a <USB_EPStartXfer+0xa3a>
 8008e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e46:	881b      	ldrh	r3, [r3, #0]
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e52:	801a      	strh	r2, [r3, #0]
 8008e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e66:	801a      	strh	r2, [r3, #0]
 8008e68:	e057      	b.n	8008f1a <USB_EPStartXfer+0xaea>
 8008e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e6e:	2b3e      	cmp	r3, #62	; 0x3e
 8008e70:	d817      	bhi.n	8008ea2 <USB_EPStartXfer+0xa72>
 8008e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e76:	085b      	lsrs	r3, r3, #1
 8008e78:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e80:	f003 0301 	and.w	r3, r3, #1
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d004      	beq.n	8008e92 <USB_EPStartXfer+0xa62>
 8008e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	029b      	lsls	r3, r3, #10
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e9e:	801a      	strh	r2, [r3, #0]
 8008ea0:	e03b      	b.n	8008f1a <USB_EPStartXfer+0xaea>
 8008ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ea6:	095b      	lsrs	r3, r3, #5
 8008ea8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eb0:	f003 031f 	and.w	r3, r3, #31
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d104      	bne.n	8008ec2 <USB_EPStartXfer+0xa92>
 8008eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	029b      	lsls	r3, r3, #10
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ed8:	801a      	strh	r2, [r3, #0]
 8008eda:	e01e      	b.n	8008f1a <USB_EPStartXfer+0xaea>
 8008edc:	463b      	mov	r3, r7
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	785b      	ldrb	r3, [r3, #1]
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d119      	bne.n	8008f1a <USB_EPStartXfer+0xaea>
 8008ee6:	1d3b      	adds	r3, r7, #4
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	673b      	str	r3, [r7, #112]	; 0x70
 8008eec:	1d3b      	adds	r3, r7, #4
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008efa:	4413      	add	r3, r2
 8008efc:	673b      	str	r3, [r7, #112]	; 0x70
 8008efe:	463b      	mov	r3, r7
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	011a      	lsls	r2, r3, #4
 8008f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f08:	4413      	add	r3, r2
 8008f0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008f1a:	463b      	mov	r3, r7
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	891b      	ldrh	r3, [r3, #8]
 8008f20:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f24:	463b      	mov	r3, r7
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6959      	ldr	r1, [r3, #20]
 8008f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008f34:	1d38      	adds	r0, r7, #4
 8008f36:	6800      	ldr	r0, [r0, #0]
 8008f38:	f000 feaf 	bl	8009c9a <USB_WritePMA>
 8008f3c:	e17e      	b.n	800923c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f3e:	463b      	mov	r3, r7
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	785b      	ldrb	r3, [r3, #1]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d16f      	bne.n	8009028 <USB_EPStartXfer+0xbf8>
 8008f48:	1d3b      	adds	r3, r7, #4
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f50:	1d3b      	adds	r3, r7, #4
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f60:	4413      	add	r3, r2
 8008f62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f66:	463b      	mov	r3, r7
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	011a      	lsls	r2, r3, #4
 8008f6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f72:	4413      	add	r3, r2
 8008f74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d116      	bne.n	8008fb2 <USB_EPStartXfer+0xb82>
 8008f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f88:	881b      	ldrh	r3, [r3, #0]
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f96:	801a      	strh	r2, [r3, #0]
 8008f98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fae:	801a      	strh	r2, [r3, #0]
 8008fb0:	e05f      	b.n	8009072 <USB_EPStartXfer+0xc42>
 8008fb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fb6:	2b3e      	cmp	r3, #62	; 0x3e
 8008fb8:	d818      	bhi.n	8008fec <USB_EPStartXfer+0xbbc>
 8008fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fbe:	085b      	lsrs	r3, r3, #1
 8008fc0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d004      	beq.n	8008fda <USB_EPStartXfer+0xbaa>
 8008fd0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008fda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	029b      	lsls	r3, r3, #10
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fe8:	801a      	strh	r2, [r3, #0]
 8008fea:	e042      	b.n	8009072 <USB_EPStartXfer+0xc42>
 8008fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ff0:	095b      	lsrs	r3, r3, #5
 8008ff2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ffa:	f003 031f 	and.w	r3, r3, #31
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d104      	bne.n	800900c <USB_EPStartXfer+0xbdc>
 8009002:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009006:	3b01      	subs	r3, #1
 8009008:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800900c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009010:	b29b      	uxth	r3, r3
 8009012:	029b      	lsls	r3, r3, #10
 8009014:	b29b      	uxth	r3, r3
 8009016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800901a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800901e:	b29a      	uxth	r2, r3
 8009020:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009024:	801a      	strh	r2, [r3, #0]
 8009026:	e024      	b.n	8009072 <USB_EPStartXfer+0xc42>
 8009028:	463b      	mov	r3, r7
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	785b      	ldrb	r3, [r3, #1]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d11f      	bne.n	8009072 <USB_EPStartXfer+0xc42>
 8009032:	1d3b      	adds	r3, r7, #4
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800903a:	1d3b      	adds	r3, r7, #4
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009042:	b29b      	uxth	r3, r3
 8009044:	461a      	mov	r2, r3
 8009046:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800904a:	4413      	add	r3, r2
 800904c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009050:	463b      	mov	r3, r7
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	011a      	lsls	r2, r3, #4
 8009058:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800905c:	4413      	add	r3, r2
 800905e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800906a:	b29a      	uxth	r2, r3
 800906c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009070:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009072:	463b      	mov	r3, r7
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	891b      	ldrh	r3, [r3, #8]
 8009078:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800907c:	463b      	mov	r3, r7
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6959      	ldr	r1, [r3, #20]
 8009082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009086:	b29b      	uxth	r3, r3
 8009088:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800908c:	1d38      	adds	r0, r7, #4
 800908e:	6800      	ldr	r0, [r0, #0]
 8009090:	f000 fe03 	bl	8009c9a <USB_WritePMA>
          ep->xfer_buff += len;
 8009094:	463b      	mov	r3, r7
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	695a      	ldr	r2, [r3, #20]
 800909a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800909e:	441a      	add	r2, r3
 80090a0:	463b      	mov	r3, r7
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80090a6:	463b      	mov	r3, r7
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6a1a      	ldr	r2, [r3, #32]
 80090ac:	463b      	mov	r3, r7
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d909      	bls.n	80090ca <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80090b6:	463b      	mov	r3, r7
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	6a1a      	ldr	r2, [r3, #32]
 80090bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090c0:	1ad2      	subs	r2, r2, r3
 80090c2:	463b      	mov	r3, r7
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	621a      	str	r2, [r3, #32]
 80090c8:	e008      	b.n	80090dc <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80090ca:	463b      	mov	r3, r7
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6a1b      	ldr	r3, [r3, #32]
 80090d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80090d4:	463b      	mov	r3, r7
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2200      	movs	r2, #0
 80090da:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80090dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 80ab 	beq.w	800923c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090e6:	1d3b      	adds	r3, r7, #4
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090ee:	463b      	mov	r3, r7
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	785b      	ldrb	r3, [r3, #1]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d16f      	bne.n	80091d8 <USB_EPStartXfer+0xda8>
 80090f8:	1d3b      	adds	r3, r7, #4
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009100:	1d3b      	adds	r3, r7, #4
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009108:	b29b      	uxth	r3, r3
 800910a:	461a      	mov	r2, r3
 800910c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009110:	4413      	add	r3, r2
 8009112:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009116:	463b      	mov	r3, r7
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	011a      	lsls	r2, r3, #4
 800911e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009122:	4413      	add	r3, r2
 8009124:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800912c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009130:	2b00      	cmp	r3, #0
 8009132:	d116      	bne.n	8009162 <USB_EPStartXfer+0xd32>
 8009134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	b29b      	uxth	r3, r3
 800913c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009140:	b29a      	uxth	r2, r3
 8009142:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009146:	801a      	strh	r2, [r3, #0]
 8009148:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800914c:	881b      	ldrh	r3, [r3, #0]
 800914e:	b29b      	uxth	r3, r3
 8009150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009158:	b29a      	uxth	r2, r3
 800915a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800915e:	801a      	strh	r2, [r3, #0]
 8009160:	e05b      	b.n	800921a <USB_EPStartXfer+0xdea>
 8009162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009166:	2b3e      	cmp	r3, #62	; 0x3e
 8009168:	d818      	bhi.n	800919c <USB_EPStartXfer+0xd6c>
 800916a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800916e:	085b      	lsrs	r3, r3, #1
 8009170:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009178:	f003 0301 	and.w	r3, r3, #1
 800917c:	2b00      	cmp	r3, #0
 800917e:	d004      	beq.n	800918a <USB_EPStartXfer+0xd5a>
 8009180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009184:	3301      	adds	r3, #1
 8009186:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800918a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800918e:	b29b      	uxth	r3, r3
 8009190:	029b      	lsls	r3, r3, #10
 8009192:	b29a      	uxth	r2, r3
 8009194:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009198:	801a      	strh	r2, [r3, #0]
 800919a:	e03e      	b.n	800921a <USB_EPStartXfer+0xdea>
 800919c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091a0:	095b      	lsrs	r3, r3, #5
 80091a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80091a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091aa:	f003 031f 	and.w	r3, r3, #31
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d104      	bne.n	80091bc <USB_EPStartXfer+0xd8c>
 80091b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091b6:	3b01      	subs	r3, #1
 80091b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80091bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	029b      	lsls	r3, r3, #10
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091d4:	801a      	strh	r2, [r3, #0]
 80091d6:	e020      	b.n	800921a <USB_EPStartXfer+0xdea>
 80091d8:	463b      	mov	r3, r7
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	785b      	ldrb	r3, [r3, #1]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d11b      	bne.n	800921a <USB_EPStartXfer+0xdea>
 80091e2:	1d3b      	adds	r3, r7, #4
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	461a      	mov	r2, r3
 80091ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091f2:	4413      	add	r3, r2
 80091f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80091f8:	463b      	mov	r3, r7
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	011a      	lsls	r2, r3, #4
 8009200:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009204:	4413      	add	r3, r2
 8009206:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800920a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800920e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009212:	b29a      	uxth	r2, r3
 8009214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009218:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800921a:	463b      	mov	r3, r7
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	895b      	ldrh	r3, [r3, #10]
 8009220:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009224:	463b      	mov	r3, r7
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6959      	ldr	r1, [r3, #20]
 800922a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800922e:	b29b      	uxth	r3, r3
 8009230:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009234:	1d38      	adds	r0, r7, #4
 8009236:	6800      	ldr	r0, [r0, #0]
 8009238:	f000 fd2f 	bl	8009c9a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800923c:	1d3b      	adds	r3, r7, #4
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	463b      	mov	r3, r7
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	881b      	ldrh	r3, [r3, #0]
 800924c:	b29b      	uxth	r3, r3
 800924e:	f107 020a 	add.w	r2, r7, #10
 8009252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800925a:	8013      	strh	r3, [r2, #0]
 800925c:	f107 030a 	add.w	r3, r7, #10
 8009260:	f107 020a 	add.w	r2, r7, #10
 8009264:	8812      	ldrh	r2, [r2, #0]
 8009266:	f082 0210 	eor.w	r2, r2, #16
 800926a:	801a      	strh	r2, [r3, #0]
 800926c:	f107 030a 	add.w	r3, r7, #10
 8009270:	f107 020a 	add.w	r2, r7, #10
 8009274:	8812      	ldrh	r2, [r2, #0]
 8009276:	f082 0220 	eor.w	r2, r2, #32
 800927a:	801a      	strh	r2, [r3, #0]
 800927c:	1d3b      	adds	r3, r7, #4
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	463b      	mov	r3, r7
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	441a      	add	r2, r3
 800928a:	f107 030a 	add.w	r3, r7, #10
 800928e:	881b      	ldrh	r3, [r3, #0]
 8009290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800929c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	8013      	strh	r3, [r2, #0]
 80092a4:	e3b5      	b.n	8009a12 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80092a6:	463b      	mov	r3, r7
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	7b1b      	ldrb	r3, [r3, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f040 8090 	bne.w	80093d2 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80092b2:	463b      	mov	r3, r7
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	699a      	ldr	r2, [r3, #24]
 80092b8:	463b      	mov	r3, r7
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d90e      	bls.n	80092e0 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80092c2:	463b      	mov	r3, r7
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80092cc:	463b      	mov	r3, r7
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	699a      	ldr	r2, [r3, #24]
 80092d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d6:	1ad2      	subs	r2, r2, r3
 80092d8:	463b      	mov	r3, r7
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	619a      	str	r2, [r3, #24]
 80092de:	e008      	b.n	80092f2 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80092e0:	463b      	mov	r3, r7
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80092ea:	463b      	mov	r3, r7
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2200      	movs	r2, #0
 80092f0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80092f2:	1d3b      	adds	r3, r7, #4
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80092fa:	1d3b      	adds	r3, r7, #4
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009302:	b29b      	uxth	r3, r3
 8009304:	461a      	mov	r2, r3
 8009306:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800930a:	4413      	add	r3, r2
 800930c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009310:	463b      	mov	r3, r7
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	011a      	lsls	r2, r3, #4
 8009318:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800931c:	4413      	add	r3, r2
 800931e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009322:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800932a:	2b00      	cmp	r3, #0
 800932c:	d116      	bne.n	800935c <USB_EPStartXfer+0xf2c>
 800932e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009332:	881b      	ldrh	r3, [r3, #0]
 8009334:	b29b      	uxth	r3, r3
 8009336:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800933a:	b29a      	uxth	r2, r3
 800933c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009340:	801a      	strh	r2, [r3, #0]
 8009342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009346:	881b      	ldrh	r3, [r3, #0]
 8009348:	b29b      	uxth	r3, r3
 800934a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800934e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009352:	b29a      	uxth	r2, r3
 8009354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009358:	801a      	strh	r2, [r3, #0]
 800935a:	e32c      	b.n	80099b6 <USB_EPStartXfer+0x1586>
 800935c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009360:	2b3e      	cmp	r3, #62	; 0x3e
 8009362:	d818      	bhi.n	8009396 <USB_EPStartXfer+0xf66>
 8009364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009368:	085b      	lsrs	r3, r3, #1
 800936a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800936e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	2b00      	cmp	r3, #0
 8009378:	d004      	beq.n	8009384 <USB_EPStartXfer+0xf54>
 800937a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800937e:	3301      	adds	r3, #1
 8009380:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009384:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009388:	b29b      	uxth	r3, r3
 800938a:	029b      	lsls	r3, r3, #10
 800938c:	b29a      	uxth	r2, r3
 800938e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009392:	801a      	strh	r2, [r3, #0]
 8009394:	e30f      	b.n	80099b6 <USB_EPStartXfer+0x1586>
 8009396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800939a:	095b      	lsrs	r3, r3, #5
 800939c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80093a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093a4:	f003 031f 	and.w	r3, r3, #31
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d104      	bne.n	80093b6 <USB_EPStartXfer+0xf86>
 80093ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80093b0:	3b01      	subs	r3, #1
 80093b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80093b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	029b      	lsls	r3, r3, #10
 80093be:	b29b      	uxth	r3, r3
 80093c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093ce:	801a      	strh	r2, [r3, #0]
 80093d0:	e2f1      	b.n	80099b6 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80093d2:	463b      	mov	r3, r7
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	78db      	ldrb	r3, [r3, #3]
 80093d8:	2b02      	cmp	r3, #2
 80093da:	f040 818f 	bne.w	80096fc <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80093de:	463b      	mov	r3, r7
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	785b      	ldrb	r3, [r3, #1]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d175      	bne.n	80094d4 <USB_EPStartXfer+0x10a4>
 80093e8:	1d3b      	adds	r3, r7, #4
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80093f0:	1d3b      	adds	r3, r7, #4
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	461a      	mov	r2, r3
 80093fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009400:	4413      	add	r3, r2
 8009402:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009406:	463b      	mov	r3, r7
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	011a      	lsls	r2, r3, #4
 800940e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009412:	4413      	add	r3, r2
 8009414:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009418:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800941c:	463b      	mov	r3, r7
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d116      	bne.n	8009454 <USB_EPStartXfer+0x1024>
 8009426:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800942a:	881b      	ldrh	r3, [r3, #0]
 800942c:	b29b      	uxth	r3, r3
 800942e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009432:	b29a      	uxth	r2, r3
 8009434:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009438:	801a      	strh	r2, [r3, #0]
 800943a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800943e:	881b      	ldrh	r3, [r3, #0]
 8009440:	b29b      	uxth	r3, r3
 8009442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800944a:	b29a      	uxth	r2, r3
 800944c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009450:	801a      	strh	r2, [r3, #0]
 8009452:	e065      	b.n	8009520 <USB_EPStartXfer+0x10f0>
 8009454:	463b      	mov	r3, r7
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	2b3e      	cmp	r3, #62	; 0x3e
 800945c:	d81a      	bhi.n	8009494 <USB_EPStartXfer+0x1064>
 800945e:	463b      	mov	r3, r7
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	085b      	lsrs	r3, r3, #1
 8009466:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800946a:	463b      	mov	r3, r7
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	2b00      	cmp	r3, #0
 8009476:	d004      	beq.n	8009482 <USB_EPStartXfer+0x1052>
 8009478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800947c:	3301      	adds	r3, #1
 800947e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009486:	b29b      	uxth	r3, r3
 8009488:	029b      	lsls	r3, r3, #10
 800948a:	b29a      	uxth	r2, r3
 800948c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009490:	801a      	strh	r2, [r3, #0]
 8009492:	e045      	b.n	8009520 <USB_EPStartXfer+0x10f0>
 8009494:	463b      	mov	r3, r7
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	095b      	lsrs	r3, r3, #5
 800949c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80094a0:	463b      	mov	r3, r7
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	f003 031f 	and.w	r3, r3, #31
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d104      	bne.n	80094b8 <USB_EPStartXfer+0x1088>
 80094ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b2:	3b01      	subs	r3, #1
 80094b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80094b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094bc:	b29b      	uxth	r3, r3
 80094be:	029b      	lsls	r3, r3, #10
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094d0:	801a      	strh	r2, [r3, #0]
 80094d2:	e025      	b.n	8009520 <USB_EPStartXfer+0x10f0>
 80094d4:	463b      	mov	r3, r7
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	785b      	ldrb	r3, [r3, #1]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d120      	bne.n	8009520 <USB_EPStartXfer+0x10f0>
 80094de:	1d3b      	adds	r3, r7, #4
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80094e6:	1d3b      	adds	r3, r7, #4
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	461a      	mov	r2, r3
 80094f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094f6:	4413      	add	r3, r2
 80094f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80094fc:	463b      	mov	r3, r7
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	011a      	lsls	r2, r3, #4
 8009504:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009508:	4413      	add	r3, r2
 800950a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800950e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009512:	463b      	mov	r3, r7
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	b29a      	uxth	r2, r3
 800951a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800951e:	801a      	strh	r2, [r3, #0]
 8009520:	1d3b      	adds	r3, r7, #4
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009528:	463b      	mov	r3, r7
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	785b      	ldrb	r3, [r3, #1]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d175      	bne.n	800961e <USB_EPStartXfer+0x11ee>
 8009532:	1d3b      	adds	r3, r7, #4
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800953a:	1d3b      	adds	r3, r7, #4
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009542:	b29b      	uxth	r3, r3
 8009544:	461a      	mov	r2, r3
 8009546:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800954a:	4413      	add	r3, r2
 800954c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009550:	463b      	mov	r3, r7
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	011a      	lsls	r2, r3, #4
 8009558:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800955c:	4413      	add	r3, r2
 800955e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009562:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009566:	463b      	mov	r3, r7
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d116      	bne.n	800959e <USB_EPStartXfer+0x116e>
 8009570:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	b29b      	uxth	r3, r3
 8009578:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800957c:	b29a      	uxth	r2, r3
 800957e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009582:	801a      	strh	r2, [r3, #0]
 8009584:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009588:	881b      	ldrh	r3, [r3, #0]
 800958a:	b29b      	uxth	r3, r3
 800958c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009594:	b29a      	uxth	r2, r3
 8009596:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800959a:	801a      	strh	r2, [r3, #0]
 800959c:	e061      	b.n	8009662 <USB_EPStartXfer+0x1232>
 800959e:	463b      	mov	r3, r7
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	2b3e      	cmp	r3, #62	; 0x3e
 80095a6:	d81a      	bhi.n	80095de <USB_EPStartXfer+0x11ae>
 80095a8:	463b      	mov	r3, r7
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	085b      	lsrs	r3, r3, #1
 80095b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80095b4:	463b      	mov	r3, r7
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	f003 0301 	and.w	r3, r3, #1
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d004      	beq.n	80095cc <USB_EPStartXfer+0x119c>
 80095c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80095c6:	3301      	adds	r3, #1
 80095c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80095cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	029b      	lsls	r3, r3, #10
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80095da:	801a      	strh	r2, [r3, #0]
 80095dc:	e041      	b.n	8009662 <USB_EPStartXfer+0x1232>
 80095de:	463b      	mov	r3, r7
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	095b      	lsrs	r3, r3, #5
 80095e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80095ea:	463b      	mov	r3, r7
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	f003 031f 	and.w	r3, r3, #31
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d104      	bne.n	8009602 <USB_EPStartXfer+0x11d2>
 80095f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80095fc:	3b01      	subs	r3, #1
 80095fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009602:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009606:	b29b      	uxth	r3, r3
 8009608:	029b      	lsls	r3, r3, #10
 800960a:	b29b      	uxth	r3, r3
 800960c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009614:	b29a      	uxth	r2, r3
 8009616:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800961a:	801a      	strh	r2, [r3, #0]
 800961c:	e021      	b.n	8009662 <USB_EPStartXfer+0x1232>
 800961e:	463b      	mov	r3, r7
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	785b      	ldrb	r3, [r3, #1]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d11c      	bne.n	8009662 <USB_EPStartXfer+0x1232>
 8009628:	1d3b      	adds	r3, r7, #4
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009630:	b29b      	uxth	r3, r3
 8009632:	461a      	mov	r2, r3
 8009634:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009638:	4413      	add	r3, r2
 800963a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800963e:	463b      	mov	r3, r7
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	011a      	lsls	r2, r3, #4
 8009646:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800964a:	4413      	add	r3, r2
 800964c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009650:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009654:	463b      	mov	r3, r7
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	b29a      	uxth	r2, r3
 800965c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009660:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009662:	463b      	mov	r3, r7
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	2b00      	cmp	r3, #0
 800966a:	f000 81a4 	beq.w	80099b6 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800966e:	1d3b      	adds	r3, r7, #4
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	463b      	mov	r3, r7
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4413      	add	r3, r2
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009682:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d005      	beq.n	800969a <USB_EPStartXfer+0x126a>
 800968e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10d      	bne.n	80096b6 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800969a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800969e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f040 8187 	bne.w	80099b6 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80096a8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80096ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f040 8180 	bne.w	80099b6 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80096b6:	1d3b      	adds	r3, r7, #4
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	463b      	mov	r3, r7
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	4413      	add	r3, r2
 80096c4:	881b      	ldrh	r3, [r3, #0]
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096d0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80096d4:	1d3b      	adds	r3, r7, #4
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	463b      	mov	r3, r7
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	441a      	add	r2, r3
 80096e2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80096e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	8013      	strh	r3, [r2, #0]
 80096fa:	e15c      	b.n	80099b6 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80096fc:	463b      	mov	r3, r7
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	78db      	ldrb	r3, [r3, #3]
 8009702:	2b01      	cmp	r3, #1
 8009704:	f040 8155 	bne.w	80099b2 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009708:	463b      	mov	r3, r7
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	699a      	ldr	r2, [r3, #24]
 800970e:	463b      	mov	r3, r7
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	429a      	cmp	r2, r3
 8009716:	d90e      	bls.n	8009736 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8009718:	463b      	mov	r3, r7
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8009722:	463b      	mov	r3, r7
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	699a      	ldr	r2, [r3, #24]
 8009728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800972c:	1ad2      	subs	r2, r2, r3
 800972e:	463b      	mov	r3, r7
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	619a      	str	r2, [r3, #24]
 8009734:	e008      	b.n	8009748 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8009736:	463b      	mov	r3, r7
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009740:	463b      	mov	r3, r7
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2200      	movs	r2, #0
 8009746:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009748:	463b      	mov	r3, r7
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	785b      	ldrb	r3, [r3, #1]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d16f      	bne.n	8009832 <USB_EPStartXfer+0x1402>
 8009752:	1d3b      	adds	r3, r7, #4
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800975a:	1d3b      	adds	r3, r7, #4
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009762:	b29b      	uxth	r3, r3
 8009764:	461a      	mov	r2, r3
 8009766:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800976a:	4413      	add	r3, r2
 800976c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009770:	463b      	mov	r3, r7
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	011a      	lsls	r2, r3, #4
 8009778:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800977c:	4413      	add	r3, r2
 800977e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009782:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009786:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800978a:	2b00      	cmp	r3, #0
 800978c:	d116      	bne.n	80097bc <USB_EPStartXfer+0x138c>
 800978e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009792:	881b      	ldrh	r3, [r3, #0]
 8009794:	b29b      	uxth	r3, r3
 8009796:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800979a:	b29a      	uxth	r2, r3
 800979c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097a0:	801a      	strh	r2, [r3, #0]
 80097a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097a6:	881b      	ldrh	r3, [r3, #0]
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097b8:	801a      	strh	r2, [r3, #0]
 80097ba:	e05f      	b.n	800987c <USB_EPStartXfer+0x144c>
 80097bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097c0:	2b3e      	cmp	r3, #62	; 0x3e
 80097c2:	d818      	bhi.n	80097f6 <USB_EPStartXfer+0x13c6>
 80097c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097c8:	085b      	lsrs	r3, r3, #1
 80097ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80097ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097d2:	f003 0301 	and.w	r3, r3, #1
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d004      	beq.n	80097e4 <USB_EPStartXfer+0x13b4>
 80097da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097de:	3301      	adds	r3, #1
 80097e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80097e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	029b      	lsls	r3, r3, #10
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097f2:	801a      	strh	r2, [r3, #0]
 80097f4:	e042      	b.n	800987c <USB_EPStartXfer+0x144c>
 80097f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097fa:	095b      	lsrs	r3, r3, #5
 80097fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009804:	f003 031f 	and.w	r3, r3, #31
 8009808:	2b00      	cmp	r3, #0
 800980a:	d104      	bne.n	8009816 <USB_EPStartXfer+0x13e6>
 800980c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009810:	3b01      	subs	r3, #1
 8009812:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800981a:	b29b      	uxth	r3, r3
 800981c:	029b      	lsls	r3, r3, #10
 800981e:	b29b      	uxth	r3, r3
 8009820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009828:	b29a      	uxth	r2, r3
 800982a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800982e:	801a      	strh	r2, [r3, #0]
 8009830:	e024      	b.n	800987c <USB_EPStartXfer+0x144c>
 8009832:	463b      	mov	r3, r7
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	785b      	ldrb	r3, [r3, #1]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d11f      	bne.n	800987c <USB_EPStartXfer+0x144c>
 800983c:	1d3b      	adds	r3, r7, #4
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009844:	1d3b      	adds	r3, r7, #4
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800984c:	b29b      	uxth	r3, r3
 800984e:	461a      	mov	r2, r3
 8009850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009854:	4413      	add	r3, r2
 8009856:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800985a:	463b      	mov	r3, r7
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	011a      	lsls	r2, r3, #4
 8009862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009866:	4413      	add	r3, r2
 8009868:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800986c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009874:	b29a      	uxth	r2, r3
 8009876:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800987a:	801a      	strh	r2, [r3, #0]
 800987c:	1d3b      	adds	r3, r7, #4
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009884:	463b      	mov	r3, r7
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	785b      	ldrb	r3, [r3, #1]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d16f      	bne.n	800996e <USB_EPStartXfer+0x153e>
 800988e:	1d3b      	adds	r3, r7, #4
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009896:	1d3b      	adds	r3, r7, #4
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800989e:	b29b      	uxth	r3, r3
 80098a0:	461a      	mov	r2, r3
 80098a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098a6:	4413      	add	r3, r2
 80098a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80098ac:	463b      	mov	r3, r7
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	011a      	lsls	r2, r3, #4
 80098b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098b8:	4413      	add	r3, r2
 80098ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80098be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80098c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d116      	bne.n	80098f8 <USB_EPStartXfer+0x14c8>
 80098ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098ce:	881b      	ldrh	r3, [r3, #0]
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098dc:	801a      	strh	r2, [r3, #0]
 80098de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098e2:	881b      	ldrh	r3, [r3, #0]
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098f4:	801a      	strh	r2, [r3, #0]
 80098f6:	e05e      	b.n	80099b6 <USB_EPStartXfer+0x1586>
 80098f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098fc:	2b3e      	cmp	r3, #62	; 0x3e
 80098fe:	d818      	bhi.n	8009932 <USB_EPStartXfer+0x1502>
 8009900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009904:	085b      	lsrs	r3, r3, #1
 8009906:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800990a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	2b00      	cmp	r3, #0
 8009914:	d004      	beq.n	8009920 <USB_EPStartXfer+0x14f0>
 8009916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800991a:	3301      	adds	r3, #1
 800991c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009920:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009924:	b29b      	uxth	r3, r3
 8009926:	029b      	lsls	r3, r3, #10
 8009928:	b29a      	uxth	r2, r3
 800992a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800992e:	801a      	strh	r2, [r3, #0]
 8009930:	e041      	b.n	80099b6 <USB_EPStartXfer+0x1586>
 8009932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009936:	095b      	lsrs	r3, r3, #5
 8009938:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800993c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009940:	f003 031f 	and.w	r3, r3, #31
 8009944:	2b00      	cmp	r3, #0
 8009946:	d104      	bne.n	8009952 <USB_EPStartXfer+0x1522>
 8009948:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800994c:	3b01      	subs	r3, #1
 800994e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009952:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009956:	b29b      	uxth	r3, r3
 8009958:	029b      	lsls	r3, r3, #10
 800995a:	b29b      	uxth	r3, r3
 800995c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009964:	b29a      	uxth	r2, r3
 8009966:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800996a:	801a      	strh	r2, [r3, #0]
 800996c:	e023      	b.n	80099b6 <USB_EPStartXfer+0x1586>
 800996e:	463b      	mov	r3, r7
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	785b      	ldrb	r3, [r3, #1]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d11e      	bne.n	80099b6 <USB_EPStartXfer+0x1586>
 8009978:	1d3b      	adds	r3, r7, #4
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009980:	b29b      	uxth	r3, r3
 8009982:	461a      	mov	r2, r3
 8009984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009988:	4413      	add	r3, r2
 800998a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800998e:	463b      	mov	r3, r7
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	011a      	lsls	r2, r3, #4
 8009996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800999a:	4413      	add	r3, r2
 800999c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80099a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80099a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099a8:	b29a      	uxth	r2, r3
 80099aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099ae:	801a      	strh	r2, [r3, #0]
 80099b0:	e001      	b.n	80099b6 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e02e      	b.n	8009a14 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099b6:	1d3b      	adds	r3, r7, #4
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	463b      	mov	r3, r7
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099d0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80099d4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80099d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099dc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80099e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80099e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099e8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80099ec:	1d3b      	adds	r3, r7, #4
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	463b      	mov	r3, r7
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	441a      	add	r2, r3
 80099fa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80099fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b085      	sub	sp, #20
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
 8009a26:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	785b      	ldrb	r3, [r3, #1]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d020      	beq.n	8009a72 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	881b      	ldrh	r3, [r3, #0]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a46:	81bb      	strh	r3, [r7, #12]
 8009a48:	89bb      	ldrh	r3, [r7, #12]
 8009a4a:	f083 0310 	eor.w	r3, r3, #16
 8009a4e:	81bb      	strh	r3, [r7, #12]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	441a      	add	r2, r3
 8009a5a:	89bb      	ldrh	r3, [r7, #12]
 8009a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	8013      	strh	r3, [r2, #0]
 8009a70:	e01f      	b.n	8009ab2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a88:	81fb      	strh	r3, [r7, #14]
 8009a8a:	89fb      	ldrh	r3, [r7, #14]
 8009a8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a90:	81fb      	strh	r3, [r7, #14]
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	441a      	add	r2, r3
 8009a9c:	89fb      	ldrh	r3, [r7, #14]
 8009a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bc80      	pop	{r7}
 8009abc:	4770      	bx	lr

08009abe <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009abe:	b480      	push	{r7}
 8009ac0:	b087      	sub	sp, #28
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
 8009ac6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	7b1b      	ldrb	r3, [r3, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f040 809d 	bne.w	8009c0c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	785b      	ldrb	r3, [r3, #1]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d04c      	beq.n	8009b74 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	881b      	ldrh	r3, [r3, #0]
 8009ae6:	823b      	strh	r3, [r7, #16]
 8009ae8:	8a3b      	ldrh	r3, [r7, #16]
 8009aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d01b      	beq.n	8009b2a <USB_EPClearStall+0x6c>
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	881b      	ldrh	r3, [r3, #0]
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b08:	81fb      	strh	r3, [r7, #14]
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	441a      	add	r2, r3
 8009b14:	89fb      	ldrh	r3, [r7, #14]
 8009b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	78db      	ldrb	r3, [r3, #3]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d06c      	beq.n	8009c0c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	4413      	add	r3, r2
 8009b3c:	881b      	ldrh	r3, [r3, #0]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b48:	81bb      	strh	r3, [r7, #12]
 8009b4a:	89bb      	ldrh	r3, [r7, #12]
 8009b4c:	f083 0320 	eor.w	r3, r3, #32
 8009b50:	81bb      	strh	r3, [r7, #12]
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	441a      	add	r2, r3
 8009b5c:	89bb      	ldrh	r3, [r7, #12]
 8009b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	8013      	strh	r3, [r2, #0]
 8009b72:	e04b      	b.n	8009c0c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4413      	add	r3, r2
 8009b7e:	881b      	ldrh	r3, [r3, #0]
 8009b80:	82fb      	strh	r3, [r7, #22]
 8009b82:	8afb      	ldrh	r3, [r7, #22]
 8009b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d01b      	beq.n	8009bc4 <USB_EPClearStall+0x106>
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	4413      	add	r3, r2
 8009b96:	881b      	ldrh	r3, [r3, #0]
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ba2:	82bb      	strh	r3, [r7, #20]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	441a      	add	r2, r3
 8009bae:	8abb      	ldrh	r3, [r7, #20]
 8009bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	4413      	add	r3, r2
 8009bce:	881b      	ldrh	r3, [r3, #0]
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bda:	827b      	strh	r3, [r7, #18]
 8009bdc:	8a7b      	ldrh	r3, [r7, #18]
 8009bde:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009be2:	827b      	strh	r3, [r7, #18]
 8009be4:	8a7b      	ldrh	r3, [r7, #18]
 8009be6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009bea:	827b      	strh	r3, [r7, #18]
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	441a      	add	r2, r3
 8009bf6:	8a7b      	ldrh	r3, [r7, #18]
 8009bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	371c      	adds	r7, #28
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bc80      	pop	{r7}
 8009c16:	4770      	bx	lr

08009c18 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	460b      	mov	r3, r1
 8009c22:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009c24:	78fb      	ldrb	r3, [r7, #3]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d103      	bne.n	8009c32 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2280      	movs	r2, #128	; 0x80
 8009c2e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bc80      	pop	{r7}
 8009c3c:	4770      	bx	lr

08009c3e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b083      	sub	sp, #12
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bc80      	pop	{r7}
 8009c50:	4770      	bx	lr

08009c52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009c52:	b480      	push	{r7}
 8009c54:	b083      	sub	sp, #12
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bc80      	pop	{r7}
 8009c64:	4770      	bx	lr

08009c66 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009c66:	b480      	push	{r7}
 8009c68:	b085      	sub	sp, #20
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009c78:	68fb      	ldr	r3, [r7, #12]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3714      	adds	r7, #20
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bc80      	pop	{r7}
 8009c82:	4770      	bx	lr

08009c84 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bc80      	pop	{r7}
 8009c98:	4770      	bx	lr

08009c9a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c9a:	b480      	push	{r7}
 8009c9c:	b08d      	sub	sp, #52	; 0x34
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	60f8      	str	r0, [r7, #12]
 8009ca2:	60b9      	str	r1, [r7, #8]
 8009ca4:	4611      	mov	r1, r2
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	460b      	mov	r3, r1
 8009caa:	80fb      	strh	r3, [r7, #6]
 8009cac:	4613      	mov	r3, r2
 8009cae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009cb0:	88bb      	ldrh	r3, [r7, #4]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	085b      	lsrs	r3, r3, #1
 8009cb6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009cc0:	88fb      	ldrh	r3, [r7, #6]
 8009cc2:	005a      	lsls	r2, r3, #1
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ccc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009cce:	6a3b      	ldr	r3, [r7, #32]
 8009cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cd2:	e01e      	b.n	8009d12 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cdc:	3301      	adds	r3, #1
 8009cde:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	021b      	lsls	r3, r3, #8
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	461a      	mov	r2, r3
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfc:	3302      	adds	r3, #2
 8009cfe:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d02:	3302      	adds	r3, #2
 8009d04:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d08:	3301      	adds	r3, #1
 8009d0a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1dd      	bne.n	8009cd4 <USB_WritePMA+0x3a>
  }
}
 8009d18:	bf00      	nop
 8009d1a:	bf00      	nop
 8009d1c:	3734      	adds	r7, #52	; 0x34
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bc80      	pop	{r7}
 8009d22:	4770      	bx	lr

08009d24 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b08b      	sub	sp, #44	; 0x2c
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	4611      	mov	r1, r2
 8009d30:	461a      	mov	r2, r3
 8009d32:	460b      	mov	r3, r1
 8009d34:	80fb      	strh	r3, [r7, #6]
 8009d36:	4613      	mov	r3, r2
 8009d38:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009d3a:	88bb      	ldrh	r3, [r7, #4]
 8009d3c:	085b      	lsrs	r3, r3, #1
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009d4a:	88fb      	ldrh	r3, [r7, #6]
 8009d4c:	005a      	lsls	r2, r3, #1
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	4413      	add	r3, r2
 8009d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d56:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d5c:	e01b      	b.n	8009d96 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009d5e:	6a3b      	ldr	r3, [r7, #32]
 8009d60:	881b      	ldrh	r3, [r3, #0]
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009d66:	6a3b      	ldr	r3, [r7, #32]
 8009d68:	3302      	adds	r3, #2
 8009d6a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	b2da      	uxtb	r2, r3
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	3301      	adds	r3, #1
 8009d78:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	0a1b      	lsrs	r3, r3, #8
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	3301      	adds	r3, #1
 8009d88:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	3302      	adds	r3, #2
 8009d8e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	3b01      	subs	r3, #1
 8009d94:	627b      	str	r3, [r7, #36]	; 0x24
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1e0      	bne.n	8009d5e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009d9c:	88bb      	ldrh	r3, [r7, #4]
 8009d9e:	f003 0301 	and.w	r3, r3, #1
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d007      	beq.n	8009db8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009da8:	6a3b      	ldr	r3, [r7, #32]
 8009daa:	881b      	ldrh	r3, [r3, #0]
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	b2da      	uxtb	r2, r3
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	701a      	strb	r2, [r3, #0]
  }
}
 8009db8:	bf00      	nop
 8009dba:	372c      	adds	r7, #44	; 0x2c
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bc80      	pop	{r7}
 8009dc0:	4770      	bx	lr

08009dc2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b084      	sub	sp, #16
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	460b      	mov	r3, r1
 8009dcc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	7c1b      	ldrb	r3, [r3, #16]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d115      	bne.n	8009e06 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009dda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dde:	2202      	movs	r2, #2
 8009de0:	2181      	movs	r1, #129	; 0x81
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f004 fdd9 	bl	800e99a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009df2:	2202      	movs	r2, #2
 8009df4:	2101      	movs	r1, #1
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f004 fdcf 	bl	800e99a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009e04:	e012      	b.n	8009e2c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009e06:	2340      	movs	r3, #64	; 0x40
 8009e08:	2202      	movs	r2, #2
 8009e0a:	2181      	movs	r1, #129	; 0x81
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f004 fdc4 	bl	800e99a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2201      	movs	r2, #1
 8009e16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009e18:	2340      	movs	r3, #64	; 0x40
 8009e1a:	2202      	movs	r2, #2
 8009e1c:	2101      	movs	r1, #1
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f004 fdbb 	bl	800e99a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009e2c:	2308      	movs	r3, #8
 8009e2e:	2203      	movs	r2, #3
 8009e30:	2182      	movs	r1, #130	; 0x82
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f004 fdb1 	bl	800e99a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009e3e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009e42:	f004 fed1 	bl	800ebe8 <USBD_static_malloc>
 8009e46:	4602      	mov	r2, r0
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d102      	bne.n	8009e5e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	73fb      	strb	r3, [r7, #15]
 8009e5c:	e026      	b.n	8009eac <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e64:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	7c1b      	ldrb	r3, [r3, #16]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d109      	bne.n	8009e9c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e92:	2101      	movs	r1, #1
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f004 fe71 	bl	800eb7c <USBD_LL_PrepareReceive>
 8009e9a:	e007      	b.n	8009eac <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ea2:	2340      	movs	r3, #64	; 0x40
 8009ea4:	2101      	movs	r1, #1
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f004 fe68 	bl	800eb7c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009ec6:	2181      	movs	r1, #129	; 0x81
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f004 fd8c 	bl	800e9e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009ed4:	2101      	movs	r1, #1
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f004 fd85 	bl	800e9e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009ee4:	2182      	movs	r1, #130	; 0x82
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f004 fd7d 	bl	800e9e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00e      	beq.n	8009f1a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f004 fe77 	bl	800ec00 <USBD_static_free>
    pdev->pClassData = NULL;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f34:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009f36:	2300      	movs	r3, #0
 8009f38:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d039      	beq.n	8009fc2 <USBD_CDC_Setup+0x9e>
 8009f4e:	2b20      	cmp	r3, #32
 8009f50:	d17f      	bne.n	800a052 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	88db      	ldrh	r3, [r3, #6]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d029      	beq.n	8009fae <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	b25b      	sxtb	r3, r3
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	da11      	bge.n	8009f88 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	683a      	ldr	r2, [r7, #0]
 8009f6e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009f70:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	88d2      	ldrh	r2, [r2, #6]
 8009f76:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009f78:	6939      	ldr	r1, [r7, #16]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	88db      	ldrh	r3, [r3, #6]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f001 fa0a 	bl	800b39a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009f86:	e06b      	b.n	800a060 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	785a      	ldrb	r2, [r3, #1]
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	88db      	ldrh	r3, [r3, #6]
 8009f96:	b2da      	uxtb	r2, r3
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009f9e:	6939      	ldr	r1, [r7, #16]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	88db      	ldrh	r3, [r3, #6]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f001 fa25 	bl	800b3f6 <USBD_CtlPrepareRx>
      break;
 8009fac:	e058      	b.n	800a060 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	7850      	ldrb	r0, [r2, #1]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	6839      	ldr	r1, [r7, #0]
 8009fbe:	4798      	blx	r3
      break;
 8009fc0:	e04e      	b.n	800a060 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	785b      	ldrb	r3, [r3, #1]
 8009fc6:	2b0b      	cmp	r3, #11
 8009fc8:	d02e      	beq.n	800a028 <USBD_CDC_Setup+0x104>
 8009fca:	2b0b      	cmp	r3, #11
 8009fcc:	dc38      	bgt.n	800a040 <USBD_CDC_Setup+0x11c>
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d002      	beq.n	8009fd8 <USBD_CDC_Setup+0xb4>
 8009fd2:	2b0a      	cmp	r3, #10
 8009fd4:	d014      	beq.n	800a000 <USBD_CDC_Setup+0xdc>
 8009fd6:	e033      	b.n	800a040 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fde:	2b03      	cmp	r3, #3
 8009fe0:	d107      	bne.n	8009ff2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009fe2:	f107 030c 	add.w	r3, r7, #12
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f001 f9d5 	bl	800b39a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ff0:	e02e      	b.n	800a050 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f001 f966 	bl	800b2c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	75fb      	strb	r3, [r7, #23]
          break;
 8009ffe:	e027      	b.n	800a050 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a006:	2b03      	cmp	r3, #3
 800a008:	d107      	bne.n	800a01a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a00a:	f107 030f 	add.w	r3, r7, #15
 800a00e:	2201      	movs	r2, #1
 800a010:	4619      	mov	r1, r3
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f001 f9c1 	bl	800b39a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a018:	e01a      	b.n	800a050 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a01a:	6839      	ldr	r1, [r7, #0]
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f001 f952 	bl	800b2c6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a022:	2302      	movs	r3, #2
 800a024:	75fb      	strb	r3, [r7, #23]
          break;
 800a026:	e013      	b.n	800a050 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a02e:	2b03      	cmp	r3, #3
 800a030:	d00d      	beq.n	800a04e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a032:	6839      	ldr	r1, [r7, #0]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f001 f946 	bl	800b2c6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a03a:	2302      	movs	r3, #2
 800a03c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a03e:	e006      	b.n	800a04e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a040:	6839      	ldr	r1, [r7, #0]
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f001 f93f 	bl	800b2c6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a048:	2302      	movs	r3, #2
 800a04a:	75fb      	strb	r3, [r7, #23]
          break;
 800a04c:	e000      	b.n	800a050 <USBD_CDC_Setup+0x12c>
          break;
 800a04e:	bf00      	nop
      }
      break;
 800a050:	e006      	b.n	800a060 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a052:	6839      	ldr	r1, [r7, #0]
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f001 f936 	bl	800b2c6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a05a:	2302      	movs	r3, #2
 800a05c:	75fb      	strb	r3, [r7, #23]
      break;
 800a05e:	bf00      	nop
  }

  return ret;
 800a060:	7dfb      	ldrb	r3, [r7, #23]
}
 800a062:	4618      	mov	r0, r3
 800a064:	3718      	adds	r7, #24
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b084      	sub	sp, #16
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
 800a072:	460b      	mov	r3, r1
 800a074:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a07c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a084:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d03a      	beq.n	800a106 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a090:	78fa      	ldrb	r2, [r7, #3]
 800a092:	6879      	ldr	r1, [r7, #4]
 800a094:	4613      	mov	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	440b      	add	r3, r1
 800a09e:	331c      	adds	r3, #28
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d029      	beq.n	800a0fa <USBD_CDC_DataIn+0x90>
 800a0a6:	78fa      	ldrb	r2, [r7, #3]
 800a0a8:	6879      	ldr	r1, [r7, #4]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	440b      	add	r3, r1
 800a0b4:	331c      	adds	r3, #28
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	78f9      	ldrb	r1, [r7, #3]
 800a0ba:	68b8      	ldr	r0, [r7, #8]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	440b      	add	r3, r1
 800a0c2:	00db      	lsls	r3, r3, #3
 800a0c4:	4403      	add	r3, r0
 800a0c6:	3338      	adds	r3, #56	; 0x38
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	fbb2 f1f3 	udiv	r1, r2, r3
 800a0ce:	fb03 f301 	mul.w	r3, r3, r1
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d110      	bne.n	800a0fa <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a0d8:	78fa      	ldrb	r2, [r7, #3]
 800a0da:	6879      	ldr	r1, [r7, #4]
 800a0dc:	4613      	mov	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	440b      	add	r3, r1
 800a0e6:	331c      	adds	r3, #28
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a0ec:	78f9      	ldrb	r1, [r7, #3]
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f004 fd1f 	bl	800eb36 <USBD_LL_Transmit>
 800a0f8:	e003      	b.n	800a102 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a102:	2300      	movs	r3, #0
 800a104:	e000      	b.n	800a108 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a106:	2302      	movs	r3, #2
  }
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a122:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a124:	78fb      	ldrb	r3, [r7, #3]
 800a126:	4619      	mov	r1, r3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f004 fd4a 	bl	800ebc2 <USBD_LL_GetRxDataSize>
 800a12e:	4602      	mov	r2, r0
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d00d      	beq.n	800a15c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a154:	4611      	mov	r1, r2
 800a156:	4798      	blx	r3

    return USBD_OK;
 800a158:	2300      	movs	r3, #0
 800a15a:	e000      	b.n	800a15e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a15c:	2302      	movs	r3, #2
  }
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b084      	sub	sp, #16
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a174:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d015      	beq.n	800a1ac <USBD_CDC_EP0_RxReady+0x46>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a186:	2bff      	cmp	r3, #255	; 0xff
 800a188:	d010      	beq.n	800a1ac <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a198:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a1a0:	b292      	uxth	r2, r2
 800a1a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	22ff      	movs	r2, #255	; 0xff
 800a1a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
	...

0800a1b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2243      	movs	r2, #67	; 0x43
 800a1c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a1c6:	4b03      	ldr	r3, [pc, #12]	; (800a1d4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bc80      	pop	{r7}
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	200000a4 	.word	0x200000a4

0800a1d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2243      	movs	r2, #67	; 0x43
 800a1e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a1e6:	4b03      	ldr	r3, [pc, #12]	; (800a1f4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bc80      	pop	{r7}
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	20000060 	.word	0x20000060

0800a1f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2243      	movs	r2, #67	; 0x43
 800a204:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a206:	4b03      	ldr	r3, [pc, #12]	; (800a214 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a208:	4618      	mov	r0, r3
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bc80      	pop	{r7}
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	200000e8 	.word	0x200000e8

0800a218 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	220a      	movs	r2, #10
 800a224:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a226:	4b03      	ldr	r3, [pc, #12]	; (800a234 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a228:	4618      	mov	r0, r3
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bc80      	pop	{r7}
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	2000001c 	.word	0x2000001c

0800a238 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a242:	2302      	movs	r3, #2
 800a244:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d005      	beq.n	800a258 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a254:	2300      	movs	r3, #0
 800a256:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a258:	7bfb      	ldrb	r3, [r7, #15]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3714      	adds	r7, #20
 800a25e:	46bd      	mov	sp, r7
 800a260:	bc80      	pop	{r7}
 800a262:	4770      	bx	lr

0800a264 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a264:	b480      	push	{r7}
 800a266:	b087      	sub	sp, #28
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	4613      	mov	r3, r2
 800a270:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a278:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a282:	88fa      	ldrh	r2, [r7, #6]
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	371c      	adds	r7, #28
 800a290:	46bd      	mov	sp, r7
 800a292:	bc80      	pop	{r7}
 800a294:	4770      	bx	lr

0800a296 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a296:	b480      	push	{r7}
 800a298:	b085      	sub	sp, #20
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
 800a29e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2a6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3714      	adds	r7, #20
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bc80      	pop	{r7}
 800a2ba:	4770      	bx	lr

0800a2bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d01c      	beq.n	800a310 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d115      	bne.n	800a30c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	2181      	movs	r1, #129	; 0x81
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f004 fc17 	bl	800eb36 <USBD_LL_Transmit>

      return USBD_OK;
 800a308:	2300      	movs	r3, #0
 800a30a:	e002      	b.n	800a312 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a30c:	2301      	movs	r3, #1
 800a30e:	e000      	b.n	800a312 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a310:	2302      	movs	r3, #2
  }
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b084      	sub	sp, #16
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a328:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a330:	2b00      	cmp	r3, #0
 800a332:	d017      	beq.n	800a364 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	7c1b      	ldrb	r3, [r3, #16]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d109      	bne.n	800a350 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a342:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a346:	2101      	movs	r1, #1
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f004 fc17 	bl	800eb7c <USBD_LL_PrepareReceive>
 800a34e:	e007      	b.n	800a360 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a356:	2340      	movs	r3, #64	; 0x40
 800a358:	2101      	movs	r1, #1
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f004 fc0e 	bl	800eb7c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	e000      	b.n	800a366 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a364:	2302      	movs	r3, #2
  }
}
 800a366:	4618      	mov	r0, r3
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b084      	sub	sp, #16
 800a372:	af00      	add	r7, sp, #0
 800a374:	60f8      	str	r0, [r7, #12]
 800a376:	60b9      	str	r1, [r7, #8]
 800a378:	4613      	mov	r3, r2
 800a37a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a382:	2302      	movs	r3, #2
 800a384:	e01a      	b.n	800a3bc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d003      	beq.n	800a398 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2200      	movs	r2, #0
 800a394:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d003      	beq.n	800a3a6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	79fa      	ldrb	r2, [r7, #7]
 800a3b2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f004 fa7b 	bl	800e8b0 <USBD_LL_Init>

  return USBD_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d006      	beq.n	800a3e6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	683a      	ldr	r2, [r7, #0]
 800a3dc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	73fb      	strb	r3, [r7, #15]
 800a3e4:	e001      	b.n	800a3ea <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3714      	adds	r7, #20
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bc80      	pop	{r7}
 800a3f4:	4770      	bx	lr

0800a3f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b082      	sub	sp, #8
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f004 fab0 	bl	800e964 <USBD_LL_Start>

  return USBD_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a40e:	b480      	push	{r7}
 800a410:	b083      	sub	sp, #12
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bc80      	pop	{r7}
 800a420:	4770      	bx	lr

0800a422 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b084      	sub	sp, #16
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	460b      	mov	r3, r1
 800a42c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a42e:	2302      	movs	r3, #2
 800a430:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00c      	beq.n	800a456 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	78fa      	ldrb	r2, [r7, #3]
 800a446:	4611      	mov	r1, r2
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	4798      	blx	r3
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d101      	bne.n	800a456 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a452:	2300      	movs	r3, #0
 800a454:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a456:	7bfb      	ldrb	r3, [r7, #15]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	460b      	mov	r3, r1
 800a46a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	78fa      	ldrb	r2, [r7, #3]
 800a476:	4611      	mov	r1, r2
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	4798      	blx	r3

  return USBD_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3708      	adds	r7, #8
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b082      	sub	sp, #8
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a496:	6839      	ldr	r1, [r7, #0]
 800a498:	4618      	mov	r0, r3
 800a49a:	f000 fed8 	bl	800b24e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a4ba:	f003 031f 	and.w	r3, r3, #31
 800a4be:	2b02      	cmp	r3, #2
 800a4c0:	d016      	beq.n	800a4f0 <USBD_LL_SetupStage+0x6a>
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d81c      	bhi.n	800a500 <USBD_LL_SetupStage+0x7a>
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d002      	beq.n	800a4d0 <USBD_LL_SetupStage+0x4a>
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d008      	beq.n	800a4e0 <USBD_LL_SetupStage+0x5a>
 800a4ce:	e017      	b.n	800a500 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 f9cb 	bl	800a874 <USBD_StdDevReq>
      break;
 800a4de:	e01a      	b.n	800a516 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 fa2d 	bl	800a948 <USBD_StdItfReq>
      break;
 800a4ee:	e012      	b.n	800a516 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 fa6d 	bl	800a9d8 <USBD_StdEPReq>
      break;
 800a4fe:	e00a      	b.n	800a516 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a506:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	4619      	mov	r1, r3
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f004 fa88 	bl	800ea24 <USBD_LL_StallEP>
      break;
 800a514:	bf00      	nop
  }

  return USBD_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3708      	adds	r7, #8
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	460b      	mov	r3, r1
 800a52a:	607a      	str	r2, [r7, #4]
 800a52c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a52e:	7afb      	ldrb	r3, [r7, #11]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d14b      	bne.n	800a5cc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a53a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a542:	2b03      	cmp	r3, #3
 800a544:	d134      	bne.n	800a5b0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	68da      	ldr	r2, [r3, #12]
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	429a      	cmp	r2, r3
 800a550:	d919      	bls.n	800a586 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	68da      	ldr	r2, [r3, #12]
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	1ad2      	subs	r2, r2, r3
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	68da      	ldr	r2, [r3, #12]
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a568:	429a      	cmp	r2, r3
 800a56a:	d203      	bcs.n	800a574 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a570:	b29b      	uxth	r3, r3
 800a572:	e002      	b.n	800a57a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a578:	b29b      	uxth	r3, r3
 800a57a:	461a      	mov	r2, r3
 800a57c:	6879      	ldr	r1, [r7, #4]
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f000 ff57 	bl	800b432 <USBD_CtlContinueRx>
 800a584:	e038      	b.n	800a5f8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00a      	beq.n	800a5a8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a598:	2b03      	cmp	r3, #3
 800a59a:	d105      	bne.n	800a5a8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	f000 ff54 	bl	800b456 <USBD_CtlSendStatus>
 800a5ae:	e023      	b.n	800a5f8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5b6:	2b05      	cmp	r3, #5
 800a5b8:	d11e      	bne.n	800a5f8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f004 fa2d 	bl	800ea24 <USBD_LL_StallEP>
 800a5ca:	e015      	b.n	800a5f8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00d      	beq.n	800a5f4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a5de:	2b03      	cmp	r3, #3
 800a5e0:	d108      	bne.n	800a5f4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5e8:	699b      	ldr	r3, [r3, #24]
 800a5ea:	7afa      	ldrb	r2, [r7, #11]
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	4798      	blx	r3
 800a5f2:	e001      	b.n	800a5f8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	e000      	b.n	800a5fa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3718      	adds	r7, #24
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b086      	sub	sp, #24
 800a606:	af00      	add	r7, sp, #0
 800a608:	60f8      	str	r0, [r7, #12]
 800a60a:	460b      	mov	r3, r1
 800a60c:	607a      	str	r2, [r7, #4]
 800a60e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a610:	7afb      	ldrb	r3, [r7, #11]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d17f      	bne.n	800a716 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3314      	adds	r3, #20
 800a61a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a622:	2b02      	cmp	r3, #2
 800a624:	d15c      	bne.n	800a6e0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	68da      	ldr	r2, [r3, #12]
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d915      	bls.n	800a65e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	68da      	ldr	r2, [r3, #12]
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	1ad2      	subs	r2, r2, r3
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	68db      	ldr	r3, [r3, #12]
 800a644:	b29b      	uxth	r3, r3
 800a646:	461a      	mov	r2, r3
 800a648:	6879      	ldr	r1, [r7, #4]
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f000 fec1 	bl	800b3d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a650:	2300      	movs	r3, #0
 800a652:	2200      	movs	r2, #0
 800a654:	2100      	movs	r1, #0
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f004 fa90 	bl	800eb7c <USBD_LL_PrepareReceive>
 800a65c:	e04e      	b.n	800a6fc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	6912      	ldr	r2, [r2, #16]
 800a666:	fbb3 f1f2 	udiv	r1, r3, r2
 800a66a:	fb02 f201 	mul.w	r2, r2, r1
 800a66e:	1a9b      	subs	r3, r3, r2
 800a670:	2b00      	cmp	r3, #0
 800a672:	d11c      	bne.n	800a6ae <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	689a      	ldr	r2, [r3, #8]
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d316      	bcc.n	800a6ae <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	689a      	ldr	r2, [r3, #8]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d20f      	bcs.n	800a6ae <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a68e:	2200      	movs	r2, #0
 800a690:	2100      	movs	r1, #0
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f000 fe9d 	bl	800b3d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f004 fa68 	bl	800eb7c <USBD_LL_PrepareReceive>
 800a6ac:	e026      	b.n	800a6fc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00a      	beq.n	800a6d0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a6c0:	2b03      	cmp	r3, #3
 800a6c2:	d105      	bne.n	800a6d0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a6d0:	2180      	movs	r1, #128	; 0x80
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f004 f9a6 	bl	800ea24 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 fecf 	bl	800b47c <USBD_CtlReceiveStatus>
 800a6de:	e00d      	b.n	800a6fc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a6e6:	2b04      	cmp	r3, #4
 800a6e8:	d004      	beq.n	800a6f4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d103      	bne.n	800a6fc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a6f4:	2180      	movs	r1, #128	; 0x80
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f004 f994 	bl	800ea24 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a702:	2b01      	cmp	r3, #1
 800a704:	d11d      	bne.n	800a742 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f7ff fe81 	bl	800a40e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a714:	e015      	b.n	800a742 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00d      	beq.n	800a73e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a728:	2b03      	cmp	r3, #3
 800a72a:	d108      	bne.n	800a73e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a732:	695b      	ldr	r3, [r3, #20]
 800a734:	7afa      	ldrb	r2, [r7, #11]
 800a736:	4611      	mov	r1, r2
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	4798      	blx	r3
 800a73c:	e001      	b.n	800a742 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a73e:	2302      	movs	r3, #2
 800a740:	e000      	b.n	800a744 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3718      	adds	r7, #24
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a754:	2340      	movs	r3, #64	; 0x40
 800a756:	2200      	movs	r2, #0
 800a758:	2100      	movs	r1, #0
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f004 f91d 	bl	800e99a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2240      	movs	r2, #64	; 0x40
 800a76c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a770:	2340      	movs	r3, #64	; 0x40
 800a772:	2200      	movs	r2, #0
 800a774:	2180      	movs	r1, #128	; 0x80
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f004 f90f 	bl	800e99a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2240      	movs	r2, #64	; 0x40
 800a786:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d009      	beq.n	800a7c4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	6852      	ldr	r2, [r2, #4]
 800a7bc:	b2d2      	uxtb	r2, r2
 800a7be:	4611      	mov	r1, r2
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	4798      	blx	r3
  }

  return USBD_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a7ce:	b480      	push	{r7}
 800a7d0:	b083      	sub	sp, #12
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	78fa      	ldrb	r2, [r7, #3]
 800a7de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	370c      	adds	r7, #12
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bc80      	pop	{r7}
 800a7ea:	4770      	bx	lr

0800a7ec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2204      	movs	r2, #4
 800a804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	370c      	adds	r7, #12
 800a80e:	46bd      	mov	sp, r7
 800a810:	bc80      	pop	{r7}
 800a812:	4770      	bx	lr

0800a814 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a822:	2b04      	cmp	r3, #4
 800a824:	d105      	bne.n	800a832 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	bc80      	pop	{r7}
 800a83c:	4770      	bx	lr

0800a83e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b082      	sub	sp, #8
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a84c:	2b03      	cmp	r3, #3
 800a84e:	d10b      	bne.n	800a868 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a856:	69db      	ldr	r3, [r3, #28]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d005      	beq.n	800a868 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a862:	69db      	ldr	r3, [r3, #28]
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
	...

0800a874 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a87e:	2300      	movs	r3, #0
 800a880:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a88a:	2b40      	cmp	r3, #64	; 0x40
 800a88c:	d005      	beq.n	800a89a <USBD_StdDevReq+0x26>
 800a88e:	2b40      	cmp	r3, #64	; 0x40
 800a890:	d84f      	bhi.n	800a932 <USBD_StdDevReq+0xbe>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d009      	beq.n	800a8aa <USBD_StdDevReq+0x36>
 800a896:	2b20      	cmp	r3, #32
 800a898:	d14b      	bne.n	800a932 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	6839      	ldr	r1, [r7, #0]
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	4798      	blx	r3
      break;
 800a8a8:	e048      	b.n	800a93c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	785b      	ldrb	r3, [r3, #1]
 800a8ae:	2b09      	cmp	r3, #9
 800a8b0:	d839      	bhi.n	800a926 <USBD_StdDevReq+0xb2>
 800a8b2:	a201      	add	r2, pc, #4	; (adr r2, 800a8b8 <USBD_StdDevReq+0x44>)
 800a8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b8:	0800a909 	.word	0x0800a909
 800a8bc:	0800a91d 	.word	0x0800a91d
 800a8c0:	0800a927 	.word	0x0800a927
 800a8c4:	0800a913 	.word	0x0800a913
 800a8c8:	0800a927 	.word	0x0800a927
 800a8cc:	0800a8eb 	.word	0x0800a8eb
 800a8d0:	0800a8e1 	.word	0x0800a8e1
 800a8d4:	0800a927 	.word	0x0800a927
 800a8d8:	0800a8ff 	.word	0x0800a8ff
 800a8dc:	0800a8f5 	.word	0x0800a8f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a8e0:	6839      	ldr	r1, [r7, #0]
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f9dc 	bl	800aca0 <USBD_GetDescriptor>
          break;
 800a8e8:	e022      	b.n	800a930 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a8ea:	6839      	ldr	r1, [r7, #0]
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fb3f 	bl	800af70 <USBD_SetAddress>
          break;
 800a8f2:	e01d      	b.n	800a930 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a8f4:	6839      	ldr	r1, [r7, #0]
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 fb7e 	bl	800aff8 <USBD_SetConfig>
          break;
 800a8fc:	e018      	b.n	800a930 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fc07 	bl	800b114 <USBD_GetConfig>
          break;
 800a906:	e013      	b.n	800a930 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a908:	6839      	ldr	r1, [r7, #0]
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 fc37 	bl	800b17e <USBD_GetStatus>
          break;
 800a910:	e00e      	b.n	800a930 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a912:	6839      	ldr	r1, [r7, #0]
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 fc65 	bl	800b1e4 <USBD_SetFeature>
          break;
 800a91a:	e009      	b.n	800a930 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a91c:	6839      	ldr	r1, [r7, #0]
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fc74 	bl	800b20c <USBD_ClrFeature>
          break;
 800a924:	e004      	b.n	800a930 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a926:	6839      	ldr	r1, [r7, #0]
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 fccc 	bl	800b2c6 <USBD_CtlError>
          break;
 800a92e:	bf00      	nop
      }
      break;
 800a930:	e004      	b.n	800a93c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a932:	6839      	ldr	r1, [r7, #0]
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fcc6 	bl	800b2c6 <USBD_CtlError>
      break;
 800a93a:	bf00      	nop
  }

  return ret;
 800a93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3710      	adds	r7, #16
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop

0800a948 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a952:	2300      	movs	r3, #0
 800a954:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a95e:	2b40      	cmp	r3, #64	; 0x40
 800a960:	d005      	beq.n	800a96e <USBD_StdItfReq+0x26>
 800a962:	2b40      	cmp	r3, #64	; 0x40
 800a964:	d82e      	bhi.n	800a9c4 <USBD_StdItfReq+0x7c>
 800a966:	2b00      	cmp	r3, #0
 800a968:	d001      	beq.n	800a96e <USBD_StdItfReq+0x26>
 800a96a:	2b20      	cmp	r3, #32
 800a96c:	d12a      	bne.n	800a9c4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a974:	3b01      	subs	r3, #1
 800a976:	2b02      	cmp	r3, #2
 800a978:	d81d      	bhi.n	800a9b6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	889b      	ldrh	r3, [r3, #4]
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	2b01      	cmp	r3, #1
 800a982:	d813      	bhi.n	800a9ac <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	6839      	ldr	r1, [r7, #0]
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	4798      	blx	r3
 800a992:	4603      	mov	r3, r0
 800a994:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	88db      	ldrh	r3, [r3, #6]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d110      	bne.n	800a9c0 <USBD_StdItfReq+0x78>
 800a99e:	7bfb      	ldrb	r3, [r7, #15]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d10d      	bne.n	800a9c0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fd56 	bl	800b456 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a9aa:	e009      	b.n	800a9c0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fc89 	bl	800b2c6 <USBD_CtlError>
          break;
 800a9b4:	e004      	b.n	800a9c0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fc84 	bl	800b2c6 <USBD_CtlError>
          break;
 800a9be:	e000      	b.n	800a9c2 <USBD_StdItfReq+0x7a>
          break;
 800a9c0:	bf00      	nop
      }
      break;
 800a9c2:	e004      	b.n	800a9ce <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 fc7d 	bl	800b2c6 <USBD_CtlError>
      break;
 800a9cc:	bf00      	nop
  }

  return USBD_OK;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3710      	adds	r7, #16
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	889b      	ldrh	r3, [r3, #4]
 800a9ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9f4:	2b40      	cmp	r3, #64	; 0x40
 800a9f6:	d007      	beq.n	800aa08 <USBD_StdEPReq+0x30>
 800a9f8:	2b40      	cmp	r3, #64	; 0x40
 800a9fa:	f200 8146 	bhi.w	800ac8a <USBD_StdEPReq+0x2b2>
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00a      	beq.n	800aa18 <USBD_StdEPReq+0x40>
 800aa02:	2b20      	cmp	r3, #32
 800aa04:	f040 8141 	bne.w	800ac8a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	6839      	ldr	r1, [r7, #0]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	4798      	blx	r3
      break;
 800aa16:	e13d      	b.n	800ac94 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa20:	2b20      	cmp	r3, #32
 800aa22:	d10a      	bne.n	800aa3a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	6839      	ldr	r1, [r7, #0]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	4798      	blx	r3
 800aa32:	4603      	mov	r3, r0
 800aa34:	73fb      	strb	r3, [r7, #15]

        return ret;
 800aa36:	7bfb      	ldrb	r3, [r7, #15]
 800aa38:	e12d      	b.n	800ac96 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	785b      	ldrb	r3, [r3, #1]
 800aa3e:	2b03      	cmp	r3, #3
 800aa40:	d007      	beq.n	800aa52 <USBD_StdEPReq+0x7a>
 800aa42:	2b03      	cmp	r3, #3
 800aa44:	f300 811b 	bgt.w	800ac7e <USBD_StdEPReq+0x2a6>
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d072      	beq.n	800ab32 <USBD_StdEPReq+0x15a>
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d03a      	beq.n	800aac6 <USBD_StdEPReq+0xee>
 800aa50:	e115      	b.n	800ac7e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa58:	2b02      	cmp	r3, #2
 800aa5a:	d002      	beq.n	800aa62 <USBD_StdEPReq+0x8a>
 800aa5c:	2b03      	cmp	r3, #3
 800aa5e:	d015      	beq.n	800aa8c <USBD_StdEPReq+0xb4>
 800aa60:	e02b      	b.n	800aaba <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa62:	7bbb      	ldrb	r3, [r7, #14]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00c      	beq.n	800aa82 <USBD_StdEPReq+0xaa>
 800aa68:	7bbb      	ldrb	r3, [r7, #14]
 800aa6a:	2b80      	cmp	r3, #128	; 0x80
 800aa6c:	d009      	beq.n	800aa82 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aa6e:	7bbb      	ldrb	r3, [r7, #14]
 800aa70:	4619      	mov	r1, r3
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f003 ffd6 	bl	800ea24 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aa78:	2180      	movs	r1, #128	; 0x80
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f003 ffd2 	bl	800ea24 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa80:	e020      	b.n	800aac4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800aa82:	6839      	ldr	r1, [r7, #0]
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fc1e 	bl	800b2c6 <USBD_CtlError>
              break;
 800aa8a:	e01b      	b.n	800aac4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	885b      	ldrh	r3, [r3, #2]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10e      	bne.n	800aab2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800aa94:	7bbb      	ldrb	r3, [r7, #14]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00b      	beq.n	800aab2 <USBD_StdEPReq+0xda>
 800aa9a:	7bbb      	ldrb	r3, [r7, #14]
 800aa9c:	2b80      	cmp	r3, #128	; 0x80
 800aa9e:	d008      	beq.n	800aab2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	88db      	ldrh	r3, [r3, #6]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d104      	bne.n	800aab2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800aaa8:	7bbb      	ldrb	r3, [r7, #14]
 800aaaa:	4619      	mov	r1, r3
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f003 ffb9 	bl	800ea24 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fccf 	bl	800b456 <USBD_CtlSendStatus>

              break;
 800aab8:	e004      	b.n	800aac4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800aaba:	6839      	ldr	r1, [r7, #0]
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 fc02 	bl	800b2c6 <USBD_CtlError>
              break;
 800aac2:	bf00      	nop
          }
          break;
 800aac4:	e0e0      	b.n	800ac88 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aacc:	2b02      	cmp	r3, #2
 800aace:	d002      	beq.n	800aad6 <USBD_StdEPReq+0xfe>
 800aad0:	2b03      	cmp	r3, #3
 800aad2:	d015      	beq.n	800ab00 <USBD_StdEPReq+0x128>
 800aad4:	e026      	b.n	800ab24 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aad6:	7bbb      	ldrb	r3, [r7, #14]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00c      	beq.n	800aaf6 <USBD_StdEPReq+0x11e>
 800aadc:	7bbb      	ldrb	r3, [r7, #14]
 800aade:	2b80      	cmp	r3, #128	; 0x80
 800aae0:	d009      	beq.n	800aaf6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aae2:	7bbb      	ldrb	r3, [r7, #14]
 800aae4:	4619      	mov	r1, r3
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f003 ff9c 	bl	800ea24 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aaec:	2180      	movs	r1, #128	; 0x80
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f003 ff98 	bl	800ea24 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aaf4:	e01c      	b.n	800ab30 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fbe4 	bl	800b2c6 <USBD_CtlError>
              break;
 800aafe:	e017      	b.n	800ab30 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	885b      	ldrh	r3, [r3, #2]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d112      	bne.n	800ab2e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab08:	7bbb      	ldrb	r3, [r7, #14]
 800ab0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d004      	beq.n	800ab1c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab12:	7bbb      	ldrb	r3, [r7, #14]
 800ab14:	4619      	mov	r1, r3
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f003 ffa3 	bl	800ea62 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 fc9a 	bl	800b456 <USBD_CtlSendStatus>
              }
              break;
 800ab22:	e004      	b.n	800ab2e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fbcd 	bl	800b2c6 <USBD_CtlError>
              break;
 800ab2c:	e000      	b.n	800ab30 <USBD_StdEPReq+0x158>
              break;
 800ab2e:	bf00      	nop
          }
          break;
 800ab30:	e0aa      	b.n	800ac88 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d002      	beq.n	800ab42 <USBD_StdEPReq+0x16a>
 800ab3c:	2b03      	cmp	r3, #3
 800ab3e:	d032      	beq.n	800aba6 <USBD_StdEPReq+0x1ce>
 800ab40:	e097      	b.n	800ac72 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab42:	7bbb      	ldrb	r3, [r7, #14]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d007      	beq.n	800ab58 <USBD_StdEPReq+0x180>
 800ab48:	7bbb      	ldrb	r3, [r7, #14]
 800ab4a:	2b80      	cmp	r3, #128	; 0x80
 800ab4c:	d004      	beq.n	800ab58 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800ab4e:	6839      	ldr	r1, [r7, #0]
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fbb8 	bl	800b2c6 <USBD_CtlError>
                break;
 800ab56:	e091      	b.n	800ac7c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	da0b      	bge.n	800ab78 <USBD_StdEPReq+0x1a0>
 800ab60:	7bbb      	ldrb	r3, [r7, #14]
 800ab62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab66:	4613      	mov	r3, r2
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4413      	add	r3, r2
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	3310      	adds	r3, #16
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	4413      	add	r3, r2
 800ab74:	3304      	adds	r3, #4
 800ab76:	e00b      	b.n	800ab90 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab78:	7bbb      	ldrb	r3, [r7, #14]
 800ab7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab7e:	4613      	mov	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	3304      	adds	r3, #4
 800ab90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	2200      	movs	r2, #0
 800ab96:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	2202      	movs	r2, #2
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 fbfb 	bl	800b39a <USBD_CtlSendData>
              break;
 800aba4:	e06a      	b.n	800ac7c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aba6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	da11      	bge.n	800abd2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800abae:	7bbb      	ldrb	r3, [r7, #14]
 800abb0:	f003 020f 	and.w	r2, r3, #15
 800abb4:	6879      	ldr	r1, [r7, #4]
 800abb6:	4613      	mov	r3, r2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4413      	add	r3, r2
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	440b      	add	r3, r1
 800abc0:	3318      	adds	r3, #24
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d117      	bne.n	800abf8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800abc8:	6839      	ldr	r1, [r7, #0]
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 fb7b 	bl	800b2c6 <USBD_CtlError>
                  break;
 800abd0:	e054      	b.n	800ac7c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800abd2:	7bbb      	ldrb	r3, [r7, #14]
 800abd4:	f003 020f 	and.w	r2, r3, #15
 800abd8:	6879      	ldr	r1, [r7, #4]
 800abda:	4613      	mov	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4413      	add	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	440b      	add	r3, r1
 800abe4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d104      	bne.n	800abf8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800abee:	6839      	ldr	r1, [r7, #0]
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 fb68 	bl	800b2c6 <USBD_CtlError>
                  break;
 800abf6:	e041      	b.n	800ac7c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	da0b      	bge.n	800ac18 <USBD_StdEPReq+0x240>
 800ac00:	7bbb      	ldrb	r3, [r7, #14]
 800ac02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac06:	4613      	mov	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	4413      	add	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	3310      	adds	r3, #16
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	4413      	add	r3, r2
 800ac14:	3304      	adds	r3, #4
 800ac16:	e00b      	b.n	800ac30 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac18:	7bbb      	ldrb	r3, [r7, #14]
 800ac1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac1e:	4613      	mov	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	3304      	adds	r3, #4
 800ac30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac32:	7bbb      	ldrb	r3, [r7, #14]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d002      	beq.n	800ac3e <USBD_StdEPReq+0x266>
 800ac38:	7bbb      	ldrb	r3, [r7, #14]
 800ac3a:	2b80      	cmp	r3, #128	; 0x80
 800ac3c:	d103      	bne.n	800ac46 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	2200      	movs	r2, #0
 800ac42:	601a      	str	r2, [r3, #0]
 800ac44:	e00e      	b.n	800ac64 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ac46:	7bbb      	ldrb	r3, [r7, #14]
 800ac48:	4619      	mov	r1, r3
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f003 ff28 	bl	800eaa0 <USBD_LL_IsStallEP>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d003      	beq.n	800ac5e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	601a      	str	r2, [r3, #0]
 800ac5c:	e002      	b.n	800ac64 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2200      	movs	r2, #0
 800ac62:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	2202      	movs	r2, #2
 800ac68:	4619      	mov	r1, r3
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fb95 	bl	800b39a <USBD_CtlSendData>
              break;
 800ac70:	e004      	b.n	800ac7c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ac72:	6839      	ldr	r1, [r7, #0]
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 fb26 	bl	800b2c6 <USBD_CtlError>
              break;
 800ac7a:	bf00      	nop
          }
          break;
 800ac7c:	e004      	b.n	800ac88 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ac7e:	6839      	ldr	r1, [r7, #0]
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fb20 	bl	800b2c6 <USBD_CtlError>
          break;
 800ac86:	bf00      	nop
      }
      break;
 800ac88:	e004      	b.n	800ac94 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ac8a:	6839      	ldr	r1, [r7, #0]
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fb1a 	bl	800b2c6 <USBD_CtlError>
      break;
 800ac92:	bf00      	nop
  }

  return ret;
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
	...

0800aca0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800acaa:	2300      	movs	r3, #0
 800acac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800acae:	2300      	movs	r3, #0
 800acb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800acb2:	2300      	movs	r3, #0
 800acb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	885b      	ldrh	r3, [r3, #2]
 800acba:	0a1b      	lsrs	r3, r3, #8
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	3b01      	subs	r3, #1
 800acc0:	2b06      	cmp	r3, #6
 800acc2:	f200 8128 	bhi.w	800af16 <USBD_GetDescriptor+0x276>
 800acc6:	a201      	add	r2, pc, #4	; (adr r2, 800accc <USBD_GetDescriptor+0x2c>)
 800acc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800accc:	0800ace9 	.word	0x0800ace9
 800acd0:	0800ad01 	.word	0x0800ad01
 800acd4:	0800ad41 	.word	0x0800ad41
 800acd8:	0800af17 	.word	0x0800af17
 800acdc:	0800af17 	.word	0x0800af17
 800ace0:	0800aeb7 	.word	0x0800aeb7
 800ace4:	0800aee3 	.word	0x0800aee3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	7c12      	ldrb	r2, [r2, #16]
 800acf4:	f107 0108 	add.w	r1, r7, #8
 800acf8:	4610      	mov	r0, r2
 800acfa:	4798      	blx	r3
 800acfc:	60f8      	str	r0, [r7, #12]
      break;
 800acfe:	e112      	b.n	800af26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	7c1b      	ldrb	r3, [r3, #16]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10d      	bne.n	800ad24 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad10:	f107 0208 	add.w	r2, r7, #8
 800ad14:	4610      	mov	r0, r2
 800ad16:	4798      	blx	r3
 800ad18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	2202      	movs	r2, #2
 800ad20:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ad22:	e100      	b.n	800af26 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2c:	f107 0208 	add.w	r2, r7, #8
 800ad30:	4610      	mov	r0, r2
 800ad32:	4798      	blx	r3
 800ad34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	2202      	movs	r2, #2
 800ad3c:	701a      	strb	r2, [r3, #0]
      break;
 800ad3e:	e0f2      	b.n	800af26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	885b      	ldrh	r3, [r3, #2]
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	2b05      	cmp	r3, #5
 800ad48:	f200 80ac 	bhi.w	800aea4 <USBD_GetDescriptor+0x204>
 800ad4c:	a201      	add	r2, pc, #4	; (adr r2, 800ad54 <USBD_GetDescriptor+0xb4>)
 800ad4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad52:	bf00      	nop
 800ad54:	0800ad6d 	.word	0x0800ad6d
 800ad58:	0800ada1 	.word	0x0800ada1
 800ad5c:	0800add5 	.word	0x0800add5
 800ad60:	0800ae09 	.word	0x0800ae09
 800ad64:	0800ae3d 	.word	0x0800ae3d
 800ad68:	0800ae71 	.word	0x0800ae71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00b      	beq.n	800ad90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	7c12      	ldrb	r2, [r2, #16]
 800ad84:	f107 0108 	add.w	r1, r7, #8
 800ad88:	4610      	mov	r0, r2
 800ad8a:	4798      	blx	r3
 800ad8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad8e:	e091      	b.n	800aeb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 fa97 	bl	800b2c6 <USBD_CtlError>
            err++;
 800ad98:	7afb      	ldrb	r3, [r7, #11]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad9e:	e089      	b.n	800aeb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00b      	beq.n	800adc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	7c12      	ldrb	r2, [r2, #16]
 800adb8:	f107 0108 	add.w	r1, r7, #8
 800adbc:	4610      	mov	r0, r2
 800adbe:	4798      	blx	r3
 800adc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adc2:	e077      	b.n	800aeb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fa7d 	bl	800b2c6 <USBD_CtlError>
            err++;
 800adcc:	7afb      	ldrb	r3, [r7, #11]
 800adce:	3301      	adds	r3, #1
 800add0:	72fb      	strb	r3, [r7, #11]
          break;
 800add2:	e06f      	b.n	800aeb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00b      	beq.n	800adf8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	7c12      	ldrb	r2, [r2, #16]
 800adec:	f107 0108 	add.w	r1, r7, #8
 800adf0:	4610      	mov	r0, r2
 800adf2:	4798      	blx	r3
 800adf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adf6:	e05d      	b.n	800aeb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adf8:	6839      	ldr	r1, [r7, #0]
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 fa63 	bl	800b2c6 <USBD_CtlError>
            err++;
 800ae00:	7afb      	ldrb	r3, [r7, #11]
 800ae02:	3301      	adds	r3, #1
 800ae04:	72fb      	strb	r3, [r7, #11]
          break;
 800ae06:	e055      	b.n	800aeb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d00b      	beq.n	800ae2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	7c12      	ldrb	r2, [r2, #16]
 800ae20:	f107 0108 	add.w	r1, r7, #8
 800ae24:	4610      	mov	r0, r2
 800ae26:	4798      	blx	r3
 800ae28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae2a:	e043      	b.n	800aeb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fa49 	bl	800b2c6 <USBD_CtlError>
            err++;
 800ae34:	7afb      	ldrb	r3, [r7, #11]
 800ae36:	3301      	adds	r3, #1
 800ae38:	72fb      	strb	r3, [r7, #11]
          break;
 800ae3a:	e03b      	b.n	800aeb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae42:	695b      	ldr	r3, [r3, #20]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00b      	beq.n	800ae60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae4e:	695b      	ldr	r3, [r3, #20]
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	7c12      	ldrb	r2, [r2, #16]
 800ae54:	f107 0108 	add.w	r1, r7, #8
 800ae58:	4610      	mov	r0, r2
 800ae5a:	4798      	blx	r3
 800ae5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae5e:	e029      	b.n	800aeb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae60:	6839      	ldr	r1, [r7, #0]
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 fa2f 	bl	800b2c6 <USBD_CtlError>
            err++;
 800ae68:	7afb      	ldrb	r3, [r7, #11]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae6e:	e021      	b.n	800aeb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae76:	699b      	ldr	r3, [r3, #24]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00b      	beq.n	800ae94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae82:	699b      	ldr	r3, [r3, #24]
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	7c12      	ldrb	r2, [r2, #16]
 800ae88:	f107 0108 	add.w	r1, r7, #8
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	4798      	blx	r3
 800ae90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae92:	e00f      	b.n	800aeb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 fa15 	bl	800b2c6 <USBD_CtlError>
            err++;
 800ae9c:	7afb      	ldrb	r3, [r7, #11]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	72fb      	strb	r3, [r7, #11]
          break;
 800aea2:	e007      	b.n	800aeb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800aea4:	6839      	ldr	r1, [r7, #0]
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 fa0d 	bl	800b2c6 <USBD_CtlError>
          err++;
 800aeac:	7afb      	ldrb	r3, [r7, #11]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800aeb2:	e038      	b.n	800af26 <USBD_GetDescriptor+0x286>
 800aeb4:	e037      	b.n	800af26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	7c1b      	ldrb	r3, [r3, #16]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d109      	bne.n	800aed2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec6:	f107 0208 	add.w	r2, r7, #8
 800aeca:	4610      	mov	r0, r2
 800aecc:	4798      	blx	r3
 800aece:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aed0:	e029      	b.n	800af26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aed2:	6839      	ldr	r1, [r7, #0]
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 f9f6 	bl	800b2c6 <USBD_CtlError>
        err++;
 800aeda:	7afb      	ldrb	r3, [r7, #11]
 800aedc:	3301      	adds	r3, #1
 800aede:	72fb      	strb	r3, [r7, #11]
      break;
 800aee0:	e021      	b.n	800af26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	7c1b      	ldrb	r3, [r3, #16]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10d      	bne.n	800af06 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef2:	f107 0208 	add.w	r2, r7, #8
 800aef6:	4610      	mov	r0, r2
 800aef8:	4798      	blx	r3
 800aefa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	3301      	adds	r3, #1
 800af00:	2207      	movs	r2, #7
 800af02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af04:	e00f      	b.n	800af26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af06:	6839      	ldr	r1, [r7, #0]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 f9dc 	bl	800b2c6 <USBD_CtlError>
        err++;
 800af0e:	7afb      	ldrb	r3, [r7, #11]
 800af10:	3301      	adds	r3, #1
 800af12:	72fb      	strb	r3, [r7, #11]
      break;
 800af14:	e007      	b.n	800af26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f9d4 	bl	800b2c6 <USBD_CtlError>
      err++;
 800af1e:	7afb      	ldrb	r3, [r7, #11]
 800af20:	3301      	adds	r3, #1
 800af22:	72fb      	strb	r3, [r7, #11]
      break;
 800af24:	bf00      	nop
  }

  if (err != 0U)
 800af26:	7afb      	ldrb	r3, [r7, #11]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d11c      	bne.n	800af66 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800af2c:	893b      	ldrh	r3, [r7, #8]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d011      	beq.n	800af56 <USBD_GetDescriptor+0x2b6>
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	88db      	ldrh	r3, [r3, #6]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00d      	beq.n	800af56 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	88da      	ldrh	r2, [r3, #6]
 800af3e:	893b      	ldrh	r3, [r7, #8]
 800af40:	4293      	cmp	r3, r2
 800af42:	bf28      	it	cs
 800af44:	4613      	movcs	r3, r2
 800af46:	b29b      	uxth	r3, r3
 800af48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800af4a:	893b      	ldrh	r3, [r7, #8]
 800af4c:	461a      	mov	r2, r3
 800af4e:	68f9      	ldr	r1, [r7, #12]
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 fa22 	bl	800b39a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	88db      	ldrh	r3, [r3, #6]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d104      	bne.n	800af68 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 fa79 	bl	800b456 <USBD_CtlSendStatus>
 800af64:	e000      	b.n	800af68 <USBD_GetDescriptor+0x2c8>
    return;
 800af66:	bf00      	nop
    }
  }
}
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop

0800af70 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	889b      	ldrh	r3, [r3, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d130      	bne.n	800afe4 <USBD_SetAddress+0x74>
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	88db      	ldrh	r3, [r3, #6]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d12c      	bne.n	800afe4 <USBD_SetAddress+0x74>
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	885b      	ldrh	r3, [r3, #2]
 800af8e:	2b7f      	cmp	r3, #127	; 0x7f
 800af90:	d828      	bhi.n	800afe4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	885b      	ldrh	r3, [r3, #2]
 800af96:	b2db      	uxtb	r3, r3
 800af98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afa4:	2b03      	cmp	r3, #3
 800afa6:	d104      	bne.n	800afb2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800afa8:	6839      	ldr	r1, [r7, #0]
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f98b 	bl	800b2c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afb0:	e01d      	b.n	800afee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	7bfa      	ldrb	r2, [r7, #15]
 800afb6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800afba:	7bfb      	ldrb	r3, [r7, #15]
 800afbc:	4619      	mov	r1, r3
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f003 fd9a 	bl	800eaf8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 fa46 	bl	800b456 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800afca:	7bfb      	ldrb	r3, [r7, #15]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d004      	beq.n	800afda <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2202      	movs	r2, #2
 800afd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afd8:	e009      	b.n	800afee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2201      	movs	r2, #1
 800afde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afe2:	e004      	b.n	800afee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f96d 	bl	800b2c6 <USBD_CtlError>
  }
}
 800afec:	bf00      	nop
 800afee:	bf00      	nop
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
	...

0800aff8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	885b      	ldrh	r3, [r3, #2]
 800b006:	b2da      	uxtb	r2, r3
 800b008:	4b41      	ldr	r3, [pc, #260]	; (800b110 <USBD_SetConfig+0x118>)
 800b00a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b00c:	4b40      	ldr	r3, [pc, #256]	; (800b110 <USBD_SetConfig+0x118>)
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d904      	bls.n	800b01e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b014:	6839      	ldr	r1, [r7, #0]
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 f955 	bl	800b2c6 <USBD_CtlError>
 800b01c:	e075      	b.n	800b10a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b024:	2b02      	cmp	r3, #2
 800b026:	d002      	beq.n	800b02e <USBD_SetConfig+0x36>
 800b028:	2b03      	cmp	r3, #3
 800b02a:	d023      	beq.n	800b074 <USBD_SetConfig+0x7c>
 800b02c:	e062      	b.n	800b0f4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b02e:	4b38      	ldr	r3, [pc, #224]	; (800b110 <USBD_SetConfig+0x118>)
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d01a      	beq.n	800b06c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b036:	4b36      	ldr	r3, [pc, #216]	; (800b110 <USBD_SetConfig+0x118>)
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	461a      	mov	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2203      	movs	r2, #3
 800b044:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b048:	4b31      	ldr	r3, [pc, #196]	; (800b110 <USBD_SetConfig+0x118>)
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	4619      	mov	r1, r3
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f7ff f9e7 	bl	800a422 <USBD_SetClassConfig>
 800b054:	4603      	mov	r3, r0
 800b056:	2b02      	cmp	r3, #2
 800b058:	d104      	bne.n	800b064 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b05a:	6839      	ldr	r1, [r7, #0]
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 f932 	bl	800b2c6 <USBD_CtlError>
            return;
 800b062:	e052      	b.n	800b10a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 f9f6 	bl	800b456 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b06a:	e04e      	b.n	800b10a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 f9f2 	bl	800b456 <USBD_CtlSendStatus>
        break;
 800b072:	e04a      	b.n	800b10a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b074:	4b26      	ldr	r3, [pc, #152]	; (800b110 <USBD_SetConfig+0x118>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d112      	bne.n	800b0a2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2202      	movs	r2, #2
 800b080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b084:	4b22      	ldr	r3, [pc, #136]	; (800b110 <USBD_SetConfig+0x118>)
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	461a      	mov	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b08e:	4b20      	ldr	r3, [pc, #128]	; (800b110 <USBD_SetConfig+0x118>)
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	4619      	mov	r1, r3
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f7ff f9e3 	bl	800a460 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 f9db 	bl	800b456 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b0a0:	e033      	b.n	800b10a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b0a2:	4b1b      	ldr	r3, [pc, #108]	; (800b110 <USBD_SetConfig+0x118>)
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d01d      	beq.n	800b0ec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7ff f9d1 	bl	800a460 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b0be:	4b14      	ldr	r3, [pc, #80]	; (800b110 <USBD_SetConfig+0x118>)
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b0c8:	4b11      	ldr	r3, [pc, #68]	; (800b110 <USBD_SetConfig+0x118>)
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f7ff f9a7 	bl	800a422 <USBD_SetClassConfig>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	d104      	bne.n	800b0e4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b0da:	6839      	ldr	r1, [r7, #0]
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 f8f2 	bl	800b2c6 <USBD_CtlError>
            return;
 800b0e2:	e012      	b.n	800b10a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f9b6 	bl	800b456 <USBD_CtlSendStatus>
        break;
 800b0ea:	e00e      	b.n	800b10a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 f9b2 	bl	800b456 <USBD_CtlSendStatus>
        break;
 800b0f2:	e00a      	b.n	800b10a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f8e5 	bl	800b2c6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b0fc:	4b04      	ldr	r3, [pc, #16]	; (800b110 <USBD_SetConfig+0x118>)
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	4619      	mov	r1, r3
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f7ff f9ac 	bl	800a460 <USBD_ClrClassConfig>
        break;
 800b108:	bf00      	nop
    }
  }
}
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	200001b3 	.word	0x200001b3

0800b114 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	88db      	ldrh	r3, [r3, #6]
 800b122:	2b01      	cmp	r3, #1
 800b124:	d004      	beq.n	800b130 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b126:	6839      	ldr	r1, [r7, #0]
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 f8cc 	bl	800b2c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b12e:	e022      	b.n	800b176 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b136:	2b02      	cmp	r3, #2
 800b138:	dc02      	bgt.n	800b140 <USBD_GetConfig+0x2c>
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	dc03      	bgt.n	800b146 <USBD_GetConfig+0x32>
 800b13e:	e015      	b.n	800b16c <USBD_GetConfig+0x58>
 800b140:	2b03      	cmp	r3, #3
 800b142:	d00b      	beq.n	800b15c <USBD_GetConfig+0x48>
 800b144:	e012      	b.n	800b16c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	3308      	adds	r3, #8
 800b150:	2201      	movs	r2, #1
 800b152:	4619      	mov	r1, r3
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f920 	bl	800b39a <USBD_CtlSendData>
        break;
 800b15a:	e00c      	b.n	800b176 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	3304      	adds	r3, #4
 800b160:	2201      	movs	r2, #1
 800b162:	4619      	mov	r1, r3
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f918 	bl	800b39a <USBD_CtlSendData>
        break;
 800b16a:	e004      	b.n	800b176 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b16c:	6839      	ldr	r1, [r7, #0]
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f8a9 	bl	800b2c6 <USBD_CtlError>
        break;
 800b174:	bf00      	nop
}
 800b176:	bf00      	nop
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b082      	sub	sp, #8
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b18e:	3b01      	subs	r3, #1
 800b190:	2b02      	cmp	r3, #2
 800b192:	d81e      	bhi.n	800b1d2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	88db      	ldrh	r3, [r3, #6]
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d004      	beq.n	800b1a6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b19c:	6839      	ldr	r1, [r7, #0]
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 f891 	bl	800b2c6 <USBD_CtlError>
        break;
 800b1a4:	e01a      	b.n	800b1dc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d005      	beq.n	800b1c2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	f043 0202 	orr.w	r2, r3, #2
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	330c      	adds	r3, #12
 800b1c6:	2202      	movs	r2, #2
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f8e5 	bl	800b39a <USBD_CtlSendData>
      break;
 800b1d0:	e004      	b.n	800b1dc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b1d2:	6839      	ldr	r1, [r7, #0]
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f876 	bl	800b2c6 <USBD_CtlError>
      break;
 800b1da:	bf00      	nop
  }
}
 800b1dc:	bf00      	nop
 800b1de:	3708      	adds	r7, #8
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	885b      	ldrh	r3, [r3, #2]
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d106      	bne.n	800b204 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f929 	bl	800b456 <USBD_CtlSendStatus>
  }
}
 800b204:	bf00      	nop
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b21c:	3b01      	subs	r3, #1
 800b21e:	2b02      	cmp	r3, #2
 800b220:	d80b      	bhi.n	800b23a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	885b      	ldrh	r3, [r3, #2]
 800b226:	2b01      	cmp	r3, #1
 800b228:	d10c      	bne.n	800b244 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f90f 	bl	800b456 <USBD_CtlSendStatus>
      }
      break;
 800b238:	e004      	b.n	800b244 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b23a:	6839      	ldr	r1, [r7, #0]
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 f842 	bl	800b2c6 <USBD_CtlError>
      break;
 800b242:	e000      	b.n	800b246 <USBD_ClrFeature+0x3a>
      break;
 800b244:	bf00      	nop
  }
}
 800b246:	bf00      	nop
 800b248:	3708      	adds	r7, #8
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b24e:	b480      	push	{r7}
 800b250:	b083      	sub	sp, #12
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
 800b256:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	781a      	ldrb	r2, [r3, #0]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	785a      	ldrb	r2, [r3, #1]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	3302      	adds	r3, #2
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	b29a      	uxth	r2, r3
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	3303      	adds	r3, #3
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	b29b      	uxth	r3, r3
 800b278:	021b      	lsls	r3, r3, #8
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	4413      	add	r3, r2
 800b27e:	b29a      	uxth	r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	3304      	adds	r3, #4
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	b29a      	uxth	r2, r3
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	3305      	adds	r3, #5
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	b29b      	uxth	r3, r3
 800b294:	021b      	lsls	r3, r3, #8
 800b296:	b29b      	uxth	r3, r3
 800b298:	4413      	add	r3, r2
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	3306      	adds	r3, #6
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	3307      	adds	r3, #7
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	021b      	lsls	r3, r3, #8
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	4413      	add	r3, r2
 800b2b6:	b29a      	uxth	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	80da      	strh	r2, [r3, #6]

}
 800b2bc:	bf00      	nop
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bc80      	pop	{r7}
 800b2c4:	4770      	bx	lr

0800b2c6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b082      	sub	sp, #8
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b2d0:	2180      	movs	r1, #128	; 0x80
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f003 fba6 	bl	800ea24 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b2d8:	2100      	movs	r1, #0
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f003 fba2 	bl	800ea24 <USBD_LL_StallEP>
}
 800b2e0:	bf00      	nop
 800b2e2:	3708      	adds	r7, #8
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b086      	sub	sp, #24
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d032      	beq.n	800b364 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f000 f834 	bl	800b36c <USBD_GetLen>
 800b304:	4603      	mov	r3, r0
 800b306:	3301      	adds	r3, #1
 800b308:	b29b      	uxth	r3, r3
 800b30a:	005b      	lsls	r3, r3, #1
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b312:	7dfb      	ldrb	r3, [r7, #23]
 800b314:	1c5a      	adds	r2, r3, #1
 800b316:	75fa      	strb	r2, [r7, #23]
 800b318:	461a      	mov	r2, r3
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	4413      	add	r3, r2
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	7812      	ldrb	r2, [r2, #0]
 800b322:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b324:	7dfb      	ldrb	r3, [r7, #23]
 800b326:	1c5a      	adds	r2, r3, #1
 800b328:	75fa      	strb	r2, [r7, #23]
 800b32a:	461a      	mov	r2, r3
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	4413      	add	r3, r2
 800b330:	2203      	movs	r2, #3
 800b332:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b334:	e012      	b.n	800b35c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	1c5a      	adds	r2, r3, #1
 800b33a:	60fa      	str	r2, [r7, #12]
 800b33c:	7dfa      	ldrb	r2, [r7, #23]
 800b33e:	1c51      	adds	r1, r2, #1
 800b340:	75f9      	strb	r1, [r7, #23]
 800b342:	4611      	mov	r1, r2
 800b344:	68ba      	ldr	r2, [r7, #8]
 800b346:	440a      	add	r2, r1
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b34c:	7dfb      	ldrb	r3, [r7, #23]
 800b34e:	1c5a      	adds	r2, r3, #1
 800b350:	75fa      	strb	r2, [r7, #23]
 800b352:	461a      	mov	r2, r3
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	4413      	add	r3, r2
 800b358:	2200      	movs	r2, #0
 800b35a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d1e8      	bne.n	800b336 <USBD_GetString+0x4e>
    }
  }
}
 800b364:	bf00      	nop
 800b366:	3718      	adds	r7, #24
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b374:	2300      	movs	r3, #0
 800b376:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b378:	e005      	b.n	800b386 <USBD_GetLen+0x1a>
  {
    len++;
 800b37a:	7bfb      	ldrb	r3, [r7, #15]
 800b37c:	3301      	adds	r3, #1
 800b37e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	3301      	adds	r3, #1
 800b384:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d1f5      	bne.n	800b37a <USBD_GetLen+0xe>
  }

  return len;
 800b38e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b390:	4618      	mov	r0, r3
 800b392:	3714      	adds	r7, #20
 800b394:	46bd      	mov	sp, r7
 800b396:	bc80      	pop	{r7}
 800b398:	4770      	bx	lr

0800b39a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b39a:	b580      	push	{r7, lr}
 800b39c:	b084      	sub	sp, #16
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	60f8      	str	r0, [r7, #12]
 800b3a2:	60b9      	str	r1, [r7, #8]
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2202      	movs	r2, #2
 800b3ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b3b0:	88fa      	ldrh	r2, [r7, #6]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b3b6:	88fa      	ldrh	r2, [r7, #6]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3bc:	88fb      	ldrh	r3, [r7, #6]
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	f003 fbb7 	bl	800eb36 <USBD_LL_Transmit>

  return USBD_OK;
 800b3c8:	2300      	movs	r3, #0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b084      	sub	sp, #16
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	60f8      	str	r0, [r7, #12]
 800b3da:	60b9      	str	r1, [r7, #8]
 800b3dc:	4613      	mov	r3, r2
 800b3de:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3e0:	88fb      	ldrh	r3, [r7, #6]
 800b3e2:	68ba      	ldr	r2, [r7, #8]
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	f003 fba5 	bl	800eb36 <USBD_LL_Transmit>

  return USBD_OK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b084      	sub	sp, #16
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	60f8      	str	r0, [r7, #12]
 800b3fe:	60b9      	str	r1, [r7, #8]
 800b400:	4613      	mov	r3, r2
 800b402:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2203      	movs	r2, #3
 800b408:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b40c:	88fa      	ldrh	r2, [r7, #6]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b414:	88fa      	ldrh	r2, [r7, #6]
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b41c:	88fb      	ldrh	r3, [r7, #6]
 800b41e:	68ba      	ldr	r2, [r7, #8]
 800b420:	2100      	movs	r1, #0
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f003 fbaa 	bl	800eb7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b084      	sub	sp, #16
 800b436:	af00      	add	r7, sp, #0
 800b438:	60f8      	str	r0, [r7, #12]
 800b43a:	60b9      	str	r1, [r7, #8]
 800b43c:	4613      	mov	r3, r2
 800b43e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b440:	88fb      	ldrh	r3, [r7, #6]
 800b442:	68ba      	ldr	r2, [r7, #8]
 800b444:	2100      	movs	r1, #0
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f003 fb98 	bl	800eb7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b082      	sub	sp, #8
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2204      	movs	r2, #4
 800b462:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b466:	2300      	movs	r3, #0
 800b468:	2200      	movs	r2, #0
 800b46a:	2100      	movs	r1, #0
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f003 fb62 	bl	800eb36 <USBD_LL_Transmit>

  return USBD_OK;
 800b472:	2300      	movs	r3, #0
}
 800b474:	4618      	mov	r0, r3
 800b476:	3708      	adds	r7, #8
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2205      	movs	r2, #5
 800b488:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b48c:	2300      	movs	r3, #0
 800b48e:	2200      	movs	r2, #0
 800b490:	2100      	movs	r1, #0
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f003 fb72 	bl	800eb7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3708      	adds	r7, #8
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
	...

0800b4a4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b4a4:	b480      	push	{r7}
 800b4a6:	b085      	sub	sp, #20
 800b4a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4aa:	f3ef 8305 	mrs	r3, IPSR
 800b4ae:	60bb      	str	r3, [r7, #8]
  return(result);
 800b4b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d10f      	bne.n	800b4d6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4b6:	f3ef 8310 	mrs	r3, PRIMASK
 800b4ba:	607b      	str	r3, [r7, #4]
  return(result);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d109      	bne.n	800b4d6 <osKernelInitialize+0x32>
 800b4c2:	4b10      	ldr	r3, [pc, #64]	; (800b504 <osKernelInitialize+0x60>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	d109      	bne.n	800b4de <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b4ca:	f3ef 8311 	mrs	r3, BASEPRI
 800b4ce:	603b      	str	r3, [r7, #0]
  return(result);
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d003      	beq.n	800b4de <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b4d6:	f06f 0305 	mvn.w	r3, #5
 800b4da:	60fb      	str	r3, [r7, #12]
 800b4dc:	e00c      	b.n	800b4f8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b4de:	4b09      	ldr	r3, [pc, #36]	; (800b504 <osKernelInitialize+0x60>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d105      	bne.n	800b4f2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800b4e6:	4b07      	ldr	r3, [pc, #28]	; (800b504 <osKernelInitialize+0x60>)
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	60fb      	str	r3, [r7, #12]
 800b4f0:	e002      	b.n	800b4f8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3714      	adds	r7, #20
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bc80      	pop	{r7}
 800b502:	4770      	bx	lr
 800b504:	200001b4 	.word	0x200001b4

0800b508 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b50e:	f3ef 8305 	mrs	r3, IPSR
 800b512:	60bb      	str	r3, [r7, #8]
  return(result);
 800b514:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b516:	2b00      	cmp	r3, #0
 800b518:	d10f      	bne.n	800b53a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b51a:	f3ef 8310 	mrs	r3, PRIMASK
 800b51e:	607b      	str	r3, [r7, #4]
  return(result);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d109      	bne.n	800b53a <osKernelStart+0x32>
 800b526:	4b11      	ldr	r3, [pc, #68]	; (800b56c <osKernelStart+0x64>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	d109      	bne.n	800b542 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b52e:	f3ef 8311 	mrs	r3, BASEPRI
 800b532:	603b      	str	r3, [r7, #0]
  return(result);
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d003      	beq.n	800b542 <osKernelStart+0x3a>
    stat = osErrorISR;
 800b53a:	f06f 0305 	mvn.w	r3, #5
 800b53e:	60fb      	str	r3, [r7, #12]
 800b540:	e00e      	b.n	800b560 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800b542:	4b0a      	ldr	r3, [pc, #40]	; (800b56c <osKernelStart+0x64>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b01      	cmp	r3, #1
 800b548:	d107      	bne.n	800b55a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800b54a:	4b08      	ldr	r3, [pc, #32]	; (800b56c <osKernelStart+0x64>)
 800b54c:	2202      	movs	r2, #2
 800b54e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800b550:	f001 f9ba 	bl	800c8c8 <vTaskStartScheduler>
      stat = osOK;
 800b554:	2300      	movs	r3, #0
 800b556:	60fb      	str	r3, [r7, #12]
 800b558:	e002      	b.n	800b560 <osKernelStart+0x58>
    } else {
      stat = osError;
 800b55a:	f04f 33ff 	mov.w	r3, #4294967295
 800b55e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b560:	68fb      	ldr	r3, [r7, #12]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	200001b4 	.word	0x200001b4

0800b570 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b570:	b580      	push	{r7, lr}
 800b572:	b092      	sub	sp, #72	; 0x48
 800b574:	af04      	add	r7, sp, #16
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b57c:	2300      	movs	r3, #0
 800b57e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b580:	f3ef 8305 	mrs	r3, IPSR
 800b584:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f040 8094 	bne.w	800b6b6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b58e:	f3ef 8310 	mrs	r3, PRIMASK
 800b592:	623b      	str	r3, [r7, #32]
  return(result);
 800b594:	6a3b      	ldr	r3, [r7, #32]
 800b596:	2b00      	cmp	r3, #0
 800b598:	f040 808d 	bne.w	800b6b6 <osThreadNew+0x146>
 800b59c:	4b48      	ldr	r3, [pc, #288]	; (800b6c0 <osThreadNew+0x150>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2b02      	cmp	r3, #2
 800b5a2:	d106      	bne.n	800b5b2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b5a4:	f3ef 8311 	mrs	r3, BASEPRI
 800b5a8:	61fb      	str	r3, [r7, #28]
  return(result);
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f040 8082 	bne.w	800b6b6 <osThreadNew+0x146>
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d07e      	beq.n	800b6b6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800b5b8:	2380      	movs	r3, #128	; 0x80
 800b5ba:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800b5bc:	2318      	movs	r3, #24
 800b5be:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800b5c4:	f107 031b 	add.w	r3, r7, #27
 800b5c8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800b5ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ce:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d045      	beq.n	800b662 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d002      	beq.n	800b5e4 <osThreadNew+0x74>
        name = attr->name;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	699b      	ldr	r3, [r3, #24]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	699b      	ldr	r3, [r3, #24]
 800b5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d008      	beq.n	800b60a <osThreadNew+0x9a>
 800b5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fa:	2b38      	cmp	r3, #56	; 0x38
 800b5fc:	d805      	bhi.n	800b60a <osThreadNew+0x9a>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	f003 0301 	and.w	r3, r3, #1
 800b606:	2b00      	cmp	r3, #0
 800b608:	d001      	beq.n	800b60e <osThreadNew+0x9e>
        return (NULL);
 800b60a:	2300      	movs	r3, #0
 800b60c:	e054      	b.n	800b6b8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	695b      	ldr	r3, [r3, #20]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d003      	beq.n	800b61e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	695b      	ldr	r3, [r3, #20]
 800b61a:	089b      	lsrs	r3, r3, #2
 800b61c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00e      	beq.n	800b644 <osThreadNew+0xd4>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	2b5b      	cmp	r3, #91	; 0x5b
 800b62c:	d90a      	bls.n	800b644 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b632:	2b00      	cmp	r3, #0
 800b634:	d006      	beq.n	800b644 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	695b      	ldr	r3, [r3, #20]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d002      	beq.n	800b644 <osThreadNew+0xd4>
        mem = 1;
 800b63e:	2301      	movs	r3, #1
 800b640:	62bb      	str	r3, [r7, #40]	; 0x28
 800b642:	e010      	b.n	800b666 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d10c      	bne.n	800b666 <osThreadNew+0xf6>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d108      	bne.n	800b666 <osThreadNew+0xf6>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d104      	bne.n	800b666 <osThreadNew+0xf6>
          mem = 0;
 800b65c:	2300      	movs	r3, #0
 800b65e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b660:	e001      	b.n	800b666 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800b662:	2300      	movs	r3, #0
 800b664:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800b666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d110      	bne.n	800b68e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b674:	9202      	str	r2, [sp, #8]
 800b676:	9301      	str	r3, [sp, #4]
 800b678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67a:	9300      	str	r3, [sp, #0]
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b680:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	f000 fed6 	bl	800c434 <xTaskCreateStatic>
 800b688:	4603      	mov	r3, r0
 800b68a:	617b      	str	r3, [r7, #20]
 800b68c:	e013      	b.n	800b6b6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800b68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b690:	2b00      	cmp	r3, #0
 800b692:	d110      	bne.n	800b6b6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b696:	b29a      	uxth	r2, r3
 800b698:	f107 0314 	add.w	r3, r7, #20
 800b69c:	9301      	str	r3, [sp, #4]
 800b69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a0:	9300      	str	r3, [sp, #0]
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b6a6:	68f8      	ldr	r0, [r7, #12]
 800b6a8:	f000 ff20 	bl	800c4ec <xTaskCreate>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d001      	beq.n	800b6b6 <osThreadNew+0x146>
          hTask = NULL;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b6b6:	697b      	ldr	r3, [r7, #20]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3738      	adds	r7, #56	; 0x38
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	200001b4 	.word	0x200001b4

0800b6c4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b086      	sub	sp, #24
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6cc:	f3ef 8305 	mrs	r3, IPSR
 800b6d0:	613b      	str	r3, [r7, #16]
  return(result);
 800b6d2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d10f      	bne.n	800b6f8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6d8:	f3ef 8310 	mrs	r3, PRIMASK
 800b6dc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d109      	bne.n	800b6f8 <osDelay+0x34>
 800b6e4:	4b0d      	ldr	r3, [pc, #52]	; (800b71c <osDelay+0x58>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2b02      	cmp	r3, #2
 800b6ea:	d109      	bne.n	800b700 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b6ec:	f3ef 8311 	mrs	r3, BASEPRI
 800b6f0:	60bb      	str	r3, [r7, #8]
  return(result);
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d003      	beq.n	800b700 <osDelay+0x3c>
    stat = osErrorISR;
 800b6f8:	f06f 0305 	mvn.w	r3, #5
 800b6fc:	617b      	str	r3, [r7, #20]
 800b6fe:	e007      	b.n	800b710 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b700:	2300      	movs	r3, #0
 800b702:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d002      	beq.n	800b710 <osDelay+0x4c>
      vTaskDelay(ticks);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f001 f8a8 	bl	800c860 <vTaskDelay>
    }
  }

  return (stat);
 800b710:	697b      	ldr	r3, [r7, #20]
}
 800b712:	4618      	mov	r0, r3
 800b714:	3718      	adds	r7, #24
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	200001b4 	.word	0x200001b4

0800b720 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b720:	b580      	push	{r7, lr}
 800b722:	b08c      	sub	sp, #48	; 0x30
 800b724:	af02      	add	r7, sp, #8
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b72c:	2300      	movs	r3, #0
 800b72e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b730:	f3ef 8305 	mrs	r3, IPSR
 800b734:	61bb      	str	r3, [r7, #24]
  return(result);
 800b736:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d16f      	bne.n	800b81c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b73c:	f3ef 8310 	mrs	r3, PRIMASK
 800b740:	617b      	str	r3, [r7, #20]
  return(result);
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d169      	bne.n	800b81c <osMessageQueueNew+0xfc>
 800b748:	4b37      	ldr	r3, [pc, #220]	; (800b828 <osMessageQueueNew+0x108>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2b02      	cmp	r3, #2
 800b74e:	d105      	bne.n	800b75c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b750:	f3ef 8311 	mrs	r3, BASEPRI
 800b754:	613b      	str	r3, [r7, #16]
  return(result);
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d15f      	bne.n	800b81c <osMessageQueueNew+0xfc>
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d05c      	beq.n	800b81c <osMessageQueueNew+0xfc>
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d059      	beq.n	800b81c <osMessageQueueNew+0xfc>
    mem = -1;
 800b768:	f04f 33ff 	mov.w	r3, #4294967295
 800b76c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d029      	beq.n	800b7c8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d012      	beq.n	800b7a2 <osMessageQueueNew+0x82>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	2b4f      	cmp	r3, #79	; 0x4f
 800b782:	d90e      	bls.n	800b7a2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d00a      	beq.n	800b7a2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	695a      	ldr	r2, [r3, #20]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	68b9      	ldr	r1, [r7, #8]
 800b794:	fb01 f303 	mul.w	r3, r1, r3
 800b798:	429a      	cmp	r2, r3
 800b79a:	d302      	bcc.n	800b7a2 <osMessageQueueNew+0x82>
        mem = 1;
 800b79c:	2301      	movs	r3, #1
 800b79e:	623b      	str	r3, [r7, #32]
 800b7a0:	e014      	b.n	800b7cc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d110      	bne.n	800b7cc <osMessageQueueNew+0xac>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d10c      	bne.n	800b7cc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d108      	bne.n	800b7cc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	695b      	ldr	r3, [r3, #20]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d104      	bne.n	800b7cc <osMessageQueueNew+0xac>
          mem = 0;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	623b      	str	r3, [r7, #32]
 800b7c6:	e001      	b.n	800b7cc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b7cc:	6a3b      	ldr	r3, [r7, #32]
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d10b      	bne.n	800b7ea <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	691a      	ldr	r2, [r3, #16]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	2100      	movs	r1, #0
 800b7dc:	9100      	str	r1, [sp, #0]
 800b7de:	68b9      	ldr	r1, [r7, #8]
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f000 f96d 	bl	800bac0 <xQueueGenericCreateStatic>
 800b7e6:	6278      	str	r0, [r7, #36]	; 0x24
 800b7e8:	e008      	b.n	800b7fc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800b7ea:	6a3b      	ldr	r3, [r7, #32]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d105      	bne.n	800b7fc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	68b9      	ldr	r1, [r7, #8]
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f000 f9da 	bl	800bbae <xQueueGenericCreate>
 800b7fa:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00c      	beq.n	800b81c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d003      	beq.n	800b810 <osMessageQueueNew+0xf0>
        name = attr->name;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	61fb      	str	r3, [r7, #28]
 800b80e:	e001      	b.n	800b814 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800b810:	2300      	movs	r3, #0
 800b812:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800b814:	69f9      	ldr	r1, [r7, #28]
 800b816:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b818:	f000 fdb0 	bl	800c37c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3728      	adds	r7, #40	; 0x28
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	200001b4 	.word	0x200001b4

0800b82c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	4a06      	ldr	r2, [pc, #24]	; (800b854 <vApplicationGetIdleTaskMemory+0x28>)
 800b83c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	4a05      	ldr	r2, [pc, #20]	; (800b858 <vApplicationGetIdleTaskMemory+0x2c>)
 800b842:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2280      	movs	r2, #128	; 0x80
 800b848:	601a      	str	r2, [r3, #0]
}
 800b84a:	bf00      	nop
 800b84c:	3714      	adds	r7, #20
 800b84e:	46bd      	mov	sp, r7
 800b850:	bc80      	pop	{r7}
 800b852:	4770      	bx	lr
 800b854:	200001b8 	.word	0x200001b8
 800b858:	20000214 	.word	0x20000214

0800b85c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b85c:	b480      	push	{r7}
 800b85e:	b085      	sub	sp, #20
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	4a07      	ldr	r2, [pc, #28]	; (800b888 <vApplicationGetTimerTaskMemory+0x2c>)
 800b86c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	4a06      	ldr	r2, [pc, #24]	; (800b88c <vApplicationGetTimerTaskMemory+0x30>)
 800b872:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b87a:	601a      	str	r2, [r3, #0]
}
 800b87c:	bf00      	nop
 800b87e:	3714      	adds	r7, #20
 800b880:	46bd      	mov	sp, r7
 800b882:	bc80      	pop	{r7}
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	20000414 	.word	0x20000414
 800b88c:	20000470 	.word	0x20000470

0800b890 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f103 0208 	add.w	r2, r3, #8
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f103 0208 	add.w	r2, r3, #8
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f103 0208 	add.w	r2, r3, #8
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b8c4:	bf00      	nop
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bc80      	pop	{r7}
 800b8cc:	4770      	bx	lr

0800b8ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b8ce:	b480      	push	{r7}
 800b8d0:	b083      	sub	sp, #12
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b8dc:	bf00      	nop
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bc80      	pop	{r7}
 800b8e4:	4770      	bx	lr

0800b8e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8e6:	b480      	push	{r7}
 800b8e8:	b085      	sub	sp, #20
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
 800b8ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	689a      	ldr	r2, [r3, #8]
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	683a      	ldr	r2, [r7, #0]
 800b910:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	1c5a      	adds	r2, r3, #1
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	601a      	str	r2, [r3, #0]
}
 800b922:	bf00      	nop
 800b924:	3714      	adds	r7, #20
 800b926:	46bd      	mov	sp, r7
 800b928:	bc80      	pop	{r7}
 800b92a:	4770      	bx	lr

0800b92c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b942:	d103      	bne.n	800b94c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	60fb      	str	r3, [r7, #12]
 800b94a:	e00c      	b.n	800b966 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	3308      	adds	r3, #8
 800b950:	60fb      	str	r3, [r7, #12]
 800b952:	e002      	b.n	800b95a <vListInsert+0x2e>
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	60fb      	str	r3, [r7, #12]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	68ba      	ldr	r2, [r7, #8]
 800b962:	429a      	cmp	r2, r3
 800b964:	d2f6      	bcs.n	800b954 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	685a      	ldr	r2, [r3, #4]
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	683a      	ldr	r2, [r7, #0]
 800b974:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	1c5a      	adds	r2, r3, #1
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	601a      	str	r2, [r3, #0]
}
 800b992:	bf00      	nop
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	bc80      	pop	{r7}
 800b99a:	4770      	bx	lr

0800b99c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b99c:	b480      	push	{r7}
 800b99e:	b085      	sub	sp, #20
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	691b      	ldr	r3, [r3, #16]
 800b9a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	6892      	ldr	r2, [r2, #8]
 800b9b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	6852      	ldr	r2, [r2, #4]
 800b9bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d103      	bne.n	800b9d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	689a      	ldr	r2, [r3, #8]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	1e5a      	subs	r2, r3, #1
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3714      	adds	r7, #20
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bc80      	pop	{r7}
 800b9ec:	4770      	bx	lr
	...

0800b9f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d10a      	bne.n	800ba1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ba04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba08:	f383 8811 	msr	BASEPRI, r3
 800ba0c:	f3bf 8f6f 	isb	sy
 800ba10:	f3bf 8f4f 	dsb	sy
 800ba14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ba16:	bf00      	nop
 800ba18:	e7fe      	b.n	800ba18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ba1a:	f002 f997 	bl	800dd4c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba26:	68f9      	ldr	r1, [r7, #12]
 800ba28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba2a:	fb01 f303 	mul.w	r3, r1, r3
 800ba2e:	441a      	add	r2, r3
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2200      	movs	r2, #0
 800ba38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	68f9      	ldr	r1, [r7, #12]
 800ba4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba50:	fb01 f303 	mul.w	r3, r1, r3
 800ba54:	441a      	add	r2, r3
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	22ff      	movs	r2, #255	; 0xff
 800ba5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	22ff      	movs	r2, #255	; 0xff
 800ba66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d114      	bne.n	800ba9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	691b      	ldr	r3, [r3, #16]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d01a      	beq.n	800baae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	3310      	adds	r3, #16
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f001 f9ad 	bl	800cddc <xTaskRemoveFromEventList>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d012      	beq.n	800baae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ba88:	4b0c      	ldr	r3, [pc, #48]	; (800babc <xQueueGenericReset+0xcc>)
 800ba8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba8e:	601a      	str	r2, [r3, #0]
 800ba90:	f3bf 8f4f 	dsb	sy
 800ba94:	f3bf 8f6f 	isb	sy
 800ba98:	e009      	b.n	800baae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	3310      	adds	r3, #16
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7ff fef6 	bl	800b890 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	3324      	adds	r3, #36	; 0x24
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7ff fef1 	bl	800b890 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800baae:	f002 f97d 	bl	800ddac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bab2:	2301      	movs	r3, #1
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3710      	adds	r7, #16
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	e000ed04 	.word	0xe000ed04

0800bac0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b08e      	sub	sp, #56	; 0x38
 800bac4:	af02      	add	r7, sp, #8
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
 800bacc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10a      	bne.n	800baea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad8:	f383 8811 	msr	BASEPRI, r3
 800badc:	f3bf 8f6f 	isb	sy
 800bae0:	f3bf 8f4f 	dsb	sy
 800bae4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bae6:	bf00      	nop
 800bae8:	e7fe      	b.n	800bae8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d10a      	bne.n	800bb06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800baf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf4:	f383 8811 	msr	BASEPRI, r3
 800baf8:	f3bf 8f6f 	isb	sy
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb02:	bf00      	nop
 800bb04:	e7fe      	b.n	800bb04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d002      	beq.n	800bb12 <xQueueGenericCreateStatic+0x52>
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d001      	beq.n	800bb16 <xQueueGenericCreateStatic+0x56>
 800bb12:	2301      	movs	r3, #1
 800bb14:	e000      	b.n	800bb18 <xQueueGenericCreateStatic+0x58>
 800bb16:	2300      	movs	r3, #0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10a      	bne.n	800bb32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb20:	f383 8811 	msr	BASEPRI, r3
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	623b      	str	r3, [r7, #32]
}
 800bb2e:	bf00      	nop
 800bb30:	e7fe      	b.n	800bb30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d102      	bne.n	800bb3e <xQueueGenericCreateStatic+0x7e>
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d101      	bne.n	800bb42 <xQueueGenericCreateStatic+0x82>
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e000      	b.n	800bb44 <xQueueGenericCreateStatic+0x84>
 800bb42:	2300      	movs	r3, #0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d10a      	bne.n	800bb5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4c:	f383 8811 	msr	BASEPRI, r3
 800bb50:	f3bf 8f6f 	isb	sy
 800bb54:	f3bf 8f4f 	dsb	sy
 800bb58:	61fb      	str	r3, [r7, #28]
}
 800bb5a:	bf00      	nop
 800bb5c:	e7fe      	b.n	800bb5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bb5e:	2350      	movs	r3, #80	; 0x50
 800bb60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	2b50      	cmp	r3, #80	; 0x50
 800bb66:	d00a      	beq.n	800bb7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6c:	f383 8811 	msr	BASEPRI, r3
 800bb70:	f3bf 8f6f 	isb	sy
 800bb74:	f3bf 8f4f 	dsb	sy
 800bb78:	61bb      	str	r3, [r7, #24]
}
 800bb7a:	bf00      	nop
 800bb7c:	e7fe      	b.n	800bb7c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d00d      	beq.n	800bba4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb90:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	4613      	mov	r3, r2
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	68b9      	ldr	r1, [r7, #8]
 800bb9e:	68f8      	ldr	r0, [r7, #12]
 800bba0:	f000 f843 	bl	800bc2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800bba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3730      	adds	r7, #48	; 0x30
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}

0800bbae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b08a      	sub	sp, #40	; 0x28
 800bbb2:	af02      	add	r7, sp, #8
 800bbb4:	60f8      	str	r0, [r7, #12]
 800bbb6:	60b9      	str	r1, [r7, #8]
 800bbb8:	4613      	mov	r3, r2
 800bbba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d10a      	bne.n	800bbd8 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc6:	f383 8811 	msr	BASEPRI, r3
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	613b      	str	r3, [r7, #16]
}
 800bbd4:	bf00      	nop
 800bbd6:	e7fe      	b.n	800bbd6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d102      	bne.n	800bbe4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	61fb      	str	r3, [r7, #28]
 800bbe2:	e004      	b.n	800bbee <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	68ba      	ldr	r2, [r7, #8]
 800bbe8:	fb02 f303 	mul.w	r3, r2, r3
 800bbec:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800bbee:	69fb      	ldr	r3, [r7, #28]
 800bbf0:	3350      	adds	r3, #80	; 0x50
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f002 f9aa 	bl	800df4c <pvPortMalloc>
 800bbf8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d00f      	beq.n	800bc20 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800bc00:	69bb      	ldr	r3, [r7, #24]
 800bc02:	3350      	adds	r3, #80	; 0x50
 800bc04:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc0e:	79fa      	ldrb	r2, [r7, #7]
 800bc10:	69bb      	ldr	r3, [r7, #24]
 800bc12:	9300      	str	r3, [sp, #0]
 800bc14:	4613      	mov	r3, r2
 800bc16:	697a      	ldr	r2, [r7, #20]
 800bc18:	68b9      	ldr	r1, [r7, #8]
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f000 f805 	bl	800bc2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800bc20:	69bb      	ldr	r3, [r7, #24]
	}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3720      	adds	r7, #32
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b084      	sub	sp, #16
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	60f8      	str	r0, [r7, #12]
 800bc32:	60b9      	str	r1, [r7, #8]
 800bc34:	607a      	str	r2, [r7, #4]
 800bc36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d103      	bne.n	800bc46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	69ba      	ldr	r2, [r7, #24]
 800bc42:	601a      	str	r2, [r3, #0]
 800bc44:	e002      	b.n	800bc4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bc4c:	69bb      	ldr	r3, [r7, #24]
 800bc4e:	68fa      	ldr	r2, [r7, #12]
 800bc50:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bc58:	2101      	movs	r1, #1
 800bc5a:	69b8      	ldr	r0, [r7, #24]
 800bc5c:	f7ff fec8 	bl	800b9f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	78fa      	ldrb	r2, [r7, #3]
 800bc64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bc68:	bf00      	nop
 800bc6a:	3710      	adds	r7, #16
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b08e      	sub	sp, #56	; 0x38
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	607a      	str	r2, [r7, #4]
 800bc7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10a      	bne.n	800bca2 <xQueueGenericSend+0x32>
	__asm volatile
 800bc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc90:	f383 8811 	msr	BASEPRI, r3
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc9e:	bf00      	nop
 800bca0:	e7fe      	b.n	800bca0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d103      	bne.n	800bcb0 <xQueueGenericSend+0x40>
 800bca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d101      	bne.n	800bcb4 <xQueueGenericSend+0x44>
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e000      	b.n	800bcb6 <xQueueGenericSend+0x46>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d10a      	bne.n	800bcd0 <xQueueGenericSend+0x60>
	__asm volatile
 800bcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcbe:	f383 8811 	msr	BASEPRI, r3
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	f3bf 8f4f 	dsb	sy
 800bcca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bccc:	bf00      	nop
 800bcce:	e7fe      	b.n	800bcce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	d103      	bne.n	800bcde <xQueueGenericSend+0x6e>
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d101      	bne.n	800bce2 <xQueueGenericSend+0x72>
 800bcde:	2301      	movs	r3, #1
 800bce0:	e000      	b.n	800bce4 <xQueueGenericSend+0x74>
 800bce2:	2300      	movs	r3, #0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10a      	bne.n	800bcfe <xQueueGenericSend+0x8e>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	623b      	str	r3, [r7, #32]
}
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcfe:	f001 fa67 	bl	800d1d0 <xTaskGetSchedulerState>
 800bd02:	4603      	mov	r3, r0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d102      	bne.n	800bd0e <xQueueGenericSend+0x9e>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d101      	bne.n	800bd12 <xQueueGenericSend+0xa2>
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e000      	b.n	800bd14 <xQueueGenericSend+0xa4>
 800bd12:	2300      	movs	r3, #0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d10a      	bne.n	800bd2e <xQueueGenericSend+0xbe>
	__asm volatile
 800bd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1c:	f383 8811 	msr	BASEPRI, r3
 800bd20:	f3bf 8f6f 	isb	sy
 800bd24:	f3bf 8f4f 	dsb	sy
 800bd28:	61fb      	str	r3, [r7, #28]
}
 800bd2a:	bf00      	nop
 800bd2c:	e7fe      	b.n	800bd2c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd2e:	f002 f80d 	bl	800dd4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d302      	bcc.n	800bd44 <xQueueGenericSend+0xd4>
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	2b02      	cmp	r3, #2
 800bd42:	d129      	bne.n	800bd98 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd44:	683a      	ldr	r2, [r7, #0]
 800bd46:	68b9      	ldr	r1, [r7, #8]
 800bd48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd4a:	f000 fa07 	bl	800c15c <prvCopyDataToQueue>
 800bd4e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d010      	beq.n	800bd7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5a:	3324      	adds	r3, #36	; 0x24
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f001 f83d 	bl	800cddc <xTaskRemoveFromEventList>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d013      	beq.n	800bd90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bd68:	4b3f      	ldr	r3, [pc, #252]	; (800be68 <xQueueGenericSend+0x1f8>)
 800bd6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd6e:	601a      	str	r2, [r3, #0]
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	f3bf 8f6f 	isb	sy
 800bd78:	e00a      	b.n	800bd90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d007      	beq.n	800bd90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bd80:	4b39      	ldr	r3, [pc, #228]	; (800be68 <xQueueGenericSend+0x1f8>)
 800bd82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd86:	601a      	str	r2, [r3, #0]
 800bd88:	f3bf 8f4f 	dsb	sy
 800bd8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bd90:	f002 f80c 	bl	800ddac <vPortExitCritical>
				return pdPASS;
 800bd94:	2301      	movs	r3, #1
 800bd96:	e063      	b.n	800be60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d103      	bne.n	800bda6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd9e:	f002 f805 	bl	800ddac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bda2:	2300      	movs	r3, #0
 800bda4:	e05c      	b.n	800be60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bda6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d106      	bne.n	800bdba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdac:	f107 0314 	add.w	r3, r7, #20
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f001 f877 	bl	800cea4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bdba:	f001 fff7 	bl	800ddac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bdbe:	f000 fde9 	bl	800c994 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdc2:	f001 ffc3 	bl	800dd4c <vPortEnterCritical>
 800bdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdcc:	b25b      	sxtb	r3, r3
 800bdce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd2:	d103      	bne.n	800bddc <xQueueGenericSend+0x16c>
 800bdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bde2:	b25b      	sxtb	r3, r3
 800bde4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde8:	d103      	bne.n	800bdf2 <xQueueGenericSend+0x182>
 800bdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdec:	2200      	movs	r2, #0
 800bdee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdf2:	f001 ffdb 	bl	800ddac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bdf6:	1d3a      	adds	r2, r7, #4
 800bdf8:	f107 0314 	add.w	r3, r7, #20
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	4618      	mov	r0, r3
 800be00:	f001 f866 	bl	800ced0 <xTaskCheckForTimeOut>
 800be04:	4603      	mov	r3, r0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d124      	bne.n	800be54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800be0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be0c:	f000 fa9e 	bl	800c34c <prvIsQueueFull>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d018      	beq.n	800be48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800be16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be18:	3310      	adds	r3, #16
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	4611      	mov	r1, r2
 800be1e:	4618      	mov	r0, r3
 800be20:	f000 ff8c 	bl	800cd3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800be24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be26:	f000 fa29 	bl	800c27c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800be2a:	f000 fdc1 	bl	800c9b0 <xTaskResumeAll>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	f47f af7c 	bne.w	800bd2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800be36:	4b0c      	ldr	r3, [pc, #48]	; (800be68 <xQueueGenericSend+0x1f8>)
 800be38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be3c:	601a      	str	r2, [r3, #0]
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	e772      	b.n	800bd2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800be48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be4a:	f000 fa17 	bl	800c27c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be4e:	f000 fdaf 	bl	800c9b0 <xTaskResumeAll>
 800be52:	e76c      	b.n	800bd2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800be54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be56:	f000 fa11 	bl	800c27c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be5a:	f000 fda9 	bl	800c9b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800be5e:	2300      	movs	r3, #0
		}
	}
}
 800be60:	4618      	mov	r0, r3
 800be62:	3738      	adds	r7, #56	; 0x38
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	e000ed04 	.word	0xe000ed04

0800be6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b08e      	sub	sp, #56	; 0x38
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	607a      	str	r2, [r7, #4]
 800be78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10a      	bne.n	800be9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be96:	bf00      	nop
 800be98:	e7fe      	b.n	800be98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d103      	bne.n	800bea8 <xQueueGenericSendFromISR+0x3c>
 800bea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d101      	bne.n	800beac <xQueueGenericSendFromISR+0x40>
 800bea8:	2301      	movs	r3, #1
 800beaa:	e000      	b.n	800beae <xQueueGenericSendFromISR+0x42>
 800beac:	2300      	movs	r3, #0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d10a      	bne.n	800bec8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800beb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb6:	f383 8811 	msr	BASEPRI, r3
 800beba:	f3bf 8f6f 	isb	sy
 800bebe:	f3bf 8f4f 	dsb	sy
 800bec2:	623b      	str	r3, [r7, #32]
}
 800bec4:	bf00      	nop
 800bec6:	e7fe      	b.n	800bec6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	2b02      	cmp	r3, #2
 800becc:	d103      	bne.n	800bed6 <xQueueGenericSendFromISR+0x6a>
 800bece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d101      	bne.n	800beda <xQueueGenericSendFromISR+0x6e>
 800bed6:	2301      	movs	r3, #1
 800bed8:	e000      	b.n	800bedc <xQueueGenericSendFromISR+0x70>
 800beda:	2300      	movs	r3, #0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d10a      	bne.n	800bef6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee4:	f383 8811 	msr	BASEPRI, r3
 800bee8:	f3bf 8f6f 	isb	sy
 800beec:	f3bf 8f4f 	dsb	sy
 800bef0:	61fb      	str	r3, [r7, #28]
}
 800bef2:	bf00      	nop
 800bef4:	e7fe      	b.n	800bef4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bef6:	f001 ffeb 	bl	800ded0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800befa:	f3ef 8211 	mrs	r2, BASEPRI
 800befe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf02:	f383 8811 	msr	BASEPRI, r3
 800bf06:	f3bf 8f6f 	isb	sy
 800bf0a:	f3bf 8f4f 	dsb	sy
 800bf0e:	61ba      	str	r2, [r7, #24]
 800bf10:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bf12:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d302      	bcc.n	800bf28 <xQueueGenericSendFromISR+0xbc>
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	2b02      	cmp	r3, #2
 800bf26:	d12c      	bne.n	800bf82 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf32:	683a      	ldr	r2, [r7, #0]
 800bf34:	68b9      	ldr	r1, [r7, #8]
 800bf36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf38:	f000 f910 	bl	800c15c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bf3c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bf40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf44:	d112      	bne.n	800bf6c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d016      	beq.n	800bf7c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf50:	3324      	adds	r3, #36	; 0x24
 800bf52:	4618      	mov	r0, r3
 800bf54:	f000 ff42 	bl	800cddc <xTaskRemoveFromEventList>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00e      	beq.n	800bf7c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00b      	beq.n	800bf7c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2201      	movs	r2, #1
 800bf68:	601a      	str	r2, [r3, #0]
 800bf6a:	e007      	b.n	800bf7c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf70:	3301      	adds	r3, #1
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	b25a      	sxtb	r2, r3
 800bf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bf80:	e001      	b.n	800bf86 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf82:	2300      	movs	r3, #0
 800bf84:	637b      	str	r3, [r7, #52]	; 0x34
 800bf86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf88:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bf90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3738      	adds	r7, #56	; 0x38
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b08c      	sub	sp, #48	; 0x30
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d10a      	bne.n	800bfcc <xQueueReceive+0x30>
	__asm volatile
 800bfb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfba:	f383 8811 	msr	BASEPRI, r3
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	623b      	str	r3, [r7, #32]
}
 800bfc8:	bf00      	nop
 800bfca:	e7fe      	b.n	800bfca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d103      	bne.n	800bfda <xQueueReceive+0x3e>
 800bfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d101      	bne.n	800bfde <xQueueReceive+0x42>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e000      	b.n	800bfe0 <xQueueReceive+0x44>
 800bfde:	2300      	movs	r3, #0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d10a      	bne.n	800bffa <xQueueReceive+0x5e>
	__asm volatile
 800bfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe8:	f383 8811 	msr	BASEPRI, r3
 800bfec:	f3bf 8f6f 	isb	sy
 800bff0:	f3bf 8f4f 	dsb	sy
 800bff4:	61fb      	str	r3, [r7, #28]
}
 800bff6:	bf00      	nop
 800bff8:	e7fe      	b.n	800bff8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bffa:	f001 f8e9 	bl	800d1d0 <xTaskGetSchedulerState>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d102      	bne.n	800c00a <xQueueReceive+0x6e>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d101      	bne.n	800c00e <xQueueReceive+0x72>
 800c00a:	2301      	movs	r3, #1
 800c00c:	e000      	b.n	800c010 <xQueueReceive+0x74>
 800c00e:	2300      	movs	r3, #0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d10a      	bne.n	800c02a <xQueueReceive+0x8e>
	__asm volatile
 800c014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c018:	f383 8811 	msr	BASEPRI, r3
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	61bb      	str	r3, [r7, #24]
}
 800c026:	bf00      	nop
 800c028:	e7fe      	b.n	800c028 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c02a:	f001 fe8f 	bl	800dd4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c032:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c036:	2b00      	cmp	r3, #0
 800c038:	d01f      	beq.n	800c07a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c03a:	68b9      	ldr	r1, [r7, #8]
 800c03c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c03e:	f000 f8f7 	bl	800c230 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c044:	1e5a      	subs	r2, r3, #1
 800c046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c048:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00f      	beq.n	800c072 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c054:	3310      	adds	r3, #16
 800c056:	4618      	mov	r0, r3
 800c058:	f000 fec0 	bl	800cddc <xTaskRemoveFromEventList>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d007      	beq.n	800c072 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c062:	4b3d      	ldr	r3, [pc, #244]	; (800c158 <xQueueReceive+0x1bc>)
 800c064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c068:	601a      	str	r2, [r3, #0]
 800c06a:	f3bf 8f4f 	dsb	sy
 800c06e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c072:	f001 fe9b 	bl	800ddac <vPortExitCritical>
				return pdPASS;
 800c076:	2301      	movs	r3, #1
 800c078:	e069      	b.n	800c14e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d103      	bne.n	800c088 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c080:	f001 fe94 	bl	800ddac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c084:	2300      	movs	r3, #0
 800c086:	e062      	b.n	800c14e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d106      	bne.n	800c09c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c08e:	f107 0310 	add.w	r3, r7, #16
 800c092:	4618      	mov	r0, r3
 800c094:	f000 ff06 	bl	800cea4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c098:	2301      	movs	r3, #1
 800c09a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c09c:	f001 fe86 	bl	800ddac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c0a0:	f000 fc78 	bl	800c994 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0a4:	f001 fe52 	bl	800dd4c <vPortEnterCritical>
 800c0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0ae:	b25b      	sxtb	r3, r3
 800c0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b4:	d103      	bne.n	800c0be <xQueueReceive+0x122>
 800c0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0c4:	b25b      	sxtb	r3, r3
 800c0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ca:	d103      	bne.n	800c0d4 <xQueueReceive+0x138>
 800c0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0d4:	f001 fe6a 	bl	800ddac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0d8:	1d3a      	adds	r2, r7, #4
 800c0da:	f107 0310 	add.w	r3, r7, #16
 800c0de:	4611      	mov	r1, r2
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f000 fef5 	bl	800ced0 <xTaskCheckForTimeOut>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d123      	bne.n	800c134 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0ee:	f000 f917 	bl	800c320 <prvIsQueueEmpty>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d017      	beq.n	800c128 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fa:	3324      	adds	r3, #36	; 0x24
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	4611      	mov	r1, r2
 800c100:	4618      	mov	r0, r3
 800c102:	f000 fe1b 	bl	800cd3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c108:	f000 f8b8 	bl	800c27c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c10c:	f000 fc50 	bl	800c9b0 <xTaskResumeAll>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d189      	bne.n	800c02a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c116:	4b10      	ldr	r3, [pc, #64]	; (800c158 <xQueueReceive+0x1bc>)
 800c118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c11c:	601a      	str	r2, [r3, #0]
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	f3bf 8f6f 	isb	sy
 800c126:	e780      	b.n	800c02a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c12a:	f000 f8a7 	bl	800c27c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c12e:	f000 fc3f 	bl	800c9b0 <xTaskResumeAll>
 800c132:	e77a      	b.n	800c02a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c136:	f000 f8a1 	bl	800c27c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c13a:	f000 fc39 	bl	800c9b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c13e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c140:	f000 f8ee 	bl	800c320 <prvIsQueueEmpty>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	f43f af6f 	beq.w	800c02a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c14c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3730      	adds	r7, #48	; 0x30
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	e000ed04 	.word	0xe000ed04

0800c15c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b086      	sub	sp, #24
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c168:	2300      	movs	r3, #0
 800c16a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c170:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c176:	2b00      	cmp	r3, #0
 800c178:	d10d      	bne.n	800c196 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d14d      	bne.n	800c21e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	4618      	mov	r0, r3
 800c188:	f001 f840 	bl	800d20c <xTaskPriorityDisinherit>
 800c18c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2200      	movs	r2, #0
 800c192:	605a      	str	r2, [r3, #4]
 800c194:	e043      	b.n	800c21e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d119      	bne.n	800c1d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	6898      	ldr	r0, [r3, #8]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	68b9      	ldr	r1, [r7, #8]
 800c1a8:	f002 fd8e 	bl	800ecc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	689a      	ldr	r2, [r3, #8]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b4:	441a      	add	r2, r3
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	689a      	ldr	r2, [r3, #8]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d32b      	bcc.n	800c21e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	609a      	str	r2, [r3, #8]
 800c1ce:	e026      	b.n	800c21e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	68d8      	ldr	r0, [r3, #12]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1d8:	461a      	mov	r2, r3
 800c1da:	68b9      	ldr	r1, [r7, #8]
 800c1dc:	f002 fd74 	bl	800ecc8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	68da      	ldr	r2, [r3, #12]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e8:	425b      	negs	r3, r3
 800c1ea:	441a      	add	r2, r3
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	68da      	ldr	r2, [r3, #12]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d207      	bcs.n	800c20c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	685a      	ldr	r2, [r3, #4]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c204:	425b      	negs	r3, r3
 800c206:	441a      	add	r2, r3
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b02      	cmp	r3, #2
 800c210:	d105      	bne.n	800c21e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d002      	beq.n	800c21e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	3b01      	subs	r3, #1
 800c21c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	1c5a      	adds	r2, r3, #1
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c226:	697b      	ldr	r3, [r7, #20]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3718      	adds	r7, #24
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d018      	beq.n	800c274 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	68da      	ldr	r2, [r3, #12]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c24a:	441a      	add	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	68da      	ldr	r2, [r3, #12]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d303      	bcc.n	800c264 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	68d9      	ldr	r1, [r3, #12]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c26c:	461a      	mov	r2, r3
 800c26e:	6838      	ldr	r0, [r7, #0]
 800c270:	f002 fd2a 	bl	800ecc8 <memcpy>
	}
}
 800c274:	bf00      	nop
 800c276:	3708      	adds	r7, #8
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c284:	f001 fd62 	bl	800dd4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c28e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c290:	e011      	b.n	800c2b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c296:	2b00      	cmp	r3, #0
 800c298:	d012      	beq.n	800c2c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	3324      	adds	r3, #36	; 0x24
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f000 fd9c 	bl	800cddc <xTaskRemoveFromEventList>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d001      	beq.n	800c2ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c2aa:	f000 fe73 	bl	800cf94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c2ae:	7bfb      	ldrb	r3, [r7, #15]
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	dce9      	bgt.n	800c292 <prvUnlockQueue+0x16>
 800c2be:	e000      	b.n	800c2c2 <prvUnlockQueue+0x46>
					break;
 800c2c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	22ff      	movs	r2, #255	; 0xff
 800c2c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c2ca:	f001 fd6f 	bl	800ddac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c2ce:	f001 fd3d 	bl	800dd4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2da:	e011      	b.n	800c300 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	691b      	ldr	r3, [r3, #16]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d012      	beq.n	800c30a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	3310      	adds	r3, #16
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 fd77 	bl	800cddc <xTaskRemoveFromEventList>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d001      	beq.n	800c2f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c2f4:	f000 fe4e 	bl	800cf94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c2f8:	7bbb      	ldrb	r3, [r7, #14]
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c300:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c304:	2b00      	cmp	r3, #0
 800c306:	dce9      	bgt.n	800c2dc <prvUnlockQueue+0x60>
 800c308:	e000      	b.n	800c30c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c30a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	22ff      	movs	r2, #255	; 0xff
 800c310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c314:	f001 fd4a 	bl	800ddac <vPortExitCritical>
}
 800c318:	bf00      	nop
 800c31a:	3710      	adds	r7, #16
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c328:	f001 fd10 	bl	800dd4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c330:	2b00      	cmp	r3, #0
 800c332:	d102      	bne.n	800c33a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c334:	2301      	movs	r3, #1
 800c336:	60fb      	str	r3, [r7, #12]
 800c338:	e001      	b.n	800c33e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c33a:	2300      	movs	r3, #0
 800c33c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c33e:	f001 fd35 	bl	800ddac <vPortExitCritical>

	return xReturn;
 800c342:	68fb      	ldr	r3, [r7, #12]
}
 800c344:	4618      	mov	r0, r3
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c354:	f001 fcfa 	bl	800dd4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c360:	429a      	cmp	r2, r3
 800c362:	d102      	bne.n	800c36a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c364:	2301      	movs	r3, #1
 800c366:	60fb      	str	r3, [r7, #12]
 800c368:	e001      	b.n	800c36e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c36a:	2300      	movs	r3, #0
 800c36c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c36e:	f001 fd1d 	bl	800ddac <vPortExitCritical>

	return xReturn;
 800c372:	68fb      	ldr	r3, [r7, #12]
}
 800c374:	4618      	mov	r0, r3
 800c376:	3710      	adds	r7, #16
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c37c:	b480      	push	{r7}
 800c37e:	b085      	sub	sp, #20
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c386:	2300      	movs	r3, #0
 800c388:	60fb      	str	r3, [r7, #12]
 800c38a:	e014      	b.n	800c3b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c38c:	4a0e      	ldr	r2, [pc, #56]	; (800c3c8 <vQueueAddToRegistry+0x4c>)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d10b      	bne.n	800c3b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c398:	490b      	ldr	r1, [pc, #44]	; (800c3c8 <vQueueAddToRegistry+0x4c>)
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	683a      	ldr	r2, [r7, #0]
 800c39e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c3a2:	4a09      	ldr	r2, [pc, #36]	; (800c3c8 <vQueueAddToRegistry+0x4c>)
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	00db      	lsls	r3, r3, #3
 800c3a8:	4413      	add	r3, r2
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c3ae:	e006      	b.n	800c3be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	60fb      	str	r3, [r7, #12]
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2b07      	cmp	r3, #7
 800c3ba:	d9e7      	bls.n	800c38c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c3bc:	bf00      	nop
 800c3be:	bf00      	nop
 800c3c0:	3714      	adds	r7, #20
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bc80      	pop	{r7}
 800c3c6:	4770      	bx	lr
 800c3c8:	200026b4 	.word	0x200026b4

0800c3cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b086      	sub	sp, #24
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c3dc:	f001 fcb6 	bl	800dd4c <vPortEnterCritical>
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3e6:	b25b      	sxtb	r3, r3
 800c3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ec:	d103      	bne.n	800c3f6 <vQueueWaitForMessageRestricted+0x2a>
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3fc:	b25b      	sxtb	r3, r3
 800c3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c402:	d103      	bne.n	800c40c <vQueueWaitForMessageRestricted+0x40>
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	2200      	movs	r2, #0
 800c408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c40c:	f001 fcce 	bl	800ddac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c414:	2b00      	cmp	r3, #0
 800c416:	d106      	bne.n	800c426 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	3324      	adds	r3, #36	; 0x24
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	68b9      	ldr	r1, [r7, #8]
 800c420:	4618      	mov	r0, r3
 800c422:	f000 fcaf 	bl	800cd84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c426:	6978      	ldr	r0, [r7, #20]
 800c428:	f7ff ff28 	bl	800c27c <prvUnlockQueue>
	}
 800c42c:	bf00      	nop
 800c42e:	3718      	adds	r7, #24
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c434:	b580      	push	{r7, lr}
 800c436:	b08e      	sub	sp, #56	; 0x38
 800c438:	af04      	add	r7, sp, #16
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
 800c440:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c444:	2b00      	cmp	r3, #0
 800c446:	d10a      	bne.n	800c45e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44c:	f383 8811 	msr	BASEPRI, r3
 800c450:	f3bf 8f6f 	isb	sy
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	623b      	str	r3, [r7, #32]
}
 800c45a:	bf00      	nop
 800c45c:	e7fe      	b.n	800c45c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c460:	2b00      	cmp	r3, #0
 800c462:	d10a      	bne.n	800c47a <xTaskCreateStatic+0x46>
	__asm volatile
 800c464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c468:	f383 8811 	msr	BASEPRI, r3
 800c46c:	f3bf 8f6f 	isb	sy
 800c470:	f3bf 8f4f 	dsb	sy
 800c474:	61fb      	str	r3, [r7, #28]
}
 800c476:	bf00      	nop
 800c478:	e7fe      	b.n	800c478 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c47a:	235c      	movs	r3, #92	; 0x5c
 800c47c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	2b5c      	cmp	r3, #92	; 0x5c
 800c482:	d00a      	beq.n	800c49a <xTaskCreateStatic+0x66>
	__asm volatile
 800c484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c488:	f383 8811 	msr	BASEPRI, r3
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	61bb      	str	r3, [r7, #24]
}
 800c496:	bf00      	nop
 800c498:	e7fe      	b.n	800c498 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d01e      	beq.n	800c4de <xTaskCreateStatic+0xaa>
 800c4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d01b      	beq.n	800c4de <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b2:	2202      	movs	r2, #2
 800c4b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	9303      	str	r3, [sp, #12]
 800c4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4be:	9302      	str	r3, [sp, #8]
 800c4c0:	f107 0314 	add.w	r3, r7, #20
 800c4c4:	9301      	str	r3, [sp, #4]
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c8:	9300      	str	r3, [sp, #0]
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	68b9      	ldr	r1, [r7, #8]
 800c4d0:	68f8      	ldr	r0, [r7, #12]
 800c4d2:	f000 f850 	bl	800c576 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c4d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c4d8:	f000 f8d4 	bl	800c684 <prvAddNewTaskToReadyList>
 800c4dc:	e001      	b.n	800c4e2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c4e2:	697b      	ldr	r3, [r7, #20]
	}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3728      	adds	r7, #40	; 0x28
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b08c      	sub	sp, #48	; 0x30
 800c4f0:	af04      	add	r7, sp, #16
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	603b      	str	r3, [r7, #0]
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4fc:	88fb      	ldrh	r3, [r7, #6]
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	4618      	mov	r0, r3
 800c502:	f001 fd23 	bl	800df4c <pvPortMalloc>
 800c506:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00e      	beq.n	800c52c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800c50e:	205c      	movs	r0, #92	; 0x5c
 800c510:	f001 fd1c 	bl	800df4c <pvPortMalloc>
 800c514:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d003      	beq.n	800c524 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	697a      	ldr	r2, [r7, #20]
 800c520:	631a      	str	r2, [r3, #48]	; 0x30
 800c522:	e005      	b.n	800c530 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c524:	6978      	ldr	r0, [r7, #20]
 800c526:	f001 fdd5 	bl	800e0d4 <vPortFree>
 800c52a:	e001      	b.n	800c530 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c52c:	2300      	movs	r3, #0
 800c52e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c530:	69fb      	ldr	r3, [r7, #28]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d017      	beq.n	800c566 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	2200      	movs	r2, #0
 800c53a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c53e:	88fa      	ldrh	r2, [r7, #6]
 800c540:	2300      	movs	r3, #0
 800c542:	9303      	str	r3, [sp, #12]
 800c544:	69fb      	ldr	r3, [r7, #28]
 800c546:	9302      	str	r3, [sp, #8]
 800c548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54a:	9301      	str	r3, [sp, #4]
 800c54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	68b9      	ldr	r1, [r7, #8]
 800c554:	68f8      	ldr	r0, [r7, #12]
 800c556:	f000 f80e 	bl	800c576 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c55a:	69f8      	ldr	r0, [r7, #28]
 800c55c:	f000 f892 	bl	800c684 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c560:	2301      	movs	r3, #1
 800c562:	61bb      	str	r3, [r7, #24]
 800c564:	e002      	b.n	800c56c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c566:	f04f 33ff 	mov.w	r3, #4294967295
 800c56a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c56c:	69bb      	ldr	r3, [r7, #24]
	}
 800c56e:	4618      	mov	r0, r3
 800c570:	3720      	adds	r7, #32
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}

0800c576 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c576:	b580      	push	{r7, lr}
 800c578:	b088      	sub	sp, #32
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	60f8      	str	r0, [r7, #12]
 800c57e:	60b9      	str	r1, [r7, #8]
 800c580:	607a      	str	r2, [r7, #4]
 800c582:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c586:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	461a      	mov	r2, r3
 800c58e:	21a5      	movs	r1, #165	; 0xa5
 800c590:	f002 fbc2 	bl	800ed18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800c594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c59e:	3b01      	subs	r3, #1
 800c5a0:	009b      	lsls	r3, r3, #2
 800c5a2:	4413      	add	r3, r2
 800c5a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	f023 0307 	bic.w	r3, r3, #7
 800c5ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c5ae:	69bb      	ldr	r3, [r7, #24]
 800c5b0:	f003 0307 	and.w	r3, r3, #7
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00a      	beq.n	800c5ce <prvInitialiseNewTask+0x58>
	__asm volatile
 800c5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5bc:	f383 8811 	msr	BASEPRI, r3
 800c5c0:	f3bf 8f6f 	isb	sy
 800c5c4:	f3bf 8f4f 	dsb	sy
 800c5c8:	617b      	str	r3, [r7, #20]
}
 800c5ca:	bf00      	nop
 800c5cc:	e7fe      	b.n	800c5cc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	61fb      	str	r3, [r7, #28]
 800c5d2:	e012      	b.n	800c5fa <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c5d4:	68ba      	ldr	r2, [r7, #8]
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	4413      	add	r3, r2
 800c5da:	7819      	ldrb	r1, [r3, #0]
 800c5dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5de:	69fb      	ldr	r3, [r7, #28]
 800c5e0:	4413      	add	r3, r2
 800c5e2:	3334      	adds	r3, #52	; 0x34
 800c5e4:	460a      	mov	r2, r1
 800c5e6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800c5e8:	68ba      	ldr	r2, [r7, #8]
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d006      	beq.n	800c602 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c5f4:	69fb      	ldr	r3, [r7, #28]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	61fb      	str	r3, [r7, #28]
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	2b0f      	cmp	r3, #15
 800c5fe:	d9e9      	bls.n	800c5d4 <prvInitialiseNewTask+0x5e>
 800c600:	e000      	b.n	800c604 <prvInitialiseNewTask+0x8e>
		{
			break;
 800c602:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c606:	2200      	movs	r2, #0
 800c608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60e:	2b37      	cmp	r3, #55	; 0x37
 800c610:	d901      	bls.n	800c616 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c612:	2337      	movs	r3, #55	; 0x37
 800c614:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c61a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c620:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c624:	2200      	movs	r2, #0
 800c626:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62a:	3304      	adds	r3, #4
 800c62c:	4618      	mov	r0, r3
 800c62e:	f7ff f94e 	bl	800b8ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c634:	3318      	adds	r3, #24
 800c636:	4618      	mov	r0, r3
 800c638:	f7ff f949 	bl	800b8ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c640:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c644:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c650:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c654:	2200      	movs	r2, #0
 800c656:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65a:	2200      	movs	r2, #0
 800c65c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c660:	683a      	ldr	r2, [r7, #0]
 800c662:	68f9      	ldr	r1, [r7, #12]
 800c664:	69b8      	ldr	r0, [r7, #24]
 800c666:	f001 fa81 	bl	800db6c <pxPortInitialiseStack>
 800c66a:	4602      	mov	r2, r0
 800c66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800c670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c672:	2b00      	cmp	r3, #0
 800c674:	d002      	beq.n	800c67c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c67a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c67c:	bf00      	nop
 800c67e:	3720      	adds	r7, #32
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c68c:	f001 fb5e 	bl	800dd4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c690:	4b2d      	ldr	r3, [pc, #180]	; (800c748 <prvAddNewTaskToReadyList+0xc4>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	3301      	adds	r3, #1
 800c696:	4a2c      	ldr	r2, [pc, #176]	; (800c748 <prvAddNewTaskToReadyList+0xc4>)
 800c698:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c69a:	4b2c      	ldr	r3, [pc, #176]	; (800c74c <prvAddNewTaskToReadyList+0xc8>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d109      	bne.n	800c6b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c6a2:	4a2a      	ldr	r2, [pc, #168]	; (800c74c <prvAddNewTaskToReadyList+0xc8>)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c6a8:	4b27      	ldr	r3, [pc, #156]	; (800c748 <prvAddNewTaskToReadyList+0xc4>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d110      	bne.n	800c6d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c6b0:	f000 fc94 	bl	800cfdc <prvInitialiseTaskLists>
 800c6b4:	e00d      	b.n	800c6d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c6b6:	4b26      	ldr	r3, [pc, #152]	; (800c750 <prvAddNewTaskToReadyList+0xcc>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d109      	bne.n	800c6d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c6be:	4b23      	ldr	r3, [pc, #140]	; (800c74c <prvAddNewTaskToReadyList+0xc8>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d802      	bhi.n	800c6d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c6cc:	4a1f      	ldr	r2, [pc, #124]	; (800c74c <prvAddNewTaskToReadyList+0xc8>)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c6d2:	4b20      	ldr	r3, [pc, #128]	; (800c754 <prvAddNewTaskToReadyList+0xd0>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	4a1e      	ldr	r2, [pc, #120]	; (800c754 <prvAddNewTaskToReadyList+0xd0>)
 800c6da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c6dc:	4b1d      	ldr	r3, [pc, #116]	; (800c754 <prvAddNewTaskToReadyList+0xd0>)
 800c6de:	681a      	ldr	r2, [r3, #0]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6e8:	4b1b      	ldr	r3, [pc, #108]	; (800c758 <prvAddNewTaskToReadyList+0xd4>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d903      	bls.n	800c6f8 <prvAddNewTaskToReadyList+0x74>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f4:	4a18      	ldr	r2, [pc, #96]	; (800c758 <prvAddNewTaskToReadyList+0xd4>)
 800c6f6:	6013      	str	r3, [r2, #0]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	4413      	add	r3, r2
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	4a15      	ldr	r2, [pc, #84]	; (800c75c <prvAddNewTaskToReadyList+0xd8>)
 800c706:	441a      	add	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	3304      	adds	r3, #4
 800c70c:	4619      	mov	r1, r3
 800c70e:	4610      	mov	r0, r2
 800c710:	f7ff f8e9 	bl	800b8e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c714:	f001 fb4a 	bl	800ddac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c718:	4b0d      	ldr	r3, [pc, #52]	; (800c750 <prvAddNewTaskToReadyList+0xcc>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00e      	beq.n	800c73e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c720:	4b0a      	ldr	r3, [pc, #40]	; (800c74c <prvAddNewTaskToReadyList+0xc8>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d207      	bcs.n	800c73e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c72e:	4b0c      	ldr	r3, [pc, #48]	; (800c760 <prvAddNewTaskToReadyList+0xdc>)
 800c730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c734:	601a      	str	r2, [r3, #0]
 800c736:	f3bf 8f4f 	dsb	sy
 800c73a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c73e:	bf00      	nop
 800c740:	3708      	adds	r7, #8
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	20000d44 	.word	0x20000d44
 800c74c:	20000870 	.word	0x20000870
 800c750:	20000d50 	.word	0x20000d50
 800c754:	20000d60 	.word	0x20000d60
 800c758:	20000d4c 	.word	0x20000d4c
 800c75c:	20000874 	.word	0x20000874
 800c760:	e000ed04 	.word	0xe000ed04

0800c764 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c764:	b580      	push	{r7, lr}
 800c766:	b08a      	sub	sp, #40	; 0x28
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c76e:	2300      	movs	r3, #0
 800c770:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d10a      	bne.n	800c78e <vTaskDelayUntil+0x2a>
	__asm volatile
 800c778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77c:	f383 8811 	msr	BASEPRI, r3
 800c780:	f3bf 8f6f 	isb	sy
 800c784:	f3bf 8f4f 	dsb	sy
 800c788:	617b      	str	r3, [r7, #20]
}
 800c78a:	bf00      	nop
 800c78c:	e7fe      	b.n	800c78c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d10a      	bne.n	800c7aa <vTaskDelayUntil+0x46>
	__asm volatile
 800c794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c798:	f383 8811 	msr	BASEPRI, r3
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	613b      	str	r3, [r7, #16]
}
 800c7a6:	bf00      	nop
 800c7a8:	e7fe      	b.n	800c7a8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800c7aa:	4b2a      	ldr	r3, [pc, #168]	; (800c854 <vTaskDelayUntil+0xf0>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d00a      	beq.n	800c7c8 <vTaskDelayUntil+0x64>
	__asm volatile
 800c7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b6:	f383 8811 	msr	BASEPRI, r3
 800c7ba:	f3bf 8f6f 	isb	sy
 800c7be:	f3bf 8f4f 	dsb	sy
 800c7c2:	60fb      	str	r3, [r7, #12]
}
 800c7c4:	bf00      	nop
 800c7c6:	e7fe      	b.n	800c7c6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800c7c8:	f000 f8e4 	bl	800c994 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c7cc:	4b22      	ldr	r3, [pc, #136]	; (800c858 <vTaskDelayUntil+0xf4>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	683a      	ldr	r2, [r7, #0]
 800c7d8:	4413      	add	r3, r2
 800c7da:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	6a3a      	ldr	r2, [r7, #32]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d20b      	bcs.n	800c7fe <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	69fa      	ldr	r2, [r7, #28]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d211      	bcs.n	800c814 <vTaskDelayUntil+0xb0>
 800c7f0:	69fa      	ldr	r2, [r7, #28]
 800c7f2:	6a3b      	ldr	r3, [r7, #32]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d90d      	bls.n	800c814 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	627b      	str	r3, [r7, #36]	; 0x24
 800c7fc:	e00a      	b.n	800c814 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	69fa      	ldr	r2, [r7, #28]
 800c804:	429a      	cmp	r2, r3
 800c806:	d303      	bcc.n	800c810 <vTaskDelayUntil+0xac>
 800c808:	69fa      	ldr	r2, [r7, #28]
 800c80a:	6a3b      	ldr	r3, [r7, #32]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d901      	bls.n	800c814 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c810:	2301      	movs	r3, #1
 800c812:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	69fa      	ldr	r2, [r7, #28]
 800c818:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d006      	beq.n	800c82e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c820:	69fa      	ldr	r2, [r7, #28]
 800c822:	6a3b      	ldr	r3, [r7, #32]
 800c824:	1ad3      	subs	r3, r2, r3
 800c826:	2100      	movs	r1, #0
 800c828:	4618      	mov	r0, r3
 800c82a:	f000 fe39 	bl	800d4a0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c82e:	f000 f8bf 	bl	800c9b0 <xTaskResumeAll>
 800c832:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c834:	69bb      	ldr	r3, [r7, #24]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d107      	bne.n	800c84a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800c83a:	4b08      	ldr	r3, [pc, #32]	; (800c85c <vTaskDelayUntil+0xf8>)
 800c83c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c840:	601a      	str	r2, [r3, #0]
 800c842:	f3bf 8f4f 	dsb	sy
 800c846:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c84a:	bf00      	nop
 800c84c:	3728      	adds	r7, #40	; 0x28
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	20000d6c 	.word	0x20000d6c
 800c858:	20000d48 	.word	0x20000d48
 800c85c:	e000ed04 	.word	0xe000ed04

0800c860 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c868:	2300      	movs	r3, #0
 800c86a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d017      	beq.n	800c8a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c872:	4b13      	ldr	r3, [pc, #76]	; (800c8c0 <vTaskDelay+0x60>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00a      	beq.n	800c890 <vTaskDelay+0x30>
	__asm volatile
 800c87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	60bb      	str	r3, [r7, #8]
}
 800c88c:	bf00      	nop
 800c88e:	e7fe      	b.n	800c88e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c890:	f000 f880 	bl	800c994 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c894:	2100      	movs	r1, #0
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 fe02 	bl	800d4a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c89c:	f000 f888 	bl	800c9b0 <xTaskResumeAll>
 800c8a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d107      	bne.n	800c8b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c8a8:	4b06      	ldr	r3, [pc, #24]	; (800c8c4 <vTaskDelay+0x64>)
 800c8aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8ae:	601a      	str	r2, [r3, #0]
 800c8b0:	f3bf 8f4f 	dsb	sy
 800c8b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c8b8:	bf00      	nop
 800c8ba:	3710      	adds	r7, #16
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	20000d6c 	.word	0x20000d6c
 800c8c4:	e000ed04 	.word	0xe000ed04

0800c8c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b08a      	sub	sp, #40	; 0x28
 800c8cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c8d6:	463a      	mov	r2, r7
 800c8d8:	1d39      	adds	r1, r7, #4
 800c8da:	f107 0308 	add.w	r3, r7, #8
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fe ffa4 	bl	800b82c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c8e4:	6839      	ldr	r1, [r7, #0]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	68ba      	ldr	r2, [r7, #8]
 800c8ea:	9202      	str	r2, [sp, #8]
 800c8ec:	9301      	str	r3, [sp, #4]
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	9300      	str	r3, [sp, #0]
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	460a      	mov	r2, r1
 800c8f6:	4921      	ldr	r1, [pc, #132]	; (800c97c <vTaskStartScheduler+0xb4>)
 800c8f8:	4821      	ldr	r0, [pc, #132]	; (800c980 <vTaskStartScheduler+0xb8>)
 800c8fa:	f7ff fd9b 	bl	800c434 <xTaskCreateStatic>
 800c8fe:	4603      	mov	r3, r0
 800c900:	4a20      	ldr	r2, [pc, #128]	; (800c984 <vTaskStartScheduler+0xbc>)
 800c902:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c904:	4b1f      	ldr	r3, [pc, #124]	; (800c984 <vTaskStartScheduler+0xbc>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d002      	beq.n	800c912 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c90c:	2301      	movs	r3, #1
 800c90e:	617b      	str	r3, [r7, #20]
 800c910:	e001      	b.n	800c916 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c912:	2300      	movs	r3, #0
 800c914:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d102      	bne.n	800c922 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c91c:	f000 fe14 	bl	800d548 <xTimerCreateTimerTask>
 800c920:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	2b01      	cmp	r3, #1
 800c926:	d116      	bne.n	800c956 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92c:	f383 8811 	msr	BASEPRI, r3
 800c930:	f3bf 8f6f 	isb	sy
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	613b      	str	r3, [r7, #16]
}
 800c93a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c93c:	4b12      	ldr	r3, [pc, #72]	; (800c988 <vTaskStartScheduler+0xc0>)
 800c93e:	f04f 32ff 	mov.w	r2, #4294967295
 800c942:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c944:	4b11      	ldr	r3, [pc, #68]	; (800c98c <vTaskStartScheduler+0xc4>)
 800c946:	2201      	movs	r2, #1
 800c948:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800c94a:	4b11      	ldr	r3, [pc, #68]	; (800c990 <vTaskStartScheduler+0xc8>)
 800c94c:	2200      	movs	r2, #0
 800c94e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c950:	f001 f98a 	bl	800dc68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c954:	e00e      	b.n	800c974 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c95c:	d10a      	bne.n	800c974 <vTaskStartScheduler+0xac>
	__asm volatile
 800c95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	60fb      	str	r3, [r7, #12]
}
 800c970:	bf00      	nop
 800c972:	e7fe      	b.n	800c972 <vTaskStartScheduler+0xaa>
}
 800c974:	bf00      	nop
 800c976:	3718      	adds	r7, #24
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	0800ef84 	.word	0x0800ef84
 800c980:	0800cfad 	.word	0x0800cfad
 800c984:	20000d68 	.word	0x20000d68
 800c988:	20000d64 	.word	0x20000d64
 800c98c:	20000d50 	.word	0x20000d50
 800c990:	20000d48 	.word	0x20000d48

0800c994 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c994:	b480      	push	{r7}
 800c996:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c998:	4b04      	ldr	r3, [pc, #16]	; (800c9ac <vTaskSuspendAll+0x18>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	3301      	adds	r3, #1
 800c99e:	4a03      	ldr	r2, [pc, #12]	; (800c9ac <vTaskSuspendAll+0x18>)
 800c9a0:	6013      	str	r3, [r2, #0]
}
 800c9a2:	bf00      	nop
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bc80      	pop	{r7}
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	20000d6c 	.word	0x20000d6c

0800c9b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c9be:	4b42      	ldr	r3, [pc, #264]	; (800cac8 <xTaskResumeAll+0x118>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d10a      	bne.n	800c9dc <xTaskResumeAll+0x2c>
	__asm volatile
 800c9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ca:	f383 8811 	msr	BASEPRI, r3
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	603b      	str	r3, [r7, #0]
}
 800c9d8:	bf00      	nop
 800c9da:	e7fe      	b.n	800c9da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c9dc:	f001 f9b6 	bl	800dd4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c9e0:	4b39      	ldr	r3, [pc, #228]	; (800cac8 <xTaskResumeAll+0x118>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	4a38      	ldr	r2, [pc, #224]	; (800cac8 <xTaskResumeAll+0x118>)
 800c9e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9ea:	4b37      	ldr	r3, [pc, #220]	; (800cac8 <xTaskResumeAll+0x118>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d162      	bne.n	800cab8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c9f2:	4b36      	ldr	r3, [pc, #216]	; (800cacc <xTaskResumeAll+0x11c>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d05e      	beq.n	800cab8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9fa:	e02f      	b.n	800ca5c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800c9fc:	4b34      	ldr	r3, [pc, #208]	; (800cad0 <xTaskResumeAll+0x120>)
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	3318      	adds	r3, #24
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f7fe ffc7 	bl	800b99c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	3304      	adds	r3, #4
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7fe ffc2 	bl	800b99c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca1c:	4b2d      	ldr	r3, [pc, #180]	; (800cad4 <xTaskResumeAll+0x124>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d903      	bls.n	800ca2c <xTaskResumeAll+0x7c>
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca28:	4a2a      	ldr	r2, [pc, #168]	; (800cad4 <xTaskResumeAll+0x124>)
 800ca2a:	6013      	str	r3, [r2, #0]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca30:	4613      	mov	r3, r2
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	4413      	add	r3, r2
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	4a27      	ldr	r2, [pc, #156]	; (800cad8 <xTaskResumeAll+0x128>)
 800ca3a:	441a      	add	r2, r3
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	3304      	adds	r3, #4
 800ca40:	4619      	mov	r1, r3
 800ca42:	4610      	mov	r0, r2
 800ca44:	f7fe ff4f 	bl	800b8e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca4c:	4b23      	ldr	r3, [pc, #140]	; (800cadc <xTaskResumeAll+0x12c>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d302      	bcc.n	800ca5c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ca56:	4b22      	ldr	r3, [pc, #136]	; (800cae0 <xTaskResumeAll+0x130>)
 800ca58:	2201      	movs	r2, #1
 800ca5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca5c:	4b1c      	ldr	r3, [pc, #112]	; (800cad0 <xTaskResumeAll+0x120>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d1cb      	bne.n	800c9fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d001      	beq.n	800ca6e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ca6a:	f000 fb8d 	bl	800d188 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ca6e:	4b1d      	ldr	r3, [pc, #116]	; (800cae4 <xTaskResumeAll+0x134>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d010      	beq.n	800ca9c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ca7a:	f000 f845 	bl	800cb08 <xTaskIncrementTick>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d002      	beq.n	800ca8a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ca84:	4b16      	ldr	r3, [pc, #88]	; (800cae0 <xTaskResumeAll+0x130>)
 800ca86:	2201      	movs	r2, #1
 800ca88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	3b01      	subs	r3, #1
 800ca8e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d1f1      	bne.n	800ca7a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800ca96:	4b13      	ldr	r3, [pc, #76]	; (800cae4 <xTaskResumeAll+0x134>)
 800ca98:	2200      	movs	r2, #0
 800ca9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ca9c:	4b10      	ldr	r3, [pc, #64]	; (800cae0 <xTaskResumeAll+0x130>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d009      	beq.n	800cab8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800caa4:	2301      	movs	r3, #1
 800caa6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800caa8:	4b0f      	ldr	r3, [pc, #60]	; (800cae8 <xTaskResumeAll+0x138>)
 800caaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caae:	601a      	str	r2, [r3, #0]
 800cab0:	f3bf 8f4f 	dsb	sy
 800cab4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cab8:	f001 f978 	bl	800ddac <vPortExitCritical>

	return xAlreadyYielded;
 800cabc:	68bb      	ldr	r3, [r7, #8]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3710      	adds	r7, #16
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	20000d6c 	.word	0x20000d6c
 800cacc:	20000d44 	.word	0x20000d44
 800cad0:	20000d04 	.word	0x20000d04
 800cad4:	20000d4c 	.word	0x20000d4c
 800cad8:	20000874 	.word	0x20000874
 800cadc:	20000870 	.word	0x20000870
 800cae0:	20000d58 	.word	0x20000d58
 800cae4:	20000d54 	.word	0x20000d54
 800cae8:	e000ed04 	.word	0xe000ed04

0800caec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800caf2:	4b04      	ldr	r3, [pc, #16]	; (800cb04 <xTaskGetTickCount+0x18>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800caf8:	687b      	ldr	r3, [r7, #4]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	370c      	adds	r7, #12
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bc80      	pop	{r7}
 800cb02:	4770      	bx	lr
 800cb04:	20000d48 	.word	0x20000d48

0800cb08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb12:	4b51      	ldr	r3, [pc, #324]	; (800cc58 <xTaskIncrementTick+0x150>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f040 808e 	bne.w	800cc38 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cb1c:	4b4f      	ldr	r3, [pc, #316]	; (800cc5c <xTaskIncrementTick+0x154>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	3301      	adds	r3, #1
 800cb22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb24:	4a4d      	ldr	r2, [pc, #308]	; (800cc5c <xTaskIncrementTick+0x154>)
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d120      	bne.n	800cb72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cb30:	4b4b      	ldr	r3, [pc, #300]	; (800cc60 <xTaskIncrementTick+0x158>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00a      	beq.n	800cb50 <xTaskIncrementTick+0x48>
	__asm volatile
 800cb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3e:	f383 8811 	msr	BASEPRI, r3
 800cb42:	f3bf 8f6f 	isb	sy
 800cb46:	f3bf 8f4f 	dsb	sy
 800cb4a:	603b      	str	r3, [r7, #0]
}
 800cb4c:	bf00      	nop
 800cb4e:	e7fe      	b.n	800cb4e <xTaskIncrementTick+0x46>
 800cb50:	4b43      	ldr	r3, [pc, #268]	; (800cc60 <xTaskIncrementTick+0x158>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	60fb      	str	r3, [r7, #12]
 800cb56:	4b43      	ldr	r3, [pc, #268]	; (800cc64 <xTaskIncrementTick+0x15c>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4a41      	ldr	r2, [pc, #260]	; (800cc60 <xTaskIncrementTick+0x158>)
 800cb5c:	6013      	str	r3, [r2, #0]
 800cb5e:	4a41      	ldr	r2, [pc, #260]	; (800cc64 <xTaskIncrementTick+0x15c>)
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	6013      	str	r3, [r2, #0]
 800cb64:	4b40      	ldr	r3, [pc, #256]	; (800cc68 <xTaskIncrementTick+0x160>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	4a3f      	ldr	r2, [pc, #252]	; (800cc68 <xTaskIncrementTick+0x160>)
 800cb6c:	6013      	str	r3, [r2, #0]
 800cb6e:	f000 fb0b 	bl	800d188 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cb72:	4b3e      	ldr	r3, [pc, #248]	; (800cc6c <xTaskIncrementTick+0x164>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	693a      	ldr	r2, [r7, #16]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d34e      	bcc.n	800cc1a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb7c:	4b38      	ldr	r3, [pc, #224]	; (800cc60 <xTaskIncrementTick+0x158>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d101      	bne.n	800cb8a <xTaskIncrementTick+0x82>
 800cb86:	2301      	movs	r3, #1
 800cb88:	e000      	b.n	800cb8c <xTaskIncrementTick+0x84>
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d004      	beq.n	800cb9a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb90:	4b36      	ldr	r3, [pc, #216]	; (800cc6c <xTaskIncrementTick+0x164>)
 800cb92:	f04f 32ff 	mov.w	r2, #4294967295
 800cb96:	601a      	str	r2, [r3, #0]
					break;
 800cb98:	e03f      	b.n	800cc1a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800cb9a:	4b31      	ldr	r3, [pc, #196]	; (800cc60 <xTaskIncrementTick+0x158>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cbaa:	693a      	ldr	r2, [r7, #16]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d203      	bcs.n	800cbba <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cbb2:	4a2e      	ldr	r2, [pc, #184]	; (800cc6c <xTaskIncrementTick+0x164>)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6013      	str	r3, [r2, #0]
						break;
 800cbb8:	e02f      	b.n	800cc1a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	3304      	adds	r3, #4
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fe feec 	bl	800b99c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d004      	beq.n	800cbd6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	3318      	adds	r3, #24
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7fe fee3 	bl	800b99c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbda:	4b25      	ldr	r3, [pc, #148]	; (800cc70 <xTaskIncrementTick+0x168>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d903      	bls.n	800cbea <xTaskIncrementTick+0xe2>
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe6:	4a22      	ldr	r2, [pc, #136]	; (800cc70 <xTaskIncrementTick+0x168>)
 800cbe8:	6013      	str	r3, [r2, #0]
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbee:	4613      	mov	r3, r2
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	4413      	add	r3, r2
 800cbf4:	009b      	lsls	r3, r3, #2
 800cbf6:	4a1f      	ldr	r2, [pc, #124]	; (800cc74 <xTaskIncrementTick+0x16c>)
 800cbf8:	441a      	add	r2, r3
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	3304      	adds	r3, #4
 800cbfe:	4619      	mov	r1, r3
 800cc00:	4610      	mov	r0, r2
 800cc02:	f7fe fe70 	bl	800b8e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc0a:	4b1b      	ldr	r3, [pc, #108]	; (800cc78 <xTaskIncrementTick+0x170>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d3b3      	bcc.n	800cb7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cc14:	2301      	movs	r3, #1
 800cc16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc18:	e7b0      	b.n	800cb7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cc1a:	4b17      	ldr	r3, [pc, #92]	; (800cc78 <xTaskIncrementTick+0x170>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc20:	4914      	ldr	r1, [pc, #80]	; (800cc74 <xTaskIncrementTick+0x16c>)
 800cc22:	4613      	mov	r3, r2
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	4413      	add	r3, r2
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	440b      	add	r3, r1
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d907      	bls.n	800cc42 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cc32:	2301      	movs	r3, #1
 800cc34:	617b      	str	r3, [r7, #20]
 800cc36:	e004      	b.n	800cc42 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cc38:	4b10      	ldr	r3, [pc, #64]	; (800cc7c <xTaskIncrementTick+0x174>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	4a0f      	ldr	r2, [pc, #60]	; (800cc7c <xTaskIncrementTick+0x174>)
 800cc40:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cc42:	4b0f      	ldr	r3, [pc, #60]	; (800cc80 <xTaskIncrementTick+0x178>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d001      	beq.n	800cc4e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cc4e:	697b      	ldr	r3, [r7, #20]
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3718      	adds	r7, #24
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}
 800cc58:	20000d6c 	.word	0x20000d6c
 800cc5c:	20000d48 	.word	0x20000d48
 800cc60:	20000cfc 	.word	0x20000cfc
 800cc64:	20000d00 	.word	0x20000d00
 800cc68:	20000d5c 	.word	0x20000d5c
 800cc6c:	20000d64 	.word	0x20000d64
 800cc70:	20000d4c 	.word	0x20000d4c
 800cc74:	20000874 	.word	0x20000874
 800cc78:	20000870 	.word	0x20000870
 800cc7c:	20000d54 	.word	0x20000d54
 800cc80:	20000d58 	.word	0x20000d58

0800cc84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cc84:	b480      	push	{r7}
 800cc86:	b085      	sub	sp, #20
 800cc88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cc8a:	4b27      	ldr	r3, [pc, #156]	; (800cd28 <vTaskSwitchContext+0xa4>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d003      	beq.n	800cc9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cc92:	4b26      	ldr	r3, [pc, #152]	; (800cd2c <vTaskSwitchContext+0xa8>)
 800cc94:	2201      	movs	r2, #1
 800cc96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cc98:	e041      	b.n	800cd1e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800cc9a:	4b24      	ldr	r3, [pc, #144]	; (800cd2c <vTaskSwitchContext+0xa8>)
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800cca0:	4b23      	ldr	r3, [pc, #140]	; (800cd30 <vTaskSwitchContext+0xac>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	60fb      	str	r3, [r7, #12]
 800cca6:	e010      	b.n	800ccca <vTaskSwitchContext+0x46>
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d10a      	bne.n	800ccc4 <vTaskSwitchContext+0x40>
	__asm volatile
 800ccae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb2:	f383 8811 	msr	BASEPRI, r3
 800ccb6:	f3bf 8f6f 	isb	sy
 800ccba:	f3bf 8f4f 	dsb	sy
 800ccbe:	607b      	str	r3, [r7, #4]
}
 800ccc0:	bf00      	nop
 800ccc2:	e7fe      	b.n	800ccc2 <vTaskSwitchContext+0x3e>
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	3b01      	subs	r3, #1
 800ccc8:	60fb      	str	r3, [r7, #12]
 800ccca:	491a      	ldr	r1, [pc, #104]	; (800cd34 <vTaskSwitchContext+0xb0>)
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	4613      	mov	r3, r2
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	4413      	add	r3, r2
 800ccd4:	009b      	lsls	r3, r3, #2
 800ccd6:	440b      	add	r3, r1
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d0e4      	beq.n	800cca8 <vTaskSwitchContext+0x24>
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	4613      	mov	r3, r2
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	4413      	add	r3, r2
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	4a12      	ldr	r2, [pc, #72]	; (800cd34 <vTaskSwitchContext+0xb0>)
 800ccea:	4413      	add	r3, r2
 800ccec:	60bb      	str	r3, [r7, #8]
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	685a      	ldr	r2, [r3, #4]
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	605a      	str	r2, [r3, #4]
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	685a      	ldr	r2, [r3, #4]
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	3308      	adds	r3, #8
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d104      	bne.n	800cd0e <vTaskSwitchContext+0x8a>
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	685a      	ldr	r2, [r3, #4]
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	605a      	str	r2, [r3, #4]
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	68db      	ldr	r3, [r3, #12]
 800cd14:	4a08      	ldr	r2, [pc, #32]	; (800cd38 <vTaskSwitchContext+0xb4>)
 800cd16:	6013      	str	r3, [r2, #0]
 800cd18:	4a05      	ldr	r2, [pc, #20]	; (800cd30 <vTaskSwitchContext+0xac>)
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	6013      	str	r3, [r2, #0]
}
 800cd1e:	bf00      	nop
 800cd20:	3714      	adds	r7, #20
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bc80      	pop	{r7}
 800cd26:	4770      	bx	lr
 800cd28:	20000d6c 	.word	0x20000d6c
 800cd2c:	20000d58 	.word	0x20000d58
 800cd30:	20000d4c 	.word	0x20000d4c
 800cd34:	20000874 	.word	0x20000874
 800cd38:	20000870 	.word	0x20000870

0800cd3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d10a      	bne.n	800cd62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd50:	f383 8811 	msr	BASEPRI, r3
 800cd54:	f3bf 8f6f 	isb	sy
 800cd58:	f3bf 8f4f 	dsb	sy
 800cd5c:	60fb      	str	r3, [r7, #12]
}
 800cd5e:	bf00      	nop
 800cd60:	e7fe      	b.n	800cd60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd62:	4b07      	ldr	r3, [pc, #28]	; (800cd80 <vTaskPlaceOnEventList+0x44>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	3318      	adds	r3, #24
 800cd68:	4619      	mov	r1, r3
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f7fe fdde 	bl	800b92c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd70:	2101      	movs	r1, #1
 800cd72:	6838      	ldr	r0, [r7, #0]
 800cd74:	f000 fb94 	bl	800d4a0 <prvAddCurrentTaskToDelayedList>
}
 800cd78:	bf00      	nop
 800cd7a:	3710      	adds	r7, #16
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	20000870 	.word	0x20000870

0800cd84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b086      	sub	sp, #24
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d10a      	bne.n	800cdac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9a:	f383 8811 	msr	BASEPRI, r3
 800cd9e:	f3bf 8f6f 	isb	sy
 800cda2:	f3bf 8f4f 	dsb	sy
 800cda6:	617b      	str	r3, [r7, #20]
}
 800cda8:	bf00      	nop
 800cdaa:	e7fe      	b.n	800cdaa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cdac:	4b0a      	ldr	r3, [pc, #40]	; (800cdd8 <vTaskPlaceOnEventListRestricted+0x54>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	3318      	adds	r3, #24
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f7fe fd96 	bl	800b8e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d002      	beq.n	800cdc6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cdc0:	f04f 33ff 	mov.w	r3, #4294967295
 800cdc4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cdc6:	6879      	ldr	r1, [r7, #4]
 800cdc8:	68b8      	ldr	r0, [r7, #8]
 800cdca:	f000 fb69 	bl	800d4a0 <prvAddCurrentTaskToDelayedList>
	}
 800cdce:	bf00      	nop
 800cdd0:	3718      	adds	r7, #24
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	20000870 	.word	0x20000870

0800cddc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b086      	sub	sp, #24
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	68db      	ldr	r3, [r3, #12]
 800cdea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d10a      	bne.n	800ce08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf6:	f383 8811 	msr	BASEPRI, r3
 800cdfa:	f3bf 8f6f 	isb	sy
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	60fb      	str	r3, [r7, #12]
}
 800ce04:	bf00      	nop
 800ce06:	e7fe      	b.n	800ce06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	3318      	adds	r3, #24
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f7fe fdc5 	bl	800b99c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce12:	4b1e      	ldr	r3, [pc, #120]	; (800ce8c <xTaskRemoveFromEventList+0xb0>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d11d      	bne.n	800ce56 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	3304      	adds	r3, #4
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7fe fdbc 	bl	800b99c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce28:	4b19      	ldr	r3, [pc, #100]	; (800ce90 <xTaskRemoveFromEventList+0xb4>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d903      	bls.n	800ce38 <xTaskRemoveFromEventList+0x5c>
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce34:	4a16      	ldr	r2, [pc, #88]	; (800ce90 <xTaskRemoveFromEventList+0xb4>)
 800ce36:	6013      	str	r3, [r2, #0]
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce3c:	4613      	mov	r3, r2
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	4413      	add	r3, r2
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	4a13      	ldr	r2, [pc, #76]	; (800ce94 <xTaskRemoveFromEventList+0xb8>)
 800ce46:	441a      	add	r2, r3
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	3304      	adds	r3, #4
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	4610      	mov	r0, r2
 800ce50:	f7fe fd49 	bl	800b8e6 <vListInsertEnd>
 800ce54:	e005      	b.n	800ce62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	3318      	adds	r3, #24
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	480e      	ldr	r0, [pc, #56]	; (800ce98 <xTaskRemoveFromEventList+0xbc>)
 800ce5e:	f7fe fd42 	bl	800b8e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce66:	4b0d      	ldr	r3, [pc, #52]	; (800ce9c <xTaskRemoveFromEventList+0xc0>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d905      	bls.n	800ce7c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ce70:	2301      	movs	r3, #1
 800ce72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ce74:	4b0a      	ldr	r3, [pc, #40]	; (800cea0 <xTaskRemoveFromEventList+0xc4>)
 800ce76:	2201      	movs	r2, #1
 800ce78:	601a      	str	r2, [r3, #0]
 800ce7a:	e001      	b.n	800ce80 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800ce80:	697b      	ldr	r3, [r7, #20]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3718      	adds	r7, #24
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	20000d6c 	.word	0x20000d6c
 800ce90:	20000d4c 	.word	0x20000d4c
 800ce94:	20000874 	.word	0x20000874
 800ce98:	20000d04 	.word	0x20000d04
 800ce9c:	20000870 	.word	0x20000870
 800cea0:	20000d58 	.word	0x20000d58

0800cea4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cea4:	b480      	push	{r7}
 800cea6:	b083      	sub	sp, #12
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ceac:	4b06      	ldr	r3, [pc, #24]	; (800cec8 <vTaskInternalSetTimeOutState+0x24>)
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ceb4:	4b05      	ldr	r3, [pc, #20]	; (800cecc <vTaskInternalSetTimeOutState+0x28>)
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	605a      	str	r2, [r3, #4]
}
 800cebc:	bf00      	nop
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bc80      	pop	{r7}
 800cec4:	4770      	bx	lr
 800cec6:	bf00      	nop
 800cec8:	20000d5c 	.word	0x20000d5c
 800cecc:	20000d48 	.word	0x20000d48

0800ced0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b088      	sub	sp, #32
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d10a      	bne.n	800cef6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee4:	f383 8811 	msr	BASEPRI, r3
 800cee8:	f3bf 8f6f 	isb	sy
 800ceec:	f3bf 8f4f 	dsb	sy
 800cef0:	613b      	str	r3, [r7, #16]
}
 800cef2:	bf00      	nop
 800cef4:	e7fe      	b.n	800cef4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10a      	bne.n	800cf12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf00:	f383 8811 	msr	BASEPRI, r3
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	f3bf 8f4f 	dsb	sy
 800cf0c:	60fb      	str	r3, [r7, #12]
}
 800cf0e:	bf00      	nop
 800cf10:	e7fe      	b.n	800cf10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cf12:	f000 ff1b 	bl	800dd4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cf16:	4b1d      	ldr	r3, [pc, #116]	; (800cf8c <xTaskCheckForTimeOut+0xbc>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	69ba      	ldr	r2, [r7, #24]
 800cf22:	1ad3      	subs	r3, r2, r3
 800cf24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf2e:	d102      	bne.n	800cf36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cf30:	2300      	movs	r3, #0
 800cf32:	61fb      	str	r3, [r7, #28]
 800cf34:	e023      	b.n	800cf7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	4b15      	ldr	r3, [pc, #84]	; (800cf90 <xTaskCheckForTimeOut+0xc0>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d007      	beq.n	800cf52 <xTaskCheckForTimeOut+0x82>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	69ba      	ldr	r2, [r7, #24]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d302      	bcc.n	800cf52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	61fb      	str	r3, [r7, #28]
 800cf50:	e015      	b.n	800cf7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	697a      	ldr	r2, [r7, #20]
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d20b      	bcs.n	800cf74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	1ad2      	subs	r2, r2, r3
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f7ff ff9b 	bl	800cea4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	61fb      	str	r3, [r7, #28]
 800cf72:	e004      	b.n	800cf7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	2200      	movs	r2, #0
 800cf78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cf7e:	f000 ff15 	bl	800ddac <vPortExitCritical>

	return xReturn;
 800cf82:	69fb      	ldr	r3, [r7, #28]
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3720      	adds	r7, #32
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	20000d48 	.word	0x20000d48
 800cf90:	20000d5c 	.word	0x20000d5c

0800cf94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cf94:	b480      	push	{r7}
 800cf96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cf98:	4b03      	ldr	r3, [pc, #12]	; (800cfa8 <vTaskMissedYield+0x14>)
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	601a      	str	r2, [r3, #0]
}
 800cf9e:	bf00      	nop
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bc80      	pop	{r7}
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop
 800cfa8:	20000d58 	.word	0x20000d58

0800cfac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b082      	sub	sp, #8
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cfb4:	f000 f852 	bl	800d05c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cfb8:	4b06      	ldr	r3, [pc, #24]	; (800cfd4 <prvIdleTask+0x28>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d9f9      	bls.n	800cfb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cfc0:	4b05      	ldr	r3, [pc, #20]	; (800cfd8 <prvIdleTask+0x2c>)
 800cfc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfc6:	601a      	str	r2, [r3, #0]
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cfd0:	e7f0      	b.n	800cfb4 <prvIdleTask+0x8>
 800cfd2:	bf00      	nop
 800cfd4:	20000874 	.word	0x20000874
 800cfd8:	e000ed04 	.word	0xe000ed04

0800cfdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	607b      	str	r3, [r7, #4]
 800cfe6:	e00c      	b.n	800d002 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	4613      	mov	r3, r2
 800cfec:	009b      	lsls	r3, r3, #2
 800cfee:	4413      	add	r3, r2
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	4a12      	ldr	r2, [pc, #72]	; (800d03c <prvInitialiseTaskLists+0x60>)
 800cff4:	4413      	add	r3, r2
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7fe fc4a 	bl	800b890 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	3301      	adds	r3, #1
 800d000:	607b      	str	r3, [r7, #4]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2b37      	cmp	r3, #55	; 0x37
 800d006:	d9ef      	bls.n	800cfe8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d008:	480d      	ldr	r0, [pc, #52]	; (800d040 <prvInitialiseTaskLists+0x64>)
 800d00a:	f7fe fc41 	bl	800b890 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d00e:	480d      	ldr	r0, [pc, #52]	; (800d044 <prvInitialiseTaskLists+0x68>)
 800d010:	f7fe fc3e 	bl	800b890 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d014:	480c      	ldr	r0, [pc, #48]	; (800d048 <prvInitialiseTaskLists+0x6c>)
 800d016:	f7fe fc3b 	bl	800b890 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d01a:	480c      	ldr	r0, [pc, #48]	; (800d04c <prvInitialiseTaskLists+0x70>)
 800d01c:	f7fe fc38 	bl	800b890 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d020:	480b      	ldr	r0, [pc, #44]	; (800d050 <prvInitialiseTaskLists+0x74>)
 800d022:	f7fe fc35 	bl	800b890 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d026:	4b0b      	ldr	r3, [pc, #44]	; (800d054 <prvInitialiseTaskLists+0x78>)
 800d028:	4a05      	ldr	r2, [pc, #20]	; (800d040 <prvInitialiseTaskLists+0x64>)
 800d02a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d02c:	4b0a      	ldr	r3, [pc, #40]	; (800d058 <prvInitialiseTaskLists+0x7c>)
 800d02e:	4a05      	ldr	r2, [pc, #20]	; (800d044 <prvInitialiseTaskLists+0x68>)
 800d030:	601a      	str	r2, [r3, #0]
}
 800d032:	bf00      	nop
 800d034:	3708      	adds	r7, #8
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	20000874 	.word	0x20000874
 800d040:	20000cd4 	.word	0x20000cd4
 800d044:	20000ce8 	.word	0x20000ce8
 800d048:	20000d04 	.word	0x20000d04
 800d04c:	20000d18 	.word	0x20000d18
 800d050:	20000d30 	.word	0x20000d30
 800d054:	20000cfc 	.word	0x20000cfc
 800d058:	20000d00 	.word	0x20000d00

0800d05c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d062:	e019      	b.n	800d098 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d064:	f000 fe72 	bl	800dd4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d068:	4b10      	ldr	r3, [pc, #64]	; (800d0ac <prvCheckTasksWaitingTermination+0x50>)
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	68db      	ldr	r3, [r3, #12]
 800d06e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	3304      	adds	r3, #4
 800d074:	4618      	mov	r0, r3
 800d076:	f7fe fc91 	bl	800b99c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d07a:	4b0d      	ldr	r3, [pc, #52]	; (800d0b0 <prvCheckTasksWaitingTermination+0x54>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	3b01      	subs	r3, #1
 800d080:	4a0b      	ldr	r2, [pc, #44]	; (800d0b0 <prvCheckTasksWaitingTermination+0x54>)
 800d082:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d084:	4b0b      	ldr	r3, [pc, #44]	; (800d0b4 <prvCheckTasksWaitingTermination+0x58>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	3b01      	subs	r3, #1
 800d08a:	4a0a      	ldr	r2, [pc, #40]	; (800d0b4 <prvCheckTasksWaitingTermination+0x58>)
 800d08c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d08e:	f000 fe8d 	bl	800ddac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 f848 	bl	800d128 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d098:	4b06      	ldr	r3, [pc, #24]	; (800d0b4 <prvCheckTasksWaitingTermination+0x58>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d1e1      	bne.n	800d064 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d0a0:	bf00      	nop
 800d0a2:	bf00      	nop
 800d0a4:	3708      	adds	r7, #8
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	20000d18 	.word	0x20000d18
 800d0b0:	20000d44 	.word	0x20000d44
 800d0b4:	20000d2c 	.word	0x20000d2c

0800d0b8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b085      	sub	sp, #20
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d0c4:	e005      	b.n	800d0d2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	607b      	str	r3, [r7, #4]
			ulCount++;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	2ba5      	cmp	r3, #165	; 0xa5
 800d0d8:	d0f5      	beq.n	800d0c6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	089b      	lsrs	r3, r3, #2
 800d0de:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	b29b      	uxth	r3, r3
	}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3714      	adds	r7, #20
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bc80      	pop	{r7}
 800d0ec:	4770      	bx	lr
	...

0800d0f0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b086      	sub	sp, #24
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d102      	bne.n	800d104 <uxTaskGetStackHighWaterMark+0x14>
 800d0fe:	4b09      	ldr	r3, [pc, #36]	; (800d124 <uxTaskGetStackHighWaterMark+0x34>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	e000      	b.n	800d106 <uxTaskGetStackHighWaterMark+0x16>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d10c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800d10e:	6938      	ldr	r0, [r7, #16]
 800d110:	f7ff ffd2 	bl	800d0b8 <prvTaskCheckFreeStackSpace>
 800d114:	4603      	mov	r3, r0
 800d116:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800d118:	68fb      	ldr	r3, [r7, #12]
	}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3718      	adds	r7, #24
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	20000870 	.word	0x20000870

0800d128 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d136:	2b00      	cmp	r3, #0
 800d138:	d108      	bne.n	800d14c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d13e:	4618      	mov	r0, r3
 800d140:	f000 ffc8 	bl	800e0d4 <vPortFree>
				vPortFree( pxTCB );
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 ffc5 	bl	800e0d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d14a:	e018      	b.n	800d17e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d152:	2b01      	cmp	r3, #1
 800d154:	d103      	bne.n	800d15e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 ffbc 	bl	800e0d4 <vPortFree>
	}
 800d15c:	e00f      	b.n	800d17e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d164:	2b02      	cmp	r3, #2
 800d166:	d00a      	beq.n	800d17e <prvDeleteTCB+0x56>
	__asm volatile
 800d168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d16c:	f383 8811 	msr	BASEPRI, r3
 800d170:	f3bf 8f6f 	isb	sy
 800d174:	f3bf 8f4f 	dsb	sy
 800d178:	60fb      	str	r3, [r7, #12]
}
 800d17a:	bf00      	nop
 800d17c:	e7fe      	b.n	800d17c <prvDeleteTCB+0x54>
	}
 800d17e:	bf00      	nop
 800d180:	3710      	adds	r7, #16
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
	...

0800d188 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d188:	b480      	push	{r7}
 800d18a:	b083      	sub	sp, #12
 800d18c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d18e:	4b0e      	ldr	r3, [pc, #56]	; (800d1c8 <prvResetNextTaskUnblockTime+0x40>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d101      	bne.n	800d19c <prvResetNextTaskUnblockTime+0x14>
 800d198:	2301      	movs	r3, #1
 800d19a:	e000      	b.n	800d19e <prvResetNextTaskUnblockTime+0x16>
 800d19c:	2300      	movs	r3, #0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d004      	beq.n	800d1ac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1a2:	4b0a      	ldr	r3, [pc, #40]	; (800d1cc <prvResetNextTaskUnblockTime+0x44>)
 800d1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1a8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d1aa:	e008      	b.n	800d1be <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d1ac:	4b06      	ldr	r3, [pc, #24]	; (800d1c8 <prvResetNextTaskUnblockTime+0x40>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	68db      	ldr	r3, [r3, #12]
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	4a04      	ldr	r2, [pc, #16]	; (800d1cc <prvResetNextTaskUnblockTime+0x44>)
 800d1bc:	6013      	str	r3, [r2, #0]
}
 800d1be:	bf00      	nop
 800d1c0:	370c      	adds	r7, #12
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bc80      	pop	{r7}
 800d1c6:	4770      	bx	lr
 800d1c8:	20000cfc 	.word	0x20000cfc
 800d1cc:	20000d64 	.word	0x20000d64

0800d1d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d1d6:	4b0b      	ldr	r3, [pc, #44]	; (800d204 <xTaskGetSchedulerState+0x34>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d102      	bne.n	800d1e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	607b      	str	r3, [r7, #4]
 800d1e2:	e008      	b.n	800d1f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1e4:	4b08      	ldr	r3, [pc, #32]	; (800d208 <xTaskGetSchedulerState+0x38>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d102      	bne.n	800d1f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d1ec:	2302      	movs	r3, #2
 800d1ee:	607b      	str	r3, [r7, #4]
 800d1f0:	e001      	b.n	800d1f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d1f6:	687b      	ldr	r3, [r7, #4]
	}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bc80      	pop	{r7}
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	20000d50 	.word	0x20000d50
 800d208:	20000d6c 	.word	0x20000d6c

0800d20c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b086      	sub	sp, #24
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d218:	2300      	movs	r3, #0
 800d21a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d056      	beq.n	800d2d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d222:	4b2e      	ldr	r3, [pc, #184]	; (800d2dc <xTaskPriorityDisinherit+0xd0>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	693a      	ldr	r2, [r7, #16]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d00a      	beq.n	800d242 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d230:	f383 8811 	msr	BASEPRI, r3
 800d234:	f3bf 8f6f 	isb	sy
 800d238:	f3bf 8f4f 	dsb	sy
 800d23c:	60fb      	str	r3, [r7, #12]
}
 800d23e:	bf00      	nop
 800d240:	e7fe      	b.n	800d240 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d246:	2b00      	cmp	r3, #0
 800d248:	d10a      	bne.n	800d260 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24e:	f383 8811 	msr	BASEPRI, r3
 800d252:	f3bf 8f6f 	isb	sy
 800d256:	f3bf 8f4f 	dsb	sy
 800d25a:	60bb      	str	r3, [r7, #8]
}
 800d25c:	bf00      	nop
 800d25e:	e7fe      	b.n	800d25e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d264:	1e5a      	subs	r2, r3, #1
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d272:	429a      	cmp	r2, r3
 800d274:	d02c      	beq.n	800d2d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d128      	bne.n	800d2d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	3304      	adds	r3, #4
 800d282:	4618      	mov	r0, r3
 800d284:	f7fe fb8a 	bl	800b99c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d294:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2a0:	4b0f      	ldr	r3, [pc, #60]	; (800d2e0 <xTaskPriorityDisinherit+0xd4>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d903      	bls.n	800d2b0 <xTaskPriorityDisinherit+0xa4>
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ac:	4a0c      	ldr	r2, [pc, #48]	; (800d2e0 <xTaskPriorityDisinherit+0xd4>)
 800d2ae:	6013      	str	r3, [r2, #0]
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2b4:	4613      	mov	r3, r2
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	4413      	add	r3, r2
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	4a09      	ldr	r2, [pc, #36]	; (800d2e4 <xTaskPriorityDisinherit+0xd8>)
 800d2be:	441a      	add	r2, r3
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	3304      	adds	r3, #4
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	4610      	mov	r0, r2
 800d2c8:	f7fe fb0d 	bl	800b8e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d2d0:	697b      	ldr	r3, [r7, #20]
	}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3718      	adds	r7, #24
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	20000870 	.word	0x20000870
 800d2e0:	20000d4c 	.word	0x20000d4c
 800d2e4:	20000874 	.word	0x20000874

0800d2e8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800d2f2:	f000 fd2b 	bl	800dd4c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800d2f6:	4b1e      	ldr	r3, [pc, #120]	; (800d370 <ulTaskNotifyTake+0x88>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d113      	bne.n	800d328 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d300:	4b1b      	ldr	r3, [pc, #108]	; (800d370 <ulTaskNotifyTake+0x88>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	2201      	movs	r2, #1
 800d306:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d00b      	beq.n	800d328 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d310:	2101      	movs	r1, #1
 800d312:	6838      	ldr	r0, [r7, #0]
 800d314:	f000 f8c4 	bl	800d4a0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d318:	4b16      	ldr	r3, [pc, #88]	; (800d374 <ulTaskNotifyTake+0x8c>)
 800d31a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d31e:	601a      	str	r2, [r3, #0]
 800d320:	f3bf 8f4f 	dsb	sy
 800d324:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d328:	f000 fd40 	bl	800ddac <vPortExitCritical>

		taskENTER_CRITICAL();
 800d32c:	f000 fd0e 	bl	800dd4c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d330:	4b0f      	ldr	r3, [pc, #60]	; (800d370 <ulTaskNotifyTake+0x88>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d336:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00c      	beq.n	800d358 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d004      	beq.n	800d34e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800d344:	4b0a      	ldr	r3, [pc, #40]	; (800d370 <ulTaskNotifyTake+0x88>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2200      	movs	r2, #0
 800d34a:	655a      	str	r2, [r3, #84]	; 0x54
 800d34c:	e004      	b.n	800d358 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800d34e:	4b08      	ldr	r3, [pc, #32]	; (800d370 <ulTaskNotifyTake+0x88>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	68fa      	ldr	r2, [r7, #12]
 800d354:	3a01      	subs	r2, #1
 800d356:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d358:	4b05      	ldr	r3, [pc, #20]	; (800d370 <ulTaskNotifyTake+0x88>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2200      	movs	r2, #0
 800d35e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800d362:	f000 fd23 	bl	800ddac <vPortExitCritical>

		return ulReturn;
 800d366:	68fb      	ldr	r3, [r7, #12]
	}
 800d368:	4618      	mov	r0, r3
 800d36a:	3710      	adds	r7, #16
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	20000870 	.word	0x20000870
 800d374:	e000ed04 	.word	0xe000ed04

0800d378 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b08a      	sub	sp, #40	; 0x28
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d10a      	bne.n	800d39e <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800d388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38c:	f383 8811 	msr	BASEPRI, r3
 800d390:	f3bf 8f6f 	isb	sy
 800d394:	f3bf 8f4f 	dsb	sy
 800d398:	61bb      	str	r3, [r7, #24]
}
 800d39a:	bf00      	nop
 800d39c:	e7fe      	b.n	800d39c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d39e:	f000 fd97 	bl	800ded0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800d3a6:	f3ef 8211 	mrs	r2, BASEPRI
 800d3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ae:	f383 8811 	msr	BASEPRI, r3
 800d3b2:	f3bf 8f6f 	isb	sy
 800d3b6:	f3bf 8f4f 	dsb	sy
 800d3ba:	617a      	str	r2, [r7, #20]
 800d3bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d3be:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3c0:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d3c8:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3cc:	2202      	movs	r2, #2
 800d3ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800d3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3d6:	1c5a      	adds	r2, r3, #1
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3da:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d3dc:	7ffb      	ldrb	r3, [r7, #31]
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	d147      	bne.n	800d472 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d00a      	beq.n	800d400 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 800d3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ee:	f383 8811 	msr	BASEPRI, r3
 800d3f2:	f3bf 8f6f 	isb	sy
 800d3f6:	f3bf 8f4f 	dsb	sy
 800d3fa:	60fb      	str	r3, [r7, #12]
}
 800d3fc:	bf00      	nop
 800d3fe:	e7fe      	b.n	800d3fe <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d400:	4b21      	ldr	r3, [pc, #132]	; (800d488 <vTaskNotifyGiveFromISR+0x110>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d11d      	bne.n	800d444 <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40a:	3304      	adds	r3, #4
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7fe fac5 	bl	800b99c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d416:	4b1d      	ldr	r3, [pc, #116]	; (800d48c <vTaskNotifyGiveFromISR+0x114>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d903      	bls.n	800d426 <vTaskNotifyGiveFromISR+0xae>
 800d41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d422:	4a1a      	ldr	r2, [pc, #104]	; (800d48c <vTaskNotifyGiveFromISR+0x114>)
 800d424:	6013      	str	r3, [r2, #0]
 800d426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d42a:	4613      	mov	r3, r2
 800d42c:	009b      	lsls	r3, r3, #2
 800d42e:	4413      	add	r3, r2
 800d430:	009b      	lsls	r3, r3, #2
 800d432:	4a17      	ldr	r2, [pc, #92]	; (800d490 <vTaskNotifyGiveFromISR+0x118>)
 800d434:	441a      	add	r2, r3
 800d436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d438:	3304      	adds	r3, #4
 800d43a:	4619      	mov	r1, r3
 800d43c:	4610      	mov	r0, r2
 800d43e:	f7fe fa52 	bl	800b8e6 <vListInsertEnd>
 800d442:	e005      	b.n	800d450 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d446:	3318      	adds	r3, #24
 800d448:	4619      	mov	r1, r3
 800d44a:	4812      	ldr	r0, [pc, #72]	; (800d494 <vTaskNotifyGiveFromISR+0x11c>)
 800d44c:	f7fe fa4b 	bl	800b8e6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d454:	4b10      	ldr	r3, [pc, #64]	; (800d498 <vTaskNotifyGiveFromISR+0x120>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d909      	bls.n	800d472 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d003      	beq.n	800d46c <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	2201      	movs	r2, #1
 800d468:	601a      	str	r2, [r3, #0]
 800d46a:	e002      	b.n	800d472 <vTaskNotifyGiveFromISR+0xfa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800d46c:	4b0b      	ldr	r3, [pc, #44]	; (800d49c <vTaskNotifyGiveFromISR+0x124>)
 800d46e:	2201      	movs	r2, #1
 800d470:	601a      	str	r2, [r3, #0]
 800d472:	6a3b      	ldr	r3, [r7, #32]
 800d474:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	f383 8811 	msr	BASEPRI, r3
}
 800d47c:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800d47e:	bf00      	nop
 800d480:	3728      	adds	r7, #40	; 0x28
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	20000d6c 	.word	0x20000d6c
 800d48c:	20000d4c 	.word	0x20000d4c
 800d490:	20000874 	.word	0x20000874
 800d494:	20000d04 	.word	0x20000d04
 800d498:	20000870 	.word	0x20000870
 800d49c:	20000d58 	.word	0x20000d58

0800d4a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d4aa:	4b21      	ldr	r3, [pc, #132]	; (800d530 <prvAddCurrentTaskToDelayedList+0x90>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4b0:	4b20      	ldr	r3, [pc, #128]	; (800d534 <prvAddCurrentTaskToDelayedList+0x94>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	3304      	adds	r3, #4
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7fe fa70 	bl	800b99c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4c2:	d10a      	bne.n	800d4da <prvAddCurrentTaskToDelayedList+0x3a>
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d007      	beq.n	800d4da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4ca:	4b1a      	ldr	r3, [pc, #104]	; (800d534 <prvAddCurrentTaskToDelayedList+0x94>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	3304      	adds	r3, #4
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	4819      	ldr	r0, [pc, #100]	; (800d538 <prvAddCurrentTaskToDelayedList+0x98>)
 800d4d4:	f7fe fa07 	bl	800b8e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d4d8:	e026      	b.n	800d528 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d4da:	68fa      	ldr	r2, [r7, #12]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	4413      	add	r3, r2
 800d4e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d4e2:	4b14      	ldr	r3, [pc, #80]	; (800d534 <prvAddCurrentTaskToDelayedList+0x94>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	68ba      	ldr	r2, [r7, #8]
 800d4e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d4ea:	68ba      	ldr	r2, [r7, #8]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d209      	bcs.n	800d506 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4f2:	4b12      	ldr	r3, [pc, #72]	; (800d53c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d4f4:	681a      	ldr	r2, [r3, #0]
 800d4f6:	4b0f      	ldr	r3, [pc, #60]	; (800d534 <prvAddCurrentTaskToDelayedList+0x94>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	3304      	adds	r3, #4
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	4610      	mov	r0, r2
 800d500:	f7fe fa14 	bl	800b92c <vListInsert>
}
 800d504:	e010      	b.n	800d528 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d506:	4b0e      	ldr	r3, [pc, #56]	; (800d540 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	4b0a      	ldr	r3, [pc, #40]	; (800d534 <prvAddCurrentTaskToDelayedList+0x94>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	3304      	adds	r3, #4
 800d510:	4619      	mov	r1, r3
 800d512:	4610      	mov	r0, r2
 800d514:	f7fe fa0a 	bl	800b92c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d518:	4b0a      	ldr	r3, [pc, #40]	; (800d544 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	68ba      	ldr	r2, [r7, #8]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d202      	bcs.n	800d528 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d522:	4a08      	ldr	r2, [pc, #32]	; (800d544 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	6013      	str	r3, [r2, #0]
}
 800d528:	bf00      	nop
 800d52a:	3710      	adds	r7, #16
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	20000d48 	.word	0x20000d48
 800d534:	20000870 	.word	0x20000870
 800d538:	20000d30 	.word	0x20000d30
 800d53c:	20000d00 	.word	0x20000d00
 800d540:	20000cfc 	.word	0x20000cfc
 800d544:	20000d64 	.word	0x20000d64

0800d548 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b08a      	sub	sp, #40	; 0x28
 800d54c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d54e:	2300      	movs	r3, #0
 800d550:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d552:	f000 facb 	bl	800daec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d556:	4b1c      	ldr	r3, [pc, #112]	; (800d5c8 <xTimerCreateTimerTask+0x80>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d021      	beq.n	800d5a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d55e:	2300      	movs	r3, #0
 800d560:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d562:	2300      	movs	r3, #0
 800d564:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d566:	1d3a      	adds	r2, r7, #4
 800d568:	f107 0108 	add.w	r1, r7, #8
 800d56c:	f107 030c 	add.w	r3, r7, #12
 800d570:	4618      	mov	r0, r3
 800d572:	f7fe f973 	bl	800b85c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d576:	6879      	ldr	r1, [r7, #4]
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	68fa      	ldr	r2, [r7, #12]
 800d57c:	9202      	str	r2, [sp, #8]
 800d57e:	9301      	str	r3, [sp, #4]
 800d580:	2302      	movs	r3, #2
 800d582:	9300      	str	r3, [sp, #0]
 800d584:	2300      	movs	r3, #0
 800d586:	460a      	mov	r2, r1
 800d588:	4910      	ldr	r1, [pc, #64]	; (800d5cc <xTimerCreateTimerTask+0x84>)
 800d58a:	4811      	ldr	r0, [pc, #68]	; (800d5d0 <xTimerCreateTimerTask+0x88>)
 800d58c:	f7fe ff52 	bl	800c434 <xTaskCreateStatic>
 800d590:	4603      	mov	r3, r0
 800d592:	4a10      	ldr	r2, [pc, #64]	; (800d5d4 <xTimerCreateTimerTask+0x8c>)
 800d594:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d596:	4b0f      	ldr	r3, [pc, #60]	; (800d5d4 <xTimerCreateTimerTask+0x8c>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d001      	beq.n	800d5a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d10a      	bne.n	800d5be <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ac:	f383 8811 	msr	BASEPRI, r3
 800d5b0:	f3bf 8f6f 	isb	sy
 800d5b4:	f3bf 8f4f 	dsb	sy
 800d5b8:	613b      	str	r3, [r7, #16]
}
 800d5ba:	bf00      	nop
 800d5bc:	e7fe      	b.n	800d5bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d5be:	697b      	ldr	r3, [r7, #20]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3718      	adds	r7, #24
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	20000da0 	.word	0x20000da0
 800d5cc:	0800ef8c 	.word	0x0800ef8c
 800d5d0:	0800d6f5 	.word	0x0800d6f5
 800d5d4:	20000da4 	.word	0x20000da4

0800d5d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b08a      	sub	sp, #40	; 0x28
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	60f8      	str	r0, [r7, #12]
 800d5e0:	60b9      	str	r1, [r7, #8]
 800d5e2:	607a      	str	r2, [r7, #4]
 800d5e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d10a      	bne.n	800d606 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f4:	f383 8811 	msr	BASEPRI, r3
 800d5f8:	f3bf 8f6f 	isb	sy
 800d5fc:	f3bf 8f4f 	dsb	sy
 800d600:	623b      	str	r3, [r7, #32]
}
 800d602:	bf00      	nop
 800d604:	e7fe      	b.n	800d604 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d606:	4b1a      	ldr	r3, [pc, #104]	; (800d670 <xTimerGenericCommand+0x98>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d02a      	beq.n	800d664 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	2b05      	cmp	r3, #5
 800d61e:	dc18      	bgt.n	800d652 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d620:	f7ff fdd6 	bl	800d1d0 <xTaskGetSchedulerState>
 800d624:	4603      	mov	r3, r0
 800d626:	2b02      	cmp	r3, #2
 800d628:	d109      	bne.n	800d63e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d62a:	4b11      	ldr	r3, [pc, #68]	; (800d670 <xTimerGenericCommand+0x98>)
 800d62c:	6818      	ldr	r0, [r3, #0]
 800d62e:	f107 0110 	add.w	r1, r7, #16
 800d632:	2300      	movs	r3, #0
 800d634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d636:	f7fe fb1b 	bl	800bc70 <xQueueGenericSend>
 800d63a:	6278      	str	r0, [r7, #36]	; 0x24
 800d63c:	e012      	b.n	800d664 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d63e:	4b0c      	ldr	r3, [pc, #48]	; (800d670 <xTimerGenericCommand+0x98>)
 800d640:	6818      	ldr	r0, [r3, #0]
 800d642:	f107 0110 	add.w	r1, r7, #16
 800d646:	2300      	movs	r3, #0
 800d648:	2200      	movs	r2, #0
 800d64a:	f7fe fb11 	bl	800bc70 <xQueueGenericSend>
 800d64e:	6278      	str	r0, [r7, #36]	; 0x24
 800d650:	e008      	b.n	800d664 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d652:	4b07      	ldr	r3, [pc, #28]	; (800d670 <xTimerGenericCommand+0x98>)
 800d654:	6818      	ldr	r0, [r3, #0]
 800d656:	f107 0110 	add.w	r1, r7, #16
 800d65a:	2300      	movs	r3, #0
 800d65c:	683a      	ldr	r2, [r7, #0]
 800d65e:	f7fe fc05 	bl	800be6c <xQueueGenericSendFromISR>
 800d662:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d666:	4618      	mov	r0, r3
 800d668:	3728      	adds	r7, #40	; 0x28
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	20000da0 	.word	0x20000da0

0800d674 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b088      	sub	sp, #32
 800d678:	af02      	add	r7, sp, #8
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d67e:	4b1c      	ldr	r3, [pc, #112]	; (800d6f0 <prvProcessExpiredTimer+0x7c>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	68db      	ldr	r3, [r3, #12]
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	3304      	adds	r3, #4
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7fe f985 	bl	800b99c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	69db      	ldr	r3, [r3, #28]
 800d696:	2b01      	cmp	r3, #1
 800d698:	d122      	bne.n	800d6e0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	699a      	ldr	r2, [r3, #24]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	18d1      	adds	r1, r2, r3
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	683a      	ldr	r2, [r7, #0]
 800d6a6:	6978      	ldr	r0, [r7, #20]
 800d6a8:	f000 f8c8 	bl	800d83c <prvInsertTimerInActiveList>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d016      	beq.n	800d6e0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	9300      	str	r3, [sp, #0]
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	2100      	movs	r1, #0
 800d6bc:	6978      	ldr	r0, [r7, #20]
 800d6be:	f7ff ff8b 	bl	800d5d8 <xTimerGenericCommand>
 800d6c2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d10a      	bne.n	800d6e0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800d6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ce:	f383 8811 	msr	BASEPRI, r3
 800d6d2:	f3bf 8f6f 	isb	sy
 800d6d6:	f3bf 8f4f 	dsb	sy
 800d6da:	60fb      	str	r3, [r7, #12]
}
 800d6dc:	bf00      	nop
 800d6de:	e7fe      	b.n	800d6de <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e4:	6978      	ldr	r0, [r7, #20]
 800d6e6:	4798      	blx	r3
}
 800d6e8:	bf00      	nop
 800d6ea:	3718      	adds	r7, #24
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	20000d98 	.word	0x20000d98

0800d6f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d6fc:	f107 0308 	add.w	r3, r7, #8
 800d700:	4618      	mov	r0, r3
 800d702:	f000 f857 	bl	800d7b4 <prvGetNextExpireTime>
 800d706:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	4619      	mov	r1, r3
 800d70c:	68f8      	ldr	r0, [r7, #12]
 800d70e:	f000 f803 	bl	800d718 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d712:	f000 f8d5 	bl	800d8c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d716:	e7f1      	b.n	800d6fc <prvTimerTask+0x8>

0800d718 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d722:	f7ff f937 	bl	800c994 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d726:	f107 0308 	add.w	r3, r7, #8
 800d72a:	4618      	mov	r0, r3
 800d72c:	f000 f866 	bl	800d7fc <prvSampleTimeNow>
 800d730:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d130      	bne.n	800d79a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d10a      	bne.n	800d754 <prvProcessTimerOrBlockTask+0x3c>
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	429a      	cmp	r2, r3
 800d744:	d806      	bhi.n	800d754 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d746:	f7ff f933 	bl	800c9b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d74a:	68f9      	ldr	r1, [r7, #12]
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f7ff ff91 	bl	800d674 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d752:	e024      	b.n	800d79e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d008      	beq.n	800d76c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d75a:	4b13      	ldr	r3, [pc, #76]	; (800d7a8 <prvProcessTimerOrBlockTask+0x90>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	bf0c      	ite	eq
 800d764:	2301      	moveq	r3, #1
 800d766:	2300      	movne	r3, #0
 800d768:	b2db      	uxtb	r3, r3
 800d76a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d76c:	4b0f      	ldr	r3, [pc, #60]	; (800d7ac <prvProcessTimerOrBlockTask+0x94>)
 800d76e:	6818      	ldr	r0, [r3, #0]
 800d770:	687a      	ldr	r2, [r7, #4]
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	1ad3      	subs	r3, r2, r3
 800d776:	683a      	ldr	r2, [r7, #0]
 800d778:	4619      	mov	r1, r3
 800d77a:	f7fe fe27 	bl	800c3cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d77e:	f7ff f917 	bl	800c9b0 <xTaskResumeAll>
 800d782:	4603      	mov	r3, r0
 800d784:	2b00      	cmp	r3, #0
 800d786:	d10a      	bne.n	800d79e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d788:	4b09      	ldr	r3, [pc, #36]	; (800d7b0 <prvProcessTimerOrBlockTask+0x98>)
 800d78a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d78e:	601a      	str	r2, [r3, #0]
 800d790:	f3bf 8f4f 	dsb	sy
 800d794:	f3bf 8f6f 	isb	sy
}
 800d798:	e001      	b.n	800d79e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d79a:	f7ff f909 	bl	800c9b0 <xTaskResumeAll>
}
 800d79e:	bf00      	nop
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	20000d9c 	.word	0x20000d9c
 800d7ac:	20000da0 	.word	0x20000da0
 800d7b0:	e000ed04 	.word	0xe000ed04

0800d7b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b085      	sub	sp, #20
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d7bc:	4b0e      	ldr	r3, [pc, #56]	; (800d7f8 <prvGetNextExpireTime+0x44>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	bf0c      	ite	eq
 800d7c6:	2301      	moveq	r3, #1
 800d7c8:	2300      	movne	r3, #0
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d105      	bne.n	800d7e6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d7da:	4b07      	ldr	r3, [pc, #28]	; (800d7f8 <prvGetNextExpireTime+0x44>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	68db      	ldr	r3, [r3, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	60fb      	str	r3, [r7, #12]
 800d7e4:	e001      	b.n	800d7ea <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3714      	adds	r7, #20
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bc80      	pop	{r7}
 800d7f4:	4770      	bx	lr
 800d7f6:	bf00      	nop
 800d7f8:	20000d98 	.word	0x20000d98

0800d7fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d804:	f7ff f972 	bl	800caec <xTaskGetTickCount>
 800d808:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d80a:	4b0b      	ldr	r3, [pc, #44]	; (800d838 <prvSampleTimeNow+0x3c>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	68fa      	ldr	r2, [r7, #12]
 800d810:	429a      	cmp	r2, r3
 800d812:	d205      	bcs.n	800d820 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d814:	f000 f908 	bl	800da28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2201      	movs	r2, #1
 800d81c:	601a      	str	r2, [r3, #0]
 800d81e:	e002      	b.n	800d826 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2200      	movs	r2, #0
 800d824:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d826:	4a04      	ldr	r2, [pc, #16]	; (800d838 <prvSampleTimeNow+0x3c>)
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d82c:	68fb      	ldr	r3, [r7, #12]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	20000da8 	.word	0x20000da8

0800d83c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b086      	sub	sp, #24
 800d840:	af00      	add	r7, sp, #0
 800d842:	60f8      	str	r0, [r7, #12]
 800d844:	60b9      	str	r1, [r7, #8]
 800d846:	607a      	str	r2, [r7, #4]
 800d848:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d84a:	2300      	movs	r3, #0
 800d84c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	68ba      	ldr	r2, [r7, #8]
 800d852:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	68fa      	ldr	r2, [r7, #12]
 800d858:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d85a:	68ba      	ldr	r2, [r7, #8]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d812      	bhi.n	800d888 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d862:	687a      	ldr	r2, [r7, #4]
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	1ad2      	subs	r2, r2, r3
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	699b      	ldr	r3, [r3, #24]
 800d86c:	429a      	cmp	r2, r3
 800d86e:	d302      	bcc.n	800d876 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d870:	2301      	movs	r3, #1
 800d872:	617b      	str	r3, [r7, #20]
 800d874:	e01b      	b.n	800d8ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d876:	4b10      	ldr	r3, [pc, #64]	; (800d8b8 <prvInsertTimerInActiveList+0x7c>)
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	3304      	adds	r3, #4
 800d87e:	4619      	mov	r1, r3
 800d880:	4610      	mov	r0, r2
 800d882:	f7fe f853 	bl	800b92c <vListInsert>
 800d886:	e012      	b.n	800d8ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d888:	687a      	ldr	r2, [r7, #4]
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d206      	bcs.n	800d89e <prvInsertTimerInActiveList+0x62>
 800d890:	68ba      	ldr	r2, [r7, #8]
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	429a      	cmp	r2, r3
 800d896:	d302      	bcc.n	800d89e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d898:	2301      	movs	r3, #1
 800d89a:	617b      	str	r3, [r7, #20]
 800d89c:	e007      	b.n	800d8ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d89e:	4b07      	ldr	r3, [pc, #28]	; (800d8bc <prvInsertTimerInActiveList+0x80>)
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	3304      	adds	r3, #4
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	4610      	mov	r0, r2
 800d8aa:	f7fe f83f 	bl	800b92c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d8ae:	697b      	ldr	r3, [r7, #20]
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3718      	adds	r7, #24
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	20000d9c 	.word	0x20000d9c
 800d8bc:	20000d98 	.word	0x20000d98

0800d8c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b08e      	sub	sp, #56	; 0x38
 800d8c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d8c6:	e09d      	b.n	800da04 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	da18      	bge.n	800d900 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d8ce:	1d3b      	adds	r3, r7, #4
 800d8d0:	3304      	adds	r3, #4
 800d8d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d10a      	bne.n	800d8f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8de:	f383 8811 	msr	BASEPRI, r3
 800d8e2:	f3bf 8f6f 	isb	sy
 800d8e6:	f3bf 8f4f 	dsb	sy
 800d8ea:	61fb      	str	r3, [r7, #28]
}
 800d8ec:	bf00      	nop
 800d8ee:	e7fe      	b.n	800d8ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8f6:	6850      	ldr	r0, [r2, #4]
 800d8f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8fa:	6892      	ldr	r2, [r2, #8]
 800d8fc:	4611      	mov	r1, r2
 800d8fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2b00      	cmp	r3, #0
 800d904:	db7d      	blt.n	800da02 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90c:	695b      	ldr	r3, [r3, #20]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d004      	beq.n	800d91c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d914:	3304      	adds	r3, #4
 800d916:	4618      	mov	r0, r3
 800d918:	f7fe f840 	bl	800b99c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d91c:	463b      	mov	r3, r7
 800d91e:	4618      	mov	r0, r3
 800d920:	f7ff ff6c 	bl	800d7fc <prvSampleTimeNow>
 800d924:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2b09      	cmp	r3, #9
 800d92a:	d86b      	bhi.n	800da04 <prvProcessReceivedCommands+0x144>
 800d92c:	a201      	add	r2, pc, #4	; (adr r2, 800d934 <prvProcessReceivedCommands+0x74>)
 800d92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d932:	bf00      	nop
 800d934:	0800d95d 	.word	0x0800d95d
 800d938:	0800d95d 	.word	0x0800d95d
 800d93c:	0800d95d 	.word	0x0800d95d
 800d940:	0800da05 	.word	0x0800da05
 800d944:	0800d9b9 	.word	0x0800d9b9
 800d948:	0800d9f1 	.word	0x0800d9f1
 800d94c:	0800d95d 	.word	0x0800d95d
 800d950:	0800d95d 	.word	0x0800d95d
 800d954:	0800da05 	.word	0x0800da05
 800d958:	0800d9b9 	.word	0x0800d9b9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d95c:	68ba      	ldr	r2, [r7, #8]
 800d95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d960:	699b      	ldr	r3, [r3, #24]
 800d962:	18d1      	adds	r1, r2, r3
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d96a:	f7ff ff67 	bl	800d83c <prvInsertTimerInActiveList>
 800d96e:	4603      	mov	r3, r0
 800d970:	2b00      	cmp	r3, #0
 800d972:	d047      	beq.n	800da04 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d97a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d97e:	69db      	ldr	r3, [r3, #28]
 800d980:	2b01      	cmp	r3, #1
 800d982:	d13f      	bne.n	800da04 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d984:	68ba      	ldr	r2, [r7, #8]
 800d986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d988:	699b      	ldr	r3, [r3, #24]
 800d98a:	441a      	add	r2, r3
 800d98c:	2300      	movs	r3, #0
 800d98e:	9300      	str	r3, [sp, #0]
 800d990:	2300      	movs	r3, #0
 800d992:	2100      	movs	r1, #0
 800d994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d996:	f7ff fe1f 	bl	800d5d8 <xTimerGenericCommand>
 800d99a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d99c:	6a3b      	ldr	r3, [r7, #32]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d130      	bne.n	800da04 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800d9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a6:	f383 8811 	msr	BASEPRI, r3
 800d9aa:	f3bf 8f6f 	isb	sy
 800d9ae:	f3bf 8f4f 	dsb	sy
 800d9b2:	61bb      	str	r3, [r7, #24]
}
 800d9b4:	bf00      	nop
 800d9b6:	e7fe      	b.n	800d9b6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d9b8:	68ba      	ldr	r2, [r7, #8]
 800d9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c0:	699b      	ldr	r3, [r3, #24]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d10a      	bne.n	800d9dc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800d9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ca:	f383 8811 	msr	BASEPRI, r3
 800d9ce:	f3bf 8f6f 	isb	sy
 800d9d2:	f3bf 8f4f 	dsb	sy
 800d9d6:	617b      	str	r3, [r7, #20]
}
 800d9d8:	bf00      	nop
 800d9da:	e7fe      	b.n	800d9da <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9de:	699a      	ldr	r2, [r3, #24]
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e2:	18d1      	adds	r1, r2, r3
 800d9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9ea:	f7ff ff27 	bl	800d83c <prvInsertTimerInActiveList>
					break;
 800d9ee:	e009      	b.n	800da04 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d104      	bne.n	800da04 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800d9fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9fc:	f000 fb6a 	bl	800e0d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800da00:	e000      	b.n	800da04 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800da02:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800da04:	4b07      	ldr	r3, [pc, #28]	; (800da24 <prvProcessReceivedCommands+0x164>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	1d39      	adds	r1, r7, #4
 800da0a:	2200      	movs	r2, #0
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7fe fac5 	bl	800bf9c <xQueueReceive>
 800da12:	4603      	mov	r3, r0
 800da14:	2b00      	cmp	r3, #0
 800da16:	f47f af57 	bne.w	800d8c8 <prvProcessReceivedCommands+0x8>
	}
}
 800da1a:	bf00      	nop
 800da1c:	bf00      	nop
 800da1e:	3730      	adds	r7, #48	; 0x30
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	20000da0 	.word	0x20000da0

0800da28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b088      	sub	sp, #32
 800da2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800da2e:	e045      	b.n	800dabc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800da30:	4b2c      	ldr	r3, [pc, #176]	; (800dae4 <prvSwitchTimerLists+0xbc>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	68db      	ldr	r3, [r3, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800da3a:	4b2a      	ldr	r3, [pc, #168]	; (800dae4 <prvSwitchTimerLists+0xbc>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	68db      	ldr	r3, [r3, #12]
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	3304      	adds	r3, #4
 800da48:	4618      	mov	r0, r3
 800da4a:	f7fd ffa7 	bl	800b99c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da52:	68f8      	ldr	r0, [r7, #12]
 800da54:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	69db      	ldr	r3, [r3, #28]
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	d12e      	bne.n	800dabc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	699b      	ldr	r3, [r3, #24]
 800da62:	693a      	ldr	r2, [r7, #16]
 800da64:	4413      	add	r3, r2
 800da66:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800da68:	68ba      	ldr	r2, [r7, #8]
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d90e      	bls.n	800da8e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	68ba      	ldr	r2, [r7, #8]
 800da74:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800da7c:	4b19      	ldr	r3, [pc, #100]	; (800dae4 <prvSwitchTimerLists+0xbc>)
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	3304      	adds	r3, #4
 800da84:	4619      	mov	r1, r3
 800da86:	4610      	mov	r0, r2
 800da88:	f7fd ff50 	bl	800b92c <vListInsert>
 800da8c:	e016      	b.n	800dabc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da8e:	2300      	movs	r3, #0
 800da90:	9300      	str	r3, [sp, #0]
 800da92:	2300      	movs	r3, #0
 800da94:	693a      	ldr	r2, [r7, #16]
 800da96:	2100      	movs	r1, #0
 800da98:	68f8      	ldr	r0, [r7, #12]
 800da9a:	f7ff fd9d 	bl	800d5d8 <xTimerGenericCommand>
 800da9e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d10a      	bne.n	800dabc <prvSwitchTimerLists+0x94>
	__asm volatile
 800daa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daaa:	f383 8811 	msr	BASEPRI, r3
 800daae:	f3bf 8f6f 	isb	sy
 800dab2:	f3bf 8f4f 	dsb	sy
 800dab6:	603b      	str	r3, [r7, #0]
}
 800dab8:	bf00      	nop
 800daba:	e7fe      	b.n	800daba <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dabc:	4b09      	ldr	r3, [pc, #36]	; (800dae4 <prvSwitchTimerLists+0xbc>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d1b4      	bne.n	800da30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dac6:	4b07      	ldr	r3, [pc, #28]	; (800dae4 <prvSwitchTimerLists+0xbc>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dacc:	4b06      	ldr	r3, [pc, #24]	; (800dae8 <prvSwitchTimerLists+0xc0>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a04      	ldr	r2, [pc, #16]	; (800dae4 <prvSwitchTimerLists+0xbc>)
 800dad2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dad4:	4a04      	ldr	r2, [pc, #16]	; (800dae8 <prvSwitchTimerLists+0xc0>)
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	6013      	str	r3, [r2, #0]
}
 800dada:	bf00      	nop
 800dadc:	3718      	adds	r7, #24
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	20000d98 	.word	0x20000d98
 800dae8:	20000d9c 	.word	0x20000d9c

0800daec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800daf2:	f000 f92b 	bl	800dd4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800daf6:	4b15      	ldr	r3, [pc, #84]	; (800db4c <prvCheckForValidListAndQueue+0x60>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d120      	bne.n	800db40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dafe:	4814      	ldr	r0, [pc, #80]	; (800db50 <prvCheckForValidListAndQueue+0x64>)
 800db00:	f7fd fec6 	bl	800b890 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800db04:	4813      	ldr	r0, [pc, #76]	; (800db54 <prvCheckForValidListAndQueue+0x68>)
 800db06:	f7fd fec3 	bl	800b890 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800db0a:	4b13      	ldr	r3, [pc, #76]	; (800db58 <prvCheckForValidListAndQueue+0x6c>)
 800db0c:	4a10      	ldr	r2, [pc, #64]	; (800db50 <prvCheckForValidListAndQueue+0x64>)
 800db0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800db10:	4b12      	ldr	r3, [pc, #72]	; (800db5c <prvCheckForValidListAndQueue+0x70>)
 800db12:	4a10      	ldr	r2, [pc, #64]	; (800db54 <prvCheckForValidListAndQueue+0x68>)
 800db14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800db16:	2300      	movs	r3, #0
 800db18:	9300      	str	r3, [sp, #0]
 800db1a:	4b11      	ldr	r3, [pc, #68]	; (800db60 <prvCheckForValidListAndQueue+0x74>)
 800db1c:	4a11      	ldr	r2, [pc, #68]	; (800db64 <prvCheckForValidListAndQueue+0x78>)
 800db1e:	2110      	movs	r1, #16
 800db20:	200a      	movs	r0, #10
 800db22:	f7fd ffcd 	bl	800bac0 <xQueueGenericCreateStatic>
 800db26:	4603      	mov	r3, r0
 800db28:	4a08      	ldr	r2, [pc, #32]	; (800db4c <prvCheckForValidListAndQueue+0x60>)
 800db2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800db2c:	4b07      	ldr	r3, [pc, #28]	; (800db4c <prvCheckForValidListAndQueue+0x60>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d005      	beq.n	800db40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800db34:	4b05      	ldr	r3, [pc, #20]	; (800db4c <prvCheckForValidListAndQueue+0x60>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	490b      	ldr	r1, [pc, #44]	; (800db68 <prvCheckForValidListAndQueue+0x7c>)
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7fe fc1e 	bl	800c37c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db40:	f000 f934 	bl	800ddac <vPortExitCritical>
}
 800db44:	bf00      	nop
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	bf00      	nop
 800db4c:	20000da0 	.word	0x20000da0
 800db50:	20000d70 	.word	0x20000d70
 800db54:	20000d84 	.word	0x20000d84
 800db58:	20000d98 	.word	0x20000d98
 800db5c:	20000d9c 	.word	0x20000d9c
 800db60:	20000e4c 	.word	0x20000e4c
 800db64:	20000dac 	.word	0x20000dac
 800db68:	0800ef94 	.word	0x0800ef94

0800db6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800db6c:	b480      	push	{r7}
 800db6e:	b085      	sub	sp, #20
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	3b04      	subs	r3, #4
 800db7c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800db84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	3b04      	subs	r3, #4
 800db8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	f023 0201 	bic.w	r2, r3, #1
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	3b04      	subs	r3, #4
 800db9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800db9c:	4a08      	ldr	r2, [pc, #32]	; (800dbc0 <pxPortInitialiseStack+0x54>)
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	3b14      	subs	r3, #20
 800dba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	3b20      	subs	r3, #32
 800dbb2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3714      	adds	r7, #20
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bc80      	pop	{r7}
 800dbbe:	4770      	bx	lr
 800dbc0:	0800dbc5 	.word	0x0800dbc5

0800dbc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b085      	sub	sp, #20
 800dbc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dbce:	4b12      	ldr	r3, [pc, #72]	; (800dc18 <prvTaskExitError+0x54>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd6:	d00a      	beq.n	800dbee <prvTaskExitError+0x2a>
	__asm volatile
 800dbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbdc:	f383 8811 	msr	BASEPRI, r3
 800dbe0:	f3bf 8f6f 	isb	sy
 800dbe4:	f3bf 8f4f 	dsb	sy
 800dbe8:	60fb      	str	r3, [r7, #12]
}
 800dbea:	bf00      	nop
 800dbec:	e7fe      	b.n	800dbec <prvTaskExitError+0x28>
	__asm volatile
 800dbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf2:	f383 8811 	msr	BASEPRI, r3
 800dbf6:	f3bf 8f6f 	isb	sy
 800dbfa:	f3bf 8f4f 	dsb	sy
 800dbfe:	60bb      	str	r3, [r7, #8]
}
 800dc00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dc02:	bf00      	nop
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d0fc      	beq.n	800dc04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dc0a:	bf00      	nop
 800dc0c:	bf00      	nop
 800dc0e:	3714      	adds	r7, #20
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bc80      	pop	{r7}
 800dc14:	4770      	bx	lr
 800dc16:	bf00      	nop
 800dc18:	2000012c 	.word	0x2000012c
 800dc1c:	00000000 	.word	0x00000000

0800dc20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dc20:	4b07      	ldr	r3, [pc, #28]	; (800dc40 <pxCurrentTCBConst2>)
 800dc22:	6819      	ldr	r1, [r3, #0]
 800dc24:	6808      	ldr	r0, [r1, #0]
 800dc26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800dc2a:	f380 8809 	msr	PSP, r0
 800dc2e:	f3bf 8f6f 	isb	sy
 800dc32:	f04f 0000 	mov.w	r0, #0
 800dc36:	f380 8811 	msr	BASEPRI, r0
 800dc3a:	f04e 0e0d 	orr.w	lr, lr, #13
 800dc3e:	4770      	bx	lr

0800dc40 <pxCurrentTCBConst2>:
 800dc40:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dc44:	bf00      	nop
 800dc46:	bf00      	nop

0800dc48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800dc48:	4806      	ldr	r0, [pc, #24]	; (800dc64 <prvPortStartFirstTask+0x1c>)
 800dc4a:	6800      	ldr	r0, [r0, #0]
 800dc4c:	6800      	ldr	r0, [r0, #0]
 800dc4e:	f380 8808 	msr	MSP, r0
 800dc52:	b662      	cpsie	i
 800dc54:	b661      	cpsie	f
 800dc56:	f3bf 8f4f 	dsb	sy
 800dc5a:	f3bf 8f6f 	isb	sy
 800dc5e:	df00      	svc	0
 800dc60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dc62:	bf00      	nop
 800dc64:	e000ed08 	.word	0xe000ed08

0800dc68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dc6e:	4b32      	ldr	r3, [pc, #200]	; (800dd38 <xPortStartScheduler+0xd0>)
 800dc70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	b2db      	uxtb	r3, r3
 800dc78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	22ff      	movs	r2, #255	; 0xff
 800dc7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	b2db      	uxtb	r3, r3
 800dc86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dc88:	78fb      	ldrb	r3, [r7, #3]
 800dc8a:	b2db      	uxtb	r3, r3
 800dc8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dc90:	b2da      	uxtb	r2, r3
 800dc92:	4b2a      	ldr	r3, [pc, #168]	; (800dd3c <xPortStartScheduler+0xd4>)
 800dc94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dc96:	4b2a      	ldr	r3, [pc, #168]	; (800dd40 <xPortStartScheduler+0xd8>)
 800dc98:	2207      	movs	r2, #7
 800dc9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc9c:	e009      	b.n	800dcb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800dc9e:	4b28      	ldr	r3, [pc, #160]	; (800dd40 <xPortStartScheduler+0xd8>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	3b01      	subs	r3, #1
 800dca4:	4a26      	ldr	r2, [pc, #152]	; (800dd40 <xPortStartScheduler+0xd8>)
 800dca6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dca8:	78fb      	ldrb	r3, [r7, #3]
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	005b      	lsls	r3, r3, #1
 800dcae:	b2db      	uxtb	r3, r3
 800dcb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dcb2:	78fb      	ldrb	r3, [r7, #3]
 800dcb4:	b2db      	uxtb	r3, r3
 800dcb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcba:	2b80      	cmp	r3, #128	; 0x80
 800dcbc:	d0ef      	beq.n	800dc9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dcbe:	4b20      	ldr	r3, [pc, #128]	; (800dd40 <xPortStartScheduler+0xd8>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f1c3 0307 	rsb	r3, r3, #7
 800dcc6:	2b04      	cmp	r3, #4
 800dcc8:	d00a      	beq.n	800dce0 <xPortStartScheduler+0x78>
	__asm volatile
 800dcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcce:	f383 8811 	msr	BASEPRI, r3
 800dcd2:	f3bf 8f6f 	isb	sy
 800dcd6:	f3bf 8f4f 	dsb	sy
 800dcda:	60bb      	str	r3, [r7, #8]
}
 800dcdc:	bf00      	nop
 800dcde:	e7fe      	b.n	800dcde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dce0:	4b17      	ldr	r3, [pc, #92]	; (800dd40 <xPortStartScheduler+0xd8>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	021b      	lsls	r3, r3, #8
 800dce6:	4a16      	ldr	r2, [pc, #88]	; (800dd40 <xPortStartScheduler+0xd8>)
 800dce8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dcea:	4b15      	ldr	r3, [pc, #84]	; (800dd40 <xPortStartScheduler+0xd8>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dcf2:	4a13      	ldr	r2, [pc, #76]	; (800dd40 <xPortStartScheduler+0xd8>)
 800dcf4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	b2da      	uxtb	r2, r3
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dcfe:	4b11      	ldr	r3, [pc, #68]	; (800dd44 <xPortStartScheduler+0xdc>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	4a10      	ldr	r2, [pc, #64]	; (800dd44 <xPortStartScheduler+0xdc>)
 800dd04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dd08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dd0a:	4b0e      	ldr	r3, [pc, #56]	; (800dd44 <xPortStartScheduler+0xdc>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	4a0d      	ldr	r2, [pc, #52]	; (800dd44 <xPortStartScheduler+0xdc>)
 800dd10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dd14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dd16:	f000 f8b9 	bl	800de8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dd1a:	4b0b      	ldr	r3, [pc, #44]	; (800dd48 <xPortStartScheduler+0xe0>)
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dd20:	f7ff ff92 	bl	800dc48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dd24:	f7fe ffae 	bl	800cc84 <vTaskSwitchContext>
	prvTaskExitError();
 800dd28:	f7ff ff4c 	bl	800dbc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dd2c:	2300      	movs	r3, #0
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3710      	adds	r7, #16
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
 800dd36:	bf00      	nop
 800dd38:	e000e400 	.word	0xe000e400
 800dd3c:	20000e9c 	.word	0x20000e9c
 800dd40:	20000ea0 	.word	0x20000ea0
 800dd44:	e000ed20 	.word	0xe000ed20
 800dd48:	2000012c 	.word	0x2000012c

0800dd4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
	__asm volatile
 800dd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd56:	f383 8811 	msr	BASEPRI, r3
 800dd5a:	f3bf 8f6f 	isb	sy
 800dd5e:	f3bf 8f4f 	dsb	sy
 800dd62:	607b      	str	r3, [r7, #4]
}
 800dd64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dd66:	4b0f      	ldr	r3, [pc, #60]	; (800dda4 <vPortEnterCritical+0x58>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	4a0d      	ldr	r2, [pc, #52]	; (800dda4 <vPortEnterCritical+0x58>)
 800dd6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dd70:	4b0c      	ldr	r3, [pc, #48]	; (800dda4 <vPortEnterCritical+0x58>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d10f      	bne.n	800dd98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dd78:	4b0b      	ldr	r3, [pc, #44]	; (800dda8 <vPortEnterCritical+0x5c>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00a      	beq.n	800dd98 <vPortEnterCritical+0x4c>
	__asm volatile
 800dd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd86:	f383 8811 	msr	BASEPRI, r3
 800dd8a:	f3bf 8f6f 	isb	sy
 800dd8e:	f3bf 8f4f 	dsb	sy
 800dd92:	603b      	str	r3, [r7, #0]
}
 800dd94:	bf00      	nop
 800dd96:	e7fe      	b.n	800dd96 <vPortEnterCritical+0x4a>
	}
}
 800dd98:	bf00      	nop
 800dd9a:	370c      	adds	r7, #12
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bc80      	pop	{r7}
 800dda0:	4770      	bx	lr
 800dda2:	bf00      	nop
 800dda4:	2000012c 	.word	0x2000012c
 800dda8:	e000ed04 	.word	0xe000ed04

0800ddac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ddb2:	4b11      	ldr	r3, [pc, #68]	; (800ddf8 <vPortExitCritical+0x4c>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d10a      	bne.n	800ddd0 <vPortExitCritical+0x24>
	__asm volatile
 800ddba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddbe:	f383 8811 	msr	BASEPRI, r3
 800ddc2:	f3bf 8f6f 	isb	sy
 800ddc6:	f3bf 8f4f 	dsb	sy
 800ddca:	607b      	str	r3, [r7, #4]
}
 800ddcc:	bf00      	nop
 800ddce:	e7fe      	b.n	800ddce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ddd0:	4b09      	ldr	r3, [pc, #36]	; (800ddf8 <vPortExitCritical+0x4c>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	3b01      	subs	r3, #1
 800ddd6:	4a08      	ldr	r2, [pc, #32]	; (800ddf8 <vPortExitCritical+0x4c>)
 800ddd8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ddda:	4b07      	ldr	r3, [pc, #28]	; (800ddf8 <vPortExitCritical+0x4c>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d105      	bne.n	800ddee <vPortExitCritical+0x42>
 800dde2:	2300      	movs	r3, #0
 800dde4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	f383 8811 	msr	BASEPRI, r3
}
 800ddec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ddee:	bf00      	nop
 800ddf0:	370c      	adds	r7, #12
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bc80      	pop	{r7}
 800ddf6:	4770      	bx	lr
 800ddf8:	2000012c 	.word	0x2000012c
 800ddfc:	00000000 	.word	0x00000000

0800de00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800de00:	f3ef 8009 	mrs	r0, PSP
 800de04:	f3bf 8f6f 	isb	sy
 800de08:	4b0d      	ldr	r3, [pc, #52]	; (800de40 <pxCurrentTCBConst>)
 800de0a:	681a      	ldr	r2, [r3, #0]
 800de0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800de10:	6010      	str	r0, [r2, #0]
 800de12:	e92d 4008 	stmdb	sp!, {r3, lr}
 800de16:	f04f 0050 	mov.w	r0, #80	; 0x50
 800de1a:	f380 8811 	msr	BASEPRI, r0
 800de1e:	f7fe ff31 	bl	800cc84 <vTaskSwitchContext>
 800de22:	f04f 0000 	mov.w	r0, #0
 800de26:	f380 8811 	msr	BASEPRI, r0
 800de2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800de2e:	6819      	ldr	r1, [r3, #0]
 800de30:	6808      	ldr	r0, [r1, #0]
 800de32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800de36:	f380 8809 	msr	PSP, r0
 800de3a:	f3bf 8f6f 	isb	sy
 800de3e:	4770      	bx	lr

0800de40 <pxCurrentTCBConst>:
 800de40:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800de44:	bf00      	nop
 800de46:	bf00      	nop

0800de48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
	__asm volatile
 800de4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de52:	f383 8811 	msr	BASEPRI, r3
 800de56:	f3bf 8f6f 	isb	sy
 800de5a:	f3bf 8f4f 	dsb	sy
 800de5e:	607b      	str	r3, [r7, #4]
}
 800de60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800de62:	f7fe fe51 	bl	800cb08 <xTaskIncrementTick>
 800de66:	4603      	mov	r3, r0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d003      	beq.n	800de74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800de6c:	4b06      	ldr	r3, [pc, #24]	; (800de88 <SysTick_Handler+0x40>)
 800de6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de72:	601a      	str	r2, [r3, #0]
 800de74:	2300      	movs	r3, #0
 800de76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	f383 8811 	msr	BASEPRI, r3
}
 800de7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800de80:	bf00      	nop
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	e000ed04 	.word	0xe000ed04

0800de8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800de8c:	b480      	push	{r7}
 800de8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800de90:	4b0a      	ldr	r3, [pc, #40]	; (800debc <vPortSetupTimerInterrupt+0x30>)
 800de92:	2200      	movs	r2, #0
 800de94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800de96:	4b0a      	ldr	r3, [pc, #40]	; (800dec0 <vPortSetupTimerInterrupt+0x34>)
 800de98:	2200      	movs	r2, #0
 800de9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800de9c:	4b09      	ldr	r3, [pc, #36]	; (800dec4 <vPortSetupTimerInterrupt+0x38>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4a09      	ldr	r2, [pc, #36]	; (800dec8 <vPortSetupTimerInterrupt+0x3c>)
 800dea2:	fba2 2303 	umull	r2, r3, r2, r3
 800dea6:	099b      	lsrs	r3, r3, #6
 800dea8:	4a08      	ldr	r2, [pc, #32]	; (800decc <vPortSetupTimerInterrupt+0x40>)
 800deaa:	3b01      	subs	r3, #1
 800deac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800deae:	4b03      	ldr	r3, [pc, #12]	; (800debc <vPortSetupTimerInterrupt+0x30>)
 800deb0:	2207      	movs	r2, #7
 800deb2:	601a      	str	r2, [r3, #0]
}
 800deb4:	bf00      	nop
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bc80      	pop	{r7}
 800deba:	4770      	bx	lr
 800debc:	e000e010 	.word	0xe000e010
 800dec0:	e000e018 	.word	0xe000e018
 800dec4:	20000010 	.word	0x20000010
 800dec8:	10624dd3 	.word	0x10624dd3
 800decc:	e000e014 	.word	0xe000e014

0800ded0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ded0:	b480      	push	{r7}
 800ded2:	b085      	sub	sp, #20
 800ded4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ded6:	f3ef 8305 	mrs	r3, IPSR
 800deda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	2b0f      	cmp	r3, #15
 800dee0:	d914      	bls.n	800df0c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dee2:	4a16      	ldr	r2, [pc, #88]	; (800df3c <vPortValidateInterruptPriority+0x6c>)
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	4413      	add	r3, r2
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800deec:	4b14      	ldr	r3, [pc, #80]	; (800df40 <vPortValidateInterruptPriority+0x70>)
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	7afa      	ldrb	r2, [r7, #11]
 800def2:	429a      	cmp	r2, r3
 800def4:	d20a      	bcs.n	800df0c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800def6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defa:	f383 8811 	msr	BASEPRI, r3
 800defe:	f3bf 8f6f 	isb	sy
 800df02:	f3bf 8f4f 	dsb	sy
 800df06:	607b      	str	r3, [r7, #4]
}
 800df08:	bf00      	nop
 800df0a:	e7fe      	b.n	800df0a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800df0c:	4b0d      	ldr	r3, [pc, #52]	; (800df44 <vPortValidateInterruptPriority+0x74>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800df14:	4b0c      	ldr	r3, [pc, #48]	; (800df48 <vPortValidateInterruptPriority+0x78>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	429a      	cmp	r2, r3
 800df1a:	d90a      	bls.n	800df32 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800df1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df20:	f383 8811 	msr	BASEPRI, r3
 800df24:	f3bf 8f6f 	isb	sy
 800df28:	f3bf 8f4f 	dsb	sy
 800df2c:	603b      	str	r3, [r7, #0]
}
 800df2e:	bf00      	nop
 800df30:	e7fe      	b.n	800df30 <vPortValidateInterruptPriority+0x60>
	}
 800df32:	bf00      	nop
 800df34:	3714      	adds	r7, #20
 800df36:	46bd      	mov	sp, r7
 800df38:	bc80      	pop	{r7}
 800df3a:	4770      	bx	lr
 800df3c:	e000e3f0 	.word	0xe000e3f0
 800df40:	20000e9c 	.word	0x20000e9c
 800df44:	e000ed0c 	.word	0xe000ed0c
 800df48:	20000ea0 	.word	0x20000ea0

0800df4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b08a      	sub	sp, #40	; 0x28
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800df54:	2300      	movs	r3, #0
 800df56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800df58:	f7fe fd1c 	bl	800c994 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800df5c:	4b58      	ldr	r3, [pc, #352]	; (800e0c0 <pvPortMalloc+0x174>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d101      	bne.n	800df68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800df64:	f000 f910 	bl	800e188 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800df68:	4b56      	ldr	r3, [pc, #344]	; (800e0c4 <pvPortMalloc+0x178>)
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	4013      	ands	r3, r2
 800df70:	2b00      	cmp	r3, #0
 800df72:	f040 808e 	bne.w	800e092 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d01d      	beq.n	800dfb8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800df7c:	2208      	movs	r2, #8
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	4413      	add	r3, r2
 800df82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f003 0307 	and.w	r3, r3, #7
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d014      	beq.n	800dfb8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f023 0307 	bic.w	r3, r3, #7
 800df94:	3308      	adds	r3, #8
 800df96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f003 0307 	and.w	r3, r3, #7
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d00a      	beq.n	800dfb8 <pvPortMalloc+0x6c>
	__asm volatile
 800dfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa6:	f383 8811 	msr	BASEPRI, r3
 800dfaa:	f3bf 8f6f 	isb	sy
 800dfae:	f3bf 8f4f 	dsb	sy
 800dfb2:	617b      	str	r3, [r7, #20]
}
 800dfb4:	bf00      	nop
 800dfb6:	e7fe      	b.n	800dfb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d069      	beq.n	800e092 <pvPortMalloc+0x146>
 800dfbe:	4b42      	ldr	r3, [pc, #264]	; (800e0c8 <pvPortMalloc+0x17c>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d864      	bhi.n	800e092 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dfc8:	4b40      	ldr	r3, [pc, #256]	; (800e0cc <pvPortMalloc+0x180>)
 800dfca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dfcc:	4b3f      	ldr	r3, [pc, #252]	; (800e0cc <pvPortMalloc+0x180>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dfd2:	e004      	b.n	800dfde <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	687a      	ldr	r2, [r7, #4]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d903      	bls.n	800dff0 <pvPortMalloc+0xa4>
 800dfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d1f1      	bne.n	800dfd4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dff0:	4b33      	ldr	r3, [pc, #204]	; (800e0c0 <pvPortMalloc+0x174>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d04b      	beq.n	800e092 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dffa:	6a3b      	ldr	r3, [r7, #32]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	2208      	movs	r2, #8
 800e000:	4413      	add	r3, r2
 800e002:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	6a3b      	ldr	r3, [r7, #32]
 800e00a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00e:	685a      	ldr	r2, [r3, #4]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	1ad2      	subs	r2, r2, r3
 800e014:	2308      	movs	r3, #8
 800e016:	005b      	lsls	r3, r3, #1
 800e018:	429a      	cmp	r2, r3
 800e01a:	d91f      	bls.n	800e05c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e01c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	4413      	add	r3, r2
 800e022:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	f003 0307 	and.w	r3, r3, #7
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d00a      	beq.n	800e044 <pvPortMalloc+0xf8>
	__asm volatile
 800e02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e032:	f383 8811 	msr	BASEPRI, r3
 800e036:	f3bf 8f6f 	isb	sy
 800e03a:	f3bf 8f4f 	dsb	sy
 800e03e:	613b      	str	r3, [r7, #16]
}
 800e040:	bf00      	nop
 800e042:	e7fe      	b.n	800e042 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e046:	685a      	ldr	r2, [r3, #4]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	1ad2      	subs	r2, r2, r3
 800e04c:	69bb      	ldr	r3, [r7, #24]
 800e04e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e056:	69b8      	ldr	r0, [r7, #24]
 800e058:	f000 f8f8 	bl	800e24c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e05c:	4b1a      	ldr	r3, [pc, #104]	; (800e0c8 <pvPortMalloc+0x17c>)
 800e05e:	681a      	ldr	r2, [r3, #0]
 800e060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	1ad3      	subs	r3, r2, r3
 800e066:	4a18      	ldr	r2, [pc, #96]	; (800e0c8 <pvPortMalloc+0x17c>)
 800e068:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e06a:	4b17      	ldr	r3, [pc, #92]	; (800e0c8 <pvPortMalloc+0x17c>)
 800e06c:	681a      	ldr	r2, [r3, #0]
 800e06e:	4b18      	ldr	r3, [pc, #96]	; (800e0d0 <pvPortMalloc+0x184>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	429a      	cmp	r2, r3
 800e074:	d203      	bcs.n	800e07e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e076:	4b14      	ldr	r3, [pc, #80]	; (800e0c8 <pvPortMalloc+0x17c>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4a15      	ldr	r2, [pc, #84]	; (800e0d0 <pvPortMalloc+0x184>)
 800e07c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e080:	685a      	ldr	r2, [r3, #4]
 800e082:	4b10      	ldr	r3, [pc, #64]	; (800e0c4 <pvPortMalloc+0x178>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	431a      	orrs	r2, r3
 800e088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08e:	2200      	movs	r2, #0
 800e090:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e092:	f7fe fc8d 	bl	800c9b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e096:	69fb      	ldr	r3, [r7, #28]
 800e098:	f003 0307 	and.w	r3, r3, #7
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d00a      	beq.n	800e0b6 <pvPortMalloc+0x16a>
	__asm volatile
 800e0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a4:	f383 8811 	msr	BASEPRI, r3
 800e0a8:	f3bf 8f6f 	isb	sy
 800e0ac:	f3bf 8f4f 	dsb	sy
 800e0b0:	60fb      	str	r3, [r7, #12]
}
 800e0b2:	bf00      	nop
 800e0b4:	e7fe      	b.n	800e0b4 <pvPortMalloc+0x168>
	return pvReturn;
 800e0b6:	69fb      	ldr	r3, [r7, #28]
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3728      	adds	r7, #40	; 0x28
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	20002248 	.word	0x20002248
 800e0c4:	20002254 	.word	0x20002254
 800e0c8:	2000224c 	.word	0x2000224c
 800e0cc:	20002240 	.word	0x20002240
 800e0d0:	20002250 	.word	0x20002250

0800e0d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b086      	sub	sp, #24
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d048      	beq.n	800e178 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e0e6:	2308      	movs	r3, #8
 800e0e8:	425b      	negs	r3, r3
 800e0ea:	697a      	ldr	r2, [r7, #20]
 800e0ec:	4413      	add	r3, r2
 800e0ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	685a      	ldr	r2, [r3, #4]
 800e0f8:	4b21      	ldr	r3, [pc, #132]	; (800e180 <vPortFree+0xac>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4013      	ands	r3, r2
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d10a      	bne.n	800e118 <vPortFree+0x44>
	__asm volatile
 800e102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e106:	f383 8811 	msr	BASEPRI, r3
 800e10a:	f3bf 8f6f 	isb	sy
 800e10e:	f3bf 8f4f 	dsb	sy
 800e112:	60fb      	str	r3, [r7, #12]
}
 800e114:	bf00      	nop
 800e116:	e7fe      	b.n	800e116 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d00a      	beq.n	800e136 <vPortFree+0x62>
	__asm volatile
 800e120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e124:	f383 8811 	msr	BASEPRI, r3
 800e128:	f3bf 8f6f 	isb	sy
 800e12c:	f3bf 8f4f 	dsb	sy
 800e130:	60bb      	str	r3, [r7, #8]
}
 800e132:	bf00      	nop
 800e134:	e7fe      	b.n	800e134 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	685a      	ldr	r2, [r3, #4]
 800e13a:	4b11      	ldr	r3, [pc, #68]	; (800e180 <vPortFree+0xac>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	4013      	ands	r3, r2
 800e140:	2b00      	cmp	r3, #0
 800e142:	d019      	beq.n	800e178 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d115      	bne.n	800e178 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	685a      	ldr	r2, [r3, #4]
 800e150:	4b0b      	ldr	r3, [pc, #44]	; (800e180 <vPortFree+0xac>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	43db      	mvns	r3, r3
 800e156:	401a      	ands	r2, r3
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e15c:	f7fe fc1a 	bl	800c994 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	685a      	ldr	r2, [r3, #4]
 800e164:	4b07      	ldr	r3, [pc, #28]	; (800e184 <vPortFree+0xb0>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4413      	add	r3, r2
 800e16a:	4a06      	ldr	r2, [pc, #24]	; (800e184 <vPortFree+0xb0>)
 800e16c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e16e:	6938      	ldr	r0, [r7, #16]
 800e170:	f000 f86c 	bl	800e24c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e174:	f7fe fc1c 	bl	800c9b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e178:	bf00      	nop
 800e17a:	3718      	adds	r7, #24
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	20002254 	.word	0x20002254
 800e184:	2000224c 	.word	0x2000224c

0800e188 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e188:	b480      	push	{r7}
 800e18a:	b085      	sub	sp, #20
 800e18c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e18e:	f241 339c 	movw	r3, #5020	; 0x139c
 800e192:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e194:	4b27      	ldr	r3, [pc, #156]	; (800e234 <prvHeapInit+0xac>)
 800e196:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	f003 0307 	and.w	r3, r3, #7
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d00c      	beq.n	800e1bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	3307      	adds	r3, #7
 800e1a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	f023 0307 	bic.w	r3, r3, #7
 800e1ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e1b0:	68ba      	ldr	r2, [r7, #8]
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	1ad3      	subs	r3, r2, r3
 800e1b6:	4a1f      	ldr	r2, [pc, #124]	; (800e234 <prvHeapInit+0xac>)
 800e1b8:	4413      	add	r3, r2
 800e1ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e1c0:	4a1d      	ldr	r2, [pc, #116]	; (800e238 <prvHeapInit+0xb0>)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e1c6:	4b1c      	ldr	r3, [pc, #112]	; (800e238 <prvHeapInit+0xb0>)
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	68ba      	ldr	r2, [r7, #8]
 800e1d0:	4413      	add	r3, r2
 800e1d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e1d4:	2208      	movs	r2, #8
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	1a9b      	subs	r3, r3, r2
 800e1da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f023 0307 	bic.w	r3, r3, #7
 800e1e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	4a15      	ldr	r2, [pc, #84]	; (800e23c <prvHeapInit+0xb4>)
 800e1e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e1ea:	4b14      	ldr	r3, [pc, #80]	; (800e23c <prvHeapInit+0xb4>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e1f2:	4b12      	ldr	r3, [pc, #72]	; (800e23c <prvHeapInit+0xb4>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	68fa      	ldr	r2, [r7, #12]
 800e202:	1ad2      	subs	r2, r2, r3
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e208:	4b0c      	ldr	r3, [pc, #48]	; (800e23c <prvHeapInit+0xb4>)
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	4a0a      	ldr	r2, [pc, #40]	; (800e240 <prvHeapInit+0xb8>)
 800e216:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	685b      	ldr	r3, [r3, #4]
 800e21c:	4a09      	ldr	r2, [pc, #36]	; (800e244 <prvHeapInit+0xbc>)
 800e21e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e220:	4b09      	ldr	r3, [pc, #36]	; (800e248 <prvHeapInit+0xc0>)
 800e222:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e226:	601a      	str	r2, [r3, #0]
}
 800e228:	bf00      	nop
 800e22a:	3714      	adds	r7, #20
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bc80      	pop	{r7}
 800e230:	4770      	bx	lr
 800e232:	bf00      	nop
 800e234:	20000ea4 	.word	0x20000ea4
 800e238:	20002240 	.word	0x20002240
 800e23c:	20002248 	.word	0x20002248
 800e240:	20002250 	.word	0x20002250
 800e244:	2000224c 	.word	0x2000224c
 800e248:	20002254 	.word	0x20002254

0800e24c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e24c:	b480      	push	{r7}
 800e24e:	b085      	sub	sp, #20
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e254:	4b27      	ldr	r3, [pc, #156]	; (800e2f4 <prvInsertBlockIntoFreeList+0xa8>)
 800e256:	60fb      	str	r3, [r7, #12]
 800e258:	e002      	b.n	800e260 <prvInsertBlockIntoFreeList+0x14>
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	60fb      	str	r3, [r7, #12]
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	687a      	ldr	r2, [r7, #4]
 800e266:	429a      	cmp	r2, r3
 800e268:	d8f7      	bhi.n	800e25a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	685b      	ldr	r3, [r3, #4]
 800e272:	68ba      	ldr	r2, [r7, #8]
 800e274:	4413      	add	r3, r2
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	429a      	cmp	r2, r3
 800e27a:	d108      	bne.n	800e28e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	685a      	ldr	r2, [r3, #4]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	441a      	add	r2, r3
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	685b      	ldr	r3, [r3, #4]
 800e296:	68ba      	ldr	r2, [r7, #8]
 800e298:	441a      	add	r2, r3
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d118      	bne.n	800e2d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	681a      	ldr	r2, [r3, #0]
 800e2a6:	4b14      	ldr	r3, [pc, #80]	; (800e2f8 <prvInsertBlockIntoFreeList+0xac>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d00d      	beq.n	800e2ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	685a      	ldr	r2, [r3, #4]
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	685b      	ldr	r3, [r3, #4]
 800e2b8:	441a      	add	r2, r3
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	601a      	str	r2, [r3, #0]
 800e2c8:	e008      	b.n	800e2dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e2ca:	4b0b      	ldr	r3, [pc, #44]	; (800e2f8 <prvInsertBlockIntoFreeList+0xac>)
 800e2cc:	681a      	ldr	r2, [r3, #0]
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	601a      	str	r2, [r3, #0]
 800e2d2:	e003      	b.n	800e2dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681a      	ldr	r2, [r3, #0]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e2dc:	68fa      	ldr	r2, [r7, #12]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d002      	beq.n	800e2ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2ea:	bf00      	nop
 800e2ec:	3714      	adds	r7, #20
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bc80      	pop	{r7}
 800e2f2:	4770      	bx	lr
 800e2f4:	20002240 	.word	0x20002240
 800e2f8:	20002248 	.word	0x20002248

0800e2fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e300:	2200      	movs	r2, #0
 800e302:	4912      	ldr	r1, [pc, #72]	; (800e34c <MX_USB_DEVICE_Init+0x50>)
 800e304:	4812      	ldr	r0, [pc, #72]	; (800e350 <MX_USB_DEVICE_Init+0x54>)
 800e306:	f7fc f832 	bl	800a36e <USBD_Init>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d001      	beq.n	800e314 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e310:	f7f2 fe64 	bl	8000fdc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e314:	490f      	ldr	r1, [pc, #60]	; (800e354 <MX_USB_DEVICE_Init+0x58>)
 800e316:	480e      	ldr	r0, [pc, #56]	; (800e350 <MX_USB_DEVICE_Init+0x54>)
 800e318:	f7fc f854 	bl	800a3c4 <USBD_RegisterClass>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d001      	beq.n	800e326 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e322:	f7f2 fe5b 	bl	8000fdc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e326:	490c      	ldr	r1, [pc, #48]	; (800e358 <MX_USB_DEVICE_Init+0x5c>)
 800e328:	4809      	ldr	r0, [pc, #36]	; (800e350 <MX_USB_DEVICE_Init+0x54>)
 800e32a:	f7fb ff85 	bl	800a238 <USBD_CDC_RegisterInterface>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d001      	beq.n	800e338 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e334:	f7f2 fe52 	bl	8000fdc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e338:	4805      	ldr	r0, [pc, #20]	; (800e350 <MX_USB_DEVICE_Init+0x54>)
 800e33a:	f7fc f85c 	bl	800a3f6 <USBD_Start>
 800e33e:	4603      	mov	r3, r0
 800e340:	2b00      	cmp	r3, #0
 800e342:	d001      	beq.n	800e348 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e344:	f7f2 fe4a 	bl	8000fdc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e348:	bf00      	nop
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	20000140 	.word	0x20000140
 800e350:	200026f4 	.word	0x200026f4
 800e354:	20000028 	.word	0x20000028
 800e358:	20000130 	.word	0x20000130

0800e35c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e360:	2200      	movs	r2, #0
 800e362:	4905      	ldr	r1, [pc, #20]	; (800e378 <CDC_Init_FS+0x1c>)
 800e364:	4805      	ldr	r0, [pc, #20]	; (800e37c <CDC_Init_FS+0x20>)
 800e366:	f7fb ff7d 	bl	800a264 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e36a:	4905      	ldr	r1, [pc, #20]	; (800e380 <CDC_Init_FS+0x24>)
 800e36c:	4803      	ldr	r0, [pc, #12]	; (800e37c <CDC_Init_FS+0x20>)
 800e36e:	f7fb ff92 	bl	800a296 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e372:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e374:	4618      	mov	r0, r3
 800e376:	bd80      	pop	{r7, pc}
 800e378:	20002da0 	.word	0x20002da0
 800e37c:	200026f4 	.word	0x200026f4
 800e380:	200029b8 	.word	0x200029b8

0800e384 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e384:	b480      	push	{r7}
 800e386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e388:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bc80      	pop	{r7}
 800e390:	4770      	bx	lr
	...

0800e394 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	4603      	mov	r3, r0
 800e39c:	6039      	str	r1, [r7, #0]
 800e39e:	71fb      	strb	r3, [r7, #7]
 800e3a0:	4613      	mov	r3, r2
 800e3a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e3a4:	79fb      	ldrb	r3, [r7, #7]
 800e3a6:	2b23      	cmp	r3, #35	; 0x23
 800e3a8:	d84a      	bhi.n	800e440 <CDC_Control_FS+0xac>
 800e3aa:	a201      	add	r2, pc, #4	; (adr r2, 800e3b0 <CDC_Control_FS+0x1c>)
 800e3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3b0:	0800e441 	.word	0x0800e441
 800e3b4:	0800e441 	.word	0x0800e441
 800e3b8:	0800e441 	.word	0x0800e441
 800e3bc:	0800e441 	.word	0x0800e441
 800e3c0:	0800e441 	.word	0x0800e441
 800e3c4:	0800e441 	.word	0x0800e441
 800e3c8:	0800e441 	.word	0x0800e441
 800e3cc:	0800e441 	.word	0x0800e441
 800e3d0:	0800e441 	.word	0x0800e441
 800e3d4:	0800e441 	.word	0x0800e441
 800e3d8:	0800e441 	.word	0x0800e441
 800e3dc:	0800e441 	.word	0x0800e441
 800e3e0:	0800e441 	.word	0x0800e441
 800e3e4:	0800e441 	.word	0x0800e441
 800e3e8:	0800e441 	.word	0x0800e441
 800e3ec:	0800e441 	.word	0x0800e441
 800e3f0:	0800e441 	.word	0x0800e441
 800e3f4:	0800e441 	.word	0x0800e441
 800e3f8:	0800e441 	.word	0x0800e441
 800e3fc:	0800e441 	.word	0x0800e441
 800e400:	0800e441 	.word	0x0800e441
 800e404:	0800e441 	.word	0x0800e441
 800e408:	0800e441 	.word	0x0800e441
 800e40c:	0800e441 	.word	0x0800e441
 800e410:	0800e441 	.word	0x0800e441
 800e414:	0800e441 	.word	0x0800e441
 800e418:	0800e441 	.word	0x0800e441
 800e41c:	0800e441 	.word	0x0800e441
 800e420:	0800e441 	.word	0x0800e441
 800e424:	0800e441 	.word	0x0800e441
 800e428:	0800e441 	.word	0x0800e441
 800e42c:	0800e441 	.word	0x0800e441
 800e430:	0800e441 	.word	0x0800e441
 800e434:	0800e441 	.word	0x0800e441
 800e438:	0800e441 	.word	0x0800e441
 800e43c:	0800e441 	.word	0x0800e441
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e440:	bf00      	nop
  }

  return (USBD_OK);
 800e442:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e444:	4618      	mov	r0, r3
 800e446:	370c      	adds	r7, #12
 800e448:	46bd      	mov	sp, r7
 800e44a:	bc80      	pop	{r7}
 800e44c:	4770      	bx	lr
 800e44e:	bf00      	nop

0800e450 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 800e45a:	2300      	movs	r3, #0
 800e45c:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < (*Len); i++)
 800e45e:	2300      	movs	r3, #0
 800e460:	60fb      	str	r3, [r7, #12]
 800e462:	e00c      	b.n	800e47e <CDC_Receive_FS+0x2e>
	{
		xQueueSendToBackFromISR(qUSB_rcvQueue, &Buf[i], &xHigherPriorityTaskWoken );
 800e464:	4b14      	ldr	r3, [pc, #80]	; (800e4b8 <CDC_Receive_FS+0x68>)
 800e466:	6818      	ldr	r0, [r3, #0]
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	18d1      	adds	r1, r2, r3
 800e46e:	f107 0208 	add.w	r2, r7, #8
 800e472:	2300      	movs	r3, #0
 800e474:	f7fd fcfa 	bl	800be6c <xQueueGenericSendFromISR>
	for (uint32_t i = 0; i < (*Len); i++)
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	3301      	adds	r3, #1
 800e47c:	60fb      	str	r3, [r7, #12]
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	68fa      	ldr	r2, [r7, #12]
 800e484:	429a      	cmp	r2, r3
 800e486:	d3ed      	bcc.n	800e464 <CDC_Receive_FS+0x14>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e488:	6879      	ldr	r1, [r7, #4]
 800e48a:	480c      	ldr	r0, [pc, #48]	; (800e4bc <CDC_Receive_FS+0x6c>)
 800e48c:	f7fb ff03 	bl	800a296 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e490:	480a      	ldr	r0, [pc, #40]	; (800e4bc <CDC_Receive_FS+0x6c>)
 800e492:	f7fb ff42 	bl	800a31a <USBD_CDC_ReceivePacket>
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d007      	beq.n	800e4ac <CDC_Receive_FS+0x5c>
 800e49c:	4b08      	ldr	r3, [pc, #32]	; (800e4c0 <CDC_Receive_FS+0x70>)
 800e49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4a2:	601a      	str	r2, [r3, #0]
 800e4a4:	f3bf 8f4f 	dsb	sy
 800e4a8:	f3bf 8f6f 	isb	sy
  return (USBD_OK);
 800e4ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3710      	adds	r7, #16
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	20002490 	.word	0x20002490
 800e4bc:	200026f4 	.word	0x200026f4
 800e4c0:	e000ed04 	.word	0xe000ed04

0800e4c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e4d4:	4b0d      	ldr	r3, [pc, #52]	; (800e50c <CDC_Transmit_FS+0x48>)
 800e4d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d001      	beq.n	800e4ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	e00b      	b.n	800e502 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e4ea:	887b      	ldrh	r3, [r7, #2]
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	6879      	ldr	r1, [r7, #4]
 800e4f0:	4806      	ldr	r0, [pc, #24]	; (800e50c <CDC_Transmit_FS+0x48>)
 800e4f2:	f7fb feb7 	bl	800a264 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e4f6:	4805      	ldr	r0, [pc, #20]	; (800e50c <CDC_Transmit_FS+0x48>)
 800e4f8:	f7fb fee0 	bl	800a2bc <USBD_CDC_TransmitPacket>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e500:	7bfb      	ldrb	r3, [r7, #15]
}
 800e502:	4618      	mov	r0, r3
 800e504:	3710      	adds	r7, #16
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop
 800e50c:	200026f4 	.word	0x200026f4

0800e510 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e510:	b480      	push	{r7}
 800e512:	b083      	sub	sp, #12
 800e514:	af00      	add	r7, sp, #0
 800e516:	4603      	mov	r3, r0
 800e518:	6039      	str	r1, [r7, #0]
 800e51a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	2212      	movs	r2, #18
 800e520:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e522:	4b03      	ldr	r3, [pc, #12]	; (800e530 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e524:	4618      	mov	r0, r3
 800e526:	370c      	adds	r7, #12
 800e528:	46bd      	mov	sp, r7
 800e52a:	bc80      	pop	{r7}
 800e52c:	4770      	bx	lr
 800e52e:	bf00      	nop
 800e530:	2000015c 	.word	0x2000015c

0800e534 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e534:	b480      	push	{r7}
 800e536:	b083      	sub	sp, #12
 800e538:	af00      	add	r7, sp, #0
 800e53a:	4603      	mov	r3, r0
 800e53c:	6039      	str	r1, [r7, #0]
 800e53e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	2204      	movs	r2, #4
 800e544:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e546:	4b03      	ldr	r3, [pc, #12]	; (800e554 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e548:	4618      	mov	r0, r3
 800e54a:	370c      	adds	r7, #12
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bc80      	pop	{r7}
 800e550:	4770      	bx	lr
 800e552:	bf00      	nop
 800e554:	20000170 	.word	0x20000170

0800e558 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	4603      	mov	r3, r0
 800e560:	6039      	str	r1, [r7, #0]
 800e562:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e564:	79fb      	ldrb	r3, [r7, #7]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d105      	bne.n	800e576 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e56a:	683a      	ldr	r2, [r7, #0]
 800e56c:	4907      	ldr	r1, [pc, #28]	; (800e58c <USBD_FS_ProductStrDescriptor+0x34>)
 800e56e:	4808      	ldr	r0, [pc, #32]	; (800e590 <USBD_FS_ProductStrDescriptor+0x38>)
 800e570:	f7fc feba 	bl	800b2e8 <USBD_GetString>
 800e574:	e004      	b.n	800e580 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e576:	683a      	ldr	r2, [r7, #0]
 800e578:	4904      	ldr	r1, [pc, #16]	; (800e58c <USBD_FS_ProductStrDescriptor+0x34>)
 800e57a:	4805      	ldr	r0, [pc, #20]	; (800e590 <USBD_FS_ProductStrDescriptor+0x38>)
 800e57c:	f7fc feb4 	bl	800b2e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e580:	4b02      	ldr	r3, [pc, #8]	; (800e58c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e582:	4618      	mov	r0, r3
 800e584:	3708      	adds	r7, #8
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
 800e58a:	bf00      	nop
 800e58c:	20003188 	.word	0x20003188
 800e590:	0800ef9c 	.word	0x0800ef9c

0800e594 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
 800e59a:	4603      	mov	r3, r0
 800e59c:	6039      	str	r1, [r7, #0]
 800e59e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e5a0:	683a      	ldr	r2, [r7, #0]
 800e5a2:	4904      	ldr	r1, [pc, #16]	; (800e5b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e5a4:	4804      	ldr	r0, [pc, #16]	; (800e5b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e5a6:	f7fc fe9f 	bl	800b2e8 <USBD_GetString>
  return USBD_StrDesc;
 800e5aa:	4b02      	ldr	r3, [pc, #8]	; (800e5b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3708      	adds	r7, #8
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}
 800e5b4:	20003188 	.word	0x20003188
 800e5b8:	0800efa8 	.word	0x0800efa8

0800e5bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	6039      	str	r1, [r7, #0]
 800e5c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	221a      	movs	r2, #26
 800e5cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e5ce:	f000 f843 	bl	800e658 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e5d2:	4b02      	ldr	r3, [pc, #8]	; (800e5dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3708      	adds	r7, #8
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}
 800e5dc:	20000174 	.word	0x20000174

0800e5e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	6039      	str	r1, [r7, #0]
 800e5ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e5ec:	79fb      	ldrb	r3, [r7, #7]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d105      	bne.n	800e5fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e5f2:	683a      	ldr	r2, [r7, #0]
 800e5f4:	4907      	ldr	r1, [pc, #28]	; (800e614 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e5f6:	4808      	ldr	r0, [pc, #32]	; (800e618 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e5f8:	f7fc fe76 	bl	800b2e8 <USBD_GetString>
 800e5fc:	e004      	b.n	800e608 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e5fe:	683a      	ldr	r2, [r7, #0]
 800e600:	4904      	ldr	r1, [pc, #16]	; (800e614 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e602:	4805      	ldr	r0, [pc, #20]	; (800e618 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e604:	f7fc fe70 	bl	800b2e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e608:	4b02      	ldr	r3, [pc, #8]	; (800e614 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3708      	adds	r7, #8
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	20003188 	.word	0x20003188
 800e618:	0800efbc 	.word	0x0800efbc

0800e61c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	4603      	mov	r3, r0
 800e624:	6039      	str	r1, [r7, #0]
 800e626:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e628:	79fb      	ldrb	r3, [r7, #7]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d105      	bne.n	800e63a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e62e:	683a      	ldr	r2, [r7, #0]
 800e630:	4907      	ldr	r1, [pc, #28]	; (800e650 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e632:	4808      	ldr	r0, [pc, #32]	; (800e654 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e634:	f7fc fe58 	bl	800b2e8 <USBD_GetString>
 800e638:	e004      	b.n	800e644 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e63a:	683a      	ldr	r2, [r7, #0]
 800e63c:	4904      	ldr	r1, [pc, #16]	; (800e650 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e63e:	4805      	ldr	r0, [pc, #20]	; (800e654 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e640:	f7fc fe52 	bl	800b2e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e644:	4b02      	ldr	r3, [pc, #8]	; (800e650 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e646:	4618      	mov	r0, r3
 800e648:	3708      	adds	r7, #8
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop
 800e650:	20003188 	.word	0x20003188
 800e654:	0800efc8 	.word	0x0800efc8

0800e658 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e65e:	4b0f      	ldr	r3, [pc, #60]	; (800e69c <Get_SerialNum+0x44>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e664:	4b0e      	ldr	r3, [pc, #56]	; (800e6a0 <Get_SerialNum+0x48>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e66a:	4b0e      	ldr	r3, [pc, #56]	; (800e6a4 <Get_SerialNum+0x4c>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e670:	68fa      	ldr	r2, [r7, #12]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	4413      	add	r3, r2
 800e676:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d009      	beq.n	800e692 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e67e:	2208      	movs	r2, #8
 800e680:	4909      	ldr	r1, [pc, #36]	; (800e6a8 <Get_SerialNum+0x50>)
 800e682:	68f8      	ldr	r0, [r7, #12]
 800e684:	f000 f814 	bl	800e6b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e688:	2204      	movs	r2, #4
 800e68a:	4908      	ldr	r1, [pc, #32]	; (800e6ac <Get_SerialNum+0x54>)
 800e68c:	68b8      	ldr	r0, [r7, #8]
 800e68e:	f000 f80f 	bl	800e6b0 <IntToUnicode>
  }
}
 800e692:	bf00      	nop
 800e694:	3710      	adds	r7, #16
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
 800e69a:	bf00      	nop
 800e69c:	1ffff7e8 	.word	0x1ffff7e8
 800e6a0:	1ffff7ec 	.word	0x1ffff7ec
 800e6a4:	1ffff7f0 	.word	0x1ffff7f0
 800e6a8:	20000176 	.word	0x20000176
 800e6ac:	20000186 	.word	0x20000186

0800e6b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b087      	sub	sp, #28
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	60b9      	str	r1, [r7, #8]
 800e6ba:	4613      	mov	r3, r2
 800e6bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	75fb      	strb	r3, [r7, #23]
 800e6c6:	e027      	b.n	800e718 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	0f1b      	lsrs	r3, r3, #28
 800e6cc:	2b09      	cmp	r3, #9
 800e6ce:	d80b      	bhi.n	800e6e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	0f1b      	lsrs	r3, r3, #28
 800e6d4:	b2da      	uxtb	r2, r3
 800e6d6:	7dfb      	ldrb	r3, [r7, #23]
 800e6d8:	005b      	lsls	r3, r3, #1
 800e6da:	4619      	mov	r1, r3
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	440b      	add	r3, r1
 800e6e0:	3230      	adds	r2, #48	; 0x30
 800e6e2:	b2d2      	uxtb	r2, r2
 800e6e4:	701a      	strb	r2, [r3, #0]
 800e6e6:	e00a      	b.n	800e6fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	0f1b      	lsrs	r3, r3, #28
 800e6ec:	b2da      	uxtb	r2, r3
 800e6ee:	7dfb      	ldrb	r3, [r7, #23]
 800e6f0:	005b      	lsls	r3, r3, #1
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	440b      	add	r3, r1
 800e6f8:	3237      	adds	r2, #55	; 0x37
 800e6fa:	b2d2      	uxtb	r2, r2
 800e6fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	011b      	lsls	r3, r3, #4
 800e702:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e704:	7dfb      	ldrb	r3, [r7, #23]
 800e706:	005b      	lsls	r3, r3, #1
 800e708:	3301      	adds	r3, #1
 800e70a:	68ba      	ldr	r2, [r7, #8]
 800e70c:	4413      	add	r3, r2
 800e70e:	2200      	movs	r2, #0
 800e710:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e712:	7dfb      	ldrb	r3, [r7, #23]
 800e714:	3301      	adds	r3, #1
 800e716:	75fb      	strb	r3, [r7, #23]
 800e718:	7dfa      	ldrb	r2, [r7, #23]
 800e71a:	79fb      	ldrb	r3, [r7, #7]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d3d3      	bcc.n	800e6c8 <IntToUnicode+0x18>
  }
}
 800e720:	bf00      	nop
 800e722:	bf00      	nop
 800e724:	371c      	adds	r7, #28
 800e726:	46bd      	mov	sp, r7
 800e728:	bc80      	pop	{r7}
 800e72a:	4770      	bx	lr

0800e72c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b084      	sub	sp, #16
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4a0d      	ldr	r2, [pc, #52]	; (800e770 <HAL_PCD_MspInit+0x44>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d113      	bne.n	800e766 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e73e:	4b0d      	ldr	r3, [pc, #52]	; (800e774 <HAL_PCD_MspInit+0x48>)
 800e740:	69db      	ldr	r3, [r3, #28]
 800e742:	4a0c      	ldr	r2, [pc, #48]	; (800e774 <HAL_PCD_MspInit+0x48>)
 800e744:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e748:	61d3      	str	r3, [r2, #28]
 800e74a:	4b0a      	ldr	r3, [pc, #40]	; (800e774 <HAL_PCD_MspInit+0x48>)
 800e74c:	69db      	ldr	r3, [r3, #28]
 800e74e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e752:	60fb      	str	r3, [r7, #12]
 800e754:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800e756:	2200      	movs	r2, #0
 800e758:	2105      	movs	r1, #5
 800e75a:	2014      	movs	r0, #20
 800e75c:	f7f4 fcdb 	bl	8003116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800e760:	2014      	movs	r0, #20
 800e762:	f7f4 fcf4 	bl	800314e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e766:	bf00      	nop
 800e768:	3710      	adds	r7, #16
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop
 800e770:	40005c00 	.word	0x40005c00
 800e774:	40021000 	.word	0x40021000

0800e778 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b082      	sub	sp, #8
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800e78c:	4619      	mov	r1, r3
 800e78e:	4610      	mov	r0, r2
 800e790:	f7fb fe79 	bl	800a486 <USBD_LL_SetupStage>
}
 800e794:	bf00      	nop
 800e796:	3708      	adds	r7, #8
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	460b      	mov	r3, r1
 800e7a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800e7ae:	78fa      	ldrb	r2, [r7, #3]
 800e7b0:	6879      	ldr	r1, [r7, #4]
 800e7b2:	4613      	mov	r3, r2
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	4413      	add	r3, r2
 800e7b8:	00db      	lsls	r3, r3, #3
 800e7ba:	440b      	add	r3, r1
 800e7bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e7c0:	681a      	ldr	r2, [r3, #0]
 800e7c2:	78fb      	ldrb	r3, [r7, #3]
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	f7fb feab 	bl	800a520 <USBD_LL_DataOutStage>
}
 800e7ca:	bf00      	nop
 800e7cc:	3708      	adds	r7, #8
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}

0800e7d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7d2:	b580      	push	{r7, lr}
 800e7d4:	b082      	sub	sp, #8
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	6078      	str	r0, [r7, #4]
 800e7da:	460b      	mov	r3, r1
 800e7dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800e7e4:	78fa      	ldrb	r2, [r7, #3]
 800e7e6:	6879      	ldr	r1, [r7, #4]
 800e7e8:	4613      	mov	r3, r2
 800e7ea:	009b      	lsls	r3, r3, #2
 800e7ec:	4413      	add	r3, r2
 800e7ee:	00db      	lsls	r3, r3, #3
 800e7f0:	440b      	add	r3, r1
 800e7f2:	333c      	adds	r3, #60	; 0x3c
 800e7f4:	681a      	ldr	r2, [r3, #0]
 800e7f6:	78fb      	ldrb	r3, [r7, #3]
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	f7fb ff02 	bl	800a602 <USBD_LL_DataInStage>
}
 800e7fe:	bf00      	nop
 800e800:	3708      	adds	r7, #8
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}

0800e806 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e806:	b580      	push	{r7, lr}
 800e808:	b082      	sub	sp, #8
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e814:	4618      	mov	r0, r3
 800e816:	f7fc f812 	bl	800a83e <USBD_LL_SOF>
}
 800e81a:	bf00      	nop
 800e81c:	3708      	adds	r7, #8
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}

0800e822 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e822:	b580      	push	{r7, lr}
 800e824:	b084      	sub	sp, #16
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e82a:	2301      	movs	r3, #1
 800e82c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	689b      	ldr	r3, [r3, #8]
 800e832:	2b02      	cmp	r3, #2
 800e834:	d001      	beq.n	800e83a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e836:	f7f2 fbd1 	bl	8000fdc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e840:	7bfa      	ldrb	r2, [r7, #15]
 800e842:	4611      	mov	r1, r2
 800e844:	4618      	mov	r0, r3
 800e846:	f7fb ffc2 	bl	800a7ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e850:	4618      	mov	r0, r3
 800e852:	f7fb ff7b 	bl	800a74c <USBD_LL_Reset>
}
 800e856:	bf00      	nop
 800e858:	3710      	adds	r7, #16
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
	...

0800e860 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b082      	sub	sp, #8
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e86e:	4618      	mov	r0, r3
 800e870:	f7fb ffbc 	bl	800a7ec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	699b      	ldr	r3, [r3, #24]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d005      	beq.n	800e888 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e87c:	4b04      	ldr	r3, [pc, #16]	; (800e890 <HAL_PCD_SuspendCallback+0x30>)
 800e87e:	691b      	ldr	r3, [r3, #16]
 800e880:	4a03      	ldr	r2, [pc, #12]	; (800e890 <HAL_PCD_SuspendCallback+0x30>)
 800e882:	f043 0306 	orr.w	r3, r3, #6
 800e886:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e888:	bf00      	nop
 800e88a:	3708      	adds	r7, #8
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	e000ed00 	.word	0xe000ed00

0800e894 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b082      	sub	sp, #8
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7fb ffb6 	bl	800a814 <USBD_LL_Resume>
}
 800e8a8:	bf00      	nop
 800e8aa:	3708      	adds	r7, #8
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}

0800e8b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e8b8:	4a28      	ldr	r2, [pc, #160]	; (800e95c <USBD_LL_Init+0xac>)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	4a26      	ldr	r2, [pc, #152]	; (800e95c <USBD_LL_Init+0xac>)
 800e8c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800e8c8:	4b24      	ldr	r3, [pc, #144]	; (800e95c <USBD_LL_Init+0xac>)
 800e8ca:	4a25      	ldr	r2, [pc, #148]	; (800e960 <USBD_LL_Init+0xb0>)
 800e8cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e8ce:	4b23      	ldr	r3, [pc, #140]	; (800e95c <USBD_LL_Init+0xac>)
 800e8d0:	2208      	movs	r2, #8
 800e8d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e8d4:	4b21      	ldr	r3, [pc, #132]	; (800e95c <USBD_LL_Init+0xac>)
 800e8d6:	2202      	movs	r2, #2
 800e8d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e8da:	4b20      	ldr	r3, [pc, #128]	; (800e95c <USBD_LL_Init+0xac>)
 800e8dc:	2200      	movs	r2, #0
 800e8de:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e8e0:	4b1e      	ldr	r3, [pc, #120]	; (800e95c <USBD_LL_Init+0xac>)
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e8e6:	4b1d      	ldr	r3, [pc, #116]	; (800e95c <USBD_LL_Init+0xac>)
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e8ec:	481b      	ldr	r0, [pc, #108]	; (800e95c <USBD_LL_Init+0xac>)
 800e8ee:	f7f5 fd0a 	bl	8004306 <HAL_PCD_Init>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d001      	beq.n	800e8fc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800e8f8:	f7f2 fb70 	bl	8000fdc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e902:	2318      	movs	r3, #24
 800e904:	2200      	movs	r2, #0
 800e906:	2100      	movs	r1, #0
 800e908:	f7f7 f980 	bl	8005c0c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e912:	2358      	movs	r3, #88	; 0x58
 800e914:	2200      	movs	r2, #0
 800e916:	2180      	movs	r1, #128	; 0x80
 800e918:	f7f7 f978 	bl	8005c0c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e922:	23c0      	movs	r3, #192	; 0xc0
 800e924:	2200      	movs	r2, #0
 800e926:	2181      	movs	r1, #129	; 0x81
 800e928:	f7f7 f970 	bl	8005c0c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e932:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e936:	2200      	movs	r2, #0
 800e938:	2101      	movs	r1, #1
 800e93a:	f7f7 f967 	bl	8005c0c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e944:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e948:	2200      	movs	r2, #0
 800e94a:	2182      	movs	r1, #130	; 0x82
 800e94c:	f7f7 f95e 	bl	8005c0c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e950:	2300      	movs	r3, #0
}
 800e952:	4618      	mov	r0, r3
 800e954:	3708      	adds	r7, #8
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	20003388 	.word	0x20003388
 800e960:	40005c00 	.word	0x40005c00

0800e964 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b084      	sub	sp, #16
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e96c:	2300      	movs	r3, #0
 800e96e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e970:	2300      	movs	r3, #0
 800e972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7f5 fdce 	bl	800451c <HAL_PCD_Start>
 800e980:	4603      	mov	r3, r0
 800e982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e984:	7bfb      	ldrb	r3, [r7, #15]
 800e986:	4618      	mov	r0, r3
 800e988:	f000 f94e 	bl	800ec28 <USBD_Get_USB_Status>
 800e98c:	4603      	mov	r3, r0
 800e98e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e990:	7bbb      	ldrb	r3, [r7, #14]
}
 800e992:	4618      	mov	r0, r3
 800e994:	3710      	adds	r7, #16
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}

0800e99a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e99a:	b580      	push	{r7, lr}
 800e99c:	b084      	sub	sp, #16
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]
 800e9a2:	4608      	mov	r0, r1
 800e9a4:	4611      	mov	r1, r2
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	70fb      	strb	r3, [r7, #3]
 800e9ac:	460b      	mov	r3, r1
 800e9ae:	70bb      	strb	r3, [r7, #2]
 800e9b0:	4613      	mov	r3, r2
 800e9b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e9c2:	78bb      	ldrb	r3, [r7, #2]
 800e9c4:	883a      	ldrh	r2, [r7, #0]
 800e9c6:	78f9      	ldrb	r1, [r7, #3]
 800e9c8:	f7f5 ff48 	bl	800485c <HAL_PCD_EP_Open>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9d0:	7bfb      	ldrb	r3, [r7, #15]
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f000 f928 	bl	800ec28 <USBD_Get_USB_Status>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3710      	adds	r7, #16
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}

0800e9e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9e6:	b580      	push	{r7, lr}
 800e9e8:	b084      	sub	sp, #16
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	6078      	str	r0, [r7, #4]
 800e9ee:	460b      	mov	r3, r1
 800e9f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea00:	78fa      	ldrb	r2, [r7, #3]
 800ea02:	4611      	mov	r1, r2
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7f5 ff8f 	bl	8004928 <HAL_PCD_EP_Close>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea0e:	7bfb      	ldrb	r3, [r7, #15]
 800ea10:	4618      	mov	r0, r3
 800ea12:	f000 f909 	bl	800ec28 <USBD_Get_USB_Status>
 800ea16:	4603      	mov	r3, r0
 800ea18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3710      	adds	r7, #16
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}

0800ea24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b084      	sub	sp, #16
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	460b      	mov	r3, r1
 800ea2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea30:	2300      	movs	r3, #0
 800ea32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea34:	2300      	movs	r3, #0
 800ea36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea3e:	78fa      	ldrb	r2, [r7, #3]
 800ea40:	4611      	mov	r1, r2
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7f6 f84f 	bl	8004ae6 <HAL_PCD_EP_SetStall>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea4c:	7bfb      	ldrb	r3, [r7, #15]
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f000 f8ea 	bl	800ec28 <USBD_Get_USB_Status>
 800ea54:	4603      	mov	r3, r0
 800ea56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3710      	adds	r7, #16
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b084      	sub	sp, #16
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea72:	2300      	movs	r3, #0
 800ea74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea7c:	78fa      	ldrb	r2, [r7, #3]
 800ea7e:	4611      	mov	r1, r2
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7f6 f890 	bl	8004ba6 <HAL_PCD_EP_ClrStall>
 800ea86:	4603      	mov	r3, r0
 800ea88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea8a:	7bfb      	ldrb	r3, [r7, #15]
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f000 f8cb 	bl	800ec28 <USBD_Get_USB_Status>
 800ea92:	4603      	mov	r3, r0
 800ea94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea96:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3710      	adds	r7, #16
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b085      	sub	sp, #20
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eab2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eab4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	da0c      	bge.n	800ead6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eabc:	78fb      	ldrb	r3, [r7, #3]
 800eabe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eac2:	68f9      	ldr	r1, [r7, #12]
 800eac4:	1c5a      	adds	r2, r3, #1
 800eac6:	4613      	mov	r3, r2
 800eac8:	009b      	lsls	r3, r3, #2
 800eaca:	4413      	add	r3, r2
 800eacc:	00db      	lsls	r3, r3, #3
 800eace:	440b      	add	r3, r1
 800ead0:	3302      	adds	r3, #2
 800ead2:	781b      	ldrb	r3, [r3, #0]
 800ead4:	e00b      	b.n	800eaee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ead6:	78fb      	ldrb	r3, [r7, #3]
 800ead8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eadc:	68f9      	ldr	r1, [r7, #12]
 800eade:	4613      	mov	r3, r2
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	4413      	add	r3, r2
 800eae4:	00db      	lsls	r3, r3, #3
 800eae6:	440b      	add	r3, r1
 800eae8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800eaec:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3714      	adds	r7, #20
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bc80      	pop	{r7}
 800eaf6:	4770      	bx	lr

0800eaf8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b084      	sub	sp, #16
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	460b      	mov	r3, r1
 800eb02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb04:	2300      	movs	r3, #0
 800eb06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb12:	78fa      	ldrb	r2, [r7, #3]
 800eb14:	4611      	mov	r1, r2
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7f5 fe7b 	bl	8004812 <HAL_PCD_SetAddress>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb20:	7bfb      	ldrb	r3, [r7, #15]
 800eb22:	4618      	mov	r0, r3
 800eb24:	f000 f880 	bl	800ec28 <USBD_Get_USB_Status>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3710      	adds	r7, #16
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}

0800eb36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800eb36:	b580      	push	{r7, lr}
 800eb38:	b086      	sub	sp, #24
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	60f8      	str	r0, [r7, #12]
 800eb3e:	607a      	str	r2, [r7, #4]
 800eb40:	461a      	mov	r2, r3
 800eb42:	460b      	mov	r3, r1
 800eb44:	72fb      	strb	r3, [r7, #11]
 800eb46:	4613      	mov	r3, r2
 800eb48:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800eb58:	893b      	ldrh	r3, [r7, #8]
 800eb5a:	7af9      	ldrb	r1, [r7, #11]
 800eb5c:	687a      	ldr	r2, [r7, #4]
 800eb5e:	f7f5 ff7f 	bl	8004a60 <HAL_PCD_EP_Transmit>
 800eb62:	4603      	mov	r3, r0
 800eb64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb66:	7dfb      	ldrb	r3, [r7, #23]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f000 f85d 	bl	800ec28 <USBD_Get_USB_Status>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eb72:	7dbb      	ldrb	r3, [r7, #22]
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3718      	adds	r7, #24
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b086      	sub	sp, #24
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	60f8      	str	r0, [r7, #12]
 800eb84:	607a      	str	r2, [r7, #4]
 800eb86:	461a      	mov	r2, r3
 800eb88:	460b      	mov	r3, r1
 800eb8a:	72fb      	strb	r3, [r7, #11]
 800eb8c:	4613      	mov	r3, r2
 800eb8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb90:	2300      	movs	r3, #0
 800eb92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb94:	2300      	movs	r3, #0
 800eb96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800eb9e:	893b      	ldrh	r3, [r7, #8]
 800eba0:	7af9      	ldrb	r1, [r7, #11]
 800eba2:	687a      	ldr	r2, [r7, #4]
 800eba4:	f7f5 ff08 	bl	80049b8 <HAL_PCD_EP_Receive>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebac:	7dfb      	ldrb	r3, [r7, #23]
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f000 f83a 	bl	800ec28 <USBD_Get_USB_Status>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ebb8:	7dbb      	ldrb	r3, [r7, #22]
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3718      	adds	r7, #24
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}

0800ebc2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebc2:	b580      	push	{r7, lr}
 800ebc4:	b082      	sub	sp, #8
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
 800ebca:	460b      	mov	r3, r1
 800ebcc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebd4:	78fa      	ldrb	r2, [r7, #3]
 800ebd6:	4611      	mov	r1, r2
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f7f5 ff2a 	bl	8004a32 <HAL_PCD_EP_GetRxCount>
 800ebde:	4603      	mov	r3, r0
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	3708      	adds	r7, #8
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b083      	sub	sp, #12
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ebf0:	4b02      	ldr	r3, [pc, #8]	; (800ebfc <USBD_static_malloc+0x14>)
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	370c      	adds	r7, #12
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bc80      	pop	{r7}
 800ebfa:	4770      	bx	lr
 800ebfc:	20002258 	.word	0x20002258

0800ec00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b083      	sub	sp, #12
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]

}
 800ec08:	bf00      	nop
 800ec0a:	370c      	adds	r7, #12
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bc80      	pop	{r7}
 800ec10:	4770      	bx	lr

0800ec12 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec12:	b480      	push	{r7}
 800ec14:	b083      	sub	sp, #12
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	6078      	str	r0, [r7, #4]
 800ec1a:	460b      	mov	r3, r1
 800ec1c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ec1e:	bf00      	nop
 800ec20:	370c      	adds	r7, #12
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bc80      	pop	{r7}
 800ec26:	4770      	bx	lr

0800ec28 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b085      	sub	sp, #20
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	4603      	mov	r3, r0
 800ec30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec32:	2300      	movs	r3, #0
 800ec34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ec36:	79fb      	ldrb	r3, [r7, #7]
 800ec38:	2b03      	cmp	r3, #3
 800ec3a:	d817      	bhi.n	800ec6c <USBD_Get_USB_Status+0x44>
 800ec3c:	a201      	add	r2, pc, #4	; (adr r2, 800ec44 <USBD_Get_USB_Status+0x1c>)
 800ec3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec42:	bf00      	nop
 800ec44:	0800ec55 	.word	0x0800ec55
 800ec48:	0800ec5b 	.word	0x0800ec5b
 800ec4c:	0800ec61 	.word	0x0800ec61
 800ec50:	0800ec67 	.word	0x0800ec67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ec54:	2300      	movs	r3, #0
 800ec56:	73fb      	strb	r3, [r7, #15]
    break;
 800ec58:	e00b      	b.n	800ec72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec5a:	2302      	movs	r3, #2
 800ec5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ec5e:	e008      	b.n	800ec72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec60:	2301      	movs	r3, #1
 800ec62:	73fb      	strb	r3, [r7, #15]
    break;
 800ec64:	e005      	b.n	800ec72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec66:	2302      	movs	r3, #2
 800ec68:	73fb      	strb	r3, [r7, #15]
    break;
 800ec6a:	e002      	b.n	800ec72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ec6c:	2302      	movs	r3, #2
 800ec6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ec70:	bf00      	nop
  }
  return usb_status;
 800ec72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	3714      	adds	r7, #20
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bc80      	pop	{r7}
 800ec7c:	4770      	bx	lr
 800ec7e:	bf00      	nop

0800ec80 <__libc_init_array>:
 800ec80:	b570      	push	{r4, r5, r6, lr}
 800ec82:	2600      	movs	r6, #0
 800ec84:	4d0c      	ldr	r5, [pc, #48]	; (800ecb8 <__libc_init_array+0x38>)
 800ec86:	4c0d      	ldr	r4, [pc, #52]	; (800ecbc <__libc_init_array+0x3c>)
 800ec88:	1b64      	subs	r4, r4, r5
 800ec8a:	10a4      	asrs	r4, r4, #2
 800ec8c:	42a6      	cmp	r6, r4
 800ec8e:	d109      	bne.n	800eca4 <__libc_init_array+0x24>
 800ec90:	f000 f862 	bl	800ed58 <_init>
 800ec94:	2600      	movs	r6, #0
 800ec96:	4d0a      	ldr	r5, [pc, #40]	; (800ecc0 <__libc_init_array+0x40>)
 800ec98:	4c0a      	ldr	r4, [pc, #40]	; (800ecc4 <__libc_init_array+0x44>)
 800ec9a:	1b64      	subs	r4, r4, r5
 800ec9c:	10a4      	asrs	r4, r4, #2
 800ec9e:	42a6      	cmp	r6, r4
 800eca0:	d105      	bne.n	800ecae <__libc_init_array+0x2e>
 800eca2:	bd70      	pop	{r4, r5, r6, pc}
 800eca4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eca8:	4798      	blx	r3
 800ecaa:	3601      	adds	r6, #1
 800ecac:	e7ee      	b.n	800ec8c <__libc_init_array+0xc>
 800ecae:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecb2:	4798      	blx	r3
 800ecb4:	3601      	adds	r6, #1
 800ecb6:	e7f2      	b.n	800ec9e <__libc_init_array+0x1e>
 800ecb8:	0800f614 	.word	0x0800f614
 800ecbc:	0800f614 	.word	0x0800f614
 800ecc0:	0800f614 	.word	0x0800f614
 800ecc4:	0800f618 	.word	0x0800f618

0800ecc8 <memcpy>:
 800ecc8:	440a      	add	r2, r1
 800ecca:	4291      	cmp	r1, r2
 800eccc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ecd0:	d100      	bne.n	800ecd4 <memcpy+0xc>
 800ecd2:	4770      	bx	lr
 800ecd4:	b510      	push	{r4, lr}
 800ecd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecda:	4291      	cmp	r1, r2
 800ecdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ece0:	d1f9      	bne.n	800ecd6 <memcpy+0xe>
 800ece2:	bd10      	pop	{r4, pc}

0800ece4 <memmove>:
 800ece4:	4288      	cmp	r0, r1
 800ece6:	b510      	push	{r4, lr}
 800ece8:	eb01 0402 	add.w	r4, r1, r2
 800ecec:	d902      	bls.n	800ecf4 <memmove+0x10>
 800ecee:	4284      	cmp	r4, r0
 800ecf0:	4623      	mov	r3, r4
 800ecf2:	d807      	bhi.n	800ed04 <memmove+0x20>
 800ecf4:	1e43      	subs	r3, r0, #1
 800ecf6:	42a1      	cmp	r1, r4
 800ecf8:	d008      	beq.n	800ed0c <memmove+0x28>
 800ecfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ecfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed02:	e7f8      	b.n	800ecf6 <memmove+0x12>
 800ed04:	4601      	mov	r1, r0
 800ed06:	4402      	add	r2, r0
 800ed08:	428a      	cmp	r2, r1
 800ed0a:	d100      	bne.n	800ed0e <memmove+0x2a>
 800ed0c:	bd10      	pop	{r4, pc}
 800ed0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed16:	e7f7      	b.n	800ed08 <memmove+0x24>

0800ed18 <memset>:
 800ed18:	4603      	mov	r3, r0
 800ed1a:	4402      	add	r2, r0
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	d100      	bne.n	800ed22 <memset+0xa>
 800ed20:	4770      	bx	lr
 800ed22:	f803 1b01 	strb.w	r1, [r3], #1
 800ed26:	e7f9      	b.n	800ed1c <memset+0x4>

0800ed28 <strstr>:
 800ed28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed2a:	780c      	ldrb	r4, [r1, #0]
 800ed2c:	b164      	cbz	r4, 800ed48 <strstr+0x20>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	781a      	ldrb	r2, [r3, #0]
 800ed32:	4618      	mov	r0, r3
 800ed34:	1c5e      	adds	r6, r3, #1
 800ed36:	b90a      	cbnz	r2, 800ed3c <strstr+0x14>
 800ed38:	4610      	mov	r0, r2
 800ed3a:	e005      	b.n	800ed48 <strstr+0x20>
 800ed3c:	4294      	cmp	r4, r2
 800ed3e:	d108      	bne.n	800ed52 <strstr+0x2a>
 800ed40:	460d      	mov	r5, r1
 800ed42:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800ed46:	b902      	cbnz	r2, 800ed4a <strstr+0x22>
 800ed48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed4a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800ed4e:	4297      	cmp	r7, r2
 800ed50:	d0f7      	beq.n	800ed42 <strstr+0x1a>
 800ed52:	4633      	mov	r3, r6
 800ed54:	e7ec      	b.n	800ed30 <strstr+0x8>
	...

0800ed58 <_init>:
 800ed58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed5a:	bf00      	nop
 800ed5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed5e:	bc08      	pop	{r3}
 800ed60:	469e      	mov	lr, r3
 800ed62:	4770      	bx	lr

0800ed64 <_fini>:
 800ed64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed66:	bf00      	nop
 800ed68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed6a:	bc08      	pop	{r3}
 800ed6c:	469e      	mov	lr, r3
 800ed6e:	4770      	bx	lr
