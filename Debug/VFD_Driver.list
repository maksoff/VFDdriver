
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d850  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  0800d960  0800d960  0001d960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0a4  0800e0a4  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800e0a4  0800e0a4  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e0a4  0800e0a4  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0a4  0800e0a4  0001e0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0a8  0800e0a8  0001e0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800e0ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003488  20000190  0800e23c  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003618  0800e23c  00023618  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002be60  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005dac  00000000  00000000  0004c019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de8  00000000  00000000  00051dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bd0  00000000  00000000  00053bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e707  00000000  00000000  00055780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023d63  00000000  00000000  00073e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c4c5  00000000  00000000  00097bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001340af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bec  00000000  00000000  00134104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000190 	.word	0x20000190
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d948 	.word	0x0800d948

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000194 	.word	0x20000194
 800014c:	0800d948 	.word	0x0800d948

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qUSB_rcv */
  qUSB_rcvHandle = osMessageQueueNew (64, sizeof(uint8_t), &qUSB_rcv_attributes);
 8000178:	4a1a      	ldr	r2, [pc, #104]	; (80001e4 <MX_FREERTOS_Init+0x70>)
 800017a:	2101      	movs	r1, #1
 800017c:	2040      	movs	r0, #64	; 0x40
 800017e:	f00a f8c3 	bl	800a308 <osMessageQueueNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a18      	ldr	r2, [pc, #96]	; (80001e8 <MX_FREERTOS_Init+0x74>)
 8000186:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000188:	4a18      	ldr	r2, [pc, #96]	; (80001ec <MX_FREERTOS_Init+0x78>)
 800018a:	2100      	movs	r1, #0
 800018c:	4818      	ldr	r0, [pc, #96]	; (80001f0 <MX_FREERTOS_Init+0x7c>)
 800018e:	f009 ffe3 	bl	800a158 <osThreadNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a17      	ldr	r2, [pc, #92]	; (80001f4 <MX_FREERTOS_Init+0x80>)
 8000196:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 8000198:	4a17      	ldr	r2, [pc, #92]	; (80001f8 <MX_FREERTOS_Init+0x84>)
 800019a:	2100      	movs	r1, #0
 800019c:	4817      	ldr	r0, [pc, #92]	; (80001fc <MX_FREERTOS_Init+0x88>)
 800019e:	f009 ffdb 	bl	800a158 <osThreadNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a16      	ldr	r2, [pc, #88]	; (8000200 <MX_FREERTOS_Init+0x8c>)
 80001a6:	6013      	str	r3, [r2, #0]

  /* creation of taskUSB_rcv */
  taskUSB_rcvHandle = osThreadNew(StartUSB_rcv, NULL, &taskUSB_rcv_attributes);
 80001a8:	4a16      	ldr	r2, [pc, #88]	; (8000204 <MX_FREERTOS_Init+0x90>)
 80001aa:	2100      	movs	r1, #0
 80001ac:	4816      	ldr	r0, [pc, #88]	; (8000208 <MX_FREERTOS_Init+0x94>)
 80001ae:	f009 ffd3 	bl	800a158 <osThreadNew>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a15      	ldr	r2, [pc, #84]	; (800020c <MX_FREERTOS_Init+0x98>)
 80001b6:	6013      	str	r3, [r2, #0]

  /* creation of UARTtask */
  UARTtaskHandle = osThreadNew(StartUARTtask, NULL, &UARTtask_attributes);
 80001b8:	4a15      	ldr	r2, [pc, #84]	; (8000210 <MX_FREERTOS_Init+0x9c>)
 80001ba:	2100      	movs	r1, #0
 80001bc:	4815      	ldr	r0, [pc, #84]	; (8000214 <MX_FREERTOS_Init+0xa0>)
 80001be:	f009 ffcb 	bl	800a158 <osThreadNew>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a14      	ldr	r2, [pc, #80]	; (8000218 <MX_FREERTOS_Init+0xa4>)
 80001c6:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(StartEncoder, NULL, &Encoder_attributes);
 80001c8:	4a14      	ldr	r2, [pc, #80]	; (800021c <MX_FREERTOS_Init+0xa8>)
 80001ca:	2100      	movs	r1, #0
 80001cc:	4814      	ldr	r0, [pc, #80]	; (8000220 <MX_FREERTOS_Init+0xac>)
 80001ce:	f009 ffc3 	bl	800a158 <osThreadNew>
 80001d2:	4603      	mov	r3, r0
 80001d4:	4a13      	ldr	r2, [pc, #76]	; (8000224 <MX_FREERTOS_Init+0xb0>)
 80001d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  qUSB_rcvQueue = qUSB_rcvHandle; // adding to freertos_inc.h
 80001d8:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <MX_FREERTOS_Init+0x74>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a12      	ldr	r2, [pc, #72]	; (8000228 <MX_FREERTOS_Init+0xb4>)
 80001de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	0800dc34 	.word	0x0800dc34
 80001e8:	20002488 	.word	0x20002488
 80001ec:	0800db80 	.word	0x0800db80
 80001f0:	0800022d 	.word	0x0800022d
 80001f4:	20002478 	.word	0x20002478
 80001f8:	0800dba4 	.word	0x0800dba4
 80001fc:	08000265 	.word	0x08000265
 8000200:	2000247c 	.word	0x2000247c
 8000204:	0800dbc8 	.word	0x0800dbc8
 8000208:	08000299 	.word	0x08000299
 800020c:	20002484 	.word	0x20002484
 8000210:	0800dbec 	.word	0x0800dbec
 8000214:	080002e1 	.word	0x080002e1
 8000218:	20002480 	.word	0x20002480
 800021c:	0800dc10 	.word	0x0800dc10
 8000220:	0800031d 	.word	0x0800031d
 8000224:	20002490 	.word	0x20002490
 8000228:	2000248c 	.word	0x2000248c

0800022c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000234:	f00c fe5a 	bl	800ceec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */


  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 8000238:	2201      	movs	r2, #1
 800023a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800023e:	4808      	ldr	r0, [pc, #32]	; (8000260 <StartDefaultTask+0x34>)
 8000240:	f002 fe01 	bl	8002e46 <HAL_GPIO_WritePin>
  osDelay(10);
 8000244:	200a      	movs	r0, #10
 8000246:	f00a f831 	bl	800a2ac <osDelay>
  init_microrl();
 800024a:	f001 ff5f 	bl	800210c <init_microrl>
  set_CDC_ready(); // allow to send
 800024e:	f001 ff97 	bl	8002180 <set_CDC_ready>

  //vTaskDelete(NULL);
  /* Infinite loop */
  for(;;)
  {
    process_encoder();
 8000252:	f000 f9e1 	bl	8000618 <process_encoder>
    osDelay(1);
 8000256:	2001      	movs	r0, #1
 8000258:	f00a f828 	bl	800a2ac <osDelay>
    process_encoder();
 800025c:	e7f9      	b.n	8000252 <StartDefaultTask+0x26>
 800025e:	bf00      	nop
 8000260:	40010800 	.word	0x40010800

08000264 <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 800026c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000270:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 8000272:	f00b fa2f 	bl	800b6d4 <xTaskGetTickCount>
 8000276:	4603      	mov	r3, r0
 8000278:	60bb      	str	r3, [r7, #8]

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800027a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027e:	4805      	ldr	r0, [pc, #20]	; (8000294 <StartLEDheartbeat+0x30>)
 8000280:	f002 fdf9 	bl	8002e76 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000284:	f107 0308 	add.w	r3, r7, #8
 8000288:	68f9      	ldr	r1, [r7, #12]
 800028a:	4618      	mov	r0, r3
 800028c:	f00b f85e 	bl	800b34c <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8000290:	e7ef      	b.n	8000272 <StartLEDheartbeat+0xe>
 8000292:	bf00      	nop
 8000294:	40011000 	.word	0x40011000

08000298 <StartUSB_rcv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSB_rcv */
void StartUSB_rcv(void *argument)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	char buf;

	UBaseType_t uxHighWaterMark, uxHighWaterMark_old;

	/* Inspect our own high water mark on entering the task. */
	uxHighWaterMark_old = uxTaskGetStackHighWaterMark( NULL );
 80002a0:	2000      	movs	r0, #0
 80002a2:	f00b fd19 	bl	800bcd8 <uxTaskGetStackHighWaterMark>
 80002a6:	6178      	str	r0, [r7, #20]
	uxHighWaterMark = uxHighWaterMark_old;
 80002a8:	697b      	ldr	r3, [r7, #20]
 80002aa:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <StartUSB_rcv+0x44>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	f107 010f 	add.w	r1, r7, #15
 80002b4:	f04f 32ff 	mov.w	r2, #4294967295
 80002b8:	4618      	mov	r0, r3
 80002ba:	f00a fc63 	bl	800ab84 <xQueueReceive>
	  microrl_print_char(buf);
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fbdf 	bl	8001a84 <microrl_print_char>
	  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80002c6:	2000      	movs	r0, #0
 80002c8:	f00b fd06 	bl	800bcd8 <uxTaskGetStackHighWaterMark>
 80002cc:	6138      	str	r0, [r7, #16]
	  if (uxHighWaterMark < uxHighWaterMark_old)
 80002ce:	693a      	ldr	r2, [r7, #16]
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d2ea      	bcs.n	80002ac <StartUSB_rcv+0x14>
	  {
		  uxHighWaterMark_old = uxHighWaterMark;
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	617b      	str	r3, [r7, #20]
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80002da:	e7e7      	b.n	80002ac <StartUSB_rcv+0x14>
 80002dc:	2000248c 	.word	0x2000248c

080002e0 <StartUARTtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTtask */
void StartUARTtask(void *argument)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  uint8_t data;
  for(;;)
  {
	HAL_UART_Receive_IT(&huart2, &data, 1);
 80002e8:	f107 030f 	add.w	r3, r7, #15
 80002ec:	2201      	movs	r2, #1
 80002ee:	4619      	mov	r1, r3
 80002f0:	4809      	ldr	r0, [pc, #36]	; (8000318 <StartUARTtask+0x38>)
 80002f2:	f005 fcc0 	bl	8005c76 <HAL_UART_Receive_IT>
	/* Wait to be notified of an interrupt. */
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 80002f6:	f04f 31ff 	mov.w	r1, #4294967295
 80002fa:	2001      	movs	r0, #1
 80002fc:	f00b fde8 	bl	800bed0 <ulTaskNotifyTake>
	if (get_nema())
 8000300:	f002 f848 	bl	8002394 <get_nema>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0ee      	beq.n	80002e8 <StartUARTtask+0x8>
		CDC_Transmit_FS(&data, 1);
 800030a:	f107 030f 	add.w	r3, r7, #15
 800030e:	2101      	movs	r1, #1
 8000310:	4618      	mov	r0, r3
 8000312:	f00c fecf 	bl	800d0b4 <CDC_Transmit_FS>
	HAL_UART_Receive_IT(&huart2, &data, 1);
 8000316:	e7e7      	b.n	80002e8 <StartUARTtask+0x8>
 8000318:	20002610 	.word	0x20002610

0800031c <StartEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoder */
void StartEncoder(void *argument)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b08e      	sub	sp, #56	; 0x38
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoder */

	static bool invert = false;
	static bool released = true;

  osDelay(200);
 8000324:	20c8      	movs	r0, #200	; 0xc8
 8000326:	f009 ffc1 	bl	800a2ac <osDelay>
  union VFD {
	  uint8_t arr2[11][3];
	  uint8_t arr1[11*3];
  } vfd;

  for (int i = 0; i < sizeof(vfd.arr1); i++)
 800032a:	2300      	movs	r3, #0
 800032c:	637b      	str	r3, [r7, #52]	; 0x34
 800032e:	e008      	b.n	8000342 <StartEncoder+0x26>
  {
	  vfd.arr1[i] = 0;
 8000330:	f107 0210 	add.w	r2, r7, #16
 8000334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000336:	4413      	add	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < sizeof(vfd.arr1); i++)
 800033c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800033e:	3301      	adds	r3, #1
 8000340:	637b      	str	r3, [r7, #52]	; 0x34
 8000342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000344:	2b20      	cmp	r3, #32
 8000346:	d9f3      	bls.n	8000330 <StartEncoder+0x14>
  }
  uint8_t data;

  data = 0b01000000; // command 2, write to Display port
 8000348:	2340      	movs	r3, #64	; 0x40
 800034a:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000352:	4898      	ldr	r0, [pc, #608]	; (80005b4 <StartEncoder+0x298>)
 8000354:	f002 fd77 	bl	8002e46 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000358:	f107 010f 	add.w	r1, r7, #15
 800035c:	f04f 33ff 	mov.w	r3, #4294967295
 8000360:	2201      	movs	r2, #1
 8000362:	4895      	ldr	r0, [pc, #596]	; (80005b8 <StartEncoder+0x29c>)
 8000364:	f005 f80e 	bl	8005384 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000368:	2201      	movs	r2, #1
 800036a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800036e:	4891      	ldr	r0, [pc, #580]	; (80005b4 <StartEncoder+0x298>)
 8000370:	f002 fd69 	bl	8002e46 <HAL_GPIO_WritePin>
  osDelay(10);
 8000374:	200a      	movs	r0, #10
 8000376:	f009 ff99 	bl	800a2ac <osDelay>
  data = 0b11000000; // command 3, set address to 0
 800037a:	23c0      	movs	r3, #192	; 0xc0
 800037c:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800037e:	2200      	movs	r2, #0
 8000380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000384:	488b      	ldr	r0, [pc, #556]	; (80005b4 <StartEncoder+0x298>)
 8000386:	f002 fd5e 	bl	8002e46 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800038a:	f107 010f 	add.w	r1, r7, #15
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
 8000392:	2201      	movs	r2, #1
 8000394:	4888      	ldr	r0, [pc, #544]	; (80005b8 <StartEncoder+0x29c>)
 8000396:	f004 fff5 	bl	8005384 <HAL_SPI_Transmit>


  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 800039a:	f107 0110 	add.w	r1, r7, #16
 800039e:	f04f 33ff 	mov.w	r3, #4294967295
 80003a2:	2221      	movs	r2, #33	; 0x21
 80003a4:	4884      	ldr	r0, [pc, #528]	; (80005b8 <StartEncoder+0x29c>)
 80003a6:	f004 ffed 	bl	8005384 <HAL_SPI_Transmit>

//  for (uint8_t i = 0; i < sizeof(vfd.arr1); i++)
//  {
//	  osDelay(10);
//  }
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80003aa:	2201      	movs	r2, #1
 80003ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003b0:	4880      	ldr	r0, [pc, #512]	; (80005b4 <StartEncoder+0x298>)
 80003b2:	f002 fd48 	bl	8002e46 <HAL_GPIO_WritePin>
  osDelay(10);
 80003b6:	200a      	movs	r0, #10
 80003b8:	f009 ff78 	bl	800a2ac <osDelay>

  data = 0b11000000; // command 3, set address to 0
 80003bc:	23c0      	movs	r3, #192	; 0xc0
 80003be:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003c6:	487b      	ldr	r0, [pc, #492]	; (80005b4 <StartEncoder+0x298>)
 80003c8:	f002 fd3d 	bl	8002e46 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80003cc:	f107 010f 	add.w	r1, r7, #15
 80003d0:	f04f 33ff 	mov.w	r3, #4294967295
 80003d4:	2201      	movs	r2, #1
 80003d6:	4878      	ldr	r0, [pc, #480]	; (80005b8 <StartEncoder+0x29c>)
 80003d8:	f004 ffd4 	bl	8005384 <HAL_SPI_Transmit>


  for (uint8_t i = 0; i < sizeof(vfd.arr1); i++)
 80003dc:	2300      	movs	r3, #0
 80003de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80003e2:	e00c      	b.n	80003fe <StartEncoder+0xe2>
  {
	  vfd.arr1[i] = 0xaa;
 80003e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80003e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80003ec:	4413      	add	r3, r2
 80003ee:	22aa      	movs	r2, #170	; 0xaa
 80003f0:	f803 2c28 	strb.w	r2, [r3, #-40]
  for (uint8_t i = 0; i < sizeof(vfd.arr1); i++)
 80003f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80003f8:	3301      	adds	r3, #1
 80003fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80003fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000402:	2b20      	cmp	r3, #32
 8000404:	d9ee      	bls.n	80003e4 <StartEncoder+0xc8>
  }

  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000406:	f107 0110 	add.w	r1, r7, #16
 800040a:	f04f 33ff 	mov.w	r3, #4294967295
 800040e:	2221      	movs	r2, #33	; 0x21
 8000410:	4869      	ldr	r0, [pc, #420]	; (80005b8 <StartEncoder+0x29c>)
 8000412:	f004 ffb7 	bl	8005384 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000416:	2201      	movs	r2, #1
 8000418:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041c:	4865      	ldr	r0, [pc, #404]	; (80005b4 <StartEncoder+0x298>)
 800041e:	f002 fd12 	bl	8002e46 <HAL_GPIO_WritePin>
  osDelay(10);
 8000422:	200a      	movs	r0, #10
 8000424:	f009 ff42 	bl	800a2ac <osDelay>
  // init display, 11 digits 17 segments
  data = 0b00000111; // command 1, 11 digits 17 segments
 8000428:	2307      	movs	r3, #7
 800042a:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800042c:	2200      	movs	r2, #0
 800042e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000432:	4860      	ldr	r0, [pc, #384]	; (80005b4 <StartEncoder+0x298>)
 8000434:	f002 fd07 	bl	8002e46 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000438:	f107 010f 	add.w	r1, r7, #15
 800043c:	f04f 33ff 	mov.w	r3, #4294967295
 8000440:	2201      	movs	r2, #1
 8000442:	485d      	ldr	r0, [pc, #372]	; (80005b8 <StartEncoder+0x29c>)
 8000444:	f004 ff9e 	bl	8005384 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000448:	2201      	movs	r2, #1
 800044a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800044e:	4859      	ldr	r0, [pc, #356]	; (80005b4 <StartEncoder+0x298>)
 8000450:	f002 fcf9 	bl	8002e46 <HAL_GPIO_WritePin>

  osDelay(10);
 8000454:	200a      	movs	r0, #10
 8000456:	f009 ff29 	bl	800a2ac <osDelay>
  data = 0b01000000; // command 2, write to Display port
 800045a:	2340      	movs	r3, #64	; 0x40
 800045c:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000464:	4853      	ldr	r0, [pc, #332]	; (80005b4 <StartEncoder+0x298>)
 8000466:	f002 fcee 	bl	8002e46 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800046a:	f107 010f 	add.w	r1, r7, #15
 800046e:	f04f 33ff 	mov.w	r3, #4294967295
 8000472:	2201      	movs	r2, #1
 8000474:	4850      	ldr	r0, [pc, #320]	; (80005b8 <StartEncoder+0x29c>)
 8000476:	f004 ff85 	bl	8005384 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800047a:	2201      	movs	r2, #1
 800047c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000480:	484c      	ldr	r0, [pc, #304]	; (80005b4 <StartEncoder+0x298>)
 8000482:	f002 fce0 	bl	8002e46 <HAL_GPIO_WritePin>
  osDelay(10);
 8000486:	200a      	movs	r0, #10
 8000488:	f009 ff10 	bl	800a2ac <osDelay>

  /* Infinite loop */
  for(;;)
  {

	  if (HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin))
 800048c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000490:	4848      	ldr	r0, [pc, #288]	; (80005b4 <StartEncoder+0x298>)
 8000492:	f002 fcc1 	bl	8002e18 <HAL_GPIO_ReadPin>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d003      	beq.n	80004a4 <StartEncoder+0x188>
	  {
		  released = true;
 800049c:	4b47      	ldr	r3, [pc, #284]	; (80005bc <StartEncoder+0x2a0>)
 800049e:	2201      	movs	r2, #1
 80004a0:	701a      	strb	r2, [r3, #0]
 80004a2:	e015      	b.n	80004d0 <StartEncoder+0x1b4>
	  } else if (released)
 80004a4:	4b45      	ldr	r3, [pc, #276]	; (80005bc <StartEncoder+0x2a0>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d011      	beq.n	80004d0 <StartEncoder+0x1b4>
	  {
		  released = false;
 80004ac:	4b43      	ldr	r3, [pc, #268]	; (80005bc <StartEncoder+0x2a0>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	701a      	strb	r2, [r3, #0]
		  invert = !invert;
 80004b2:	4b43      	ldr	r3, [pc, #268]	; (80005c0 <StartEncoder+0x2a4>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	bf14      	ite	ne
 80004ba:	2301      	movne	r3, #1
 80004bc:	2300      	moveq	r3, #0
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	f083 0301 	eor.w	r3, r3, #1
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	b2da      	uxtb	r2, r3
 80004cc:	4b3c      	ldr	r3, [pc, #240]	; (80005c0 <StartEncoder+0x2a4>)
 80004ce:	701a      	strb	r2, [r3, #0]
	  }

	  data = 0b01000001; // command 2, write to LED port
 80004d0:	2341      	movs	r3, #65	; 0x41
 80004d2:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004da:	4836      	ldr	r0, [pc, #216]	; (80005b4 <StartEncoder+0x298>)
 80004dc:	f002 fcb3 	bl	8002e46 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80004e0:	f107 010f 	add.w	r1, r7, #15
 80004e4:	f04f 33ff 	mov.w	r3, #4294967295
 80004e8:	2201      	movs	r2, #1
 80004ea:	4833      	ldr	r0, [pc, #204]	; (80005b8 <StartEncoder+0x29c>)
 80004ec:	f004 ff4a 	bl	8005384 <HAL_SPI_Transmit>
	  osDelay(10);
 80004f0:	200a      	movs	r0, #10
 80004f2:	f009 fedb 	bl	800a2ac <osDelay>

	  data = ~(1<<((encoder_value >> 2)&0b11));
 80004f6:	4b33      	ldr	r3, [pc, #204]	; (80005c4 <StartEncoder+0x2a8>)
 80004f8:	881b      	ldrh	r3, [r3, #0]
 80004fa:	089b      	lsrs	r3, r3, #2
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	f003 0303 	and.w	r3, r3, #3
 8000502:	2201      	movs	r2, #1
 8000504:	fa02 f303 	lsl.w	r3, r2, r3
 8000508:	b2db      	uxtb	r3, r3
 800050a:	43db      	mvns	r3, r3
 800050c:	b2db      	uxtb	r3, r3
 800050e:	73fb      	strb	r3, [r7, #15]
	  if (invert)
 8000510:	4b2b      	ldr	r3, [pc, #172]	; (80005c0 <StartEncoder+0x2a4>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d003      	beq.n	8000520 <StartEncoder+0x204>
		  data =~data;
 8000518:	7bfb      	ldrb	r3, [r7, #15]
 800051a:	43db      	mvns	r3, r3
 800051c:	b2db      	uxtb	r3, r3
 800051e:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, invert);
 8000520:	4b27      	ldr	r3, [pc, #156]	; (80005c0 <StartEncoder+0x2a4>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	461a      	mov	r2, r3
 8000526:	2120      	movs	r1, #32
 8000528:	4822      	ldr	r0, [pc, #136]	; (80005b4 <StartEncoder+0x298>)
 800052a:	f002 fc8c 	bl	8002e46 <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800052e:	f107 010f 	add.w	r1, r7, #15
 8000532:	f04f 33ff 	mov.w	r3, #4294967295
 8000536:	2201      	movs	r2, #1
 8000538:	481f      	ldr	r0, [pc, #124]	; (80005b8 <StartEncoder+0x29c>)
 800053a:	f004 ff23 	bl	8005384 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000544:	481b      	ldr	r0, [pc, #108]	; (80005b4 <StartEncoder+0x298>)
 8000546:	f002 fc7e 	bl	8002e46 <HAL_GPIO_WritePin>

	  osDelay(10);
 800054a:	200a      	movs	r0, #10
 800054c:	f009 feae 	bl	800a2ac <osDelay>
	  data = 0b10000000; // command 4
 8000550:	2380      	movs	r3, #128	; 0x80
 8000552:	73fb      	strb	r3, [r7, #15]
	  data |= invert<<3; // enable/disable display
 8000554:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <StartEncoder+0x2a4>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	00db      	lsls	r3, r3, #3
 800055a:	b25a      	sxtb	r2, r3
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	b25b      	sxtb	r3, r3
 8000560:	4313      	orrs	r3, r2
 8000562:	b25b      	sxtb	r3, r3
 8000564:	b2db      	uxtb	r3, r3
 8000566:	73fb      	strb	r3, [r7, #15]
	  data |= (encoder_value >> 2)&0b111; // set brightness
 8000568:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <StartEncoder+0x2a8>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	089b      	lsrs	r3, r3, #2
 800056e:	b29b      	uxth	r3, r3
 8000570:	b25b      	sxtb	r3, r3
 8000572:	f003 0307 	and.w	r3, r3, #7
 8000576:	b25a      	sxtb	r2, r3
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	b25b      	sxtb	r3, r3
 800057c:	4313      	orrs	r3, r2
 800057e:	b25b      	sxtb	r3, r3
 8000580:	b2db      	uxtb	r3, r3
 8000582:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058a:	480a      	ldr	r0, [pc, #40]	; (80005b4 <StartEncoder+0x298>)
 800058c:	f002 fc5b 	bl	8002e46 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000590:	f107 010f 	add.w	r1, r7, #15
 8000594:	f04f 33ff 	mov.w	r3, #4294967295
 8000598:	2201      	movs	r2, #1
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <StartEncoder+0x29c>)
 800059c:	f004 fef2 	bl	8005384 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <StartEncoder+0x298>)
 80005a8:	f002 fc4d 	bl	8002e46 <HAL_GPIO_WritePin>
	  osDelay(10);
 80005ac:	200a      	movs	r0, #10
 80005ae:	f009 fe7d 	bl	800a2ac <osDelay>
	  if (HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin))
 80005b2:	e76b      	b.n	800048c <StartEncoder+0x170>
 80005b4:	40010c00 	.word	0x40010c00
 80005b8:	20002570 	.word	0x20002570
 80005bc:	20000000 	.word	0x20000000
 80005c0:	200001ae 	.word	0x200001ae
 80005c4:	200001ac 	.word	0x200001ac

080005c8 <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	if (huart != &huart2)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <HAL_UART_RxCpltCallback+0x44>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d115      	bne.n	8000604 <HAL_UART_RxCpltCallback+0x3c>
		return;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]


   /* Notify the task that the transmission is complete by setting the TX_BIT
   in the task's notification value. */
	vTaskNotifyGiveFromISR( UARTtaskHandle,
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_UART_RxCpltCallback+0x48>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f107 020c 	add.w	r2, r7, #12
 80005e4:	4611      	mov	r1, r2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f00b fcba 	bl	800bf60 <vTaskNotifyGiveFromISR>

   /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context switch
   should be performed to ensure the interrupt returns directly to the highest
   priority task.  The macro used for this purpose is dependent on the port in
   use and may be called portEND_SWITCHING_ISR(). */
   portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d009      	beq.n	8000606 <HAL_UART_RxCpltCallback+0x3e>
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <HAL_UART_RxCpltCallback+0x4c>)
 80005f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	f3bf 8f4f 	dsb	sy
 80005fe:	f3bf 8f6f 	isb	sy
 8000602:	e000      	b.n	8000606 <HAL_UART_RxCpltCallback+0x3e>
		return;
 8000604:	bf00      	nop
}
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20002610 	.word	0x20002610
 8000610:	20002480 	.word	0x20002480
 8000614:	e000ed04 	.word	0xe000ed04

08000618 <process_encoder>:

void process_encoder(void)
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
	static uint8_t old;
	uint8_t new;
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 800061e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000622:	483c      	ldr	r0, [pc, #240]	; (8000714 <process_encoder+0xfc>)
 8000624:	f002 fbf8 	bl	8002e18 <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	461c      	mov	r4, r3
		   0b10*HAL_GPIO_ReadPin(enc_b_GPIO_Port, enc_b_Pin));
 800062c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000630:	4838      	ldr	r0, [pc, #224]	; (8000714 <process_encoder+0xfc>)
 8000632:	f002 fbf1 	bl	8002e18 <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	b2db      	uxtb	r3, r3
 800063c:	4423      	add	r3, r4
 800063e:	71fb      	strb	r3, [r7, #7]
	switch(old)
 8000640:	4b35      	ldr	r3, [pc, #212]	; (8000718 <process_encoder+0x100>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b03      	cmp	r3, #3
 8000646:	d85e      	bhi.n	8000706 <process_encoder+0xee>
 8000648:	a201      	add	r2, pc, #4	; (adr r2, 8000650 <process_encoder+0x38>)
 800064a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064e:	bf00      	nop
 8000650:	08000687 	.word	0x08000687
 8000654:	080006ad 	.word	0x080006ad
 8000658:	08000661 	.word	0x08000661
 800065c:	080006d3 	.word	0x080006d3
		{
		case 2:
			{
			if(new == 3) encoder_value++;
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	2b03      	cmp	r3, #3
 8000664:	d105      	bne.n	8000672 <process_encoder+0x5a>
 8000666:	4b2d      	ldr	r3, [pc, #180]	; (800071c <process_encoder+0x104>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	b29a      	uxth	r2, r3
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <process_encoder+0x104>)
 8000670:	801a      	strh	r2, [r3, #0]
			if(new == 0) encoder_value--;
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d13f      	bne.n	80006f8 <process_encoder+0xe0>
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <process_encoder+0x104>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	3b01      	subs	r3, #1
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b26      	ldr	r3, [pc, #152]	; (800071c <process_encoder+0x104>)
 8000682:	801a      	strh	r2, [r3, #0]
			break;
 8000684:	e038      	b.n	80006f8 <process_encoder+0xe0>
			}

		case 0:
			{
			if(new == 2) encoder_value++;
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	2b02      	cmp	r3, #2
 800068a:	d105      	bne.n	8000698 <process_encoder+0x80>
 800068c:	4b23      	ldr	r3, [pc, #140]	; (800071c <process_encoder+0x104>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	b29a      	uxth	r2, r3
 8000694:	4b21      	ldr	r3, [pc, #132]	; (800071c <process_encoder+0x104>)
 8000696:	801a      	strh	r2, [r3, #0]
			if(new == 1) encoder_value--;
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d12e      	bne.n	80006fc <process_encoder+0xe4>
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <process_encoder+0x104>)
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <process_encoder+0x104>)
 80006a8:	801a      	strh	r2, [r3, #0]
			break;
 80006aa:	e027      	b.n	80006fc <process_encoder+0xe4>
			}
		case 1:
			{
			if(new == 0) encoder_value++;
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d105      	bne.n	80006be <process_encoder+0xa6>
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <process_encoder+0x104>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	3301      	adds	r3, #1
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <process_encoder+0x104>)
 80006bc:	801a      	strh	r2, [r3, #0]
			if(new == 3) encoder_value--;
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d11d      	bne.n	8000700 <process_encoder+0xe8>
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <process_encoder+0x104>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <process_encoder+0x104>)
 80006ce:	801a      	strh	r2, [r3, #0]
			break;
 80006d0:	e016      	b.n	8000700 <process_encoder+0xe8>
			}
		case 3:
			{
			if(new == 1) encoder_value++;
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d105      	bne.n	80006e4 <process_encoder+0xcc>
 80006d8:	4b10      	ldr	r3, [pc, #64]	; (800071c <process_encoder+0x104>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	b29a      	uxth	r2, r3
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <process_encoder+0x104>)
 80006e2:	801a      	strh	r2, [r3, #0]
			if(new == 2) encoder_value--;
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2b02      	cmp	r3, #2
 80006e8:	d10c      	bne.n	8000704 <process_encoder+0xec>
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <process_encoder+0x104>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <process_encoder+0x104>)
 80006f4:	801a      	strh	r2, [r3, #0]
			break;
 80006f6:	e005      	b.n	8000704 <process_encoder+0xec>
			break;
 80006f8:	bf00      	nop
 80006fa:	e004      	b.n	8000706 <process_encoder+0xee>
			break;
 80006fc:	bf00      	nop
 80006fe:	e002      	b.n	8000706 <process_encoder+0xee>
			break;
 8000700:	bf00      	nop
 8000702:	e000      	b.n	8000706 <process_encoder+0xee>
			break;
 8000704:	bf00      	nop
			}
		}
	old = new;
 8000706:	4a04      	ldr	r2, [pc, #16]	; (8000718 <process_encoder+0x100>)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	7013      	strb	r3, [r2, #0]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bd90      	pop	{r4, r7, pc}
 8000714:	40010c00 	.word	0x40010c00
 8000718:	200001af 	.word	0x200001af
 800071c:	200001ac 	.word	0x200001ac

08000720 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000734:	4b49      	ldr	r3, [pc, #292]	; (800085c <MX_GPIO_Init+0x13c>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a48      	ldr	r2, [pc, #288]	; (800085c <MX_GPIO_Init+0x13c>)
 800073a:	f043 0310 	orr.w	r3, r3, #16
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b46      	ldr	r3, [pc, #280]	; (800085c <MX_GPIO_Init+0x13c>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0310 	and.w	r3, r3, #16
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074c:	4b43      	ldr	r3, [pc, #268]	; (800085c <MX_GPIO_Init+0x13c>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a42      	ldr	r2, [pc, #264]	; (800085c <MX_GPIO_Init+0x13c>)
 8000752:	f043 0320 	orr.w	r3, r3, #32
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b40      	ldr	r3, [pc, #256]	; (800085c <MX_GPIO_Init+0x13c>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0320 	and.w	r3, r3, #32
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b3d      	ldr	r3, [pc, #244]	; (800085c <MX_GPIO_Init+0x13c>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a3c      	ldr	r2, [pc, #240]	; (800085c <MX_GPIO_Init+0x13c>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b3a      	ldr	r3, [pc, #232]	; (800085c <MX_GPIO_Init+0x13c>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077c:	4b37      	ldr	r3, [pc, #220]	; (800085c <MX_GPIO_Init+0x13c>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a36      	ldr	r2, [pc, #216]	; (800085c <MX_GPIO_Init+0x13c>)
 8000782:	f043 0308 	orr.w	r3, r3, #8
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b34      	ldr	r3, [pc, #208]	; (800085c <MX_GPIO_Init+0x13c>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f003 0308 	and.w	r3, r3, #8
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079a:	4831      	ldr	r0, [pc, #196]	; (8000860 <MX_GPIO_Init+0x140>)
 800079c:	f002 fb53 	bl	8002e46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 5189 	mov.w	r1, #4384	; 0x1120
 80007a6:	482f      	ldr	r0, [pc, #188]	; (8000864 <MX_GPIO_Init+0x144>)
 80007a8:	f002 fb4d 	bl	8002e46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007b2:	482d      	ldr	r0, [pc, #180]	; (8000868 <MX_GPIO_Init+0x148>)
 80007b4:	f002 fb47 	bl	8002e46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	4619      	mov	r1, r3
 80007d0:	4823      	ldr	r0, [pc, #140]	; (8000860 <MX_GPIO_Init+0x140>)
 80007d2:	f002 f99d 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007d6:	2301      	movs	r3, #1
 80007d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007da:	4b24      	ldr	r3, [pc, #144]	; (800086c <MX_GPIO_Init+0x14c>)
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4619      	mov	r1, r3
 80007e8:	481f      	ldr	r0, [pc, #124]	; (8000868 <MX_GPIO_Init+0x148>)
 80007ea:	f002 f991 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin|enc_s_Pin;
 80007ee:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80007f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	4619      	mov	r1, r3
 8000802:	4818      	ldr	r0, [pc, #96]	; (8000864 <MX_GPIO_Init+0x144>)
 8000804:	f002 f984 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8000808:	f44f 5389 	mov.w	r3, #4384	; 0x1120
 800080c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2302      	movs	r3, #2
 8000818:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	4619      	mov	r1, r3
 8000820:	4810      	ldr	r0, [pc, #64]	; (8000864 <MX_GPIO_Init+0x144>)
 8000822:	f002 f975 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800082a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2302      	movs	r3, #2
 8000836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4619      	mov	r1, r3
 800083e:	480a      	ldr	r0, [pc, #40]	; (8000868 <MX_GPIO_Init+0x148>)
 8000840:	f002 f966 	bl	8002b10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	2105      	movs	r1, #5
 8000848:	2006      	movs	r0, #6
 800084a:	f002 f886 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800084e:	2006      	movs	r0, #6
 8000850:	f002 f89f 	bl	8002992 <HAL_NVIC_EnableIRQ>

}
 8000854:	bf00      	nop
 8000856:	3720      	adds	r7, #32
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000
 8000860:	40011000 	.word	0x40011000
 8000864:	40010c00 	.word	0x40010c00
 8000868:	40010800 	.word	0x40010800
 800086c:	10110000 	.word	0x10110000

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000874:	f001 ff8a 	bl	800278c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000878:	f000 f80d 	bl	8000896 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087c:	f7ff ff50 	bl	8000720 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000880:	f001 fd92 	bl	80023a8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000884:	f001 fee0 	bl	8002648 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000888:	f009 fc00 	bl	800a08c <osKernelInitialize>
  MX_FREERTOS_Init();
 800088c:	f7ff fc72 	bl	8000174 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000890:	f009 fc2e 	bl	800a0f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000894:	e7fe      	b.n	8000894 <main+0x24>

08000896 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b094      	sub	sp, #80	; 0x50
 800089a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a0:	2228      	movs	r2, #40	; 0x28
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f00d f82f 	bl	800d908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c6:	2301      	movs	r3, #1
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80008d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d6:	2301      	movs	r3, #1
 80008d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 ffc2 	bl	8004878 <HAL_RCC_OscConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x68>
  {
    Error_Handler();
 80008fa:	f000 f839 	bl	8000970 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fe:	230f      	movs	r3, #15
 8000900:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800090e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2102      	movs	r1, #2
 800091a:	4618      	mov	r0, r3
 800091c:	f004 fa2c 	bl	8004d78 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000926:	f000 f823 	bl	8000970 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800092a:	2310      	movs	r3, #16
 800092c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	4618      	mov	r0, r3
 8000936:	f004 fbeb 	bl	8005110 <HAL_RCCEx_PeriphCLKConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000940:	f000 f816 	bl	8000970 <Error_Handler>
  }
}
 8000944:	bf00      	nop
 8000946:	3750      	adds	r7, #80	; 0x50
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d101      	bne.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095e:	f001 ff2b 	bl	80027b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40012c00 	.word	0x40012c00

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	e7fe      	b.n	8000978 <Error_Handler+0x8>

0800097a <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 800097a:	b480      	push	{r7}
 800097c:	b085      	sub	sp, #20
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	5c8a      	ldrb	r2, [r1, r2]
 800098e:	4413      	add	r3, r2
 8000990:	3301      	adds	r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2b3f      	cmp	r3, #63	; 0x3f
 8000998:	dd02      	ble.n	80009a0 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	3b40      	subs	r3, #64	; 0x40
 800099e:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	5cd3      	ldrb	r3, [r2, r3]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d101      	bne.n	80009ca <hist_is_space_for_new+0x1a>
		return true;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e01e      	b.n	8000a08 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	429a      	cmp	r2, r3
 80009d4:	db0c      	blt.n	80009f0 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4413      	add	r3, r2
 80009e4:	3b01      	subs	r3, #1
 80009e6:	683a      	ldr	r2, [r7, #0]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	da0c      	bge.n	8000a06 <hist_is_space_for_new+0x56>
			return true;
 80009ec:	2301      	movs	r3, #1
 80009ee:	e00b      	b.n	8000a08 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	3b01      	subs	r3, #1
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	da01      	bge.n	8000a06 <hist_is_space_for_new+0x56>
			return true;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e000      	b.n	8000a08 <hist_is_space_for_new+0x58>
	}
	return false;
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr

08000a12 <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b3e      	cmp	r3, #62	; 0x3e
 8000a22:	dc61      	bgt.n	8000ae8 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8000a24:	e002      	b.n	8000a2c <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f7ff ffa7 	bl	800097a <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8000a2c:	6879      	ldr	r1, [r7, #4]
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f7ff ffbe 	bl	80009b0 <hist_is_space_for_new>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d0f5      	beq.n	8000a26 <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	5cd3      	ldrb	r3, [r2, r3]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d105      	bne.n	8000a52 <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	b2d1      	uxtb	r1, r2
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	da0a      	bge.n	8000a76 <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	3301      	adds	r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	68b9      	ldr	r1, [r7, #8]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f00c ff22 	bl	800d8b8 <memcpy>
 8000a74:	e018      	b.n	8000aa8 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000a7e:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	3301      	adds	r3, #1
 8000a88:	4413      	add	r3, r2
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	68b9      	ldr	r1, [r7, #8]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f00c ff12 	bl	800d8b8 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	68ba      	ldr	r2, [r7, #8]
 8000a9a:	18d1      	adds	r1, r2, r3
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	f00c ff08 	bl	800d8b8 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	b2d1      	uxtb	r1, r2
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4413      	add	r3, r2
 8000abc:	1c5a      	adds	r2, r3, #1
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ac8:	dd05      	ble.n	8000ad6 <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	2100      	movs	r1, #0
 8000ade:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	649a      	str	r2, [r3, #72]	; 0x48
 8000ae6:	e000      	b.n	8000aea <hist_save_line+0xd8>
		return;
 8000ae8:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 8000b06:	e010      	b.n	8000b2a <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b0c:	4413      	add	r3, r2
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	3301      	adds	r3, #1
 8000b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b14:	4413      	add	r3, r2
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8000b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1a:	2b3f      	cmp	r3, #63	; 0x3f
 8000b1c:	dd02      	ble.n	8000b24 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 8000b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b20:	3b40      	subs	r3, #64	; 0x40
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8000b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b26:	3301      	adds	r3, #1
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2e:	4413      	add	r3, r2
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1e8      	bne.n	8000b08 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d176      	bne.n	8000c2a <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b42:	429a      	cmp	r2, r3
 8000b44:	f2c0 80d6 	blt.w	8000cf4 <hist_restore_line+0x204>
			int header = pThis->begin;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8000b52:	e010      	b.n	8000b76 <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	4413      	add	r3, r2
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b60:	4413      	add	r3, r2
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	2b3f      	cmp	r3, #63	; 0x3f
 8000b68:	dd02      	ble.n	8000b70 <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	3b40      	subs	r3, #64	; 0x40
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 8000b70:	6a3b      	ldr	r3, [r7, #32]
 8000b72:	3301      	adds	r3, #1
 8000b74:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	4413      	add	r3, r2
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d007      	beq.n	8000b92 <hist_restore_line+0xa2>
 8000b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b84:	6a3b      	ldr	r3, [r7, #32]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	1e5a      	subs	r2, r3, #1
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d1e0      	bne.n	8000b54 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b96:	4413      	add	r3, r2
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f000 80aa 	beq.w	8000cf4 <hist_restore_line+0x204>
					pThis->cur++;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bae:	4413      	add	r3, r2
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	4413      	add	r3, r2
 8000bb8:	2b3f      	cmp	r3, #63	; 0x3f
 8000bba:	dc11      	bgt.n	8000be0 <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 8000bbc:	2233      	movs	r2, #51	; 0x33
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	68b8      	ldr	r0, [r7, #8]
 8000bc2:	f00c fea1 	bl	800d908 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bca:	3301      	adds	r3, #1
 8000bcc:	18d1      	adds	r1, r2, r3
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd2:	4413      	add	r3, r2
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68b8      	ldr	r0, [r7, #8]
 8000bda:	f00c fe6d 	bl	800d8b8 <memcpy>
 8000bde:	e01f      	b.n	8000c20 <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 8000be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be2:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000be6:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 8000be8:	2233      	movs	r2, #51	; 0x33
 8000bea:	2100      	movs	r1, #0
 8000bec:	68b8      	ldr	r0, [r7, #8]
 8000bee:	f00c fe8b 	bl	800d908 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	4413      	add	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	68b8      	ldr	r0, [r7, #8]
 8000c00:	f00c fe5a 	bl	800d8b8 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	18d0      	adds	r0, r2, r3
 8000c0a:	68f9      	ldr	r1, [r7, #12]
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	4413      	add	r3, r2
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	f00c fe4c 	bl	800d8b8 <memcpy>
				}
				return pThis->ring_buf[header];
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	4413      	add	r3, r2
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	e066      	b.n	8000cf8 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	dd5e      	ble.n	8000cf0 <hist_restore_line+0x200>
				pThis->cur--;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c36:	1e5a      	subs	r2, r3, #1
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	61fb      	str	r3, [r7, #28]
			int j = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8000c46:	e010      	b.n	8000c6a <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	3301      	adds	r3, #1
 8000c52:	69fa      	ldr	r2, [r7, #28]
 8000c54:	4413      	add	r3, r2
 8000c56:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c5c:	dd02      	ble.n	8000c64 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b40      	subs	r3, #64	; 0x40
 8000c62:	61fb      	str	r3, [r7, #28]
				j++;
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	3301      	adds	r3, #1
 8000c68:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	4413      	add	r3, r2
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d006      	beq.n	8000c84 <hist_restore_line+0x194>
 8000c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	1ad2      	subs	r2, r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d1e1      	bne.n	8000c48 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	4413      	add	r3, r2
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	4413      	add	r3, r2
 8000c92:	2b3f      	cmp	r3, #63	; 0x3f
 8000c94:	dc0c      	bgt.n	8000cb0 <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	18d1      	adds	r1, r2, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68b8      	ldr	r0, [r7, #8]
 8000caa:	f00c fe05 	bl	800d8b8 <memcpy>
 8000cae:	e01a      	b.n	8000ce6 <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000cb6:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4413      	add	r3, r2
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	68b8      	ldr	r0, [r7, #8]
 8000cc6:	f00c fdf7 	bl	800d8b8 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	68ba      	ldr	r2, [r7, #8]
 8000cce:	18d0      	adds	r0, r2, r3
 8000cd0:	68f9      	ldr	r1, [r7, #12]
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	f00c fde9 	bl	800d8b8 <memcpy>
			}
			return pThis->ring_buf[header];
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	4413      	add	r3, r2
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	e003      	b.n	8000cf8 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	e001      	b.n	8000cf8 <hist_restore_line+0x208>
		}
	}
	return -1;
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3730      	adds	r7, #48	; 0x30
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
	int ind = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8000d14:	e002      	b.n	8000d1c <split+0x1c>
			ind++;
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	4413      	add	r3, r2
 8000d22:	3354      	adds	r3, #84	; 0x54
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d103      	bne.n	8000d32 <split+0x32>
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	dbf1      	blt.n	8000d16 <split+0x16>
		}
		if (!(ind < limit)) return i;
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	db01      	blt.n	8000d3e <split+0x3e>
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	e024      	b.n	8000d88 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	1c58      	adds	r0, r3, #1
 8000d4a:	6178      	str	r0, [r7, #20]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	4403      	add	r3, r0
 8000d52:	440a      	add	r2, r1
 8000d54:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	dd05      	ble.n	8000d68 <split+0x68>
			return -1;
 8000d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d60:	e012      	b.n	8000d88 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	3301      	adds	r3, #1
 8000d66:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3354      	adds	r3, #84	; 0x54
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <split+0x7e>
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	dbf1      	blt.n	8000d62 <split+0x62>
		}
		if (!(ind < limit)) return i;
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	dbca      	blt.n	8000d1c <split+0x1c>
 8000d86:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	371c      	adds	r7, #28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr

08000d92 <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000da4:	4610      	mov	r0, r2
 8000da6:	4798      	blx	r3
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000dbe:	4803      	ldr	r0, [pc, #12]	; (8000dcc <terminal_backspace+0x1c>)
 8000dc0:	4798      	blx	r3
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	0800d9b8 	.word	0x0800d9b8

08000dd0 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000dde:	4803      	ldr	r0, [pc, #12]	; (8000dec <terminal_newline+0x1c>)
 8000de0:	4798      	blx	r3
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	0800d9c0 	.word	0x0800d9c0

08000df0 <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b087      	sub	sp, #28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e0c:	d235      	bcs.n	8000e7a <u16bit_to_str+0x8a>
		while (nmb > 0) {
 8000e0e:	e01a      	b.n	8000e46 <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 8000e10:	6879      	ldr	r1, [r7, #4]
 8000e12:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <u16bit_to_str+0x9c>)
 8000e14:	fba3 2301 	umull	r2, r3, r3, r1
 8000e18:	08da      	lsrs	r2, r3, #3
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	1aca      	subs	r2, r1, r3
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	1c59      	adds	r1, r3, #1
 8000e2a:	6179      	str	r1, [r7, #20]
 8000e2c:	3230      	adds	r2, #48	; 0x30
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	f107 0118 	add.w	r1, r7, #24
 8000e34:	440b      	add	r3, r1
 8000e36:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a13      	ldr	r2, [pc, #76]	; (8000e8c <u16bit_to_str+0x9c>)
 8000e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e42:	08db      	lsrs	r3, r3, #3
 8000e44:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1e1      	bne.n	8000e10 <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	e00f      	b.n	8000e72 <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	1e5a      	subs	r2, r3, #1
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	1c59      	adds	r1, r3, #1
 8000e5e:	6039      	str	r1, [r7, #0]
 8000e60:	f107 0118 	add.w	r1, r7, #24
 8000e64:	440a      	add	r2, r1
 8000e66:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8000e6a:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	dbeb      	blt.n	8000e52 <u16bit_to_str+0x62>
	}
	*buf = '\0';
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
	return buf;
 8000e80:	683b      	ldr	r3, [r7, #0]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	371c      	adds	r7, #28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	cccccccd 	.word	0xcccccccd

08000e90 <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <terminal_move_cursor+0x94>)
 8000eb0:	6812      	ldr	r2, [r2, #0]
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	8019      	strh	r1, [r3, #0]
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	0c12      	lsrs	r2, r2, #16
 8000eba:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	dd0f      	ble.n	8000ee2 <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	3302      	adds	r3, #2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4610      	mov	r0, r2
 8000ece:	f7ff ff8f 	bl	8000df0 <u16bit_to_str>
 8000ed2:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	4914      	ldr	r1, [pc, #80]	; (8000f28 <terminal_move_cursor+0x98>)
 8000ed8:	461a      	mov	r2, r3
 8000eda:	460b      	mov	r3, r1
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	8013      	strh	r3, [r2, #0]
 8000ee0:	e013      	b.n	8000f0a <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	da18      	bge.n	8000f1a <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	425b      	negs	r3, r3
 8000eec:	461a      	mov	r2, r3
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	f7ff ff7a 	bl	8000df0 <u16bit_to_str>
 8000efc:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	490a      	ldr	r1, [pc, #40]	; (8000f2c <terminal_move_cursor+0x9c>)
 8000f02:	461a      	mov	r2, r3
 8000f04:	460b      	mov	r3, r1
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f10:	f107 020c 	add.w	r2, r7, #12
 8000f14:	4610      	mov	r0, r2
 8000f16:	4798      	blx	r3
 8000f18:	e000      	b.n	8000f1c <terminal_move_cursor+0x8c>
		return;
 8000f1a:	bf00      	nop
}
 8000f1c:	3720      	adds	r7, #32
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	0800d9c4 	.word	0x0800d9c4
 8000f28:	0800d9c8 	.word	0x0800d9c8
 8000f2c:	0800d9cc 	.word	0x0800d9cc

08000f30 <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <terminal_reset_cursor+0x64>)
 8000f3e:	6812      	ldr	r2, [r2, #0]
 8000f40:	4611      	mov	r1, r2
 8000f42:	8019      	strh	r1, [r3, #0]
 8000f44:	3302      	adds	r3, #2
 8000f46:	0c12      	lsrs	r2, r2, #16
 8000f48:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	3302      	adds	r3, #2
 8000f50:	4619      	mov	r1, r3
 8000f52:	203a      	movs	r0, #58	; 0x3a
 8000f54:	f7ff ff4c 	bl	8000df0 <u16bit_to_str>
 8000f58:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <terminal_reset_cursor+0x68>)
 8000f5e:	6810      	ldr	r0, [r2, #0]
 8000f60:	6018      	str	r0, [r3, #0]
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3303      	adds	r3, #3
 8000f66:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 8000f68:	69f9      	ldr	r1, [r7, #28]
 8000f6a:	2005      	movs	r0, #5
 8000f6c:	f7ff ff40 	bl	8000df0 <u16bit_to_str>
 8000f70:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	4909      	ldr	r1, [pc, #36]	; (8000f9c <terminal_reset_cursor+0x6c>)
 8000f76:	461a      	mov	r2, r3
 8000f78:	460b      	mov	r3, r1
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f84:	f107 020c 	add.w	r2, r7, #12
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4798      	blx	r3
}
 8000f8c:	bf00      	nop
 8000f8e:	3720      	adds	r7, #32
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	0800d9c4 	.word	0x0800d9c4
 8000f98:	0800d9d0 	.word	0x0800d9d0
 8000f9c:	0800d9c8 	.word	0x0800d9c8

08000fa0 <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000fb2:	4816      	ldr	r0, [pc, #88]	; (800100c <terminal_print_line+0x6c>)
 8000fb4:	4798      	blx	r3

	char nch [] = {0,0};
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e014      	b.n	8000fea <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	3354      	adds	r3, #84	; 0x54
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 8000fcc:	7c3b      	ldrb	r3, [r7, #16]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <terminal_print_line+0x36>
			nch[0] = ' ';
 8000fd2:	2320      	movs	r3, #32
 8000fd4:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000fdc:	f107 0210 	add.w	r2, r7, #16
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	dbe4      	blt.n	8000fc0 <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f7ff ff9a 	bl	8000f30 <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f7ff ff46 	bl	8000e90 <terminal_move_cursor>
}
 8001004:	bf00      	nop
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	0800d9d4 	.word	0x0800d9d4

08001010 <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3354      	adds	r3, #84	; 0x54
 800101e:	2233      	movs	r2, #51	; 0x33
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f00c fc70 	bl	800d908 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3304      	adds	r3, #4
 800102c:	2240      	movs	r2, #64	; 0x40
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f00c fc69 	bl	800d908 <memset>
	pThis->ring_hist.begin = 0;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pThis->execute = NULL;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	pThis->get_completion = NULL;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif
	pThis->prompt_str = prompt_default;
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <microrl_init+0x78>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000004 	.word	0x20000004

0800108c <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	1d18      	adds	r0, r3, #4
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3354      	adds	r3, #84	; 0x54
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff fcfb 	bl	8000af0 <hist_restore_line>
 80010fa:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db1a      	blt.n	8001138 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	3354      	adds	r3, #84	; 0x54
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		terminal_reset_cursor (pThis);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ff04 	bl	8000f30 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800112e:	461a      	mov	r2, r3
 8001130:	2100      	movs	r1, #0
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ff34 	bl	8000fa0 <terminal_print_line>
	}
}
 8001138:	bf00      	nop
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	2b5b      	cmp	r3, #91	; 0x5b
 8001150:	d104      	bne.n	800115c <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
		return 0;
 8001158:	2300      	movs	r3, #0
 800115a:	e07b      	b.n	8001254 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d14f      	bne.n	8001204 <escape_process+0xc4>
		if (ch == 'A') {
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	2b41      	cmp	r3, #65	; 0x41
 8001168:	d105      	bne.n	8001176 <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 800116a:	2100      	movs	r1, #0
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ffb7 	bl	80010e0 <hist_search>
#endif
			return 1;
 8001172:	2301      	movs	r3, #1
 8001174:	e06e      	b.n	8001254 <escape_process+0x114>
		} else if (ch == 'B') {
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	2b42      	cmp	r3, #66	; 0x42
 800117a:	d105      	bne.n	8001188 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 800117c:	2101      	movs	r1, #1
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffae 	bl	80010e0 <hist_search>
#endif
			return 1;
 8001184:	2301      	movs	r3, #1
 8001186:	e065      	b.n	8001254 <escape_process+0x114>
		} else if (ch == 'C') {
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	2b43      	cmp	r3, #67	; 0x43
 800118c:	d114      	bne.n	80011b8 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119a:	429a      	cmp	r2, r3
 800119c:	da0a      	bge.n	80011b4 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 800119e:	2101      	movs	r1, #1
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff fe75 	bl	8000e90 <terminal_move_cursor>
				pThis->cursor++;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011ac:	1c5a      	adds	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e04d      	b.n	8001254 <escape_process+0x114>
		} else if (ch == 'D') {
 80011b8:	78fb      	ldrb	r3, [r7, #3]
 80011ba:	2b44      	cmp	r3, #68	; 0x44
 80011bc:	d112      	bne.n	80011e4 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	dd0b      	ble.n	80011e0 <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff fe5f 	bl	8000e90 <terminal_move_cursor>
				pThis->cursor--;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011d8:	1e5a      	subs	r2, r3, #1
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e037      	b.n	8001254 <escape_process+0x114>
		} else if (ch == '7') {
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	2b37      	cmp	r3, #55	; 0x37
 80011e8:	d104      	bne.n	80011f4 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2202      	movs	r2, #2
 80011ee:	701a      	strb	r2, [r3, #0]
			return 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e02f      	b.n	8001254 <escape_process+0x114>
		} else if (ch == '8') {
 80011f4:	78fb      	ldrb	r3, [r7, #3]
 80011f6:	2b38      	cmp	r3, #56	; 0x38
 80011f8:	d12b      	bne.n	8001252 <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2203      	movs	r2, #3
 80011fe:	701a      	strb	r2, [r3, #0]
			return 0;
 8001200:	2300      	movs	r3, #0
 8001202:	e027      	b.n	8001254 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	2b7e      	cmp	r3, #126	; 0x7e
 8001208:	d123      	bne.n	8001252 <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d108      	bne.n	8001224 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fe8c 	bl	8000f30 <terminal_reset_cursor>
			pThis->cursor = 0;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 8001220:	2301      	movs	r3, #1
 8001222:	e017      	b.n	8001254 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b03      	cmp	r3, #3
 800122a:	d112      	bne.n	8001252 <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	4619      	mov	r1, r3
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fe27 	bl	8000e90 <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	2b32      	cmp	r3, #50	; 0x32
 8001274:	dc60      	bgt.n	8001338 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001282:	4619      	mov	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	440b      	add	r3, r1
 8001288:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	3354      	adds	r3, #84	; 0x54
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor + len,
 8001294:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012a2:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 80012a4:	461a      	mov	r2, r3
 80012a6:	f00c fb15 	bl	800d8d4 <memmove>
		for (i = 0; i < len; i++) {
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	e025      	b.n	80012fc <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	441a      	add	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	440b      	add	r3, r1
 80012c0:	7811      	ldrb	r1, [r2, #0]
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	4413      	add	r3, r2
 80012c6:	460a      	mov	r2, r1
 80012c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	4413      	add	r3, r2
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	4413      	add	r3, r2
 80012da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80012de:	2b20      	cmp	r3, #32
 80012e0:	d109      	bne.n	80012f6 <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	4413      	add	r3, r2
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	3301      	adds	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	429a      	cmp	r2, r3
 8001302:	dbd5      	blt.n	80012b0 <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	441a      	add	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdlen += len;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	441a      	add	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	4413      	add	r3, r2
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <microrl_insert_text+0xde>
	}
	return false;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001350:	2b00      	cmp	r3, #0
 8001352:	dd31      	ble.n	80013b8 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff fd2b 	bl	8000db0 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001366:	3b01      	subs	r3, #1
 8001368:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3354      	adds	r3, #84	; 0x54
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor-1,
 8001374:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 8001386:	461a      	mov	r2, r3
 8001388:	f00c faa4 	bl	800d8d4 <memmove>
		pThis->cursor--;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001392:	1e5a      	subs	r2, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdline [pThis->cmdlen] = '\0';
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b0:	1e5a      	subs	r2, r3, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f7fe fec8 	bl	8000164 <strlen>
 80013d4:	4603      	mov	r3, r0
 80013d6:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	e019      	b.n	8001412 <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7fe febb 	bl	8000164 <strlen>
 80013ee:	4602      	mov	r2, r0
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d20a      	bcs.n	800140c <common_len+0x4c>
			shortest = arr[i];
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f7fe feae 	bl	8000164 <strlen>
 8001408:	4603      	mov	r3, r0
 800140a:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1de      	bne.n	80013de <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	e01f      	b.n	8001466 <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	e012      	b.n	8001452 <common_len+0x92>
			if (shortest[i] != arr[j][i])
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	781a      	ldrb	r2, [r3, #0]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	440b      	add	r3, r1
 800143c:	6819      	ldr	r1, [r3, #0]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	440b      	add	r3, r1
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d001      	beq.n	800144c <common_len+0x8c>
				return i;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	e011      	b.n	8001470 <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	3301      	adds	r3, #1
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1e5      	bne.n	800142c <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3301      	adds	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	429a      	cmp	r2, r3
 800146c:	dbdb      	blt.n	8001426 <common_len+0x66>

	return i;
 800146e:	697b      	ldr	r3, [r7, #20]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b08c      	sub	sp, #48	; 0x30
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 809c 	beq.w	80015c4 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001492:	f107 020c 	add.w	r2, r7, #12
 8001496:	4619      	mov	r1, r3
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff fc31 	bl	8000d00 <split>
 800149e:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014a6:	3b01      	subs	r3, #1
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	4413      	add	r3, r2
 80014ac:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d109      	bne.n	80014c8 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 80014b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80014c0:	4413      	add	r3, r2
 80014c2:	4a42      	ldr	r2, [pc, #264]	; (80015cc <microrl_get_complite+0x154>)
 80014c4:	f843 2c24 	str.w	r2, [r3, #-36]
	compl_token = pThis->get_completion (status, tkn_arr);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ce:	f107 020c 	add.w	r2, r7, #12
 80014d2:	4611      	mov	r1, r2
 80014d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014d6:	4798      	blx	r3
 80014d8:	6238      	str	r0, [r7, #32]
	if (compl_token[0] != NULL) {
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d071      	beq.n	80015c6 <microrl_get_complite+0x14e>
		int i = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
		int len;

		if (compl_token[1] == NULL) {
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	3304      	adds	r3, #4
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d107      	bne.n	8001500 <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 80014f0:	6a3b      	ldr	r3, [r7, #32]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe fe35 	bl	8000164 <strlen>
 80014fa:	4603      	mov	r3, r0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
 80014fe:	e026      	b.n	800154e <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8001500:	6a38      	ldr	r0, [r7, #32]
 8001502:	f7ff ff5d 	bl	80013c0 <common_len>
 8001506:	6278      	str	r0, [r7, #36]	; 0x24
			terminal_newline (pThis);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fc61 	bl	8000dd0 <terminal_newline>
			while (compl_token [i] != NULL) {
 800150e:	e011      	b.n	8001534 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001518:	0092      	lsls	r2, r2, #2
 800151a:	6a39      	ldr	r1, [r7, #32]
 800151c:	440a      	add	r2, r1
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	4610      	mov	r0, r2
 8001522:	4798      	blx	r3
				pThis->print (" ");
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800152a:	4829      	ldr	r0, [pc, #164]	; (80015d0 <microrl_get_complite+0x158>)
 800152c:	4798      	blx	r3
				i++;
 800152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001530:	3301      	adds	r3, #1
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
			while (compl_token [i] != NULL) {
 8001534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	6a3a      	ldr	r2, [r7, #32]
 800153a:	4413      	add	r3, r2
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1e6      	bne.n	8001510 <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fc44 	bl	8000dd0 <terminal_newline>
			print_prompt (pThis);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff fc22 	bl	8000d92 <print_prompt>
		}
		
		if (len) {
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	2b00      	cmp	r3, #0
 8001552:	d02b      	beq.n	80015ac <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	681c      	ldr	r4, [r3, #0]
 8001558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155a:	3b01      	subs	r3, #1
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001562:	4413      	add	r3, r2
 8001564:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe fdfb 	bl	8000164 <strlen>
 800156e:	4603      	mov	r3, r0
 8001570:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 8001572:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001576:	3b01      	subs	r3, #1
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800157e:	4413      	add	r3, r2
 8001580:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe fded 	bl	8000164 <strlen>
 800158a:	4603      	mov	r3, r0
 800158c:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 800158e:	461a      	mov	r2, r3
 8001590:	4629      	mov	r1, r5
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fe62 	bl	800125c <microrl_insert_text>
			if (compl_token[1] == NULL) 
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	3304      	adds	r3, #4
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d104      	bne.n	80015ac <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 80015a2:	2201      	movs	r2, #1
 80015a4:	490a      	ldr	r1, [pc, #40]	; (80015d0 <microrl_get_complite+0x158>)
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fe58 	bl	800125c <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fcbf 	bl	8000f30 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015b8:	461a      	mov	r2, r3
 80015ba:	2100      	movs	r1, #0
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fcef 	bl	8000fa0 <terminal_print_line>
 80015c2:	e000      	b.n	80015c6 <microrl_get_complite+0x14e>
		return;
 80015c4:	bf00      	nop
	} 
}
 80015c6:	3730      	adds	r7, #48	; 0x30
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bdb0      	pop	{r4, r5, r7, pc}
 80015cc:	0800d9d8 	.word	0x0800d9d8
 80015d0:	0800d9dc 	.word	0x0800d9dc

080015d4 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fbf7 	bl	8000dd0 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	dd0a      	ble.n	8001602 <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	1d18      	adds	r0, r3, #4
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fc:	461a      	mov	r2, r3
 80015fe:	f7ff fa08 	bl	8000a12 <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001608:	f107 0208 	add.w	r2, r7, #8
 800160c:	4619      	mov	r1, r3
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fb76 	bl	8000d00 <split>
 8001614:	61f8      	str	r0, [r7, #28]
	if (status == -1){
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161c:	d109      	bne.n	8001632 <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001624:	4817      	ldr	r0, [pc, #92]	; (8001684 <new_line_handler+0xb0>)
 8001626:	4798      	blx	r3
		pThis->print (ENDL);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800162e:	4816      	ldr	r0, [pc, #88]	; (8001688 <new_line_handler+0xb4>)
 8001630:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	2b00      	cmp	r3, #0
 8001636:	dd0c      	ble.n	8001652 <new_line_handler+0x7e>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163e:	2b00      	cmp	r3, #0
 8001640:	d007      	beq.n	8001652 <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001648:	f107 0208 	add.w	r2, r7, #8
 800164c:	4611      	mov	r1, r2
 800164e:	69f8      	ldr	r0, [r7, #28]
 8001650:	4798      	blx	r3
	print_prompt (pThis);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff fb9d 	bl	8000d92 <print_prompt>
	pThis->cmdlen = 0;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3354      	adds	r3, #84	; 0x54
 800166c:	2233      	movs	r2, #51	; 0x33
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f00c f949 	bl	800d908 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 800167c:	bf00      	nop
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	0800d9e0 	.word	0x0800d9e0
 8001688:	0800d9c0 	.word	0x0800d9c0

0800168c <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	785b      	ldrb	r3, [r3, #1]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00d      	beq.n	80016ba <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4619      	mov	r1, r3
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff fd4b 	bl	8001140 <escape_process>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 81e3 	beq.w	8001a78 <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 80016b8:	e1de      	b.n	8001a78 <microrl_insert_char+0x3ec>
		switch (ch) {
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	3b01      	subs	r3, #1
 80016be:	2b7e      	cmp	r3, #126	; 0x7e
 80016c0:	f200 81af 	bhi.w	8001a22 <microrl_insert_char+0x396>
 80016c4:	a201      	add	r2, pc, #4	; (adr r2, 80016cc <microrl_insert_char+0x40>)
 80016c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ca:	bf00      	nop
 80016cc:	0800195f 	.word	0x0800195f
 80016d0:	08001997 	.word	0x08001997
 80016d4:	08001a0f 	.word	0x08001a0f
 80016d8:	08001a23 	.word	0x08001a23
 80016dc:	0800193b 	.word	0x0800193b
 80016e0:	0800196f 	.word	0x0800196f
 80016e4:	08001a23 	.word	0x08001a23
 80016e8:	080019cf 	.word	0x080019cf
 80016ec:	080018f1 	.word	0x080018f1
 80016f0:	080018c9 	.word	0x080018c9
 80016f4:	08001923 	.word	0x08001923
 80016f8:	08001a23 	.word	0x08001a23
 80016fc:	080018c9 	.word	0x080018c9
 8001700:	080019c5 	.word	0x080019c5
 8001704:	08001a23 	.word	0x08001a23
 8001708:	080019bb 	.word	0x080019bb
 800170c:	08001a23 	.word	0x08001a23
 8001710:	080019eb 	.word	0x080019eb
 8001714:	08001a23 	.word	0x08001a23
 8001718:	08001a23 	.word	0x08001a23
 800171c:	08001907 	.word	0x08001907
 8001720:	08001a23 	.word	0x08001a23
 8001724:	08001a23 	.word	0x08001a23
 8001728:	08001a23 	.word	0x08001a23
 800172c:	08001a23 	.word	0x08001a23
 8001730:	08001a23 	.word	0x08001a23
 8001734:	080018f9 	.word	0x080018f9
 8001738:	08001a23 	.word	0x08001a23
 800173c:	08001a23 	.word	0x08001a23
 8001740:	08001a23 	.word	0x08001a23
 8001744:	08001a23 	.word	0x08001a23
 8001748:	08001a23 	.word	0x08001a23
 800174c:	08001a23 	.word	0x08001a23
 8001750:	08001a23 	.word	0x08001a23
 8001754:	08001a23 	.word	0x08001a23
 8001758:	08001a23 	.word	0x08001a23
 800175c:	08001a23 	.word	0x08001a23
 8001760:	08001a23 	.word	0x08001a23
 8001764:	08001a23 	.word	0x08001a23
 8001768:	08001a23 	.word	0x08001a23
 800176c:	08001a23 	.word	0x08001a23
 8001770:	08001a23 	.word	0x08001a23
 8001774:	08001a23 	.word	0x08001a23
 8001778:	08001a23 	.word	0x08001a23
 800177c:	08001a23 	.word	0x08001a23
 8001780:	08001a23 	.word	0x08001a23
 8001784:	08001a23 	.word	0x08001a23
 8001788:	08001a23 	.word	0x08001a23
 800178c:	08001a23 	.word	0x08001a23
 8001790:	08001a23 	.word	0x08001a23
 8001794:	08001a23 	.word	0x08001a23
 8001798:	08001a23 	.word	0x08001a23
 800179c:	08001a23 	.word	0x08001a23
 80017a0:	08001a23 	.word	0x08001a23
 80017a4:	08001a23 	.word	0x08001a23
 80017a8:	08001a23 	.word	0x08001a23
 80017ac:	08001a23 	.word	0x08001a23
 80017b0:	08001a23 	.word	0x08001a23
 80017b4:	08001a23 	.word	0x08001a23
 80017b8:	08001a23 	.word	0x08001a23
 80017bc:	08001a23 	.word	0x08001a23
 80017c0:	08001a23 	.word	0x08001a23
 80017c4:	08001a23 	.word	0x08001a23
 80017c8:	08001a23 	.word	0x08001a23
 80017cc:	08001a23 	.word	0x08001a23
 80017d0:	08001a23 	.word	0x08001a23
 80017d4:	08001a23 	.word	0x08001a23
 80017d8:	08001a23 	.word	0x08001a23
 80017dc:	08001a23 	.word	0x08001a23
 80017e0:	08001a23 	.word	0x08001a23
 80017e4:	08001a23 	.word	0x08001a23
 80017e8:	08001a23 	.word	0x08001a23
 80017ec:	08001a23 	.word	0x08001a23
 80017f0:	08001a23 	.word	0x08001a23
 80017f4:	08001a23 	.word	0x08001a23
 80017f8:	08001a23 	.word	0x08001a23
 80017fc:	08001a23 	.word	0x08001a23
 8001800:	08001a23 	.word	0x08001a23
 8001804:	08001a23 	.word	0x08001a23
 8001808:	08001a23 	.word	0x08001a23
 800180c:	08001a23 	.word	0x08001a23
 8001810:	08001a23 	.word	0x08001a23
 8001814:	08001a23 	.word	0x08001a23
 8001818:	08001a23 	.word	0x08001a23
 800181c:	08001a23 	.word	0x08001a23
 8001820:	08001a23 	.word	0x08001a23
 8001824:	08001a23 	.word	0x08001a23
 8001828:	08001a23 	.word	0x08001a23
 800182c:	08001a23 	.word	0x08001a23
 8001830:	08001a23 	.word	0x08001a23
 8001834:	08001a23 	.word	0x08001a23
 8001838:	08001a23 	.word	0x08001a23
 800183c:	08001a23 	.word	0x08001a23
 8001840:	08001a23 	.word	0x08001a23
 8001844:	08001a23 	.word	0x08001a23
 8001848:	08001a23 	.word	0x08001a23
 800184c:	08001a23 	.word	0x08001a23
 8001850:	08001a23 	.word	0x08001a23
 8001854:	08001a23 	.word	0x08001a23
 8001858:	08001a23 	.word	0x08001a23
 800185c:	08001a23 	.word	0x08001a23
 8001860:	08001a23 	.word	0x08001a23
 8001864:	08001a23 	.word	0x08001a23
 8001868:	08001a23 	.word	0x08001a23
 800186c:	08001a23 	.word	0x08001a23
 8001870:	08001a23 	.word	0x08001a23
 8001874:	08001a23 	.word	0x08001a23
 8001878:	08001a23 	.word	0x08001a23
 800187c:	08001a23 	.word	0x08001a23
 8001880:	08001a23 	.word	0x08001a23
 8001884:	08001a23 	.word	0x08001a23
 8001888:	08001a23 	.word	0x08001a23
 800188c:	08001a23 	.word	0x08001a23
 8001890:	08001a23 	.word	0x08001a23
 8001894:	08001a23 	.word	0x08001a23
 8001898:	08001a23 	.word	0x08001a23
 800189c:	08001a23 	.word	0x08001a23
 80018a0:	08001a23 	.word	0x08001a23
 80018a4:	08001a23 	.word	0x08001a23
 80018a8:	08001a23 	.word	0x08001a23
 80018ac:	08001a23 	.word	0x08001a23
 80018b0:	08001a23 	.word	0x08001a23
 80018b4:	08001a23 	.word	0x08001a23
 80018b8:	08001a23 	.word	0x08001a23
 80018bc:	08001a23 	.word	0x08001a23
 80018c0:	08001a23 	.word	0x08001a23
 80018c4:	080019cf 	.word	0x080019cf
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	789b      	ldrb	r3, [r3, #2]
 80018cc:	461a      	mov	r2, r3
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	2b0d      	cmp	r3, #13
 80018d2:	d101      	bne.n	80018d8 <microrl_insert_char+0x24c>
 80018d4:	230a      	movs	r3, #10
 80018d6:	e000      	b.n	80018da <microrl_insert_char+0x24e>
 80018d8:	230d      	movs	r3, #13
 80018da:	4293      	cmp	r3, r2
 80018dc:	f000 80c1 	beq.w	8001a62 <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff fe73 	bl	80015d4 <new_line_handler>
				break;
 80018ee:	e0c3      	b.n	8001a78 <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff fdc1 	bl	8001478 <microrl_get_complite>
			break;
 80018f6:	e0bf      	b.n	8001a78 <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	705a      	strb	r2, [r3, #1]
			break;
 80018fe:	e0bb      	b.n	8001a78 <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff fd1e 	bl	8001342 <microrl_backspace>
					while (pThis->cursor > 0) {
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800190c:	2b00      	cmp	r3, #0
 800190e:	dcf7      	bgt.n	8001900 <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001916:	461a      	mov	r2, r3
 8001918:	2100      	movs	r1, #0
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff fb40 	bl	8000fa0 <terminal_print_line>
			break;
 8001920:	e0aa      	b.n	8001a78 <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001928:	4855      	ldr	r0, [pc, #340]	; (8001a80 <microrl_insert_char+0x3f4>)
 800192a:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8001938:	e09e      	b.n	8001a78 <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	4619      	mov	r1, r3
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff faa0 	bl	8000e90 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800195c:	e08c      	b.n	8001a78 <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fae6 	bl	8000f30 <terminal_reset_cursor>
				pThis->cursor = 0;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800196c:	e084      	b.n	8001a78 <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197a:	429a      	cmp	r2, r3
 800197c:	da73      	bge.n	8001a66 <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 800197e:	2101      	movs	r1, #1
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff fa85 	bl	8000e90 <terminal_move_cursor>
				pThis->cursor++;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001994:	e067      	b.n	8001a66 <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800199c:	2b00      	cmp	r3, #0
 800199e:	d064      	beq.n	8001a6a <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff fa73 	bl	8000e90 <terminal_move_cursor>
				pThis->cursor--;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019b0:	1e5a      	subs	r2, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 80019b8:	e057      	b.n	8001a6a <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 80019ba:	2100      	movs	r1, #0
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff fb8f 	bl	80010e0 <hist_search>
			break;
 80019c2:	e059      	b.n	8001a78 <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 80019c4:	2101      	movs	r1, #1
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff fb8a 	bl	80010e0 <hist_search>
			break;
 80019cc:	e054      	b.n	8001a78 <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff fcb7 	bl	8001342 <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019e0:	461a      	mov	r2, r3
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fadc 	bl	8000fa0 <terminal_print_line>
			break;
 80019e8:	e046      	b.n	8001a78 <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff f9f0 	bl	8000dd0 <terminal_newline>
				print_prompt (pThis);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff f9ce 	bl	8000d92 <print_prompt>
				terminal_reset_cursor (pThis);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff fa9a 	bl	8000f30 <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a02:	461a      	mov	r2, r3
 8001a04:	2100      	movs	r1, #0
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff faca 	bl	8000fa0 <terminal_print_line>
			break;
 8001a0c:	e034      	b.n	8001a78 <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d02a      	beq.n	8001a6e <microrl_insert_char+0x3e2>
				pThis->sigint();
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a1e:	4798      	blx	r3
			break;
 8001a20:	e025      	b.n	8001a6e <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	2b20      	cmp	r3, #32
 8001a26:	d104      	bne.n	8001a32 <microrl_insert_char+0x3a6>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01f      	beq.n	8001a72 <microrl_insert_char+0x3e6>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b1f      	cmp	r3, #31
 8001a36:	dd1c      	ble.n	8001a72 <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8001a38:	463b      	mov	r3, r7
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff fc0c 	bl	800125c <microrl_insert_text>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d015      	beq.n	8001a76 <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a50:	1e59      	subs	r1, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a58:	461a      	mov	r2, r3
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff faa0 	bl	8000fa0 <terminal_print_line>
			break;
 8001a60:	e009      	b.n	8001a76 <microrl_insert_char+0x3ea>
					break;
 8001a62:	bf00      	nop
 8001a64:	e008      	b.n	8001a78 <microrl_insert_char+0x3ec>
			break;
 8001a66:	bf00      	nop
 8001a68:	e006      	b.n	8001a78 <microrl_insert_char+0x3ec>
			break;
 8001a6a:	bf00      	nop
 8001a6c:	e004      	b.n	8001a78 <microrl_insert_char+0x3ec>
			break;
 8001a6e:	bf00      	nop
 8001a70:	e002      	b.n	8001a78 <microrl_insert_char+0x3ec>
	}
 8001a72:	bf00      	nop
 8001a74:	e000      	b.n	8001a78 <microrl_insert_char+0x3ec>
			break;
 8001a76:	bf00      	nop
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	0800d9d4 	.word	0x0800d9d4

08001a84 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <microrl_print_char+0x20>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	79fa      	ldrb	r2, [r7, #7]
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fdf8 	bl	800168c <microrl_insert_char>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000008 	.word	0x20000008

08001aa8 <print>:

void print (const char * str)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 8001ab0:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <print+0x84>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	f083 0301 	eor.w	r3, r3, #1
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <print+0x1e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b1b      	cmp	r3, #27
 8001ac4:	d02b      	beq.n	8001b1e <print+0x76>
		return;
	if (!CDC_is_ready)
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <print+0x88>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	f083 0301 	eor.w	r3, r3, #1
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d126      	bne.n	8001b22 <print+0x7a>
		return;
	uint16_t len = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 8001ad8:	89fb      	ldrh	r3, [r7, #14]
 8001ada:	3301      	adds	r3, #1
 8001adc:	81fb      	strh	r3, [r7, #14]
 8001ade:	89fb      	ldrh	r3, [r7, #14]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f6      	bne.n	8001ad8 <print+0x30>
	uint32_t timeout = HAL_GetTick();
 8001aea:	f000 fe77 	bl	80027dc <HAL_GetTick>
 8001aee:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001af0:	e006      	b.n	8001b00 <print+0x58>
		if (HAL_GetTick() - timeout >= 5)
 8001af2:	f000 fe73 	bl	80027dc <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d807      	bhi.n	8001b10 <print+0x68>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <print+0x8c>)
 8001b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001b06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f1      	bne.n	8001af2 <print+0x4a>
 8001b0e:	e000      	b.n	8001b12 <print+0x6a>
			break;
 8001b10:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 8001b12:	89fb      	ldrh	r3, [r7, #14]
 8001b14:	4619      	mov	r1, r3
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f00b facc 	bl	800d0b4 <CDC_Transmit_FS>
 8001b1c:	e002      	b.n	8001b24 <print+0x7c>
		return;
 8001b1e:	bf00      	nop
 8001b20:	e000      	b.n	8001b24 <print+0x7c>
		return;
 8001b22:	bf00      	nop
}
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000000c 	.word	0x2000000c
 8001b30:	200001b0 	.word	0x200001b0
 8001b34:	20002698 	.word	0x20002698

08001b38 <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	e010      	b.n	8001b6a <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 8001b48:	490c      	ldr	r1, [pc, #48]	; (8001b7c <find_color_by_name+0x44>)
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	440b      	add	r3, r1
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	79fa      	ldrb	r2, [r7, #7]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d101      	bne.n	8001b64 <find_color_by_name+0x2c>
		{
			return i;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	e006      	b.n	8001b72 <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3301      	adds	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2b10      	cmp	r3, #16
 8001b6e:	d9eb      	bls.n	8001b48 <find_color_by_name+0x10>
		}
	}
	return 0;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	0800dfcc 	.word	0x0800dfcc

08001b80 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff ffd2 	bl	8001b38 <find_color_by_name>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <print_color+0x44>)
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ff7e 	bl	8001aa8 <print>
	print(str);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff7b 	bl	8001aa8 <print>
	print(COLOR_NC);
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <print_color+0x48>)
 8001bb4:	f7ff ff78 	bl	8001aa8 <print>
	return 0;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	0800dfcc 	.word	0x0800dfcc
 8001bc8:	0800d9f8 	.word	0x0800d9f8

08001bcc <str_length>:

int str_length(const char * str)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8001bd8:	e002      	b.n	8001be0 <str_length+0x14>
		i++;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f6      	bne.n	8001bda <str_length+0xe>
	return i;
 8001bec:	68fb      	ldr	r3, [r7, #12]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <print_help>:


int print_help(int argc, const char * const * argv)
{
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
	print(_VER);
 8001c02:	4858      	ldr	r0, [pc, #352]	; (8001d64 <print_help+0x16c>)
 8001c04:	f7ff ff50 	bl	8001aa8 <print>
	print(ENDL);
 8001c08:	4857      	ldr	r0, [pc, #348]	; (8001d68 <print_help+0x170>)
 8001c0a:	f7ff ff4d 	bl	8001aa8 <print>
	print ("Use ");
 8001c0e:	4857      	ldr	r0, [pc, #348]	; (8001d6c <print_help+0x174>)
 8001c10:	f7ff ff4a 	bl	8001aa8 <print>
	print_color("TAB", C_GREEN);
 8001c14:	2105      	movs	r1, #5
 8001c16:	4856      	ldr	r0, [pc, #344]	; (8001d70 <print_help+0x178>)
 8001c18:	f7ff ffb2 	bl	8001b80 <print_color>
	print(" key for completion");
 8001c1c:	4855      	ldr	r0, [pc, #340]	; (8001d74 <print_help+0x17c>)
 8001c1e:	f7ff ff43 	bl	8001aa8 <print>
	print (ENDL);
 8001c22:	4851      	ldr	r0, [pc, #324]	; (8001d68 <print_help+0x170>)
 8001c24:	f7ff ff40 	bl	8001aa8 <print>
	print ("Available commands:");
 8001c28:	4853      	ldr	r0, [pc, #332]	; (8001d78 <print_help+0x180>)
 8001c2a:	f7ff ff3d 	bl	8001aa8 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	e08a      	b.n	8001d4a <print_help+0x152>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 8001c34:	4a51      	ldr	r2, [pc, #324]	; (8001d7c <print_help+0x184>)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	019b      	lsls	r3, r3, #6
 8001c3a:	4413      	add	r3, r2
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c42:	d11b      	bne.n	8001c7c <print_help+0x84>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	4a4c      	ldr	r2, [pc, #304]	; (8001d7c <print_help+0x184>)
 8001c4a:	019b      	lsls	r3, r3, #6
 8001c4c:	4413      	add	r3, r2
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d004      	beq.n	8001c60 <print_help+0x68>
				print_color(" aka ", C_L_PURPLE);
 8001c56:	210c      	movs	r1, #12
 8001c58:	4849      	ldr	r0, [pc, #292]	; (8001d80 <print_help+0x188>)
 8001c5a:	f7ff ff91 	bl	8001b80 <print_color>
 8001c5e:	e003      	b.n	8001c68 <print_help+0x70>
			else
				print_color("/", C_L_PURPLE);
 8001c60:	210c      	movs	r1, #12
 8001c62:	4848      	ldr	r0, [pc, #288]	; (8001d84 <print_help+0x18c>)
 8001c64:	f7ff ff8c 	bl	8001b80 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	019b      	lsls	r3, r3, #6
 8001c6c:	4a43      	ldr	r2, [pc, #268]	; (8001d7c <print_help+0x184>)
 8001c6e:	4413      	add	r3, r2
 8001c70:	3304      	adds	r3, #4
 8001c72:	210b      	movs	r1, #11
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff83 	bl	8001b80 <print_color>
 8001c7a:	e063      	b.n	8001d44 <print_help+0x14c>
		}
		else
		{
			print(ENDL);
 8001c7c:	483a      	ldr	r0, [pc, #232]	; (8001d68 <print_help+0x170>)
 8001c7e:	f7ff ff13 	bl	8001aa8 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8001c82:	f06f 0303 	mvn.w	r3, #3
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	e005      	b.n	8001c96 <print_help+0x9e>
				print(" ");
 8001c8a:	483f      	ldr	r0, [pc, #252]	; (8001d88 <print_help+0x190>)
 8001c8c:	f7ff ff0c 	bl	8001aa8 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	3301      	adds	r3, #1
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	4a39      	ldr	r2, [pc, #228]	; (8001d7c <print_help+0x184>)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	019b      	lsls	r3, r3, #6
 8001c9c:	4413      	add	r3, r2
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	dbf1      	blt.n	8001c8a <print_help+0x92>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	019b      	lsls	r3, r3, #6
 8001caa:	4a34      	ldr	r2, [pc, #208]	; (8001d7c <print_help+0x184>)
 8001cac:	4413      	add	r3, r2
 8001cae:	1d1a      	adds	r2, r3, #4
 8001cb0:	4932      	ldr	r1, [pc, #200]	; (8001d7c <print_help+0x184>)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	019b      	lsls	r3, r3, #6
 8001cb6:	440b      	add	r3, r1
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4934      	ldr	r1, [pc, #208]	; (8001d8c <print_help+0x194>)
 8001cbc:	5ccb      	ldrb	r3, [r1, r3]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	f7ff ff5d 	bl	8001b80 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	e005      	b.n	8001cd8 <print_help+0xe0>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 8001ccc:	482e      	ldr	r0, [pc, #184]	; (8001d88 <print_help+0x190>)
 8001cce:	f7ff feeb 	bl	8001aa8 <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	4a28      	ldr	r2, [pc, #160]	; (8001d7c <print_help+0x184>)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	019b      	lsls	r3, r3, #6
 8001cde:	4413      	add	r3, r2
 8001ce0:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001ce2:	f1c3 040c 	rsb	r4, r3, #12
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	019b      	lsls	r3, r3, #6
 8001cea:	4a24      	ldr	r2, [pc, #144]	; (8001d7c <print_help+0x184>)
 8001cec:	4413      	add	r3, r2
 8001cee:	3304      	adds	r3, #4
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff6b 	bl	8001bcc <str_length>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	dbe5      	blt.n	8001ccc <print_help+0xd4>
			switch (microrl_actions[i].level){
 8001d00:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <print_help+0x184>)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	019b      	lsls	r3, r3, #6
 8001d06:	4413      	add	r3, r2
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <print_help+0x11c>
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d004      	beq.n	8001d1c <print_help+0x124>
 8001d12:	e007      	b.n	8001d24 <print_help+0x12c>
			case 0:
				print ("-");
 8001d14:	481e      	ldr	r0, [pc, #120]	; (8001d90 <print_help+0x198>)
 8001d16:	f7ff fec7 	bl	8001aa8 <print>
				break;
 8001d1a:	e007      	b.n	8001d2c <print_help+0x134>
			case 1:
				print ("^");
 8001d1c:	481d      	ldr	r0, [pc, #116]	; (8001d94 <print_help+0x19c>)
 8001d1e:	f7ff fec3 	bl	8001aa8 <print>
				break;
 8001d22:	e003      	b.n	8001d2c <print_help+0x134>
			default:
				print ("#");
 8001d24:	481c      	ldr	r0, [pc, #112]	; (8001d98 <print_help+0x1a0>)
 8001d26:	f7ff febf 	bl	8001aa8 <print>
				break;
 8001d2a:	bf00      	nop
			}
			print (" ");
 8001d2c:	4816      	ldr	r0, [pc, #88]	; (8001d88 <print_help+0x190>)
 8001d2e:	f7ff febb 	bl	8001aa8 <print>
			print (microrl_actions[i].help_msg);
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	019b      	lsls	r3, r3, #6
 8001d36:	3308      	adds	r3, #8
 8001d38:	4a10      	ldr	r2, [pc, #64]	; (8001d7c <print_help+0x184>)
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3306      	adds	r3, #6
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff feb2 	bl	8001aa8 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3301      	adds	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b0d      	cmp	r3, #13
 8001d4e:	f67f af71 	bls.w	8001c34 <print_help+0x3c>
		}
	}
	print(ENDL);
 8001d52:	4805      	ldr	r0, [pc, #20]	; (8001d68 <print_help+0x170>)
 8001d54:	f7ff fea8 	bl	8001aa8 <print>
	return 0;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	371c      	adds	r7, #28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd90      	pop	{r4, r7, pc}
 8001d62:	bf00      	nop
 8001d64:	0800da00 	.word	0x0800da00
 8001d68:	0800da10 	.word	0x0800da10
 8001d6c:	0800da14 	.word	0x0800da14
 8001d70:	0800da1c 	.word	0x0800da1c
 8001d74:	0800da20 	.word	0x0800da20
 8001d78:	0800da34 	.word	0x0800da34
 8001d7c:	0800dc4c 	.word	0x0800dc4c
 8001d80:	0800da48 	.word	0x0800da48
 8001d84:	0800da50 	.word	0x0800da50
 8001d88:	0800da54 	.word	0x0800da54
 8001d8c:	0800e088 	.word	0x0800e088
 8001d90:	0800da58 	.word	0x0800da58
 8001d94:	0800da5c 	.word	0x0800da5c
 8001d98:	0800da60 	.word	0x0800da60

08001d9c <execute>:



int execute (int argc, const char * const * argv)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
//	print_help(argc, argv);
//	return 0;
	int (*func)   (int argc, const char * const * argv ) = NULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 8001db2:	2300      	movs	r3, #0
 8001db4:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	e050      	b.n	8001e5e <execute+0xc2>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	e03f      	b.n	8001e42 <execute+0xa6>
		{
			tokens_found = false;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 8001dc6:	4a52      	ldr	r2, [pc, #328]	; (8001f10 <execute+0x174>)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	019b      	lsls	r3, r3, #6
 8001dcc:	4413      	add	r3, r2
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd8:	d001      	beq.n	8001dde <execute+0x42>
				synonym_level = current_level; // save the synonym level
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de4:	d003      	beq.n	8001dee <execute+0x52>
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	db2d      	blt.n	8001e4a <execute+0xae>
				break;
			if (current_level == i)
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d101      	bne.n	8001dfa <execute+0x5e>
				last_main_synonym = n;
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	4413      	add	r3, r2
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	019b      	lsls	r3, r3, #6
 8001e08:	4941      	ldr	r1, [pc, #260]	; (8001f10 <execute+0x174>)
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4610      	mov	r0, r2
 8001e12:	f7fe f99d 	bl	8000150 <strcmp>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10f      	bne.n	8001e3c <execute+0xa0>
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d10b      	bne.n	8001e3c <execute+0xa0>
					(i == synonym_level))
			{
				tokens_found = true;
 8001e24:	2301      	movs	r3, #1
 8001e26:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 8001e28:	6a3b      	ldr	r3, [r7, #32]
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	623a      	str	r2, [r7, #32]
 8001e2e:	4a38      	ldr	r2, [pc, #224]	; (8001f10 <execute+0x174>)
 8001e30:	019b      	lsls	r3, r3, #6
 8001e32:	4413      	add	r3, r2
 8001e34:	333c      	adds	r3, #60	; 0x3c
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001e3a:	e007      	b.n	8001e4c <execute+0xb0>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b0d      	cmp	r3, #13
 8001e46:	d9bc      	bls.n	8001dc2 <execute+0x26>
 8001e48:	e000      	b.n	8001e4c <execute+0xb0>
				break;
 8001e4a:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 8001e4c:	7efb      	ldrb	r3, [r7, #27]
 8001e4e:	f083 0301 	eor.w	r3, r3, #1
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d107      	bne.n	8001e68 <execute+0xcc>
	for (int i = 0; i < argc; i++)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	dbaa      	blt.n	8001dbc <execute+0x20>
 8001e66:	e000      	b.n	8001e6a <execute+0xce>
			break;
 8001e68:	bf00      	nop
	}

	if (func != NULL)
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <execute+0xe0>
	{
		return func(argc, argv); // function found
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	6839      	ldr	r1, [r7, #0]
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	4798      	blx	r3
 8001e78:	4603      	mov	r3, r0
 8001e7a:	e045      	b.n	8001f08 <execute+0x16c>
	} else if (tokens_found)
 8001e7c:	7efb      	ldrb	r3, [r7, #27]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d021      	beq.n	8001ec6 <execute+0x12a>
	{
		print_color ("command: '", C_L_RED);
 8001e82:	210a      	movs	r1, #10
 8001e84:	4823      	ldr	r0, [pc, #140]	; (8001f14 <execute+0x178>)
 8001e86:	f7ff fe7b 	bl	8001b80 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	210a      	movs	r1, #10
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fe75 	bl	8001b80 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 8001e96:	210a      	movs	r1, #10
 8001e98:	481f      	ldr	r0, [pc, #124]	; (8001f18 <execute+0x17c>)
 8001e9a:	f7ff fe71 	bl	8001b80 <print_color>
		print(ENDL);
 8001e9e:	481f      	ldr	r0, [pc, #124]	; (8001f1c <execute+0x180>)
 8001ea0:	f7ff fe02 	bl	8001aa8 <print>
		print_color ("use '", C_NC);
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	481e      	ldr	r0, [pc, #120]	; (8001f20 <execute+0x184>)
 8001ea8:	f7ff fe6a 	bl	8001b80 <print_color>
		print_color ("?", C_GREEN);
 8001eac:	2105      	movs	r1, #5
 8001eae:	481d      	ldr	r0, [pc, #116]	; (8001f24 <execute+0x188>)
 8001eb0:	f7ff fe66 	bl	8001b80 <print_color>
		print_color ("' for help", C_NC);
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	481c      	ldr	r0, [pc, #112]	; (8001f28 <execute+0x18c>)
 8001eb8:	f7ff fe62 	bl	8001b80 <print_color>
		print (ENDL);
 8001ebc:	4817      	ldr	r0, [pc, #92]	; (8001f1c <execute+0x180>)
 8001ebe:	f7ff fdf3 	bl	8001aa8 <print>
		return 1;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e020      	b.n	8001f08 <execute+0x16c>
	}
	else
	{
		print_color ("command: '", C_RED);
 8001ec6:	2109      	movs	r1, #9
 8001ec8:	4812      	ldr	r0, [pc, #72]	; (8001f14 <execute+0x178>)
 8001eca:	f7ff fe59 	bl	8001b80 <print_color>
		print_color ((char*)argv[0], C_RED);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2109      	movs	r1, #9
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fe53 	bl	8001b80 <print_color>
		print_color ("' not found", C_RED);
 8001eda:	2109      	movs	r1, #9
 8001edc:	4813      	ldr	r0, [pc, #76]	; (8001f2c <execute+0x190>)
 8001ede:	f7ff fe4f 	bl	8001b80 <print_color>
		print(ENDL);
 8001ee2:	480e      	ldr	r0, [pc, #56]	; (8001f1c <execute+0x180>)
 8001ee4:	f7ff fde0 	bl	8001aa8 <print>
		print_color ("use '", C_NC);
 8001ee8:	2100      	movs	r1, #0
 8001eea:	480d      	ldr	r0, [pc, #52]	; (8001f20 <execute+0x184>)
 8001eec:	f7ff fe48 	bl	8001b80 <print_color>
		print_color ("?", C_GREEN);
 8001ef0:	2105      	movs	r1, #5
 8001ef2:	480c      	ldr	r0, [pc, #48]	; (8001f24 <execute+0x188>)
 8001ef4:	f7ff fe44 	bl	8001b80 <print_color>
		print_color ("' for help", C_NC);
 8001ef8:	2100      	movs	r1, #0
 8001efa:	480b      	ldr	r0, [pc, #44]	; (8001f28 <execute+0x18c>)
 8001efc:	f7ff fe40 	bl	8001b80 <print_color>
		print (ENDL);
 8001f00:	4806      	ldr	r0, [pc, #24]	; (8001f1c <execute+0x180>)
 8001f02:	f7ff fdd1 	bl	8001aa8 <print>
		return 1;
 8001f06:	2301      	movs	r3, #1

	}
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3728      	adds	r7, #40	; 0x28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	0800dc4c 	.word	0x0800dc4c
 8001f14:	0800da64 	.word	0x0800da64
 8001f18:	0800da70 	.word	0x0800da70
 8001f1c:	0800da10 	.word	0x0800da10
 8001f20:	0800da90 	.word	0x0800da90
 8001f24:	0800da98 	.word	0x0800da98
 8001f28:	0800da9c 	.word	0x0800da9c
 8001f2c:	0800daa8 	.word	0x0800daa8

08001f30 <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08c      	sub	sp, #48	; 0x30
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
	int j = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 8001f3e:	4b5b      	ldr	r3, [pc, #364]	; (80020ac <complet+0x17c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d11b      	bne.n	8001f82 <complet+0x52>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f4e:	e014      	b.n	8001f7a <complet+0x4a>
			if (microrl_actions[i].level == 0)
 8001f50:	4a57      	ldr	r2, [pc, #348]	; (80020b0 <complet+0x180>)
 8001f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f54:	019b      	lsls	r3, r3, #6
 8001f56:	4413      	add	r3, r2
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10a      	bne.n	8001f74 <complet+0x44>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 8001f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f66:	0192      	lsls	r2, r2, #6
 8001f68:	4951      	ldr	r1, [pc, #324]	; (80020b0 <complet+0x180>)
 8001f6a:	440a      	add	r2, r1
 8001f6c:	3204      	adds	r2, #4
 8001f6e:	494f      	ldr	r1, [pc, #316]	; (80020ac <complet+0x17c>)
 8001f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	3301      	adds	r3, #1
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7c:	2b0d      	cmp	r3, #13
 8001f7e:	d9e7      	bls.n	8001f50 <complet+0x20>
 8001f80:	e08a      	b.n	8002098 <complet+0x168>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61bb      	str	r3, [r7, #24]
 8001fa4:	e072      	b.n	800208c <complet+0x15c>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	e061      	b.n	8002070 <complet+0x140>
			{
				tokens_found = false;
 8001fac:	2300      	movs	r3, #0
 8001fae:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 8001fb0:	4a3f      	ldr	r2, [pc, #252]	; (80020b0 <complet+0x180>)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	019b      	lsls	r3, r3, #6
 8001fb6:	4413      	add	r3, r2
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc2:	d001      	beq.n	8001fc8 <complet+0x98>
					synonym_level = current_level; // save the synonym level
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fce:	d003      	beq.n	8001fd8 <complet+0xa8>
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	db4f      	blt.n	8002078 <complet+0x148>
					break;
				if (current_level == i)
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d101      	bne.n	8001fe4 <complet+0xb4>
					last_main_synonym = n;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d122      	bne.n	8002034 <complet+0x104>
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	019b      	lsls	r3, r3, #6
 8001ff2:	4a2f      	ldr	r2, [pc, #188]	; (80020b0 <complet+0x180>)
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	6939      	ldr	r1, [r7, #16]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f00b fc8c 	bl	800d918 <strstr>
 8002000:	4602      	mov	r2, r0
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	019b      	lsls	r3, r3, #6
 8002006:	492a      	ldr	r1, [pc, #168]	; (80020b0 <complet+0x180>)
 8002008:	440b      	add	r3, r1
 800200a:	3304      	adds	r3, #4
 800200c:	429a      	cmp	r2, r3
 800200e:	d111      	bne.n	8002034 <complet+0x104>
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	6a3b      	ldr	r3, [r7, #32]
 8002014:	429a      	cmp	r2, r3
 8002016:	d10d      	bne.n	8002034 <complet+0x104>
										(i == synonym_level))
				{
					tokens_found = true;
 8002018:	2301      	movs	r3, #1
 800201a:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 800201c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	0192      	lsls	r2, r2, #6
 8002026:	4922      	ldr	r1, [pc, #136]	; (80020b0 <complet+0x180>)
 8002028:	440a      	add	r2, r1
 800202a:	3204      	adds	r2, #4
 800202c:	491f      	ldr	r1, [pc, #124]	; (80020ac <complet+0x17c>)
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002032:	e01a      	b.n	800206a <complet+0x13a>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	4413      	add	r3, r2
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	019b      	lsls	r3, r3, #6
 8002042:	491b      	ldr	r1, [pc, #108]	; (80020b0 <complet+0x180>)
 8002044:	440b      	add	r3, r1
 8002046:	3304      	adds	r3, #4
 8002048:	4619      	mov	r1, r3
 800204a:	4610      	mov	r0, r2
 800204c:	f7fe f880 	bl	8000150 <strcmp>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d109      	bne.n	800206a <complet+0x13a>
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	429a      	cmp	r2, r3
 800205c:	d105      	bne.n	800206a <complet+0x13a>
				{
					last_main_synonym++;
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	3301      	adds	r3, #1
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 8002064:	2301      	movs	r3, #1
 8002066:	77fb      	strb	r3, [r7, #31]
					break;
 8002068:	e007      	b.n	800207a <complet+0x14a>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3301      	adds	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2b0d      	cmp	r3, #13
 8002074:	d99a      	bls.n	8001fac <complet+0x7c>
 8002076:	e000      	b.n	800207a <complet+0x14a>
					break;
 8002078:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 800207a:	7ffb      	ldrb	r3, [r7, #31]
 800207c:	f083 0301 	eor.w	r3, r3, #1
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d107      	bne.n	8002096 <complet+0x166>
		for (int i = 0; i < argc; i++)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	3301      	adds	r3, #1
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	db88      	blt.n	8001fa6 <complet+0x76>
 8002094:	e000      	b.n	8002098 <complet+0x168>
				break;
 8002096:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <complet+0x17c>)
 800209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209c:	2100      	movs	r1, #0
 800209e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 80020a2:	4b02      	ldr	r3, [pc, #8]	; (80020ac <complet+0x17c>)
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3730      	adds	r7, #48	; 0x30
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20002494 	.word	0x20002494
 80020b0:	0800dc4c 	.word	0x0800dc4c

080020b4 <sigint>:
#endif


void sigint (void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <sigint+0x48>)
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]


	print (ENDL);
 80020c0:	480f      	ldr	r0, [pc, #60]	; (8002100 <sigint+0x4c>)
 80020c2:	f7ff fcf1 	bl	8001aa8 <print>
	print ("^C catched!");
 80020c6:	480f      	ldr	r0, [pc, #60]	; (8002104 <sigint+0x50>)
 80020c8:	f7ff fcee 	bl	8001aa8 <print>
	int i = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 80020d0:	e009      	b.n	80020e6 <sigint+0x32>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <sigint+0x54>)
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	4a08      	ldr	r2, [pc, #32]	; (8002100 <sigint+0x4c>)
 80020de:	5cd3      	ldrb	r3, [r2, r3]
 80020e0:	4619      	mov	r1, r3
 80020e2:	f7ff fad3 	bl	800168c <microrl_insert_char>
	while (ENTER[i])
 80020e6:	4a06      	ldr	r2, [pc, #24]	; (8002100 <sigint+0x4c>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1ef      	bne.n	80020d2 <sigint+0x1e>
}
 80020f2:	bf00      	nop
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	200001b1 	.word	0x200001b1
 8002100:	0800da10 	.word	0x0800da10
 8002104:	0800dab4 	.word	0x0800dab4
 8002108:	20000008 	.word	0x20000008

0800210c <init_microrl>:

void init_microrl(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <init_microrl+0x38>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	490c      	ldr	r1, [pc, #48]	; (8002148 <init_microrl+0x3c>)
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe ff7a 	bl	8001010 <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <init_microrl+0x38>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	490a      	ldr	r1, [pc, #40]	; (800214c <init_microrl+0x40>)
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe ffc0 	bl	80010a8 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <init_microrl+0x38>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4908      	ldr	r1, [pc, #32]	; (8002150 <init_microrl+0x44>)
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe ffac 	bl	800108c <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <init_microrl+0x38>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4906      	ldr	r1, [pc, #24]	; (8002154 <init_microrl+0x48>)
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe ffc2 	bl	80010c4 <microrl_set_sigint_callback>
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000008 	.word	0x20000008
 8002148:	08001aa9 	.word	0x08001aa9
 800214c:	08001d9d 	.word	0x08001d9d
 8002150:	08001f31 	.word	0x08001f31
 8002154:	080020b5 	.word	0x080020b5

08002158 <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 8002162:	4805      	ldr	r0, [pc, #20]	; (8002178 <clear_screen+0x20>)
 8002164:	f7ff fca0 	bl	8001aa8 <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 8002168:	4804      	ldr	r0, [pc, #16]	; (800217c <clear_screen+0x24>)
 800216a:	f7ff fc9d 	bl	8001aa8 <print>
	return 0;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	0800dac0 	.word	0x0800dac0
 800217c:	0800dac8 	.word	0x0800dac8

08002180 <set_CDC_ready>:


void set_CDC_ready(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
	CDC_is_ready = true;
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <set_CDC_ready+0x14>)
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	200001b0 	.word	0x200001b0

08002198 <color_toggle>:


int color_toggle 	(int argc, const char * const * argv)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <color_toggle+0x30>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	f083 0301 	eor.w	r3, r3, #1
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf14      	ite	ne
 80021b0:	2301      	movne	r3, #1
 80021b2:	2300      	moveq	r3, #0
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <color_toggle+0x30>)
 80021b8:	701a      	strb	r2, [r3, #0]
	return 0;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	2000000c 	.word	0x2000000c

080021cc <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
	color_out = 1;
 80021d6:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <color_on+0x28>)
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 80021dc:	2105      	movs	r1, #5
 80021de:	4806      	ldr	r0, [pc, #24]	; (80021f8 <color_on+0x2c>)
 80021e0:	f7ff fcce 	bl	8001b80 <print_color>
	print(ENDL);
 80021e4:	4805      	ldr	r0, [pc, #20]	; (80021fc <color_on+0x30>)
 80021e6:	f7ff fc5f 	bl	8001aa8 <print>
	return 0;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	2000000c 	.word	0x2000000c
 80021f8:	0800dacc 	.word	0x0800dacc
 80021fc:	0800da10 	.word	0x0800da10

08002200 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
	color_out = 0;
 800220a:	4b07      	ldr	r3, [pc, #28]	; (8002228 <color_off+0x28>)
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 8002210:	4806      	ldr	r0, [pc, #24]	; (800222c <color_off+0x2c>)
 8002212:	f7ff fc49 	bl	8001aa8 <print>
	print(ENDL);
 8002216:	4806      	ldr	r0, [pc, #24]	; (8002230 <color_off+0x30>)
 8002218:	f7ff fc46 	bl	8001aa8 <print>
	return 0;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	2000000c 	.word	0x2000000c
 800222c:	0800dae0 	.word	0x0800dae0
 8002230:	0800da10 	.word	0x0800da10

08002234 <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
	if (color_out)
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <color_show+0x34>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 8002246:	2105      	movs	r1, #5
 8002248:	4808      	ldr	r0, [pc, #32]	; (800226c <color_show+0x38>)
 800224a:	f7ff fc99 	bl	8001b80 <print_color>
 800224e:	e002      	b.n	8002256 <color_show+0x22>
	else
		print ("Color output is OFF");
 8002250:	4807      	ldr	r0, [pc, #28]	; (8002270 <color_show+0x3c>)
 8002252:	f7ff fc29 	bl	8001aa8 <print>
	print(ENDL);
 8002256:	4807      	ldr	r0, [pc, #28]	; (8002274 <color_show+0x40>)
 8002258:	f7ff fc26 	bl	8001aa8 <print>
	return 0;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	2000000c 	.word	0x2000000c
 800226c:	0800dacc 	.word	0x0800dacc
 8002270:	0800dae0 	.word	0x0800dae0
 8002274:	0800da10 	.word	0x0800da10

08002278 <nema_toggle>:


int nema_toggle 	(int argc, const char * const * argv)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
	nema_out ^= 1;
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <nema_toggle+0x30>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	f083 0301 	eor.w	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	bf14      	ite	ne
 8002290:	2301      	movne	r3, #1
 8002292:	2300      	moveq	r3, #0
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <nema_toggle+0x30>)
 8002298:	701a      	strb	r2, [r3, #0]
	return 0;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	200001b1 	.word	0x200001b1

080022ac <nema_on>:

int nema_on 		(int argc, const char * const * argv)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
	nema_out = 1;
 80022b6:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <nema_on+0x28>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
	print_color ("NEMA output is ON", C_GREEN);
 80022bc:	2105      	movs	r1, #5
 80022be:	4806      	ldr	r0, [pc, #24]	; (80022d8 <nema_on+0x2c>)
 80022c0:	f7ff fc5e 	bl	8001b80 <print_color>
	print(ENDL);
 80022c4:	4805      	ldr	r0, [pc, #20]	; (80022dc <nema_on+0x30>)
 80022c6:	f7ff fbef 	bl	8001aa8 <print>
	return 0;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	200001b1 	.word	0x200001b1
 80022d8:	0800daf4 	.word	0x0800daf4
 80022dc:	0800da10 	.word	0x0800da10

080022e0 <nema_off>:

int nema_off 		(int argc, const char * const * argv)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
	nema_out = 0;
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <nema_off+0x28>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
	print ("NEM output is OFF");
 80022f0:	4806      	ldr	r0, [pc, #24]	; (800230c <nema_off+0x2c>)
 80022f2:	f7ff fbd9 	bl	8001aa8 <print>
	print(ENDL);
 80022f6:	4806      	ldr	r0, [pc, #24]	; (8002310 <nema_off+0x30>)
 80022f8:	f7ff fbd6 	bl	8001aa8 <print>
	return 0;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200001b1 	.word	0x200001b1
 800230c:	0800db08 	.word	0x0800db08
 8002310:	0800da10 	.word	0x0800da10

08002314 <show_encoder>:


int show_encoder (int argc, const char * const * argv)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]

	uint32_t buf = encoder_value;
 800231e:	4b1b      	ldr	r3, [pc, #108]	; (800238c <show_encoder+0x78>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	617b      	str	r3, [r7, #20]
	char str [8];

	for (int i = 0; i < 5; i++)
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	e01d      	b.n	8002366 <show_encoder+0x52>
	{
		str[4 - i] = buf % 10 + '0';
 800232a:	6979      	ldr	r1, [r7, #20]
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <show_encoder+0x7c>)
 800232e:	fba3 2301 	umull	r2, r3, r3, r1
 8002332:	08da      	lsrs	r2, r3, #3
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	1aca      	subs	r2, r1, r3
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f1c3 0304 	rsb	r3, r3, #4
 8002346:	3230      	adds	r2, #48	; 0x30
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	f107 0118 	add.w	r1, r7, #24
 800234e:	440b      	add	r3, r1
 8002350:	f803 2c10 	strb.w	r2, [r3, #-16]
		buf /= 10;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <show_encoder+0x7c>)
 8002358:	fba2 2303 	umull	r2, r3, r2, r3
 800235c:	08db      	lsrs	r3, r3, #3
 800235e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 5; i++)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	3301      	adds	r3, #1
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	2b04      	cmp	r3, #4
 800236a:	ddde      	ble.n	800232a <show_encoder+0x16>
	}
	str[5] = '\r';
 800236c:	230d      	movs	r3, #13
 800236e:	737b      	strb	r3, [r7, #13]
	str[6] = '\n';
 8002370:	230a      	movs	r3, #10
 8002372:	73bb      	strb	r3, [r7, #14]
	str[7] = '\0';
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]
	print(str);
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fb93 	bl	8001aa8 <print>
	return 0;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	200001ac 	.word	0x200001ac
 8002390:	cccccccd 	.word	0xcccccccd

08002394 <get_nema>:


bool get_nema(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
	return nema_out;
 8002398:	4b02      	ldr	r3, [pc, #8]	; (80023a4 <get_nema+0x10>)
 800239a:	781b      	ldrb	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	200001b1 	.word	0x200001b1

080023a8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <MX_SPI2_Init+0x64>)
 80023ae:	4a18      	ldr	r2, [pc, #96]	; (8002410 <MX_SPI2_Init+0x68>)
 80023b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80023b2:	4b16      	ldr	r3, [pc, #88]	; (800240c <MX_SPI2_Init+0x64>)
 80023b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <MX_SPI2_Init+0x64>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <MX_SPI2_Init+0x64>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <MX_SPI2_Init+0x64>)
 80023c8:	2202      	movs	r2, #2
 80023ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <MX_SPI2_Init+0x64>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <MX_SPI2_Init+0x64>)
 80023d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <MX_SPI2_Init+0x64>)
 80023dc:	2218      	movs	r2, #24
 80023de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <MX_SPI2_Init+0x64>)
 80023e2:	2280      	movs	r2, #128	; 0x80
 80023e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023e6:	4b09      	ldr	r3, [pc, #36]	; (800240c <MX_SPI2_Init+0x64>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ec:	4b07      	ldr	r3, [pc, #28]	; (800240c <MX_SPI2_Init+0x64>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <MX_SPI2_Init+0x64>)
 80023f4:	220a      	movs	r2, #10
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80023f8:	4804      	ldr	r0, [pc, #16]	; (800240c <MX_SPI2_Init+0x64>)
 80023fa:	f002 ff3f 	bl	800527c <HAL_SPI_Init>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002404:	f7fe fab4 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20002570 	.word	0x20002570
 8002410:	40003800 	.word	0x40003800

08002414 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <HAL_SPI_MspInit+0x8c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d131      	bne.n	8002498 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002434:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <HAL_SPI_MspInit+0x90>)
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	4a1a      	ldr	r2, [pc, #104]	; (80024a4 <HAL_SPI_MspInit+0x90>)
 800243a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800243e:	61d3      	str	r3, [r2, #28]
 8002440:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <HAL_SPI_MspInit+0x90>)
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244c:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <HAL_SPI_MspInit+0x90>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <HAL_SPI_MspInit+0x90>)
 8002452:	f043 0308 	orr.w	r3, r3, #8
 8002456:	6193      	str	r3, [r2, #24]
 8002458:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_SPI_MspInit+0x90>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002464:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002468:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800246e:	2303      	movs	r3, #3
 8002470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002472:	f107 0310 	add.w	r3, r7, #16
 8002476:	4619      	mov	r1, r3
 8002478:	480b      	ldr	r0, [pc, #44]	; (80024a8 <HAL_SPI_MspInit+0x94>)
 800247a:	f000 fb49 	bl	8002b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800247e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	f107 0310 	add.w	r3, r7, #16
 8002490:	4619      	mov	r1, r3
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <HAL_SPI_MspInit+0x94>)
 8002494:	f000 fb3c 	bl	8002b10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002498:	bf00      	nop
 800249a:	3720      	adds	r7, #32
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40003800 	.word	0x40003800
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40010c00 	.word	0x40010c00

080024ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024b2:	4b18      	ldr	r3, [pc, #96]	; (8002514 <HAL_MspInit+0x68>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	4a17      	ldr	r2, [pc, #92]	; (8002514 <HAL_MspInit+0x68>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6193      	str	r3, [r2, #24]
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_MspInit+0x68>)
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_MspInit+0x68>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4a11      	ldr	r2, [pc, #68]	; (8002514 <HAL_MspInit+0x68>)
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d4:	61d3      	str	r3, [r2, #28]
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <HAL_MspInit+0x68>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024e2:	2200      	movs	r2, #0
 80024e4:	210f      	movs	r1, #15
 80024e6:	f06f 0001 	mvn.w	r0, #1
 80024ea:	f000 fa36 	bl	800295a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024ee:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <HAL_MspInit+0x6c>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	4a04      	ldr	r2, [pc, #16]	; (8002518 <HAL_MspInit+0x6c>)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	40010000 	.word	0x40010000

0800251c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08c      	sub	sp, #48	; 0x30
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800252c:	2200      	movs	r2, #0
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	2019      	movs	r0, #25
 8002532:	f000 fa12 	bl	800295a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002536:	2019      	movs	r0, #25
 8002538:	f000 fa2b 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800253c:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <HAL_InitTick+0x9c>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <HAL_InitTick+0x9c>)
 8002542:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002546:	6193      	str	r3, [r2, #24]
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_InitTick+0x9c>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002554:	f107 0210 	add.w	r2, r7, #16
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f002 fd88 	bl	8005074 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002564:	f002 fd72 	bl	800504c <HAL_RCC_GetPCLK2Freq>
 8002568:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	4a13      	ldr	r2, [pc, #76]	; (80025bc <HAL_InitTick+0xa0>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	0c9b      	lsrs	r3, r3, #18
 8002574:	3b01      	subs	r3, #1
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_InitTick+0xa4>)
 800257a:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <HAL_InitTick+0xa8>)
 800257c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <HAL_InitTick+0xa4>)
 8002580:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002584:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002586:	4a0e      	ldr	r2, [pc, #56]	; (80025c0 <HAL_InitTick+0xa4>)
 8002588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <HAL_InitTick+0xa4>)
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002592:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_InitTick+0xa4>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002598:	4809      	ldr	r0, [pc, #36]	; (80025c0 <HAL_InitTick+0xa4>)
 800259a:	f003 f8d5 	bl	8005748 <HAL_TIM_Base_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d104      	bne.n	80025ae <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80025a4:	4806      	ldr	r0, [pc, #24]	; (80025c0 <HAL_InitTick+0xa4>)
 80025a6:	f003 f927 	bl	80057f8 <HAL_TIM_Base_Start_IT>
 80025aa:	4603      	mov	r3, r0
 80025ac:	e000      	b.n	80025b0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3730      	adds	r7, #48	; 0x30
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000
 80025bc:	431bde83 	.word	0x431bde83
 80025c0:	200025c8 	.word	0x200025c8
 80025c4:	40012c00 	.word	0x40012c00

080025c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <NMI_Handler+0x4>

080025ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025d2:	e7fe      	b.n	80025d2 <HardFault_Handler+0x4>

080025d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <MemManage_Handler+0x4>

080025da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025de:	e7fe      	b.n	80025de <BusFault_Handler+0x4>

080025e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e4:	e7fe      	b.n	80025e4 <UsageFault_Handler+0x4>

080025e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80025f6:	2001      	movs	r0, #1
 80025f8:	f000 fc56 	bl	8002ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}

08002600 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002606:	f000 fda2 	bl	800314e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	2000332c 	.word	0x2000332c

08002614 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <TIM1_UP_IRQHandler+0x10>)
 800261a:	f003 f93f 	bl	800589c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	200025c8 	.word	0x200025c8

08002628 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <USART2_IRQHandler+0x10>)
 800262e:	f003 fb53 	bl	8005cd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20002610 	.word	0x20002610

0800263c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <MX_USART2_UART_Init+0x50>)
 8002650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 8002654:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800265a:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 800266e:	220c      	movs	r2, #12
 8002670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800267e:	4805      	ldr	r0, [pc, #20]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 8002680:	f003 faac 	bl	8005bdc <HAL_UART_Init>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800268a:	f7fe f971 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20002610 	.word	0x20002610
 8002698:	40004400 	.word	0x40004400

0800269c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 0310 	add.w	r3, r7, #16
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <HAL_UART_MspInit+0x98>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d137      	bne.n	800272c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026bc:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <HAL_UART_MspInit+0x9c>)
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <HAL_UART_MspInit+0x9c>)
 80026c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c6:	61d3      	str	r3, [r2, #28]
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_UART_MspInit+0x9c>)
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d4:	4b18      	ldr	r3, [pc, #96]	; (8002738 <HAL_UART_MspInit+0x9c>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	4a17      	ldr	r2, [pc, #92]	; (8002738 <HAL_UART_MspInit+0x9c>)
 80026da:	f043 0304 	orr.w	r3, r3, #4
 80026de:	6193      	str	r3, [r2, #24]
 80026e0:	4b15      	ldr	r3, [pc, #84]	; (8002738 <HAL_UART_MspInit+0x9c>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026ec:	2304      	movs	r3, #4
 80026ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026f4:	2303      	movs	r3, #3
 80026f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f8:	f107 0310 	add.w	r3, r7, #16
 80026fc:	4619      	mov	r1, r3
 80026fe:	480f      	ldr	r0, [pc, #60]	; (800273c <HAL_UART_MspInit+0xa0>)
 8002700:	f000 fa06 	bl	8002b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002704:	2308      	movs	r3, #8
 8002706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002710:	f107 0310 	add.w	r3, r7, #16
 8002714:	4619      	mov	r1, r3
 8002716:	4809      	ldr	r0, [pc, #36]	; (800273c <HAL_UART_MspInit+0xa0>)
 8002718:	f000 f9fa 	bl	8002b10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800271c:	2200      	movs	r2, #0
 800271e:	2105      	movs	r1, #5
 8002720:	2026      	movs	r0, #38	; 0x26
 8002722:	f000 f91a 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002726:	2026      	movs	r0, #38	; 0x26
 8002728:	f000 f933 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800272c:	bf00      	nop
 800272e:	3720      	adds	r7, #32
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40004400 	.word	0x40004400
 8002738:	40021000 	.word	0x40021000
 800273c:	40010800 	.word	0x40010800

08002740 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002740:	480c      	ldr	r0, [pc, #48]	; (8002774 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002742:	490d      	ldr	r1, [pc, #52]	; (8002778 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002744:	4a0d      	ldr	r2, [pc, #52]	; (800277c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002748:	e002      	b.n	8002750 <LoopCopyDataInit>

0800274a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800274a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800274c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800274e:	3304      	adds	r3, #4

08002750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002754:	d3f9      	bcc.n	800274a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002756:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002758:	4c0a      	ldr	r4, [pc, #40]	; (8002784 <LoopFillZerobss+0x22>)
  movs r3, #0
 800275a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800275c:	e001      	b.n	8002762 <LoopFillZerobss>

0800275e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800275e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002760:	3204      	adds	r2, #4

08002762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002764:	d3fb      	bcc.n	800275e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002766:	f7ff ff69 	bl	800263c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800276a:	f00b f881 	bl	800d870 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800276e:	f7fe f87f 	bl	8000870 <main>
  bx lr
 8002772:	4770      	bx	lr
  ldr r0, =_sdata
 8002774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002778:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 800277c:	0800e0ac 	.word	0x0800e0ac
  ldr r2, =_sbss
 8002780:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8002784:	20003618 	.word	0x20003618

08002788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002788:	e7fe      	b.n	8002788 <ADC1_2_IRQHandler>
	...

0800278c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_Init+0x28>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a07      	ldr	r2, [pc, #28]	; (80027b4 <HAL_Init+0x28>)
 8002796:	f043 0310 	orr.w	r3, r3, #16
 800279a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800279c:	2003      	movs	r0, #3
 800279e:	f000 f8d1 	bl	8002944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027a2:	2000      	movs	r0, #0
 80027a4:	f7ff feba 	bl	800251c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027a8:	f7ff fe80 	bl	80024ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40022000 	.word	0x40022000

080027b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_IncTick+0x1c>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_IncTick+0x20>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	4a03      	ldr	r2, [pc, #12]	; (80027d8 <HAL_IncTick+0x20>)
 80027ca:	6013      	str	r3, [r2, #0]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	20000018 	.word	0x20000018
 80027d8:	20002654 	.word	0x20002654

080027dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return uwTick;
 80027e0:	4b02      	ldr	r3, [pc, #8]	; (80027ec <HAL_GetTick+0x10>)
 80027e2:	681b      	ldr	r3, [r3, #0]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	20002654 	.word	0x20002654

080027f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <__NVIC_SetPriorityGrouping+0x44>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800280c:	4013      	ands	r3, r2
 800280e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800281c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002822:	4a04      	ldr	r2, [pc, #16]	; (8002834 <__NVIC_SetPriorityGrouping+0x44>)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	60d3      	str	r3, [r2, #12]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <__NVIC_GetPriorityGrouping+0x18>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	0a1b      	lsrs	r3, r3, #8
 8002842:	f003 0307 	and.w	r3, r3, #7
}
 8002846:	4618      	mov	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	2b00      	cmp	r3, #0
 8002864:	db0b      	blt.n	800287e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	f003 021f 	and.w	r2, r3, #31
 800286c:	4906      	ldr	r1, [pc, #24]	; (8002888 <__NVIC_EnableIRQ+0x34>)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	2001      	movs	r0, #1
 8002876:	fa00 f202 	lsl.w	r2, r0, r2
 800287a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	e000e100 	.word	0xe000e100

0800288c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	6039      	str	r1, [r7, #0]
 8002896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	2b00      	cmp	r3, #0
 800289e:	db0a      	blt.n	80028b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	490c      	ldr	r1, [pc, #48]	; (80028d8 <__NVIC_SetPriority+0x4c>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	0112      	lsls	r2, r2, #4
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	440b      	add	r3, r1
 80028b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b4:	e00a      	b.n	80028cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4908      	ldr	r1, [pc, #32]	; (80028dc <__NVIC_SetPriority+0x50>)
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	3b04      	subs	r3, #4
 80028c4:	0112      	lsls	r2, r2, #4
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	440b      	add	r3, r1
 80028ca:	761a      	strb	r2, [r3, #24]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000e100 	.word	0xe000e100
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	; 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f1c3 0307 	rsb	r3, r3, #7
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	bf28      	it	cs
 80028fe:	2304      	movcs	r3, #4
 8002900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3304      	adds	r3, #4
 8002906:	2b06      	cmp	r3, #6
 8002908:	d902      	bls.n	8002910 <NVIC_EncodePriority+0x30>
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3b03      	subs	r3, #3
 800290e:	e000      	b.n	8002912 <NVIC_EncodePriority+0x32>
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	f04f 32ff 	mov.w	r2, #4294967295
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43da      	mvns	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	401a      	ands	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002928:	f04f 31ff 	mov.w	r1, #4294967295
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	43d9      	mvns	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	4313      	orrs	r3, r2
         );
}
 800293a:	4618      	mov	r0, r3
 800293c:	3724      	adds	r7, #36	; 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ff4f 	bl	80027f0 <__NVIC_SetPriorityGrouping>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	4603      	mov	r3, r0
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800296c:	f7ff ff64 	bl	8002838 <__NVIC_GetPriorityGrouping>
 8002970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	6978      	ldr	r0, [r7, #20]
 8002978:	f7ff ffb2 	bl	80028e0 <NVIC_EncodePriority>
 800297c:	4602      	mov	r2, r0
 800297e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff81 	bl	800288c <__NVIC_SetPriority>
}
 800298a:	bf00      	nop
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800299c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff57 	bl	8002854 <__NVIC_EnableIRQ>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b085      	sub	sp, #20
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d008      	beq.n	80029d6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2204      	movs	r2, #4
 80029c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e020      	b.n	8002a18 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 020e 	bic.w	r2, r2, #14
 80029e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0201 	bic.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fe:	2101      	movs	r1, #1
 8002a00:	fa01 f202 	lsl.w	r2, r1, r2
 8002a04:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
	...

08002a24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d005      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
 8002a44:	e051      	b.n	8002aea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 020e 	bic.w	r2, r2, #14
 8002a54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a22      	ldr	r2, [pc, #136]	; (8002af4 <HAL_DMA_Abort_IT+0xd0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d029      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0xa0>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a20      	ldr	r2, [pc, #128]	; (8002af8 <HAL_DMA_Abort_IT+0xd4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d022      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0x9c>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <HAL_DMA_Abort_IT+0xd8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d01a      	beq.n	8002aba <HAL_DMA_Abort_IT+0x96>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a1d      	ldr	r2, [pc, #116]	; (8002b00 <HAL_DMA_Abort_IT+0xdc>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d012      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x90>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a1c      	ldr	r2, [pc, #112]	; (8002b04 <HAL_DMA_Abort_IT+0xe0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d00a      	beq.n	8002aae <HAL_DMA_Abort_IT+0x8a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a1a      	ldr	r2, [pc, #104]	; (8002b08 <HAL_DMA_Abort_IT+0xe4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d102      	bne.n	8002aa8 <HAL_DMA_Abort_IT+0x84>
 8002aa2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002aa6:	e00e      	b.n	8002ac6 <HAL_DMA_Abort_IT+0xa2>
 8002aa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aac:	e00b      	b.n	8002ac6 <HAL_DMA_Abort_IT+0xa2>
 8002aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ab2:	e008      	b.n	8002ac6 <HAL_DMA_Abort_IT+0xa2>
 8002ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab8:	e005      	b.n	8002ac6 <HAL_DMA_Abort_IT+0xa2>
 8002aba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002abe:	e002      	b.n	8002ac6 <HAL_DMA_Abort_IT+0xa2>
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	e000      	b.n	8002ac6 <HAL_DMA_Abort_IT+0xa2>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	4a11      	ldr	r2, [pc, #68]	; (8002b0c <HAL_DMA_Abort_IT+0xe8>)
 8002ac8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	4798      	blx	r3
    } 
  }
  return status;
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40020008 	.word	0x40020008
 8002af8:	4002001c 	.word	0x4002001c
 8002afc:	40020030 	.word	0x40020030
 8002b00:	40020044 	.word	0x40020044
 8002b04:	40020058 	.word	0x40020058
 8002b08:	4002006c 	.word	0x4002006c
 8002b0c:	40020000 	.word	0x40020000

08002b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b08b      	sub	sp, #44	; 0x2c
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b22:	e169      	b.n	8002df8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b24:	2201      	movs	r2, #1
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	f040 8158 	bne.w	8002df2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4a9a      	ldr	r2, [pc, #616]	; (8002db0 <HAL_GPIO_Init+0x2a0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d05e      	beq.n	8002c0a <HAL_GPIO_Init+0xfa>
 8002b4c:	4a98      	ldr	r2, [pc, #608]	; (8002db0 <HAL_GPIO_Init+0x2a0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d875      	bhi.n	8002c3e <HAL_GPIO_Init+0x12e>
 8002b52:	4a98      	ldr	r2, [pc, #608]	; (8002db4 <HAL_GPIO_Init+0x2a4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d058      	beq.n	8002c0a <HAL_GPIO_Init+0xfa>
 8002b58:	4a96      	ldr	r2, [pc, #600]	; (8002db4 <HAL_GPIO_Init+0x2a4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d86f      	bhi.n	8002c3e <HAL_GPIO_Init+0x12e>
 8002b5e:	4a96      	ldr	r2, [pc, #600]	; (8002db8 <HAL_GPIO_Init+0x2a8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d052      	beq.n	8002c0a <HAL_GPIO_Init+0xfa>
 8002b64:	4a94      	ldr	r2, [pc, #592]	; (8002db8 <HAL_GPIO_Init+0x2a8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d869      	bhi.n	8002c3e <HAL_GPIO_Init+0x12e>
 8002b6a:	4a94      	ldr	r2, [pc, #592]	; (8002dbc <HAL_GPIO_Init+0x2ac>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d04c      	beq.n	8002c0a <HAL_GPIO_Init+0xfa>
 8002b70:	4a92      	ldr	r2, [pc, #584]	; (8002dbc <HAL_GPIO_Init+0x2ac>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d863      	bhi.n	8002c3e <HAL_GPIO_Init+0x12e>
 8002b76:	4a92      	ldr	r2, [pc, #584]	; (8002dc0 <HAL_GPIO_Init+0x2b0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d046      	beq.n	8002c0a <HAL_GPIO_Init+0xfa>
 8002b7c:	4a90      	ldr	r2, [pc, #576]	; (8002dc0 <HAL_GPIO_Init+0x2b0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d85d      	bhi.n	8002c3e <HAL_GPIO_Init+0x12e>
 8002b82:	2b12      	cmp	r3, #18
 8002b84:	d82a      	bhi.n	8002bdc <HAL_GPIO_Init+0xcc>
 8002b86:	2b12      	cmp	r3, #18
 8002b88:	d859      	bhi.n	8002c3e <HAL_GPIO_Init+0x12e>
 8002b8a:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <HAL_GPIO_Init+0x80>)
 8002b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b90:	08002c0b 	.word	0x08002c0b
 8002b94:	08002be5 	.word	0x08002be5
 8002b98:	08002bf7 	.word	0x08002bf7
 8002b9c:	08002c39 	.word	0x08002c39
 8002ba0:	08002c3f 	.word	0x08002c3f
 8002ba4:	08002c3f 	.word	0x08002c3f
 8002ba8:	08002c3f 	.word	0x08002c3f
 8002bac:	08002c3f 	.word	0x08002c3f
 8002bb0:	08002c3f 	.word	0x08002c3f
 8002bb4:	08002c3f 	.word	0x08002c3f
 8002bb8:	08002c3f 	.word	0x08002c3f
 8002bbc:	08002c3f 	.word	0x08002c3f
 8002bc0:	08002c3f 	.word	0x08002c3f
 8002bc4:	08002c3f 	.word	0x08002c3f
 8002bc8:	08002c3f 	.word	0x08002c3f
 8002bcc:	08002c3f 	.word	0x08002c3f
 8002bd0:	08002c3f 	.word	0x08002c3f
 8002bd4:	08002bed 	.word	0x08002bed
 8002bd8:	08002c01 	.word	0x08002c01
 8002bdc:	4a79      	ldr	r2, [pc, #484]	; (8002dc4 <HAL_GPIO_Init+0x2b4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d013      	beq.n	8002c0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002be2:	e02c      	b.n	8002c3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	623b      	str	r3, [r7, #32]
          break;
 8002bea:	e029      	b.n	8002c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	623b      	str	r3, [r7, #32]
          break;
 8002bf4:	e024      	b.n	8002c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	3308      	adds	r3, #8
 8002bfc:	623b      	str	r3, [r7, #32]
          break;
 8002bfe:	e01f      	b.n	8002c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	330c      	adds	r3, #12
 8002c06:	623b      	str	r3, [r7, #32]
          break;
 8002c08:	e01a      	b.n	8002c40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d102      	bne.n	8002c18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c12:	2304      	movs	r3, #4
 8002c14:	623b      	str	r3, [r7, #32]
          break;
 8002c16:	e013      	b.n	8002c40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c20:	2308      	movs	r3, #8
 8002c22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	611a      	str	r2, [r3, #16]
          break;
 8002c2a:	e009      	b.n	8002c40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	615a      	str	r2, [r3, #20]
          break;
 8002c36:	e003      	b.n	8002c40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	623b      	str	r3, [r7, #32]
          break;
 8002c3c:	e000      	b.n	8002c40 <HAL_GPIO_Init+0x130>
          break;
 8002c3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	2bff      	cmp	r3, #255	; 0xff
 8002c44:	d801      	bhi.n	8002c4a <HAL_GPIO_Init+0x13a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	e001      	b.n	8002c4e <HAL_GPIO_Init+0x13e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	2bff      	cmp	r3, #255	; 0xff
 8002c54:	d802      	bhi.n	8002c5c <HAL_GPIO_Init+0x14c>
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	e002      	b.n	8002c62 <HAL_GPIO_Init+0x152>
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	3b08      	subs	r3, #8
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	210f      	movs	r1, #15
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	401a      	ands	r2, r3
 8002c74:	6a39      	ldr	r1, [r7, #32]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 80b1 	beq.w	8002df2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c90:	4b4d      	ldr	r3, [pc, #308]	; (8002dc8 <HAL_GPIO_Init+0x2b8>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	4a4c      	ldr	r2, [pc, #304]	; (8002dc8 <HAL_GPIO_Init+0x2b8>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6193      	str	r3, [r2, #24]
 8002c9c:	4b4a      	ldr	r3, [pc, #296]	; (8002dc8 <HAL_GPIO_Init+0x2b8>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ca8:	4a48      	ldr	r2, [pc, #288]	; (8002dcc <HAL_GPIO_Init+0x2bc>)
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	089b      	lsrs	r3, r3, #2
 8002cae:	3302      	adds	r3, #2
 8002cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	220f      	movs	r2, #15
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a40      	ldr	r2, [pc, #256]	; (8002dd0 <HAL_GPIO_Init+0x2c0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d013      	beq.n	8002cfc <HAL_GPIO_Init+0x1ec>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a3f      	ldr	r2, [pc, #252]	; (8002dd4 <HAL_GPIO_Init+0x2c4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d00d      	beq.n	8002cf8 <HAL_GPIO_Init+0x1e8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a3e      	ldr	r2, [pc, #248]	; (8002dd8 <HAL_GPIO_Init+0x2c8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d007      	beq.n	8002cf4 <HAL_GPIO_Init+0x1e4>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a3d      	ldr	r2, [pc, #244]	; (8002ddc <HAL_GPIO_Init+0x2cc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d101      	bne.n	8002cf0 <HAL_GPIO_Init+0x1e0>
 8002cec:	2303      	movs	r3, #3
 8002cee:	e006      	b.n	8002cfe <HAL_GPIO_Init+0x1ee>
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	e004      	b.n	8002cfe <HAL_GPIO_Init+0x1ee>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e002      	b.n	8002cfe <HAL_GPIO_Init+0x1ee>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <HAL_GPIO_Init+0x1ee>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d00:	f002 0203 	and.w	r2, r2, #3
 8002d04:	0092      	lsls	r2, r2, #2
 8002d06:	4093      	lsls	r3, r2
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d0e:	492f      	ldr	r1, [pc, #188]	; (8002dcc <HAL_GPIO_Init+0x2bc>)
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	089b      	lsrs	r3, r3, #2
 8002d14:	3302      	adds	r3, #2
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d006      	beq.n	8002d36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d28:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	492c      	ldr	r1, [pc, #176]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	600b      	str	r3, [r1, #0]
 8002d34:	e006      	b.n	8002d44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d36:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	4928      	ldr	r1, [pc, #160]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d006      	beq.n	8002d5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d50:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	4922      	ldr	r1, [pc, #136]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
 8002d5c:	e006      	b.n	8002d6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d5e:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	491e      	ldr	r1, [pc, #120]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d006      	beq.n	8002d86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d78:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	4918      	ldr	r1, [pc, #96]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	608b      	str	r3, [r1, #8]
 8002d84:	e006      	b.n	8002d94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d86:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	4914      	ldr	r1, [pc, #80]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d021      	beq.n	8002de4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	490e      	ldr	r1, [pc, #56]	; (8002de0 <HAL_GPIO_Init+0x2d0>)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60cb      	str	r3, [r1, #12]
 8002dac:	e021      	b.n	8002df2 <HAL_GPIO_Init+0x2e2>
 8002dae:	bf00      	nop
 8002db0:	10320000 	.word	0x10320000
 8002db4:	10310000 	.word	0x10310000
 8002db8:	10220000 	.word	0x10220000
 8002dbc:	10210000 	.word	0x10210000
 8002dc0:	10120000 	.word	0x10120000
 8002dc4:	10110000 	.word	0x10110000
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40010000 	.word	0x40010000
 8002dd0:	40010800 	.word	0x40010800
 8002dd4:	40010c00 	.word	0x40010c00
 8002dd8:	40011000 	.word	0x40011000
 8002ddc:	40011400 	.word	0x40011400
 8002de0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <HAL_GPIO_Init+0x304>)
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	4909      	ldr	r1, [pc, #36]	; (8002e14 <HAL_GPIO_Init+0x304>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	3301      	adds	r3, #1
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f47f ae8e 	bne.w	8002b24 <HAL_GPIO_Init+0x14>
  }
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	372c      	adds	r7, #44	; 0x2c
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	40010400 	.word	0x40010400

08002e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	887b      	ldrh	r3, [r7, #2]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
 8002e34:	e001      	b.n	8002e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	807b      	strh	r3, [r7, #2]
 8002e52:	4613      	mov	r3, r2
 8002e54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e56:	787b      	ldrb	r3, [r7, #1]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e5c:	887a      	ldrh	r2, [r7, #2]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e62:	e003      	b.n	8002e6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e64:	887b      	ldrh	r3, [r7, #2]
 8002e66:	041a      	lsls	r2, r3, #16
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	611a      	str	r2, [r3, #16]
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e88:	887a      	ldrh	r2, [r7, #2]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	041a      	lsls	r2, r3, #16
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	43d9      	mvns	r1, r3
 8002e94:	887b      	ldrh	r3, [r7, #2]
 8002e96:	400b      	ands	r3, r1
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	611a      	str	r2, [r3, #16]
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002eb2:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d006      	beq.n	8002ecc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ebe:	4a05      	ldr	r2, [pc, #20]	; (8002ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f806 	bl	8002ed8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40010400 	.word	0x40010400

08002ed8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eee:	b08b      	sub	sp, #44	; 0x2c
 8002ef0:	af06      	add	r7, sp, #24
 8002ef2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e0fd      	b.n	80030fa <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f00a fa02 	bl	800d31c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f003 fadb 	bl	80064e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	687e      	ldr	r6, [r7, #4]
 8002f32:	466d      	mov	r5, sp
 8002f34:	f106 0410 	add.w	r4, r6, #16
 8002f38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	602b      	str	r3, [r5, #0]
 8002f40:	1d33      	adds	r3, r6, #4
 8002f42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f44:	6838      	ldr	r0, [r7, #0]
 8002f46:	f003 faa5 	bl	8006494 <USB_CoreInit>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0ce      	b.n	80030fa <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f003 fad6 	bl	8006514 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f68:	2300      	movs	r3, #0
 8002f6a:	73fb      	strb	r3, [r7, #15]
 8002f6c:	e04c      	b.n	8003008 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3301      	adds	r3, #1
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	440b      	add	r3, r1
 8002f94:	7bfa      	ldrb	r2, [r7, #15]
 8002f96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f98:	7bfa      	ldrb	r2, [r7, #15]
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	b298      	uxth	r0, r3
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	440b      	add	r3, r1
 8002faa:	3336      	adds	r3, #54	; 0x36
 8002fac:	4602      	mov	r2, r0
 8002fae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3303      	adds	r3, #3
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fc6:	7bfa      	ldrb	r2, [r7, #15]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3338      	adds	r3, #56	; 0x38
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fda:	7bfa      	ldrb	r2, [r7, #15]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	440b      	add	r3, r1
 8002fe8:	333c      	adds	r3, #60	; 0x3c
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fee:	7bfa      	ldrb	r2, [r7, #15]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3340      	adds	r3, #64	; 0x40
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	3301      	adds	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
 8003008:	7bfa      	ldrb	r2, [r7, #15]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	d3ad      	bcc.n	8002f6e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003012:	2300      	movs	r3, #0
 8003014:	73fb      	strb	r3, [r7, #15]
 8003016:	e044      	b.n	80030a2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	440b      	add	r3, r1
 8003026:	f203 1369 	addw	r3, r3, #361	; 0x169
 800302a:	2200      	movs	r2, #0
 800302c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	440b      	add	r3, r1
 800303c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003044:	7bfa      	ldrb	r2, [r7, #15]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	440b      	add	r3, r1
 8003052:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	440b      	add	r3, r1
 8003068:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	440b      	add	r3, r1
 800307e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003086:	7bfa      	ldrb	r2, [r7, #15]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	440b      	add	r3, r1
 8003094:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	3301      	adds	r3, #1
 80030a0:	73fb      	strb	r3, [r7, #15]
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d3b5      	bcc.n	8003018 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	687e      	ldr	r6, [r7, #4]
 80030b4:	466d      	mov	r5, sp
 80030b6:	f106 0410 	add.w	r4, r6, #16
 80030ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	602b      	str	r3, [r5, #0]
 80030c2:	1d33      	adds	r3, r6, #4
 80030c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030c6:	6838      	ldr	r0, [r7, #0]
 80030c8:	f003 fa30 	bl	800652c <USB_DevInit>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2202      	movs	r2, #2
 80030d6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e00d      	b.n	80030fa <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f005 fba1 	bl	800883a <USB_DevDisconnect>

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003102 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_PCD_Start+0x16>
 8003114:	2302      	movs	r3, #2
 8003116:	e016      	b.n	8003146 <HAL_PCD_Start+0x44>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f003 f9c5 	bl	80064b4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800312a:	2101      	movs	r1, #1
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f00a fb68 	bl	800d802 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f005 fb75 	bl	8008826 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b088      	sub	sp, #32
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f005 fb77 	bl	800884e <USB_ReadInterrupts>
 8003160:	4603      	mov	r3, r0
 8003162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800316a:	d102      	bne.n	8003172 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fb61 	bl	8003834 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f005 fb69 	bl	800884e <USB_ReadInterrupts>
 800317c:	4603      	mov	r3, r0
 800317e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003186:	d112      	bne.n	80031ae <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003190:	b29a      	uxth	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319a:	b292      	uxth	r2, r2
 800319c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f00a f936 	bl	800d412 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80031a6:	2100      	movs	r1, #0
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f925 	bl	80033f8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f005 fb4b 	bl	800884e <USB_ReadInterrupts>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031c2:	d10b      	bne.n	80031dc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031d6:	b292      	uxth	r2, r2
 80031d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f005 fb34 	bl	800884e <USB_ReadInterrupts>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f0:	d10b      	bne.n	800320a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003204:	b292      	uxth	r2, r2
 8003206:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f005 fb1d 	bl	800884e <USB_ReadInterrupts>
 8003214:	4603      	mov	r3, r0
 8003216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800321a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321e:	d126      	bne.n	800326e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003228:	b29a      	uxth	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0204 	bic.w	r2, r2, #4
 8003232:	b292      	uxth	r2, r2
 8003234:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003240:	b29a      	uxth	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0208 	bic.w	r2, r2, #8
 800324a:	b292      	uxth	r2, r2
 800324c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f00a f917 	bl	800d484 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800325e:	b29a      	uxth	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003268:	b292      	uxth	r2, r2
 800326a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f005 faeb 	bl	800884e <USB_ReadInterrupts>
 8003278:	4603      	mov	r3, r0
 800327a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800327e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003282:	f040 8084 	bne.w	800338e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003286:	2300      	movs	r3, #0
 8003288:	77fb      	strb	r3, [r7, #31]
 800328a:	e011      	b.n	80032b0 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	7ffb      	ldrb	r3, [r7, #31]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	441a      	add	r2, r3
 8003298:	7ffb      	ldrb	r3, [r7, #31]
 800329a:	8812      	ldrh	r2, [r2, #0]
 800329c:	b292      	uxth	r2, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	f107 0120 	add.w	r1, r7, #32
 80032a4:	440b      	add	r3, r1
 80032a6:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80032aa:	7ffb      	ldrb	r3, [r7, #31]
 80032ac:	3301      	adds	r3, #1
 80032ae:	77fb      	strb	r3, [r7, #31]
 80032b0:	7ffb      	ldrb	r3, [r7, #31]
 80032b2:	2b07      	cmp	r3, #7
 80032b4:	d9ea      	bls.n	800328c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032be:	b29a      	uxth	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0201 	orr.w	r2, r2, #1
 80032c8:	b292      	uxth	r2, r2
 80032ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	b292      	uxth	r2, r2
 80032e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80032e6:	bf00      	nop
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f6      	beq.n	80032e8 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003302:	b29a      	uxth	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330c:	b292      	uxth	r2, r2
 800330e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003312:	2300      	movs	r3, #0
 8003314:	77fb      	strb	r3, [r7, #31]
 8003316:	e010      	b.n	800333a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003318:	7ffb      	ldrb	r3, [r7, #31]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	4611      	mov	r1, r2
 8003320:	7ffa      	ldrb	r2, [r7, #31]
 8003322:	0092      	lsls	r2, r2, #2
 8003324:	440a      	add	r2, r1
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	f107 0120 	add.w	r1, r7, #32
 800332c:	440b      	add	r3, r1
 800332e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003332:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003334:	7ffb      	ldrb	r3, [r7, #31]
 8003336:	3301      	adds	r3, #1
 8003338:	77fb      	strb	r3, [r7, #31]
 800333a:	7ffb      	ldrb	r3, [r7, #31]
 800333c:	2b07      	cmp	r3, #7
 800333e:	d9eb      	bls.n	8003318 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003348:	b29a      	uxth	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0208 	orr.w	r2, r2, #8
 8003352:	b292      	uxth	r2, r2
 8003354:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003360:	b29a      	uxth	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800336a:	b292      	uxth	r2, r2
 800336c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003378:	b29a      	uxth	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0204 	orr.w	r2, r2, #4
 8003382:	b292      	uxth	r2, r2
 8003384:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f00a f861 	bl	800d450 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f005 fa5b 	bl	800884e <USB_ReadInterrupts>
 8003398:	4603      	mov	r3, r0
 800339a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800339e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a2:	d10e      	bne.n	80033c2 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033b6:	b292      	uxth	r2, r2
 80033b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f00a f81a 	bl	800d3f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f005 fa41 	bl	800884e <USB_ReadInterrupts>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d6:	d10b      	bne.n	80033f0 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ea:	b292      	uxth	r2, r2
 80033ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80033f0:	bf00      	nop
 80033f2:	3720      	adds	r7, #32
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_PCD_SetAddress+0x1a>
 800340e:	2302      	movs	r3, #2
 8003410:	e013      	b.n	800343a <HAL_PCD_SetAddress+0x42>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	78fa      	ldrb	r2, [r7, #3]
 800341e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f005 f9e8 	bl	8008800 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	4608      	mov	r0, r1
 800344c:	4611      	mov	r1, r2
 800344e:	461a      	mov	r2, r3
 8003450:	4603      	mov	r3, r0
 8003452:	70fb      	strb	r3, [r7, #3]
 8003454:	460b      	mov	r3, r1
 8003456:	803b      	strh	r3, [r7, #0]
 8003458:	4613      	mov	r3, r2
 800345a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003460:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003464:	2b00      	cmp	r3, #0
 8003466:	da0e      	bge.n	8003486 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4413      	add	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2201      	movs	r2, #1
 8003482:	705a      	strb	r2, [r3, #1]
 8003484:	e00e      	b.n	80034a4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003486:	78fb      	ldrb	r3, [r7, #3]
 8003488:	f003 0207 	and.w	r2, r3, #7
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	4413      	add	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034b0:	883a      	ldrh	r2, [r7, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	78ba      	ldrb	r2, [r7, #2]
 80034ba:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	785b      	ldrb	r3, [r3, #1]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d004      	beq.n	80034ce <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034ce:	78bb      	ldrb	r3, [r7, #2]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d102      	bne.n	80034da <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_PCD_EP_Open+0xa6>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e00e      	b.n	8003506 <HAL_PCD_EP_Open+0xc4>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68f9      	ldr	r1, [r7, #12]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f003 f838 	bl	800656c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003504:	7afb      	ldrb	r3, [r7, #11]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	460b      	mov	r3, r1
 8003518:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800351a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800351e:	2b00      	cmp	r3, #0
 8003520:	da0e      	bge.n	8003540 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	705a      	strb	r2, [r3, #1]
 800353e:	e00e      	b.n	800355e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	f003 0207 	and.w	r2, r3, #7
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800355e:	78fb      	ldrb	r3, [r7, #3]
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	b2da      	uxtb	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_PCD_EP_Close+0x6a>
 8003574:	2302      	movs	r3, #2
 8003576:	e00e      	b.n	8003596 <HAL_PCD_EP_Close+0x88>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68f9      	ldr	r1, [r7, #12]
 8003586:	4618      	mov	r0, r3
 8003588:	f003 fb5a 	bl	8006c40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b086      	sub	sp, #24
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	460b      	mov	r3, r1
 80035ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ae:	7afb      	ldrb	r3, [r7, #11]
 80035b0:	f003 0207 	and.w	r2, r3, #7
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4413      	add	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2200      	movs	r2, #0
 80035d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2200      	movs	r2, #0
 80035dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035de:	7afb      	ldrb	r3, [r7, #11]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035ea:	7afb      	ldrb	r3, [r7, #11]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d106      	bne.n	8003602 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6979      	ldr	r1, [r7, #20]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f003 fd0c 	bl	8007018 <USB_EPStartXfer>
 8003600:	e005      	b.n	800360e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6979      	ldr	r1, [r7, #20]
 8003608:	4618      	mov	r0, r3
 800360a:	f003 fd05 	bl	8007018 <USB_EPStartXfer>
  }

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	f003 0207 	and.w	r2, r3, #7
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800363a:	681b      	ldr	r3, [r3, #0]
}
 800363c:	4618      	mov	r0, r3
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr

08003646 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	460b      	mov	r3, r1
 8003654:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003656:	7afb      	ldrb	r3, [r7, #11]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4413      	add	r3, r2
 800366a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2200      	movs	r2, #0
 800368a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2201      	movs	r2, #1
 8003690:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003692:	7afb      	ldrb	r3, [r7, #11]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	b2da      	uxtb	r2, r3
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800369e:	7afb      	ldrb	r3, [r7, #11]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d106      	bne.n	80036b6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6979      	ldr	r1, [r7, #20]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f003 fcb2 	bl	8007018 <USB_EPStartXfer>
 80036b4:	e005      	b.n	80036c2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6979      	ldr	r1, [r7, #20]
 80036bc:	4618      	mov	r0, r3
 80036be:	f003 fcab 	bl	8007018 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	f003 0207 	and.w	r2, r3, #7
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d901      	bls.n	80036ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e04c      	b.n	8003784 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	da0e      	bge.n	8003710 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2201      	movs	r2, #1
 800370c:	705a      	strb	r2, [r3, #1]
 800370e:	e00c      	b.n	800372a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	b2da      	uxtb	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_PCD_EP_SetStall+0x7e>
 8003746:	2302      	movs	r3, #2
 8003748:	e01c      	b.n	8003784 <HAL_PCD_EP_SetStall+0xb8>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68f9      	ldr	r1, [r7, #12]
 8003758:	4618      	mov	r0, r3
 800375a:	f004 ff54 	bl	8008606 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800375e:	78fb      	ldrb	r3, [r7, #3]
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	2b00      	cmp	r3, #0
 8003766:	d108      	bne.n	800377a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003772:	4619      	mov	r1, r3
 8003774:	4610      	mov	r0, r2
 8003776:	f005 f879 	bl	800886c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	f003 020f 	and.w	r2, r3, #15
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d901      	bls.n	80037aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e040      	b.n	800382c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	da0e      	bge.n	80037d0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037b2:	78fb      	ldrb	r3, [r7, #3]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	4413      	add	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	705a      	strb	r2, [r3, #1]
 80037ce:	e00e      	b.n	80037ee <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	f003 0207 	and.w	r2, r3, #7
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_PCD_EP_ClrStall+0x82>
 800380a:	2302      	movs	r3, #2
 800380c:	e00e      	b.n	800382c <HAL_PCD_EP_ClrStall+0xa0>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68f9      	ldr	r1, [r7, #12]
 800381c:	4618      	mov	r0, r3
 800381e:	f004 ff42 	bl	80086a6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08e      	sub	sp, #56	; 0x38
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800383c:	e2ec      	b.n	8003e18 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003846:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003848:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800384a:	b2db      	uxtb	r3, r3
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003854:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003858:	2b00      	cmp	r3, #0
 800385a:	f040 8161 	bne.w	8003b20 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800385e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003860:	f003 0310 	and.w	r3, r3, #16
 8003864:	2b00      	cmp	r3, #0
 8003866:	d152      	bne.n	800390e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	b29b      	uxth	r3, r3
 8003870:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003878:	81fb      	strh	r3, [r7, #14]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	89fb      	ldrh	r3, [r7, #14]
 8003880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003888:	b29b      	uxth	r3, r3
 800388a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3328      	adds	r3, #40	; 0x28
 8003890:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800389a:	b29b      	uxth	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	3302      	adds	r3, #2
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	441a      	add	r2, r3
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80038cc:	2100      	movs	r1, #0
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f009 fd77 	bl	800d3c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 829b 	beq.w	8003e18 <PCD_EP_ISR_Handler+0x5e4>
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f040 8296 	bne.w	8003e18 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	b292      	uxth	r2, r2
 8003900:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800390c:	e284      	b.n	8003e18 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800391e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003924:	2b00      	cmp	r3, #0
 8003926:	d034      	beq.n	8003992 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003930:	b29b      	uxth	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4413      	add	r3, r2
 800393c:	3306      	adds	r3, #6
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003966:	b29b      	uxth	r3, r3
 8003968:	f004 ffd0 	bl	800890c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	b29a      	uxth	r2, r3
 8003974:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003978:	4013      	ands	r3, r2
 800397a:	823b      	strh	r3, [r7, #16]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	8a3a      	ldrh	r2, [r7, #16]
 8003982:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003986:	b292      	uxth	r2, r2
 8003988:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f009 fcec 	bl	800d368 <HAL_PCD_SetupStageCallback>
 8003990:	e242      	b.n	8003e18 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003992:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003996:	2b00      	cmp	r3, #0
 8003998:	f280 823e 	bge.w	8003e18 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80039a8:	4013      	ands	r3, r2
 80039aa:	83bb      	strh	r3, [r7, #28]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	8bba      	ldrh	r2, [r7, #28]
 80039b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039b6:	b292      	uxth	r2, r2
 80039b8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4413      	add	r3, r2
 80039ce:	3306      	adds	r3, #6
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d019      	beq.n	8003a22 <PCD_EP_ISR_Handler+0x1ee>
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d015      	beq.n	8003a22 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	6959      	ldr	r1, [r3, #20]
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	f004 ff80 	bl	800890c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	695a      	ldr	r2, [r3, #20]
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	441a      	add	r2, r3
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f009 fcb5 	bl	800d38c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f040 81f2 	bne.w	8003e18 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	4413      	add	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d112      	bne.n	8003a82 <PCD_EP_ISR_Handler+0x24e>
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	801a      	strh	r2, [r3, #0]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	801a      	strh	r2, [r3, #0]
 8003a80:	e02f      	b.n	8003ae2 <PCD_EP_ISR_Handler+0x2ae>
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b3e      	cmp	r3, #62	; 0x3e
 8003a88:	d813      	bhi.n	8003ab2 <PCD_EP_ISR_Handler+0x27e>
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	085b      	lsrs	r3, r3, #1
 8003a90:	633b      	str	r3, [r7, #48]	; 0x30
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <PCD_EP_ISR_Handler+0x270>
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	029b      	lsls	r3, r3, #10
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	801a      	strh	r2, [r3, #0]
 8003ab0:	e017      	b.n	8003ae2 <PCD_EP_ISR_Handler+0x2ae>
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	633b      	str	r3, [r7, #48]	; 0x30
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d102      	bne.n	8003acc <PCD_EP_ISR_Handler+0x298>
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	633b      	str	r3, [r7, #48]	; 0x30
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	029b      	lsls	r3, r3, #10
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af2:	827b      	strh	r3, [r7, #18]
 8003af4:	8a7b      	ldrh	r3, [r7, #18]
 8003af6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003afa:	827b      	strh	r3, [r7, #18]
 8003afc:	8a7b      	ldrh	r3, [r7, #18]
 8003afe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b02:	827b      	strh	r3, [r7, #18]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	8a7b      	ldrh	r3, [r7, #18]
 8003b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	8013      	strh	r3, [r2, #0]
 8003b1e:	e17b      	b.n	8003e18 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b32:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f280 80ea 	bge.w	8003d10 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003b52:	4013      	ands	r3, r2
 8003b54:	853b      	strh	r3, [r7, #40]	; 0x28
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003b66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b6a:	b292      	uxth	r2, r2
 8003b6c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003b6e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	7b1b      	ldrb	r3, [r3, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d122      	bne.n	8003bd2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	461a      	mov	r2, r3
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3306      	adds	r3, #6
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bb4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003bb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 8087 	beq.w	8003ccc <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	6959      	ldr	r1, [r3, #20]
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	88da      	ldrh	r2, [r3, #6]
 8003bca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003bcc:	f004 fe9e 	bl	800890c <USB_ReadPMA>
 8003bd0:	e07c      	b.n	8003ccc <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	78db      	ldrb	r3, [r3, #3]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d108      	bne.n	8003bec <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003bda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003bdc:	461a      	mov	r2, r3
 8003bde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f927 	bl	8003e34 <HAL_PCD_EP_DB_Receive>
 8003be6:	4603      	mov	r3, r0
 8003be8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003bea:	e06f      	b.n	8003ccc <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c06:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	441a      	add	r2, r3
 8003c16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d021      	beq.n	8003c8a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4413      	add	r3, r2
 8003c5a:	3302      	adds	r3, #2
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c6e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003c70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d02a      	beq.n	8003ccc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	6959      	ldr	r1, [r3, #20]
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	891a      	ldrh	r2, [r3, #8]
 8003c82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c84:	f004 fe42 	bl	800890c <USB_ReadPMA>
 8003c88:	e020      	b.n	8003ccc <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3306      	adds	r3, #6
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cb2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003cb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d008      	beq.n	8003ccc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	6959      	ldr	r1, [r3, #20]
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	895a      	ldrh	r2, [r3, #10]
 8003cc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cc8:	f004 fe20 	bl	800890c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	69da      	ldr	r2, [r3, #28]
 8003cd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cd2:	441a      	add	r2, r3
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	695a      	ldr	r2, [r3, #20]
 8003cdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cde:	441a      	add	r2, r3
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d004      	beq.n	8003cf6 <PCD_EP_ISR_Handler+0x4c2>
 8003cec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d206      	bcs.n	8003d04 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f009 fb45 	bl	800d38c <HAL_PCD_DataOutStageCallback>
 8003d02:	e005      	b.n	8003d10 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f003 f984 	bl	8007018 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003d10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d07e      	beq.n	8003e18 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003d1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d48:	843b      	strh	r3, [r7, #32]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	441a      	add	r2, r3
 8003d58:	8c3b      	ldrh	r3, [r7, #32]
 8003d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	78db      	ldrb	r3, [r3, #3]
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d00c      	beq.n	8003d88 <PCD_EP_ISR_Handler+0x554>
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	78db      	ldrb	r3, [r3, #3]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d008      	beq.n	8003d88 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d146      	bne.n	8003e0c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003d7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d141      	bne.n	8003e0c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3302      	adds	r3, #2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003db0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	8bfb      	ldrh	r3, [r7, #30]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d906      	bls.n	8003dca <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	8bfb      	ldrh	r3, [r7, #30]
 8003dc2:	1ad2      	subs	r2, r2, r3
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	619a      	str	r2, [r3, #24]
 8003dc8:	e002      	b.n	8003dd0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	2200      	movs	r2, #0
 8003dce:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d106      	bne.n	8003de6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f009 faef 	bl	800d3c2 <HAL_PCD_DataInStageCallback>
 8003de4:	e018      	b.n	8003e18 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	8bfb      	ldrh	r3, [r7, #30]
 8003dec:	441a      	add	r2, r3
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	69da      	ldr	r2, [r3, #28]
 8003df6:	8bfb      	ldrh	r3, [r7, #30]
 8003df8:	441a      	add	r2, r3
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e04:	4618      	mov	r0, r3
 8003e06:	f003 f907 	bl	8007018 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003e0a:	e005      	b.n	8003e18 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003e0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f91b 	bl	800404e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	b21b      	sxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f6ff ad0a 	blt.w	800383e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3738      	adds	r7, #56	; 0x38
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d07e      	beq.n	8003f4a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4413      	add	r3, r2
 8003e60:	3302      	adds	r3, #2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e74:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	8b7b      	ldrh	r3, [r7, #26]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d306      	bcc.n	8003e8e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	699a      	ldr	r2, [r3, #24]
 8003e84:	8b7b      	ldrh	r3, [r7, #26]
 8003e86:	1ad2      	subs	r2, r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	619a      	str	r2, [r3, #24]
 8003e8c:	e002      	b.n	8003e94 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2200      	movs	r2, #0
 8003e92:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d123      	bne.n	8003ee4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb6:	833b      	strh	r3, [r7, #24]
 8003eb8:	8b3b      	ldrh	r3, [r7, #24]
 8003eba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ebe:	833b      	strh	r3, [r7, #24]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	441a      	add	r2, r3
 8003ece:	8b3b      	ldrh	r3, [r7, #24]
 8003ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d01f      	beq.n	8003f2e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f08:	82fb      	strh	r3, [r7, #22]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	441a      	add	r2, r3
 8003f18:	8afb      	ldrh	r3, [r7, #22]
 8003f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f2e:	8b7b      	ldrh	r3, [r7, #26]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8087 	beq.w	8004044 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	6959      	ldr	r1, [r3, #20]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	891a      	ldrh	r2, [r3, #8]
 8003f42:	8b7b      	ldrh	r3, [r7, #26]
 8003f44:	f004 fce2 	bl	800890c <USB_ReadPMA>
 8003f48:	e07c      	b.n	8004044 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	3306      	adds	r3, #6
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f72:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	699a      	ldr	r2, [r3, #24]
 8003f78:	8b7b      	ldrh	r3, [r7, #26]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d306      	bcc.n	8003f8c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	8b7b      	ldrh	r3, [r7, #26]
 8003f84:	1ad2      	subs	r2, r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	619a      	str	r2, [r3, #24]
 8003f8a:	e002      	b.n	8003f92 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d123      	bne.n	8003fe2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb4:	83fb      	strh	r3, [r7, #30]
 8003fb6:	8bfb      	ldrh	r3, [r7, #30]
 8003fb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003fbc:	83fb      	strh	r3, [r7, #30]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	441a      	add	r2, r3
 8003fcc:	8bfb      	ldrh	r3, [r7, #30]
 8003fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d11f      	bne.n	800402c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004006:	83bb      	strh	r3, [r7, #28]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	441a      	add	r2, r3
 8004016:	8bbb      	ldrh	r3, [r7, #28]
 8004018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800401c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004024:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004028:	b29b      	uxth	r3, r3
 800402a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800402c:	8b7b      	ldrh	r3, [r7, #26]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	6959      	ldr	r1, [r3, #20]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	895a      	ldrh	r2, [r3, #10]
 800403e:	8b7b      	ldrh	r3, [r7, #26]
 8004040:	f004 fc64 	bl	800890c <USB_ReadPMA>
    }
  }

  return count;
 8004044:	8b7b      	ldrh	r3, [r7, #26]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b0a2      	sub	sp, #136	; 0x88
 8004052:	af00      	add	r7, sp, #0
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	4613      	mov	r3, r2
 800405a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800405c:	88fb      	ldrh	r3, [r7, #6]
 800405e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 81c7 	beq.w	80043f6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004070:	b29b      	uxth	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4413      	add	r3, r2
 800407c:	3302      	adds	r3, #2
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004090:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	699a      	ldr	r2, [r3, #24]
 8004098:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800409c:	429a      	cmp	r2, r3
 800409e:	d907      	bls.n	80040b0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	699a      	ldr	r2, [r3, #24]
 80040a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040a8:	1ad2      	subs	r2, r2, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	619a      	str	r2, [r3, #24]
 80040ae:	e002      	b.n	80040b6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2200      	movs	r2, #0
 80040b4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f040 80b9 	bne.w	8004232 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	785b      	ldrb	r3, [r3, #1]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d126      	bne.n	8004116 <HAL_PCD_EP_DB_Transmit+0xc8>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040dc:	4413      	add	r3, r2
 80040de:	62bb      	str	r3, [r7, #40]	; 0x28
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	011a      	lsls	r2, r3, #4
 80040e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e8:	4413      	add	r3, r2
 80040ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	801a      	strh	r2, [r3, #0]
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	b29b      	uxth	r3, r3
 8004106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800410a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800410e:	b29a      	uxth	r2, r3
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	801a      	strh	r2, [r3, #0]
 8004114:	e01a      	b.n	800414c <HAL_PCD_EP_DB_Transmit+0xfe>
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	785b      	ldrb	r3, [r3, #1]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d116      	bne.n	800414c <HAL_PCD_EP_DB_Transmit+0xfe>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	633b      	str	r3, [r7, #48]	; 0x30
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800412c:	b29b      	uxth	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	4413      	add	r3, r2
 8004134:	633b      	str	r3, [r7, #48]	; 0x30
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	011a      	lsls	r2, r3, #4
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	4413      	add	r3, r2
 8004140:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004148:	2200      	movs	r2, #0
 800414a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	623b      	str	r3, [r7, #32]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	785b      	ldrb	r3, [r3, #1]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d126      	bne.n	80041a8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	61bb      	str	r3, [r7, #24]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004168:	b29b      	uxth	r3, r3
 800416a:	461a      	mov	r2, r3
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	4413      	add	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	011a      	lsls	r2, r3, #4
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	4413      	add	r3, r2
 800417c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b29b      	uxth	r3, r3
 8004188:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800418c:	b29a      	uxth	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	801a      	strh	r2, [r3, #0]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	b29b      	uxth	r3, r3
 8004198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800419c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	801a      	strh	r2, [r3, #0]
 80041a6:	e017      	b.n	80041d8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	785b      	ldrb	r3, [r3, #1]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d113      	bne.n	80041d8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	4413      	add	r3, r2
 80041c0:	623b      	str	r3, [r7, #32]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	011a      	lsls	r2, r3, #4
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	4413      	add	r3, r2
 80041cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	2200      	movs	r2, #0
 80041d6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	4619      	mov	r1, r3
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f009 f8ef 	bl	800d3c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80041e4:	88fb      	ldrh	r3, [r7, #6]
 80041e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 82d4 	beq.w	8004798 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	461a      	mov	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	b29b      	uxth	r3, r3
 8004202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420a:	827b      	strh	r3, [r7, #18]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	441a      	add	r2, r3
 800421a:	8a7b      	ldrh	r3, [r7, #18]
 800421c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004224:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800422c:	b29b      	uxth	r3, r3
 800422e:	8013      	strh	r3, [r2, #0]
 8004230:	e2b2      	b.n	8004798 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d021      	beq.n	8004280 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	b29b      	uxth	r3, r3
 800424e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	441a      	add	r2, r3
 8004268:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800426c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004274:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800427c:	b29b      	uxth	r3, r3
 800427e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004286:	2b01      	cmp	r3, #1
 8004288:	f040 8286 	bne.w	8004798 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004294:	441a      	add	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	69da      	ldr	r2, [r3, #28]
 800429e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042a2:	441a      	add	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	6a1a      	ldr	r2, [r3, #32]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d309      	bcc.n	80042c8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	6a1a      	ldr	r2, [r3, #32]
 80042be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c0:	1ad2      	subs	r2, r2, r3
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	621a      	str	r2, [r3, #32]
 80042c6:	e015      	b.n	80042f4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d107      	bne.n	80042e0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80042d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042d4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80042de:	e009      	b.n	80042f4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2200      	movs	r2, #0
 80042f2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	785b      	ldrb	r3, [r3, #1]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d155      	bne.n	80043a8 <HAL_PCD_EP_DB_Transmit+0x35a>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	63bb      	str	r3, [r7, #56]	; 0x38
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800430a:	b29b      	uxth	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004310:	4413      	add	r3, r2
 8004312:	63bb      	str	r3, [r7, #56]	; 0x38
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	011a      	lsls	r2, r3, #4
 800431a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431c:	4413      	add	r3, r2
 800431e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004322:	637b      	str	r3, [r7, #52]	; 0x34
 8004324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004326:	2b00      	cmp	r3, #0
 8004328:	d112      	bne.n	8004350 <HAL_PCD_EP_DB_Transmit+0x302>
 800432a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004334:	b29a      	uxth	r2, r3
 8004336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004338:	801a      	strh	r2, [r3, #0]
 800433a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	b29b      	uxth	r3, r3
 8004340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004348:	b29a      	uxth	r2, r3
 800434a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434c:	801a      	strh	r2, [r3, #0]
 800434e:	e047      	b.n	80043e0 <HAL_PCD_EP_DB_Transmit+0x392>
 8004350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004352:	2b3e      	cmp	r3, #62	; 0x3e
 8004354:	d811      	bhi.n	800437a <HAL_PCD_EP_DB_Transmit+0x32c>
 8004356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004358:	085b      	lsrs	r3, r3, #1
 800435a:	64bb      	str	r3, [r7, #72]	; 0x48
 800435c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_PCD_EP_DB_Transmit+0x31e>
 8004366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004368:	3301      	adds	r3, #1
 800436a:	64bb      	str	r3, [r7, #72]	; 0x48
 800436c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800436e:	b29b      	uxth	r3, r3
 8004370:	029b      	lsls	r3, r3, #10
 8004372:	b29a      	uxth	r2, r3
 8004374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	e032      	b.n	80043e0 <HAL_PCD_EP_DB_Transmit+0x392>
 800437a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800437c:	095b      	lsrs	r3, r3, #5
 800437e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004382:	f003 031f 	and.w	r3, r3, #31
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <HAL_PCD_EP_DB_Transmit+0x342>
 800438a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800438c:	3b01      	subs	r3, #1
 800438e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004392:	b29b      	uxth	r3, r3
 8004394:	029b      	lsls	r3, r3, #10
 8004396:	b29b      	uxth	r3, r3
 8004398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800439c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a4:	801a      	strh	r2, [r3, #0]
 80043a6:	e01b      	b.n	80043e0 <HAL_PCD_EP_DB_Transmit+0x392>
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d117      	bne.n	80043e0 <HAL_PCD_EP_DB_Transmit+0x392>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	643b      	str	r3, [r7, #64]	; 0x40
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043be:	b29b      	uxth	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c4:	4413      	add	r3, r2
 80043c6:	643b      	str	r3, [r7, #64]	; 0x40
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	011a      	lsls	r2, r3, #4
 80043ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d0:	4413      	add	r3, r2
 80043d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043da:	b29a      	uxth	r2, r3
 80043dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043de:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	6959      	ldr	r1, [r3, #20]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	891a      	ldrh	r2, [r3, #8]
 80043ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	f004 fa47 	bl	8008882 <USB_WritePMA>
 80043f4:	e1d0      	b.n	8004798 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043fe:	b29b      	uxth	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4413      	add	r3, r2
 800440a:	3306      	adds	r3, #6
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	6812      	ldr	r2, [r2, #0]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800441e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800442a:	429a      	cmp	r2, r3
 800442c:	d307      	bcc.n	800443e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004436:	1ad2      	subs	r2, r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	619a      	str	r2, [r3, #24]
 800443c:	e002      	b.n	8004444 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2200      	movs	r2, #0
 8004442:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	2b00      	cmp	r3, #0
 800444a:	f040 80c4 	bne.w	80045d6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	785b      	ldrb	r3, [r3, #1]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d126      	bne.n	80044a4 <HAL_PCD_EP_DB_Transmit+0x456>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004464:	b29b      	uxth	r3, r3
 8004466:	461a      	mov	r2, r3
 8004468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800446a:	4413      	add	r3, r2
 800446c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	011a      	lsls	r2, r3, #4
 8004474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004476:	4413      	add	r3, r2
 8004478:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800447c:	66bb      	str	r3, [r7, #104]	; 0x68
 800447e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	b29b      	uxth	r3, r3
 8004484:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004488:	b29a      	uxth	r2, r3
 800448a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800448c:	801a      	strh	r2, [r3, #0]
 800448e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	b29b      	uxth	r3, r3
 8004494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449c:	b29a      	uxth	r2, r3
 800449e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044a0:	801a      	strh	r2, [r3, #0]
 80044a2:	e01a      	b.n	80044da <HAL_PCD_EP_DB_Transmit+0x48c>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	785b      	ldrb	r3, [r3, #1]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d116      	bne.n	80044da <HAL_PCD_EP_DB_Transmit+0x48c>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	677b      	str	r3, [r7, #116]	; 0x74
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044c0:	4413      	add	r3, r2
 80044c2:	677b      	str	r3, [r7, #116]	; 0x74
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	011a      	lsls	r2, r3, #4
 80044ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044cc:	4413      	add	r3, r2
 80044ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044d2:	673b      	str	r3, [r7, #112]	; 0x70
 80044d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044d6:	2200      	movs	r2, #0
 80044d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	67bb      	str	r3, [r7, #120]	; 0x78
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	785b      	ldrb	r3, [r3, #1]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d12f      	bne.n	8004548 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004500:	4413      	add	r3, r2
 8004502:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	011a      	lsls	r2, r3, #4
 800450c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004510:	4413      	add	r3, r2
 8004512:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004516:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800451a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	b29b      	uxth	r3, r3
 8004522:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004526:	b29a      	uxth	r2, r3
 8004528:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800452c:	801a      	strh	r2, [r3, #0]
 800452e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	b29b      	uxth	r3, r3
 8004536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800453a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800453e:	b29a      	uxth	r2, r3
 8004540:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004544:	801a      	strh	r2, [r3, #0]
 8004546:	e017      	b.n	8004578 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	785b      	ldrb	r3, [r3, #1]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d113      	bne.n	8004578 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004558:	b29b      	uxth	r3, r3
 800455a:	461a      	mov	r2, r3
 800455c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800455e:	4413      	add	r3, r2
 8004560:	67bb      	str	r3, [r7, #120]	; 0x78
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	011a      	lsls	r2, r3, #4
 8004568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800456a:	4413      	add	r3, r2
 800456c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004570:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004572:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004574:	2200      	movs	r2, #0
 8004576:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	4619      	mov	r1, r3
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f008 ff1f 	bl	800d3c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004584:	88fb      	ldrh	r3, [r7, #6]
 8004586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800458a:	2b00      	cmp	r3, #0
 800458c:	f040 8104 	bne.w	8004798 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	461a      	mov	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	441a      	add	r2, r3
 80045bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80045c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	8013      	strh	r3, [r2, #0]
 80045d4:	e0e0      	b.n	8004798 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80045d6:	88fb      	ldrh	r3, [r7, #6]
 80045d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d121      	bne.n	8004624 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	441a      	add	r2, r3
 800460c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800461c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004620:	b29b      	uxth	r3, r3
 8004622:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800462a:	2b01      	cmp	r3, #1
 800462c:	f040 80b4 	bne.w	8004798 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	695a      	ldr	r2, [r3, #20]
 8004634:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004638:	441a      	add	r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	69da      	ldr	r2, [r3, #28]
 8004642:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004646:	441a      	add	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	6a1a      	ldr	r2, [r3, #32]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	429a      	cmp	r2, r3
 8004656:	d309      	bcc.n	800466c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	6a1a      	ldr	r2, [r3, #32]
 8004662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004664:	1ad2      	subs	r2, r2, r3
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	621a      	str	r2, [r3, #32]
 800466a:	e015      	b.n	8004698 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d107      	bne.n	8004684 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004674:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004678:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004682:	e009      	b.n	8004698 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2200      	movs	r2, #0
 800468e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	667b      	str	r3, [r7, #100]	; 0x64
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	785b      	ldrb	r3, [r3, #1]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d155      	bne.n	8004752 <HAL_PCD_EP_DB_Transmit+0x704>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	461a      	mov	r2, r3
 80046b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ba:	4413      	add	r3, r2
 80046bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	011a      	lsls	r2, r3, #4
 80046c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c6:	4413      	add	r3, r2
 80046c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80046ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d112      	bne.n	80046fa <HAL_PCD_EP_DB_Transmit+0x6ac>
 80046d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046de:	b29a      	uxth	r2, r3
 80046e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046e2:	801a      	strh	r2, [r3, #0]
 80046e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046f6:	801a      	strh	r2, [r3, #0]
 80046f8:	e044      	b.n	8004784 <HAL_PCD_EP_DB_Transmit+0x736>
 80046fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046fc:	2b3e      	cmp	r3, #62	; 0x3e
 80046fe:	d811      	bhi.n	8004724 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004702:	085b      	lsrs	r3, r3, #1
 8004704:	657b      	str	r3, [r7, #84]	; 0x54
 8004706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004712:	3301      	adds	r3, #1
 8004714:	657b      	str	r3, [r7, #84]	; 0x54
 8004716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004718:	b29b      	uxth	r3, r3
 800471a:	029b      	lsls	r3, r3, #10
 800471c:	b29a      	uxth	r2, r3
 800471e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004720:	801a      	strh	r2, [r3, #0]
 8004722:	e02f      	b.n	8004784 <HAL_PCD_EP_DB_Transmit+0x736>
 8004724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	657b      	str	r3, [r7, #84]	; 0x54
 800472a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800472c:	f003 031f 	and.w	r3, r3, #31
 8004730:	2b00      	cmp	r3, #0
 8004732:	d102      	bne.n	800473a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004736:	3b01      	subs	r3, #1
 8004738:	657b      	str	r3, [r7, #84]	; 0x54
 800473a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800473c:	b29b      	uxth	r3, r3
 800473e:	029b      	lsls	r3, r3, #10
 8004740:	b29b      	uxth	r3, r3
 8004742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800474a:	b29a      	uxth	r2, r3
 800474c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800474e:	801a      	strh	r2, [r3, #0]
 8004750:	e018      	b.n	8004784 <HAL_PCD_EP_DB_Transmit+0x736>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	785b      	ldrb	r3, [r3, #1]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d114      	bne.n	8004784 <HAL_PCD_EP_DB_Transmit+0x736>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004762:	b29b      	uxth	r3, r3
 8004764:	461a      	mov	r2, r3
 8004766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004768:	4413      	add	r3, r2
 800476a:	667b      	str	r3, [r7, #100]	; 0x64
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	011a      	lsls	r2, r3, #4
 8004772:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004774:	4413      	add	r3, r2
 8004776:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800477a:	663b      	str	r3, [r7, #96]	; 0x60
 800477c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800477e:	b29a      	uxth	r2, r3
 8004780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004782:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	6959      	ldr	r1, [r3, #20]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	895a      	ldrh	r2, [r3, #10]
 8004790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004792:	b29b      	uxth	r3, r3
 8004794:	f004 f875 	bl	8008882 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b2:	823b      	strh	r3, [r7, #16]
 80047b4:	8a3b      	ldrh	r3, [r7, #16]
 80047b6:	f083 0310 	eor.w	r3, r3, #16
 80047ba:	823b      	strh	r3, [r7, #16]
 80047bc:	8a3b      	ldrh	r3, [r7, #16]
 80047be:	f083 0320 	eor.w	r3, r3, #32
 80047c2:	823b      	strh	r3, [r7, #16]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	441a      	add	r2, r3
 80047d2:	8a3b      	ldrh	r3, [r7, #16]
 80047d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3788      	adds	r7, #136	; 0x88
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b087      	sub	sp, #28
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	607b      	str	r3, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	817b      	strh	r3, [r7, #10]
 8004800:	4613      	mov	r3, r2
 8004802:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004804:	897b      	ldrh	r3, [r7, #10]
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	b29b      	uxth	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00b      	beq.n	8004828 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004810:	897b      	ldrh	r3, [r7, #10]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	4413      	add	r3, r2
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	e009      	b.n	800483c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004828:	897a      	ldrh	r2, [r7, #10]
 800482a:	4613      	mov	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4413      	add	r3, r2
 800483a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800483c:	893b      	ldrh	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d107      	bne.n	8004852 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2200      	movs	r2, #0
 8004846:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	b29a      	uxth	r2, r3
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	80da      	strh	r2, [r3, #6]
 8004850:	e00b      	b.n	800486a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2201      	movs	r2, #1
 8004856:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	b29a      	uxth	r2, r3
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	0c1b      	lsrs	r3, r3, #16
 8004864:	b29a      	uxth	r2, r3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	371c      	adds	r7, #28
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr
	...

08004878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e26c      	b.n	8004d64 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 8087 	beq.w	80049a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004898:	4b92      	ldr	r3, [pc, #584]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d00c      	beq.n	80048be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048a4:	4b8f      	ldr	r3, [pc, #572]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 030c 	and.w	r3, r3, #12
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d112      	bne.n	80048d6 <HAL_RCC_OscConfig+0x5e>
 80048b0:	4b8c      	ldr	r3, [pc, #560]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048bc:	d10b      	bne.n	80048d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048be:	4b89      	ldr	r3, [pc, #548]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d06c      	beq.n	80049a4 <HAL_RCC_OscConfig+0x12c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d168      	bne.n	80049a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e246      	b.n	8004d64 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048de:	d106      	bne.n	80048ee <HAL_RCC_OscConfig+0x76>
 80048e0:	4b80      	ldr	r3, [pc, #512]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a7f      	ldr	r2, [pc, #508]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 80048e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	e02e      	b.n	800494c <HAL_RCC_OscConfig+0xd4>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10c      	bne.n	8004910 <HAL_RCC_OscConfig+0x98>
 80048f6:	4b7b      	ldr	r3, [pc, #492]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a7a      	ldr	r2, [pc, #488]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 80048fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	4b78      	ldr	r3, [pc, #480]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a77      	ldr	r2, [pc, #476]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 8004908:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e01d      	b.n	800494c <HAL_RCC_OscConfig+0xd4>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004918:	d10c      	bne.n	8004934 <HAL_RCC_OscConfig+0xbc>
 800491a:	4b72      	ldr	r3, [pc, #456]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a71      	ldr	r2, [pc, #452]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 8004920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	4b6f      	ldr	r3, [pc, #444]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a6e      	ldr	r2, [pc, #440]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 800492c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e00b      	b.n	800494c <HAL_RCC_OscConfig+0xd4>
 8004934:	4b6b      	ldr	r3, [pc, #428]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a6a      	ldr	r2, [pc, #424]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 800493a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	4b68      	ldr	r3, [pc, #416]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a67      	ldr	r2, [pc, #412]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 8004946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800494a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d013      	beq.n	800497c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004954:	f7fd ff42 	bl	80027dc <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800495c:	f7fd ff3e 	bl	80027dc <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b64      	cmp	r3, #100	; 0x64
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e1fa      	b.n	8004d64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496e:	4b5d      	ldr	r3, [pc, #372]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCC_OscConfig+0xe4>
 800497a:	e014      	b.n	80049a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497c:	f7fd ff2e 	bl	80027dc <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004984:	f7fd ff2a 	bl	80027dc <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b64      	cmp	r3, #100	; 0x64
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e1e6      	b.n	8004d64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004996:	4b53      	ldr	r3, [pc, #332]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0x10c>
 80049a2:	e000      	b.n	80049a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d063      	beq.n	8004a7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049b2:	4b4c      	ldr	r3, [pc, #304]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00b      	beq.n	80049d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80049be:	4b49      	ldr	r3, [pc, #292]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f003 030c 	and.w	r3, r3, #12
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d11c      	bne.n	8004a04 <HAL_RCC_OscConfig+0x18c>
 80049ca:	4b46      	ldr	r3, [pc, #280]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d116      	bne.n	8004a04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d6:	4b43      	ldr	r3, [pc, #268]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <HAL_RCC_OscConfig+0x176>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d001      	beq.n	80049ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e1ba      	b.n	8004d64 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ee:	4b3d      	ldr	r3, [pc, #244]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4939      	ldr	r1, [pc, #228]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a02:	e03a      	b.n	8004a7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d020      	beq.n	8004a4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a0c:	4b36      	ldr	r3, [pc, #216]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a12:	f7fd fee3 	bl	80027dc <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a1a:	f7fd fedf 	bl	80027dc <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e19b      	b.n	8004d64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2c:	4b2d      	ldr	r3, [pc, #180]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0f0      	beq.n	8004a1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a38:	4b2a      	ldr	r3, [pc, #168]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	4927      	ldr	r1, [pc, #156]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	600b      	str	r3, [r1, #0]
 8004a4c:	e015      	b.n	8004a7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a4e:	4b26      	ldr	r3, [pc, #152]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a54:	f7fd fec2 	bl	80027dc <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a5c:	f7fd febe 	bl	80027dc <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e17a      	b.n	8004d64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d03a      	beq.n	8004afc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d019      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a8e:	4b17      	ldr	r3, [pc, #92]	; (8004aec <HAL_RCC_OscConfig+0x274>)
 8004a90:	2201      	movs	r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a94:	f7fd fea2 	bl	80027dc <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a9c:	f7fd fe9e 	bl	80027dc <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e15a      	b.n	8004d64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aae:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <HAL_RCC_OscConfig+0x26c>)
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004aba:	2001      	movs	r0, #1
 8004abc:	f000 fb0a 	bl	80050d4 <RCC_Delay>
 8004ac0:	e01c      	b.n	8004afc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac2:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <HAL_RCC_OscConfig+0x274>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac8:	f7fd fe88 	bl	80027dc <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ace:	e00f      	b.n	8004af0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad0:	f7fd fe84 	bl	80027dc <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d908      	bls.n	8004af0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e140      	b.n	8004d64 <HAL_RCC_OscConfig+0x4ec>
 8004ae2:	bf00      	nop
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	42420000 	.word	0x42420000
 8004aec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af0:	4b9e      	ldr	r3, [pc, #632]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e9      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 80a6 	beq.w	8004c56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b0e:	4b97      	ldr	r3, [pc, #604]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10d      	bne.n	8004b36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b1a:	4b94      	ldr	r3, [pc, #592]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	4a93      	ldr	r2, [pc, #588]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b24:	61d3      	str	r3, [r2, #28]
 8004b26:	4b91      	ldr	r3, [pc, #580]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	60bb      	str	r3, [r7, #8]
 8004b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b32:	2301      	movs	r3, #1
 8004b34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b36:	4b8e      	ldr	r3, [pc, #568]	; (8004d70 <HAL_RCC_OscConfig+0x4f8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d118      	bne.n	8004b74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b42:	4b8b      	ldr	r3, [pc, #556]	; (8004d70 <HAL_RCC_OscConfig+0x4f8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a8a      	ldr	r2, [pc, #552]	; (8004d70 <HAL_RCC_OscConfig+0x4f8>)
 8004b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b4e:	f7fd fe45 	bl	80027dc <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b56:	f7fd fe41 	bl	80027dc <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b64      	cmp	r3, #100	; 0x64
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e0fd      	b.n	8004d64 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b68:	4b81      	ldr	r3, [pc, #516]	; (8004d70 <HAL_RCC_OscConfig+0x4f8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0f0      	beq.n	8004b56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d106      	bne.n	8004b8a <HAL_RCC_OscConfig+0x312>
 8004b7c:	4b7b      	ldr	r3, [pc, #492]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	4a7a      	ldr	r2, [pc, #488]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	6213      	str	r3, [r2, #32]
 8004b88:	e02d      	b.n	8004be6 <HAL_RCC_OscConfig+0x36e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10c      	bne.n	8004bac <HAL_RCC_OscConfig+0x334>
 8004b92:	4b76      	ldr	r3, [pc, #472]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	4a75      	ldr	r2, [pc, #468]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004b98:	f023 0301 	bic.w	r3, r3, #1
 8004b9c:	6213      	str	r3, [r2, #32]
 8004b9e:	4b73      	ldr	r3, [pc, #460]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	4a72      	ldr	r2, [pc, #456]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004ba4:	f023 0304 	bic.w	r3, r3, #4
 8004ba8:	6213      	str	r3, [r2, #32]
 8004baa:	e01c      	b.n	8004be6 <HAL_RCC_OscConfig+0x36e>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	2b05      	cmp	r3, #5
 8004bb2:	d10c      	bne.n	8004bce <HAL_RCC_OscConfig+0x356>
 8004bb4:	4b6d      	ldr	r3, [pc, #436]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	4a6c      	ldr	r2, [pc, #432]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004bba:	f043 0304 	orr.w	r3, r3, #4
 8004bbe:	6213      	str	r3, [r2, #32]
 8004bc0:	4b6a      	ldr	r3, [pc, #424]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	4a69      	ldr	r2, [pc, #420]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	6213      	str	r3, [r2, #32]
 8004bcc:	e00b      	b.n	8004be6 <HAL_RCC_OscConfig+0x36e>
 8004bce:	4b67      	ldr	r3, [pc, #412]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	4a66      	ldr	r2, [pc, #408]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004bd4:	f023 0301 	bic.w	r3, r3, #1
 8004bd8:	6213      	str	r3, [r2, #32]
 8004bda:	4b64      	ldr	r3, [pc, #400]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	4a63      	ldr	r2, [pc, #396]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004be0:	f023 0304 	bic.w	r3, r3, #4
 8004be4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d015      	beq.n	8004c1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bee:	f7fd fdf5 	bl	80027dc <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf4:	e00a      	b.n	8004c0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf6:	f7fd fdf1 	bl	80027dc <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e0ab      	b.n	8004d64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0c:	4b57      	ldr	r3, [pc, #348]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0ee      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x37e>
 8004c18:	e014      	b.n	8004c44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c1a:	f7fd fddf 	bl	80027dc <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c20:	e00a      	b.n	8004c38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c22:	f7fd fddb 	bl	80027dc <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e095      	b.n	8004d64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c38:	4b4c      	ldr	r3, [pc, #304]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1ee      	bne.n	8004c22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d105      	bne.n	8004c56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c4a:	4b48      	ldr	r3, [pc, #288]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	4a47      	ldr	r2, [pc, #284]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 8081 	beq.w	8004d62 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c60:	4b42      	ldr	r3, [pc, #264]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f003 030c 	and.w	r3, r3, #12
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d061      	beq.n	8004d30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d146      	bne.n	8004d02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c74:	4b3f      	ldr	r3, [pc, #252]	; (8004d74 <HAL_RCC_OscConfig+0x4fc>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c7a:	f7fd fdaf 	bl	80027dc <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c80:	e008      	b.n	8004c94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c82:	f7fd fdab 	bl	80027dc <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e067      	b.n	8004d64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c94:	4b35      	ldr	r3, [pc, #212]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1f0      	bne.n	8004c82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca8:	d108      	bne.n	8004cbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004caa:	4b30      	ldr	r3, [pc, #192]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	492d      	ldr	r1, [pc, #180]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cbc:	4b2b      	ldr	r3, [pc, #172]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a19      	ldr	r1, [r3, #32]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	4927      	ldr	r1, [pc, #156]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cd4:	4b27      	ldr	r3, [pc, #156]	; (8004d74 <HAL_RCC_OscConfig+0x4fc>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cda:	f7fd fd7f 	bl	80027dc <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce2:	f7fd fd7b 	bl	80027dc <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e037      	b.n	8004d64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cf4:	4b1d      	ldr	r3, [pc, #116]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f0      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x46a>
 8004d00:	e02f      	b.n	8004d62 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d02:	4b1c      	ldr	r3, [pc, #112]	; (8004d74 <HAL_RCC_OscConfig+0x4fc>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d08:	f7fd fd68 	bl	80027dc <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d10:	f7fd fd64 	bl	80027dc <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e020      	b.n	8004d64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d22:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f0      	bne.n	8004d10 <HAL_RCC_OscConfig+0x498>
 8004d2e:	e018      	b.n	8004d62 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e013      	b.n	8004d64 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <HAL_RCC_OscConfig+0x4f4>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d106      	bne.n	8004d5e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d001      	beq.n	8004d62 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e000      	b.n	8004d64 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	40007000 	.word	0x40007000
 8004d74:	42420060 	.word	0x42420060

08004d78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0d0      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d8c:	4b6a      	ldr	r3, [pc, #424]	; (8004f38 <HAL_RCC_ClockConfig+0x1c0>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d910      	bls.n	8004dbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9a:	4b67      	ldr	r3, [pc, #412]	; (8004f38 <HAL_RCC_ClockConfig+0x1c0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f023 0207 	bic.w	r2, r3, #7
 8004da2:	4965      	ldr	r1, [pc, #404]	; (8004f38 <HAL_RCC_ClockConfig+0x1c0>)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004daa:	4b63      	ldr	r3, [pc, #396]	; (8004f38 <HAL_RCC_ClockConfig+0x1c0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d001      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e0b8      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d020      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d005      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dd4:	4b59      	ldr	r3, [pc, #356]	; (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	4a58      	ldr	r2, [pc, #352]	; (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004dda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004dde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dec:	4b53      	ldr	r3, [pc, #332]	; (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	4a52      	ldr	r2, [pc, #328]	; (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004df2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004df6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df8:	4b50      	ldr	r3, [pc, #320]	; (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	494d      	ldr	r1, [pc, #308]	; (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d040      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d107      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1e:	4b47      	ldr	r3, [pc, #284]	; (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d115      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e07f      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d107      	bne.n	8004e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e36:	4b41      	ldr	r3, [pc, #260]	; (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e073      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e46:	4b3d      	ldr	r3, [pc, #244]	; (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e06b      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e56:	4b39      	ldr	r3, [pc, #228]	; (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f023 0203 	bic.w	r2, r3, #3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	4936      	ldr	r1, [pc, #216]	; (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e68:	f7fd fcb8 	bl	80027dc <HAL_GetTick>
 8004e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6e:	e00a      	b.n	8004e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e70:	f7fd fcb4 	bl	80027dc <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e053      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e86:	4b2d      	ldr	r3, [pc, #180]	; (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f003 020c 	and.w	r2, r3, #12
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d1eb      	bne.n	8004e70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e98:	4b27      	ldr	r3, [pc, #156]	; (8004f38 <HAL_RCC_ClockConfig+0x1c0>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d210      	bcs.n	8004ec8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea6:	4b24      	ldr	r3, [pc, #144]	; (8004f38 <HAL_RCC_ClockConfig+0x1c0>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f023 0207 	bic.w	r2, r3, #7
 8004eae:	4922      	ldr	r1, [pc, #136]	; (8004f38 <HAL_RCC_ClockConfig+0x1c0>)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb6:	4b20      	ldr	r3, [pc, #128]	; (8004f38 <HAL_RCC_ClockConfig+0x1c0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d001      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e032      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ed4:	4b19      	ldr	r3, [pc, #100]	; (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4916      	ldr	r1, [pc, #88]	; (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d009      	beq.n	8004f06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ef2:	4b12      	ldr	r3, [pc, #72]	; (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	490e      	ldr	r1, [pc, #56]	; (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f06:	f000 f821 	bl	8004f4c <HAL_RCC_GetSysClockFreq>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	490a      	ldr	r1, [pc, #40]	; (8004f40 <HAL_RCC_ClockConfig+0x1c8>)
 8004f18:	5ccb      	ldrb	r3, [r1, r3]
 8004f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1e:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <HAL_RCC_ClockConfig+0x1cc>)
 8004f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f22:	4b09      	ldr	r3, [pc, #36]	; (8004f48 <HAL_RCC_ClockConfig+0x1d0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fd faf8 	bl	800251c <HAL_InitTick>

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40022000 	.word	0x40022000
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	0800e08c 	.word	0x0800e08c
 8004f44:	20000010 	.word	0x20000010
 8004f48:	20000014 	.word	0x20000014

08004f4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f4c:	b490      	push	{r4, r7}
 8004f4e:	b08a      	sub	sp, #40	; 0x28
 8004f50:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f52:	4b2a      	ldr	r3, [pc, #168]	; (8004ffc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f54:	1d3c      	adds	r4, r7, #4
 8004f56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f5c:	f240 2301 	movw	r3, #513	; 0x201
 8004f60:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61fb      	str	r3, [r7, #28]
 8004f66:	2300      	movs	r3, #0
 8004f68:	61bb      	str	r3, [r7, #24]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f76:	4b22      	ldr	r3, [pc, #136]	; (8005000 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f003 030c 	and.w	r3, r3, #12
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d002      	beq.n	8004f8c <HAL_RCC_GetSysClockFreq+0x40>
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d003      	beq.n	8004f92 <HAL_RCC_GetSysClockFreq+0x46>
 8004f8a:	e02d      	b.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f8c:	4b1d      	ldr	r3, [pc, #116]	; (8005004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f8e:	623b      	str	r3, [r7, #32]
      break;
 8004f90:	e02d      	b.n	8004fee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	0c9b      	lsrs	r3, r3, #18
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004fa4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d013      	beq.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fb0:	4b13      	ldr	r3, [pc, #76]	; (8005000 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	0c5b      	lsrs	r3, r3, #17
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004fc4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	4a0e      	ldr	r2, [pc, #56]	; (8005004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fca:	fb02 f203 	mul.w	r2, r2, r3
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd6:	e004      	b.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	4a0b      	ldr	r2, [pc, #44]	; (8005008 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fdc:	fb02 f303 	mul.w	r3, r2, r3
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	623b      	str	r3, [r7, #32]
      break;
 8004fe6:	e002      	b.n	8004fee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fe8:	4b08      	ldr	r3, [pc, #32]	; (800500c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fea:	623b      	str	r3, [r7, #32]
      break;
 8004fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fee:	6a3b      	ldr	r3, [r7, #32]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3728      	adds	r7, #40	; 0x28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc90      	pop	{r4, r7}
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	0800db1c 	.word	0x0800db1c
 8005000:	40021000 	.word	0x40021000
 8005004:	00f42400 	.word	0x00f42400
 8005008:	003d0900 	.word	0x003d0900
 800500c:	007a1200 	.word	0x007a1200

08005010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005014:	4b02      	ldr	r3, [pc, #8]	; (8005020 <HAL_RCC_GetHCLKFreq+0x10>)
 8005016:	681b      	ldr	r3, [r3, #0]
}
 8005018:	4618      	mov	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr
 8005020:	20000010 	.word	0x20000010

08005024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005028:	f7ff fff2 	bl	8005010 <HAL_RCC_GetHCLKFreq>
 800502c:	4602      	mov	r2, r0
 800502e:	4b05      	ldr	r3, [pc, #20]	; (8005044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	0a1b      	lsrs	r3, r3, #8
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	4903      	ldr	r1, [pc, #12]	; (8005048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800503a:	5ccb      	ldrb	r3, [r1, r3]
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005040:	4618      	mov	r0, r3
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40021000 	.word	0x40021000
 8005048:	0800e09c 	.word	0x0800e09c

0800504c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005050:	f7ff ffde 	bl	8005010 <HAL_RCC_GetHCLKFreq>
 8005054:	4602      	mov	r2, r0
 8005056:	4b05      	ldr	r3, [pc, #20]	; (800506c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	0adb      	lsrs	r3, r3, #11
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	4903      	ldr	r1, [pc, #12]	; (8005070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005062:	5ccb      	ldrb	r3, [r1, r3]
 8005064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005068:	4618      	mov	r0, r3
 800506a:	bd80      	pop	{r7, pc}
 800506c:	40021000 	.word	0x40021000
 8005070:	0800e09c 	.word	0x0800e09c

08005074 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	220f      	movs	r2, #15
 8005082:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005084:	4b11      	ldr	r3, [pc, #68]	; (80050cc <HAL_RCC_GetClockConfig+0x58>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f003 0203 	and.w	r2, r3, #3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005090:	4b0e      	ldr	r3, [pc, #56]	; (80050cc <HAL_RCC_GetClockConfig+0x58>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800509c:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <HAL_RCC_GetClockConfig+0x58>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80050a8:	4b08      	ldr	r3, [pc, #32]	; (80050cc <HAL_RCC_GetClockConfig+0x58>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	08db      	lsrs	r3, r3, #3
 80050ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80050b6:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <HAL_RCC_GetClockConfig+0x5c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0207 	and.w	r2, r3, #7
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr
 80050cc:	40021000 	.word	0x40021000
 80050d0:	40022000 	.word	0x40022000

080050d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80050dc:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <RCC_Delay+0x34>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a0a      	ldr	r2, [pc, #40]	; (800510c <RCC_Delay+0x38>)
 80050e2:	fba2 2303 	umull	r2, r3, r2, r3
 80050e6:	0a5b      	lsrs	r3, r3, #9
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	fb02 f303 	mul.w	r3, r2, r3
 80050ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80050f0:	bf00      	nop
  }
  while (Delay --);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1e5a      	subs	r2, r3, #1
 80050f6:	60fa      	str	r2, [r7, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1f9      	bne.n	80050f0 <RCC_Delay+0x1c>
}
 80050fc:	bf00      	nop
 80050fe:	bf00      	nop
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr
 8005108:	20000010 	.word	0x20000010
 800510c:	10624dd3 	.word	0x10624dd3

08005110 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]
 800511c:	2300      	movs	r3, #0
 800511e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d07d      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800512c:	2300      	movs	r3, #0
 800512e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005130:	4b4f      	ldr	r3, [pc, #316]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10d      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800513c:	4b4c      	ldr	r3, [pc, #304]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	4a4b      	ldr	r2, [pc, #300]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005146:	61d3      	str	r3, [r2, #28]
 8005148:	4b49      	ldr	r3, [pc, #292]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005150:	60bb      	str	r3, [r7, #8]
 8005152:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005154:	2301      	movs	r3, #1
 8005156:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005158:	4b46      	ldr	r3, [pc, #280]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d118      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005164:	4b43      	ldr	r3, [pc, #268]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a42      	ldr	r2, [pc, #264]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800516a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005170:	f7fd fb34 	bl	80027dc <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005176:	e008      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005178:	f7fd fb30 	bl	80027dc <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b64      	cmp	r3, #100	; 0x64
 8005184:	d901      	bls.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e06d      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800518a:	4b3a      	ldr	r3, [pc, #232]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005196:	4b36      	ldr	r3, [pc, #216]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800519e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d02e      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d027      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051b4:	4b2e      	ldr	r3, [pc, #184]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051be:	4b2e      	ldr	r3, [pc, #184]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051c0:	2201      	movs	r2, #1
 80051c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051c4:	4b2c      	ldr	r3, [pc, #176]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051ca:	4a29      	ldr	r2, [pc, #164]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d014      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051da:	f7fd faff 	bl	80027dc <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e0:	e00a      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e2:	f7fd fafb 	bl	80027dc <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e036      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f8:	4b1d      	ldr	r3, [pc, #116]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0ee      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005204:	4b1a      	ldr	r3, [pc, #104]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	4917      	ldr	r1, [pc, #92]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005212:	4313      	orrs	r3, r2
 8005214:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005216:	7dfb      	ldrb	r3, [r7, #23]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d105      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800521c:	4b14      	ldr	r3, [pc, #80]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	4a13      	ldr	r2, [pc, #76]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005226:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d008      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005234:	4b0e      	ldr	r3, [pc, #56]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	490b      	ldr	r1, [pc, #44]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005242:	4313      	orrs	r3, r2
 8005244:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0310 	and.w	r3, r3, #16
 800524e:	2b00      	cmp	r3, #0
 8005250:	d008      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005252:	4b07      	ldr	r3, [pc, #28]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	4904      	ldr	r1, [pc, #16]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005260:	4313      	orrs	r3, r2
 8005262:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000
 8005274:	40007000 	.word	0x40007000
 8005278:	42420440 	.word	0x42420440

0800527c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e076      	b.n	800537c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	2b00      	cmp	r3, #0
 8005294:	d108      	bne.n	80052a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800529e:	d009      	beq.n	80052b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	61da      	str	r2, [r3, #28]
 80052a6:	e005      	b.n	80052b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d106      	bne.n	80052d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fd f8a0 	bl	8002414 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005338:	ea42 0103 	orr.w	r1, r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005340:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	0c1a      	lsrs	r2, r3, #16
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f002 0204 	and.w	r2, r2, #4
 800535a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69da      	ldr	r2, [r3, #28]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800536a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	603b      	str	r3, [r7, #0]
 8005390:	4613      	mov	r3, r2
 8005392:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d101      	bne.n	80053a6 <HAL_SPI_Transmit+0x22>
 80053a2:	2302      	movs	r3, #2
 80053a4:	e126      	b.n	80055f4 <HAL_SPI_Transmit+0x270>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053ae:	f7fd fa15 	bl	80027dc <HAL_GetTick>
 80053b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053b4:	88fb      	ldrh	r3, [r7, #6]
 80053b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d002      	beq.n	80053ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80053c4:	2302      	movs	r3, #2
 80053c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053c8:	e10b      	b.n	80055e2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <HAL_SPI_Transmit+0x52>
 80053d0:	88fb      	ldrh	r3, [r7, #6]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d102      	bne.n	80053dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053da:	e102      	b.n	80055e2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2203      	movs	r2, #3
 80053e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	88fa      	ldrh	r2, [r7, #6]
 80053f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	88fa      	ldrh	r2, [r7, #6]
 80053fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005422:	d10f      	bne.n	8005444 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005432:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005442:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544e:	2b40      	cmp	r3, #64	; 0x40
 8005450:	d007      	beq.n	8005462 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005460:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800546a:	d14b      	bne.n	8005504 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <HAL_SPI_Transmit+0xf6>
 8005474:	8afb      	ldrh	r3, [r7, #22]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d13e      	bne.n	80054f8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	881a      	ldrh	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548a:	1c9a      	adds	r2, r3, #2
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800549e:	e02b      	b.n	80054f8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d112      	bne.n	80054d4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b2:	881a      	ldrh	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054be:	1c9a      	adds	r2, r3, #2
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80054d2:	e011      	b.n	80054f8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054d4:	f7fd f982 	bl	80027dc <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d803      	bhi.n	80054ec <HAL_SPI_Transmit+0x168>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ea:	d102      	bne.n	80054f2 <HAL_SPI_Transmit+0x16e>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d102      	bne.n	80054f8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054f6:	e074      	b.n	80055e2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1ce      	bne.n	80054a0 <HAL_SPI_Transmit+0x11c>
 8005502:	e04c      	b.n	800559e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <HAL_SPI_Transmit+0x18e>
 800550c:	8afb      	ldrh	r3, [r7, #22]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d140      	bne.n	8005594 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	330c      	adds	r3, #12
 800551c:	7812      	ldrb	r2, [r2, #0]
 800551e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800552e:	b29b      	uxth	r3, r3
 8005530:	3b01      	subs	r3, #1
 8005532:	b29a      	uxth	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005538:	e02c      	b.n	8005594 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b02      	cmp	r3, #2
 8005546:	d113      	bne.n	8005570 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	330c      	adds	r3, #12
 8005552:	7812      	ldrb	r2, [r2, #0]
 8005554:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	86da      	strh	r2, [r3, #54]	; 0x36
 800556e:	e011      	b.n	8005594 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005570:	f7fd f934 	bl	80027dc <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d803      	bhi.n	8005588 <HAL_SPI_Transmit+0x204>
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005586:	d102      	bne.n	800558e <HAL_SPI_Transmit+0x20a>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005592:	e026      	b.n	80055e2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1cd      	bne.n	800553a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	6839      	ldr	r1, [r7, #0]
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 f8b2 	bl	800570c <SPI_EndRxTxTransaction>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2220      	movs	r2, #32
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10a      	bne.n	80055d2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055bc:	2300      	movs	r3, #0
 80055be:	613b      	str	r3, [r7, #16]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	77fb      	strb	r3, [r7, #31]
 80055de:	e000      	b.n	80055e2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80055e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3720      	adds	r7, #32
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b088      	sub	sp, #32
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	4613      	mov	r3, r2
 800560a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800560c:	f7fd f8e6 	bl	80027dc <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005614:	1a9b      	subs	r3, r3, r2
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	4413      	add	r3, r2
 800561a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800561c:	f7fd f8de 	bl	80027dc <HAL_GetTick>
 8005620:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005622:	4b39      	ldr	r3, [pc, #228]	; (8005708 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	015b      	lsls	r3, r3, #5
 8005628:	0d1b      	lsrs	r3, r3, #20
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	fb02 f303 	mul.w	r3, r2, r3
 8005630:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005632:	e054      	b.n	80056de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563a:	d050      	beq.n	80056de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800563c:	f7fd f8ce 	bl	80027dc <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	429a      	cmp	r2, r3
 800564a:	d902      	bls.n	8005652 <SPI_WaitFlagStateUntilTimeout+0x56>
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d13d      	bne.n	80056ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005660:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800566a:	d111      	bne.n	8005690 <SPI_WaitFlagStateUntilTimeout+0x94>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005674:	d004      	beq.n	8005680 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567e:	d107      	bne.n	8005690 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800568e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005698:	d10f      	bne.n	80056ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e017      	b.n	80056fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	3b01      	subs	r3, #1
 80056dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4013      	ands	r3, r2
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	bf0c      	ite	eq
 80056ee:	2301      	moveq	r3, #1
 80056f0:	2300      	movne	r3, #0
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	79fb      	ldrb	r3, [r7, #7]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d19b      	bne.n	8005634 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3720      	adds	r7, #32
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000010 	.word	0x20000010

0800570c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af02      	add	r7, sp, #8
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2200      	movs	r2, #0
 8005720:	2180      	movs	r1, #128	; 0x80
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff ff6a 	bl	80055fc <SPI_WaitFlagStateUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d007      	beq.n	800573e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005732:	f043 0220 	orr.w	r2, r3, #32
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e000      	b.n	8005740 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e041      	b.n	80057de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f839 	bl	80057e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3304      	adds	r3, #4
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f000 f9b4 	bl	8005af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bc80      	pop	{r7}
 80057f6:	4770      	bx	lr

080057f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b01      	cmp	r3, #1
 800580a:	d001      	beq.n	8005810 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e03a      	b.n	8005886 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0201 	orr.w	r2, r2, #1
 8005826:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a18      	ldr	r2, [pc, #96]	; (8005890 <HAL_TIM_Base_Start_IT+0x98>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00e      	beq.n	8005850 <HAL_TIM_Base_Start_IT+0x58>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800583a:	d009      	beq.n	8005850 <HAL_TIM_Base_Start_IT+0x58>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a14      	ldr	r2, [pc, #80]	; (8005894 <HAL_TIM_Base_Start_IT+0x9c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d004      	beq.n	8005850 <HAL_TIM_Base_Start_IT+0x58>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a13      	ldr	r2, [pc, #76]	; (8005898 <HAL_TIM_Base_Start_IT+0xa0>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d111      	bne.n	8005874 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b06      	cmp	r3, #6
 8005860:	d010      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0201 	orr.w	r2, r2, #1
 8005870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005872:	e007      	b.n	8005884 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	bc80      	pop	{r7}
 800588e:	4770      	bx	lr
 8005890:	40012c00 	.word	0x40012c00
 8005894:	40000400 	.word	0x40000400
 8005898:	40000800 	.word	0x40000800

0800589c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d122      	bne.n	80058f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d11b      	bne.n	80058f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0202 	mvn.w	r2, #2
 80058c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f8ed 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 80058e4:	e005      	b.n	80058f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f8e0 	bl	8005aac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f8ef 	bl	8005ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0304 	and.w	r3, r3, #4
 8005902:	2b04      	cmp	r3, #4
 8005904:	d122      	bne.n	800594c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b04      	cmp	r3, #4
 8005912:	d11b      	bne.n	800594c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0204 	mvn.w	r2, #4
 800591c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2202      	movs	r2, #2
 8005922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f8c3 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 8005938:	e005      	b.n	8005946 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f8b6 	bl	8005aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f8c5 	bl	8005ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b08      	cmp	r3, #8
 8005958:	d122      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f003 0308 	and.w	r3, r3, #8
 8005964:	2b08      	cmp	r3, #8
 8005966:	d11b      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f06f 0208 	mvn.w	r2, #8
 8005970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2204      	movs	r2, #4
 8005976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f899 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 800598c:	e005      	b.n	800599a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f88c 	bl	8005aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f89b 	bl	8005ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0310 	and.w	r3, r3, #16
 80059aa:	2b10      	cmp	r3, #16
 80059ac:	d122      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0310 	and.w	r3, r3, #16
 80059b8:	2b10      	cmp	r3, #16
 80059ba:	d11b      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0210 	mvn.w	r2, #16
 80059c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2208      	movs	r2, #8
 80059ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f86f 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 80059e0:	e005      	b.n	80059ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f862 	bl	8005aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f871 	bl	8005ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d10e      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d107      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0201 	mvn.w	r2, #1
 8005a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fa ff96 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2a:	2b80      	cmp	r3, #128	; 0x80
 8005a2c:	d10e      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a38:	2b80      	cmp	r3, #128	; 0x80
 8005a3a:	d107      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f8bf 	bl	8005bca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a56:	2b40      	cmp	r3, #64	; 0x40
 8005a58:	d10e      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a64:	2b40      	cmp	r3, #64	; 0x40
 8005a66:	d107      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f835 	bl	8005ae2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b20      	cmp	r3, #32
 8005a84:	d10e      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f003 0320 	and.w	r3, r3, #32
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d107      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0220 	mvn.w	r2, #32
 8005a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f88a 	bl	8005bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aa4:	bf00      	nop
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr

08005abe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bc80      	pop	{r7}
 8005ace:	4770      	bx	lr

08005ad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bc80      	pop	{r7}
 8005ae0:	4770      	bx	lr

08005ae2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aea:	bf00      	nop
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr

08005af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a29      	ldr	r2, [pc, #164]	; (8005bac <TIM_Base_SetConfig+0xb8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00b      	beq.n	8005b24 <TIM_Base_SetConfig+0x30>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b12:	d007      	beq.n	8005b24 <TIM_Base_SetConfig+0x30>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a26      	ldr	r2, [pc, #152]	; (8005bb0 <TIM_Base_SetConfig+0xbc>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d003      	beq.n	8005b24 <TIM_Base_SetConfig+0x30>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a25      	ldr	r2, [pc, #148]	; (8005bb4 <TIM_Base_SetConfig+0xc0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d108      	bne.n	8005b36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a1c      	ldr	r2, [pc, #112]	; (8005bac <TIM_Base_SetConfig+0xb8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00b      	beq.n	8005b56 <TIM_Base_SetConfig+0x62>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b44:	d007      	beq.n	8005b56 <TIM_Base_SetConfig+0x62>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a19      	ldr	r2, [pc, #100]	; (8005bb0 <TIM_Base_SetConfig+0xbc>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d003      	beq.n	8005b56 <TIM_Base_SetConfig+0x62>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <TIM_Base_SetConfig+0xc0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d108      	bne.n	8005b68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a07      	ldr	r2, [pc, #28]	; (8005bac <TIM_Base_SetConfig+0xb8>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d103      	bne.n	8005b9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	615a      	str	r2, [r3, #20]
}
 8005ba2:	bf00      	nop
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr
 8005bac:	40012c00 	.word	0x40012c00
 8005bb0:	40000400 	.word	0x40000400
 8005bb4:	40000800 	.word	0x40000800

08005bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bc80      	pop	{r7}
 8005bc8:	4770      	bx	lr

08005bca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bd2:	bf00      	nop
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr

08005bdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e03f      	b.n	8005c6e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d106      	bne.n	8005c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7fc fd4a 	bl	800269c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2224      	movs	r2, #36	; 0x24
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fba9 	bl	8006378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691a      	ldr	r2, [r3, #16]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	695a      	ldr	r2, [r3, #20]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	60f8      	str	r0, [r7, #12]
 8005c7e:	60b9      	str	r1, [r7, #8]
 8005c80:	4613      	mov	r3, r2
 8005c82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b20      	cmp	r3, #32
 8005c8e:	d11d      	bne.n	8005ccc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <HAL_UART_Receive_IT+0x26>
 8005c96:	88fb      	ldrh	r3, [r7, #6]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e016      	b.n	8005cce <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d101      	bne.n	8005cae <HAL_UART_Receive_IT+0x38>
 8005caa:	2302      	movs	r3, #2
 8005cac:	e00f      	b.n	8005cce <HAL_UART_Receive_IT+0x58>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	68b9      	ldr	r1, [r7, #8]
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f9cf 	bl	8006066 <UART_Start_Receive_IT>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	e000      	b.n	8005cce <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ccc:	2302      	movs	r3, #2
  }
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
	...

08005cd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08a      	sub	sp, #40	; 0x28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10d      	bne.n	8005d2a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	f003 0320 	and.w	r3, r3, #32
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d008      	beq.n	8005d2a <HAL_UART_IRQHandler+0x52>
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fa7f 	bl	8006226 <UART_Receive_IT>
      return;
 8005d28:	e17b      	b.n	8006022 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 80b1 	beq.w	8005e94 <HAL_UART_IRQHandler+0x1bc>
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d105      	bne.n	8005d48 <HAL_UART_IRQHandler+0x70>
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 80a6 	beq.w	8005e94 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <HAL_UART_IRQHandler+0x90>
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d60:	f043 0201 	orr.w	r2, r3, #1
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	f003 0304 	and.w	r3, r3, #4
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <HAL_UART_IRQHandler+0xb0>
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d80:	f043 0202 	orr.w	r2, r3, #2
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <HAL_UART_IRQHandler+0xd0>
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d005      	beq.n	8005da8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da0:	f043 0204 	orr.w	r2, r3, #4
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00f      	beq.n	8005dd2 <HAL_UART_IRQHandler+0xfa>
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d104      	bne.n	8005dc6 <HAL_UART_IRQHandler+0xee>
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d005      	beq.n	8005dd2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	f043 0208 	orr.w	r2, r3, #8
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 811e 	beq.w	8006018 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	f003 0320 	and.w	r3, r3, #32
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <HAL_UART_IRQHandler+0x11e>
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fa18 	bl	8006226 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bf14      	ite	ne
 8005e04:	2301      	movne	r3, #1
 8005e06:	2300      	moveq	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d102      	bne.n	8005e1e <HAL_UART_IRQHandler+0x146>
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d031      	beq.n	8005e82 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f95a 	bl	80060d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d023      	beq.n	8005e7a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695a      	ldr	r2, [r3, #20]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e40:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d013      	beq.n	8005e72 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	4a76      	ldr	r2, [pc, #472]	; (8006028 <HAL_UART_IRQHandler+0x350>)
 8005e50:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fc fde4 	bl	8002a24 <HAL_DMA_Abort_IT>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d016      	beq.n	8005e90 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e70:	e00e      	b.n	8005e90 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f8e3 	bl	800603e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e78:	e00a      	b.n	8005e90 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f8df 	bl	800603e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e80:	e006      	b.n	8005e90 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f8db 	bl	800603e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e8e:	e0c3      	b.n	8006018 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e90:	bf00      	nop
    return;
 8005e92:	e0c1      	b.n	8006018 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	f040 80a1 	bne.w	8005fe0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	f003 0310 	and.w	r3, r3, #16
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 809b 	beq.w	8005fe0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 8095 	beq.w	8005fe0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d04e      	beq.n	8005f78 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005ee4:	8a3b      	ldrh	r3, [r7, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 8098 	beq.w	800601c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ef0:	8a3a      	ldrh	r2, [r7, #16]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	f080 8092 	bcs.w	800601c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	8a3a      	ldrh	r2, [r7, #16]
 8005efc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	2b20      	cmp	r3, #32
 8005f06:	d02b      	beq.n	8005f60 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f16:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	695a      	ldr	r2, [r3, #20]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0201 	bic.w	r2, r2, #1
 8005f26:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	695a      	ldr	r2, [r3, #20]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f36:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68da      	ldr	r2, [r3, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0210 	bic.w	r2, r2, #16
 8005f54:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fc fd27 	bl	80029ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f86d 	bl	8006050 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005f76:	e051      	b.n	800601c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d047      	beq.n	8006020 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005f90:	8a7b      	ldrh	r3, [r7, #18]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d044      	beq.n	8006020 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68da      	ldr	r2, [r3, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005fa4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	695a      	ldr	r2, [r3, #20]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0201 	bic.w	r2, r2, #1
 8005fb4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 0210 	bic.w	r2, r2, #16
 8005fd2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fd4:	8a7b      	ldrh	r3, [r7, #18]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f839 	bl	8006050 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005fde:	e01f      	b.n	8006020 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d008      	beq.n	8005ffc <HAL_UART_IRQHandler+0x324>
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f8af 	bl	8006158 <UART_Transmit_IT>
    return;
 8005ffa:	e012      	b.n	8006022 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00d      	beq.n	8006022 <HAL_UART_IRQHandler+0x34a>
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600c:	2b00      	cmp	r3, #0
 800600e:	d008      	beq.n	8006022 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f8f0 	bl	80061f6 <UART_EndTransmit_IT>
    return;
 8006016:	e004      	b.n	8006022 <HAL_UART_IRQHandler+0x34a>
    return;
 8006018:	bf00      	nop
 800601a:	e002      	b.n	8006022 <HAL_UART_IRQHandler+0x34a>
      return;
 800601c:	bf00      	nop
 800601e:	e000      	b.n	8006022 <HAL_UART_IRQHandler+0x34a>
      return;
 8006020:	bf00      	nop
  }
}
 8006022:	3728      	adds	r7, #40	; 0x28
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	08006131 	.word	0x08006131

0800602c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	bc80      	pop	{r7}
 800603c:	4770      	bx	lr

0800603e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	bc80      	pop	{r7}
 800604e:	4770      	bx	lr

08006050 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	bc80      	pop	{r7}
 8006064:	4770      	bx	lr

08006066 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006066:	b480      	push	{r7}
 8006068:	b085      	sub	sp, #20
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	4613      	mov	r3, r2
 8006072:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	88fa      	ldrh	r2, [r7, #6]
 800607e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	88fa      	ldrh	r2, [r7, #6]
 8006084:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2222      	movs	r2, #34	; 0x22
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060aa:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695a      	ldr	r2, [r3, #20]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68da      	ldr	r2, [r3, #12]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0220 	orr.w	r2, r2, #32
 80060ca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bc80      	pop	{r7}
 80060d6:	4770      	bx	lr

080060d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80060ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695a      	ldr	r2, [r3, #20]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0201 	bic.w	r2, r2, #1
 80060fe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006104:	2b01      	cmp	r3, #1
 8006106:	d107      	bne.n	8006118 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0210 	bic.w	r2, r2, #16
 8006116:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr

08006130 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f7ff ff77 	bl	800603e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006150:	bf00      	nop
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b21      	cmp	r3, #33	; 0x21
 800616a:	d13e      	bne.n	80061ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006174:	d114      	bne.n	80061a0 <UART_Transmit_IT+0x48>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d110      	bne.n	80061a0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006192:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	1c9a      	adds	r2, r3, #2
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	621a      	str	r2, [r3, #32]
 800619e:	e008      	b.n	80061b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	1c59      	adds	r1, r3, #1
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6211      	str	r1, [r2, #32]
 80061aa:	781a      	ldrb	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	4619      	mov	r1, r3
 80061c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10f      	bne.n	80061e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	e000      	b.n	80061ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061ea:	2302      	movs	r3, #2
  }
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bc80      	pop	{r7}
 80061f4:	4770      	bx	lr

080061f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b082      	sub	sp, #8
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800620c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7ff ff08 	bl	800602c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b086      	sub	sp, #24
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b22      	cmp	r3, #34	; 0x22
 8006238:	f040 8099 	bne.w	800636e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006244:	d117      	bne.n	8006276 <UART_Receive_IT+0x50>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d113      	bne.n	8006276 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800624e:	2300      	movs	r3, #0
 8006250:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006256:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	b29b      	uxth	r3, r3
 8006260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006264:	b29a      	uxth	r2, r3
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626e:	1c9a      	adds	r2, r3, #2
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	629a      	str	r2, [r3, #40]	; 0x28
 8006274:	e026      	b.n	80062c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800627c:	2300      	movs	r3, #0
 800627e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006288:	d007      	beq.n	800629a <UART_Receive_IT+0x74>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <UART_Receive_IT+0x82>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d106      	bne.n	80062a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	701a      	strb	r2, [r3, #0]
 80062a6:	e008      	b.n	80062ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	4619      	mov	r1, r3
 80062d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d148      	bne.n	800636a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0220 	bic.w	r2, r2, #32
 80062e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68da      	ldr	r2, [r3, #12]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695a      	ldr	r2, [r3, #20]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0201 	bic.w	r2, r2, #1
 8006306:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006314:	2b01      	cmp	r3, #1
 8006316:	d123      	bne.n	8006360 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68da      	ldr	r2, [r3, #12]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0210 	bic.w	r2, r2, #16
 800632c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0310 	and.w	r3, r3, #16
 8006338:	2b10      	cmp	r3, #16
 800633a:	d10a      	bne.n	8006352 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800633c:	2300      	movs	r3, #0
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff fe79 	bl	8006050 <HAL_UARTEx_RxEventCallback>
 800635e:	e002      	b.n	8006366 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7fa f931 	bl	80005c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	e002      	b.n	8006370 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	e000      	b.n	8006370 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800636e:	2302      	movs	r3, #2
  }
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80063b2:	f023 030c 	bic.w	r3, r3, #12
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6812      	ldr	r2, [r2, #0]
 80063ba:	68b9      	ldr	r1, [r7, #8]
 80063bc:	430b      	orrs	r3, r1
 80063be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a2c      	ldr	r2, [pc, #176]	; (800648c <UART_SetConfig+0x114>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d103      	bne.n	80063e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80063e0:	f7fe fe34 	bl	800504c <HAL_RCC_GetPCLK2Freq>
 80063e4:	60f8      	str	r0, [r7, #12]
 80063e6:	e002      	b.n	80063ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80063e8:	f7fe fe1c 	bl	8005024 <HAL_RCC_GetPCLK1Freq>
 80063ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	4613      	mov	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	009a      	lsls	r2, r3, #2
 80063f8:	441a      	add	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	fbb2 f3f3 	udiv	r3, r2, r3
 8006404:	4a22      	ldr	r2, [pc, #136]	; (8006490 <UART_SetConfig+0x118>)
 8006406:	fba2 2303 	umull	r2, r3, r2, r3
 800640a:	095b      	lsrs	r3, r3, #5
 800640c:	0119      	lsls	r1, r3, #4
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	4613      	mov	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	009a      	lsls	r2, r3, #2
 8006418:	441a      	add	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	fbb2 f2f3 	udiv	r2, r2, r3
 8006424:	4b1a      	ldr	r3, [pc, #104]	; (8006490 <UART_SetConfig+0x118>)
 8006426:	fba3 0302 	umull	r0, r3, r3, r2
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	2064      	movs	r0, #100	; 0x64
 800642e:	fb00 f303 	mul.w	r3, r0, r3
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	3332      	adds	r3, #50	; 0x32
 8006438:	4a15      	ldr	r2, [pc, #84]	; (8006490 <UART_SetConfig+0x118>)
 800643a:	fba2 2303 	umull	r2, r3, r2, r3
 800643e:	095b      	lsrs	r3, r3, #5
 8006440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006444:	4419      	add	r1, r3
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	4613      	mov	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	009a      	lsls	r2, r3, #2
 8006450:	441a      	add	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	fbb2 f2f3 	udiv	r2, r2, r3
 800645c:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <UART_SetConfig+0x118>)
 800645e:	fba3 0302 	umull	r0, r3, r3, r2
 8006462:	095b      	lsrs	r3, r3, #5
 8006464:	2064      	movs	r0, #100	; 0x64
 8006466:	fb00 f303 	mul.w	r3, r0, r3
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	011b      	lsls	r3, r3, #4
 800646e:	3332      	adds	r3, #50	; 0x32
 8006470:	4a07      	ldr	r2, [pc, #28]	; (8006490 <UART_SetConfig+0x118>)
 8006472:	fba2 2303 	umull	r2, r3, r2, r3
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	f003 020f 	and.w	r2, r3, #15
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	440a      	add	r2, r1
 8006482:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006484:	bf00      	nop
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40013800 	.word	0x40013800
 8006490:	51eb851f 	.word	0x51eb851f

08006494 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006494:	b084      	sub	sp, #16
 8006496:	b480      	push	{r7}
 8006498:	b083      	sub	sp, #12
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	f107 0014 	add.w	r0, r7, #20
 80064a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bc80      	pop	{r7}
 80064b0:	b004      	add	sp, #16
 80064b2:	4770      	bx	lr

080064b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064c4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80064c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	bc80      	pop	{r7}
 80064de:	4770      	bx	lr

080064e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064e8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80064ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	43db      	mvns	r3, r3
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	4013      	ands	r3, r2
 8006500:	b29a      	uxth	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr

08006514 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	460b      	mov	r3, r1
 800651e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	bc80      	pop	{r7}
 800652a:	4770      	bx	lr

0800652c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800652c:	b084      	sub	sp, #16
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	f107 0014 	add.w	r0, r7, #20
 800653a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	bc80      	pop	{r7}
 8006568:	b004      	add	sp, #16
 800656a:	4770      	bx	lr

0800656c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800656c:	b480      	push	{r7}
 800656e:	b09b      	sub	sp, #108	; 0x6c
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800658e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006592:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	78db      	ldrb	r3, [r3, #3]
 800659a:	2b03      	cmp	r3, #3
 800659c:	d81f      	bhi.n	80065de <USB_ActivateEndpoint+0x72>
 800659e:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <USB_ActivateEndpoint+0x38>)
 80065a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a4:	080065b5 	.word	0x080065b5
 80065a8:	080065d1 	.word	0x080065d1
 80065ac:	080065e7 	.word	0x080065e7
 80065b0:	080065c3 	.word	0x080065c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80065b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80065b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065bc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80065c0:	e012      	b.n	80065e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80065c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80065c6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80065ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80065ce:	e00b      	b.n	80065e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80065d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80065d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065d8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80065dc:	e004      	b.n	80065e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80065e4:	e000      	b.n	80065e8 <USB_ActivateEndpoint+0x7c>
      break;
 80065e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	441a      	add	r2, r3
 80065f2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80065f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006606:	b29b      	uxth	r3, r3
 8006608:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29b      	uxth	r3, r3
 8006618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800661c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006620:	b29a      	uxth	r2, r3
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	b29b      	uxth	r3, r3
 8006628:	4313      	orrs	r3, r2
 800662a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	441a      	add	r2, r3
 8006638:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800663c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800664c:	b29b      	uxth	r3, r3
 800664e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	7b1b      	ldrb	r3, [r3, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	f040 8149 	bne.w	80068ec <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	785b      	ldrb	r3, [r3, #1]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 8084 	beq.w	800676c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800666e:	b29b      	uxth	r3, r3
 8006670:	461a      	mov	r2, r3
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	4413      	add	r3, r2
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	011a      	lsls	r2, r3, #4
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006686:	613b      	str	r3, [r7, #16]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	88db      	ldrh	r3, [r3, #6]
 800668c:	085b      	lsrs	r3, r3, #1
 800668e:	b29b      	uxth	r3, r3
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	b29a      	uxth	r2, r3
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	81fb      	strh	r3, [r7, #14]
 80066a6:	89fb      	ldrh	r3, [r7, #14]
 80066a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d01b      	beq.n	80066e8 <USB_ActivateEndpoint+0x17c>
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c6:	81bb      	strh	r3, [r7, #12]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	441a      	add	r2, r3
 80066d2:	89bb      	ldrh	r3, [r7, #12]
 80066d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	78db      	ldrb	r3, [r3, #3]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d020      	beq.n	8006732 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006706:	813b      	strh	r3, [r7, #8]
 8006708:	893b      	ldrh	r3, [r7, #8]
 800670a:	f083 0320 	eor.w	r3, r3, #32
 800670e:	813b      	strh	r3, [r7, #8]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	441a      	add	r2, r3
 800671a:	893b      	ldrh	r3, [r7, #8]
 800671c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800672c:	b29b      	uxth	r3, r3
 800672e:	8013      	strh	r3, [r2, #0]
 8006730:	e27f      	b.n	8006c32 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	b29b      	uxth	r3, r3
 8006740:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006748:	817b      	strh	r3, [r7, #10]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	441a      	add	r2, r3
 8006754:	897b      	ldrh	r3, [r7, #10]
 8006756:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800675a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800675e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006766:	b29b      	uxth	r3, r3
 8006768:	8013      	strh	r3, [r2, #0]
 800676a:	e262      	b.n	8006c32 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006776:	b29b      	uxth	r3, r3
 8006778:	461a      	mov	r2, r3
 800677a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677c:	4413      	add	r3, r2
 800677e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	011a      	lsls	r2, r3, #4
 8006786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006788:	4413      	add	r3, r2
 800678a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800678e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	88db      	ldrh	r3, [r3, #6]
 8006794:	085b      	lsrs	r3, r3, #1
 8006796:	b29b      	uxth	r3, r3
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	b29a      	uxth	r2, r3
 800679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	627b      	str	r3, [r7, #36]	; 0x24
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	461a      	mov	r2, r3
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	4413      	add	r3, r2
 80067b2:	627b      	str	r3, [r7, #36]	; 0x24
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	011a      	lsls	r2, r3, #4
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	4413      	add	r3, r2
 80067be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067c2:	623b      	str	r3, [r7, #32]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d112      	bne.n	80067f2 <USB_ActivateEndpoint+0x286>
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	801a      	strh	r2, [r3, #0]
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	801a      	strh	r2, [r3, #0]
 80067f0:	e02f      	b.n	8006852 <USB_ActivateEndpoint+0x2e6>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	2b3e      	cmp	r3, #62	; 0x3e
 80067f8:	d813      	bhi.n	8006822 <USB_ActivateEndpoint+0x2b6>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	085b      	lsrs	r3, r3, #1
 8006800:	663b      	str	r3, [r7, #96]	; 0x60
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <USB_ActivateEndpoint+0x2a8>
 800680e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006810:	3301      	adds	r3, #1
 8006812:	663b      	str	r3, [r7, #96]	; 0x60
 8006814:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006816:	b29b      	uxth	r3, r3
 8006818:	029b      	lsls	r3, r3, #10
 800681a:	b29a      	uxth	r2, r3
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	e017      	b.n	8006852 <USB_ActivateEndpoint+0x2e6>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	095b      	lsrs	r3, r3, #5
 8006828:	663b      	str	r3, [r7, #96]	; 0x60
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f003 031f 	and.w	r3, r3, #31
 8006832:	2b00      	cmp	r3, #0
 8006834:	d102      	bne.n	800683c <USB_ActivateEndpoint+0x2d0>
 8006836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006838:	3b01      	subs	r3, #1
 800683a:	663b      	str	r3, [r7, #96]	; 0x60
 800683c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800683e:	b29b      	uxth	r3, r3
 8006840:	029b      	lsls	r3, r3, #10
 8006842:	b29b      	uxth	r3, r3
 8006844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800684c:	b29a      	uxth	r2, r3
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	83fb      	strh	r3, [r7, #30]
 8006860:	8bfb      	ldrh	r3, [r7, #30]
 8006862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01b      	beq.n	80068a2 <USB_ActivateEndpoint+0x336>
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800687c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006880:	83bb      	strh	r3, [r7, #28]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	441a      	add	r2, r3
 800688c:	8bbb      	ldrh	r3, [r7, #28]
 800688e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006896:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800689a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800689e:	b29b      	uxth	r3, r3
 80068a0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b8:	837b      	strh	r3, [r7, #26]
 80068ba:	8b7b      	ldrh	r3, [r7, #26]
 80068bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068c0:	837b      	strh	r3, [r7, #26]
 80068c2:	8b7b      	ldrh	r3, [r7, #26]
 80068c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068c8:	837b      	strh	r3, [r7, #26]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	441a      	add	r2, r3
 80068d4:	8b7b      	ldrh	r3, [r7, #26]
 80068d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	8013      	strh	r3, [r2, #0]
 80068ea:	e1a2      	b.n	8006c32 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006902:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	441a      	add	r2, r3
 8006910:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800691c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006924:	b29b      	uxth	r3, r3
 8006926:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	65bb      	str	r3, [r7, #88]	; 0x58
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006932:	b29b      	uxth	r3, r3
 8006934:	461a      	mov	r2, r3
 8006936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006938:	4413      	add	r3, r2
 800693a:	65bb      	str	r3, [r7, #88]	; 0x58
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	011a      	lsls	r2, r3, #4
 8006942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006944:	4413      	add	r3, r2
 8006946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800694a:	657b      	str	r3, [r7, #84]	; 0x54
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	891b      	ldrh	r3, [r3, #8]
 8006950:	085b      	lsrs	r3, r3, #1
 8006952:	b29b      	uxth	r3, r3
 8006954:	005b      	lsls	r3, r3, #1
 8006956:	b29a      	uxth	r2, r3
 8006958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800695a:	801a      	strh	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	653b      	str	r3, [r7, #80]	; 0x50
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006966:	b29b      	uxth	r3, r3
 8006968:	461a      	mov	r2, r3
 800696a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800696c:	4413      	add	r3, r2
 800696e:	653b      	str	r3, [r7, #80]	; 0x50
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	011a      	lsls	r2, r3, #4
 8006976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006978:	4413      	add	r3, r2
 800697a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800697e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	895b      	ldrh	r3, [r3, #10]
 8006984:	085b      	lsrs	r3, r3, #1
 8006986:	b29b      	uxth	r3, r3
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	b29a      	uxth	r2, r3
 800698c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800698e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f040 8091 	bne.w	8006abc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80069a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80069aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d01b      	beq.n	80069ea <USB_ActivateEndpoint+0x47e>
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	441a      	add	r2, r3
 80069d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80069d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	873b      	strh	r3, [r7, #56]	; 0x38
 80069f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80069fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d01b      	beq.n	8006a3a <USB_ActivateEndpoint+0x4ce>
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a18:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	441a      	add	r2, r3
 8006a24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a50:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006a52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006a54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a58:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006a5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006a5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a60:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	441a      	add	r2, r3
 8006a6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a98:	867b      	strh	r3, [r7, #50]	; 0x32
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	441a      	add	r2, r3
 8006aa4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	8013      	strh	r3, [r2, #0]
 8006aba:	e0ba      	b.n	8006c32 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006acc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d01d      	beq.n	8006b14 <USB_ActivateEndpoint+0x5a8>
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	441a      	add	r2, r3
 8006afc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006b24:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d01d      	beq.n	8006b6c <USB_ActivateEndpoint+0x600>
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b46:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	441a      	add	r2, r3
 8006b54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	78db      	ldrb	r3, [r3, #3]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d024      	beq.n	8006bbe <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006b8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b92:	f083 0320 	eor.w	r3, r3, #32
 8006b96:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	441a      	add	r2, r3
 8006ba4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	8013      	strh	r3, [r2, #0]
 8006bbc:	e01d      	b.n	8006bfa <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	441a      	add	r2, r3
 8006be2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c10:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	441a      	add	r2, r3
 8006c1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006c32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	376c      	adds	r7, #108	; 0x6c
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr

08006c40 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b08d      	sub	sp, #52	; 0x34
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	7b1b      	ldrb	r3, [r3, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f040 808e 	bne.w	8006d70 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	785b      	ldrb	r3, [r3, #1]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d044      	beq.n	8006ce6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	81bb      	strh	r3, [r7, #12]
 8006c6a:	89bb      	ldrh	r3, [r7, #12]
 8006c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d01b      	beq.n	8006cac <USB_DeactivateEndpoint+0x6c>
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8a:	817b      	strh	r3, [r7, #10]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	441a      	add	r2, r3
 8006c96:	897b      	ldrh	r3, [r7, #10]
 8006c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc2:	813b      	strh	r3, [r7, #8]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	441a      	add	r2, r3
 8006cce:	893b      	ldrh	r3, [r7, #8]
 8006cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	8013      	strh	r3, [r2, #0]
 8006ce4:	e192      	b.n	800700c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	827b      	strh	r3, [r7, #18]
 8006cf4:	8a7b      	ldrh	r3, [r7, #18]
 8006cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d01b      	beq.n	8006d36 <USB_DeactivateEndpoint+0xf6>
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d14:	823b      	strh	r3, [r7, #16]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	441a      	add	r2, r3
 8006d20:	8a3b      	ldrh	r3, [r7, #16]
 8006d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4c:	81fb      	strh	r3, [r7, #14]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	441a      	add	r2, r3
 8006d58:	89fb      	ldrh	r3, [r7, #14]
 8006d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	8013      	strh	r3, [r2, #0]
 8006d6e:	e14d      	b.n	800700c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	785b      	ldrb	r3, [r3, #1]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f040 80a5 	bne.w	8006ec4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	843b      	strh	r3, [r7, #32]
 8006d88:	8c3b      	ldrh	r3, [r7, #32]
 8006d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d01b      	beq.n	8006dca <USB_DeactivateEndpoint+0x18a>
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da8:	83fb      	strh	r3, [r7, #30]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	441a      	add	r2, r3
 8006db4:	8bfb      	ldrh	r3, [r7, #30]
 8006db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	83bb      	strh	r3, [r7, #28]
 8006dd8:	8bbb      	ldrh	r3, [r7, #28]
 8006dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d01b      	beq.n	8006e1a <USB_DeactivateEndpoint+0x1da>
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df8:	837b      	strh	r3, [r7, #26]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	441a      	add	r2, r3
 8006e04:	8b7b      	ldrh	r3, [r7, #26]
 8006e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e30:	833b      	strh	r3, [r7, #24]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	441a      	add	r2, r3
 8006e3c:	8b3b      	ldrh	r3, [r7, #24]
 8006e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e68:	82fb      	strh	r3, [r7, #22]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	441a      	add	r2, r3
 8006e74:	8afb      	ldrh	r3, [r7, #22]
 8006e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea0:	82bb      	strh	r3, [r7, #20]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	441a      	add	r2, r3
 8006eac:	8abb      	ldrh	r3, [r7, #20]
 8006eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	8013      	strh	r3, [r2, #0]
 8006ec2:	e0a3      	b.n	800700c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006ed2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d01b      	beq.n	8006f14 <USB_DeactivateEndpoint+0x2d4>
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	881b      	ldrh	r3, [r3, #0]
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	441a      	add	r2, r3
 8006efe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006f22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d01b      	beq.n	8006f64 <USB_DeactivateEndpoint+0x324>
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f42:	853b      	strh	r3, [r7, #40]	; 0x28
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	441a      	add	r2, r3
 8006f4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	441a      	add	r2, r3
 8006f86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fb2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	441a      	add	r2, r3
 8006fbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fea:	847b      	strh	r3, [r7, #34]	; 0x22
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	441a      	add	r2, r3
 8006ff6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007008:	b29b      	uxth	r3, r3
 800700a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3734      	adds	r7, #52	; 0x34
 8007012:	46bd      	mov	sp, r7
 8007014:	bc80      	pop	{r7}
 8007016:	4770      	bx	lr

08007018 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b0cc      	sub	sp, #304	; 0x130
 800701c:	af00      	add	r7, sp, #0
 800701e:	1d3b      	adds	r3, r7, #4
 8007020:	6018      	str	r0, [r3, #0]
 8007022:	463b      	mov	r3, r7
 8007024:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007026:	463b      	mov	r3, r7
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	785b      	ldrb	r3, [r3, #1]
 800702c:	2b01      	cmp	r3, #1
 800702e:	f040 872e 	bne.w	8007e8e <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007032:	463b      	mov	r3, r7
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	699a      	ldr	r2, [r3, #24]
 8007038:	463b      	mov	r3, r7
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	429a      	cmp	r2, r3
 8007040:	d905      	bls.n	800704e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007042:	463b      	mov	r3, r7
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800704c:	e004      	b.n	8007058 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800704e:	463b      	mov	r3, r7
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007058:	463b      	mov	r3, r7
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	7b1b      	ldrb	r3, [r3, #12]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d134      	bne.n	80070cc <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007062:	463b      	mov	r3, r7
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6959      	ldr	r1, [r3, #20]
 8007068:	463b      	mov	r3, r7
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	88da      	ldrh	r2, [r3, #6]
 800706e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007072:	b29b      	uxth	r3, r3
 8007074:	1d38      	adds	r0, r7, #4
 8007076:	6800      	ldr	r0, [r0, #0]
 8007078:	f001 fc03 	bl	8008882 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800707c:	f107 0310 	add.w	r3, r7, #16
 8007080:	1d3a      	adds	r2, r7, #4
 8007082:	6812      	ldr	r2, [r2, #0]
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	1d3b      	adds	r3, r7, #4
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800708e:	b29b      	uxth	r3, r3
 8007090:	4619      	mov	r1, r3
 8007092:	f107 0310 	add.w	r3, r7, #16
 8007096:	f107 0210 	add.w	r2, r7, #16
 800709a:	6812      	ldr	r2, [r2, #0]
 800709c:	440a      	add	r2, r1
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	463b      	mov	r3, r7
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	011a      	lsls	r2, r3, #4
 80070a8:	f107 0310 	add.w	r3, r7, #16
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4413      	add	r3, r2
 80070b0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80070b4:	f107 030c 	add.w	r3, r7, #12
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070be:	b29a      	uxth	r2, r3
 80070c0:	f107 030c 	add.w	r3, r7, #12
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	801a      	strh	r2, [r3, #0]
 80070c8:	f000 beac 	b.w	8007e24 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80070cc:	463b      	mov	r3, r7
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	78db      	ldrb	r3, [r3, #3]
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	f040 838c 	bne.w	80077f0 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80070d8:	463b      	mov	r3, r7
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6a1a      	ldr	r2, [r3, #32]
 80070de:	463b      	mov	r3, r7
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	f240 8330 	bls.w	800774a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80070ea:	1d3b      	adds	r3, r7, #4
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	463b      	mov	r3, r7
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007104:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007108:	1d3b      	adds	r3, r7, #4
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	463b      	mov	r3, r7
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	441a      	add	r2, r3
 8007116:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800711a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800711e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007122:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800712a:	b29b      	uxth	r3, r3
 800712c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800712e:	463b      	mov	r3, r7
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6a1a      	ldr	r2, [r3, #32]
 8007134:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007138:	1ad2      	subs	r2, r2, r3
 800713a:	463b      	mov	r3, r7
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007140:	1d3b      	adds	r3, r7, #4
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	463b      	mov	r3, r7
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	b29b      	uxth	r3, r3
 8007152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 819e 	beq.w	8007498 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800715c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007160:	1d3a      	adds	r2, r7, #4
 8007162:	6812      	ldr	r2, [r2, #0]
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	463b      	mov	r3, r7
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	785b      	ldrb	r3, [r3, #1]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d17a      	bne.n	8007266 <USB_EPStartXfer+0x24e>
 8007170:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007174:	1d3a      	adds	r2, r7, #4
 8007176:	6812      	ldr	r2, [r2, #0]
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	1d3b      	adds	r3, r7, #4
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007182:	b29b      	uxth	r3, r3
 8007184:	4619      	mov	r1, r3
 8007186:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800718a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800718e:	6812      	ldr	r2, [r2, #0]
 8007190:	440a      	add	r2, r1
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	463b      	mov	r3, r7
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	011a      	lsls	r2, r3, #4
 800719c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4413      	add	r3, r2
 80071a4:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80071a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d11a      	bne.n	80071ec <USB_EPStartXfer+0x1d4>
 80071b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	801a      	strh	r2, [r3, #0]
 80071ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	801a      	strh	r2, [r3, #0]
 80071ea:	e062      	b.n	80072b2 <USB_EPStartXfer+0x29a>
 80071ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071f0:	2b3e      	cmp	r3, #62	; 0x3e
 80071f2:	d819      	bhi.n	8007228 <USB_EPStartXfer+0x210>
 80071f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071f8:	085b      	lsrs	r3, r3, #1
 80071fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80071fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d004      	beq.n	8007214 <USB_EPStartXfer+0x1fc>
 800720a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800720e:	3301      	adds	r3, #1
 8007210:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007214:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007218:	b29b      	uxth	r3, r3
 800721a:	029b      	lsls	r3, r3, #10
 800721c:	b29a      	uxth	r2, r3
 800721e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	801a      	strh	r2, [r3, #0]
 8007226:	e044      	b.n	80072b2 <USB_EPStartXfer+0x29a>
 8007228:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800722c:	095b      	lsrs	r3, r3, #5
 800722e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007236:	f003 031f 	and.w	r3, r3, #31
 800723a:	2b00      	cmp	r3, #0
 800723c:	d104      	bne.n	8007248 <USB_EPStartXfer+0x230>
 800723e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007242:	3b01      	subs	r3, #1
 8007244:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007248:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800724c:	b29b      	uxth	r3, r3
 800724e:	029b      	lsls	r3, r3, #10
 8007250:	b29b      	uxth	r3, r3
 8007252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800725a:	b29a      	uxth	r2, r3
 800725c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	801a      	strh	r2, [r3, #0]
 8007264:	e025      	b.n	80072b2 <USB_EPStartXfer+0x29a>
 8007266:	463b      	mov	r3, r7
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	785b      	ldrb	r3, [r3, #1]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d120      	bne.n	80072b2 <USB_EPStartXfer+0x29a>
 8007270:	1d3b      	adds	r3, r7, #4
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007278:	b29b      	uxth	r3, r3
 800727a:	4619      	mov	r1, r3
 800727c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007280:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007284:	6812      	ldr	r2, [r2, #0]
 8007286:	440a      	add	r2, r1
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	463b      	mov	r3, r7
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	011a      	lsls	r2, r3, #4
 8007292:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4413      	add	r3, r2
 800729a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800729e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80072b2:	463b      	mov	r3, r7
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	895b      	ldrh	r3, [r3, #10]
 80072b8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072bc:	463b      	mov	r3, r7
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6959      	ldr	r1, [r3, #20]
 80072c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80072cc:	1d38      	adds	r0, r7, #4
 80072ce:	6800      	ldr	r0, [r0, #0]
 80072d0:	f001 fad7 	bl	8008882 <USB_WritePMA>
            ep->xfer_buff += len;
 80072d4:	463b      	mov	r3, r7
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	695a      	ldr	r2, [r3, #20]
 80072da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072de:	441a      	add	r2, r3
 80072e0:	463b      	mov	r3, r7
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80072e6:	463b      	mov	r3, r7
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6a1a      	ldr	r2, [r3, #32]
 80072ec:	463b      	mov	r3, r7
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d909      	bls.n	800730a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80072f6:	463b      	mov	r3, r7
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6a1a      	ldr	r2, [r3, #32]
 80072fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007300:	1ad2      	subs	r2, r2, r3
 8007302:	463b      	mov	r3, r7
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	621a      	str	r2, [r3, #32]
 8007308:	e008      	b.n	800731c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800730a:	463b      	mov	r3, r7
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007314:	463b      	mov	r3, r7
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2200      	movs	r2, #0
 800731a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800731c:	463b      	mov	r3, r7
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	785b      	ldrb	r3, [r3, #1]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d17a      	bne.n	800741c <USB_EPStartXfer+0x404>
 8007326:	f107 0318 	add.w	r3, r7, #24
 800732a:	1d3a      	adds	r2, r7, #4
 800732c:	6812      	ldr	r2, [r2, #0]
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	1d3b      	adds	r3, r7, #4
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007338:	b29b      	uxth	r3, r3
 800733a:	4619      	mov	r1, r3
 800733c:	f107 0318 	add.w	r3, r7, #24
 8007340:	f107 0218 	add.w	r2, r7, #24
 8007344:	6812      	ldr	r2, [r2, #0]
 8007346:	440a      	add	r2, r1
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	463b      	mov	r3, r7
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	011a      	lsls	r2, r3, #4
 8007352:	f107 0318 	add.w	r3, r7, #24
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4413      	add	r3, r2
 800735a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800735e:	f107 0314 	add.w	r3, r7, #20
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007368:	2b00      	cmp	r3, #0
 800736a:	d11a      	bne.n	80073a2 <USB_EPStartXfer+0x38a>
 800736c:	f107 0314 	add.w	r3, r7, #20
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	b29b      	uxth	r3, r3
 8007376:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800737a:	b29a      	uxth	r2, r3
 800737c:	f107 0314 	add.w	r3, r7, #20
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	801a      	strh	r2, [r3, #0]
 8007384:	f107 0314 	add.w	r3, r7, #20
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007396:	b29a      	uxth	r2, r3
 8007398:	f107 0314 	add.w	r3, r7, #20
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	801a      	strh	r2, [r3, #0]
 80073a0:	e067      	b.n	8007472 <USB_EPStartXfer+0x45a>
 80073a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a6:	2b3e      	cmp	r3, #62	; 0x3e
 80073a8:	d819      	bhi.n	80073de <USB_EPStartXfer+0x3c6>
 80073aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ae:	085b      	lsrs	r3, r3, #1
 80073b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d004      	beq.n	80073ca <USB_EPStartXfer+0x3b2>
 80073c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073c4:	3301      	adds	r3, #1
 80073c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073ca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	029b      	lsls	r3, r3, #10
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	f107 0314 	add.w	r3, r7, #20
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	801a      	strh	r2, [r3, #0]
 80073dc:	e049      	b.n	8007472 <USB_EPStartXfer+0x45a>
 80073de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e2:	095b      	lsrs	r3, r3, #5
 80073e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ec:	f003 031f 	and.w	r3, r3, #31
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d104      	bne.n	80073fe <USB_EPStartXfer+0x3e6>
 80073f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073f8:	3b01      	subs	r3, #1
 80073fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007402:	b29b      	uxth	r3, r3
 8007404:	029b      	lsls	r3, r3, #10
 8007406:	b29b      	uxth	r3, r3
 8007408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800740c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007410:	b29a      	uxth	r2, r3
 8007412:	f107 0314 	add.w	r3, r7, #20
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	801a      	strh	r2, [r3, #0]
 800741a:	e02a      	b.n	8007472 <USB_EPStartXfer+0x45a>
 800741c:	463b      	mov	r3, r7
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	785b      	ldrb	r3, [r3, #1]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d125      	bne.n	8007472 <USB_EPStartXfer+0x45a>
 8007426:	f107 0320 	add.w	r3, r7, #32
 800742a:	1d3a      	adds	r2, r7, #4
 800742c:	6812      	ldr	r2, [r2, #0]
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	1d3b      	adds	r3, r7, #4
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007438:	b29b      	uxth	r3, r3
 800743a:	4619      	mov	r1, r3
 800743c:	f107 0320 	add.w	r3, r7, #32
 8007440:	f107 0220 	add.w	r2, r7, #32
 8007444:	6812      	ldr	r2, [r2, #0]
 8007446:	440a      	add	r2, r1
 8007448:	601a      	str	r2, [r3, #0]
 800744a:	463b      	mov	r3, r7
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	011a      	lsls	r2, r3, #4
 8007452:	f107 0320 	add.w	r3, r7, #32
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4413      	add	r3, r2
 800745a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800745e:	f107 031c 	add.w	r3, r7, #28
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007468:	b29a      	uxth	r2, r3
 800746a:	f107 031c 	add.w	r3, r7, #28
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007472:	463b      	mov	r3, r7
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	891b      	ldrh	r3, [r3, #8]
 8007478:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800747c:	463b      	mov	r3, r7
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6959      	ldr	r1, [r3, #20]
 8007482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007486:	b29b      	uxth	r3, r3
 8007488:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800748c:	1d38      	adds	r0, r7, #4
 800748e:	6800      	ldr	r0, [r0, #0]
 8007490:	f001 f9f7 	bl	8008882 <USB_WritePMA>
 8007494:	f000 bcc6 	b.w	8007e24 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007498:	463b      	mov	r3, r7
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	785b      	ldrb	r3, [r3, #1]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d164      	bne.n	800756c <USB_EPStartXfer+0x554>
 80074a2:	1d3b      	adds	r3, r7, #4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80074a8:	1d3b      	adds	r3, r7, #4
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	461a      	mov	r2, r3
 80074b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074b6:	4413      	add	r3, r2
 80074b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80074ba:	463b      	mov	r3, r7
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	011a      	lsls	r2, r3, #4
 80074c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074c4:	4413      	add	r3, r2
 80074c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074ca:	647b      	str	r3, [r7, #68]	; 0x44
 80074cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d112      	bne.n	80074fa <USB_EPStartXfer+0x4e2>
 80074d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	b29b      	uxth	r3, r3
 80074da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074de:	b29a      	uxth	r2, r3
 80074e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074e2:	801a      	strh	r2, [r3, #0]
 80074e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074f6:	801a      	strh	r2, [r3, #0]
 80074f8:	e057      	b.n	80075aa <USB_EPStartXfer+0x592>
 80074fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007500:	d817      	bhi.n	8007532 <USB_EPStartXfer+0x51a>
 8007502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007506:	085b      	lsrs	r3, r3, #1
 8007508:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800750c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	2b00      	cmp	r3, #0
 8007516:	d004      	beq.n	8007522 <USB_EPStartXfer+0x50a>
 8007518:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800751c:	3301      	adds	r3, #1
 800751e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007522:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007526:	b29b      	uxth	r3, r3
 8007528:	029b      	lsls	r3, r3, #10
 800752a:	b29a      	uxth	r2, r3
 800752c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800752e:	801a      	strh	r2, [r3, #0]
 8007530:	e03b      	b.n	80075aa <USB_EPStartXfer+0x592>
 8007532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007536:	095b      	lsrs	r3, r3, #5
 8007538:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800753c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007540:	f003 031f 	and.w	r3, r3, #31
 8007544:	2b00      	cmp	r3, #0
 8007546:	d104      	bne.n	8007552 <USB_EPStartXfer+0x53a>
 8007548:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800754c:	3b01      	subs	r3, #1
 800754e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007552:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007556:	b29b      	uxth	r3, r3
 8007558:	029b      	lsls	r3, r3, #10
 800755a:	b29b      	uxth	r3, r3
 800755c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007564:	b29a      	uxth	r2, r3
 8007566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007568:	801a      	strh	r2, [r3, #0]
 800756a:	e01e      	b.n	80075aa <USB_EPStartXfer+0x592>
 800756c:	463b      	mov	r3, r7
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	785b      	ldrb	r3, [r3, #1]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d119      	bne.n	80075aa <USB_EPStartXfer+0x592>
 8007576:	1d3b      	adds	r3, r7, #4
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	653b      	str	r3, [r7, #80]	; 0x50
 800757c:	1d3b      	adds	r3, r7, #4
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007584:	b29b      	uxth	r3, r3
 8007586:	461a      	mov	r2, r3
 8007588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800758a:	4413      	add	r3, r2
 800758c:	653b      	str	r3, [r7, #80]	; 0x50
 800758e:	463b      	mov	r3, r7
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	011a      	lsls	r2, r3, #4
 8007596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007598:	4413      	add	r3, r2
 800759a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800759e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80075aa:	463b      	mov	r3, r7
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	891b      	ldrh	r3, [r3, #8]
 80075b0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075b4:	463b      	mov	r3, r7
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6959      	ldr	r1, [r3, #20]
 80075ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075be:	b29b      	uxth	r3, r3
 80075c0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80075c4:	1d38      	adds	r0, r7, #4
 80075c6:	6800      	ldr	r0, [r0, #0]
 80075c8:	f001 f95b 	bl	8008882 <USB_WritePMA>
            ep->xfer_buff += len;
 80075cc:	463b      	mov	r3, r7
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	695a      	ldr	r2, [r3, #20]
 80075d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075d6:	441a      	add	r2, r3
 80075d8:	463b      	mov	r3, r7
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80075de:	463b      	mov	r3, r7
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6a1a      	ldr	r2, [r3, #32]
 80075e4:	463b      	mov	r3, r7
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d909      	bls.n	8007602 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80075ee:	463b      	mov	r3, r7
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6a1a      	ldr	r2, [r3, #32]
 80075f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f8:	1ad2      	subs	r2, r2, r3
 80075fa:	463b      	mov	r3, r7
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	621a      	str	r2, [r3, #32]
 8007600:	e008      	b.n	8007614 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8007602:	463b      	mov	r3, r7
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800760c:	463b      	mov	r3, r7
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2200      	movs	r2, #0
 8007612:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007614:	1d3b      	adds	r3, r7, #4
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	643b      	str	r3, [r7, #64]	; 0x40
 800761a:	463b      	mov	r3, r7
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	785b      	ldrb	r3, [r3, #1]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d164      	bne.n	80076ee <USB_EPStartXfer+0x6d6>
 8007624:	1d3b      	adds	r3, r7, #4
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	63bb      	str	r3, [r7, #56]	; 0x38
 800762a:	1d3b      	adds	r3, r7, #4
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007632:	b29b      	uxth	r3, r3
 8007634:	461a      	mov	r2, r3
 8007636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007638:	4413      	add	r3, r2
 800763a:	63bb      	str	r3, [r7, #56]	; 0x38
 800763c:	463b      	mov	r3, r7
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	011a      	lsls	r2, r3, #4
 8007644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007646:	4413      	add	r3, r2
 8007648:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800764c:	637b      	str	r3, [r7, #52]	; 0x34
 800764e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007652:	2b00      	cmp	r3, #0
 8007654:	d112      	bne.n	800767c <USB_EPStartXfer+0x664>
 8007656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	b29b      	uxth	r3, r3
 800765c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007660:	b29a      	uxth	r2, r3
 8007662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007664:	801a      	strh	r2, [r3, #0]
 8007666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	b29b      	uxth	r3, r3
 800766c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007674:	b29a      	uxth	r2, r3
 8007676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007678:	801a      	strh	r2, [r3, #0]
 800767a:	e054      	b.n	8007726 <USB_EPStartXfer+0x70e>
 800767c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007680:	2b3e      	cmp	r3, #62	; 0x3e
 8007682:	d817      	bhi.n	80076b4 <USB_EPStartXfer+0x69c>
 8007684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007688:	085b      	lsrs	r3, r3, #1
 800768a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800768e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d004      	beq.n	80076a4 <USB_EPStartXfer+0x68c>
 800769a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800769e:	3301      	adds	r3, #1
 80076a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80076a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	029b      	lsls	r3, r3, #10
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b0:	801a      	strh	r2, [r3, #0]
 80076b2:	e038      	b.n	8007726 <USB_EPStartXfer+0x70e>
 80076b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b8:	095b      	lsrs	r3, r3, #5
 80076ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80076be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c2:	f003 031f 	and.w	r3, r3, #31
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d104      	bne.n	80076d4 <USB_EPStartXfer+0x6bc>
 80076ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80076ce:	3b01      	subs	r3, #1
 80076d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80076d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80076d8:	b29b      	uxth	r3, r3
 80076da:	029b      	lsls	r3, r3, #10
 80076dc:	b29b      	uxth	r3, r3
 80076de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ea:	801a      	strh	r2, [r3, #0]
 80076ec:	e01b      	b.n	8007726 <USB_EPStartXfer+0x70e>
 80076ee:	463b      	mov	r3, r7
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	785b      	ldrb	r3, [r3, #1]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d116      	bne.n	8007726 <USB_EPStartXfer+0x70e>
 80076f8:	1d3b      	adds	r3, r7, #4
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007700:	b29b      	uxth	r3, r3
 8007702:	461a      	mov	r2, r3
 8007704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007706:	4413      	add	r3, r2
 8007708:	643b      	str	r3, [r7, #64]	; 0x40
 800770a:	463b      	mov	r3, r7
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	011a      	lsls	r2, r3, #4
 8007712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007714:	4413      	add	r3, r2
 8007716:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800771a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800771c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007720:	b29a      	uxth	r2, r3
 8007722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007724:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007726:	463b      	mov	r3, r7
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	895b      	ldrh	r3, [r3, #10]
 800772c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007730:	463b      	mov	r3, r7
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6959      	ldr	r1, [r3, #20]
 8007736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800773a:	b29b      	uxth	r3, r3
 800773c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007740:	1d38      	adds	r0, r7, #4
 8007742:	6800      	ldr	r0, [r0, #0]
 8007744:	f001 f89d 	bl	8008882 <USB_WritePMA>
 8007748:	e36c      	b.n	8007e24 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800774a:	463b      	mov	r3, r7
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007754:	1d3b      	adds	r3, r7, #4
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	463b      	mov	r3, r7
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b29b      	uxth	r3, r3
 8007766:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800776a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800776e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007772:	1d3b      	adds	r3, r7, #4
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	463b      	mov	r3, r7
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	441a      	add	r2, r3
 8007780:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007794:	b29b      	uxth	r3, r3
 8007796:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007798:	1d3b      	adds	r3, r7, #4
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800779e:	1d3b      	adds	r3, r7, #4
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	461a      	mov	r2, r3
 80077aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077ac:	4413      	add	r3, r2
 80077ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077b0:	463b      	mov	r3, r7
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	011a      	lsls	r2, r3, #4
 80077b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077ba:	4413      	add	r3, r2
 80077bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80077c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80077cc:	463b      	mov	r3, r7
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	891b      	ldrh	r3, [r3, #8]
 80077d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077d6:	463b      	mov	r3, r7
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6959      	ldr	r1, [r3, #20]
 80077dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80077e6:	1d38      	adds	r0, r7, #4
 80077e8:	6800      	ldr	r0, [r0, #0]
 80077ea:	f001 f84a 	bl	8008882 <USB_WritePMA>
 80077ee:	e319      	b.n	8007e24 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80077f0:	1d3b      	adds	r3, r7, #4
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	463b      	mov	r3, r7
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	b29b      	uxth	r3, r3
 8007802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800780e:	1d3b      	adds	r3, r7, #4
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	463b      	mov	r3, r7
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	441a      	add	r2, r3
 800781c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007828:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800782c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007830:	b29b      	uxth	r3, r3
 8007832:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007834:	463b      	mov	r3, r7
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6a1a      	ldr	r2, [r3, #32]
 800783a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800783e:	1ad2      	subs	r2, r2, r3
 8007840:	463b      	mov	r3, r7
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007846:	1d3b      	adds	r3, r7, #4
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	463b      	mov	r3, r7
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	b29b      	uxth	r3, r3
 8007858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 8162 	beq.w	8007b26 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007862:	1d3b      	adds	r3, r7, #4
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800786a:	463b      	mov	r3, r7
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	785b      	ldrb	r3, [r3, #1]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d164      	bne.n	800793e <USB_EPStartXfer+0x926>
 8007874:	1d3b      	adds	r3, r7, #4
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	67bb      	str	r3, [r7, #120]	; 0x78
 800787a:	1d3b      	adds	r3, r7, #4
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007882:	b29b      	uxth	r3, r3
 8007884:	461a      	mov	r2, r3
 8007886:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007888:	4413      	add	r3, r2
 800788a:	67bb      	str	r3, [r7, #120]	; 0x78
 800788c:	463b      	mov	r3, r7
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	011a      	lsls	r2, r3, #4
 8007894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007896:	4413      	add	r3, r2
 8007898:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800789c:	677b      	str	r3, [r7, #116]	; 0x74
 800789e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d112      	bne.n	80078cc <USB_EPStartXfer+0x8b4>
 80078a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078b4:	801a      	strh	r2, [r3, #0]
 80078b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078c8:	801a      	strh	r2, [r3, #0]
 80078ca:	e057      	b.n	800797c <USB_EPStartXfer+0x964>
 80078cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d0:	2b3e      	cmp	r3, #62	; 0x3e
 80078d2:	d817      	bhi.n	8007904 <USB_EPStartXfer+0x8ec>
 80078d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d8:	085b      	lsrs	r3, r3, #1
 80078da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80078de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d004      	beq.n	80078f4 <USB_EPStartXfer+0x8dc>
 80078ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80078ee:	3301      	adds	r3, #1
 80078f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80078f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	029b      	lsls	r3, r3, #10
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007900:	801a      	strh	r2, [r3, #0]
 8007902:	e03b      	b.n	800797c <USB_EPStartXfer+0x964>
 8007904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007908:	095b      	lsrs	r3, r3, #5
 800790a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800790e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007912:	f003 031f 	and.w	r3, r3, #31
 8007916:	2b00      	cmp	r3, #0
 8007918:	d104      	bne.n	8007924 <USB_EPStartXfer+0x90c>
 800791a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800791e:	3b01      	subs	r3, #1
 8007920:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007924:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007928:	b29b      	uxth	r3, r3
 800792a:	029b      	lsls	r3, r3, #10
 800792c:	b29b      	uxth	r3, r3
 800792e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007936:	b29a      	uxth	r2, r3
 8007938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800793a:	801a      	strh	r2, [r3, #0]
 800793c:	e01e      	b.n	800797c <USB_EPStartXfer+0x964>
 800793e:	463b      	mov	r3, r7
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	785b      	ldrb	r3, [r3, #1]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d119      	bne.n	800797c <USB_EPStartXfer+0x964>
 8007948:	1d3b      	adds	r3, r7, #4
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007950:	b29b      	uxth	r3, r3
 8007952:	461a      	mov	r2, r3
 8007954:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007958:	4413      	add	r3, r2
 800795a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800795e:	463b      	mov	r3, r7
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	011a      	lsls	r2, r3, #4
 8007966:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800796a:	4413      	add	r3, r2
 800796c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007970:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007976:	b29a      	uxth	r2, r3
 8007978:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800797a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800797c:	463b      	mov	r3, r7
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	895b      	ldrh	r3, [r3, #10]
 8007982:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007986:	463b      	mov	r3, r7
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	6959      	ldr	r1, [r3, #20]
 800798c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007990:	b29b      	uxth	r3, r3
 8007992:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007996:	1d38      	adds	r0, r7, #4
 8007998:	6800      	ldr	r0, [r0, #0]
 800799a:	f000 ff72 	bl	8008882 <USB_WritePMA>
          ep->xfer_buff += len;
 800799e:	463b      	mov	r3, r7
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	695a      	ldr	r2, [r3, #20]
 80079a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079a8:	441a      	add	r2, r3
 80079aa:	463b      	mov	r3, r7
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80079b0:	463b      	mov	r3, r7
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6a1a      	ldr	r2, [r3, #32]
 80079b6:	463b      	mov	r3, r7
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d909      	bls.n	80079d4 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80079c0:	463b      	mov	r3, r7
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6a1a      	ldr	r2, [r3, #32]
 80079c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ca:	1ad2      	subs	r2, r2, r3
 80079cc:	463b      	mov	r3, r7
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	621a      	str	r2, [r3, #32]
 80079d2:	e008      	b.n	80079e6 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80079d4:	463b      	mov	r3, r7
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80079de:	463b      	mov	r3, r7
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2200      	movs	r2, #0
 80079e4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80079e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 821a 	beq.w	8007e24 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079f0:	463b      	mov	r3, r7
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	785b      	ldrb	r3, [r3, #1]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d164      	bne.n	8007ac4 <USB_EPStartXfer+0xaac>
 80079fa:	1d3b      	adds	r3, r7, #4
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a00:	1d3b      	adds	r3, r7, #4
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a0e:	4413      	add	r3, r2
 8007a10:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a12:	463b      	mov	r3, r7
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	011a      	lsls	r2, r3, #4
 8007a1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a22:	667b      	str	r3, [r7, #100]	; 0x64
 8007a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d112      	bne.n	8007a52 <USB_EPStartXfer+0xa3a>
 8007a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a3a:	801a      	strh	r2, [r3, #0]
 8007a3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a4e:	801a      	strh	r2, [r3, #0]
 8007a50:	e057      	b.n	8007b02 <USB_EPStartXfer+0xaea>
 8007a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a56:	2b3e      	cmp	r3, #62	; 0x3e
 8007a58:	d817      	bhi.n	8007a8a <USB_EPStartXfer+0xa72>
 8007a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a5e:	085b      	lsrs	r3, r3, #1
 8007a60:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d004      	beq.n	8007a7a <USB_EPStartXfer+0xa62>
 8007a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a74:	3301      	adds	r3, #1
 8007a76:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	029b      	lsls	r3, r3, #10
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a86:	801a      	strh	r2, [r3, #0]
 8007a88:	e03b      	b.n	8007b02 <USB_EPStartXfer+0xaea>
 8007a8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a8e:	095b      	lsrs	r3, r3, #5
 8007a90:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a98:	f003 031f 	and.w	r3, r3, #31
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d104      	bne.n	8007aaa <USB_EPStartXfer+0xa92>
 8007aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	029b      	lsls	r3, r3, #10
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ac0:	801a      	strh	r2, [r3, #0]
 8007ac2:	e01e      	b.n	8007b02 <USB_EPStartXfer+0xaea>
 8007ac4:	463b      	mov	r3, r7
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	785b      	ldrb	r3, [r3, #1]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d119      	bne.n	8007b02 <USB_EPStartXfer+0xaea>
 8007ace:	1d3b      	adds	r3, r7, #4
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	673b      	str	r3, [r7, #112]	; 0x70
 8007ad4:	1d3b      	adds	r3, r7, #4
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	461a      	mov	r2, r3
 8007ae0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ae2:	4413      	add	r3, r2
 8007ae4:	673b      	str	r3, [r7, #112]	; 0x70
 8007ae6:	463b      	mov	r3, r7
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	011a      	lsls	r2, r3, #4
 8007aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007af0:	4413      	add	r3, r2
 8007af2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007af6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007b02:	463b      	mov	r3, r7
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	891b      	ldrh	r3, [r3, #8]
 8007b08:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b0c:	463b      	mov	r3, r7
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6959      	ldr	r1, [r3, #20]
 8007b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b1c:	1d38      	adds	r0, r7, #4
 8007b1e:	6800      	ldr	r0, [r0, #0]
 8007b20:	f000 feaf 	bl	8008882 <USB_WritePMA>
 8007b24:	e17e      	b.n	8007e24 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b26:	463b      	mov	r3, r7
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	785b      	ldrb	r3, [r3, #1]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d16f      	bne.n	8007c10 <USB_EPStartXfer+0xbf8>
 8007b30:	1d3b      	adds	r3, r7, #4
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b38:	1d3b      	adds	r3, r7, #4
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	461a      	mov	r2, r3
 8007b44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b48:	4413      	add	r3, r2
 8007b4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b4e:	463b      	mov	r3, r7
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	011a      	lsls	r2, r3, #4
 8007b56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d116      	bne.n	8007b9a <USB_EPStartXfer+0xb82>
 8007b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b7e:	801a      	strh	r2, [r3, #0]
 8007b80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b96:	801a      	strh	r2, [r3, #0]
 8007b98:	e05f      	b.n	8007c5a <USB_EPStartXfer+0xc42>
 8007b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b9e:	2b3e      	cmp	r3, #62	; 0x3e
 8007ba0:	d818      	bhi.n	8007bd4 <USB_EPStartXfer+0xbbc>
 8007ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba6:	085b      	lsrs	r3, r3, #1
 8007ba8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bb0:	f003 0301 	and.w	r3, r3, #1
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d004      	beq.n	8007bc2 <USB_EPStartXfer+0xbaa>
 8007bb8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007bc2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	029b      	lsls	r3, r3, #10
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bd0:	801a      	strh	r2, [r3, #0]
 8007bd2:	e042      	b.n	8007c5a <USB_EPStartXfer+0xc42>
 8007bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd8:	095b      	lsrs	r3, r3, #5
 8007bda:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007be2:	f003 031f 	and.w	r3, r3, #31
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d104      	bne.n	8007bf4 <USB_EPStartXfer+0xbdc>
 8007bea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007bf4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	029b      	lsls	r3, r3, #10
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c0c:	801a      	strh	r2, [r3, #0]
 8007c0e:	e024      	b.n	8007c5a <USB_EPStartXfer+0xc42>
 8007c10:	463b      	mov	r3, r7
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	785b      	ldrb	r3, [r3, #1]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d11f      	bne.n	8007c5a <USB_EPStartXfer+0xc42>
 8007c1a:	1d3b      	adds	r3, r7, #4
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c22:	1d3b      	adds	r3, r7, #4
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c32:	4413      	add	r3, r2
 8007c34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c38:	463b      	mov	r3, r7
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	011a      	lsls	r2, r3, #4
 8007c40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c44:	4413      	add	r3, r2
 8007c46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007c5a:	463b      	mov	r3, r7
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	891b      	ldrh	r3, [r3, #8]
 8007c60:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c64:	463b      	mov	r3, r7
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6959      	ldr	r1, [r3, #20]
 8007c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c74:	1d38      	adds	r0, r7, #4
 8007c76:	6800      	ldr	r0, [r0, #0]
 8007c78:	f000 fe03 	bl	8008882 <USB_WritePMA>
          ep->xfer_buff += len;
 8007c7c:	463b      	mov	r3, r7
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	695a      	ldr	r2, [r3, #20]
 8007c82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c86:	441a      	add	r2, r3
 8007c88:	463b      	mov	r3, r7
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007c8e:	463b      	mov	r3, r7
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6a1a      	ldr	r2, [r3, #32]
 8007c94:	463b      	mov	r3, r7
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d909      	bls.n	8007cb2 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8007c9e:	463b      	mov	r3, r7
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	6a1a      	ldr	r2, [r3, #32]
 8007ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca8:	1ad2      	subs	r2, r2, r3
 8007caa:	463b      	mov	r3, r7
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	621a      	str	r2, [r3, #32]
 8007cb0:	e008      	b.n	8007cc4 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8007cb2:	463b      	mov	r3, r7
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007cbc:	463b      	mov	r3, r7
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 80ab 	beq.w	8007e24 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007cce:	1d3b      	adds	r3, r7, #4
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007cd6:	463b      	mov	r3, r7
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	785b      	ldrb	r3, [r3, #1]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d16f      	bne.n	8007dc0 <USB_EPStartXfer+0xda8>
 8007ce0:	1d3b      	adds	r3, r7, #4
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ce8:	1d3b      	adds	r3, r7, #4
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007cfe:	463b      	mov	r3, r7
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	011a      	lsls	r2, r3, #4
 8007d06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d116      	bne.n	8007d4a <USB_EPStartXfer+0xd32>
 8007d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d20:	881b      	ldrh	r3, [r3, #0]
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d2e:	801a      	strh	r2, [r3, #0]
 8007d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d34:	881b      	ldrh	r3, [r3, #0]
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d46:	801a      	strh	r2, [r3, #0]
 8007d48:	e05b      	b.n	8007e02 <USB_EPStartXfer+0xdea>
 8007d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d4e:	2b3e      	cmp	r3, #62	; 0x3e
 8007d50:	d818      	bhi.n	8007d84 <USB_EPStartXfer+0xd6c>
 8007d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d56:	085b      	lsrs	r3, r3, #1
 8007d58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007d5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d004      	beq.n	8007d72 <USB_EPStartXfer+0xd5a>
 8007d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	029b      	lsls	r3, r3, #10
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d80:	801a      	strh	r2, [r3, #0]
 8007d82:	e03e      	b.n	8007e02 <USB_EPStartXfer+0xdea>
 8007d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d88:	095b      	lsrs	r3, r3, #5
 8007d8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d92:	f003 031f 	and.w	r3, r3, #31
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d104      	bne.n	8007da4 <USB_EPStartXfer+0xd8c>
 8007d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	029b      	lsls	r3, r3, #10
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007dbc:	801a      	strh	r2, [r3, #0]
 8007dbe:	e020      	b.n	8007e02 <USB_EPStartXfer+0xdea>
 8007dc0:	463b      	mov	r3, r7
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	785b      	ldrb	r3, [r3, #1]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d11b      	bne.n	8007e02 <USB_EPStartXfer+0xdea>
 8007dca:	1d3b      	adds	r3, r7, #4
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dda:	4413      	add	r3, r2
 8007ddc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007de0:	463b      	mov	r3, r7
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	011a      	lsls	r2, r3, #4
 8007de8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dec:	4413      	add	r3, r2
 8007dee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007df2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e02:	463b      	mov	r3, r7
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	895b      	ldrh	r3, [r3, #10]
 8007e08:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e0c:	463b      	mov	r3, r7
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6959      	ldr	r1, [r3, #20]
 8007e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e1c:	1d38      	adds	r0, r7, #4
 8007e1e:	6800      	ldr	r0, [r0, #0]
 8007e20:	f000 fd2f 	bl	8008882 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007e24:	1d3b      	adds	r3, r7, #4
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	463b      	mov	r3, r7
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4413      	add	r3, r2
 8007e32:	881b      	ldrh	r3, [r3, #0]
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	f107 020a 	add.w	r2, r7, #10
 8007e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e42:	8013      	strh	r3, [r2, #0]
 8007e44:	f107 030a 	add.w	r3, r7, #10
 8007e48:	f107 020a 	add.w	r2, r7, #10
 8007e4c:	8812      	ldrh	r2, [r2, #0]
 8007e4e:	f082 0210 	eor.w	r2, r2, #16
 8007e52:	801a      	strh	r2, [r3, #0]
 8007e54:	f107 030a 	add.w	r3, r7, #10
 8007e58:	f107 020a 	add.w	r2, r7, #10
 8007e5c:	8812      	ldrh	r2, [r2, #0]
 8007e5e:	f082 0220 	eor.w	r2, r2, #32
 8007e62:	801a      	strh	r2, [r3, #0]
 8007e64:	1d3b      	adds	r3, r7, #4
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	463b      	mov	r3, r7
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	441a      	add	r2, r3
 8007e72:	f107 030a 	add.w	r3, r7, #10
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	8013      	strh	r3, [r2, #0]
 8007e8c:	e3b5      	b.n	80085fa <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007e8e:	463b      	mov	r3, r7
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	7b1b      	ldrb	r3, [r3, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f040 8090 	bne.w	8007fba <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007e9a:	463b      	mov	r3, r7
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	699a      	ldr	r2, [r3, #24]
 8007ea0:	463b      	mov	r3, r7
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d90e      	bls.n	8007ec8 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8007eaa:	463b      	mov	r3, r7
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007eb4:	463b      	mov	r3, r7
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	699a      	ldr	r2, [r3, #24]
 8007eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ebe:	1ad2      	subs	r2, r2, r3
 8007ec0:	463b      	mov	r3, r7
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	619a      	str	r2, [r3, #24]
 8007ec6:	e008      	b.n	8007eda <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8007ec8:	463b      	mov	r3, r7
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007ed2:	463b      	mov	r3, r7
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007eda:	1d3b      	adds	r3, r7, #4
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ee2:	1d3b      	adds	r3, r7, #4
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	461a      	mov	r2, r3
 8007eee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ef8:	463b      	mov	r3, r7
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	011a      	lsls	r2, r3, #4
 8007f00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007f04:	4413      	add	r3, r2
 8007f06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d116      	bne.n	8007f44 <USB_EPStartXfer+0xf2c>
 8007f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f28:	801a      	strh	r2, [r3, #0]
 8007f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f40:	801a      	strh	r2, [r3, #0]
 8007f42:	e32c      	b.n	800859e <USB_EPStartXfer+0x1586>
 8007f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f48:	2b3e      	cmp	r3, #62	; 0x3e
 8007f4a:	d818      	bhi.n	8007f7e <USB_EPStartXfer+0xf66>
 8007f4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f50:	085b      	lsrs	r3, r3, #1
 8007f52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d004      	beq.n	8007f6c <USB_EPStartXfer+0xf54>
 8007f62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f66:	3301      	adds	r3, #1
 8007f68:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007f6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	029b      	lsls	r3, r3, #10
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f7a:	801a      	strh	r2, [r3, #0]
 8007f7c:	e30f      	b.n	800859e <USB_EPStartXfer+0x1586>
 8007f7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f82:	095b      	lsrs	r3, r3, #5
 8007f84:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f8c:	f003 031f 	and.w	r3, r3, #31
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d104      	bne.n	8007f9e <USB_EPStartXfer+0xf86>
 8007f94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007f9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	029b      	lsls	r3, r3, #10
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fb6:	801a      	strh	r2, [r3, #0]
 8007fb8:	e2f1      	b.n	800859e <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007fba:	463b      	mov	r3, r7
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	78db      	ldrb	r3, [r3, #3]
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	f040 818f 	bne.w	80082e4 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007fc6:	463b      	mov	r3, r7
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	785b      	ldrb	r3, [r3, #1]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d175      	bne.n	80080bc <USB_EPStartXfer+0x10a4>
 8007fd0:	1d3b      	adds	r3, r7, #4
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007fd8:	1d3b      	adds	r3, r7, #4
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007fe8:	4413      	add	r3, r2
 8007fea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007fee:	463b      	mov	r3, r7
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	011a      	lsls	r2, r3, #4
 8007ff6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008000:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008004:	463b      	mov	r3, r7
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d116      	bne.n	800803c <USB_EPStartXfer+0x1024>
 800800e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	b29b      	uxth	r3, r3
 8008016:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800801a:	b29a      	uxth	r2, r3
 800801c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008020:	801a      	strh	r2, [r3, #0]
 8008022:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008026:	881b      	ldrh	r3, [r3, #0]
 8008028:	b29b      	uxth	r3, r3
 800802a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800802e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008032:	b29a      	uxth	r2, r3
 8008034:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008038:	801a      	strh	r2, [r3, #0]
 800803a:	e065      	b.n	8008108 <USB_EPStartXfer+0x10f0>
 800803c:	463b      	mov	r3, r7
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	2b3e      	cmp	r3, #62	; 0x3e
 8008044:	d81a      	bhi.n	800807c <USB_EPStartXfer+0x1064>
 8008046:	463b      	mov	r3, r7
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	085b      	lsrs	r3, r3, #1
 800804e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008052:	463b      	mov	r3, r7
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	2b00      	cmp	r3, #0
 800805e:	d004      	beq.n	800806a <USB_EPStartXfer+0x1052>
 8008060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008064:	3301      	adds	r3, #1
 8008066:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800806a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800806e:	b29b      	uxth	r3, r3
 8008070:	029b      	lsls	r3, r3, #10
 8008072:	b29a      	uxth	r2, r3
 8008074:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008078:	801a      	strh	r2, [r3, #0]
 800807a:	e045      	b.n	8008108 <USB_EPStartXfer+0x10f0>
 800807c:	463b      	mov	r3, r7
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	095b      	lsrs	r3, r3, #5
 8008084:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008088:	463b      	mov	r3, r7
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	f003 031f 	and.w	r3, r3, #31
 8008092:	2b00      	cmp	r3, #0
 8008094:	d104      	bne.n	80080a0 <USB_EPStartXfer+0x1088>
 8008096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800809a:	3b01      	subs	r3, #1
 800809c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80080a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	029b      	lsls	r3, r3, #10
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080b8:	801a      	strh	r2, [r3, #0]
 80080ba:	e025      	b.n	8008108 <USB_EPStartXfer+0x10f0>
 80080bc:	463b      	mov	r3, r7
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	785b      	ldrb	r3, [r3, #1]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d120      	bne.n	8008108 <USB_EPStartXfer+0x10f0>
 80080c6:	1d3b      	adds	r3, r7, #4
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80080ce:	1d3b      	adds	r3, r7, #4
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	461a      	mov	r2, r3
 80080da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080de:	4413      	add	r3, r2
 80080e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80080e4:	463b      	mov	r3, r7
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	011a      	lsls	r2, r3, #4
 80080ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080f0:	4413      	add	r3, r2
 80080f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080fa:	463b      	mov	r3, r7
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	b29a      	uxth	r2, r3
 8008102:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008106:	801a      	strh	r2, [r3, #0]
 8008108:	1d3b      	adds	r3, r7, #4
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008110:	463b      	mov	r3, r7
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	785b      	ldrb	r3, [r3, #1]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d175      	bne.n	8008206 <USB_EPStartXfer+0x11ee>
 800811a:	1d3b      	adds	r3, r7, #4
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008122:	1d3b      	adds	r3, r7, #4
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800812a:	b29b      	uxth	r3, r3
 800812c:	461a      	mov	r2, r3
 800812e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008132:	4413      	add	r3, r2
 8008134:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008138:	463b      	mov	r3, r7
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	011a      	lsls	r2, r3, #4
 8008140:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008144:	4413      	add	r3, r2
 8008146:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800814a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800814e:	463b      	mov	r3, r7
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d116      	bne.n	8008186 <USB_EPStartXfer+0x116e>
 8008158:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	b29b      	uxth	r3, r3
 8008160:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008164:	b29a      	uxth	r2, r3
 8008166:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800816a:	801a      	strh	r2, [r3, #0]
 800816c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	b29b      	uxth	r3, r3
 8008174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800817c:	b29a      	uxth	r2, r3
 800817e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008182:	801a      	strh	r2, [r3, #0]
 8008184:	e061      	b.n	800824a <USB_EPStartXfer+0x1232>
 8008186:	463b      	mov	r3, r7
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	2b3e      	cmp	r3, #62	; 0x3e
 800818e:	d81a      	bhi.n	80081c6 <USB_EPStartXfer+0x11ae>
 8008190:	463b      	mov	r3, r7
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	085b      	lsrs	r3, r3, #1
 8008198:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800819c:	463b      	mov	r3, r7
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d004      	beq.n	80081b4 <USB_EPStartXfer+0x119c>
 80081aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80081ae:	3301      	adds	r3, #1
 80081b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80081b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	029b      	lsls	r3, r3, #10
 80081bc:	b29a      	uxth	r2, r3
 80081be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081c2:	801a      	strh	r2, [r3, #0]
 80081c4:	e041      	b.n	800824a <USB_EPStartXfer+0x1232>
 80081c6:	463b      	mov	r3, r7
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	095b      	lsrs	r3, r3, #5
 80081ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80081d2:	463b      	mov	r3, r7
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	f003 031f 	and.w	r3, r3, #31
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d104      	bne.n	80081ea <USB_EPStartXfer+0x11d2>
 80081e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80081e4:	3b01      	subs	r3, #1
 80081e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80081ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	029b      	lsls	r3, r3, #10
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008202:	801a      	strh	r2, [r3, #0]
 8008204:	e021      	b.n	800824a <USB_EPStartXfer+0x1232>
 8008206:	463b      	mov	r3, r7
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	785b      	ldrb	r3, [r3, #1]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d11c      	bne.n	800824a <USB_EPStartXfer+0x1232>
 8008210:	1d3b      	adds	r3, r7, #4
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008218:	b29b      	uxth	r3, r3
 800821a:	461a      	mov	r2, r3
 800821c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008220:	4413      	add	r3, r2
 8008222:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008226:	463b      	mov	r3, r7
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	011a      	lsls	r2, r3, #4
 800822e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008232:	4413      	add	r3, r2
 8008234:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008238:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800823c:	463b      	mov	r3, r7
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	b29a      	uxth	r2, r3
 8008244:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008248:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800824a:	463b      	mov	r3, r7
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 81a4 	beq.w	800859e <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008256:	1d3b      	adds	r3, r7, #4
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	463b      	mov	r3, r7
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800826a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800826e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d005      	beq.n	8008282 <USB_EPStartXfer+0x126a>
 8008276:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800827a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10d      	bne.n	800829e <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008282:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800828a:	2b00      	cmp	r3, #0
 800828c:	f040 8187 	bne.w	800859e <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008290:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008298:	2b00      	cmp	r3, #0
 800829a:	f040 8180 	bne.w	800859e <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800829e:	1d3b      	adds	r3, r7, #4
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	463b      	mov	r3, r7
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082b8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80082bc:	1d3b      	adds	r3, r7, #4
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	463b      	mov	r3, r7
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	441a      	add	r2, r3
 80082ca:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80082ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082de:	b29b      	uxth	r3, r3
 80082e0:	8013      	strh	r3, [r2, #0]
 80082e2:	e15c      	b.n	800859e <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80082e4:	463b      	mov	r3, r7
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	78db      	ldrb	r3, [r3, #3]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	f040 8155 	bne.w	800859a <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80082f0:	463b      	mov	r3, r7
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	699a      	ldr	r2, [r3, #24]
 80082f6:	463b      	mov	r3, r7
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d90e      	bls.n	800831e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8008300:	463b      	mov	r3, r7
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800830a:	463b      	mov	r3, r7
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	699a      	ldr	r2, [r3, #24]
 8008310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008314:	1ad2      	subs	r2, r2, r3
 8008316:	463b      	mov	r3, r7
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	619a      	str	r2, [r3, #24]
 800831c:	e008      	b.n	8008330 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800831e:	463b      	mov	r3, r7
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008328:	463b      	mov	r3, r7
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2200      	movs	r2, #0
 800832e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008330:	463b      	mov	r3, r7
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	785b      	ldrb	r3, [r3, #1]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d16f      	bne.n	800841a <USB_EPStartXfer+0x1402>
 800833a:	1d3b      	adds	r3, r7, #4
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008342:	1d3b      	adds	r3, r7, #4
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800834a:	b29b      	uxth	r3, r3
 800834c:	461a      	mov	r2, r3
 800834e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008352:	4413      	add	r3, r2
 8008354:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008358:	463b      	mov	r3, r7
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	011a      	lsls	r2, r3, #4
 8008360:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008364:	4413      	add	r3, r2
 8008366:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800836a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800836e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008372:	2b00      	cmp	r3, #0
 8008374:	d116      	bne.n	80083a4 <USB_EPStartXfer+0x138c>
 8008376:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800837a:	881b      	ldrh	r3, [r3, #0]
 800837c:	b29b      	uxth	r3, r3
 800837e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008382:	b29a      	uxth	r2, r3
 8008384:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008388:	801a      	strh	r2, [r3, #0]
 800838a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800838e:	881b      	ldrh	r3, [r3, #0]
 8008390:	b29b      	uxth	r3, r3
 8008392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800839a:	b29a      	uxth	r2, r3
 800839c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083a0:	801a      	strh	r2, [r3, #0]
 80083a2:	e05f      	b.n	8008464 <USB_EPStartXfer+0x144c>
 80083a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083a8:	2b3e      	cmp	r3, #62	; 0x3e
 80083aa:	d818      	bhi.n	80083de <USB_EPStartXfer+0x13c6>
 80083ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083b0:	085b      	lsrs	r3, r3, #1
 80083b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80083b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d004      	beq.n	80083cc <USB_EPStartXfer+0x13b4>
 80083c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083c6:	3301      	adds	r3, #1
 80083c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80083cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	029b      	lsls	r3, r3, #10
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083da:	801a      	strh	r2, [r3, #0]
 80083dc:	e042      	b.n	8008464 <USB_EPStartXfer+0x144c>
 80083de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083e2:	095b      	lsrs	r3, r3, #5
 80083e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80083e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083ec:	f003 031f 	and.w	r3, r3, #31
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d104      	bne.n	80083fe <USB_EPStartXfer+0x13e6>
 80083f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083f8:	3b01      	subs	r3, #1
 80083fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80083fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008402:	b29b      	uxth	r3, r3
 8008404:	029b      	lsls	r3, r3, #10
 8008406:	b29b      	uxth	r3, r3
 8008408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800840c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008410:	b29a      	uxth	r2, r3
 8008412:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008416:	801a      	strh	r2, [r3, #0]
 8008418:	e024      	b.n	8008464 <USB_EPStartXfer+0x144c>
 800841a:	463b      	mov	r3, r7
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	785b      	ldrb	r3, [r3, #1]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d11f      	bne.n	8008464 <USB_EPStartXfer+0x144c>
 8008424:	1d3b      	adds	r3, r7, #4
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800842c:	1d3b      	adds	r3, r7, #4
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008434:	b29b      	uxth	r3, r3
 8008436:	461a      	mov	r2, r3
 8008438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800843c:	4413      	add	r3, r2
 800843e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008442:	463b      	mov	r3, r7
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	011a      	lsls	r2, r3, #4
 800844a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800844e:	4413      	add	r3, r2
 8008450:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008454:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800845c:	b29a      	uxth	r2, r3
 800845e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008462:	801a      	strh	r2, [r3, #0]
 8008464:	1d3b      	adds	r3, r7, #4
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800846c:	463b      	mov	r3, r7
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	785b      	ldrb	r3, [r3, #1]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d16f      	bne.n	8008556 <USB_EPStartXfer+0x153e>
 8008476:	1d3b      	adds	r3, r7, #4
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800847e:	1d3b      	adds	r3, r7, #4
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008486:	b29b      	uxth	r3, r3
 8008488:	461a      	mov	r2, r3
 800848a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800848e:	4413      	add	r3, r2
 8008490:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008494:	463b      	mov	r3, r7
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	011a      	lsls	r2, r3, #4
 800849c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084a0:	4413      	add	r3, r2
 80084a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80084aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d116      	bne.n	80084e0 <USB_EPStartXfer+0x14c8>
 80084b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084b6:	881b      	ldrh	r3, [r3, #0]
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084be:	b29a      	uxth	r2, r3
 80084c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084c4:	801a      	strh	r2, [r3, #0]
 80084c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084dc:	801a      	strh	r2, [r3, #0]
 80084de:	e05e      	b.n	800859e <USB_EPStartXfer+0x1586>
 80084e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084e4:	2b3e      	cmp	r3, #62	; 0x3e
 80084e6:	d818      	bhi.n	800851a <USB_EPStartXfer+0x1502>
 80084e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ec:	085b      	lsrs	r3, r3, #1
 80084ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80084f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d004      	beq.n	8008508 <USB_EPStartXfer+0x14f0>
 80084fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008502:	3301      	adds	r3, #1
 8008504:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008508:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800850c:	b29b      	uxth	r3, r3
 800850e:	029b      	lsls	r3, r3, #10
 8008510:	b29a      	uxth	r2, r3
 8008512:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008516:	801a      	strh	r2, [r3, #0]
 8008518:	e041      	b.n	800859e <USB_EPStartXfer+0x1586>
 800851a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800851e:	095b      	lsrs	r3, r3, #5
 8008520:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008528:	f003 031f 	and.w	r3, r3, #31
 800852c:	2b00      	cmp	r3, #0
 800852e:	d104      	bne.n	800853a <USB_EPStartXfer+0x1522>
 8008530:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008534:	3b01      	subs	r3, #1
 8008536:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800853a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800853e:	b29b      	uxth	r3, r3
 8008540:	029b      	lsls	r3, r3, #10
 8008542:	b29b      	uxth	r3, r3
 8008544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800854c:	b29a      	uxth	r2, r3
 800854e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008552:	801a      	strh	r2, [r3, #0]
 8008554:	e023      	b.n	800859e <USB_EPStartXfer+0x1586>
 8008556:	463b      	mov	r3, r7
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	785b      	ldrb	r3, [r3, #1]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d11e      	bne.n	800859e <USB_EPStartXfer+0x1586>
 8008560:	1d3b      	adds	r3, r7, #4
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008568:	b29b      	uxth	r3, r3
 800856a:	461a      	mov	r2, r3
 800856c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008570:	4413      	add	r3, r2
 8008572:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008576:	463b      	mov	r3, r7
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	011a      	lsls	r2, r3, #4
 800857e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008582:	4413      	add	r3, r2
 8008584:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008588:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800858c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008590:	b29a      	uxth	r2, r3
 8008592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008596:	801a      	strh	r2, [r3, #0]
 8008598:	e001      	b.n	800859e <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e02e      	b.n	80085fc <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800859e:	1d3b      	adds	r3, r7, #4
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	463b      	mov	r3, r7
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80085bc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80085c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80085c4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80085c8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80085cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80085d0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80085d4:	1d3b      	adds	r3, r7, #4
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	463b      	mov	r3, r7
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	441a      	add	r2, r3
 80085e2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80085e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008606:	b480      	push	{r7}
 8008608:	b085      	sub	sp, #20
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	785b      	ldrb	r3, [r3, #1]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d020      	beq.n	800865a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	881b      	ldrh	r3, [r3, #0]
 8008624:	b29b      	uxth	r3, r3
 8008626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800862a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800862e:	81bb      	strh	r3, [r7, #12]
 8008630:	89bb      	ldrh	r3, [r7, #12]
 8008632:	f083 0310 	eor.w	r3, r3, #16
 8008636:	81bb      	strh	r3, [r7, #12]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	441a      	add	r2, r3
 8008642:	89bb      	ldrh	r3, [r7, #12]
 8008644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800864c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008654:	b29b      	uxth	r3, r3
 8008656:	8013      	strh	r3, [r2, #0]
 8008658:	e01f      	b.n	800869a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	881b      	ldrh	r3, [r3, #0]
 8008666:	b29b      	uxth	r3, r3
 8008668:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800866c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008670:	81fb      	strh	r3, [r7, #14]
 8008672:	89fb      	ldrh	r3, [r7, #14]
 8008674:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008678:	81fb      	strh	r3, [r7, #14]
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	441a      	add	r2, r3
 8008684:	89fb      	ldrh	r3, [r7, #14]
 8008686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800868a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800868e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008696:	b29b      	uxth	r3, r3
 8008698:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bc80      	pop	{r7}
 80086a4:	4770      	bx	lr

080086a6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b087      	sub	sp, #28
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	7b1b      	ldrb	r3, [r3, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f040 809d 	bne.w	80087f4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	785b      	ldrb	r3, [r3, #1]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d04c      	beq.n	800875c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	823b      	strh	r3, [r7, #16]
 80086d0:	8a3b      	ldrh	r3, [r7, #16]
 80086d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d01b      	beq.n	8008712 <USB_EPClearStall+0x6c>
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	881b      	ldrh	r3, [r3, #0]
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f0:	81fb      	strh	r3, [r7, #14]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	441a      	add	r2, r3
 80086fc:	89fb      	ldrh	r3, [r7, #14]
 80086fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800870a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800870e:	b29b      	uxth	r3, r3
 8008710:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	78db      	ldrb	r3, [r3, #3]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d06c      	beq.n	80087f4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	881b      	ldrh	r3, [r3, #0]
 8008726:	b29b      	uxth	r3, r3
 8008728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800872c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008730:	81bb      	strh	r3, [r7, #12]
 8008732:	89bb      	ldrh	r3, [r7, #12]
 8008734:	f083 0320 	eor.w	r3, r3, #32
 8008738:	81bb      	strh	r3, [r7, #12]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	441a      	add	r2, r3
 8008744:	89bb      	ldrh	r3, [r7, #12]
 8008746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800874a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800874e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008756:	b29b      	uxth	r3, r3
 8008758:	8013      	strh	r3, [r2, #0]
 800875a:	e04b      	b.n	80087f4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	881b      	ldrh	r3, [r3, #0]
 8008768:	82fb      	strh	r3, [r7, #22]
 800876a:	8afb      	ldrh	r3, [r7, #22]
 800876c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d01b      	beq.n	80087ac <USB_EPClearStall+0x106>
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4413      	add	r3, r2
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	b29b      	uxth	r3, r3
 8008782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878a:	82bb      	strh	r3, [r7, #20]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	441a      	add	r2, r3
 8008796:	8abb      	ldrh	r3, [r7, #20]
 8008798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800879c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087c2:	827b      	strh	r3, [r7, #18]
 80087c4:	8a7b      	ldrh	r3, [r7, #18]
 80087c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80087ca:	827b      	strh	r3, [r7, #18]
 80087cc:	8a7b      	ldrh	r3, [r7, #18]
 80087ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80087d2:	827b      	strh	r3, [r7, #18]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	441a      	add	r2, r3
 80087de:	8a7b      	ldrh	r3, [r7, #18]
 80087e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	371c      	adds	r7, #28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bc80      	pop	{r7}
 80087fe:	4770      	bx	lr

08008800 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800880c:	78fb      	ldrb	r3, [r7, #3]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d103      	bne.n	800881a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2280      	movs	r2, #128	; 0x80
 8008816:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	bc80      	pop	{r7}
 8008824:	4770      	bx	lr

08008826 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	bc80      	pop	{r7}
 8008838:	4770      	bx	lr

0800883a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800883a:	b480      	push	{r7}
 800883c:	b083      	sub	sp, #12
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	bc80      	pop	{r7}
 800884c:	4770      	bx	lr

0800884e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800884e:	b480      	push	{r7}
 8008850:	b085      	sub	sp, #20
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800885c:	b29b      	uxth	r3, r3
 800885e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008860:	68fb      	ldr	r3, [r7, #12]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3714      	adds	r7, #20
 8008866:	46bd      	mov	sp, r7
 8008868:	bc80      	pop	{r7}
 800886a:	4770      	bx	lr

0800886c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	bc80      	pop	{r7}
 8008880:	4770      	bx	lr

08008882 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008882:	b480      	push	{r7}
 8008884:	b08d      	sub	sp, #52	; 0x34
 8008886:	af00      	add	r7, sp, #0
 8008888:	60f8      	str	r0, [r7, #12]
 800888a:	60b9      	str	r1, [r7, #8]
 800888c:	4611      	mov	r1, r2
 800888e:	461a      	mov	r2, r3
 8008890:	460b      	mov	r3, r1
 8008892:	80fb      	strh	r3, [r7, #6]
 8008894:	4613      	mov	r3, r2
 8008896:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008898:	88bb      	ldrh	r3, [r7, #4]
 800889a:	3301      	adds	r3, #1
 800889c:	085b      	lsrs	r3, r3, #1
 800889e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80088a8:	88fb      	ldrh	r3, [r7, #6]
 80088aa:	005a      	lsls	r2, r3, #1
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088b4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088ba:	e01e      	b.n	80088fa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	3301      	adds	r3, #1
 80088c6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	021b      	lsls	r3, r3, #8
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	461a      	mov	r2, r3
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	b29a      	uxth	r2, r3
 80088de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80088e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e4:	3302      	adds	r3, #2
 80088e6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80088e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ea:	3302      	adds	r3, #2
 80088ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	3301      	adds	r3, #1
 80088f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80088f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f6:	3b01      	subs	r3, #1
 80088f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1dd      	bne.n	80088bc <USB_WritePMA+0x3a>
  }
}
 8008900:	bf00      	nop
 8008902:	bf00      	nop
 8008904:	3734      	adds	r7, #52	; 0x34
 8008906:	46bd      	mov	sp, r7
 8008908:	bc80      	pop	{r7}
 800890a:	4770      	bx	lr

0800890c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800890c:	b480      	push	{r7}
 800890e:	b08b      	sub	sp, #44	; 0x2c
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	4611      	mov	r1, r2
 8008918:	461a      	mov	r2, r3
 800891a:	460b      	mov	r3, r1
 800891c:	80fb      	strh	r3, [r7, #6]
 800891e:	4613      	mov	r3, r2
 8008920:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008922:	88bb      	ldrh	r3, [r7, #4]
 8008924:	085b      	lsrs	r3, r3, #1
 8008926:	b29b      	uxth	r3, r3
 8008928:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008932:	88fb      	ldrh	r3, [r7, #6]
 8008934:	005a      	lsls	r2, r3, #1
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	4413      	add	r3, r2
 800893a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800893e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	627b      	str	r3, [r7, #36]	; 0x24
 8008944:	e01b      	b.n	800897e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	b29b      	uxth	r3, r3
 800894c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800894e:	6a3b      	ldr	r3, [r7, #32]
 8008950:	3302      	adds	r3, #2
 8008952:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	b2da      	uxtb	r2, r3
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	3301      	adds	r3, #1
 8008960:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	0a1b      	lsrs	r3, r3, #8
 8008966:	b2da      	uxtb	r2, r3
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	3301      	adds	r3, #1
 8008970:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008972:	6a3b      	ldr	r3, [r7, #32]
 8008974:	3302      	adds	r3, #2
 8008976:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	3b01      	subs	r3, #1
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e0      	bne.n	8008946 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008984:	88bb      	ldrh	r3, [r7, #4]
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	b29b      	uxth	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	d007      	beq.n	80089a0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	881b      	ldrh	r3, [r3, #0]
 8008994:	b29b      	uxth	r3, r3
 8008996:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	b2da      	uxtb	r2, r3
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	701a      	strb	r2, [r3, #0]
  }
}
 80089a0:	bf00      	nop
 80089a2:	372c      	adds	r7, #44	; 0x2c
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bc80      	pop	{r7}
 80089a8:	4770      	bx	lr

080089aa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	460b      	mov	r3, r1
 80089b4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80089b6:	2300      	movs	r3, #0
 80089b8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	7c1b      	ldrb	r3, [r3, #16]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d115      	bne.n	80089ee <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80089c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089c6:	2202      	movs	r2, #2
 80089c8:	2181      	movs	r1, #129	; 0x81
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f004 fddd 	bl	800d58a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80089d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089da:	2202      	movs	r2, #2
 80089dc:	2101      	movs	r1, #1
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f004 fdd3 	bl	800d58a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80089ec:	e012      	b.n	8008a14 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80089ee:	2340      	movs	r3, #64	; 0x40
 80089f0:	2202      	movs	r2, #2
 80089f2:	2181      	movs	r1, #129	; 0x81
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f004 fdc8 	bl	800d58a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a00:	2340      	movs	r3, #64	; 0x40
 8008a02:	2202      	movs	r2, #2
 8008a04:	2101      	movs	r1, #1
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f004 fdbf 	bl	800d58a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a14:	2308      	movs	r3, #8
 8008a16:	2203      	movs	r2, #3
 8008a18:	2182      	movs	r1, #130	; 0x82
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f004 fdb5 	bl	800d58a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008a26:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008a2a:	f004 fed5 	bl	800d7d8 <USBD_static_malloc>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d102      	bne.n	8008a46 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008a40:	2301      	movs	r3, #1
 8008a42:	73fb      	strb	r3, [r7, #15]
 8008a44:	e026      	b.n	8008a94 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a4c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	7c1b      	ldrb	r3, [r3, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d109      	bne.n	8008a84 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f004 fe75 	bl	800d76c <USBD_LL_PrepareReceive>
 8008a82:	e007      	b.n	8008a94 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a8a:	2340      	movs	r3, #64	; 0x40
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f004 fe6c 	bl	800d76c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b084      	sub	sp, #16
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008aae:	2181      	movs	r1, #129	; 0x81
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f004 fd90 	bl	800d5d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008abc:	2101      	movs	r1, #1
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f004 fd89 	bl	800d5d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008acc:	2182      	movs	r1, #130	; 0x82
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f004 fd81 	bl	800d5d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00e      	beq.n	8008b02 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af4:	4618      	mov	r0, r3
 8008af6:	f004 fe7b 	bl	800d7f0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b1c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008b22:	2300      	movs	r3, #0
 8008b24:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d039      	beq.n	8008baa <USBD_CDC_Setup+0x9e>
 8008b36:	2b20      	cmp	r3, #32
 8008b38:	d17f      	bne.n	8008c3a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	88db      	ldrh	r3, [r3, #6]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d029      	beq.n	8008b96 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	b25b      	sxtb	r3, r3
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	da11      	bge.n	8008b70 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	683a      	ldr	r2, [r7, #0]
 8008b56:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008b58:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b5a:	683a      	ldr	r2, [r7, #0]
 8008b5c:	88d2      	ldrh	r2, [r2, #6]
 8008b5e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b60:	6939      	ldr	r1, [r7, #16]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	88db      	ldrh	r3, [r3, #6]
 8008b66:	461a      	mov	r2, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f001 fa0a 	bl	8009f82 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008b6e:	e06b      	b.n	8008c48 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	785a      	ldrb	r2, [r3, #1]
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	88db      	ldrh	r3, [r3, #6]
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b86:	6939      	ldr	r1, [r7, #16]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	88db      	ldrh	r3, [r3, #6]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f001 fa25 	bl	8009fde <USBD_CtlPrepareRx>
      break;
 8008b94:	e058      	b.n	8008c48 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	7850      	ldrb	r0, [r2, #1]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	4798      	blx	r3
      break;
 8008ba8:	e04e      	b.n	8008c48 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	785b      	ldrb	r3, [r3, #1]
 8008bae:	2b0b      	cmp	r3, #11
 8008bb0:	d02e      	beq.n	8008c10 <USBD_CDC_Setup+0x104>
 8008bb2:	2b0b      	cmp	r3, #11
 8008bb4:	dc38      	bgt.n	8008c28 <USBD_CDC_Setup+0x11c>
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d002      	beq.n	8008bc0 <USBD_CDC_Setup+0xb4>
 8008bba:	2b0a      	cmp	r3, #10
 8008bbc:	d014      	beq.n	8008be8 <USBD_CDC_Setup+0xdc>
 8008bbe:	e033      	b.n	8008c28 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bc6:	2b03      	cmp	r3, #3
 8008bc8:	d107      	bne.n	8008bda <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008bca:	f107 030c 	add.w	r3, r7, #12
 8008bce:	2202      	movs	r2, #2
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f001 f9d5 	bl	8009f82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008bd8:	e02e      	b.n	8008c38 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f001 f966 	bl	8009eae <USBD_CtlError>
            ret = USBD_FAIL;
 8008be2:	2302      	movs	r3, #2
 8008be4:	75fb      	strb	r3, [r7, #23]
          break;
 8008be6:	e027      	b.n	8008c38 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	d107      	bne.n	8008c02 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008bf2:	f107 030f 	add.w	r3, r7, #15
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f001 f9c1 	bl	8009f82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c00:	e01a      	b.n	8008c38 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f001 f952 	bl	8009eae <USBD_CtlError>
            ret = USBD_FAIL;
 8008c0a:	2302      	movs	r3, #2
 8008c0c:	75fb      	strb	r3, [r7, #23]
          break;
 8008c0e:	e013      	b.n	8008c38 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	d00d      	beq.n	8008c36 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 f946 	bl	8009eae <USBD_CtlError>
            ret = USBD_FAIL;
 8008c22:	2302      	movs	r3, #2
 8008c24:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008c26:	e006      	b.n	8008c36 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f001 f93f 	bl	8009eae <USBD_CtlError>
          ret = USBD_FAIL;
 8008c30:	2302      	movs	r3, #2
 8008c32:	75fb      	strb	r3, [r7, #23]
          break;
 8008c34:	e000      	b.n	8008c38 <USBD_CDC_Setup+0x12c>
          break;
 8008c36:	bf00      	nop
      }
      break;
 8008c38:	e006      	b.n	8008c48 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f001 f936 	bl	8009eae <USBD_CtlError>
      ret = USBD_FAIL;
 8008c42:	2302      	movs	r3, #2
 8008c44:	75fb      	strb	r3, [r7, #23]
      break;
 8008c46:	bf00      	nop
  }

  return ret;
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c64:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c6c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d03a      	beq.n	8008cee <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008c78:	78fa      	ldrb	r2, [r7, #3]
 8008c7a:	6879      	ldr	r1, [r7, #4]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4413      	add	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	440b      	add	r3, r1
 8008c86:	331c      	adds	r3, #28
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d029      	beq.n	8008ce2 <USBD_CDC_DataIn+0x90>
 8008c8e:	78fa      	ldrb	r2, [r7, #3]
 8008c90:	6879      	ldr	r1, [r7, #4]
 8008c92:	4613      	mov	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	440b      	add	r3, r1
 8008c9c:	331c      	adds	r3, #28
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	78f9      	ldrb	r1, [r7, #3]
 8008ca2:	68b8      	ldr	r0, [r7, #8]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	440b      	add	r3, r1
 8008caa:	00db      	lsls	r3, r3, #3
 8008cac:	4403      	add	r3, r0
 8008cae:	3338      	adds	r3, #56	; 0x38
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	fbb2 f1f3 	udiv	r1, r2, r3
 8008cb6:	fb03 f301 	mul.w	r3, r3, r1
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d110      	bne.n	8008ce2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008cc0:	78fa      	ldrb	r2, [r7, #3]
 8008cc2:	6879      	ldr	r1, [r7, #4]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	440b      	add	r3, r1
 8008cce:	331c      	adds	r3, #28
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008cd4:	78f9      	ldrb	r1, [r7, #3]
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	2200      	movs	r2, #0
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f004 fd23 	bl	800d726 <USBD_LL_Transmit>
 8008ce0:	e003      	b.n	8008cea <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	e000      	b.n	8008cf0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008cee:	2302      	movs	r3, #2
  }
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d0a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d0c:	78fb      	ldrb	r3, [r7, #3]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f004 fd4e 	bl	800d7b2 <USBD_LL_GetRxDataSize>
 8008d16:	4602      	mov	r2, r0
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00d      	beq.n	8008d44 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	4798      	blx	r3

    return USBD_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	e000      	b.n	8008d46 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008d44:	2302      	movs	r3, #2
  }
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d015      	beq.n	8008d94 <USBD_CDC_EP0_RxReady+0x46>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008d6e:	2bff      	cmp	r3, #255	; 0xff
 8008d70:	d010      	beq.n	8008d94 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008d80:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d88:	b292      	uxth	r2, r2
 8008d8a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	22ff      	movs	r2, #255	; 0xff
 8008d90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
	...

08008da0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2243      	movs	r2, #67	; 0x43
 8008dac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008dae:	4b03      	ldr	r3, [pc, #12]	; (8008dbc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bc80      	pop	{r7}
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	200000a4 	.word	0x200000a4

08008dc0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2243      	movs	r2, #67	; 0x43
 8008dcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008dce:	4b03      	ldr	r3, [pc, #12]	; (8008ddc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bc80      	pop	{r7}
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	20000060 	.word	0x20000060

08008de0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2243      	movs	r2, #67	; 0x43
 8008dec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008dee:	4b03      	ldr	r3, [pc, #12]	; (8008dfc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bc80      	pop	{r7}
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	200000e8 	.word	0x200000e8

08008e00 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	220a      	movs	r2, #10
 8008e0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008e0e:	4b03      	ldr	r3, [pc, #12]	; (8008e1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bc80      	pop	{r7}
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	2000001c 	.word	0x2000001c

08008e20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d005      	beq.n	8008e40 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3714      	adds	r7, #20
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bc80      	pop	{r7}
 8008e4a:	4770      	bx	lr

08008e4c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b087      	sub	sp, #28
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	4613      	mov	r3, r2
 8008e58:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e60:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008e6a:	88fa      	ldrh	r2, [r7, #6]
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	371c      	adds	r7, #28
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bc80      	pop	{r7}
 8008e7c:	4770      	bx	lr

08008e7e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b085      	sub	sp, #20
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e8e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bc80      	pop	{r7}
 8008ea2:	4770      	bx	lr

08008ea4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eb2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d01c      	beq.n	8008ef8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d115      	bne.n	8008ef4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	2181      	movs	r1, #129	; 0x81
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f004 fc1b 	bl	800d726 <USBD_LL_Transmit>

      return USBD_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	e002      	b.n	8008efa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e000      	b.n	8008efa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008ef8:	2302      	movs	r3, #2
  }
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b084      	sub	sp, #16
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f10:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d017      	beq.n	8008f4c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	7c1b      	ldrb	r3, [r3, #16]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d109      	bne.n	8008f38 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f2e:	2101      	movs	r1, #1
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f004 fc1b 	bl	800d76c <USBD_LL_PrepareReceive>
 8008f36:	e007      	b.n	8008f48 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f3e:	2340      	movs	r3, #64	; 0x40
 8008f40:	2101      	movs	r1, #1
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f004 fc12 	bl	800d76c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	e000      	b.n	8008f4e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008f4c:	2302      	movs	r3, #2
  }
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	60f8      	str	r0, [r7, #12]
 8008f5e:	60b9      	str	r1, [r7, #8]
 8008f60:	4613      	mov	r3, r2
 8008f62:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d101      	bne.n	8008f6e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	e01a      	b.n	8008fa4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d003      	beq.n	8008f80 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d003      	beq.n	8008f8e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	79fa      	ldrb	r2, [r7, #7]
 8008f9a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f004 fa7f 	bl	800d4a0 <USBD_LL_Init>

  return USBD_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d006      	beq.n	8008fce <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	73fb      	strb	r3, [r7, #15]
 8008fcc:	e001      	b.n	8008fd2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008fce:	2302      	movs	r3, #2
 8008fd0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bc80      	pop	{r7}
 8008fdc:	4770      	bx	lr

08008fde <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b082      	sub	sp, #8
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f004 fab4 	bl	800d554 <USBD_LL_Start>

  return USBD_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b083      	sub	sp, #12
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	bc80      	pop	{r7}
 8009008:	4770      	bx	lr

0800900a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b084      	sub	sp, #16
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	460b      	mov	r3, r1
 8009014:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009016:	2302      	movs	r3, #2
 8009018:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00c      	beq.n	800903e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	78fa      	ldrb	r2, [r7, #3]
 800902e:	4611      	mov	r1, r2
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	4798      	blx	r3
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d101      	bne.n	800903e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800903e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	78fa      	ldrb	r2, [r7, #3]
 800905e:	4611      	mov	r1, r2
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	4798      	blx	r3

  return USBD_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b082      	sub	sp, #8
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	4618      	mov	r0, r3
 8009082:	f000 fed8 	bl	8009e36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009094:	461a      	mov	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80090a2:	f003 031f 	and.w	r3, r3, #31
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d016      	beq.n	80090d8 <USBD_LL_SetupStage+0x6a>
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d81c      	bhi.n	80090e8 <USBD_LL_SetupStage+0x7a>
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d002      	beq.n	80090b8 <USBD_LL_SetupStage+0x4a>
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d008      	beq.n	80090c8 <USBD_LL_SetupStage+0x5a>
 80090b6:	e017      	b.n	80090e8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f9cb 	bl	800945c <USBD_StdDevReq>
      break;
 80090c6:	e01a      	b.n	80090fe <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80090ce:	4619      	mov	r1, r3
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fa2d 	bl	8009530 <USBD_StdItfReq>
      break;
 80090d6:	e012      	b.n	80090fe <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80090de:	4619      	mov	r1, r3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fa6d 	bl	80095c0 <USBD_StdEPReq>
      break;
 80090e6:	e00a      	b.n	80090fe <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80090ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	4619      	mov	r1, r3
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f004 fa8c 	bl	800d614 <USBD_LL_StallEP>
      break;
 80090fc:	bf00      	nop
  }

  return USBD_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	460b      	mov	r3, r1
 8009112:	607a      	str	r2, [r7, #4]
 8009114:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009116:	7afb      	ldrb	r3, [r7, #11]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d14b      	bne.n	80091b4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009122:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800912a:	2b03      	cmp	r3, #3
 800912c:	d134      	bne.n	8009198 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	68da      	ldr	r2, [r3, #12]
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	429a      	cmp	r2, r3
 8009138:	d919      	bls.n	800916e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	68da      	ldr	r2, [r3, #12]
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	1ad2      	subs	r2, r2, r3
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	68da      	ldr	r2, [r3, #12]
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009150:	429a      	cmp	r2, r3
 8009152:	d203      	bcs.n	800915c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009158:	b29b      	uxth	r3, r3
 800915a:	e002      	b.n	8009162 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009160:	b29b      	uxth	r3, r3
 8009162:	461a      	mov	r2, r3
 8009164:	6879      	ldr	r1, [r7, #4]
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f000 ff57 	bl	800a01a <USBD_CtlContinueRx>
 800916c:	e038      	b.n	80091e0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00a      	beq.n	8009190 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009180:	2b03      	cmp	r3, #3
 8009182:	d105      	bne.n	8009190 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f000 ff54 	bl	800a03e <USBD_CtlSendStatus>
 8009196:	e023      	b.n	80091e0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800919e:	2b05      	cmp	r3, #5
 80091a0:	d11e      	bne.n	80091e0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80091aa:	2100      	movs	r1, #0
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f004 fa31 	bl	800d614 <USBD_LL_StallEP>
 80091b2:	e015      	b.n	80091e0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00d      	beq.n	80091dc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	d108      	bne.n	80091dc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091d0:	699b      	ldr	r3, [r3, #24]
 80091d2:	7afa      	ldrb	r2, [r7, #11]
 80091d4:	4611      	mov	r1, r2
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	4798      	blx	r3
 80091da:	e001      	b.n	80091e0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80091dc:	2302      	movs	r3, #2
 80091de:	e000      	b.n	80091e2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b086      	sub	sp, #24
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	460b      	mov	r3, r1
 80091f4:	607a      	str	r2, [r7, #4]
 80091f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80091f8:	7afb      	ldrb	r3, [r7, #11]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d17f      	bne.n	80092fe <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3314      	adds	r3, #20
 8009202:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800920a:	2b02      	cmp	r3, #2
 800920c:	d15c      	bne.n	80092c8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	68da      	ldr	r2, [r3, #12]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	429a      	cmp	r2, r3
 8009218:	d915      	bls.n	8009246 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	68da      	ldr	r2, [r3, #12]
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	1ad2      	subs	r2, r2, r3
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	b29b      	uxth	r3, r3
 800922e:	461a      	mov	r2, r3
 8009230:	6879      	ldr	r1, [r7, #4]
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f000 fec1 	bl	8009fba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009238:	2300      	movs	r3, #0
 800923a:	2200      	movs	r2, #0
 800923c:	2100      	movs	r1, #0
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f004 fa94 	bl	800d76c <USBD_LL_PrepareReceive>
 8009244:	e04e      	b.n	80092e4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	6912      	ldr	r2, [r2, #16]
 800924e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009252:	fb02 f201 	mul.w	r2, r2, r1
 8009256:	1a9b      	subs	r3, r3, r2
 8009258:	2b00      	cmp	r3, #0
 800925a:	d11c      	bne.n	8009296 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	689a      	ldr	r2, [r3, #8]
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009264:	429a      	cmp	r2, r3
 8009266:	d316      	bcc.n	8009296 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	689a      	ldr	r2, [r3, #8]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009272:	429a      	cmp	r2, r3
 8009274:	d20f      	bcs.n	8009296 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009276:	2200      	movs	r2, #0
 8009278:	2100      	movs	r1, #0
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 fe9d 	bl	8009fba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009288:	2300      	movs	r3, #0
 800928a:	2200      	movs	r2, #0
 800928c:	2100      	movs	r1, #0
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f004 fa6c 	bl	800d76c <USBD_LL_PrepareReceive>
 8009294:	e026      	b.n	80092e4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80092a8:	2b03      	cmp	r3, #3
 80092aa:	d105      	bne.n	80092b8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80092b8:	2180      	movs	r1, #128	; 0x80
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f004 f9aa 	bl	800d614 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f000 fecf 	bl	800a064 <USBD_CtlReceiveStatus>
 80092c6:	e00d      	b.n	80092e4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092ce:	2b04      	cmp	r3, #4
 80092d0:	d004      	beq.n	80092dc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d103      	bne.n	80092e4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80092dc:	2180      	movs	r1, #128	; 0x80
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f004 f998 	bl	800d614 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d11d      	bne.n	800932a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f7ff fe81 	bl	8008ff6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80092fc:	e015      	b.n	800932a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00d      	beq.n	8009326 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009310:	2b03      	cmp	r3, #3
 8009312:	d108      	bne.n	8009326 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800931a:	695b      	ldr	r3, [r3, #20]
 800931c:	7afa      	ldrb	r2, [r7, #11]
 800931e:	4611      	mov	r1, r2
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	4798      	blx	r3
 8009324:	e001      	b.n	800932a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009326:	2302      	movs	r3, #2
 8009328:	e000      	b.n	800932c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3718      	adds	r7, #24
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800933c:	2340      	movs	r3, #64	; 0x40
 800933e:	2200      	movs	r2, #0
 8009340:	2100      	movs	r1, #0
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f004 f921 	bl	800d58a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2240      	movs	r2, #64	; 0x40
 8009354:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009358:	2340      	movs	r3, #64	; 0x40
 800935a:	2200      	movs	r2, #0
 800935c:	2180      	movs	r1, #128	; 0x80
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f004 f913 	bl	800d58a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2240      	movs	r2, #64	; 0x40
 800936e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009394:	2b00      	cmp	r3, #0
 8009396:	d009      	beq.n	80093ac <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	6852      	ldr	r2, [r2, #4]
 80093a4:	b2d2      	uxtb	r2, r2
 80093a6:	4611      	mov	r1, r2
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	4798      	blx	r3
  }

  return USBD_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80093b6:	b480      	push	{r7}
 80093b8:	b083      	sub	sp, #12
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	460b      	mov	r3, r1
 80093c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	78fa      	ldrb	r2, [r7, #3]
 80093c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	370c      	adds	r7, #12
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bc80      	pop	{r7}
 80093d2:	4770      	bx	lr

080093d4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2204      	movs	r2, #4
 80093ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bc80      	pop	{r7}
 80093fa:	4770      	bx	lr

080093fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800940a:	2b04      	cmp	r3, #4
 800940c:	d105      	bne.n	800941a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	bc80      	pop	{r7}
 8009424:	4770      	bx	lr

08009426 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b082      	sub	sp, #8
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009434:	2b03      	cmp	r3, #3
 8009436:	d10b      	bne.n	8009450 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800943e:	69db      	ldr	r3, [r3, #28]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d005      	beq.n	8009450 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800944a:	69db      	ldr	r3, [r3, #28]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
	...

0800945c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009472:	2b40      	cmp	r3, #64	; 0x40
 8009474:	d005      	beq.n	8009482 <USBD_StdDevReq+0x26>
 8009476:	2b40      	cmp	r3, #64	; 0x40
 8009478:	d84f      	bhi.n	800951a <USBD_StdDevReq+0xbe>
 800947a:	2b00      	cmp	r3, #0
 800947c:	d009      	beq.n	8009492 <USBD_StdDevReq+0x36>
 800947e:	2b20      	cmp	r3, #32
 8009480:	d14b      	bne.n	800951a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	4798      	blx	r3
      break;
 8009490:	e048      	b.n	8009524 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	785b      	ldrb	r3, [r3, #1]
 8009496:	2b09      	cmp	r3, #9
 8009498:	d839      	bhi.n	800950e <USBD_StdDevReq+0xb2>
 800949a:	a201      	add	r2, pc, #4	; (adr r2, 80094a0 <USBD_StdDevReq+0x44>)
 800949c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a0:	080094f1 	.word	0x080094f1
 80094a4:	08009505 	.word	0x08009505
 80094a8:	0800950f 	.word	0x0800950f
 80094ac:	080094fb 	.word	0x080094fb
 80094b0:	0800950f 	.word	0x0800950f
 80094b4:	080094d3 	.word	0x080094d3
 80094b8:	080094c9 	.word	0x080094c9
 80094bc:	0800950f 	.word	0x0800950f
 80094c0:	080094e7 	.word	0x080094e7
 80094c4:	080094dd 	.word	0x080094dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80094c8:	6839      	ldr	r1, [r7, #0]
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f9dc 	bl	8009888 <USBD_GetDescriptor>
          break;
 80094d0:	e022      	b.n	8009518 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80094d2:	6839      	ldr	r1, [r7, #0]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fb3f 	bl	8009b58 <USBD_SetAddress>
          break;
 80094da:	e01d      	b.n	8009518 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fb7e 	bl	8009be0 <USBD_SetConfig>
          break;
 80094e4:	e018      	b.n	8009518 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80094e6:	6839      	ldr	r1, [r7, #0]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fc07 	bl	8009cfc <USBD_GetConfig>
          break;
 80094ee:	e013      	b.n	8009518 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fc37 	bl	8009d66 <USBD_GetStatus>
          break;
 80094f8:	e00e      	b.n	8009518 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fc65 	bl	8009dcc <USBD_SetFeature>
          break;
 8009502:	e009      	b.n	8009518 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009504:	6839      	ldr	r1, [r7, #0]
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fc74 	bl	8009df4 <USBD_ClrFeature>
          break;
 800950c:	e004      	b.n	8009518 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fccc 	bl	8009eae <USBD_CtlError>
          break;
 8009516:	bf00      	nop
      }
      break;
 8009518:	e004      	b.n	8009524 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fcc6 	bl	8009eae <USBD_CtlError>
      break;
 8009522:	bf00      	nop
  }

  return ret;
 8009524:	7bfb      	ldrb	r3, [r7, #15]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop

08009530 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009546:	2b40      	cmp	r3, #64	; 0x40
 8009548:	d005      	beq.n	8009556 <USBD_StdItfReq+0x26>
 800954a:	2b40      	cmp	r3, #64	; 0x40
 800954c:	d82e      	bhi.n	80095ac <USBD_StdItfReq+0x7c>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d001      	beq.n	8009556 <USBD_StdItfReq+0x26>
 8009552:	2b20      	cmp	r3, #32
 8009554:	d12a      	bne.n	80095ac <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800955c:	3b01      	subs	r3, #1
 800955e:	2b02      	cmp	r3, #2
 8009560:	d81d      	bhi.n	800959e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	889b      	ldrh	r3, [r3, #4]
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b01      	cmp	r3, #1
 800956a:	d813      	bhi.n	8009594 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	6839      	ldr	r1, [r7, #0]
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	4798      	blx	r3
 800957a:	4603      	mov	r3, r0
 800957c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	88db      	ldrh	r3, [r3, #6]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d110      	bne.n	80095a8 <USBD_StdItfReq+0x78>
 8009586:	7bfb      	ldrb	r3, [r7, #15]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10d      	bne.n	80095a8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fd56 	bl	800a03e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009592:	e009      	b.n	80095a8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009594:	6839      	ldr	r1, [r7, #0]
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 fc89 	bl	8009eae <USBD_CtlError>
          break;
 800959c:	e004      	b.n	80095a8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800959e:	6839      	ldr	r1, [r7, #0]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fc84 	bl	8009eae <USBD_CtlError>
          break;
 80095a6:	e000      	b.n	80095aa <USBD_StdItfReq+0x7a>
          break;
 80095a8:	bf00      	nop
      }
      break;
 80095aa:	e004      	b.n	80095b6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80095ac:	6839      	ldr	r1, [r7, #0]
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fc7d 	bl	8009eae <USBD_CtlError>
      break;
 80095b4:	bf00      	nop
  }

  return USBD_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	889b      	ldrh	r3, [r3, #4]
 80095d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095dc:	2b40      	cmp	r3, #64	; 0x40
 80095de:	d007      	beq.n	80095f0 <USBD_StdEPReq+0x30>
 80095e0:	2b40      	cmp	r3, #64	; 0x40
 80095e2:	f200 8146 	bhi.w	8009872 <USBD_StdEPReq+0x2b2>
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00a      	beq.n	8009600 <USBD_StdEPReq+0x40>
 80095ea:	2b20      	cmp	r3, #32
 80095ec:	f040 8141 	bne.w	8009872 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	4798      	blx	r3
      break;
 80095fe:	e13d      	b.n	800987c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009608:	2b20      	cmp	r3, #32
 800960a:	d10a      	bne.n	8009622 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	4798      	blx	r3
 800961a:	4603      	mov	r3, r0
 800961c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800961e:	7bfb      	ldrb	r3, [r7, #15]
 8009620:	e12d      	b.n	800987e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	785b      	ldrb	r3, [r3, #1]
 8009626:	2b03      	cmp	r3, #3
 8009628:	d007      	beq.n	800963a <USBD_StdEPReq+0x7a>
 800962a:	2b03      	cmp	r3, #3
 800962c:	f300 811b 	bgt.w	8009866 <USBD_StdEPReq+0x2a6>
 8009630:	2b00      	cmp	r3, #0
 8009632:	d072      	beq.n	800971a <USBD_StdEPReq+0x15a>
 8009634:	2b01      	cmp	r3, #1
 8009636:	d03a      	beq.n	80096ae <USBD_StdEPReq+0xee>
 8009638:	e115      	b.n	8009866 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009640:	2b02      	cmp	r3, #2
 8009642:	d002      	beq.n	800964a <USBD_StdEPReq+0x8a>
 8009644:	2b03      	cmp	r3, #3
 8009646:	d015      	beq.n	8009674 <USBD_StdEPReq+0xb4>
 8009648:	e02b      	b.n	80096a2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800964a:	7bbb      	ldrb	r3, [r7, #14]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00c      	beq.n	800966a <USBD_StdEPReq+0xaa>
 8009650:	7bbb      	ldrb	r3, [r7, #14]
 8009652:	2b80      	cmp	r3, #128	; 0x80
 8009654:	d009      	beq.n	800966a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009656:	7bbb      	ldrb	r3, [r7, #14]
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f003 ffda 	bl	800d614 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009660:	2180      	movs	r1, #128	; 0x80
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f003 ffd6 	bl	800d614 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009668:	e020      	b.n	80096ac <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 fc1e 	bl	8009eae <USBD_CtlError>
              break;
 8009672:	e01b      	b.n	80096ac <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	885b      	ldrh	r3, [r3, #2]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10e      	bne.n	800969a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800967c:	7bbb      	ldrb	r3, [r7, #14]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00b      	beq.n	800969a <USBD_StdEPReq+0xda>
 8009682:	7bbb      	ldrb	r3, [r7, #14]
 8009684:	2b80      	cmp	r3, #128	; 0x80
 8009686:	d008      	beq.n	800969a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	88db      	ldrh	r3, [r3, #6]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d104      	bne.n	800969a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009690:	7bbb      	ldrb	r3, [r7, #14]
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f003 ffbd 	bl	800d614 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fccf 	bl	800a03e <USBD_CtlSendStatus>

              break;
 80096a0:	e004      	b.n	80096ac <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 fc02 	bl	8009eae <USBD_CtlError>
              break;
 80096aa:	bf00      	nop
          }
          break;
 80096ac:	e0e0      	b.n	8009870 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d002      	beq.n	80096be <USBD_StdEPReq+0xfe>
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	d015      	beq.n	80096e8 <USBD_StdEPReq+0x128>
 80096bc:	e026      	b.n	800970c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096be:	7bbb      	ldrb	r3, [r7, #14]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00c      	beq.n	80096de <USBD_StdEPReq+0x11e>
 80096c4:	7bbb      	ldrb	r3, [r7, #14]
 80096c6:	2b80      	cmp	r3, #128	; 0x80
 80096c8:	d009      	beq.n	80096de <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
 80096cc:	4619      	mov	r1, r3
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f003 ffa0 	bl	800d614 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80096d4:	2180      	movs	r1, #128	; 0x80
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f003 ff9c 	bl	800d614 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096dc:	e01c      	b.n	8009718 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fbe4 	bl	8009eae <USBD_CtlError>
              break;
 80096e6:	e017      	b.n	8009718 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	885b      	ldrh	r3, [r3, #2]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d112      	bne.n	8009716 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80096f0:	7bbb      	ldrb	r3, [r7, #14]
 80096f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d004      	beq.n	8009704 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80096fa:	7bbb      	ldrb	r3, [r7, #14]
 80096fc:	4619      	mov	r1, r3
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f003 ffa7 	bl	800d652 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fc9a 	bl	800a03e <USBD_CtlSendStatus>
              }
              break;
 800970a:	e004      	b.n	8009716 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fbcd 	bl	8009eae <USBD_CtlError>
              break;
 8009714:	e000      	b.n	8009718 <USBD_StdEPReq+0x158>
              break;
 8009716:	bf00      	nop
          }
          break;
 8009718:	e0aa      	b.n	8009870 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009720:	2b02      	cmp	r3, #2
 8009722:	d002      	beq.n	800972a <USBD_StdEPReq+0x16a>
 8009724:	2b03      	cmp	r3, #3
 8009726:	d032      	beq.n	800978e <USBD_StdEPReq+0x1ce>
 8009728:	e097      	b.n	800985a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800972a:	7bbb      	ldrb	r3, [r7, #14]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d007      	beq.n	8009740 <USBD_StdEPReq+0x180>
 8009730:	7bbb      	ldrb	r3, [r7, #14]
 8009732:	2b80      	cmp	r3, #128	; 0x80
 8009734:	d004      	beq.n	8009740 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fbb8 	bl	8009eae <USBD_CtlError>
                break;
 800973e:	e091      	b.n	8009864 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009744:	2b00      	cmp	r3, #0
 8009746:	da0b      	bge.n	8009760 <USBD_StdEPReq+0x1a0>
 8009748:	7bbb      	ldrb	r3, [r7, #14]
 800974a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800974e:	4613      	mov	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4413      	add	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	3310      	adds	r3, #16
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	4413      	add	r3, r2
 800975c:	3304      	adds	r3, #4
 800975e:	e00b      	b.n	8009778 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009760:	7bbb      	ldrb	r3, [r7, #14]
 8009762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009766:	4613      	mov	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	4413      	add	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	4413      	add	r3, r2
 8009776:	3304      	adds	r3, #4
 8009778:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	2200      	movs	r2, #0
 800977e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	2202      	movs	r2, #2
 8009784:	4619      	mov	r1, r3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fbfb 	bl	8009f82 <USBD_CtlSendData>
              break;
 800978c:	e06a      	b.n	8009864 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800978e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009792:	2b00      	cmp	r3, #0
 8009794:	da11      	bge.n	80097ba <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009796:	7bbb      	ldrb	r3, [r7, #14]
 8009798:	f003 020f 	and.w	r2, r3, #15
 800979c:	6879      	ldr	r1, [r7, #4]
 800979e:	4613      	mov	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	440b      	add	r3, r1
 80097a8:	3318      	adds	r3, #24
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d117      	bne.n	80097e0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fb7b 	bl	8009eae <USBD_CtlError>
                  break;
 80097b8:	e054      	b.n	8009864 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80097ba:	7bbb      	ldrb	r3, [r7, #14]
 80097bc:	f003 020f 	and.w	r2, r3, #15
 80097c0:	6879      	ldr	r1, [r7, #4]
 80097c2:	4613      	mov	r3, r2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	4413      	add	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	440b      	add	r3, r1
 80097cc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d104      	bne.n	80097e0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fb68 	bl	8009eae <USBD_CtlError>
                  break;
 80097de:	e041      	b.n	8009864 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	da0b      	bge.n	8009800 <USBD_StdEPReq+0x240>
 80097e8:	7bbb      	ldrb	r3, [r7, #14]
 80097ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097ee:	4613      	mov	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4413      	add	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	3310      	adds	r3, #16
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	4413      	add	r3, r2
 80097fc:	3304      	adds	r3, #4
 80097fe:	e00b      	b.n	8009818 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009800:	7bbb      	ldrb	r3, [r7, #14]
 8009802:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009806:	4613      	mov	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	4413      	add	r3, r2
 8009816:	3304      	adds	r3, #4
 8009818:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800981a:	7bbb      	ldrb	r3, [r7, #14]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <USBD_StdEPReq+0x266>
 8009820:	7bbb      	ldrb	r3, [r7, #14]
 8009822:	2b80      	cmp	r3, #128	; 0x80
 8009824:	d103      	bne.n	800982e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	2200      	movs	r2, #0
 800982a:	601a      	str	r2, [r3, #0]
 800982c:	e00e      	b.n	800984c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800982e:	7bbb      	ldrb	r3, [r7, #14]
 8009830:	4619      	mov	r1, r3
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f003 ff2c 	bl	800d690 <USBD_LL_IsStallEP>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d003      	beq.n	8009846 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	2201      	movs	r2, #1
 8009842:	601a      	str	r2, [r3, #0]
 8009844:	e002      	b.n	800984c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	2200      	movs	r2, #0
 800984a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	2202      	movs	r2, #2
 8009850:	4619      	mov	r1, r3
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fb95 	bl	8009f82 <USBD_CtlSendData>
              break;
 8009858:	e004      	b.n	8009864 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800985a:	6839      	ldr	r1, [r7, #0]
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 fb26 	bl	8009eae <USBD_CtlError>
              break;
 8009862:	bf00      	nop
          }
          break;
 8009864:	e004      	b.n	8009870 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fb20 	bl	8009eae <USBD_CtlError>
          break;
 800986e:	bf00      	nop
      }
      break;
 8009870:	e004      	b.n	800987c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fb1a 	bl	8009eae <USBD_CtlError>
      break;
 800987a:	bf00      	nop
  }

  return ret;
 800987c:	7bfb      	ldrb	r3, [r7, #15]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
	...

08009888 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009892:	2300      	movs	r3, #0
 8009894:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009896:	2300      	movs	r3, #0
 8009898:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800989a:	2300      	movs	r3, #0
 800989c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	885b      	ldrh	r3, [r3, #2]
 80098a2:	0a1b      	lsrs	r3, r3, #8
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	3b01      	subs	r3, #1
 80098a8:	2b06      	cmp	r3, #6
 80098aa:	f200 8128 	bhi.w	8009afe <USBD_GetDescriptor+0x276>
 80098ae:	a201      	add	r2, pc, #4	; (adr r2, 80098b4 <USBD_GetDescriptor+0x2c>)
 80098b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b4:	080098d1 	.word	0x080098d1
 80098b8:	080098e9 	.word	0x080098e9
 80098bc:	08009929 	.word	0x08009929
 80098c0:	08009aff 	.word	0x08009aff
 80098c4:	08009aff 	.word	0x08009aff
 80098c8:	08009a9f 	.word	0x08009a9f
 80098cc:	08009acb 	.word	0x08009acb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	7c12      	ldrb	r2, [r2, #16]
 80098dc:	f107 0108 	add.w	r1, r7, #8
 80098e0:	4610      	mov	r0, r2
 80098e2:	4798      	blx	r3
 80098e4:	60f8      	str	r0, [r7, #12]
      break;
 80098e6:	e112      	b.n	8009b0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	7c1b      	ldrb	r3, [r3, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10d      	bne.n	800990c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f8:	f107 0208 	add.w	r2, r7, #8
 80098fc:	4610      	mov	r0, r2
 80098fe:	4798      	blx	r3
 8009900:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3301      	adds	r3, #1
 8009906:	2202      	movs	r2, #2
 8009908:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800990a:	e100      	b.n	8009b0e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009914:	f107 0208 	add.w	r2, r7, #8
 8009918:	4610      	mov	r0, r2
 800991a:	4798      	blx	r3
 800991c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3301      	adds	r3, #1
 8009922:	2202      	movs	r2, #2
 8009924:	701a      	strb	r2, [r3, #0]
      break;
 8009926:	e0f2      	b.n	8009b0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	885b      	ldrh	r3, [r3, #2]
 800992c:	b2db      	uxtb	r3, r3
 800992e:	2b05      	cmp	r3, #5
 8009930:	f200 80ac 	bhi.w	8009a8c <USBD_GetDescriptor+0x204>
 8009934:	a201      	add	r2, pc, #4	; (adr r2, 800993c <USBD_GetDescriptor+0xb4>)
 8009936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993a:	bf00      	nop
 800993c:	08009955 	.word	0x08009955
 8009940:	08009989 	.word	0x08009989
 8009944:	080099bd 	.word	0x080099bd
 8009948:	080099f1 	.word	0x080099f1
 800994c:	08009a25 	.word	0x08009a25
 8009950:	08009a59 	.word	0x08009a59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00b      	beq.n	8009978 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	7c12      	ldrb	r2, [r2, #16]
 800996c:	f107 0108 	add.w	r1, r7, #8
 8009970:	4610      	mov	r0, r2
 8009972:	4798      	blx	r3
 8009974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009976:	e091      	b.n	8009a9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009978:	6839      	ldr	r1, [r7, #0]
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fa97 	bl	8009eae <USBD_CtlError>
            err++;
 8009980:	7afb      	ldrb	r3, [r7, #11]
 8009982:	3301      	adds	r3, #1
 8009984:	72fb      	strb	r3, [r7, #11]
          break;
 8009986:	e089      	b.n	8009a9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00b      	beq.n	80099ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	7c12      	ldrb	r2, [r2, #16]
 80099a0:	f107 0108 	add.w	r1, r7, #8
 80099a4:	4610      	mov	r0, r2
 80099a6:	4798      	blx	r3
 80099a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099aa:	e077      	b.n	8009a9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fa7d 	bl	8009eae <USBD_CtlError>
            err++;
 80099b4:	7afb      	ldrb	r3, [r7, #11]
 80099b6:	3301      	adds	r3, #1
 80099b8:	72fb      	strb	r3, [r7, #11]
          break;
 80099ba:	e06f      	b.n	8009a9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00b      	beq.n	80099e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	7c12      	ldrb	r2, [r2, #16]
 80099d4:	f107 0108 	add.w	r1, r7, #8
 80099d8:	4610      	mov	r0, r2
 80099da:	4798      	blx	r3
 80099dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099de:	e05d      	b.n	8009a9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fa63 	bl	8009eae <USBD_CtlError>
            err++;
 80099e8:	7afb      	ldrb	r3, [r7, #11]
 80099ea:	3301      	adds	r3, #1
 80099ec:	72fb      	strb	r3, [r7, #11]
          break;
 80099ee:	e055      	b.n	8009a9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00b      	beq.n	8009a14 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	7c12      	ldrb	r2, [r2, #16]
 8009a08:	f107 0108 	add.w	r1, r7, #8
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	4798      	blx	r3
 8009a10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a12:	e043      	b.n	8009a9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a14:	6839      	ldr	r1, [r7, #0]
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 fa49 	bl	8009eae <USBD_CtlError>
            err++;
 8009a1c:	7afb      	ldrb	r3, [r7, #11]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	72fb      	strb	r3, [r7, #11]
          break;
 8009a22:	e03b      	b.n	8009a9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00b      	beq.n	8009a48 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	7c12      	ldrb	r2, [r2, #16]
 8009a3c:	f107 0108 	add.w	r1, r7, #8
 8009a40:	4610      	mov	r0, r2
 8009a42:	4798      	blx	r3
 8009a44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a46:	e029      	b.n	8009a9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a48:	6839      	ldr	r1, [r7, #0]
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fa2f 	bl	8009eae <USBD_CtlError>
            err++;
 8009a50:	7afb      	ldrb	r3, [r7, #11]
 8009a52:	3301      	adds	r3, #1
 8009a54:	72fb      	strb	r3, [r7, #11]
          break;
 8009a56:	e021      	b.n	8009a9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00b      	beq.n	8009a7c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	7c12      	ldrb	r2, [r2, #16]
 8009a70:	f107 0108 	add.w	r1, r7, #8
 8009a74:	4610      	mov	r0, r2
 8009a76:	4798      	blx	r3
 8009a78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a7a:	e00f      	b.n	8009a9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fa15 	bl	8009eae <USBD_CtlError>
            err++;
 8009a84:	7afb      	ldrb	r3, [r7, #11]
 8009a86:	3301      	adds	r3, #1
 8009a88:	72fb      	strb	r3, [r7, #11]
          break;
 8009a8a:	e007      	b.n	8009a9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fa0d 	bl	8009eae <USBD_CtlError>
          err++;
 8009a94:	7afb      	ldrb	r3, [r7, #11]
 8009a96:	3301      	adds	r3, #1
 8009a98:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009a9a:	e038      	b.n	8009b0e <USBD_GetDescriptor+0x286>
 8009a9c:	e037      	b.n	8009b0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	7c1b      	ldrb	r3, [r3, #16]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d109      	bne.n	8009aba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aae:	f107 0208 	add.w	r2, r7, #8
 8009ab2:	4610      	mov	r0, r2
 8009ab4:	4798      	blx	r3
 8009ab6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ab8:	e029      	b.n	8009b0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f9f6 	bl	8009eae <USBD_CtlError>
        err++;
 8009ac2:	7afb      	ldrb	r3, [r7, #11]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ac8:	e021      	b.n	8009b0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	7c1b      	ldrb	r3, [r3, #16]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d10d      	bne.n	8009aee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ada:	f107 0208 	add.w	r2, r7, #8
 8009ade:	4610      	mov	r0, r2
 8009ae0:	4798      	blx	r3
 8009ae2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	2207      	movs	r2, #7
 8009aea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009aec:	e00f      	b.n	8009b0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f9dc 	bl	8009eae <USBD_CtlError>
        err++;
 8009af6:	7afb      	ldrb	r3, [r7, #11]
 8009af8:	3301      	adds	r3, #1
 8009afa:	72fb      	strb	r3, [r7, #11]
      break;
 8009afc:	e007      	b.n	8009b0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 f9d4 	bl	8009eae <USBD_CtlError>
      err++;
 8009b06:	7afb      	ldrb	r3, [r7, #11]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b0c:	bf00      	nop
  }

  if (err != 0U)
 8009b0e:	7afb      	ldrb	r3, [r7, #11]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d11c      	bne.n	8009b4e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009b14:	893b      	ldrh	r3, [r7, #8]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d011      	beq.n	8009b3e <USBD_GetDescriptor+0x2b6>
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	88db      	ldrh	r3, [r3, #6]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00d      	beq.n	8009b3e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	88da      	ldrh	r2, [r3, #6]
 8009b26:	893b      	ldrh	r3, [r7, #8]
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	bf28      	it	cs
 8009b2c:	4613      	movcs	r3, r2
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b32:	893b      	ldrh	r3, [r7, #8]
 8009b34:	461a      	mov	r2, r3
 8009b36:	68f9      	ldr	r1, [r7, #12]
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fa22 	bl	8009f82 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	88db      	ldrh	r3, [r3, #6]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d104      	bne.n	8009b50 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fa79 	bl	800a03e <USBD_CtlSendStatus>
 8009b4c:	e000      	b.n	8009b50 <USBD_GetDescriptor+0x2c8>
    return;
 8009b4e:	bf00      	nop
    }
  }
}
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop

08009b58 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	889b      	ldrh	r3, [r3, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d130      	bne.n	8009bcc <USBD_SetAddress+0x74>
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	88db      	ldrh	r3, [r3, #6]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d12c      	bne.n	8009bcc <USBD_SetAddress+0x74>
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	885b      	ldrh	r3, [r3, #2]
 8009b76:	2b7f      	cmp	r3, #127	; 0x7f
 8009b78:	d828      	bhi.n	8009bcc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	885b      	ldrh	r3, [r3, #2]
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b8c:	2b03      	cmp	r3, #3
 8009b8e:	d104      	bne.n	8009b9a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f98b 	bl	8009eae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b98:	e01d      	b.n	8009bd6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	7bfa      	ldrb	r2, [r7, #15]
 8009b9e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ba2:	7bfb      	ldrb	r3, [r7, #15]
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f003 fd9e 	bl	800d6e8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fa46 	bl	800a03e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009bb2:	7bfb      	ldrb	r3, [r7, #15]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d004      	beq.n	8009bc2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2202      	movs	r2, #2
 8009bbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bc0:	e009      	b.n	8009bd6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bca:	e004      	b.n	8009bd6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009bcc:	6839      	ldr	r1, [r7, #0]
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f96d 	bl	8009eae <USBD_CtlError>
  }
}
 8009bd4:	bf00      	nop
 8009bd6:	bf00      	nop
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
	...

08009be0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	885b      	ldrh	r3, [r3, #2]
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	4b41      	ldr	r3, [pc, #260]	; (8009cf8 <USBD_SetConfig+0x118>)
 8009bf2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009bf4:	4b40      	ldr	r3, [pc, #256]	; (8009cf8 <USBD_SetConfig+0x118>)
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d904      	bls.n	8009c06 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009bfc:	6839      	ldr	r1, [r7, #0]
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f955 	bl	8009eae <USBD_CtlError>
 8009c04:	e075      	b.n	8009cf2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	d002      	beq.n	8009c16 <USBD_SetConfig+0x36>
 8009c10:	2b03      	cmp	r3, #3
 8009c12:	d023      	beq.n	8009c5c <USBD_SetConfig+0x7c>
 8009c14:	e062      	b.n	8009cdc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009c16:	4b38      	ldr	r3, [pc, #224]	; (8009cf8 <USBD_SetConfig+0x118>)
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d01a      	beq.n	8009c54 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009c1e:	4b36      	ldr	r3, [pc, #216]	; (8009cf8 <USBD_SetConfig+0x118>)
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	461a      	mov	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2203      	movs	r2, #3
 8009c2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009c30:	4b31      	ldr	r3, [pc, #196]	; (8009cf8 <USBD_SetConfig+0x118>)
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7ff f9e7 	bl	800900a <USBD_SetClassConfig>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d104      	bne.n	8009c4c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009c42:	6839      	ldr	r1, [r7, #0]
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f932 	bl	8009eae <USBD_CtlError>
            return;
 8009c4a:	e052      	b.n	8009cf2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 f9f6 	bl	800a03e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009c52:	e04e      	b.n	8009cf2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f9f2 	bl	800a03e <USBD_CtlSendStatus>
        break;
 8009c5a:	e04a      	b.n	8009cf2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009c5c:	4b26      	ldr	r3, [pc, #152]	; (8009cf8 <USBD_SetConfig+0x118>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d112      	bne.n	8009c8a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2202      	movs	r2, #2
 8009c68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009c6c:	4b22      	ldr	r3, [pc, #136]	; (8009cf8 <USBD_SetConfig+0x118>)
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	461a      	mov	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009c76:	4b20      	ldr	r3, [pc, #128]	; (8009cf8 <USBD_SetConfig+0x118>)
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7ff f9e3 	bl	8009048 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f9db 	bl	800a03e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009c88:	e033      	b.n	8009cf2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009c8a:	4b1b      	ldr	r3, [pc, #108]	; (8009cf8 <USBD_SetConfig+0x118>)
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d01d      	beq.n	8009cd4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7ff f9d1 	bl	8009048 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009ca6:	4b14      	ldr	r3, [pc, #80]	; (8009cf8 <USBD_SetConfig+0x118>)
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	461a      	mov	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009cb0:	4b11      	ldr	r3, [pc, #68]	; (8009cf8 <USBD_SetConfig+0x118>)
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7ff f9a7 	bl	800900a <USBD_SetClassConfig>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d104      	bne.n	8009ccc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009cc2:	6839      	ldr	r1, [r7, #0]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 f8f2 	bl	8009eae <USBD_CtlError>
            return;
 8009cca:	e012      	b.n	8009cf2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f9b6 	bl	800a03e <USBD_CtlSendStatus>
        break;
 8009cd2:	e00e      	b.n	8009cf2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f9b2 	bl	800a03e <USBD_CtlSendStatus>
        break;
 8009cda:	e00a      	b.n	8009cf2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f8e5 	bl	8009eae <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009ce4:	4b04      	ldr	r3, [pc, #16]	; (8009cf8 <USBD_SetConfig+0x118>)
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f7ff f9ac 	bl	8009048 <USBD_ClrClassConfig>
        break;
 8009cf0:	bf00      	nop
    }
  }
}
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	200001b2 	.word	0x200001b2

08009cfc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	88db      	ldrh	r3, [r3, #6]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d004      	beq.n	8009d18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d0e:	6839      	ldr	r1, [r7, #0]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f8cc 	bl	8009eae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d16:	e022      	b.n	8009d5e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	dc02      	bgt.n	8009d28 <USBD_GetConfig+0x2c>
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	dc03      	bgt.n	8009d2e <USBD_GetConfig+0x32>
 8009d26:	e015      	b.n	8009d54 <USBD_GetConfig+0x58>
 8009d28:	2b03      	cmp	r3, #3
 8009d2a:	d00b      	beq.n	8009d44 <USBD_GetConfig+0x48>
 8009d2c:	e012      	b.n	8009d54 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	3308      	adds	r3, #8
 8009d38:	2201      	movs	r2, #1
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f920 	bl	8009f82 <USBD_CtlSendData>
        break;
 8009d42:	e00c      	b.n	8009d5e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	3304      	adds	r3, #4
 8009d48:	2201      	movs	r2, #1
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 f918 	bl	8009f82 <USBD_CtlSendData>
        break;
 8009d52:	e004      	b.n	8009d5e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009d54:	6839      	ldr	r1, [r7, #0]
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f8a9 	bl	8009eae <USBD_CtlError>
        break;
 8009d5c:	bf00      	nop
}
 8009d5e:	bf00      	nop
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b082      	sub	sp, #8
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d76:	3b01      	subs	r3, #1
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d81e      	bhi.n	8009dba <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	88db      	ldrh	r3, [r3, #6]
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d004      	beq.n	8009d8e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009d84:	6839      	ldr	r1, [r7, #0]
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f891 	bl	8009eae <USBD_CtlError>
        break;
 8009d8c:	e01a      	b.n	8009dc4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2201      	movs	r2, #1
 8009d92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d005      	beq.n	8009daa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	f043 0202 	orr.w	r2, r3, #2
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	330c      	adds	r3, #12
 8009dae:	2202      	movs	r2, #2
 8009db0:	4619      	mov	r1, r3
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f8e5 	bl	8009f82 <USBD_CtlSendData>
      break;
 8009db8:	e004      	b.n	8009dc4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f876 	bl	8009eae <USBD_CtlError>
      break;
 8009dc2:	bf00      	nop
  }
}
 8009dc4:	bf00      	nop
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	885b      	ldrh	r3, [r3, #2]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d106      	bne.n	8009dec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f929 	bl	800a03e <USBD_CtlSendStatus>
  }
}
 8009dec:	bf00      	nop
 8009dee:	3708      	adds	r7, #8
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e04:	3b01      	subs	r3, #1
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d80b      	bhi.n	8009e22 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	885b      	ldrh	r3, [r3, #2]
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d10c      	bne.n	8009e2c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f90f 	bl	800a03e <USBD_CtlSendStatus>
      }
      break;
 8009e20:	e004      	b.n	8009e2c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f842 	bl	8009eae <USBD_CtlError>
      break;
 8009e2a:	e000      	b.n	8009e2e <USBD_ClrFeature+0x3a>
      break;
 8009e2c:	bf00      	nop
  }
}
 8009e2e:	bf00      	nop
 8009e30:	3708      	adds	r7, #8
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e36:	b480      	push	{r7}
 8009e38:	b083      	sub	sp, #12
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	781a      	ldrb	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	785a      	ldrb	r2, [r3, #1]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	3302      	adds	r3, #2
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	3303      	adds	r3, #3
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	021b      	lsls	r3, r3, #8
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	4413      	add	r3, r2
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	3304      	adds	r3, #4
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	3305      	adds	r3, #5
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	021b      	lsls	r3, r3, #8
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	4413      	add	r3, r2
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	3306      	adds	r3, #6
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	3307      	adds	r3, #7
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	021b      	lsls	r3, r3, #8
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	4413      	add	r3, r2
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	80da      	strh	r2, [r3, #6]

}
 8009ea4:	bf00      	nop
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bc80      	pop	{r7}
 8009eac:	4770      	bx	lr

08009eae <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b082      	sub	sp, #8
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
 8009eb6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009eb8:	2180      	movs	r1, #128	; 0x80
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f003 fbaa 	bl	800d614 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f003 fba6 	bl	800d614 <USBD_LL_StallEP>
}
 8009ec8:	bf00      	nop
 8009eca:	3708      	adds	r7, #8
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009edc:	2300      	movs	r3, #0
 8009ede:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d032      	beq.n	8009f4c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f000 f834 	bl	8009f54 <USBD_GetLen>
 8009eec:	4603      	mov	r3, r0
 8009eee:	3301      	adds	r3, #1
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	005b      	lsls	r3, r3, #1
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
 8009efc:	1c5a      	adds	r2, r3, #1
 8009efe:	75fa      	strb	r2, [r7, #23]
 8009f00:	461a      	mov	r2, r3
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	4413      	add	r3, r2
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	7812      	ldrb	r2, [r2, #0]
 8009f0a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009f0c:	7dfb      	ldrb	r3, [r7, #23]
 8009f0e:	1c5a      	adds	r2, r3, #1
 8009f10:	75fa      	strb	r2, [r7, #23]
 8009f12:	461a      	mov	r2, r3
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	4413      	add	r3, r2
 8009f18:	2203      	movs	r2, #3
 8009f1a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009f1c:	e012      	b.n	8009f44 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	1c5a      	adds	r2, r3, #1
 8009f22:	60fa      	str	r2, [r7, #12]
 8009f24:	7dfa      	ldrb	r2, [r7, #23]
 8009f26:	1c51      	adds	r1, r2, #1
 8009f28:	75f9      	strb	r1, [r7, #23]
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	68ba      	ldr	r2, [r7, #8]
 8009f2e:	440a      	add	r2, r1
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009f34:	7dfb      	ldrb	r3, [r7, #23]
 8009f36:	1c5a      	adds	r2, r3, #1
 8009f38:	75fa      	strb	r2, [r7, #23]
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	4413      	add	r3, r2
 8009f40:	2200      	movs	r2, #0
 8009f42:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1e8      	bne.n	8009f1e <USBD_GetString+0x4e>
    }
  }
}
 8009f4c:	bf00      	nop
 8009f4e:	3718      	adds	r7, #24
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009f60:	e005      	b.n	8009f6e <USBD_GetLen+0x1a>
  {
    len++;
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
 8009f64:	3301      	adds	r3, #1
 8009f66:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1f5      	bne.n	8009f62 <USBD_GetLen+0xe>
  }

  return len;
 8009f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bc80      	pop	{r7}
 8009f80:	4770      	bx	lr

08009f82 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b084      	sub	sp, #16
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	60f8      	str	r0, [r7, #12]
 8009f8a:	60b9      	str	r1, [r7, #8]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2202      	movs	r2, #2
 8009f94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009f98:	88fa      	ldrh	r2, [r7, #6]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009f9e:	88fa      	ldrh	r2, [r7, #6]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fa4:	88fb      	ldrh	r3, [r7, #6]
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	2100      	movs	r1, #0
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f003 fbbb 	bl	800d726 <USBD_LL_Transmit>

  return USBD_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b084      	sub	sp, #16
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	60f8      	str	r0, [r7, #12]
 8009fc2:	60b9      	str	r1, [r7, #8]
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fc8:	88fb      	ldrh	r3, [r7, #6]
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	2100      	movs	r1, #0
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f003 fba9 	bl	800d726 <USBD_LL_Transmit>

  return USBD_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b084      	sub	sp, #16
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	60f8      	str	r0, [r7, #12]
 8009fe6:	60b9      	str	r1, [r7, #8]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2203      	movs	r2, #3
 8009ff0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009ff4:	88fa      	ldrh	r2, [r7, #6]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009ffc:	88fa      	ldrh	r2, [r7, #6]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a004:	88fb      	ldrh	r3, [r7, #6]
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	2100      	movs	r1, #0
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f003 fbae 	bl	800d76c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a010:	2300      	movs	r3, #0
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b084      	sub	sp, #16
 800a01e:	af00      	add	r7, sp, #0
 800a020:	60f8      	str	r0, [r7, #12]
 800a022:	60b9      	str	r1, [r7, #8]
 800a024:	4613      	mov	r3, r2
 800a026:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a028:	88fb      	ldrh	r3, [r7, #6]
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	2100      	movs	r1, #0
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f003 fb9c 	bl	800d76c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b082      	sub	sp, #8
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2204      	movs	r2, #4
 800a04a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a04e:	2300      	movs	r3, #0
 800a050:	2200      	movs	r2, #0
 800a052:	2100      	movs	r1, #0
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f003 fb66 	bl	800d726 <USBD_LL_Transmit>

  return USBD_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2205      	movs	r2, #5
 800a070:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a074:	2300      	movs	r3, #0
 800a076:	2200      	movs	r2, #0
 800a078:	2100      	movs	r1, #0
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f003 fb76 	bl	800d76c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
	...

0800a08c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a092:	f3ef 8305 	mrs	r3, IPSR
 800a096:	60bb      	str	r3, [r7, #8]
  return(result);
 800a098:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10f      	bne.n	800a0be <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a09e:	f3ef 8310 	mrs	r3, PRIMASK
 800a0a2:	607b      	str	r3, [r7, #4]
  return(result);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d109      	bne.n	800a0be <osKernelInitialize+0x32>
 800a0aa:	4b10      	ldr	r3, [pc, #64]	; (800a0ec <osKernelInitialize+0x60>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	d109      	bne.n	800a0c6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a0b2:	f3ef 8311 	mrs	r3, BASEPRI
 800a0b6:	603b      	str	r3, [r7, #0]
  return(result);
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d003      	beq.n	800a0c6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a0be:	f06f 0305 	mvn.w	r3, #5
 800a0c2:	60fb      	str	r3, [r7, #12]
 800a0c4:	e00c      	b.n	800a0e0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a0c6:	4b09      	ldr	r3, [pc, #36]	; (800a0ec <osKernelInitialize+0x60>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d105      	bne.n	800a0da <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800a0ce:	4b07      	ldr	r3, [pc, #28]	; (800a0ec <osKernelInitialize+0x60>)
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	60fb      	str	r3, [r7, #12]
 800a0d8:	e002      	b.n	800a0e0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a0da:	f04f 33ff 	mov.w	r3, #4294967295
 800a0de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bc80      	pop	{r7}
 800a0ea:	4770      	bx	lr
 800a0ec:	200001b4 	.word	0x200001b4

0800a0f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0f6:	f3ef 8305 	mrs	r3, IPSR
 800a0fa:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10f      	bne.n	800a122 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a102:	f3ef 8310 	mrs	r3, PRIMASK
 800a106:	607b      	str	r3, [r7, #4]
  return(result);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d109      	bne.n	800a122 <osKernelStart+0x32>
 800a10e:	4b11      	ldr	r3, [pc, #68]	; (800a154 <osKernelStart+0x64>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b02      	cmp	r3, #2
 800a114:	d109      	bne.n	800a12a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a116:	f3ef 8311 	mrs	r3, BASEPRI
 800a11a:	603b      	str	r3, [r7, #0]
  return(result);
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d003      	beq.n	800a12a <osKernelStart+0x3a>
    stat = osErrorISR;
 800a122:	f06f 0305 	mvn.w	r3, #5
 800a126:	60fb      	str	r3, [r7, #12]
 800a128:	e00e      	b.n	800a148 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800a12a:	4b0a      	ldr	r3, [pc, #40]	; (800a154 <osKernelStart+0x64>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d107      	bne.n	800a142 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800a132:	4b08      	ldr	r3, [pc, #32]	; (800a154 <osKernelStart+0x64>)
 800a134:	2202      	movs	r2, #2
 800a136:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800a138:	f001 f9ba 	bl	800b4b0 <vTaskStartScheduler>
      stat = osOK;
 800a13c:	2300      	movs	r3, #0
 800a13e:	60fb      	str	r3, [r7, #12]
 800a140:	e002      	b.n	800a148 <osKernelStart+0x58>
    } else {
      stat = osError;
 800a142:	f04f 33ff 	mov.w	r3, #4294967295
 800a146:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a148:	68fb      	ldr	r3, [r7, #12]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	200001b4 	.word	0x200001b4

0800a158 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a158:	b580      	push	{r7, lr}
 800a15a:	b092      	sub	sp, #72	; 0x48
 800a15c:	af04      	add	r7, sp, #16
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a164:	2300      	movs	r3, #0
 800a166:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a168:	f3ef 8305 	mrs	r3, IPSR
 800a16c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800a170:	2b00      	cmp	r3, #0
 800a172:	f040 8094 	bne.w	800a29e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a176:	f3ef 8310 	mrs	r3, PRIMASK
 800a17a:	623b      	str	r3, [r7, #32]
  return(result);
 800a17c:	6a3b      	ldr	r3, [r7, #32]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f040 808d 	bne.w	800a29e <osThreadNew+0x146>
 800a184:	4b48      	ldr	r3, [pc, #288]	; (800a2a8 <osThreadNew+0x150>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b02      	cmp	r3, #2
 800a18a:	d106      	bne.n	800a19a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a18c:	f3ef 8311 	mrs	r3, BASEPRI
 800a190:	61fb      	str	r3, [r7, #28]
  return(result);
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	2b00      	cmp	r3, #0
 800a196:	f040 8082 	bne.w	800a29e <osThreadNew+0x146>
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d07e      	beq.n	800a29e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800a1a0:	2380      	movs	r3, #128	; 0x80
 800a1a2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800a1a4:	2318      	movs	r3, #24
 800a1a6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800a1ac:	f107 031b 	add.w	r3, r7, #27
 800a1b0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800a1b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1b6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d045      	beq.n	800a24a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d002      	beq.n	800a1cc <osThreadNew+0x74>
        name = attr->name;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d002      	beq.n	800a1da <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	699b      	ldr	r3, [r3, #24]
 800a1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d008      	beq.n	800a1f2 <osThreadNew+0x9a>
 800a1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e2:	2b38      	cmp	r3, #56	; 0x38
 800a1e4:	d805      	bhi.n	800a1f2 <osThreadNew+0x9a>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	f003 0301 	and.w	r3, r3, #1
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <osThreadNew+0x9e>
        return (NULL);
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	e054      	b.n	800a2a0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d003      	beq.n	800a206 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	695b      	ldr	r3, [r3, #20]
 800a202:	089b      	lsrs	r3, r3, #2
 800a204:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00e      	beq.n	800a22c <osThreadNew+0xd4>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	2b5b      	cmp	r3, #91	; 0x5b
 800a214:	d90a      	bls.n	800a22c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d006      	beq.n	800a22c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	695b      	ldr	r3, [r3, #20]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d002      	beq.n	800a22c <osThreadNew+0xd4>
        mem = 1;
 800a226:	2301      	movs	r3, #1
 800a228:	62bb      	str	r3, [r7, #40]	; 0x28
 800a22a:	e010      	b.n	800a24e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d10c      	bne.n	800a24e <osThreadNew+0xf6>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d108      	bne.n	800a24e <osThreadNew+0xf6>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d104      	bne.n	800a24e <osThreadNew+0xf6>
          mem = 0;
 800a244:	2300      	movs	r3, #0
 800a246:	62bb      	str	r3, [r7, #40]	; 0x28
 800a248:	e001      	b.n	800a24e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800a24a:	2300      	movs	r3, #0
 800a24c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	2b01      	cmp	r3, #1
 800a252:	d110      	bne.n	800a276 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a25c:	9202      	str	r2, [sp, #8]
 800a25e:	9301      	str	r3, [sp, #4]
 800a260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a268:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f000 fed6 	bl	800b01c <xTaskCreateStatic>
 800a270:	4603      	mov	r3, r0
 800a272:	617b      	str	r3, [r7, #20]
 800a274:	e013      	b.n	800a29e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800a276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d110      	bne.n	800a29e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27e:	b29a      	uxth	r2, r3
 800a280:	f107 0314 	add.w	r3, r7, #20
 800a284:	9301      	str	r3, [sp, #4]
 800a286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a288:	9300      	str	r3, [sp, #0]
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f000 ff20 	bl	800b0d4 <xTaskCreate>
 800a294:	4603      	mov	r3, r0
 800a296:	2b01      	cmp	r3, #1
 800a298:	d001      	beq.n	800a29e <osThreadNew+0x146>
          hTask = NULL;
 800a29a:	2300      	movs	r3, #0
 800a29c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a29e:	697b      	ldr	r3, [r7, #20]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3738      	adds	r7, #56	; 0x38
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	200001b4 	.word	0x200001b4

0800a2ac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2b4:	f3ef 8305 	mrs	r3, IPSR
 800a2b8:	613b      	str	r3, [r7, #16]
  return(result);
 800a2ba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d10f      	bne.n	800a2e0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2c0:	f3ef 8310 	mrs	r3, PRIMASK
 800a2c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d109      	bne.n	800a2e0 <osDelay+0x34>
 800a2cc:	4b0d      	ldr	r3, [pc, #52]	; (800a304 <osDelay+0x58>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d109      	bne.n	800a2e8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a2d4:	f3ef 8311 	mrs	r3, BASEPRI
 800a2d8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d003      	beq.n	800a2e8 <osDelay+0x3c>
    stat = osErrorISR;
 800a2e0:	f06f 0305 	mvn.w	r3, #5
 800a2e4:	617b      	str	r3, [r7, #20]
 800a2e6:	e007      	b.n	800a2f8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d002      	beq.n	800a2f8 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f001 f8a8 	bl	800b448 <vTaskDelay>
    }
  }

  return (stat);
 800a2f8:	697b      	ldr	r3, [r7, #20]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3718      	adds	r7, #24
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	200001b4 	.word	0x200001b4

0800a308 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a308:	b580      	push	{r7, lr}
 800a30a:	b08c      	sub	sp, #48	; 0x30
 800a30c:	af02      	add	r7, sp, #8
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a314:	2300      	movs	r3, #0
 800a316:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a318:	f3ef 8305 	mrs	r3, IPSR
 800a31c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a31e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a320:	2b00      	cmp	r3, #0
 800a322:	d16f      	bne.n	800a404 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a324:	f3ef 8310 	mrs	r3, PRIMASK
 800a328:	617b      	str	r3, [r7, #20]
  return(result);
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d169      	bne.n	800a404 <osMessageQueueNew+0xfc>
 800a330:	4b37      	ldr	r3, [pc, #220]	; (800a410 <osMessageQueueNew+0x108>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2b02      	cmp	r3, #2
 800a336:	d105      	bne.n	800a344 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a338:	f3ef 8311 	mrs	r3, BASEPRI
 800a33c:	613b      	str	r3, [r7, #16]
  return(result);
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d15f      	bne.n	800a404 <osMessageQueueNew+0xfc>
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d05c      	beq.n	800a404 <osMessageQueueNew+0xfc>
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d059      	beq.n	800a404 <osMessageQueueNew+0xfc>
    mem = -1;
 800a350:	f04f 33ff 	mov.w	r3, #4294967295
 800a354:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d029      	beq.n	800a3b0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d012      	beq.n	800a38a <osMessageQueueNew+0x82>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	2b4f      	cmp	r3, #79	; 0x4f
 800a36a:	d90e      	bls.n	800a38a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00a      	beq.n	800a38a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	695a      	ldr	r2, [r3, #20]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	68b9      	ldr	r1, [r7, #8]
 800a37c:	fb01 f303 	mul.w	r3, r1, r3
 800a380:	429a      	cmp	r2, r3
 800a382:	d302      	bcc.n	800a38a <osMessageQueueNew+0x82>
        mem = 1;
 800a384:	2301      	movs	r3, #1
 800a386:	623b      	str	r3, [r7, #32]
 800a388:	e014      	b.n	800a3b4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d110      	bne.n	800a3b4 <osMessageQueueNew+0xac>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10c      	bne.n	800a3b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d108      	bne.n	800a3b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d104      	bne.n	800a3b4 <osMessageQueueNew+0xac>
          mem = 0;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	623b      	str	r3, [r7, #32]
 800a3ae:	e001      	b.n	800a3b4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a3b4:	6a3b      	ldr	r3, [r7, #32]
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d10b      	bne.n	800a3d2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	691a      	ldr	r2, [r3, #16]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	9100      	str	r1, [sp, #0]
 800a3c6:	68b9      	ldr	r1, [r7, #8]
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f000 f96d 	bl	800a6a8 <xQueueGenericCreateStatic>
 800a3ce:	6278      	str	r0, [r7, #36]	; 0x24
 800a3d0:	e008      	b.n	800a3e4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a3d2:	6a3b      	ldr	r3, [r7, #32]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d105      	bne.n	800a3e4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a3d8:	2200      	movs	r2, #0
 800a3da:	68b9      	ldr	r1, [r7, #8]
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f000 f9da 	bl	800a796 <xQueueGenericCreate>
 800a3e2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00c      	beq.n	800a404 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d003      	beq.n	800a3f8 <osMessageQueueNew+0xf0>
        name = attr->name;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	61fb      	str	r3, [r7, #28]
 800a3f6:	e001      	b.n	800a3fc <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a3fc:	69f9      	ldr	r1, [r7, #28]
 800a3fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a400:	f000 fdb0 	bl	800af64 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a406:	4618      	mov	r0, r3
 800a408:	3728      	adds	r7, #40	; 0x28
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	200001b4 	.word	0x200001b4

0800a414 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4a06      	ldr	r2, [pc, #24]	; (800a43c <vApplicationGetIdleTaskMemory+0x28>)
 800a424:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	4a05      	ldr	r2, [pc, #20]	; (800a440 <vApplicationGetIdleTaskMemory+0x2c>)
 800a42a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2280      	movs	r2, #128	; 0x80
 800a430:	601a      	str	r2, [r3, #0]
}
 800a432:	bf00      	nop
 800a434:	3714      	adds	r7, #20
 800a436:	46bd      	mov	sp, r7
 800a438:	bc80      	pop	{r7}
 800a43a:	4770      	bx	lr
 800a43c:	200001b8 	.word	0x200001b8
 800a440:	20000214 	.word	0x20000214

0800a444 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	4a07      	ldr	r2, [pc, #28]	; (800a470 <vApplicationGetTimerTaskMemory+0x2c>)
 800a454:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	4a06      	ldr	r2, [pc, #24]	; (800a474 <vApplicationGetTimerTaskMemory+0x30>)
 800a45a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a462:	601a      	str	r2, [r3, #0]
}
 800a464:	bf00      	nop
 800a466:	3714      	adds	r7, #20
 800a468:	46bd      	mov	sp, r7
 800a46a:	bc80      	pop	{r7}
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	20000414 	.word	0x20000414
 800a474:	20000470 	.word	0x20000470

0800a478 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f103 0208 	add.w	r2, r3, #8
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f04f 32ff 	mov.w	r2, #4294967295
 800a490:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f103 0208 	add.w	r2, r3, #8
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f103 0208 	add.w	r2, r3, #8
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a4ac:	bf00      	nop
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bc80      	pop	{r7}
 800a4b4:	4770      	bx	lr

0800a4b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b083      	sub	sp, #12
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4c4:	bf00      	nop
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bc80      	pop	{r7}
 800a4cc:	4770      	bx	lr

0800a4ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b085      	sub	sp, #20
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
 800a4d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	689a      	ldr	r2, [r3, #8]
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	683a      	ldr	r2, [r7, #0]
 800a4f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	1c5a      	adds	r2, r3, #1
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	601a      	str	r2, [r3, #0]
}
 800a50a:	bf00      	nop
 800a50c:	3714      	adds	r7, #20
 800a50e:	46bd      	mov	sp, r7
 800a510:	bc80      	pop	{r7}
 800a512:	4770      	bx	lr

0800a514 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52a:	d103      	bne.n	800a534 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	691b      	ldr	r3, [r3, #16]
 800a530:	60fb      	str	r3, [r7, #12]
 800a532:	e00c      	b.n	800a54e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	3308      	adds	r3, #8
 800a538:	60fb      	str	r3, [r7, #12]
 800a53a:	e002      	b.n	800a542 <vListInsert+0x2e>
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	60fb      	str	r3, [r7, #12]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d2f6      	bcs.n	800a53c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	685a      	ldr	r2, [r3, #4]
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	683a      	ldr	r2, [r7, #0]
 800a568:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	1c5a      	adds	r2, r3, #1
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	601a      	str	r2, [r3, #0]
}
 800a57a:	bf00      	nop
 800a57c:	3714      	adds	r7, #20
 800a57e:	46bd      	mov	sp, r7
 800a580:	bc80      	pop	{r7}
 800a582:	4770      	bx	lr

0800a584 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	6892      	ldr	r2, [r2, #8]
 800a59a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	6852      	ldr	r2, [r2, #4]
 800a5a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d103      	bne.n	800a5b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	689a      	ldr	r2, [r3, #8]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	1e5a      	subs	r2, r3, #1
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3714      	adds	r7, #20
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bc80      	pop	{r7}
 800a5d4:	4770      	bx	lr
	...

0800a5d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10a      	bne.n	800a602 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f0:	f383 8811 	msr	BASEPRI, r3
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a5fe:	bf00      	nop
 800a600:	e7fe      	b.n	800a600 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a602:	f002 f99b 	bl	800c93c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a60e:	68f9      	ldr	r1, [r7, #12]
 800a610:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a612:	fb01 f303 	mul.w	r3, r1, r3
 800a616:	441a      	add	r2, r3
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2200      	movs	r2, #0
 800a620:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a632:	3b01      	subs	r3, #1
 800a634:	68f9      	ldr	r1, [r7, #12]
 800a636:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a638:	fb01 f303 	mul.w	r3, r1, r3
 800a63c:	441a      	add	r2, r3
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	22ff      	movs	r2, #255	; 0xff
 800a646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	22ff      	movs	r2, #255	; 0xff
 800a64e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d114      	bne.n	800a682 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d01a      	beq.n	800a696 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	3310      	adds	r3, #16
 800a664:	4618      	mov	r0, r3
 800a666:	f001 f9ad 	bl	800b9c4 <xTaskRemoveFromEventList>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d012      	beq.n	800a696 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a670:	4b0c      	ldr	r3, [pc, #48]	; (800a6a4 <xQueueGenericReset+0xcc>)
 800a672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a676:	601a      	str	r2, [r3, #0]
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	e009      	b.n	800a696 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	3310      	adds	r3, #16
 800a686:	4618      	mov	r0, r3
 800a688:	f7ff fef6 	bl	800a478 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	3324      	adds	r3, #36	; 0x24
 800a690:	4618      	mov	r0, r3
 800a692:	f7ff fef1 	bl	800a478 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a696:	f002 f981 	bl	800c99c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a69a:	2301      	movs	r3, #1
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	e000ed04 	.word	0xe000ed04

0800a6a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b08e      	sub	sp, #56	; 0x38
 800a6ac:	af02      	add	r7, sp, #8
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
 800a6b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10a      	bne.n	800a6d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c0:	f383 8811 	msr	BASEPRI, r3
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a6ce:	bf00      	nop
 800a6d0:	e7fe      	b.n	800a6d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10a      	bne.n	800a6ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6ea:	bf00      	nop
 800a6ec:	e7fe      	b.n	800a6ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d002      	beq.n	800a6fa <xQueueGenericCreateStatic+0x52>
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d001      	beq.n	800a6fe <xQueueGenericCreateStatic+0x56>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e000      	b.n	800a700 <xQueueGenericCreateStatic+0x58>
 800a6fe:	2300      	movs	r3, #0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d10a      	bne.n	800a71a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a708:	f383 8811 	msr	BASEPRI, r3
 800a70c:	f3bf 8f6f 	isb	sy
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	623b      	str	r3, [r7, #32]
}
 800a716:	bf00      	nop
 800a718:	e7fe      	b.n	800a718 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d102      	bne.n	800a726 <xQueueGenericCreateStatic+0x7e>
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d101      	bne.n	800a72a <xQueueGenericCreateStatic+0x82>
 800a726:	2301      	movs	r3, #1
 800a728:	e000      	b.n	800a72c <xQueueGenericCreateStatic+0x84>
 800a72a:	2300      	movs	r3, #0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10a      	bne.n	800a746 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	61fb      	str	r3, [r7, #28]
}
 800a742:	bf00      	nop
 800a744:	e7fe      	b.n	800a744 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a746:	2350      	movs	r3, #80	; 0x50
 800a748:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	2b50      	cmp	r3, #80	; 0x50
 800a74e:	d00a      	beq.n	800a766 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	61bb      	str	r3, [r7, #24]
}
 800a762:	bf00      	nop
 800a764:	e7fe      	b.n	800a764 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00d      	beq.n	800a78c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a772:	2201      	movs	r2, #1
 800a774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a778:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	4613      	mov	r3, r2
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	68b9      	ldr	r1, [r7, #8]
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f000 f843 	bl	800a812 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a78e:	4618      	mov	r0, r3
 800a790:	3730      	adds	r7, #48	; 0x30
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a796:	b580      	push	{r7, lr}
 800a798:	b08a      	sub	sp, #40	; 0x28
 800a79a:	af02      	add	r7, sp, #8
 800a79c:	60f8      	str	r0, [r7, #12]
 800a79e:	60b9      	str	r1, [r7, #8]
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10a      	bne.n	800a7c0 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ae:	f383 8811 	msr	BASEPRI, r3
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	f3bf 8f4f 	dsb	sy
 800a7ba:	613b      	str	r3, [r7, #16]
}
 800a7bc:	bf00      	nop
 800a7be:	e7fe      	b.n	800a7be <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d102      	bne.n	800a7cc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	61fb      	str	r3, [r7, #28]
 800a7ca:	e004      	b.n	800a7d6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	fb02 f303 	mul.w	r3, r2, r3
 800a7d4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	3350      	adds	r3, #80	; 0x50
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f002 f9ae 	bl	800cb3c <pvPortMalloc>
 800a7e0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00f      	beq.n	800a808 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	3350      	adds	r3, #80	; 0x50
 800a7ec:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a7f6:	79fa      	ldrb	r2, [r7, #7]
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	9300      	str	r3, [sp, #0]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	697a      	ldr	r2, [r7, #20]
 800a800:	68b9      	ldr	r1, [r7, #8]
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f000 f805 	bl	800a812 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a808:	69bb      	ldr	r3, [r7, #24]
	}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3720      	adds	r7, #32
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b084      	sub	sp, #16
 800a816:	af00      	add	r7, sp, #0
 800a818:	60f8      	str	r0, [r7, #12]
 800a81a:	60b9      	str	r1, [r7, #8]
 800a81c:	607a      	str	r2, [r7, #4]
 800a81e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d103      	bne.n	800a82e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a826:	69bb      	ldr	r3, [r7, #24]
 800a828:	69ba      	ldr	r2, [r7, #24]
 800a82a:	601a      	str	r2, [r3, #0]
 800a82c:	e002      	b.n	800a834 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	68ba      	ldr	r2, [r7, #8]
 800a83e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a840:	2101      	movs	r1, #1
 800a842:	69b8      	ldr	r0, [r7, #24]
 800a844:	f7ff fec8 	bl	800a5d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	78fa      	ldrb	r2, [r7, #3]
 800a84c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a850:	bf00      	nop
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b08e      	sub	sp, #56	; 0x38
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
 800a864:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a866:	2300      	movs	r3, #0
 800a868:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a870:	2b00      	cmp	r3, #0
 800a872:	d10a      	bne.n	800a88a <xQueueGenericSend+0x32>
	__asm volatile
 800a874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a878:	f383 8811 	msr	BASEPRI, r3
 800a87c:	f3bf 8f6f 	isb	sy
 800a880:	f3bf 8f4f 	dsb	sy
 800a884:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a886:	bf00      	nop
 800a888:	e7fe      	b.n	800a888 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d103      	bne.n	800a898 <xQueueGenericSend+0x40>
 800a890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a894:	2b00      	cmp	r3, #0
 800a896:	d101      	bne.n	800a89c <xQueueGenericSend+0x44>
 800a898:	2301      	movs	r3, #1
 800a89a:	e000      	b.n	800a89e <xQueueGenericSend+0x46>
 800a89c:	2300      	movs	r3, #0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10a      	bne.n	800a8b8 <xQueueGenericSend+0x60>
	__asm volatile
 800a8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8b4:	bf00      	nop
 800a8b6:	e7fe      	b.n	800a8b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d103      	bne.n	800a8c6 <xQueueGenericSend+0x6e>
 800a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d101      	bne.n	800a8ca <xQueueGenericSend+0x72>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e000      	b.n	800a8cc <xQueueGenericSend+0x74>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10a      	bne.n	800a8e6 <xQueueGenericSend+0x8e>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	623b      	str	r3, [r7, #32]
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8e6:	f001 fa67 	bl	800bdb8 <xTaskGetSchedulerState>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d102      	bne.n	800a8f6 <xQueueGenericSend+0x9e>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d101      	bne.n	800a8fa <xQueueGenericSend+0xa2>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e000      	b.n	800a8fc <xQueueGenericSend+0xa4>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10a      	bne.n	800a916 <xQueueGenericSend+0xbe>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	61fb      	str	r3, [r7, #28]
}
 800a912:	bf00      	nop
 800a914:	e7fe      	b.n	800a914 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a916:	f002 f811 	bl	800c93c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a922:	429a      	cmp	r2, r3
 800a924:	d302      	bcc.n	800a92c <xQueueGenericSend+0xd4>
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d129      	bne.n	800a980 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	68b9      	ldr	r1, [r7, #8]
 800a930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a932:	f000 fa07 	bl	800ad44 <prvCopyDataToQueue>
 800a936:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d010      	beq.n	800a962 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a942:	3324      	adds	r3, #36	; 0x24
 800a944:	4618      	mov	r0, r3
 800a946:	f001 f83d 	bl	800b9c4 <xTaskRemoveFromEventList>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d013      	beq.n	800a978 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a950:	4b3f      	ldr	r3, [pc, #252]	; (800aa50 <xQueueGenericSend+0x1f8>)
 800a952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a956:	601a      	str	r2, [r3, #0]
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	f3bf 8f6f 	isb	sy
 800a960:	e00a      	b.n	800a978 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a964:	2b00      	cmp	r3, #0
 800a966:	d007      	beq.n	800a978 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a968:	4b39      	ldr	r3, [pc, #228]	; (800aa50 <xQueueGenericSend+0x1f8>)
 800a96a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a978:	f002 f810 	bl	800c99c <vPortExitCritical>
				return pdPASS;
 800a97c:	2301      	movs	r3, #1
 800a97e:	e063      	b.n	800aa48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d103      	bne.n	800a98e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a986:	f002 f809 	bl	800c99c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a98a:	2300      	movs	r3, #0
 800a98c:	e05c      	b.n	800aa48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a990:	2b00      	cmp	r3, #0
 800a992:	d106      	bne.n	800a9a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a994:	f107 0314 	add.w	r3, r7, #20
 800a998:	4618      	mov	r0, r3
 800a99a:	f001 f877 	bl	800ba8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9a2:	f001 fffb 	bl	800c99c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9a6:	f000 fde9 	bl	800b57c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9aa:	f001 ffc7 	bl	800c93c <vPortEnterCritical>
 800a9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9b4:	b25b      	sxtb	r3, r3
 800a9b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ba:	d103      	bne.n	800a9c4 <xQueueGenericSend+0x16c>
 800a9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9ca:	b25b      	sxtb	r3, r3
 800a9cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d0:	d103      	bne.n	800a9da <xQueueGenericSend+0x182>
 800a9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9da:	f001 ffdf 	bl	800c99c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9de:	1d3a      	adds	r2, r7, #4
 800a9e0:	f107 0314 	add.w	r3, r7, #20
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f001 f866 	bl	800bab8 <xTaskCheckForTimeOut>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d124      	bne.n	800aa3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a9f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9f4:	f000 fa9e 	bl	800af34 <prvIsQueueFull>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d018      	beq.n	800aa30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa00:	3310      	adds	r3, #16
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	4611      	mov	r1, r2
 800aa06:	4618      	mov	r0, r3
 800aa08:	f000 ff8c 	bl	800b924 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa0e:	f000 fa29 	bl	800ae64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa12:	f000 fdc1 	bl	800b598 <xTaskResumeAll>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f47f af7c 	bne.w	800a916 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aa1e:	4b0c      	ldr	r3, [pc, #48]	; (800aa50 <xQueueGenericSend+0x1f8>)
 800aa20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa24:	601a      	str	r2, [r3, #0]
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	e772      	b.n	800a916 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa32:	f000 fa17 	bl	800ae64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa36:	f000 fdaf 	bl	800b598 <xTaskResumeAll>
 800aa3a:	e76c      	b.n	800a916 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa3e:	f000 fa11 	bl	800ae64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa42:	f000 fda9 	bl	800b598 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa46:	2300      	movs	r3, #0
		}
	}
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3738      	adds	r7, #56	; 0x38
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	e000ed04 	.word	0xe000ed04

0800aa54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b08e      	sub	sp, #56	; 0x38
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	607a      	str	r2, [r7, #4]
 800aa60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10a      	bne.n	800aa82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aa6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa70:	f383 8811 	msr	BASEPRI, r3
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa7e:	bf00      	nop
 800aa80:	e7fe      	b.n	800aa80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d103      	bne.n	800aa90 <xQueueGenericSendFromISR+0x3c>
 800aa88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d101      	bne.n	800aa94 <xQueueGenericSendFromISR+0x40>
 800aa90:	2301      	movs	r3, #1
 800aa92:	e000      	b.n	800aa96 <xQueueGenericSendFromISR+0x42>
 800aa94:	2300      	movs	r3, #0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10a      	bne.n	800aab0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9e:	f383 8811 	msr	BASEPRI, r3
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	f3bf 8f4f 	dsb	sy
 800aaaa:	623b      	str	r3, [r7, #32]
}
 800aaac:	bf00      	nop
 800aaae:	e7fe      	b.n	800aaae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d103      	bne.n	800aabe <xQueueGenericSendFromISR+0x6a>
 800aab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d101      	bne.n	800aac2 <xQueueGenericSendFromISR+0x6e>
 800aabe:	2301      	movs	r3, #1
 800aac0:	e000      	b.n	800aac4 <xQueueGenericSendFromISR+0x70>
 800aac2:	2300      	movs	r3, #0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10a      	bne.n	800aade <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	f383 8811 	msr	BASEPRI, r3
 800aad0:	f3bf 8f6f 	isb	sy
 800aad4:	f3bf 8f4f 	dsb	sy
 800aad8:	61fb      	str	r3, [r7, #28]
}
 800aada:	bf00      	nop
 800aadc:	e7fe      	b.n	800aadc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aade:	f001 ffef 	bl	800cac0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aae2:	f3ef 8211 	mrs	r2, BASEPRI
 800aae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaea:	f383 8811 	msr	BASEPRI, r3
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	61ba      	str	r2, [r7, #24]
 800aaf8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aafa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aafc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d302      	bcc.n	800ab10 <xQueueGenericSendFromISR+0xbc>
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d12c      	bne.n	800ab6a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	68b9      	ldr	r1, [r7, #8]
 800ab1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab20:	f000 f910 	bl	800ad44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab24:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ab28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab2c:	d112      	bne.n	800ab54 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d016      	beq.n	800ab64 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab38:	3324      	adds	r3, #36	; 0x24
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 ff42 	bl	800b9c4 <xTaskRemoveFromEventList>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00e      	beq.n	800ab64 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00b      	beq.n	800ab64 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	601a      	str	r2, [r3, #0]
 800ab52:	e007      	b.n	800ab64 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab58:	3301      	adds	r3, #1
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	b25a      	sxtb	r2, r3
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ab64:	2301      	movs	r3, #1
 800ab66:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ab68:	e001      	b.n	800ab6e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	637b      	str	r3, [r7, #52]	; 0x34
 800ab6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab70:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3738      	adds	r7, #56	; 0x38
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b08c      	sub	sp, #48	; 0x30
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab90:	2300      	movs	r3, #0
 800ab92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10a      	bne.n	800abb4 <xQueueReceive+0x30>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	623b      	str	r3, [r7, #32]
}
 800abb0:	bf00      	nop
 800abb2:	e7fe      	b.n	800abb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d103      	bne.n	800abc2 <xQueueReceive+0x3e>
 800abba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d101      	bne.n	800abc6 <xQueueReceive+0x42>
 800abc2:	2301      	movs	r3, #1
 800abc4:	e000      	b.n	800abc8 <xQueueReceive+0x44>
 800abc6:	2300      	movs	r3, #0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10a      	bne.n	800abe2 <xQueueReceive+0x5e>
	__asm volatile
 800abcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	61fb      	str	r3, [r7, #28]
}
 800abde:	bf00      	nop
 800abe0:	e7fe      	b.n	800abe0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abe2:	f001 f8e9 	bl	800bdb8 <xTaskGetSchedulerState>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d102      	bne.n	800abf2 <xQueueReceive+0x6e>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d101      	bne.n	800abf6 <xQueueReceive+0x72>
 800abf2:	2301      	movs	r3, #1
 800abf4:	e000      	b.n	800abf8 <xQueueReceive+0x74>
 800abf6:	2300      	movs	r3, #0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d10a      	bne.n	800ac12 <xQueueReceive+0x8e>
	__asm volatile
 800abfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	61bb      	str	r3, [r7, #24]
}
 800ac0e:	bf00      	nop
 800ac10:	e7fe      	b.n	800ac10 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac12:	f001 fe93 	bl	800c93c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d01f      	beq.n	800ac62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac22:	68b9      	ldr	r1, [r7, #8]
 800ac24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac26:	f000 f8f7 	bl	800ae18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2c:	1e5a      	subs	r2, r3, #1
 800ac2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00f      	beq.n	800ac5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3c:	3310      	adds	r3, #16
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f000 fec0 	bl	800b9c4 <xTaskRemoveFromEventList>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d007      	beq.n	800ac5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac4a:	4b3d      	ldr	r3, [pc, #244]	; (800ad40 <xQueueReceive+0x1bc>)
 800ac4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac50:	601a      	str	r2, [r3, #0]
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac5a:	f001 fe9f 	bl	800c99c <vPortExitCritical>
				return pdPASS;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e069      	b.n	800ad36 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d103      	bne.n	800ac70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac68:	f001 fe98 	bl	800c99c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	e062      	b.n	800ad36 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d106      	bne.n	800ac84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac76:	f107 0310 	add.w	r3, r7, #16
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 ff06 	bl	800ba8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac80:	2301      	movs	r3, #1
 800ac82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac84:	f001 fe8a 	bl	800c99c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac88:	f000 fc78 	bl	800b57c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac8c:	f001 fe56 	bl	800c93c <vPortEnterCritical>
 800ac90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac96:	b25b      	sxtb	r3, r3
 800ac98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac9c:	d103      	bne.n	800aca6 <xQueueReceive+0x122>
 800ac9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acac:	b25b      	sxtb	r3, r3
 800acae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb2:	d103      	bne.n	800acbc <xQueueReceive+0x138>
 800acb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acbc:	f001 fe6e 	bl	800c99c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acc0:	1d3a      	adds	r2, r7, #4
 800acc2:	f107 0310 	add.w	r3, r7, #16
 800acc6:	4611      	mov	r1, r2
 800acc8:	4618      	mov	r0, r3
 800acca:	f000 fef5 	bl	800bab8 <xTaskCheckForTimeOut>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d123      	bne.n	800ad1c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acd6:	f000 f917 	bl	800af08 <prvIsQueueEmpty>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d017      	beq.n	800ad10 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ace0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace2:	3324      	adds	r3, #36	; 0x24
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	4611      	mov	r1, r2
 800ace8:	4618      	mov	r0, r3
 800acea:	f000 fe1b 	bl	800b924 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800acee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acf0:	f000 f8b8 	bl	800ae64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800acf4:	f000 fc50 	bl	800b598 <xTaskResumeAll>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d189      	bne.n	800ac12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800acfe:	4b10      	ldr	r3, [pc, #64]	; (800ad40 <xQueueReceive+0x1bc>)
 800ad00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad04:	601a      	str	r2, [r3, #0]
 800ad06:	f3bf 8f4f 	dsb	sy
 800ad0a:	f3bf 8f6f 	isb	sy
 800ad0e:	e780      	b.n	800ac12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad12:	f000 f8a7 	bl	800ae64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad16:	f000 fc3f 	bl	800b598 <xTaskResumeAll>
 800ad1a:	e77a      	b.n	800ac12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad1e:	f000 f8a1 	bl	800ae64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad22:	f000 fc39 	bl	800b598 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad28:	f000 f8ee 	bl	800af08 <prvIsQueueEmpty>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f43f af6f 	beq.w	800ac12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3730      	adds	r7, #48	; 0x30
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	e000ed04 	.word	0xe000ed04

0800ad44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b086      	sub	sp, #24
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad50:	2300      	movs	r3, #0
 800ad52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d10d      	bne.n	800ad7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d14d      	bne.n	800ae06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f001 f840 	bl	800bdf4 <xTaskPriorityDisinherit>
 800ad74:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	605a      	str	r2, [r3, #4]
 800ad7c:	e043      	b.n	800ae06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d119      	bne.n	800adb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6898      	ldr	r0, [r3, #8]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	68b9      	ldr	r1, [r7, #8]
 800ad90:	f002 fd92 	bl	800d8b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	689a      	ldr	r2, [r3, #8]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9c:	441a      	add	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	689a      	ldr	r2, [r3, #8]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d32b      	bcc.n	800ae06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	609a      	str	r2, [r3, #8]
 800adb6:	e026      	b.n	800ae06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	68d8      	ldr	r0, [r3, #12]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc0:	461a      	mov	r2, r3
 800adc2:	68b9      	ldr	r1, [r7, #8]
 800adc4:	f002 fd78 	bl	800d8b8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	68da      	ldr	r2, [r3, #12]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add0:	425b      	negs	r3, r3
 800add2:	441a      	add	r2, r3
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	68da      	ldr	r2, [r3, #12]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d207      	bcs.n	800adf4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	685a      	ldr	r2, [r3, #4]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adec:	425b      	negs	r3, r3
 800adee:	441a      	add	r2, r3
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d105      	bne.n	800ae06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d002      	beq.n	800ae06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	3b01      	subs	r3, #1
 800ae04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	1c5a      	adds	r2, r3, #1
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ae0e:	697b      	ldr	r3, [r7, #20]
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3718      	adds	r7, #24
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d018      	beq.n	800ae5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	68da      	ldr	r2, [r3, #12]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae32:	441a      	add	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	68da      	ldr	r2, [r3, #12]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d303      	bcc.n	800ae4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	68d9      	ldr	r1, [r3, #12]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae54:	461a      	mov	r2, r3
 800ae56:	6838      	ldr	r0, [r7, #0]
 800ae58:	f002 fd2e 	bl	800d8b8 <memcpy>
	}
}
 800ae5c:	bf00      	nop
 800ae5e:	3708      	adds	r7, #8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae6c:	f001 fd66 	bl	800c93c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae78:	e011      	b.n	800ae9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d012      	beq.n	800aea8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	3324      	adds	r3, #36	; 0x24
 800ae86:	4618      	mov	r0, r3
 800ae88:	f000 fd9c 	bl	800b9c4 <xTaskRemoveFromEventList>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d001      	beq.n	800ae96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ae92:	f000 fe73 	bl	800bb7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ae96:	7bfb      	ldrb	r3, [r7, #15]
 800ae98:	3b01      	subs	r3, #1
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	dce9      	bgt.n	800ae7a <prvUnlockQueue+0x16>
 800aea6:	e000      	b.n	800aeaa <prvUnlockQueue+0x46>
					break;
 800aea8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	22ff      	movs	r2, #255	; 0xff
 800aeae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aeb2:	f001 fd73 	bl	800c99c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aeb6:	f001 fd41 	bl	800c93c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aec0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aec2:	e011      	b.n	800aee8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d012      	beq.n	800aef2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	3310      	adds	r3, #16
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 fd77 	bl	800b9c4 <xTaskRemoveFromEventList>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d001      	beq.n	800aee0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aedc:	f000 fe4e 	bl	800bb7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aee0:	7bbb      	ldrb	r3, [r7, #14]
 800aee2:	3b01      	subs	r3, #1
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	dce9      	bgt.n	800aec4 <prvUnlockQueue+0x60>
 800aef0:	e000      	b.n	800aef4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aef2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	22ff      	movs	r2, #255	; 0xff
 800aef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aefc:	f001 fd4e 	bl	800c99c <vPortExitCritical>
}
 800af00:	bf00      	nop
 800af02:	3710      	adds	r7, #16
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af10:	f001 fd14 	bl	800c93c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d102      	bne.n	800af22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800af1c:	2301      	movs	r3, #1
 800af1e:	60fb      	str	r3, [r7, #12]
 800af20:	e001      	b.n	800af26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800af22:	2300      	movs	r3, #0
 800af24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af26:	f001 fd39 	bl	800c99c <vPortExitCritical>

	return xReturn;
 800af2a:	68fb      	ldr	r3, [r7, #12]
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af3c:	f001 fcfe 	bl	800c93c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af48:	429a      	cmp	r2, r3
 800af4a:	d102      	bne.n	800af52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af4c:	2301      	movs	r3, #1
 800af4e:	60fb      	str	r3, [r7, #12]
 800af50:	e001      	b.n	800af56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af52:	2300      	movs	r3, #0
 800af54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af56:	f001 fd21 	bl	800c99c <vPortExitCritical>

	return xReturn;
 800af5a:	68fb      	ldr	r3, [r7, #12]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800af64:	b480      	push	{r7}
 800af66:	b085      	sub	sp, #20
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af6e:	2300      	movs	r3, #0
 800af70:	60fb      	str	r3, [r7, #12]
 800af72:	e014      	b.n	800af9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800af74:	4a0e      	ldr	r2, [pc, #56]	; (800afb0 <vQueueAddToRegistry+0x4c>)
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d10b      	bne.n	800af98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800af80:	490b      	ldr	r1, [pc, #44]	; (800afb0 <vQueueAddToRegistry+0x4c>)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	683a      	ldr	r2, [r7, #0]
 800af86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800af8a:	4a09      	ldr	r2, [pc, #36]	; (800afb0 <vQueueAddToRegistry+0x4c>)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	00db      	lsls	r3, r3, #3
 800af90:	4413      	add	r3, r2
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800af96:	e006      	b.n	800afa6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	3301      	adds	r3, #1
 800af9c:	60fb      	str	r3, [r7, #12]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2b07      	cmp	r3, #7
 800afa2:	d9e7      	bls.n	800af74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800afa4:	bf00      	nop
 800afa6:	bf00      	nop
 800afa8:	3714      	adds	r7, #20
 800afaa:	46bd      	mov	sp, r7
 800afac:	bc80      	pop	{r7}
 800afae:	4770      	bx	lr
 800afb0:	20002658 	.word	0x20002658

0800afb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800afc4:	f001 fcba 	bl	800c93c <vPortEnterCritical>
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afce:	b25b      	sxtb	r3, r3
 800afd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd4:	d103      	bne.n	800afde <vQueueWaitForMessageRestricted+0x2a>
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	2200      	movs	r2, #0
 800afda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afe4:	b25b      	sxtb	r3, r3
 800afe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afea:	d103      	bne.n	800aff4 <vQueueWaitForMessageRestricted+0x40>
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	2200      	movs	r2, #0
 800aff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aff4:	f001 fcd2 	bl	800c99c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800affc:	2b00      	cmp	r3, #0
 800affe:	d106      	bne.n	800b00e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	3324      	adds	r3, #36	; 0x24
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	68b9      	ldr	r1, [r7, #8]
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 fcaf 	bl	800b96c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b00e:	6978      	ldr	r0, [r7, #20]
 800b010:	f7ff ff28 	bl	800ae64 <prvUnlockQueue>
	}
 800b014:	bf00      	nop
 800b016:	3718      	adds	r7, #24
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b08e      	sub	sp, #56	; 0x38
 800b020:	af04      	add	r7, sp, #16
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
 800b028:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d10a      	bne.n	800b046 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b034:	f383 8811 	msr	BASEPRI, r3
 800b038:	f3bf 8f6f 	isb	sy
 800b03c:	f3bf 8f4f 	dsb	sy
 800b040:	623b      	str	r3, [r7, #32]
}
 800b042:	bf00      	nop
 800b044:	e7fe      	b.n	800b044 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10a      	bne.n	800b062 <xTaskCreateStatic+0x46>
	__asm volatile
 800b04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b050:	f383 8811 	msr	BASEPRI, r3
 800b054:	f3bf 8f6f 	isb	sy
 800b058:	f3bf 8f4f 	dsb	sy
 800b05c:	61fb      	str	r3, [r7, #28]
}
 800b05e:	bf00      	nop
 800b060:	e7fe      	b.n	800b060 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b062:	235c      	movs	r3, #92	; 0x5c
 800b064:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	2b5c      	cmp	r3, #92	; 0x5c
 800b06a:	d00a      	beq.n	800b082 <xTaskCreateStatic+0x66>
	__asm volatile
 800b06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b070:	f383 8811 	msr	BASEPRI, r3
 800b074:	f3bf 8f6f 	isb	sy
 800b078:	f3bf 8f4f 	dsb	sy
 800b07c:	61bb      	str	r3, [r7, #24]
}
 800b07e:	bf00      	nop
 800b080:	e7fe      	b.n	800b080 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b084:	2b00      	cmp	r3, #0
 800b086:	d01e      	beq.n	800b0c6 <xTaskCreateStatic+0xaa>
 800b088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d01b      	beq.n	800b0c6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b090:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b096:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09a:	2202      	movs	r2, #2
 800b09c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	9303      	str	r3, [sp, #12]
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a6:	9302      	str	r3, [sp, #8]
 800b0a8:	f107 0314 	add.w	r3, r7, #20
 800b0ac:	9301      	str	r3, [sp, #4]
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b0:	9300      	str	r3, [sp, #0]
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	68b9      	ldr	r1, [r7, #8]
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f000 f850 	bl	800b15e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0c0:	f000 f8d4 	bl	800b26c <prvAddNewTaskToReadyList>
 800b0c4:	e001      	b.n	800b0ca <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b0ca:	697b      	ldr	r3, [r7, #20]
	}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3728      	adds	r7, #40	; 0x28
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b08c      	sub	sp, #48	; 0x30
 800b0d8:	af04      	add	r7, sp, #16
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	603b      	str	r3, [r7, #0]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0e4:	88fb      	ldrh	r3, [r7, #6]
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f001 fd27 	bl	800cb3c <pvPortMalloc>
 800b0ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00e      	beq.n	800b114 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b0f6:	205c      	movs	r0, #92	; 0x5c
 800b0f8:	f001 fd20 	bl	800cb3c <pvPortMalloc>
 800b0fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d003      	beq.n	800b10c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	697a      	ldr	r2, [r7, #20]
 800b108:	631a      	str	r2, [r3, #48]	; 0x30
 800b10a:	e005      	b.n	800b118 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b10c:	6978      	ldr	r0, [r7, #20]
 800b10e:	f001 fdd9 	bl	800ccc4 <vPortFree>
 800b112:	e001      	b.n	800b118 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b114:	2300      	movs	r3, #0
 800b116:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d017      	beq.n	800b14e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	2200      	movs	r2, #0
 800b122:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b126:	88fa      	ldrh	r2, [r7, #6]
 800b128:	2300      	movs	r3, #0
 800b12a:	9303      	str	r3, [sp, #12]
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	9302      	str	r3, [sp, #8]
 800b130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b132:	9301      	str	r3, [sp, #4]
 800b134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	68b9      	ldr	r1, [r7, #8]
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f000 f80e 	bl	800b15e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b142:	69f8      	ldr	r0, [r7, #28]
 800b144:	f000 f892 	bl	800b26c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b148:	2301      	movs	r3, #1
 800b14a:	61bb      	str	r3, [r7, #24]
 800b14c:	e002      	b.n	800b154 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b14e:	f04f 33ff 	mov.w	r3, #4294967295
 800b152:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b154:	69bb      	ldr	r3, [r7, #24]
	}
 800b156:	4618      	mov	r0, r3
 800b158:	3720      	adds	r7, #32
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b15e:	b580      	push	{r7, lr}
 800b160:	b088      	sub	sp, #32
 800b162:	af00      	add	r7, sp, #0
 800b164:	60f8      	str	r0, [r7, #12]
 800b166:	60b9      	str	r1, [r7, #8]
 800b168:	607a      	str	r2, [r7, #4]
 800b16a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	461a      	mov	r2, r3
 800b176:	21a5      	movs	r1, #165	; 0xa5
 800b178:	f002 fbc6 	bl	800d908 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b186:	3b01      	subs	r3, #1
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	4413      	add	r3, r2
 800b18c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	f023 0307 	bic.w	r3, r3, #7
 800b194:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	f003 0307 	and.w	r3, r3, #7
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00a      	beq.n	800b1b6 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	617b      	str	r3, [r7, #20]
}
 800b1b2:	bf00      	nop
 800b1b4:	e7fe      	b.n	800b1b4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	61fb      	str	r3, [r7, #28]
 800b1ba:	e012      	b.n	800b1e2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	7819      	ldrb	r1, [r3, #0]
 800b1c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	3334      	adds	r3, #52	; 0x34
 800b1cc:	460a      	mov	r2, r1
 800b1ce:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b1d0:	68ba      	ldr	r2, [r7, #8]
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	4413      	add	r3, r2
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d006      	beq.n	800b1ea <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	61fb      	str	r3, [r7, #28]
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	2b0f      	cmp	r3, #15
 800b1e6:	d9e9      	bls.n	800b1bc <prvInitialiseNewTask+0x5e>
 800b1e8:	e000      	b.n	800b1ec <prvInitialiseNewTask+0x8e>
		{
			break;
 800b1ea:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f6:	2b37      	cmp	r3, #55	; 0x37
 800b1f8:	d901      	bls.n	800b1fe <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b1fa:	2337      	movs	r3, #55	; 0x37
 800b1fc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b202:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b208:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20c:	2200      	movs	r2, #0
 800b20e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b212:	3304      	adds	r3, #4
 800b214:	4618      	mov	r0, r3
 800b216:	f7ff f94e 	bl	800a4b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21c:	3318      	adds	r3, #24
 800b21e:	4618      	mov	r0, r3
 800b220:	f7ff f949 	bl	800a4b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b228:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b232:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b238:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23c:	2200      	movs	r2, #0
 800b23e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b242:	2200      	movs	r2, #0
 800b244:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b248:	683a      	ldr	r2, [r7, #0]
 800b24a:	68f9      	ldr	r1, [r7, #12]
 800b24c:	69b8      	ldr	r0, [r7, #24]
 800b24e:	f001 fa81 	bl	800c754 <pxPortInitialiseStack>
 800b252:	4602      	mov	r2, r0
 800b254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b256:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d002      	beq.n	800b264 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b262:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b264:	bf00      	nop
 800b266:	3720      	adds	r7, #32
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b274:	f001 fb62 	bl	800c93c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b278:	4b2d      	ldr	r3, [pc, #180]	; (800b330 <prvAddNewTaskToReadyList+0xc4>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	3301      	adds	r3, #1
 800b27e:	4a2c      	ldr	r2, [pc, #176]	; (800b330 <prvAddNewTaskToReadyList+0xc4>)
 800b280:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b282:	4b2c      	ldr	r3, [pc, #176]	; (800b334 <prvAddNewTaskToReadyList+0xc8>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d109      	bne.n	800b29e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b28a:	4a2a      	ldr	r2, [pc, #168]	; (800b334 <prvAddNewTaskToReadyList+0xc8>)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b290:	4b27      	ldr	r3, [pc, #156]	; (800b330 <prvAddNewTaskToReadyList+0xc4>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d110      	bne.n	800b2ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b298:	f000 fc94 	bl	800bbc4 <prvInitialiseTaskLists>
 800b29c:	e00d      	b.n	800b2ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b29e:	4b26      	ldr	r3, [pc, #152]	; (800b338 <prvAddNewTaskToReadyList+0xcc>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d109      	bne.n	800b2ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b2a6:	4b23      	ldr	r3, [pc, #140]	; (800b334 <prvAddNewTaskToReadyList+0xc8>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d802      	bhi.n	800b2ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b2b4:	4a1f      	ldr	r2, [pc, #124]	; (800b334 <prvAddNewTaskToReadyList+0xc8>)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b2ba:	4b20      	ldr	r3, [pc, #128]	; (800b33c <prvAddNewTaskToReadyList+0xd0>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	4a1e      	ldr	r2, [pc, #120]	; (800b33c <prvAddNewTaskToReadyList+0xd0>)
 800b2c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b2c4:	4b1d      	ldr	r3, [pc, #116]	; (800b33c <prvAddNewTaskToReadyList+0xd0>)
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d0:	4b1b      	ldr	r3, [pc, #108]	; (800b340 <prvAddNewTaskToReadyList+0xd4>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d903      	bls.n	800b2e0 <prvAddNewTaskToReadyList+0x74>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2dc:	4a18      	ldr	r2, [pc, #96]	; (800b340 <prvAddNewTaskToReadyList+0xd4>)
 800b2de:	6013      	str	r3, [r2, #0]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	4413      	add	r3, r2
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	4a15      	ldr	r2, [pc, #84]	; (800b344 <prvAddNewTaskToReadyList+0xd8>)
 800b2ee:	441a      	add	r2, r3
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	4610      	mov	r0, r2
 800b2f8:	f7ff f8e9 	bl	800a4ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b2fc:	f001 fb4e 	bl	800c99c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b300:	4b0d      	ldr	r3, [pc, #52]	; (800b338 <prvAddNewTaskToReadyList+0xcc>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00e      	beq.n	800b326 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b308:	4b0a      	ldr	r3, [pc, #40]	; (800b334 <prvAddNewTaskToReadyList+0xc8>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b312:	429a      	cmp	r2, r3
 800b314:	d207      	bcs.n	800b326 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b316:	4b0c      	ldr	r3, [pc, #48]	; (800b348 <prvAddNewTaskToReadyList+0xdc>)
 800b318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b31c:	601a      	str	r2, [r3, #0]
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b326:	bf00      	nop
 800b328:	3708      	adds	r7, #8
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	20000d44 	.word	0x20000d44
 800b334:	20000870 	.word	0x20000870
 800b338:	20000d50 	.word	0x20000d50
 800b33c:	20000d60 	.word	0x20000d60
 800b340:	20000d4c 	.word	0x20000d4c
 800b344:	20000874 	.word	0x20000874
 800b348:	e000ed04 	.word	0xe000ed04

0800b34c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b08a      	sub	sp, #40	; 0x28
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b356:	2300      	movs	r3, #0
 800b358:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10a      	bne.n	800b376 <vTaskDelayUntil+0x2a>
	__asm volatile
 800b360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	617b      	str	r3, [r7, #20]
}
 800b372:	bf00      	nop
 800b374:	e7fe      	b.n	800b374 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10a      	bne.n	800b392 <vTaskDelayUntil+0x46>
	__asm volatile
 800b37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b380:	f383 8811 	msr	BASEPRI, r3
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	613b      	str	r3, [r7, #16]
}
 800b38e:	bf00      	nop
 800b390:	e7fe      	b.n	800b390 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b392:	4b2a      	ldr	r3, [pc, #168]	; (800b43c <vTaskDelayUntil+0xf0>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00a      	beq.n	800b3b0 <vTaskDelayUntil+0x64>
	__asm volatile
 800b39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	60fb      	str	r3, [r7, #12]
}
 800b3ac:	bf00      	nop
 800b3ae:	e7fe      	b.n	800b3ae <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b3b0:	f000 f8e4 	bl	800b57c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b3b4:	4b22      	ldr	r3, [pc, #136]	; (800b440 <vTaskDelayUntil+0xf4>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	683a      	ldr	r2, [r7, #0]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6a3a      	ldr	r2, [r7, #32]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d20b      	bcs.n	800b3e6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	69fa      	ldr	r2, [r7, #28]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d211      	bcs.n	800b3fc <vTaskDelayUntil+0xb0>
 800b3d8:	69fa      	ldr	r2, [r7, #28]
 800b3da:	6a3b      	ldr	r3, [r7, #32]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d90d      	bls.n	800b3fc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	627b      	str	r3, [r7, #36]	; 0x24
 800b3e4:	e00a      	b.n	800b3fc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	69fa      	ldr	r2, [r7, #28]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d303      	bcc.n	800b3f8 <vTaskDelayUntil+0xac>
 800b3f0:	69fa      	ldr	r2, [r7, #28]
 800b3f2:	6a3b      	ldr	r3, [r7, #32]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d901      	bls.n	800b3fc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	69fa      	ldr	r2, [r7, #28]
 800b400:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b404:	2b00      	cmp	r3, #0
 800b406:	d006      	beq.n	800b416 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b408:	69fa      	ldr	r2, [r7, #28]
 800b40a:	6a3b      	ldr	r3, [r7, #32]
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	2100      	movs	r1, #0
 800b410:	4618      	mov	r0, r3
 800b412:	f000 fe39 	bl	800c088 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b416:	f000 f8bf 	bl	800b598 <xTaskResumeAll>
 800b41a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d107      	bne.n	800b432 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b422:	4b08      	ldr	r3, [pc, #32]	; (800b444 <vTaskDelayUntil+0xf8>)
 800b424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b428:	601a      	str	r2, [r3, #0]
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b432:	bf00      	nop
 800b434:	3728      	adds	r7, #40	; 0x28
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	20000d6c 	.word	0x20000d6c
 800b440:	20000d48 	.word	0x20000d48
 800b444:	e000ed04 	.word	0xe000ed04

0800b448 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b450:	2300      	movs	r3, #0
 800b452:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d017      	beq.n	800b48a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b45a:	4b13      	ldr	r3, [pc, #76]	; (800b4a8 <vTaskDelay+0x60>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00a      	beq.n	800b478 <vTaskDelay+0x30>
	__asm volatile
 800b462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b466:	f383 8811 	msr	BASEPRI, r3
 800b46a:	f3bf 8f6f 	isb	sy
 800b46e:	f3bf 8f4f 	dsb	sy
 800b472:	60bb      	str	r3, [r7, #8]
}
 800b474:	bf00      	nop
 800b476:	e7fe      	b.n	800b476 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b478:	f000 f880 	bl	800b57c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b47c:	2100      	movs	r1, #0
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 fe02 	bl	800c088 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b484:	f000 f888 	bl	800b598 <xTaskResumeAll>
 800b488:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d107      	bne.n	800b4a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b490:	4b06      	ldr	r3, [pc, #24]	; (800b4ac <vTaskDelay+0x64>)
 800b492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4a0:	bf00      	nop
 800b4a2:	3710      	adds	r7, #16
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	20000d6c 	.word	0x20000d6c
 800b4ac:	e000ed04 	.word	0xe000ed04

0800b4b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b08a      	sub	sp, #40	; 0x28
 800b4b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b4be:	463a      	mov	r2, r7
 800b4c0:	1d39      	adds	r1, r7, #4
 800b4c2:	f107 0308 	add.w	r3, r7, #8
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fe ffa4 	bl	800a414 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b4cc:	6839      	ldr	r1, [r7, #0]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	68ba      	ldr	r2, [r7, #8]
 800b4d2:	9202      	str	r2, [sp, #8]
 800b4d4:	9301      	str	r3, [sp, #4]
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	2300      	movs	r3, #0
 800b4dc:	460a      	mov	r2, r1
 800b4de:	4921      	ldr	r1, [pc, #132]	; (800b564 <vTaskStartScheduler+0xb4>)
 800b4e0:	4821      	ldr	r0, [pc, #132]	; (800b568 <vTaskStartScheduler+0xb8>)
 800b4e2:	f7ff fd9b 	bl	800b01c <xTaskCreateStatic>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	4a20      	ldr	r2, [pc, #128]	; (800b56c <vTaskStartScheduler+0xbc>)
 800b4ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b4ec:	4b1f      	ldr	r3, [pc, #124]	; (800b56c <vTaskStartScheduler+0xbc>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d002      	beq.n	800b4fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	617b      	str	r3, [r7, #20]
 800b4f8:	e001      	b.n	800b4fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d102      	bne.n	800b50a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b504:	f000 fe14 	bl	800c130 <xTimerCreateTimerTask>
 800b508:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d116      	bne.n	800b53e <vTaskStartScheduler+0x8e>
	__asm volatile
 800b510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b514:	f383 8811 	msr	BASEPRI, r3
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	613b      	str	r3, [r7, #16]
}
 800b522:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b524:	4b12      	ldr	r3, [pc, #72]	; (800b570 <vTaskStartScheduler+0xc0>)
 800b526:	f04f 32ff 	mov.w	r2, #4294967295
 800b52a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b52c:	4b11      	ldr	r3, [pc, #68]	; (800b574 <vTaskStartScheduler+0xc4>)
 800b52e:	2201      	movs	r2, #1
 800b530:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b532:	4b11      	ldr	r3, [pc, #68]	; (800b578 <vTaskStartScheduler+0xc8>)
 800b534:	2200      	movs	r2, #0
 800b536:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b538:	f001 f98e 	bl	800c858 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b53c:	e00e      	b.n	800b55c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b544:	d10a      	bne.n	800b55c <vTaskStartScheduler+0xac>
	__asm volatile
 800b546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54a:	f383 8811 	msr	BASEPRI, r3
 800b54e:	f3bf 8f6f 	isb	sy
 800b552:	f3bf 8f4f 	dsb	sy
 800b556:	60fb      	str	r3, [r7, #12]
}
 800b558:	bf00      	nop
 800b55a:	e7fe      	b.n	800b55a <vTaskStartScheduler+0xaa>
}
 800b55c:	bf00      	nop
 800b55e:	3718      	adds	r7, #24
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	0800db2c 	.word	0x0800db2c
 800b568:	0800bb95 	.word	0x0800bb95
 800b56c:	20000d68 	.word	0x20000d68
 800b570:	20000d64 	.word	0x20000d64
 800b574:	20000d50 	.word	0x20000d50
 800b578:	20000d48 	.word	0x20000d48

0800b57c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b57c:	b480      	push	{r7}
 800b57e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b580:	4b04      	ldr	r3, [pc, #16]	; (800b594 <vTaskSuspendAll+0x18>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	3301      	adds	r3, #1
 800b586:	4a03      	ldr	r2, [pc, #12]	; (800b594 <vTaskSuspendAll+0x18>)
 800b588:	6013      	str	r3, [r2, #0]
}
 800b58a:	bf00      	nop
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bc80      	pop	{r7}
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	20000d6c 	.word	0x20000d6c

0800b598 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5a6:	4b42      	ldr	r3, [pc, #264]	; (800b6b0 <xTaskResumeAll+0x118>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d10a      	bne.n	800b5c4 <xTaskResumeAll+0x2c>
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	603b      	str	r3, [r7, #0]
}
 800b5c0:	bf00      	nop
 800b5c2:	e7fe      	b.n	800b5c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b5c4:	f001 f9ba 	bl	800c93c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b5c8:	4b39      	ldr	r3, [pc, #228]	; (800b6b0 <xTaskResumeAll+0x118>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	4a38      	ldr	r2, [pc, #224]	; (800b6b0 <xTaskResumeAll+0x118>)
 800b5d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5d2:	4b37      	ldr	r3, [pc, #220]	; (800b6b0 <xTaskResumeAll+0x118>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d162      	bne.n	800b6a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b5da:	4b36      	ldr	r3, [pc, #216]	; (800b6b4 <xTaskResumeAll+0x11c>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d05e      	beq.n	800b6a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5e2:	e02f      	b.n	800b644 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b5e4:	4b34      	ldr	r3, [pc, #208]	; (800b6b8 <xTaskResumeAll+0x120>)
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	3318      	adds	r3, #24
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7fe ffc7 	bl	800a584 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	3304      	adds	r3, #4
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fe ffc2 	bl	800a584 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b604:	4b2d      	ldr	r3, [pc, #180]	; (800b6bc <xTaskResumeAll+0x124>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d903      	bls.n	800b614 <xTaskResumeAll+0x7c>
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b610:	4a2a      	ldr	r2, [pc, #168]	; (800b6bc <xTaskResumeAll+0x124>)
 800b612:	6013      	str	r3, [r2, #0]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b618:	4613      	mov	r3, r2
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	4413      	add	r3, r2
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4a27      	ldr	r2, [pc, #156]	; (800b6c0 <xTaskResumeAll+0x128>)
 800b622:	441a      	add	r2, r3
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	3304      	adds	r3, #4
 800b628:	4619      	mov	r1, r3
 800b62a:	4610      	mov	r0, r2
 800b62c:	f7fe ff4f 	bl	800a4ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b634:	4b23      	ldr	r3, [pc, #140]	; (800b6c4 <xTaskResumeAll+0x12c>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d302      	bcc.n	800b644 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b63e:	4b22      	ldr	r3, [pc, #136]	; (800b6c8 <xTaskResumeAll+0x130>)
 800b640:	2201      	movs	r2, #1
 800b642:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b644:	4b1c      	ldr	r3, [pc, #112]	; (800b6b8 <xTaskResumeAll+0x120>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1cb      	bne.n	800b5e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d001      	beq.n	800b656 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b652:	f000 fb8d 	bl	800bd70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b656:	4b1d      	ldr	r3, [pc, #116]	; (800b6cc <xTaskResumeAll+0x134>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d010      	beq.n	800b684 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b662:	f000 f845 	bl	800b6f0 <xTaskIncrementTick>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d002      	beq.n	800b672 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b66c:	4b16      	ldr	r3, [pc, #88]	; (800b6c8 <xTaskResumeAll+0x130>)
 800b66e:	2201      	movs	r2, #1
 800b670:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	3b01      	subs	r3, #1
 800b676:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1f1      	bne.n	800b662 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b67e:	4b13      	ldr	r3, [pc, #76]	; (800b6cc <xTaskResumeAll+0x134>)
 800b680:	2200      	movs	r2, #0
 800b682:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b684:	4b10      	ldr	r3, [pc, #64]	; (800b6c8 <xTaskResumeAll+0x130>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d009      	beq.n	800b6a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b68c:	2301      	movs	r3, #1
 800b68e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b690:	4b0f      	ldr	r3, [pc, #60]	; (800b6d0 <xTaskResumeAll+0x138>)
 800b692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b696:	601a      	str	r2, [r3, #0]
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6a0:	f001 f97c 	bl	800c99c <vPortExitCritical>

	return xAlreadyYielded;
 800b6a4:	68bb      	ldr	r3, [r7, #8]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	20000d6c 	.word	0x20000d6c
 800b6b4:	20000d44 	.word	0x20000d44
 800b6b8:	20000d04 	.word	0x20000d04
 800b6bc:	20000d4c 	.word	0x20000d4c
 800b6c0:	20000874 	.word	0x20000874
 800b6c4:	20000870 	.word	0x20000870
 800b6c8:	20000d58 	.word	0x20000d58
 800b6cc:	20000d54 	.word	0x20000d54
 800b6d0:	e000ed04 	.word	0xe000ed04

0800b6d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b6da:	4b04      	ldr	r3, [pc, #16]	; (800b6ec <xTaskGetTickCount+0x18>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b6e0:	687b      	ldr	r3, [r7, #4]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	370c      	adds	r7, #12
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bc80      	pop	{r7}
 800b6ea:	4770      	bx	lr
 800b6ec:	20000d48 	.word	0x20000d48

0800b6f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6fa:	4b51      	ldr	r3, [pc, #324]	; (800b840 <xTaskIncrementTick+0x150>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	f040 808e 	bne.w	800b820 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b704:	4b4f      	ldr	r3, [pc, #316]	; (800b844 <xTaskIncrementTick+0x154>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	3301      	adds	r3, #1
 800b70a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b70c:	4a4d      	ldr	r2, [pc, #308]	; (800b844 <xTaskIncrementTick+0x154>)
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d120      	bne.n	800b75a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b718:	4b4b      	ldr	r3, [pc, #300]	; (800b848 <xTaskIncrementTick+0x158>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00a      	beq.n	800b738 <xTaskIncrementTick+0x48>
	__asm volatile
 800b722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b726:	f383 8811 	msr	BASEPRI, r3
 800b72a:	f3bf 8f6f 	isb	sy
 800b72e:	f3bf 8f4f 	dsb	sy
 800b732:	603b      	str	r3, [r7, #0]
}
 800b734:	bf00      	nop
 800b736:	e7fe      	b.n	800b736 <xTaskIncrementTick+0x46>
 800b738:	4b43      	ldr	r3, [pc, #268]	; (800b848 <xTaskIncrementTick+0x158>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	60fb      	str	r3, [r7, #12]
 800b73e:	4b43      	ldr	r3, [pc, #268]	; (800b84c <xTaskIncrementTick+0x15c>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a41      	ldr	r2, [pc, #260]	; (800b848 <xTaskIncrementTick+0x158>)
 800b744:	6013      	str	r3, [r2, #0]
 800b746:	4a41      	ldr	r2, [pc, #260]	; (800b84c <xTaskIncrementTick+0x15c>)
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6013      	str	r3, [r2, #0]
 800b74c:	4b40      	ldr	r3, [pc, #256]	; (800b850 <xTaskIncrementTick+0x160>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	3301      	adds	r3, #1
 800b752:	4a3f      	ldr	r2, [pc, #252]	; (800b850 <xTaskIncrementTick+0x160>)
 800b754:	6013      	str	r3, [r2, #0]
 800b756:	f000 fb0b 	bl	800bd70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b75a:	4b3e      	ldr	r3, [pc, #248]	; (800b854 <xTaskIncrementTick+0x164>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	693a      	ldr	r2, [r7, #16]
 800b760:	429a      	cmp	r2, r3
 800b762:	d34e      	bcc.n	800b802 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b764:	4b38      	ldr	r3, [pc, #224]	; (800b848 <xTaskIncrementTick+0x158>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d101      	bne.n	800b772 <xTaskIncrementTick+0x82>
 800b76e:	2301      	movs	r3, #1
 800b770:	e000      	b.n	800b774 <xTaskIncrementTick+0x84>
 800b772:	2300      	movs	r3, #0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d004      	beq.n	800b782 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b778:	4b36      	ldr	r3, [pc, #216]	; (800b854 <xTaskIncrementTick+0x164>)
 800b77a:	f04f 32ff 	mov.w	r2, #4294967295
 800b77e:	601a      	str	r2, [r3, #0]
					break;
 800b780:	e03f      	b.n	800b802 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b782:	4b31      	ldr	r3, [pc, #196]	; (800b848 <xTaskIncrementTick+0x158>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b792:	693a      	ldr	r2, [r7, #16]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	429a      	cmp	r2, r3
 800b798:	d203      	bcs.n	800b7a2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b79a:	4a2e      	ldr	r2, [pc, #184]	; (800b854 <xTaskIncrementTick+0x164>)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6013      	str	r3, [r2, #0]
						break;
 800b7a0:	e02f      	b.n	800b802 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	3304      	adds	r3, #4
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fe feec 	bl	800a584 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d004      	beq.n	800b7be <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	3318      	adds	r3, #24
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7fe fee3 	bl	800a584 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c2:	4b25      	ldr	r3, [pc, #148]	; (800b858 <xTaskIncrementTick+0x168>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d903      	bls.n	800b7d2 <xTaskIncrementTick+0xe2>
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ce:	4a22      	ldr	r2, [pc, #136]	; (800b858 <xTaskIncrementTick+0x168>)
 800b7d0:	6013      	str	r3, [r2, #0]
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	4413      	add	r3, r2
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	4a1f      	ldr	r2, [pc, #124]	; (800b85c <xTaskIncrementTick+0x16c>)
 800b7e0:	441a      	add	r2, r3
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	3304      	adds	r3, #4
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	4610      	mov	r0, r2
 800b7ea:	f7fe fe70 	bl	800a4ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f2:	4b1b      	ldr	r3, [pc, #108]	; (800b860 <xTaskIncrementTick+0x170>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d3b3      	bcc.n	800b764 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b800:	e7b0      	b.n	800b764 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b802:	4b17      	ldr	r3, [pc, #92]	; (800b860 <xTaskIncrementTick+0x170>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b808:	4914      	ldr	r1, [pc, #80]	; (800b85c <xTaskIncrementTick+0x16c>)
 800b80a:	4613      	mov	r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	4413      	add	r3, r2
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	440b      	add	r3, r1
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	2b01      	cmp	r3, #1
 800b818:	d907      	bls.n	800b82a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b81a:	2301      	movs	r3, #1
 800b81c:	617b      	str	r3, [r7, #20]
 800b81e:	e004      	b.n	800b82a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b820:	4b10      	ldr	r3, [pc, #64]	; (800b864 <xTaskIncrementTick+0x174>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	3301      	adds	r3, #1
 800b826:	4a0f      	ldr	r2, [pc, #60]	; (800b864 <xTaskIncrementTick+0x174>)
 800b828:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b82a:	4b0f      	ldr	r3, [pc, #60]	; (800b868 <xTaskIncrementTick+0x178>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d001      	beq.n	800b836 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b832:	2301      	movs	r3, #1
 800b834:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b836:	697b      	ldr	r3, [r7, #20]
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3718      	adds	r7, #24
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	20000d6c 	.word	0x20000d6c
 800b844:	20000d48 	.word	0x20000d48
 800b848:	20000cfc 	.word	0x20000cfc
 800b84c:	20000d00 	.word	0x20000d00
 800b850:	20000d5c 	.word	0x20000d5c
 800b854:	20000d64 	.word	0x20000d64
 800b858:	20000d4c 	.word	0x20000d4c
 800b85c:	20000874 	.word	0x20000874
 800b860:	20000870 	.word	0x20000870
 800b864:	20000d54 	.word	0x20000d54
 800b868:	20000d58 	.word	0x20000d58

0800b86c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b86c:	b480      	push	{r7}
 800b86e:	b085      	sub	sp, #20
 800b870:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b872:	4b27      	ldr	r3, [pc, #156]	; (800b910 <vTaskSwitchContext+0xa4>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d003      	beq.n	800b882 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b87a:	4b26      	ldr	r3, [pc, #152]	; (800b914 <vTaskSwitchContext+0xa8>)
 800b87c:	2201      	movs	r2, #1
 800b87e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b880:	e041      	b.n	800b906 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b882:	4b24      	ldr	r3, [pc, #144]	; (800b914 <vTaskSwitchContext+0xa8>)
 800b884:	2200      	movs	r2, #0
 800b886:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b888:	4b23      	ldr	r3, [pc, #140]	; (800b918 <vTaskSwitchContext+0xac>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	60fb      	str	r3, [r7, #12]
 800b88e:	e010      	b.n	800b8b2 <vTaskSwitchContext+0x46>
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d10a      	bne.n	800b8ac <vTaskSwitchContext+0x40>
	__asm volatile
 800b896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89a:	f383 8811 	msr	BASEPRI, r3
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	607b      	str	r3, [r7, #4]
}
 800b8a8:	bf00      	nop
 800b8aa:	e7fe      	b.n	800b8aa <vTaskSwitchContext+0x3e>
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	3b01      	subs	r3, #1
 800b8b0:	60fb      	str	r3, [r7, #12]
 800b8b2:	491a      	ldr	r1, [pc, #104]	; (800b91c <vTaskSwitchContext+0xb0>)
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	4413      	add	r3, r2
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	440b      	add	r3, r1
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d0e4      	beq.n	800b890 <vTaskSwitchContext+0x24>
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	4413      	add	r3, r2
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	4a12      	ldr	r2, [pc, #72]	; (800b91c <vTaskSwitchContext+0xb0>)
 800b8d2:	4413      	add	r3, r2
 800b8d4:	60bb      	str	r3, [r7, #8]
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	685a      	ldr	r2, [r3, #4]
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	605a      	str	r2, [r3, #4]
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	685a      	ldr	r2, [r3, #4]
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	3308      	adds	r3, #8
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d104      	bne.n	800b8f6 <vTaskSwitchContext+0x8a>
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	685a      	ldr	r2, [r3, #4]
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	605a      	str	r2, [r3, #4]
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	4a08      	ldr	r2, [pc, #32]	; (800b920 <vTaskSwitchContext+0xb4>)
 800b8fe:	6013      	str	r3, [r2, #0]
 800b900:	4a05      	ldr	r2, [pc, #20]	; (800b918 <vTaskSwitchContext+0xac>)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6013      	str	r3, [r2, #0]
}
 800b906:	bf00      	nop
 800b908:	3714      	adds	r7, #20
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bc80      	pop	{r7}
 800b90e:	4770      	bx	lr
 800b910:	20000d6c 	.word	0x20000d6c
 800b914:	20000d58 	.word	0x20000d58
 800b918:	20000d4c 	.word	0x20000d4c
 800b91c:	20000874 	.word	0x20000874
 800b920:	20000870 	.word	0x20000870

0800b924 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d10a      	bne.n	800b94a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	60fb      	str	r3, [r7, #12]
}
 800b946:	bf00      	nop
 800b948:	e7fe      	b.n	800b948 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b94a:	4b07      	ldr	r3, [pc, #28]	; (800b968 <vTaskPlaceOnEventList+0x44>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	3318      	adds	r3, #24
 800b950:	4619      	mov	r1, r3
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f7fe fdde 	bl	800a514 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b958:	2101      	movs	r1, #1
 800b95a:	6838      	ldr	r0, [r7, #0]
 800b95c:	f000 fb94 	bl	800c088 <prvAddCurrentTaskToDelayedList>
}
 800b960:	bf00      	nop
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	20000870 	.word	0x20000870

0800b96c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af00      	add	r7, sp, #0
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	60b9      	str	r1, [r7, #8]
 800b976:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d10a      	bne.n	800b994 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	617b      	str	r3, [r7, #20]
}
 800b990:	bf00      	nop
 800b992:	e7fe      	b.n	800b992 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b994:	4b0a      	ldr	r3, [pc, #40]	; (800b9c0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	3318      	adds	r3, #24
 800b99a:	4619      	mov	r1, r3
 800b99c:	68f8      	ldr	r0, [r7, #12]
 800b99e:	f7fe fd96 	bl	800a4ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b9ae:	6879      	ldr	r1, [r7, #4]
 800b9b0:	68b8      	ldr	r0, [r7, #8]
 800b9b2:	f000 fb69 	bl	800c088 <prvAddCurrentTaskToDelayedList>
	}
 800b9b6:	bf00      	nop
 800b9b8:	3718      	adds	r7, #24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	20000870 	.word	0x20000870

0800b9c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b086      	sub	sp, #24
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10a      	bne.n	800b9f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9de:	f383 8811 	msr	BASEPRI, r3
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	f3bf 8f4f 	dsb	sy
 800b9ea:	60fb      	str	r3, [r7, #12]
}
 800b9ec:	bf00      	nop
 800b9ee:	e7fe      	b.n	800b9ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	3318      	adds	r3, #24
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7fe fdc5 	bl	800a584 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9fa:	4b1e      	ldr	r3, [pc, #120]	; (800ba74 <xTaskRemoveFromEventList+0xb0>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d11d      	bne.n	800ba3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	3304      	adds	r3, #4
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fe fdbc 	bl	800a584 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba10:	4b19      	ldr	r3, [pc, #100]	; (800ba78 <xTaskRemoveFromEventList+0xb4>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d903      	bls.n	800ba20 <xTaskRemoveFromEventList+0x5c>
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1c:	4a16      	ldr	r2, [pc, #88]	; (800ba78 <xTaskRemoveFromEventList+0xb4>)
 800ba1e:	6013      	str	r3, [r2, #0]
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba24:	4613      	mov	r3, r2
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	4413      	add	r3, r2
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	4a13      	ldr	r2, [pc, #76]	; (800ba7c <xTaskRemoveFromEventList+0xb8>)
 800ba2e:	441a      	add	r2, r3
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	3304      	adds	r3, #4
 800ba34:	4619      	mov	r1, r3
 800ba36:	4610      	mov	r0, r2
 800ba38:	f7fe fd49 	bl	800a4ce <vListInsertEnd>
 800ba3c:	e005      	b.n	800ba4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	3318      	adds	r3, #24
 800ba42:	4619      	mov	r1, r3
 800ba44:	480e      	ldr	r0, [pc, #56]	; (800ba80 <xTaskRemoveFromEventList+0xbc>)
 800ba46:	f7fe fd42 	bl	800a4ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4e:	4b0d      	ldr	r3, [pc, #52]	; (800ba84 <xTaskRemoveFromEventList+0xc0>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d905      	bls.n	800ba64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba5c:	4b0a      	ldr	r3, [pc, #40]	; (800ba88 <xTaskRemoveFromEventList+0xc4>)
 800ba5e:	2201      	movs	r2, #1
 800ba60:	601a      	str	r2, [r3, #0]
 800ba62:	e001      	b.n	800ba68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ba64:	2300      	movs	r3, #0
 800ba66:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800ba68:	697b      	ldr	r3, [r7, #20]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3718      	adds	r7, #24
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	20000d6c 	.word	0x20000d6c
 800ba78:	20000d4c 	.word	0x20000d4c
 800ba7c:	20000874 	.word	0x20000874
 800ba80:	20000d04 	.word	0x20000d04
 800ba84:	20000870 	.word	0x20000870
 800ba88:	20000d58 	.word	0x20000d58

0800ba8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba94:	4b06      	ldr	r3, [pc, #24]	; (800bab0 <vTaskInternalSetTimeOutState+0x24>)
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba9c:	4b05      	ldr	r3, [pc, #20]	; (800bab4 <vTaskInternalSetTimeOutState+0x28>)
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	605a      	str	r2, [r3, #4]
}
 800baa4:	bf00      	nop
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bc80      	pop	{r7}
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop
 800bab0:	20000d5c 	.word	0x20000d5c
 800bab4:	20000d48 	.word	0x20000d48

0800bab8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b088      	sub	sp, #32
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10a      	bne.n	800bade <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	613b      	str	r3, [r7, #16]
}
 800bada:	bf00      	nop
 800badc:	e7fe      	b.n	800badc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10a      	bne.n	800bafa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae8:	f383 8811 	msr	BASEPRI, r3
 800baec:	f3bf 8f6f 	isb	sy
 800baf0:	f3bf 8f4f 	dsb	sy
 800baf4:	60fb      	str	r3, [r7, #12]
}
 800baf6:	bf00      	nop
 800baf8:	e7fe      	b.n	800baf8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bafa:	f000 ff1f 	bl	800c93c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bafe:	4b1d      	ldr	r3, [pc, #116]	; (800bb74 <xTaskCheckForTimeOut+0xbc>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	69ba      	ldr	r2, [r7, #24]
 800bb0a:	1ad3      	subs	r3, r2, r3
 800bb0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb16:	d102      	bne.n	800bb1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	61fb      	str	r3, [r7, #28]
 800bb1c:	e023      	b.n	800bb66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	4b15      	ldr	r3, [pc, #84]	; (800bb78 <xTaskCheckForTimeOut+0xc0>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d007      	beq.n	800bb3a <xTaskCheckForTimeOut+0x82>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	69ba      	ldr	r2, [r7, #24]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d302      	bcc.n	800bb3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb34:	2301      	movs	r3, #1
 800bb36:	61fb      	str	r3, [r7, #28]
 800bb38:	e015      	b.n	800bb66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	697a      	ldr	r2, [r7, #20]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d20b      	bcs.n	800bb5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	1ad2      	subs	r2, r2, r3
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f7ff ff9b 	bl	800ba8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb56:	2300      	movs	r3, #0
 800bb58:	61fb      	str	r3, [r7, #28]
 800bb5a:	e004      	b.n	800bb66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb62:	2301      	movs	r3, #1
 800bb64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb66:	f000 ff19 	bl	800c99c <vPortExitCritical>

	return xReturn;
 800bb6a:	69fb      	ldr	r3, [r7, #28]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3720      	adds	r7, #32
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	20000d48 	.word	0x20000d48
 800bb78:	20000d5c 	.word	0x20000d5c

0800bb7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb80:	4b03      	ldr	r3, [pc, #12]	; (800bb90 <vTaskMissedYield+0x14>)
 800bb82:	2201      	movs	r2, #1
 800bb84:	601a      	str	r2, [r3, #0]
}
 800bb86:	bf00      	nop
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bc80      	pop	{r7}
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop
 800bb90:	20000d58 	.word	0x20000d58

0800bb94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb9c:	f000 f852 	bl	800bc44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bba0:	4b06      	ldr	r3, [pc, #24]	; (800bbbc <prvIdleTask+0x28>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d9f9      	bls.n	800bb9c <prvIdleTask+0x8>
			{
				taskYIELD();
 800bba8:	4b05      	ldr	r3, [pc, #20]	; (800bbc0 <prvIdleTask+0x2c>)
 800bbaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbae:	601a      	str	r2, [r3, #0]
 800bbb0:	f3bf 8f4f 	dsb	sy
 800bbb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bbb8:	e7f0      	b.n	800bb9c <prvIdleTask+0x8>
 800bbba:	bf00      	nop
 800bbbc:	20000874 	.word	0x20000874
 800bbc0:	e000ed04 	.word	0xe000ed04

0800bbc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbca:	2300      	movs	r3, #0
 800bbcc:	607b      	str	r3, [r7, #4]
 800bbce:	e00c      	b.n	800bbea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	4413      	add	r3, r2
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4a12      	ldr	r2, [pc, #72]	; (800bc24 <prvInitialiseTaskLists+0x60>)
 800bbdc:	4413      	add	r3, r2
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7fe fc4a 	bl	800a478 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	607b      	str	r3, [r7, #4]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2b37      	cmp	r3, #55	; 0x37
 800bbee:	d9ef      	bls.n	800bbd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bbf0:	480d      	ldr	r0, [pc, #52]	; (800bc28 <prvInitialiseTaskLists+0x64>)
 800bbf2:	f7fe fc41 	bl	800a478 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bbf6:	480d      	ldr	r0, [pc, #52]	; (800bc2c <prvInitialiseTaskLists+0x68>)
 800bbf8:	f7fe fc3e 	bl	800a478 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bbfc:	480c      	ldr	r0, [pc, #48]	; (800bc30 <prvInitialiseTaskLists+0x6c>)
 800bbfe:	f7fe fc3b 	bl	800a478 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc02:	480c      	ldr	r0, [pc, #48]	; (800bc34 <prvInitialiseTaskLists+0x70>)
 800bc04:	f7fe fc38 	bl	800a478 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc08:	480b      	ldr	r0, [pc, #44]	; (800bc38 <prvInitialiseTaskLists+0x74>)
 800bc0a:	f7fe fc35 	bl	800a478 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc0e:	4b0b      	ldr	r3, [pc, #44]	; (800bc3c <prvInitialiseTaskLists+0x78>)
 800bc10:	4a05      	ldr	r2, [pc, #20]	; (800bc28 <prvInitialiseTaskLists+0x64>)
 800bc12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc14:	4b0a      	ldr	r3, [pc, #40]	; (800bc40 <prvInitialiseTaskLists+0x7c>)
 800bc16:	4a05      	ldr	r2, [pc, #20]	; (800bc2c <prvInitialiseTaskLists+0x68>)
 800bc18:	601a      	str	r2, [r3, #0]
}
 800bc1a:	bf00      	nop
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	20000874 	.word	0x20000874
 800bc28:	20000cd4 	.word	0x20000cd4
 800bc2c:	20000ce8 	.word	0x20000ce8
 800bc30:	20000d04 	.word	0x20000d04
 800bc34:	20000d18 	.word	0x20000d18
 800bc38:	20000d30 	.word	0x20000d30
 800bc3c:	20000cfc 	.word	0x20000cfc
 800bc40:	20000d00 	.word	0x20000d00

0800bc44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc4a:	e019      	b.n	800bc80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc4c:	f000 fe76 	bl	800c93c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bc50:	4b10      	ldr	r3, [pc, #64]	; (800bc94 <prvCheckTasksWaitingTermination+0x50>)
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fe fc91 	bl	800a584 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc62:	4b0d      	ldr	r3, [pc, #52]	; (800bc98 <prvCheckTasksWaitingTermination+0x54>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	3b01      	subs	r3, #1
 800bc68:	4a0b      	ldr	r2, [pc, #44]	; (800bc98 <prvCheckTasksWaitingTermination+0x54>)
 800bc6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc6c:	4b0b      	ldr	r3, [pc, #44]	; (800bc9c <prvCheckTasksWaitingTermination+0x58>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	3b01      	subs	r3, #1
 800bc72:	4a0a      	ldr	r2, [pc, #40]	; (800bc9c <prvCheckTasksWaitingTermination+0x58>)
 800bc74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc76:	f000 fe91 	bl	800c99c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 f848 	bl	800bd10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc80:	4b06      	ldr	r3, [pc, #24]	; (800bc9c <prvCheckTasksWaitingTermination+0x58>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d1e1      	bne.n	800bc4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc88:	bf00      	nop
 800bc8a:	bf00      	nop
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	20000d18 	.word	0x20000d18
 800bc98:	20000d44 	.word	0x20000d44
 800bc9c:	20000d2c 	.word	0x20000d2c

0800bca0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800bcac:	e005      	b.n	800bcba <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	607b      	str	r3, [r7, #4]
			ulCount++;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	2ba5      	cmp	r3, #165	; 0xa5
 800bcc0:	d0f5      	beq.n	800bcae <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	089b      	lsrs	r3, r3, #2
 800bcc6:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	b29b      	uxth	r3, r3
	}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3714      	adds	r7, #20
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bc80      	pop	{r7}
 800bcd4:	4770      	bx	lr
	...

0800bcd8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d102      	bne.n	800bcec <uxTaskGetStackHighWaterMark+0x14>
 800bce6:	4b09      	ldr	r3, [pc, #36]	; (800bd0c <uxTaskGetStackHighWaterMark+0x34>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	e000      	b.n	800bcee <uxTaskGetStackHighWaterMark+0x16>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcf4:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800bcf6:	6938      	ldr	r0, [r7, #16]
 800bcf8:	f7ff ffd2 	bl	800bca0 <prvTaskCheckFreeStackSpace>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800bd00:	68fb      	ldr	r3, [r7, #12]
	}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3718      	adds	r7, #24
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	20000870 	.word	0x20000870

0800bd10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d108      	bne.n	800bd34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd26:	4618      	mov	r0, r3
 800bd28:	f000 ffcc 	bl	800ccc4 <vPortFree>
				vPortFree( pxTCB );
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 ffc9 	bl	800ccc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bd32:	e018      	b.n	800bd66 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d103      	bne.n	800bd46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 ffc0 	bl	800ccc4 <vPortFree>
	}
 800bd44:	e00f      	b.n	800bd66 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bd4c:	2b02      	cmp	r3, #2
 800bd4e:	d00a      	beq.n	800bd66 <prvDeleteTCB+0x56>
	__asm volatile
 800bd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd54:	f383 8811 	msr	BASEPRI, r3
 800bd58:	f3bf 8f6f 	isb	sy
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	60fb      	str	r3, [r7, #12]
}
 800bd62:	bf00      	nop
 800bd64:	e7fe      	b.n	800bd64 <prvDeleteTCB+0x54>
	}
 800bd66:	bf00      	nop
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
	...

0800bd70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd76:	4b0e      	ldr	r3, [pc, #56]	; (800bdb0 <prvResetNextTaskUnblockTime+0x40>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d101      	bne.n	800bd84 <prvResetNextTaskUnblockTime+0x14>
 800bd80:	2301      	movs	r3, #1
 800bd82:	e000      	b.n	800bd86 <prvResetNextTaskUnblockTime+0x16>
 800bd84:	2300      	movs	r3, #0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d004      	beq.n	800bd94 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd8a:	4b0a      	ldr	r3, [pc, #40]	; (800bdb4 <prvResetNextTaskUnblockTime+0x44>)
 800bd8c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd90:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bd92:	e008      	b.n	800bda6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bd94:	4b06      	ldr	r3, [pc, #24]	; (800bdb0 <prvResetNextTaskUnblockTime+0x40>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	4a04      	ldr	r2, [pc, #16]	; (800bdb4 <prvResetNextTaskUnblockTime+0x44>)
 800bda4:	6013      	str	r3, [r2, #0]
}
 800bda6:	bf00      	nop
 800bda8:	370c      	adds	r7, #12
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bc80      	pop	{r7}
 800bdae:	4770      	bx	lr
 800bdb0:	20000cfc 	.word	0x20000cfc
 800bdb4:	20000d64 	.word	0x20000d64

0800bdb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bdbe:	4b0b      	ldr	r3, [pc, #44]	; (800bdec <xTaskGetSchedulerState+0x34>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d102      	bne.n	800bdcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	607b      	str	r3, [r7, #4]
 800bdca:	e008      	b.n	800bdde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdcc:	4b08      	ldr	r3, [pc, #32]	; (800bdf0 <xTaskGetSchedulerState+0x38>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d102      	bne.n	800bdda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bdd4:	2302      	movs	r3, #2
 800bdd6:	607b      	str	r3, [r7, #4]
 800bdd8:	e001      	b.n	800bdde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bdda:	2300      	movs	r3, #0
 800bddc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bdde:	687b      	ldr	r3, [r7, #4]
	}
 800bde0:	4618      	mov	r0, r3
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bc80      	pop	{r7}
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop
 800bdec:	20000d50 	.word	0x20000d50
 800bdf0:	20000d6c 	.word	0x20000d6c

0800bdf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b086      	sub	sp, #24
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be00:	2300      	movs	r3, #0
 800be02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d056      	beq.n	800beb8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be0a:	4b2e      	ldr	r3, [pc, #184]	; (800bec4 <xTaskPriorityDisinherit+0xd0>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	693a      	ldr	r2, [r7, #16]
 800be10:	429a      	cmp	r2, r3
 800be12:	d00a      	beq.n	800be2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800be14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be18:	f383 8811 	msr	BASEPRI, r3
 800be1c:	f3bf 8f6f 	isb	sy
 800be20:	f3bf 8f4f 	dsb	sy
 800be24:	60fb      	str	r3, [r7, #12]
}
 800be26:	bf00      	nop
 800be28:	e7fe      	b.n	800be28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d10a      	bne.n	800be48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800be32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be36:	f383 8811 	msr	BASEPRI, r3
 800be3a:	f3bf 8f6f 	isb	sy
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	60bb      	str	r3, [r7, #8]
}
 800be44:	bf00      	nop
 800be46:	e7fe      	b.n	800be46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be4c:	1e5a      	subs	r2, r3, #1
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d02c      	beq.n	800beb8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be62:	2b00      	cmp	r3, #0
 800be64:	d128      	bne.n	800beb8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	3304      	adds	r3, #4
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7fe fb8a 	bl	800a584 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be88:	4b0f      	ldr	r3, [pc, #60]	; (800bec8 <xTaskPriorityDisinherit+0xd4>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d903      	bls.n	800be98 <xTaskPriorityDisinherit+0xa4>
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be94:	4a0c      	ldr	r2, [pc, #48]	; (800bec8 <xTaskPriorityDisinherit+0xd4>)
 800be96:	6013      	str	r3, [r2, #0]
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be9c:	4613      	mov	r3, r2
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	4413      	add	r3, r2
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	4a09      	ldr	r2, [pc, #36]	; (800becc <xTaskPriorityDisinherit+0xd8>)
 800bea6:	441a      	add	r2, r3
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	3304      	adds	r3, #4
 800beac:	4619      	mov	r1, r3
 800beae:	4610      	mov	r0, r2
 800beb0:	f7fe fb0d 	bl	800a4ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800beb4:	2301      	movs	r3, #1
 800beb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800beb8:	697b      	ldr	r3, [r7, #20]
	}
 800beba:	4618      	mov	r0, r3
 800bebc:	3718      	adds	r7, #24
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	20000870 	.word	0x20000870
 800bec8:	20000d4c 	.word	0x20000d4c
 800becc:	20000874 	.word	0x20000874

0800bed0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800beda:	f000 fd2f 	bl	800c93c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800bede:	4b1e      	ldr	r3, [pc, #120]	; (800bf58 <ulTaskNotifyTake+0x88>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d113      	bne.n	800bf10 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bee8:	4b1b      	ldr	r3, [pc, #108]	; (800bf58 <ulTaskNotifyTake+0x88>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2201      	movs	r2, #1
 800beee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00b      	beq.n	800bf10 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bef8:	2101      	movs	r1, #1
 800befa:	6838      	ldr	r0, [r7, #0]
 800befc:	f000 f8c4 	bl	800c088 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bf00:	4b16      	ldr	r3, [pc, #88]	; (800bf5c <ulTaskNotifyTake+0x8c>)
 800bf02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf06:	601a      	str	r2, [r3, #0]
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bf10:	f000 fd44 	bl	800c99c <vPortExitCritical>

		taskENTER_CRITICAL();
 800bf14:	f000 fd12 	bl	800c93c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800bf18:	4b0f      	ldr	r3, [pc, #60]	; (800bf58 <ulTaskNotifyTake+0x88>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf1e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d00c      	beq.n	800bf40 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d004      	beq.n	800bf36 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800bf2c:	4b0a      	ldr	r3, [pc, #40]	; (800bf58 <ulTaskNotifyTake+0x88>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2200      	movs	r2, #0
 800bf32:	655a      	str	r2, [r3, #84]	; 0x54
 800bf34:	e004      	b.n	800bf40 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800bf36:	4b08      	ldr	r3, [pc, #32]	; (800bf58 <ulTaskNotifyTake+0x88>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	3a01      	subs	r2, #1
 800bf3e:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf40:	4b05      	ldr	r3, [pc, #20]	; (800bf58 <ulTaskNotifyTake+0x88>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2200      	movs	r2, #0
 800bf46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800bf4a:	f000 fd27 	bl	800c99c <vPortExitCritical>

		return ulReturn;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
	}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3710      	adds	r7, #16
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	20000870 	.word	0x20000870
 800bf5c:	e000ed04 	.word	0xe000ed04

0800bf60 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b08a      	sub	sp, #40	; 0x28
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d10a      	bne.n	800bf86 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800bf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf74:	f383 8811 	msr	BASEPRI, r3
 800bf78:	f3bf 8f6f 	isb	sy
 800bf7c:	f3bf 8f4f 	dsb	sy
 800bf80:	61bb      	str	r3, [r7, #24]
}
 800bf82:	bf00      	nop
 800bf84:	e7fe      	b.n	800bf84 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf86:	f000 fd9b 	bl	800cac0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800bf8e:	f3ef 8211 	mrs	r2, BASEPRI
 800bf92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	617a      	str	r2, [r7, #20]
 800bfa4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bfa6:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bfa8:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bfb0:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb4:	2202      	movs	r2, #2
 800bfb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800bfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfbe:	1c5a      	adds	r2, r3, #1
 800bfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc2:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bfc4:	7ffb      	ldrb	r3, [r7, #31]
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d147      	bne.n	800c05a <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d00a      	beq.n	800bfe8 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 800bfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd6:	f383 8811 	msr	BASEPRI, r3
 800bfda:	f3bf 8f6f 	isb	sy
 800bfde:	f3bf 8f4f 	dsb	sy
 800bfe2:	60fb      	str	r3, [r7, #12]
}
 800bfe4:	bf00      	nop
 800bfe6:	e7fe      	b.n	800bfe6 <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfe8:	4b21      	ldr	r3, [pc, #132]	; (800c070 <vTaskNotifyGiveFromISR+0x110>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d11d      	bne.n	800c02c <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff2:	3304      	adds	r3, #4
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7fe fac5 	bl	800a584 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bffe:	4b1d      	ldr	r3, [pc, #116]	; (800c074 <vTaskNotifyGiveFromISR+0x114>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	429a      	cmp	r2, r3
 800c004:	d903      	bls.n	800c00e <vTaskNotifyGiveFromISR+0xae>
 800c006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00a:	4a1a      	ldr	r2, [pc, #104]	; (800c074 <vTaskNotifyGiveFromISR+0x114>)
 800c00c:	6013      	str	r3, [r2, #0]
 800c00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c012:	4613      	mov	r3, r2
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	4413      	add	r3, r2
 800c018:	009b      	lsls	r3, r3, #2
 800c01a:	4a17      	ldr	r2, [pc, #92]	; (800c078 <vTaskNotifyGiveFromISR+0x118>)
 800c01c:	441a      	add	r2, r3
 800c01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c020:	3304      	adds	r3, #4
 800c022:	4619      	mov	r1, r3
 800c024:	4610      	mov	r0, r2
 800c026:	f7fe fa52 	bl	800a4ce <vListInsertEnd>
 800c02a:	e005      	b.n	800c038 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02e:	3318      	adds	r3, #24
 800c030:	4619      	mov	r1, r3
 800c032:	4812      	ldr	r0, [pc, #72]	; (800c07c <vTaskNotifyGiveFromISR+0x11c>)
 800c034:	f7fe fa4b 	bl	800a4ce <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c03c:	4b10      	ldr	r3, [pc, #64]	; (800c080 <vTaskNotifyGiveFromISR+0x120>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c042:	429a      	cmp	r2, r3
 800c044:	d909      	bls.n	800c05a <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d003      	beq.n	800c054 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	2201      	movs	r2, #1
 800c050:	601a      	str	r2, [r3, #0]
 800c052:	e002      	b.n	800c05a <vTaskNotifyGiveFromISR+0xfa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800c054:	4b0b      	ldr	r3, [pc, #44]	; (800c084 <vTaskNotifyGiveFromISR+0x124>)
 800c056:	2201      	movs	r2, #1
 800c058:	601a      	str	r2, [r3, #0]
 800c05a:	6a3b      	ldr	r3, [r7, #32]
 800c05c:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	f383 8811 	msr	BASEPRI, r3
}
 800c064:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800c066:	bf00      	nop
 800c068:	3728      	adds	r7, #40	; 0x28
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	20000d6c 	.word	0x20000d6c
 800c074:	20000d4c 	.word	0x20000d4c
 800c078:	20000874 	.word	0x20000874
 800c07c:	20000d04 	.word	0x20000d04
 800c080:	20000870 	.word	0x20000870
 800c084:	20000d58 	.word	0x20000d58

0800c088 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c092:	4b21      	ldr	r3, [pc, #132]	; (800c118 <prvAddCurrentTaskToDelayedList+0x90>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c098:	4b20      	ldr	r3, [pc, #128]	; (800c11c <prvAddCurrentTaskToDelayedList+0x94>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	3304      	adds	r3, #4
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fe fa70 	bl	800a584 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0aa:	d10a      	bne.n	800c0c2 <prvAddCurrentTaskToDelayedList+0x3a>
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d007      	beq.n	800c0c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0b2:	4b1a      	ldr	r3, [pc, #104]	; (800c11c <prvAddCurrentTaskToDelayedList+0x94>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	3304      	adds	r3, #4
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	4819      	ldr	r0, [pc, #100]	; (800c120 <prvAddCurrentTaskToDelayedList+0x98>)
 800c0bc:	f7fe fa07 	bl	800a4ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c0c0:	e026      	b.n	800c110 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c0c2:	68fa      	ldr	r2, [r7, #12]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4413      	add	r3, r2
 800c0c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c0ca:	4b14      	ldr	r3, [pc, #80]	; (800c11c <prvAddCurrentTaskToDelayedList+0x94>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68ba      	ldr	r2, [r7, #8]
 800c0d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c0d2:	68ba      	ldr	r2, [r7, #8]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d209      	bcs.n	800c0ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0da:	4b12      	ldr	r3, [pc, #72]	; (800c124 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	4b0f      	ldr	r3, [pc, #60]	; (800c11c <prvAddCurrentTaskToDelayedList+0x94>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	3304      	adds	r3, #4
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	4610      	mov	r0, r2
 800c0e8:	f7fe fa14 	bl	800a514 <vListInsert>
}
 800c0ec:	e010      	b.n	800c110 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0ee:	4b0e      	ldr	r3, [pc, #56]	; (800c128 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	4b0a      	ldr	r3, [pc, #40]	; (800c11c <prvAddCurrentTaskToDelayedList+0x94>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	3304      	adds	r3, #4
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	4610      	mov	r0, r2
 800c0fc:	f7fe fa0a 	bl	800a514 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c100:	4b0a      	ldr	r3, [pc, #40]	; (800c12c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	68ba      	ldr	r2, [r7, #8]
 800c106:	429a      	cmp	r2, r3
 800c108:	d202      	bcs.n	800c110 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c10a:	4a08      	ldr	r2, [pc, #32]	; (800c12c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	6013      	str	r3, [r2, #0]
}
 800c110:	bf00      	nop
 800c112:	3710      	adds	r7, #16
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	20000d48 	.word	0x20000d48
 800c11c:	20000870 	.word	0x20000870
 800c120:	20000d30 	.word	0x20000d30
 800c124:	20000d00 	.word	0x20000d00
 800c128:	20000cfc 	.word	0x20000cfc
 800c12c:	20000d64 	.word	0x20000d64

0800c130 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b08a      	sub	sp, #40	; 0x28
 800c134:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c136:	2300      	movs	r3, #0
 800c138:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c13a:	f000 facb 	bl	800c6d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c13e:	4b1c      	ldr	r3, [pc, #112]	; (800c1b0 <xTimerCreateTimerTask+0x80>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d021      	beq.n	800c18a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c146:	2300      	movs	r3, #0
 800c148:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c14a:	2300      	movs	r3, #0
 800c14c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c14e:	1d3a      	adds	r2, r7, #4
 800c150:	f107 0108 	add.w	r1, r7, #8
 800c154:	f107 030c 	add.w	r3, r7, #12
 800c158:	4618      	mov	r0, r3
 800c15a:	f7fe f973 	bl	800a444 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c15e:	6879      	ldr	r1, [r7, #4]
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	9202      	str	r2, [sp, #8]
 800c166:	9301      	str	r3, [sp, #4]
 800c168:	2302      	movs	r3, #2
 800c16a:	9300      	str	r3, [sp, #0]
 800c16c:	2300      	movs	r3, #0
 800c16e:	460a      	mov	r2, r1
 800c170:	4910      	ldr	r1, [pc, #64]	; (800c1b4 <xTimerCreateTimerTask+0x84>)
 800c172:	4811      	ldr	r0, [pc, #68]	; (800c1b8 <xTimerCreateTimerTask+0x88>)
 800c174:	f7fe ff52 	bl	800b01c <xTaskCreateStatic>
 800c178:	4603      	mov	r3, r0
 800c17a:	4a10      	ldr	r2, [pc, #64]	; (800c1bc <xTimerCreateTimerTask+0x8c>)
 800c17c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c17e:	4b0f      	ldr	r3, [pc, #60]	; (800c1bc <xTimerCreateTimerTask+0x8c>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d001      	beq.n	800c18a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c186:	2301      	movs	r3, #1
 800c188:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d10a      	bne.n	800c1a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c194:	f383 8811 	msr	BASEPRI, r3
 800c198:	f3bf 8f6f 	isb	sy
 800c19c:	f3bf 8f4f 	dsb	sy
 800c1a0:	613b      	str	r3, [r7, #16]
}
 800c1a2:	bf00      	nop
 800c1a4:	e7fe      	b.n	800c1a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c1a6:	697b      	ldr	r3, [r7, #20]
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3718      	adds	r7, #24
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	20000da0 	.word	0x20000da0
 800c1b4:	0800db34 	.word	0x0800db34
 800c1b8:	0800c2dd 	.word	0x0800c2dd
 800c1bc:	20000da4 	.word	0x20000da4

0800c1c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b08a      	sub	sp, #40	; 0x28
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
 800c1cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d10a      	bne.n	800c1ee <xTimerGenericCommand+0x2e>
	__asm volatile
 800c1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1dc:	f383 8811 	msr	BASEPRI, r3
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	623b      	str	r3, [r7, #32]
}
 800c1ea:	bf00      	nop
 800c1ec:	e7fe      	b.n	800c1ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c1ee:	4b1a      	ldr	r3, [pc, #104]	; (800c258 <xTimerGenericCommand+0x98>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d02a      	beq.n	800c24c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	2b05      	cmp	r3, #5
 800c206:	dc18      	bgt.n	800c23a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c208:	f7ff fdd6 	bl	800bdb8 <xTaskGetSchedulerState>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b02      	cmp	r3, #2
 800c210:	d109      	bne.n	800c226 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c212:	4b11      	ldr	r3, [pc, #68]	; (800c258 <xTimerGenericCommand+0x98>)
 800c214:	6818      	ldr	r0, [r3, #0]
 800c216:	f107 0110 	add.w	r1, r7, #16
 800c21a:	2300      	movs	r3, #0
 800c21c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c21e:	f7fe fb1b 	bl	800a858 <xQueueGenericSend>
 800c222:	6278      	str	r0, [r7, #36]	; 0x24
 800c224:	e012      	b.n	800c24c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c226:	4b0c      	ldr	r3, [pc, #48]	; (800c258 <xTimerGenericCommand+0x98>)
 800c228:	6818      	ldr	r0, [r3, #0]
 800c22a:	f107 0110 	add.w	r1, r7, #16
 800c22e:	2300      	movs	r3, #0
 800c230:	2200      	movs	r2, #0
 800c232:	f7fe fb11 	bl	800a858 <xQueueGenericSend>
 800c236:	6278      	str	r0, [r7, #36]	; 0x24
 800c238:	e008      	b.n	800c24c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c23a:	4b07      	ldr	r3, [pc, #28]	; (800c258 <xTimerGenericCommand+0x98>)
 800c23c:	6818      	ldr	r0, [r3, #0]
 800c23e:	f107 0110 	add.w	r1, r7, #16
 800c242:	2300      	movs	r3, #0
 800c244:	683a      	ldr	r2, [r7, #0]
 800c246:	f7fe fc05 	bl	800aa54 <xQueueGenericSendFromISR>
 800c24a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3728      	adds	r7, #40	; 0x28
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	20000da0 	.word	0x20000da0

0800c25c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b088      	sub	sp, #32
 800c260:	af02      	add	r7, sp, #8
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c266:	4b1c      	ldr	r3, [pc, #112]	; (800c2d8 <prvProcessExpiredTimer+0x7c>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	3304      	adds	r3, #4
 800c274:	4618      	mov	r0, r3
 800c276:	f7fe f985 	bl	800a584 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	69db      	ldr	r3, [r3, #28]
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d122      	bne.n	800c2c8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	699a      	ldr	r2, [r3, #24]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	18d1      	adds	r1, r2, r3
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	683a      	ldr	r2, [r7, #0]
 800c28e:	6978      	ldr	r0, [r7, #20]
 800c290:	f000 f8c8 	bl	800c424 <prvInsertTimerInActiveList>
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d016      	beq.n	800c2c8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c29a:	2300      	movs	r3, #0
 800c29c:	9300      	str	r3, [sp, #0]
 800c29e:	2300      	movs	r3, #0
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	6978      	ldr	r0, [r7, #20]
 800c2a6:	f7ff ff8b 	bl	800c1c0 <xTimerGenericCommand>
 800c2aa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d10a      	bne.n	800c2c8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b6:	f383 8811 	msr	BASEPRI, r3
 800c2ba:	f3bf 8f6f 	isb	sy
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	60fb      	str	r3, [r7, #12]
}
 800c2c4:	bf00      	nop
 800c2c6:	e7fe      	b.n	800c2c6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2cc:	6978      	ldr	r0, [r7, #20]
 800c2ce:	4798      	blx	r3
}
 800c2d0:	bf00      	nop
 800c2d2:	3718      	adds	r7, #24
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}
 800c2d8:	20000d98 	.word	0x20000d98

0800c2dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c2e4:	f107 0308 	add.w	r3, r7, #8
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 f857 	bl	800c39c <prvGetNextExpireTime>
 800c2ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	68f8      	ldr	r0, [r7, #12]
 800c2f6:	f000 f803 	bl	800c300 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c2fa:	f000 f8d5 	bl	800c4a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c2fe:	e7f1      	b.n	800c2e4 <prvTimerTask+0x8>

0800c300 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c30a:	f7ff f937 	bl	800b57c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c30e:	f107 0308 	add.w	r3, r7, #8
 800c312:	4618      	mov	r0, r3
 800c314:	f000 f866 	bl	800c3e4 <prvSampleTimeNow>
 800c318:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d130      	bne.n	800c382 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d10a      	bne.n	800c33c <prvProcessTimerOrBlockTask+0x3c>
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d806      	bhi.n	800c33c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c32e:	f7ff f933 	bl	800b598 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c332:	68f9      	ldr	r1, [r7, #12]
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f7ff ff91 	bl	800c25c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c33a:	e024      	b.n	800c386 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d008      	beq.n	800c354 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c342:	4b13      	ldr	r3, [pc, #76]	; (800c390 <prvProcessTimerOrBlockTask+0x90>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	bf0c      	ite	eq
 800c34c:	2301      	moveq	r3, #1
 800c34e:	2300      	movne	r3, #0
 800c350:	b2db      	uxtb	r3, r3
 800c352:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c354:	4b0f      	ldr	r3, [pc, #60]	; (800c394 <prvProcessTimerOrBlockTask+0x94>)
 800c356:	6818      	ldr	r0, [r3, #0]
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	1ad3      	subs	r3, r2, r3
 800c35e:	683a      	ldr	r2, [r7, #0]
 800c360:	4619      	mov	r1, r3
 800c362:	f7fe fe27 	bl	800afb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c366:	f7ff f917 	bl	800b598 <xTaskResumeAll>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d10a      	bne.n	800c386 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c370:	4b09      	ldr	r3, [pc, #36]	; (800c398 <prvProcessTimerOrBlockTask+0x98>)
 800c372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c376:	601a      	str	r2, [r3, #0]
 800c378:	f3bf 8f4f 	dsb	sy
 800c37c:	f3bf 8f6f 	isb	sy
}
 800c380:	e001      	b.n	800c386 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c382:	f7ff f909 	bl	800b598 <xTaskResumeAll>
}
 800c386:	bf00      	nop
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	20000d9c 	.word	0x20000d9c
 800c394:	20000da0 	.word	0x20000da0
 800c398:	e000ed04 	.word	0xe000ed04

0800c39c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c39c:	b480      	push	{r7}
 800c39e:	b085      	sub	sp, #20
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c3a4:	4b0e      	ldr	r3, [pc, #56]	; (800c3e0 <prvGetNextExpireTime+0x44>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	bf0c      	ite	eq
 800c3ae:	2301      	moveq	r3, #1
 800c3b0:	2300      	movne	r3, #0
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d105      	bne.n	800c3ce <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c3c2:	4b07      	ldr	r3, [pc, #28]	; (800c3e0 <prvGetNextExpireTime+0x44>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	60fb      	str	r3, [r7, #12]
 800c3cc:	e001      	b.n	800c3d2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3714      	adds	r7, #20
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bc80      	pop	{r7}
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	20000d98 	.word	0x20000d98

0800c3e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c3ec:	f7ff f972 	bl	800b6d4 <xTaskGetTickCount>
 800c3f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c3f2:	4b0b      	ldr	r3, [pc, #44]	; (800c420 <prvSampleTimeNow+0x3c>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	68fa      	ldr	r2, [r7, #12]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d205      	bcs.n	800c408 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c3fc:	f000 f908 	bl	800c610 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2201      	movs	r2, #1
 800c404:	601a      	str	r2, [r3, #0]
 800c406:	e002      	b.n	800c40e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c40e:	4a04      	ldr	r2, [pc, #16]	; (800c420 <prvSampleTimeNow+0x3c>)
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c414:	68fb      	ldr	r3, [r7, #12]
}
 800c416:	4618      	mov	r0, r3
 800c418:	3710      	adds	r7, #16
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	20000da8 	.word	0x20000da8

0800c424 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b086      	sub	sp, #24
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	607a      	str	r2, [r7, #4]
 800c430:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c432:	2300      	movs	r3, #0
 800c434:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	68fa      	ldr	r2, [r7, #12]
 800c440:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c442:	68ba      	ldr	r2, [r7, #8]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	429a      	cmp	r2, r3
 800c448:	d812      	bhi.n	800c470 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	1ad2      	subs	r2, r2, r3
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	699b      	ldr	r3, [r3, #24]
 800c454:	429a      	cmp	r2, r3
 800c456:	d302      	bcc.n	800c45e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c458:	2301      	movs	r3, #1
 800c45a:	617b      	str	r3, [r7, #20]
 800c45c:	e01b      	b.n	800c496 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c45e:	4b10      	ldr	r3, [pc, #64]	; (800c4a0 <prvInsertTimerInActiveList+0x7c>)
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	3304      	adds	r3, #4
 800c466:	4619      	mov	r1, r3
 800c468:	4610      	mov	r0, r2
 800c46a:	f7fe f853 	bl	800a514 <vListInsert>
 800c46e:	e012      	b.n	800c496 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	429a      	cmp	r2, r3
 800c476:	d206      	bcs.n	800c486 <prvInsertTimerInActiveList+0x62>
 800c478:	68ba      	ldr	r2, [r7, #8]
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d302      	bcc.n	800c486 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c480:	2301      	movs	r3, #1
 800c482:	617b      	str	r3, [r7, #20]
 800c484:	e007      	b.n	800c496 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c486:	4b07      	ldr	r3, [pc, #28]	; (800c4a4 <prvInsertTimerInActiveList+0x80>)
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	3304      	adds	r3, #4
 800c48e:	4619      	mov	r1, r3
 800c490:	4610      	mov	r0, r2
 800c492:	f7fe f83f 	bl	800a514 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c496:	697b      	ldr	r3, [r7, #20]
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3718      	adds	r7, #24
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	20000d9c 	.word	0x20000d9c
 800c4a4:	20000d98 	.word	0x20000d98

0800c4a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b08e      	sub	sp, #56	; 0x38
 800c4ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c4ae:	e09d      	b.n	800c5ec <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	da18      	bge.n	800c4e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c4b6:	1d3b      	adds	r3, r7, #4
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d10a      	bne.n	800c4d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c6:	f383 8811 	msr	BASEPRI, r3
 800c4ca:	f3bf 8f6f 	isb	sy
 800c4ce:	f3bf 8f4f 	dsb	sy
 800c4d2:	61fb      	str	r3, [r7, #28]
}
 800c4d4:	bf00      	nop
 800c4d6:	e7fe      	b.n	800c4d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4de:	6850      	ldr	r0, [r2, #4]
 800c4e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4e2:	6892      	ldr	r2, [r2, #8]
 800c4e4:	4611      	mov	r1, r2
 800c4e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	db7d      	blt.n	800c5ea <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f4:	695b      	ldr	r3, [r3, #20]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d004      	beq.n	800c504 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fc:	3304      	adds	r3, #4
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7fe f840 	bl	800a584 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c504:	463b      	mov	r3, r7
 800c506:	4618      	mov	r0, r3
 800c508:	f7ff ff6c 	bl	800c3e4 <prvSampleTimeNow>
 800c50c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2b09      	cmp	r3, #9
 800c512:	d86b      	bhi.n	800c5ec <prvProcessReceivedCommands+0x144>
 800c514:	a201      	add	r2, pc, #4	; (adr r2, 800c51c <prvProcessReceivedCommands+0x74>)
 800c516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c51a:	bf00      	nop
 800c51c:	0800c545 	.word	0x0800c545
 800c520:	0800c545 	.word	0x0800c545
 800c524:	0800c545 	.word	0x0800c545
 800c528:	0800c5ed 	.word	0x0800c5ed
 800c52c:	0800c5a1 	.word	0x0800c5a1
 800c530:	0800c5d9 	.word	0x0800c5d9
 800c534:	0800c545 	.word	0x0800c545
 800c538:	0800c545 	.word	0x0800c545
 800c53c:	0800c5ed 	.word	0x0800c5ed
 800c540:	0800c5a1 	.word	0x0800c5a1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c544:	68ba      	ldr	r2, [r7, #8]
 800c546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c548:	699b      	ldr	r3, [r3, #24]
 800c54a:	18d1      	adds	r1, r2, r3
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c552:	f7ff ff67 	bl	800c424 <prvInsertTimerInActiveList>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d047      	beq.n	800c5ec <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c562:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c566:	69db      	ldr	r3, [r3, #28]
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d13f      	bne.n	800c5ec <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c56c:	68ba      	ldr	r2, [r7, #8]
 800c56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c570:	699b      	ldr	r3, [r3, #24]
 800c572:	441a      	add	r2, r3
 800c574:	2300      	movs	r3, #0
 800c576:	9300      	str	r3, [sp, #0]
 800c578:	2300      	movs	r3, #0
 800c57a:	2100      	movs	r1, #0
 800c57c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c57e:	f7ff fe1f 	bl	800c1c0 <xTimerGenericCommand>
 800c582:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c584:	6a3b      	ldr	r3, [r7, #32]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d130      	bne.n	800c5ec <prvProcessReceivedCommands+0x144>
	__asm volatile
 800c58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58e:	f383 8811 	msr	BASEPRI, r3
 800c592:	f3bf 8f6f 	isb	sy
 800c596:	f3bf 8f4f 	dsb	sy
 800c59a:	61bb      	str	r3, [r7, #24]
}
 800c59c:	bf00      	nop
 800c59e:	e7fe      	b.n	800c59e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a8:	699b      	ldr	r3, [r3, #24]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d10a      	bne.n	800c5c4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800c5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	617b      	str	r3, [r7, #20]
}
 800c5c0:	bf00      	nop
 800c5c2:	e7fe      	b.n	800c5c2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c6:	699a      	ldr	r2, [r3, #24]
 800c5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ca:	18d1      	adds	r1, r2, r3
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5d2:	f7ff ff27 	bl	800c424 <prvInsertTimerInActiveList>
					break;
 800c5d6:	e009      	b.n	800c5ec <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d104      	bne.n	800c5ec <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800c5e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5e4:	f000 fb6e 	bl	800ccc4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c5e8:	e000      	b.n	800c5ec <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c5ea:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5ec:	4b07      	ldr	r3, [pc, #28]	; (800c60c <prvProcessReceivedCommands+0x164>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	1d39      	adds	r1, r7, #4
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7fe fac5 	bl	800ab84 <xQueueReceive>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f47f af57 	bne.w	800c4b0 <prvProcessReceivedCommands+0x8>
	}
}
 800c602:	bf00      	nop
 800c604:	bf00      	nop
 800c606:	3730      	adds	r7, #48	; 0x30
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	20000da0 	.word	0x20000da0

0800c610 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b088      	sub	sp, #32
 800c614:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c616:	e045      	b.n	800c6a4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c618:	4b2c      	ldr	r3, [pc, #176]	; (800c6cc <prvSwitchTimerLists+0xbc>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c622:	4b2a      	ldr	r3, [pc, #168]	; (800c6cc <prvSwitchTimerLists+0xbc>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	68db      	ldr	r3, [r3, #12]
 800c62a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	3304      	adds	r3, #4
 800c630:	4618      	mov	r0, r3
 800c632:	f7fd ffa7 	bl	800a584 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c63a:	68f8      	ldr	r0, [r7, #12]
 800c63c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	69db      	ldr	r3, [r3, #28]
 800c642:	2b01      	cmp	r3, #1
 800c644:	d12e      	bne.n	800c6a4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	699b      	ldr	r3, [r3, #24]
 800c64a:	693a      	ldr	r2, [r7, #16]
 800c64c:	4413      	add	r3, r2
 800c64e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c650:	68ba      	ldr	r2, [r7, #8]
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	429a      	cmp	r2, r3
 800c656:	d90e      	bls.n	800c676 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	68ba      	ldr	r2, [r7, #8]
 800c65c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c664:	4b19      	ldr	r3, [pc, #100]	; (800c6cc <prvSwitchTimerLists+0xbc>)
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	3304      	adds	r3, #4
 800c66c:	4619      	mov	r1, r3
 800c66e:	4610      	mov	r0, r2
 800c670:	f7fd ff50 	bl	800a514 <vListInsert>
 800c674:	e016      	b.n	800c6a4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c676:	2300      	movs	r3, #0
 800c678:	9300      	str	r3, [sp, #0]
 800c67a:	2300      	movs	r3, #0
 800c67c:	693a      	ldr	r2, [r7, #16]
 800c67e:	2100      	movs	r1, #0
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f7ff fd9d 	bl	800c1c0 <xTimerGenericCommand>
 800c686:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d10a      	bne.n	800c6a4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800c68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c692:	f383 8811 	msr	BASEPRI, r3
 800c696:	f3bf 8f6f 	isb	sy
 800c69a:	f3bf 8f4f 	dsb	sy
 800c69e:	603b      	str	r3, [r7, #0]
}
 800c6a0:	bf00      	nop
 800c6a2:	e7fe      	b.n	800c6a2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c6a4:	4b09      	ldr	r3, [pc, #36]	; (800c6cc <prvSwitchTimerLists+0xbc>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1b4      	bne.n	800c618 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c6ae:	4b07      	ldr	r3, [pc, #28]	; (800c6cc <prvSwitchTimerLists+0xbc>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c6b4:	4b06      	ldr	r3, [pc, #24]	; (800c6d0 <prvSwitchTimerLists+0xc0>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4a04      	ldr	r2, [pc, #16]	; (800c6cc <prvSwitchTimerLists+0xbc>)
 800c6ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c6bc:	4a04      	ldr	r2, [pc, #16]	; (800c6d0 <prvSwitchTimerLists+0xc0>)
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	6013      	str	r3, [r2, #0]
}
 800c6c2:	bf00      	nop
 800c6c4:	3718      	adds	r7, #24
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	20000d98 	.word	0x20000d98
 800c6d0:	20000d9c 	.word	0x20000d9c

0800c6d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c6da:	f000 f92f 	bl	800c93c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c6de:	4b15      	ldr	r3, [pc, #84]	; (800c734 <prvCheckForValidListAndQueue+0x60>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d120      	bne.n	800c728 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c6e6:	4814      	ldr	r0, [pc, #80]	; (800c738 <prvCheckForValidListAndQueue+0x64>)
 800c6e8:	f7fd fec6 	bl	800a478 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c6ec:	4813      	ldr	r0, [pc, #76]	; (800c73c <prvCheckForValidListAndQueue+0x68>)
 800c6ee:	f7fd fec3 	bl	800a478 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c6f2:	4b13      	ldr	r3, [pc, #76]	; (800c740 <prvCheckForValidListAndQueue+0x6c>)
 800c6f4:	4a10      	ldr	r2, [pc, #64]	; (800c738 <prvCheckForValidListAndQueue+0x64>)
 800c6f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c6f8:	4b12      	ldr	r3, [pc, #72]	; (800c744 <prvCheckForValidListAndQueue+0x70>)
 800c6fa:	4a10      	ldr	r2, [pc, #64]	; (800c73c <prvCheckForValidListAndQueue+0x68>)
 800c6fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c6fe:	2300      	movs	r3, #0
 800c700:	9300      	str	r3, [sp, #0]
 800c702:	4b11      	ldr	r3, [pc, #68]	; (800c748 <prvCheckForValidListAndQueue+0x74>)
 800c704:	4a11      	ldr	r2, [pc, #68]	; (800c74c <prvCheckForValidListAndQueue+0x78>)
 800c706:	2110      	movs	r1, #16
 800c708:	200a      	movs	r0, #10
 800c70a:	f7fd ffcd 	bl	800a6a8 <xQueueGenericCreateStatic>
 800c70e:	4603      	mov	r3, r0
 800c710:	4a08      	ldr	r2, [pc, #32]	; (800c734 <prvCheckForValidListAndQueue+0x60>)
 800c712:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c714:	4b07      	ldr	r3, [pc, #28]	; (800c734 <prvCheckForValidListAndQueue+0x60>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d005      	beq.n	800c728 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c71c:	4b05      	ldr	r3, [pc, #20]	; (800c734 <prvCheckForValidListAndQueue+0x60>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	490b      	ldr	r1, [pc, #44]	; (800c750 <prvCheckForValidListAndQueue+0x7c>)
 800c722:	4618      	mov	r0, r3
 800c724:	f7fe fc1e 	bl	800af64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c728:	f000 f938 	bl	800c99c <vPortExitCritical>
}
 800c72c:	bf00      	nop
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	20000da0 	.word	0x20000da0
 800c738:	20000d70 	.word	0x20000d70
 800c73c:	20000d84 	.word	0x20000d84
 800c740:	20000d98 	.word	0x20000d98
 800c744:	20000d9c 	.word	0x20000d9c
 800c748:	20000e4c 	.word	0x20000e4c
 800c74c:	20000dac 	.word	0x20000dac
 800c750:	0800db3c 	.word	0x0800db3c

0800c754 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c754:	b480      	push	{r7}
 800c756:	b085      	sub	sp, #20
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	3b04      	subs	r3, #4
 800c764:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c76c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	3b04      	subs	r3, #4
 800c772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	f023 0201 	bic.w	r2, r3, #1
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	3b04      	subs	r3, #4
 800c782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c784:	4a08      	ldr	r2, [pc, #32]	; (800c7a8 <pxPortInitialiseStack+0x54>)
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	3b14      	subs	r3, #20
 800c78e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	3b20      	subs	r3, #32
 800c79a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c79c:	68fb      	ldr	r3, [r7, #12]
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3714      	adds	r7, #20
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bc80      	pop	{r7}
 800c7a6:	4770      	bx	lr
 800c7a8:	0800c7ad 	.word	0x0800c7ad

0800c7ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b085      	sub	sp, #20
 800c7b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7b6:	4b12      	ldr	r3, [pc, #72]	; (800c800 <prvTaskExitError+0x54>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7be:	d00a      	beq.n	800c7d6 <prvTaskExitError+0x2a>
	__asm volatile
 800c7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c4:	f383 8811 	msr	BASEPRI, r3
 800c7c8:	f3bf 8f6f 	isb	sy
 800c7cc:	f3bf 8f4f 	dsb	sy
 800c7d0:	60fb      	str	r3, [r7, #12]
}
 800c7d2:	bf00      	nop
 800c7d4:	e7fe      	b.n	800c7d4 <prvTaskExitError+0x28>
	__asm volatile
 800c7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7da:	f383 8811 	msr	BASEPRI, r3
 800c7de:	f3bf 8f6f 	isb	sy
 800c7e2:	f3bf 8f4f 	dsb	sy
 800c7e6:	60bb      	str	r3, [r7, #8]
}
 800c7e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c7ea:	bf00      	nop
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d0fc      	beq.n	800c7ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c7f2:	bf00      	nop
 800c7f4:	bf00      	nop
 800c7f6:	3714      	adds	r7, #20
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bc80      	pop	{r7}
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop
 800c800:	2000012c 	.word	0x2000012c
	...

0800c810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c810:	4b07      	ldr	r3, [pc, #28]	; (800c830 <pxCurrentTCBConst2>)
 800c812:	6819      	ldr	r1, [r3, #0]
 800c814:	6808      	ldr	r0, [r1, #0]
 800c816:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c81a:	f380 8809 	msr	PSP, r0
 800c81e:	f3bf 8f6f 	isb	sy
 800c822:	f04f 0000 	mov.w	r0, #0
 800c826:	f380 8811 	msr	BASEPRI, r0
 800c82a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c82e:	4770      	bx	lr

0800c830 <pxCurrentTCBConst2>:
 800c830:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c834:	bf00      	nop
 800c836:	bf00      	nop

0800c838 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c838:	4806      	ldr	r0, [pc, #24]	; (800c854 <prvPortStartFirstTask+0x1c>)
 800c83a:	6800      	ldr	r0, [r0, #0]
 800c83c:	6800      	ldr	r0, [r0, #0]
 800c83e:	f380 8808 	msr	MSP, r0
 800c842:	b662      	cpsie	i
 800c844:	b661      	cpsie	f
 800c846:	f3bf 8f4f 	dsb	sy
 800c84a:	f3bf 8f6f 	isb	sy
 800c84e:	df00      	svc	0
 800c850:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c852:	bf00      	nop
 800c854:	e000ed08 	.word	0xe000ed08

0800c858 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c85e:	4b32      	ldr	r3, [pc, #200]	; (800c928 <xPortStartScheduler+0xd0>)
 800c860:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	b2db      	uxtb	r3, r3
 800c868:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	22ff      	movs	r2, #255	; 0xff
 800c86e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	b2db      	uxtb	r3, r3
 800c876:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c878:	78fb      	ldrb	r3, [r7, #3]
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c880:	b2da      	uxtb	r2, r3
 800c882:	4b2a      	ldr	r3, [pc, #168]	; (800c92c <xPortStartScheduler+0xd4>)
 800c884:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c886:	4b2a      	ldr	r3, [pc, #168]	; (800c930 <xPortStartScheduler+0xd8>)
 800c888:	2207      	movs	r2, #7
 800c88a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c88c:	e009      	b.n	800c8a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c88e:	4b28      	ldr	r3, [pc, #160]	; (800c930 <xPortStartScheduler+0xd8>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	3b01      	subs	r3, #1
 800c894:	4a26      	ldr	r2, [pc, #152]	; (800c930 <xPortStartScheduler+0xd8>)
 800c896:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c898:	78fb      	ldrb	r3, [r7, #3]
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	005b      	lsls	r3, r3, #1
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8a2:	78fb      	ldrb	r3, [r7, #3]
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8aa:	2b80      	cmp	r3, #128	; 0x80
 800c8ac:	d0ef      	beq.n	800c88e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c8ae:	4b20      	ldr	r3, [pc, #128]	; (800c930 <xPortStartScheduler+0xd8>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f1c3 0307 	rsb	r3, r3, #7
 800c8b6:	2b04      	cmp	r3, #4
 800c8b8:	d00a      	beq.n	800c8d0 <xPortStartScheduler+0x78>
	__asm volatile
 800c8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8be:	f383 8811 	msr	BASEPRI, r3
 800c8c2:	f3bf 8f6f 	isb	sy
 800c8c6:	f3bf 8f4f 	dsb	sy
 800c8ca:	60bb      	str	r3, [r7, #8]
}
 800c8cc:	bf00      	nop
 800c8ce:	e7fe      	b.n	800c8ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c8d0:	4b17      	ldr	r3, [pc, #92]	; (800c930 <xPortStartScheduler+0xd8>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	021b      	lsls	r3, r3, #8
 800c8d6:	4a16      	ldr	r2, [pc, #88]	; (800c930 <xPortStartScheduler+0xd8>)
 800c8d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c8da:	4b15      	ldr	r3, [pc, #84]	; (800c930 <xPortStartScheduler+0xd8>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c8e2:	4a13      	ldr	r2, [pc, #76]	; (800c930 <xPortStartScheduler+0xd8>)
 800c8e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	b2da      	uxtb	r2, r3
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c8ee:	4b11      	ldr	r3, [pc, #68]	; (800c934 <xPortStartScheduler+0xdc>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4a10      	ldr	r2, [pc, #64]	; (800c934 <xPortStartScheduler+0xdc>)
 800c8f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c8f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c8fa:	4b0e      	ldr	r3, [pc, #56]	; (800c934 <xPortStartScheduler+0xdc>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4a0d      	ldr	r2, [pc, #52]	; (800c934 <xPortStartScheduler+0xdc>)
 800c900:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c904:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c906:	f000 f8b9 	bl	800ca7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c90a:	4b0b      	ldr	r3, [pc, #44]	; (800c938 <xPortStartScheduler+0xe0>)
 800c90c:	2200      	movs	r2, #0
 800c90e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c910:	f7ff ff92 	bl	800c838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c914:	f7fe ffaa 	bl	800b86c <vTaskSwitchContext>
	prvTaskExitError();
 800c918:	f7ff ff48 	bl	800c7ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c91c:	2300      	movs	r3, #0
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3710      	adds	r7, #16
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	e000e400 	.word	0xe000e400
 800c92c:	20000e9c 	.word	0x20000e9c
 800c930:	20000ea0 	.word	0x20000ea0
 800c934:	e000ed20 	.word	0xe000ed20
 800c938:	2000012c 	.word	0x2000012c

0800c93c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c93c:	b480      	push	{r7}
 800c93e:	b083      	sub	sp, #12
 800c940:	af00      	add	r7, sp, #0
	__asm volatile
 800c942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c946:	f383 8811 	msr	BASEPRI, r3
 800c94a:	f3bf 8f6f 	isb	sy
 800c94e:	f3bf 8f4f 	dsb	sy
 800c952:	607b      	str	r3, [r7, #4]
}
 800c954:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c956:	4b0f      	ldr	r3, [pc, #60]	; (800c994 <vPortEnterCritical+0x58>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	3301      	adds	r3, #1
 800c95c:	4a0d      	ldr	r2, [pc, #52]	; (800c994 <vPortEnterCritical+0x58>)
 800c95e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c960:	4b0c      	ldr	r3, [pc, #48]	; (800c994 <vPortEnterCritical+0x58>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	2b01      	cmp	r3, #1
 800c966:	d10f      	bne.n	800c988 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c968:	4b0b      	ldr	r3, [pc, #44]	; (800c998 <vPortEnterCritical+0x5c>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d00a      	beq.n	800c988 <vPortEnterCritical+0x4c>
	__asm volatile
 800c972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c976:	f383 8811 	msr	BASEPRI, r3
 800c97a:	f3bf 8f6f 	isb	sy
 800c97e:	f3bf 8f4f 	dsb	sy
 800c982:	603b      	str	r3, [r7, #0]
}
 800c984:	bf00      	nop
 800c986:	e7fe      	b.n	800c986 <vPortEnterCritical+0x4a>
	}
}
 800c988:	bf00      	nop
 800c98a:	370c      	adds	r7, #12
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bc80      	pop	{r7}
 800c990:	4770      	bx	lr
 800c992:	bf00      	nop
 800c994:	2000012c 	.word	0x2000012c
 800c998:	e000ed04 	.word	0xe000ed04

0800c99c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c9a2:	4b11      	ldr	r3, [pc, #68]	; (800c9e8 <vPortExitCritical+0x4c>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d10a      	bne.n	800c9c0 <vPortExitCritical+0x24>
	__asm volatile
 800c9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ae:	f383 8811 	msr	BASEPRI, r3
 800c9b2:	f3bf 8f6f 	isb	sy
 800c9b6:	f3bf 8f4f 	dsb	sy
 800c9ba:	607b      	str	r3, [r7, #4]
}
 800c9bc:	bf00      	nop
 800c9be:	e7fe      	b.n	800c9be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c9c0:	4b09      	ldr	r3, [pc, #36]	; (800c9e8 <vPortExitCritical+0x4c>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	3b01      	subs	r3, #1
 800c9c6:	4a08      	ldr	r2, [pc, #32]	; (800c9e8 <vPortExitCritical+0x4c>)
 800c9c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c9ca:	4b07      	ldr	r3, [pc, #28]	; (800c9e8 <vPortExitCritical+0x4c>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d105      	bne.n	800c9de <vPortExitCritical+0x42>
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	f383 8811 	msr	BASEPRI, r3
}
 800c9dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c9de:	bf00      	nop
 800c9e0:	370c      	adds	r7, #12
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bc80      	pop	{r7}
 800c9e6:	4770      	bx	lr
 800c9e8:	2000012c 	.word	0x2000012c
 800c9ec:	00000000 	.word	0x00000000

0800c9f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c9f0:	f3ef 8009 	mrs	r0, PSP
 800c9f4:	f3bf 8f6f 	isb	sy
 800c9f8:	4b0d      	ldr	r3, [pc, #52]	; (800ca30 <pxCurrentTCBConst>)
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ca00:	6010      	str	r0, [r2, #0]
 800ca02:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ca06:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ca0a:	f380 8811 	msr	BASEPRI, r0
 800ca0e:	f7fe ff2d 	bl	800b86c <vTaskSwitchContext>
 800ca12:	f04f 0000 	mov.w	r0, #0
 800ca16:	f380 8811 	msr	BASEPRI, r0
 800ca1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ca1e:	6819      	ldr	r1, [r3, #0]
 800ca20:	6808      	ldr	r0, [r1, #0]
 800ca22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ca26:	f380 8809 	msr	PSP, r0
 800ca2a:	f3bf 8f6f 	isb	sy
 800ca2e:	4770      	bx	lr

0800ca30 <pxCurrentTCBConst>:
 800ca30:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca34:	bf00      	nop
 800ca36:	bf00      	nop

0800ca38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca42:	f383 8811 	msr	BASEPRI, r3
 800ca46:	f3bf 8f6f 	isb	sy
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	607b      	str	r3, [r7, #4]
}
 800ca50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca52:	f7fe fe4d 	bl	800b6f0 <xTaskIncrementTick>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d003      	beq.n	800ca64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca5c:	4b06      	ldr	r3, [pc, #24]	; (800ca78 <SysTick_Handler+0x40>)
 800ca5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca62:	601a      	str	r2, [r3, #0]
 800ca64:	2300      	movs	r3, #0
 800ca66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	f383 8811 	msr	BASEPRI, r3
}
 800ca6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca70:	bf00      	nop
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	e000ed04 	.word	0xe000ed04

0800ca7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ca80:	4b0a      	ldr	r3, [pc, #40]	; (800caac <vPortSetupTimerInterrupt+0x30>)
 800ca82:	2200      	movs	r2, #0
 800ca84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca86:	4b0a      	ldr	r3, [pc, #40]	; (800cab0 <vPortSetupTimerInterrupt+0x34>)
 800ca88:	2200      	movs	r2, #0
 800ca8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca8c:	4b09      	ldr	r3, [pc, #36]	; (800cab4 <vPortSetupTimerInterrupt+0x38>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a09      	ldr	r2, [pc, #36]	; (800cab8 <vPortSetupTimerInterrupt+0x3c>)
 800ca92:	fba2 2303 	umull	r2, r3, r2, r3
 800ca96:	099b      	lsrs	r3, r3, #6
 800ca98:	4a08      	ldr	r2, [pc, #32]	; (800cabc <vPortSetupTimerInterrupt+0x40>)
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ca9e:	4b03      	ldr	r3, [pc, #12]	; (800caac <vPortSetupTimerInterrupt+0x30>)
 800caa0:	2207      	movs	r2, #7
 800caa2:	601a      	str	r2, [r3, #0]
}
 800caa4:	bf00      	nop
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bc80      	pop	{r7}
 800caaa:	4770      	bx	lr
 800caac:	e000e010 	.word	0xe000e010
 800cab0:	e000e018 	.word	0xe000e018
 800cab4:	20000010 	.word	0x20000010
 800cab8:	10624dd3 	.word	0x10624dd3
 800cabc:	e000e014 	.word	0xe000e014

0800cac0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cac0:	b480      	push	{r7}
 800cac2:	b085      	sub	sp, #20
 800cac4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cac6:	f3ef 8305 	mrs	r3, IPSR
 800caca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2b0f      	cmp	r3, #15
 800cad0:	d914      	bls.n	800cafc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cad2:	4a16      	ldr	r2, [pc, #88]	; (800cb2c <vPortValidateInterruptPriority+0x6c>)
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	4413      	add	r3, r2
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cadc:	4b14      	ldr	r3, [pc, #80]	; (800cb30 <vPortValidateInterruptPriority+0x70>)
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	7afa      	ldrb	r2, [r7, #11]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d20a      	bcs.n	800cafc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caea:	f383 8811 	msr	BASEPRI, r3
 800caee:	f3bf 8f6f 	isb	sy
 800caf2:	f3bf 8f4f 	dsb	sy
 800caf6:	607b      	str	r3, [r7, #4]
}
 800caf8:	bf00      	nop
 800cafa:	e7fe      	b.n	800cafa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cafc:	4b0d      	ldr	r3, [pc, #52]	; (800cb34 <vPortValidateInterruptPriority+0x74>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cb04:	4b0c      	ldr	r3, [pc, #48]	; (800cb38 <vPortValidateInterruptPriority+0x78>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d90a      	bls.n	800cb22 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb10:	f383 8811 	msr	BASEPRI, r3
 800cb14:	f3bf 8f6f 	isb	sy
 800cb18:	f3bf 8f4f 	dsb	sy
 800cb1c:	603b      	str	r3, [r7, #0]
}
 800cb1e:	bf00      	nop
 800cb20:	e7fe      	b.n	800cb20 <vPortValidateInterruptPriority+0x60>
	}
 800cb22:	bf00      	nop
 800cb24:	3714      	adds	r7, #20
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bc80      	pop	{r7}
 800cb2a:	4770      	bx	lr
 800cb2c:	e000e3f0 	.word	0xe000e3f0
 800cb30:	20000e9c 	.word	0x20000e9c
 800cb34:	e000ed0c 	.word	0xe000ed0c
 800cb38:	20000ea0 	.word	0x20000ea0

0800cb3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b08a      	sub	sp, #40	; 0x28
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cb44:	2300      	movs	r3, #0
 800cb46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cb48:	f7fe fd18 	bl	800b57c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cb4c:	4b58      	ldr	r3, [pc, #352]	; (800ccb0 <pvPortMalloc+0x174>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d101      	bne.n	800cb58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cb54:	f000 f910 	bl	800cd78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cb58:	4b56      	ldr	r3, [pc, #344]	; (800ccb4 <pvPortMalloc+0x178>)
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4013      	ands	r3, r2
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f040 808e 	bne.w	800cc82 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d01d      	beq.n	800cba8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cb6c:	2208      	movs	r2, #8
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	4413      	add	r3, r2
 800cb72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f003 0307 	and.w	r3, r3, #7
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d014      	beq.n	800cba8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f023 0307 	bic.w	r3, r3, #7
 800cb84:	3308      	adds	r3, #8
 800cb86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f003 0307 	and.w	r3, r3, #7
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00a      	beq.n	800cba8 <pvPortMalloc+0x6c>
	__asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	617b      	str	r3, [r7, #20]
}
 800cba4:	bf00      	nop
 800cba6:	e7fe      	b.n	800cba6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d069      	beq.n	800cc82 <pvPortMalloc+0x146>
 800cbae:	4b42      	ldr	r3, [pc, #264]	; (800ccb8 <pvPortMalloc+0x17c>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d864      	bhi.n	800cc82 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cbb8:	4b40      	ldr	r3, [pc, #256]	; (800ccbc <pvPortMalloc+0x180>)
 800cbba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cbbc:	4b3f      	ldr	r3, [pc, #252]	; (800ccbc <pvPortMalloc+0x180>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cbc2:	e004      	b.n	800cbce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d903      	bls.n	800cbe0 <pvPortMalloc+0xa4>
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d1f1      	bne.n	800cbc4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cbe0:	4b33      	ldr	r3, [pc, #204]	; (800ccb0 <pvPortMalloc+0x174>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d04b      	beq.n	800cc82 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cbea:	6a3b      	ldr	r3, [r7, #32]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2208      	movs	r2, #8
 800cbf0:	4413      	add	r3, r2
 800cbf2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	6a3b      	ldr	r3, [r7, #32]
 800cbfa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfe:	685a      	ldr	r2, [r3, #4]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	1ad2      	subs	r2, r2, r3
 800cc04:	2308      	movs	r3, #8
 800cc06:	005b      	lsls	r3, r3, #1
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d91f      	bls.n	800cc4c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cc0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	4413      	add	r3, r2
 800cc12:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc14:	69bb      	ldr	r3, [r7, #24]
 800cc16:	f003 0307 	and.w	r3, r3, #7
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d00a      	beq.n	800cc34 <pvPortMalloc+0xf8>
	__asm volatile
 800cc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc22:	f383 8811 	msr	BASEPRI, r3
 800cc26:	f3bf 8f6f 	isb	sy
 800cc2a:	f3bf 8f4f 	dsb	sy
 800cc2e:	613b      	str	r3, [r7, #16]
}
 800cc30:	bf00      	nop
 800cc32:	e7fe      	b.n	800cc32 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc36:	685a      	ldr	r2, [r3, #4]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	1ad2      	subs	r2, r2, r3
 800cc3c:	69bb      	ldr	r3, [r7, #24]
 800cc3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cc46:	69b8      	ldr	r0, [r7, #24]
 800cc48:	f000 f8f8 	bl	800ce3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc4c:	4b1a      	ldr	r3, [pc, #104]	; (800ccb8 <pvPortMalloc+0x17c>)
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	1ad3      	subs	r3, r2, r3
 800cc56:	4a18      	ldr	r2, [pc, #96]	; (800ccb8 <pvPortMalloc+0x17c>)
 800cc58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc5a:	4b17      	ldr	r3, [pc, #92]	; (800ccb8 <pvPortMalloc+0x17c>)
 800cc5c:	681a      	ldr	r2, [r3, #0]
 800cc5e:	4b18      	ldr	r3, [pc, #96]	; (800ccc0 <pvPortMalloc+0x184>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d203      	bcs.n	800cc6e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cc66:	4b14      	ldr	r3, [pc, #80]	; (800ccb8 <pvPortMalloc+0x17c>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4a15      	ldr	r2, [pc, #84]	; (800ccc0 <pvPortMalloc+0x184>)
 800cc6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc70:	685a      	ldr	r2, [r3, #4]
 800cc72:	4b10      	ldr	r3, [pc, #64]	; (800ccb4 <pvPortMalloc+0x178>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	431a      	orrs	r2, r3
 800cc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7e:	2200      	movs	r2, #0
 800cc80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc82:	f7fe fc89 	bl	800b598 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	f003 0307 	and.w	r3, r3, #7
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d00a      	beq.n	800cca6 <pvPortMalloc+0x16a>
	__asm volatile
 800cc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc94:	f383 8811 	msr	BASEPRI, r3
 800cc98:	f3bf 8f6f 	isb	sy
 800cc9c:	f3bf 8f4f 	dsb	sy
 800cca0:	60fb      	str	r3, [r7, #12]
}
 800cca2:	bf00      	nop
 800cca4:	e7fe      	b.n	800cca4 <pvPortMalloc+0x168>
	return pvReturn;
 800cca6:	69fb      	ldr	r3, [r7, #28]
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3728      	adds	r7, #40	; 0x28
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	20002248 	.word	0x20002248
 800ccb4:	20002254 	.word	0x20002254
 800ccb8:	2000224c 	.word	0x2000224c
 800ccbc:	20002240 	.word	0x20002240
 800ccc0:	20002250 	.word	0x20002250

0800ccc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b086      	sub	sp, #24
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d048      	beq.n	800cd68 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ccd6:	2308      	movs	r3, #8
 800ccd8:	425b      	negs	r3, r3
 800ccda:	697a      	ldr	r2, [r7, #20]
 800ccdc:	4413      	add	r3, r2
 800ccde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	685a      	ldr	r2, [r3, #4]
 800cce8:	4b21      	ldr	r3, [pc, #132]	; (800cd70 <vPortFree+0xac>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4013      	ands	r3, r2
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d10a      	bne.n	800cd08 <vPortFree+0x44>
	__asm volatile
 800ccf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	60fb      	str	r3, [r7, #12]
}
 800cd04:	bf00      	nop
 800cd06:	e7fe      	b.n	800cd06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d00a      	beq.n	800cd26 <vPortFree+0x62>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	60bb      	str	r3, [r7, #8]
}
 800cd22:	bf00      	nop
 800cd24:	e7fe      	b.n	800cd24 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	685a      	ldr	r2, [r3, #4]
 800cd2a:	4b11      	ldr	r3, [pc, #68]	; (800cd70 <vPortFree+0xac>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	4013      	ands	r3, r2
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d019      	beq.n	800cd68 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d115      	bne.n	800cd68 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	685a      	ldr	r2, [r3, #4]
 800cd40:	4b0b      	ldr	r3, [pc, #44]	; (800cd70 <vPortFree+0xac>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	43db      	mvns	r3, r3
 800cd46:	401a      	ands	r2, r3
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cd4c:	f7fe fc16 	bl	800b57c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	685a      	ldr	r2, [r3, #4]
 800cd54:	4b07      	ldr	r3, [pc, #28]	; (800cd74 <vPortFree+0xb0>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	4413      	add	r3, r2
 800cd5a:	4a06      	ldr	r2, [pc, #24]	; (800cd74 <vPortFree+0xb0>)
 800cd5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cd5e:	6938      	ldr	r0, [r7, #16]
 800cd60:	f000 f86c 	bl	800ce3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cd64:	f7fe fc18 	bl	800b598 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cd68:	bf00      	nop
 800cd6a:	3718      	adds	r7, #24
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	20002254 	.word	0x20002254
 800cd74:	2000224c 	.word	0x2000224c

0800cd78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b085      	sub	sp, #20
 800cd7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd7e:	f241 339c 	movw	r3, #5020	; 0x139c
 800cd82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd84:	4b27      	ldr	r3, [pc, #156]	; (800ce24 <prvHeapInit+0xac>)
 800cd86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f003 0307 	and.w	r3, r3, #7
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d00c      	beq.n	800cdac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	3307      	adds	r3, #7
 800cd96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f023 0307 	bic.w	r3, r3, #7
 800cd9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	4a1f      	ldr	r2, [pc, #124]	; (800ce24 <prvHeapInit+0xac>)
 800cda8:	4413      	add	r3, r2
 800cdaa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cdb0:	4a1d      	ldr	r2, [pc, #116]	; (800ce28 <prvHeapInit+0xb0>)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cdb6:	4b1c      	ldr	r3, [pc, #112]	; (800ce28 <prvHeapInit+0xb0>)
 800cdb8:	2200      	movs	r2, #0
 800cdba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	68ba      	ldr	r2, [r7, #8]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cdc4:	2208      	movs	r2, #8
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	1a9b      	subs	r3, r3, r2
 800cdca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f023 0307 	bic.w	r3, r3, #7
 800cdd2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	4a15      	ldr	r2, [pc, #84]	; (800ce2c <prvHeapInit+0xb4>)
 800cdd8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cdda:	4b14      	ldr	r3, [pc, #80]	; (800ce2c <prvHeapInit+0xb4>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2200      	movs	r2, #0
 800cde0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cde2:	4b12      	ldr	r3, [pc, #72]	; (800ce2c <prvHeapInit+0xb4>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2200      	movs	r2, #0
 800cde8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	1ad2      	subs	r2, r2, r3
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cdf8:	4b0c      	ldr	r3, [pc, #48]	; (800ce2c <prvHeapInit+0xb4>)
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	4a0a      	ldr	r2, [pc, #40]	; (800ce30 <prvHeapInit+0xb8>)
 800ce06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	4a09      	ldr	r2, [pc, #36]	; (800ce34 <prvHeapInit+0xbc>)
 800ce0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ce10:	4b09      	ldr	r3, [pc, #36]	; (800ce38 <prvHeapInit+0xc0>)
 800ce12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ce16:	601a      	str	r2, [r3, #0]
}
 800ce18:	bf00      	nop
 800ce1a:	3714      	adds	r7, #20
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bc80      	pop	{r7}
 800ce20:	4770      	bx	lr
 800ce22:	bf00      	nop
 800ce24:	20000ea4 	.word	0x20000ea4
 800ce28:	20002240 	.word	0x20002240
 800ce2c:	20002248 	.word	0x20002248
 800ce30:	20002250 	.word	0x20002250
 800ce34:	2000224c 	.word	0x2000224c
 800ce38:	20002254 	.word	0x20002254

0800ce3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b085      	sub	sp, #20
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ce44:	4b27      	ldr	r3, [pc, #156]	; (800cee4 <prvInsertBlockIntoFreeList+0xa8>)
 800ce46:	60fb      	str	r3, [r7, #12]
 800ce48:	e002      	b.n	800ce50 <prvInsertBlockIntoFreeList+0x14>
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	60fb      	str	r3, [r7, #12]
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d8f7      	bhi.n	800ce4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	68ba      	ldr	r2, [r7, #8]
 800ce64:	4413      	add	r3, r2
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d108      	bne.n	800ce7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	685a      	ldr	r2, [r3, #4]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	441a      	add	r2, r3
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	68ba      	ldr	r2, [r7, #8]
 800ce88:	441a      	add	r2, r3
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d118      	bne.n	800cec4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	4b14      	ldr	r3, [pc, #80]	; (800cee8 <prvInsertBlockIntoFreeList+0xac>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d00d      	beq.n	800ceba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	685a      	ldr	r2, [r3, #4]
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	441a      	add	r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	601a      	str	r2, [r3, #0]
 800ceb8:	e008      	b.n	800cecc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ceba:	4b0b      	ldr	r3, [pc, #44]	; (800cee8 <prvInsertBlockIntoFreeList+0xac>)
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	601a      	str	r2, [r3, #0]
 800cec2:	e003      	b.n	800cecc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d002      	beq.n	800ceda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ceda:	bf00      	nop
 800cedc:	3714      	adds	r7, #20
 800cede:	46bd      	mov	sp, r7
 800cee0:	bc80      	pop	{r7}
 800cee2:	4770      	bx	lr
 800cee4:	20002240 	.word	0x20002240
 800cee8:	20002248 	.word	0x20002248

0800ceec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cef0:	2200      	movs	r2, #0
 800cef2:	4912      	ldr	r1, [pc, #72]	; (800cf3c <MX_USB_DEVICE_Init+0x50>)
 800cef4:	4812      	ldr	r0, [pc, #72]	; (800cf40 <MX_USB_DEVICE_Init+0x54>)
 800cef6:	f7fc f82e 	bl	8008f56 <USBD_Init>
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d001      	beq.n	800cf04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cf00:	f7f3 fd36 	bl	8000970 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cf04:	490f      	ldr	r1, [pc, #60]	; (800cf44 <MX_USB_DEVICE_Init+0x58>)
 800cf06:	480e      	ldr	r0, [pc, #56]	; (800cf40 <MX_USB_DEVICE_Init+0x54>)
 800cf08:	f7fc f850 	bl	8008fac <USBD_RegisterClass>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d001      	beq.n	800cf16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cf12:	f7f3 fd2d 	bl	8000970 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cf16:	490c      	ldr	r1, [pc, #48]	; (800cf48 <MX_USB_DEVICE_Init+0x5c>)
 800cf18:	4809      	ldr	r0, [pc, #36]	; (800cf40 <MX_USB_DEVICE_Init+0x54>)
 800cf1a:	f7fb ff81 	bl	8008e20 <USBD_CDC_RegisterInterface>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d001      	beq.n	800cf28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cf24:	f7f3 fd24 	bl	8000970 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cf28:	4805      	ldr	r0, [pc, #20]	; (800cf40 <MX_USB_DEVICE_Init+0x54>)
 800cf2a:	f7fc f858 	bl	8008fde <USBD_Start>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d001      	beq.n	800cf38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cf34:	f7f3 fd1c 	bl	8000970 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cf38:	bf00      	nop
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	20000140 	.word	0x20000140
 800cf40:	20002698 	.word	0x20002698
 800cf44:	20000028 	.word	0x20000028
 800cf48:	20000130 	.word	0x20000130

0800cf4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cf50:	2200      	movs	r2, #0
 800cf52:	4905      	ldr	r1, [pc, #20]	; (800cf68 <CDC_Init_FS+0x1c>)
 800cf54:	4805      	ldr	r0, [pc, #20]	; (800cf6c <CDC_Init_FS+0x20>)
 800cf56:	f7fb ff79 	bl	8008e4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cf5a:	4905      	ldr	r1, [pc, #20]	; (800cf70 <CDC_Init_FS+0x24>)
 800cf5c:	4803      	ldr	r0, [pc, #12]	; (800cf6c <CDC_Init_FS+0x20>)
 800cf5e:	f7fb ff8e 	bl	8008e7e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cf62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	20002d44 	.word	0x20002d44
 800cf6c:	20002698 	.word	0x20002698
 800cf70:	2000295c 	.word	0x2000295c

0800cf74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cf74:	b480      	push	{r7}
 800cf76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cf78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bc80      	pop	{r7}
 800cf80:	4770      	bx	lr
	...

0800cf84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	6039      	str	r1, [r7, #0]
 800cf8e:	71fb      	strb	r3, [r7, #7]
 800cf90:	4613      	mov	r3, r2
 800cf92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cf94:	79fb      	ldrb	r3, [r7, #7]
 800cf96:	2b23      	cmp	r3, #35	; 0x23
 800cf98:	d84a      	bhi.n	800d030 <CDC_Control_FS+0xac>
 800cf9a:	a201      	add	r2, pc, #4	; (adr r2, 800cfa0 <CDC_Control_FS+0x1c>)
 800cf9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfa0:	0800d031 	.word	0x0800d031
 800cfa4:	0800d031 	.word	0x0800d031
 800cfa8:	0800d031 	.word	0x0800d031
 800cfac:	0800d031 	.word	0x0800d031
 800cfb0:	0800d031 	.word	0x0800d031
 800cfb4:	0800d031 	.word	0x0800d031
 800cfb8:	0800d031 	.word	0x0800d031
 800cfbc:	0800d031 	.word	0x0800d031
 800cfc0:	0800d031 	.word	0x0800d031
 800cfc4:	0800d031 	.word	0x0800d031
 800cfc8:	0800d031 	.word	0x0800d031
 800cfcc:	0800d031 	.word	0x0800d031
 800cfd0:	0800d031 	.word	0x0800d031
 800cfd4:	0800d031 	.word	0x0800d031
 800cfd8:	0800d031 	.word	0x0800d031
 800cfdc:	0800d031 	.word	0x0800d031
 800cfe0:	0800d031 	.word	0x0800d031
 800cfe4:	0800d031 	.word	0x0800d031
 800cfe8:	0800d031 	.word	0x0800d031
 800cfec:	0800d031 	.word	0x0800d031
 800cff0:	0800d031 	.word	0x0800d031
 800cff4:	0800d031 	.word	0x0800d031
 800cff8:	0800d031 	.word	0x0800d031
 800cffc:	0800d031 	.word	0x0800d031
 800d000:	0800d031 	.word	0x0800d031
 800d004:	0800d031 	.word	0x0800d031
 800d008:	0800d031 	.word	0x0800d031
 800d00c:	0800d031 	.word	0x0800d031
 800d010:	0800d031 	.word	0x0800d031
 800d014:	0800d031 	.word	0x0800d031
 800d018:	0800d031 	.word	0x0800d031
 800d01c:	0800d031 	.word	0x0800d031
 800d020:	0800d031 	.word	0x0800d031
 800d024:	0800d031 	.word	0x0800d031
 800d028:	0800d031 	.word	0x0800d031
 800d02c:	0800d031 	.word	0x0800d031
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d030:	bf00      	nop
  }

  return (USBD_OK);
 800d032:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d034:	4618      	mov	r0, r3
 800d036:	370c      	adds	r7, #12
 800d038:	46bd      	mov	sp, r7
 800d03a:	bc80      	pop	{r7}
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop

0800d040 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 800d04a:	2300      	movs	r3, #0
 800d04c:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < (*Len); i++)
 800d04e:	2300      	movs	r3, #0
 800d050:	60fb      	str	r3, [r7, #12]
 800d052:	e00c      	b.n	800d06e <CDC_Receive_FS+0x2e>
	{
		xQueueSendToBackFromISR(qUSB_rcvQueue, &Buf[i], &xHigherPriorityTaskWoken );
 800d054:	4b14      	ldr	r3, [pc, #80]	; (800d0a8 <CDC_Receive_FS+0x68>)
 800d056:	6818      	ldr	r0, [r3, #0]
 800d058:	687a      	ldr	r2, [r7, #4]
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	18d1      	adds	r1, r2, r3
 800d05e:	f107 0208 	add.w	r2, r7, #8
 800d062:	2300      	movs	r3, #0
 800d064:	f7fd fcf6 	bl	800aa54 <xQueueGenericSendFromISR>
	for (uint32_t i = 0; i < (*Len); i++)
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	3301      	adds	r3, #1
 800d06c:	60fb      	str	r3, [r7, #12]
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	68fa      	ldr	r2, [r7, #12]
 800d074:	429a      	cmp	r2, r3
 800d076:	d3ed      	bcc.n	800d054 <CDC_Receive_FS+0x14>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d078:	6879      	ldr	r1, [r7, #4]
 800d07a:	480c      	ldr	r0, [pc, #48]	; (800d0ac <CDC_Receive_FS+0x6c>)
 800d07c:	f7fb feff 	bl	8008e7e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d080:	480a      	ldr	r0, [pc, #40]	; (800d0ac <CDC_Receive_FS+0x6c>)
 800d082:	f7fb ff3e 	bl	8008f02 <USBD_CDC_ReceivePacket>
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d007      	beq.n	800d09c <CDC_Receive_FS+0x5c>
 800d08c:	4b08      	ldr	r3, [pc, #32]	; (800d0b0 <CDC_Receive_FS+0x70>)
 800d08e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d092:	601a      	str	r2, [r3, #0]
 800d094:	f3bf 8f4f 	dsb	sy
 800d098:	f3bf 8f6f 	isb	sy
  return (USBD_OK);
 800d09c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	2000248c 	.word	0x2000248c
 800d0ac:	20002698 	.word	0x20002698
 800d0b0:	e000ed04 	.word	0xe000ed04

0800d0b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	460b      	mov	r3, r1
 800d0be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d0c4:	4b0d      	ldr	r3, [pc, #52]	; (800d0fc <CDC_Transmit_FS+0x48>)
 800d0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d001      	beq.n	800d0da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e00b      	b.n	800d0f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d0da:	887b      	ldrh	r3, [r7, #2]
 800d0dc:	461a      	mov	r2, r3
 800d0de:	6879      	ldr	r1, [r7, #4]
 800d0e0:	4806      	ldr	r0, [pc, #24]	; (800d0fc <CDC_Transmit_FS+0x48>)
 800d0e2:	f7fb feb3 	bl	8008e4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d0e6:	4805      	ldr	r0, [pc, #20]	; (800d0fc <CDC_Transmit_FS+0x48>)
 800d0e8:	f7fb fedc 	bl	8008ea4 <USBD_CDC_TransmitPacket>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3710      	adds	r7, #16
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	20002698 	.word	0x20002698

0800d100 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d100:	b480      	push	{r7}
 800d102:	b083      	sub	sp, #12
 800d104:	af00      	add	r7, sp, #0
 800d106:	4603      	mov	r3, r0
 800d108:	6039      	str	r1, [r7, #0]
 800d10a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	2212      	movs	r2, #18
 800d110:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d112:	4b03      	ldr	r3, [pc, #12]	; (800d120 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d114:	4618      	mov	r0, r3
 800d116:	370c      	adds	r7, #12
 800d118:	46bd      	mov	sp, r7
 800d11a:	bc80      	pop	{r7}
 800d11c:	4770      	bx	lr
 800d11e:	bf00      	nop
 800d120:	2000015c 	.word	0x2000015c

0800d124 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
 800d12a:	4603      	mov	r3, r0
 800d12c:	6039      	str	r1, [r7, #0]
 800d12e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	2204      	movs	r2, #4
 800d134:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d136:	4b03      	ldr	r3, [pc, #12]	; (800d144 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d138:	4618      	mov	r0, r3
 800d13a:	370c      	adds	r7, #12
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bc80      	pop	{r7}
 800d140:	4770      	bx	lr
 800d142:	bf00      	nop
 800d144:	20000170 	.word	0x20000170

0800d148 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	4603      	mov	r3, r0
 800d150:	6039      	str	r1, [r7, #0]
 800d152:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d154:	79fb      	ldrb	r3, [r7, #7]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d105      	bne.n	800d166 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d15a:	683a      	ldr	r2, [r7, #0]
 800d15c:	4907      	ldr	r1, [pc, #28]	; (800d17c <USBD_FS_ProductStrDescriptor+0x34>)
 800d15e:	4808      	ldr	r0, [pc, #32]	; (800d180 <USBD_FS_ProductStrDescriptor+0x38>)
 800d160:	f7fc feb6 	bl	8009ed0 <USBD_GetString>
 800d164:	e004      	b.n	800d170 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d166:	683a      	ldr	r2, [r7, #0]
 800d168:	4904      	ldr	r1, [pc, #16]	; (800d17c <USBD_FS_ProductStrDescriptor+0x34>)
 800d16a:	4805      	ldr	r0, [pc, #20]	; (800d180 <USBD_FS_ProductStrDescriptor+0x38>)
 800d16c:	f7fc feb0 	bl	8009ed0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d170:	4b02      	ldr	r3, [pc, #8]	; (800d17c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d172:	4618      	mov	r0, r3
 800d174:	3708      	adds	r7, #8
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	2000312c 	.word	0x2000312c
 800d180:	0800db44 	.word	0x0800db44

0800d184 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
 800d18a:	4603      	mov	r3, r0
 800d18c:	6039      	str	r1, [r7, #0]
 800d18e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d190:	683a      	ldr	r2, [r7, #0]
 800d192:	4904      	ldr	r1, [pc, #16]	; (800d1a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d194:	4804      	ldr	r0, [pc, #16]	; (800d1a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d196:	f7fc fe9b 	bl	8009ed0 <USBD_GetString>
  return USBD_StrDesc;
 800d19a:	4b02      	ldr	r3, [pc, #8]	; (800d1a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3708      	adds	r7, #8
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}
 800d1a4:	2000312c 	.word	0x2000312c
 800d1a8:	0800db50 	.word	0x0800db50

0800d1ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	6039      	str	r1, [r7, #0]
 800d1b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	221a      	movs	r2, #26
 800d1bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d1be:	f000 f843 	bl	800d248 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d1c2:	4b02      	ldr	r3, [pc, #8]	; (800d1cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3708      	adds	r7, #8
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}
 800d1cc:	20000174 	.word	0x20000174

0800d1d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	6039      	str	r1, [r7, #0]
 800d1da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d1dc:	79fb      	ldrb	r3, [r7, #7]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d105      	bne.n	800d1ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d1e2:	683a      	ldr	r2, [r7, #0]
 800d1e4:	4907      	ldr	r1, [pc, #28]	; (800d204 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d1e6:	4808      	ldr	r0, [pc, #32]	; (800d208 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d1e8:	f7fc fe72 	bl	8009ed0 <USBD_GetString>
 800d1ec:	e004      	b.n	800d1f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d1ee:	683a      	ldr	r2, [r7, #0]
 800d1f0:	4904      	ldr	r1, [pc, #16]	; (800d204 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d1f2:	4805      	ldr	r0, [pc, #20]	; (800d208 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d1f4:	f7fc fe6c 	bl	8009ed0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1f8:	4b02      	ldr	r3, [pc, #8]	; (800d204 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3708      	adds	r7, #8
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	2000312c 	.word	0x2000312c
 800d208:	0800db64 	.word	0x0800db64

0800d20c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
 800d212:	4603      	mov	r3, r0
 800d214:	6039      	str	r1, [r7, #0]
 800d216:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d218:	79fb      	ldrb	r3, [r7, #7]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d105      	bne.n	800d22a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d21e:	683a      	ldr	r2, [r7, #0]
 800d220:	4907      	ldr	r1, [pc, #28]	; (800d240 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d222:	4808      	ldr	r0, [pc, #32]	; (800d244 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d224:	f7fc fe54 	bl	8009ed0 <USBD_GetString>
 800d228:	e004      	b.n	800d234 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d22a:	683a      	ldr	r2, [r7, #0]
 800d22c:	4904      	ldr	r1, [pc, #16]	; (800d240 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d22e:	4805      	ldr	r0, [pc, #20]	; (800d244 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d230:	f7fc fe4e 	bl	8009ed0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d234:	4b02      	ldr	r3, [pc, #8]	; (800d240 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d236:	4618      	mov	r0, r3
 800d238:	3708      	adds	r7, #8
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	2000312c 	.word	0x2000312c
 800d244:	0800db70 	.word	0x0800db70

0800d248 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d24e:	4b0f      	ldr	r3, [pc, #60]	; (800d28c <Get_SerialNum+0x44>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d254:	4b0e      	ldr	r3, [pc, #56]	; (800d290 <Get_SerialNum+0x48>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d25a:	4b0e      	ldr	r3, [pc, #56]	; (800d294 <Get_SerialNum+0x4c>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d260:	68fa      	ldr	r2, [r7, #12]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	4413      	add	r3, r2
 800d266:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d009      	beq.n	800d282 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d26e:	2208      	movs	r2, #8
 800d270:	4909      	ldr	r1, [pc, #36]	; (800d298 <Get_SerialNum+0x50>)
 800d272:	68f8      	ldr	r0, [r7, #12]
 800d274:	f000 f814 	bl	800d2a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d278:	2204      	movs	r2, #4
 800d27a:	4908      	ldr	r1, [pc, #32]	; (800d29c <Get_SerialNum+0x54>)
 800d27c:	68b8      	ldr	r0, [r7, #8]
 800d27e:	f000 f80f 	bl	800d2a0 <IntToUnicode>
  }
}
 800d282:	bf00      	nop
 800d284:	3710      	adds	r7, #16
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	1ffff7e8 	.word	0x1ffff7e8
 800d290:	1ffff7ec 	.word	0x1ffff7ec
 800d294:	1ffff7f0 	.word	0x1ffff7f0
 800d298:	20000176 	.word	0x20000176
 800d29c:	20000186 	.word	0x20000186

0800d2a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b087      	sub	sp, #28
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	4613      	mov	r3, r2
 800d2ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	75fb      	strb	r3, [r7, #23]
 800d2b6:	e027      	b.n	800d308 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	0f1b      	lsrs	r3, r3, #28
 800d2bc:	2b09      	cmp	r3, #9
 800d2be:	d80b      	bhi.n	800d2d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	0f1b      	lsrs	r3, r3, #28
 800d2c4:	b2da      	uxtb	r2, r3
 800d2c6:	7dfb      	ldrb	r3, [r7, #23]
 800d2c8:	005b      	lsls	r3, r3, #1
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	440b      	add	r3, r1
 800d2d0:	3230      	adds	r2, #48	; 0x30
 800d2d2:	b2d2      	uxtb	r2, r2
 800d2d4:	701a      	strb	r2, [r3, #0]
 800d2d6:	e00a      	b.n	800d2ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	0f1b      	lsrs	r3, r3, #28
 800d2dc:	b2da      	uxtb	r2, r3
 800d2de:	7dfb      	ldrb	r3, [r7, #23]
 800d2e0:	005b      	lsls	r3, r3, #1
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	440b      	add	r3, r1
 800d2e8:	3237      	adds	r2, #55	; 0x37
 800d2ea:	b2d2      	uxtb	r2, r2
 800d2ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	011b      	lsls	r3, r3, #4
 800d2f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d2f4:	7dfb      	ldrb	r3, [r7, #23]
 800d2f6:	005b      	lsls	r3, r3, #1
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	68ba      	ldr	r2, [r7, #8]
 800d2fc:	4413      	add	r3, r2
 800d2fe:	2200      	movs	r2, #0
 800d300:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d302:	7dfb      	ldrb	r3, [r7, #23]
 800d304:	3301      	adds	r3, #1
 800d306:	75fb      	strb	r3, [r7, #23]
 800d308:	7dfa      	ldrb	r2, [r7, #23]
 800d30a:	79fb      	ldrb	r3, [r7, #7]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d3d3      	bcc.n	800d2b8 <IntToUnicode+0x18>
  }
}
 800d310:	bf00      	nop
 800d312:	bf00      	nop
 800d314:	371c      	adds	r7, #28
 800d316:	46bd      	mov	sp, r7
 800d318:	bc80      	pop	{r7}
 800d31a:	4770      	bx	lr

0800d31c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4a0d      	ldr	r2, [pc, #52]	; (800d360 <HAL_PCD_MspInit+0x44>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d113      	bne.n	800d356 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d32e:	4b0d      	ldr	r3, [pc, #52]	; (800d364 <HAL_PCD_MspInit+0x48>)
 800d330:	69db      	ldr	r3, [r3, #28]
 800d332:	4a0c      	ldr	r2, [pc, #48]	; (800d364 <HAL_PCD_MspInit+0x48>)
 800d334:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d338:	61d3      	str	r3, [r2, #28]
 800d33a:	4b0a      	ldr	r3, [pc, #40]	; (800d364 <HAL_PCD_MspInit+0x48>)
 800d33c:	69db      	ldr	r3, [r3, #28]
 800d33e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d342:	60fb      	str	r3, [r7, #12]
 800d344:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800d346:	2200      	movs	r2, #0
 800d348:	2105      	movs	r1, #5
 800d34a:	2014      	movs	r0, #20
 800d34c:	f7f5 fb05 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800d350:	2014      	movs	r0, #20
 800d352:	f7f5 fb1e 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d356:	bf00      	nop
 800d358:	3710      	adds	r7, #16
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	40005c00 	.word	0x40005c00
 800d364:	40021000 	.word	0x40021000

0800d368 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b082      	sub	sp, #8
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d37c:	4619      	mov	r1, r3
 800d37e:	4610      	mov	r0, r2
 800d380:	f7fb fe75 	bl	800906e <USBD_LL_SetupStage>
}
 800d384:	bf00      	nop
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b082      	sub	sp, #8
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	460b      	mov	r3, r1
 800d396:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d39e:	78fa      	ldrb	r2, [r7, #3]
 800d3a0:	6879      	ldr	r1, [r7, #4]
 800d3a2:	4613      	mov	r3, r2
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	4413      	add	r3, r2
 800d3a8:	00db      	lsls	r3, r3, #3
 800d3aa:	440b      	add	r3, r1
 800d3ac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	78fb      	ldrb	r3, [r7, #3]
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	f7fb fea7 	bl	8009108 <USBD_LL_DataOutStage>
}
 800d3ba:	bf00      	nop
 800d3bc:	3708      	adds	r7, #8
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}

0800d3c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b082      	sub	sp, #8
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d3d4:	78fa      	ldrb	r2, [r7, #3]
 800d3d6:	6879      	ldr	r1, [r7, #4]
 800d3d8:	4613      	mov	r3, r2
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	4413      	add	r3, r2
 800d3de:	00db      	lsls	r3, r3, #3
 800d3e0:	440b      	add	r3, r1
 800d3e2:	333c      	adds	r3, #60	; 0x3c
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	78fb      	ldrb	r3, [r7, #3]
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	f7fb fefe 	bl	80091ea <USBD_LL_DataInStage>
}
 800d3ee:	bf00      	nop
 800d3f0:	3708      	adds	r7, #8
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}

0800d3f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3f6:	b580      	push	{r7, lr}
 800d3f8:	b082      	sub	sp, #8
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d404:	4618      	mov	r0, r3
 800d406:	f7fc f80e 	bl	8009426 <USBD_LL_SOF>
}
 800d40a:	bf00      	nop
 800d40c:	3708      	adds	r7, #8
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}

0800d412 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d412:	b580      	push	{r7, lr}
 800d414:	b084      	sub	sp, #16
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d41a:	2301      	movs	r3, #1
 800d41c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	689b      	ldr	r3, [r3, #8]
 800d422:	2b02      	cmp	r3, #2
 800d424:	d001      	beq.n	800d42a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d426:	f7f3 faa3 	bl	8000970 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d430:	7bfa      	ldrb	r2, [r7, #15]
 800d432:	4611      	mov	r1, r2
 800d434:	4618      	mov	r0, r3
 800d436:	f7fb ffbe 	bl	80093b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d440:	4618      	mov	r0, r3
 800d442:	f7fb ff77 	bl	8009334 <USBD_LL_Reset>
}
 800d446:	bf00      	nop
 800d448:	3710      	adds	r7, #16
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
	...

0800d450 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d45e:	4618      	mov	r0, r3
 800d460:	f7fb ffb8 	bl	80093d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	699b      	ldr	r3, [r3, #24]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d005      	beq.n	800d478 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d46c:	4b04      	ldr	r3, [pc, #16]	; (800d480 <HAL_PCD_SuspendCallback+0x30>)
 800d46e:	691b      	ldr	r3, [r3, #16]
 800d470:	4a03      	ldr	r2, [pc, #12]	; (800d480 <HAL_PCD_SuspendCallback+0x30>)
 800d472:	f043 0306 	orr.w	r3, r3, #6
 800d476:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d478:	bf00      	nop
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	e000ed00 	.word	0xe000ed00

0800d484 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d492:	4618      	mov	r0, r3
 800d494:	f7fb ffb2 	bl	80093fc <USBD_LL_Resume>
}
 800d498:	bf00      	nop
 800d49a:	3708      	adds	r7, #8
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d4a8:	4a28      	ldr	r2, [pc, #160]	; (800d54c <USBD_LL_Init+0xac>)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	4a26      	ldr	r2, [pc, #152]	; (800d54c <USBD_LL_Init+0xac>)
 800d4b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d4b8:	4b24      	ldr	r3, [pc, #144]	; (800d54c <USBD_LL_Init+0xac>)
 800d4ba:	4a25      	ldr	r2, [pc, #148]	; (800d550 <USBD_LL_Init+0xb0>)
 800d4bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d4be:	4b23      	ldr	r3, [pc, #140]	; (800d54c <USBD_LL_Init+0xac>)
 800d4c0:	2208      	movs	r2, #8
 800d4c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d4c4:	4b21      	ldr	r3, [pc, #132]	; (800d54c <USBD_LL_Init+0xac>)
 800d4c6:	2202      	movs	r2, #2
 800d4c8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d4ca:	4b20      	ldr	r3, [pc, #128]	; (800d54c <USBD_LL_Init+0xac>)
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d4d0:	4b1e      	ldr	r3, [pc, #120]	; (800d54c <USBD_LL_Init+0xac>)
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d4d6:	4b1d      	ldr	r3, [pc, #116]	; (800d54c <USBD_LL_Init+0xac>)
 800d4d8:	2200      	movs	r2, #0
 800d4da:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d4dc:	481b      	ldr	r0, [pc, #108]	; (800d54c <USBD_LL_Init+0xac>)
 800d4de:	f7f5 fd05 	bl	8002eec <HAL_PCD_Init>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d001      	beq.n	800d4ec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d4e8:	f7f3 fa42 	bl	8000970 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d4f2:	2318      	movs	r3, #24
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	2100      	movs	r1, #0
 800d4f8:	f7f7 f97b 	bl	80047f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d502:	2358      	movs	r3, #88	; 0x58
 800d504:	2200      	movs	r2, #0
 800d506:	2180      	movs	r1, #128	; 0x80
 800d508:	f7f7 f973 	bl	80047f2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d512:	23c0      	movs	r3, #192	; 0xc0
 800d514:	2200      	movs	r2, #0
 800d516:	2181      	movs	r1, #129	; 0x81
 800d518:	f7f7 f96b 	bl	80047f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d522:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d526:	2200      	movs	r2, #0
 800d528:	2101      	movs	r1, #1
 800d52a:	f7f7 f962 	bl	80047f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d534:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d538:	2200      	movs	r2, #0
 800d53a:	2182      	movs	r1, #130	; 0x82
 800d53c:	f7f7 f959 	bl	80047f2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d540:	2300      	movs	r3, #0
}
 800d542:	4618      	mov	r0, r3
 800d544:	3708      	adds	r7, #8
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	2000332c 	.word	0x2000332c
 800d550:	40005c00 	.word	0x40005c00

0800d554 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d55c:	2300      	movs	r3, #0
 800d55e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d560:	2300      	movs	r3, #0
 800d562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7f5 fdc9 	bl	8003102 <HAL_PCD_Start>
 800d570:	4603      	mov	r3, r0
 800d572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d574:	7bfb      	ldrb	r3, [r7, #15]
 800d576:	4618      	mov	r0, r3
 800d578:	f000 f94e 	bl	800d818 <USBD_Get_USB_Status>
 800d57c:	4603      	mov	r3, r0
 800d57e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d580:	7bbb      	ldrb	r3, [r7, #14]
}
 800d582:	4618      	mov	r0, r3
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}

0800d58a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b084      	sub	sp, #16
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
 800d592:	4608      	mov	r0, r1
 800d594:	4611      	mov	r1, r2
 800d596:	461a      	mov	r2, r3
 800d598:	4603      	mov	r3, r0
 800d59a:	70fb      	strb	r3, [r7, #3]
 800d59c:	460b      	mov	r3, r1
 800d59e:	70bb      	strb	r3, [r7, #2]
 800d5a0:	4613      	mov	r3, r2
 800d5a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d5b2:	78bb      	ldrb	r3, [r7, #2]
 800d5b4:	883a      	ldrh	r2, [r7, #0]
 800d5b6:	78f9      	ldrb	r1, [r7, #3]
 800d5b8:	f7f5 ff43 	bl	8003442 <HAL_PCD_EP_Open>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5c0:	7bfb      	ldrb	r3, [r7, #15]
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f000 f928 	bl	800d818 <USBD_Get_USB_Status>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3710      	adds	r7, #16
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}

0800d5d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b084      	sub	sp, #16
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
 800d5de:	460b      	mov	r3, r1
 800d5e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5f0:	78fa      	ldrb	r2, [r7, #3]
 800d5f2:	4611      	mov	r1, r2
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7f5 ff8a 	bl	800350e <HAL_PCD_EP_Close>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5fe:	7bfb      	ldrb	r3, [r7, #15]
 800d600:	4618      	mov	r0, r3
 800d602:	f000 f909 	bl	800d818 <USBD_Get_USB_Status>
 800d606:	4603      	mov	r3, r0
 800d608:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d60a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3710      	adds	r7, #16
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	460b      	mov	r3, r1
 800d61e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d620:	2300      	movs	r3, #0
 800d622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d624:	2300      	movs	r3, #0
 800d626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d62e:	78fa      	ldrb	r2, [r7, #3]
 800d630:	4611      	mov	r1, r2
 800d632:	4618      	mov	r0, r3
 800d634:	f7f6 f84a 	bl	80036cc <HAL_PCD_EP_SetStall>
 800d638:	4603      	mov	r3, r0
 800d63a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d63c:	7bfb      	ldrb	r3, [r7, #15]
 800d63e:	4618      	mov	r0, r3
 800d640:	f000 f8ea 	bl	800d818 <USBD_Get_USB_Status>
 800d644:	4603      	mov	r3, r0
 800d646:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d648:	7bbb      	ldrb	r3, [r7, #14]
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3710      	adds	r7, #16
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}

0800d652 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d652:	b580      	push	{r7, lr}
 800d654:	b084      	sub	sp, #16
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
 800d65a:	460b      	mov	r3, r1
 800d65c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d65e:	2300      	movs	r3, #0
 800d660:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d662:	2300      	movs	r3, #0
 800d664:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d66c:	78fa      	ldrb	r2, [r7, #3]
 800d66e:	4611      	mov	r1, r2
 800d670:	4618      	mov	r0, r3
 800d672:	f7f6 f88b 	bl	800378c <HAL_PCD_EP_ClrStall>
 800d676:	4603      	mov	r3, r0
 800d678:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d67a:	7bfb      	ldrb	r3, [r7, #15]
 800d67c:	4618      	mov	r0, r3
 800d67e:	f000 f8cb 	bl	800d818 <USBD_Get_USB_Status>
 800d682:	4603      	mov	r3, r0
 800d684:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d686:	7bbb      	ldrb	r3, [r7, #14]
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3710      	adds	r7, #16
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d690:	b480      	push	{r7}
 800d692:	b085      	sub	sp, #20
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	460b      	mov	r3, r1
 800d69a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d6a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d6a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	da0c      	bge.n	800d6c6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d6ac:	78fb      	ldrb	r3, [r7, #3]
 800d6ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6b2:	68f9      	ldr	r1, [r7, #12]
 800d6b4:	1c5a      	adds	r2, r3, #1
 800d6b6:	4613      	mov	r3, r2
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	4413      	add	r3, r2
 800d6bc:	00db      	lsls	r3, r3, #3
 800d6be:	440b      	add	r3, r1
 800d6c0:	3302      	adds	r3, #2
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	e00b      	b.n	800d6de <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d6c6:	78fb      	ldrb	r3, [r7, #3]
 800d6c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6cc:	68f9      	ldr	r1, [r7, #12]
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	009b      	lsls	r3, r3, #2
 800d6d2:	4413      	add	r3, r2
 800d6d4:	00db      	lsls	r3, r3, #3
 800d6d6:	440b      	add	r3, r1
 800d6d8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d6dc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3714      	adds	r7, #20
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bc80      	pop	{r7}
 800d6e6:	4770      	bx	lr

0800d6e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b084      	sub	sp, #16
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	460b      	mov	r3, r1
 800d6f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d702:	78fa      	ldrb	r2, [r7, #3]
 800d704:	4611      	mov	r1, r2
 800d706:	4618      	mov	r0, r3
 800d708:	f7f5 fe76 	bl	80033f8 <HAL_PCD_SetAddress>
 800d70c:	4603      	mov	r3, r0
 800d70e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d710:	7bfb      	ldrb	r3, [r7, #15]
 800d712:	4618      	mov	r0, r3
 800d714:	f000 f880 	bl	800d818 <USBD_Get_USB_Status>
 800d718:	4603      	mov	r3, r0
 800d71a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d71c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d726:	b580      	push	{r7, lr}
 800d728:	b086      	sub	sp, #24
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	60f8      	str	r0, [r7, #12]
 800d72e:	607a      	str	r2, [r7, #4]
 800d730:	461a      	mov	r2, r3
 800d732:	460b      	mov	r3, r1
 800d734:	72fb      	strb	r3, [r7, #11]
 800d736:	4613      	mov	r3, r2
 800d738:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d73a:	2300      	movs	r3, #0
 800d73c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d73e:	2300      	movs	r3, #0
 800d740:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d748:	893b      	ldrh	r3, [r7, #8]
 800d74a:	7af9      	ldrb	r1, [r7, #11]
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	f7f5 ff7a 	bl	8003646 <HAL_PCD_EP_Transmit>
 800d752:	4603      	mov	r3, r0
 800d754:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d756:	7dfb      	ldrb	r3, [r7, #23]
 800d758:	4618      	mov	r0, r3
 800d75a:	f000 f85d 	bl	800d818 <USBD_Get_USB_Status>
 800d75e:	4603      	mov	r3, r0
 800d760:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d762:	7dbb      	ldrb	r3, [r7, #22]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3718      	adds	r7, #24
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b086      	sub	sp, #24
 800d770:	af00      	add	r7, sp, #0
 800d772:	60f8      	str	r0, [r7, #12]
 800d774:	607a      	str	r2, [r7, #4]
 800d776:	461a      	mov	r2, r3
 800d778:	460b      	mov	r3, r1
 800d77a:	72fb      	strb	r3, [r7, #11]
 800d77c:	4613      	mov	r3, r2
 800d77e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d784:	2300      	movs	r3, #0
 800d786:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d78e:	893b      	ldrh	r3, [r7, #8]
 800d790:	7af9      	ldrb	r1, [r7, #11]
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	f7f5 ff03 	bl	800359e <HAL_PCD_EP_Receive>
 800d798:	4603      	mov	r3, r0
 800d79a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d79c:	7dfb      	ldrb	r3, [r7, #23]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 f83a 	bl	800d818 <USBD_Get_USB_Status>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d7a8:	7dbb      	ldrb	r3, [r7, #22]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3718      	adds	r7, #24
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b082      	sub	sp, #8
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7c4:	78fa      	ldrb	r2, [r7, #3]
 800d7c6:	4611      	mov	r1, r2
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7f5 ff25 	bl	8003618 <HAL_PCD_EP_GetRxCount>
 800d7ce:	4603      	mov	r3, r0
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3708      	adds	r7, #8
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b083      	sub	sp, #12
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d7e0:	4b02      	ldr	r3, [pc, #8]	; (800d7ec <USBD_static_malloc+0x14>)
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	370c      	adds	r7, #12
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bc80      	pop	{r7}
 800d7ea:	4770      	bx	lr
 800d7ec:	20002258 	.word	0x20002258

0800d7f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]

}
 800d7f8:	bf00      	nop
 800d7fa:	370c      	adds	r7, #12
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bc80      	pop	{r7}
 800d800:	4770      	bx	lr

0800d802 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d802:	b480      	push	{r7}
 800d804:	b083      	sub	sp, #12
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
 800d80a:	460b      	mov	r3, r1
 800d80c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d80e:	bf00      	nop
 800d810:	370c      	adds	r7, #12
 800d812:	46bd      	mov	sp, r7
 800d814:	bc80      	pop	{r7}
 800d816:	4770      	bx	lr

0800d818 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d818:	b480      	push	{r7}
 800d81a:	b085      	sub	sp, #20
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	4603      	mov	r3, r0
 800d820:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d822:	2300      	movs	r3, #0
 800d824:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d826:	79fb      	ldrb	r3, [r7, #7]
 800d828:	2b03      	cmp	r3, #3
 800d82a:	d817      	bhi.n	800d85c <USBD_Get_USB_Status+0x44>
 800d82c:	a201      	add	r2, pc, #4	; (adr r2, 800d834 <USBD_Get_USB_Status+0x1c>)
 800d82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d832:	bf00      	nop
 800d834:	0800d845 	.word	0x0800d845
 800d838:	0800d84b 	.word	0x0800d84b
 800d83c:	0800d851 	.word	0x0800d851
 800d840:	0800d857 	.word	0x0800d857
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d844:	2300      	movs	r3, #0
 800d846:	73fb      	strb	r3, [r7, #15]
    break;
 800d848:	e00b      	b.n	800d862 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d84a:	2302      	movs	r3, #2
 800d84c:	73fb      	strb	r3, [r7, #15]
    break;
 800d84e:	e008      	b.n	800d862 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d850:	2301      	movs	r3, #1
 800d852:	73fb      	strb	r3, [r7, #15]
    break;
 800d854:	e005      	b.n	800d862 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d856:	2302      	movs	r3, #2
 800d858:	73fb      	strb	r3, [r7, #15]
    break;
 800d85a:	e002      	b.n	800d862 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d85c:	2302      	movs	r3, #2
 800d85e:	73fb      	strb	r3, [r7, #15]
    break;
 800d860:	bf00      	nop
  }
  return usb_status;
 800d862:	7bfb      	ldrb	r3, [r7, #15]
}
 800d864:	4618      	mov	r0, r3
 800d866:	3714      	adds	r7, #20
 800d868:	46bd      	mov	sp, r7
 800d86a:	bc80      	pop	{r7}
 800d86c:	4770      	bx	lr
 800d86e:	bf00      	nop

0800d870 <__libc_init_array>:
 800d870:	b570      	push	{r4, r5, r6, lr}
 800d872:	2600      	movs	r6, #0
 800d874:	4d0c      	ldr	r5, [pc, #48]	; (800d8a8 <__libc_init_array+0x38>)
 800d876:	4c0d      	ldr	r4, [pc, #52]	; (800d8ac <__libc_init_array+0x3c>)
 800d878:	1b64      	subs	r4, r4, r5
 800d87a:	10a4      	asrs	r4, r4, #2
 800d87c:	42a6      	cmp	r6, r4
 800d87e:	d109      	bne.n	800d894 <__libc_init_array+0x24>
 800d880:	f000 f862 	bl	800d948 <_init>
 800d884:	2600      	movs	r6, #0
 800d886:	4d0a      	ldr	r5, [pc, #40]	; (800d8b0 <__libc_init_array+0x40>)
 800d888:	4c0a      	ldr	r4, [pc, #40]	; (800d8b4 <__libc_init_array+0x44>)
 800d88a:	1b64      	subs	r4, r4, r5
 800d88c:	10a4      	asrs	r4, r4, #2
 800d88e:	42a6      	cmp	r6, r4
 800d890:	d105      	bne.n	800d89e <__libc_init_array+0x2e>
 800d892:	bd70      	pop	{r4, r5, r6, pc}
 800d894:	f855 3b04 	ldr.w	r3, [r5], #4
 800d898:	4798      	blx	r3
 800d89a:	3601      	adds	r6, #1
 800d89c:	e7ee      	b.n	800d87c <__libc_init_array+0xc>
 800d89e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8a2:	4798      	blx	r3
 800d8a4:	3601      	adds	r6, #1
 800d8a6:	e7f2      	b.n	800d88e <__libc_init_array+0x1e>
 800d8a8:	0800e0a4 	.word	0x0800e0a4
 800d8ac:	0800e0a4 	.word	0x0800e0a4
 800d8b0:	0800e0a4 	.word	0x0800e0a4
 800d8b4:	0800e0a8 	.word	0x0800e0a8

0800d8b8 <memcpy>:
 800d8b8:	440a      	add	r2, r1
 800d8ba:	4291      	cmp	r1, r2
 800d8bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d8c0:	d100      	bne.n	800d8c4 <memcpy+0xc>
 800d8c2:	4770      	bx	lr
 800d8c4:	b510      	push	{r4, lr}
 800d8c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8ca:	4291      	cmp	r1, r2
 800d8cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8d0:	d1f9      	bne.n	800d8c6 <memcpy+0xe>
 800d8d2:	bd10      	pop	{r4, pc}

0800d8d4 <memmove>:
 800d8d4:	4288      	cmp	r0, r1
 800d8d6:	b510      	push	{r4, lr}
 800d8d8:	eb01 0402 	add.w	r4, r1, r2
 800d8dc:	d902      	bls.n	800d8e4 <memmove+0x10>
 800d8de:	4284      	cmp	r4, r0
 800d8e0:	4623      	mov	r3, r4
 800d8e2:	d807      	bhi.n	800d8f4 <memmove+0x20>
 800d8e4:	1e43      	subs	r3, r0, #1
 800d8e6:	42a1      	cmp	r1, r4
 800d8e8:	d008      	beq.n	800d8fc <memmove+0x28>
 800d8ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8f2:	e7f8      	b.n	800d8e6 <memmove+0x12>
 800d8f4:	4601      	mov	r1, r0
 800d8f6:	4402      	add	r2, r0
 800d8f8:	428a      	cmp	r2, r1
 800d8fa:	d100      	bne.n	800d8fe <memmove+0x2a>
 800d8fc:	bd10      	pop	{r4, pc}
 800d8fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d906:	e7f7      	b.n	800d8f8 <memmove+0x24>

0800d908 <memset>:
 800d908:	4603      	mov	r3, r0
 800d90a:	4402      	add	r2, r0
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d100      	bne.n	800d912 <memset+0xa>
 800d910:	4770      	bx	lr
 800d912:	f803 1b01 	strb.w	r1, [r3], #1
 800d916:	e7f9      	b.n	800d90c <memset+0x4>

0800d918 <strstr>:
 800d918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d91a:	780c      	ldrb	r4, [r1, #0]
 800d91c:	b164      	cbz	r4, 800d938 <strstr+0x20>
 800d91e:	4603      	mov	r3, r0
 800d920:	781a      	ldrb	r2, [r3, #0]
 800d922:	4618      	mov	r0, r3
 800d924:	1c5e      	adds	r6, r3, #1
 800d926:	b90a      	cbnz	r2, 800d92c <strstr+0x14>
 800d928:	4610      	mov	r0, r2
 800d92a:	e005      	b.n	800d938 <strstr+0x20>
 800d92c:	4294      	cmp	r4, r2
 800d92e:	d108      	bne.n	800d942 <strstr+0x2a>
 800d930:	460d      	mov	r5, r1
 800d932:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800d936:	b902      	cbnz	r2, 800d93a <strstr+0x22>
 800d938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d93a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800d93e:	4297      	cmp	r7, r2
 800d940:	d0f7      	beq.n	800d932 <strstr+0x1a>
 800d942:	4633      	mov	r3, r6
 800d944:	e7ec      	b.n	800d920 <strstr+0x8>
	...

0800d948 <_init>:
 800d948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d94a:	bf00      	nop
 800d94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d94e:	bc08      	pop	{r3}
 800d950:	469e      	mov	lr, r3
 800d952:	4770      	bx	lr

0800d954 <_fini>:
 800d954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d956:	bf00      	nop
 800d958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d95a:	bc08      	pop	{r3}
 800d95c:	469e      	mov	lr, r3
 800d95e:	4770      	bx	lr
