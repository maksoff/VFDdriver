
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f360  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  0800f470  0800f470  0001f470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd2c  0800fd2c  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800fd2c  0800fd2c  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fd2c  0800fd2c  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd2c  0800fd2c  0001fd2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd30  0800fd30  0001fd30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800fd34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034fc  20000190  0800fec4  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000368c  0800fec4  0002368c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030414  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000064be  00000000  00000000  000505cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002118  00000000  00000000  00056a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ee8  00000000  00000000  00058ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f400  00000000  00000000  0005aa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002961e  00000000  00000000  00079e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ec8e  00000000  00000000  000a34ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014213c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089c4  00000000  00000000  00142190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000190 	.word	0x20000190
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f458 	.word	0x0800f458

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000194 	.word	0x20000194
 800014c:	0800f458 	.word	0x0800f458

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <d3231_get_time>:

#define D3231_ADDRESS (0b1101000 << 1)
uint8_t d3231_mem[19];

uint8_t * d3231_get_time(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b084      	sub	sp, #16
 8000178:	af04      	add	r7, sp, #16
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 800017a:	4b0f      	ldr	r3, [pc, #60]	; (80001b8 <d3231_get_time+0x44>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	f04f 31ff 	mov.w	r1, #4294967295
 8000182:	4618      	mov	r0, r3
 8000184:	f00c f940 	bl	800c408 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(&hi2c1, D3231_ADDRESS, 0, 1, d3231_mem, 3, 10);
 8000188:	230a      	movs	r3, #10
 800018a:	9302      	str	r3, [sp, #8]
 800018c:	2303      	movs	r3, #3
 800018e:	9301      	str	r3, [sp, #4]
 8000190:	4b0a      	ldr	r3, [pc, #40]	; (80001bc <d3231_get_time+0x48>)
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2301      	movs	r3, #1
 8000196:	2200      	movs	r2, #0
 8000198:	21d0      	movs	r1, #208	; 0xd0
 800019a:	4809      	ldr	r0, [pc, #36]	; (80001c0 <d3231_get_time+0x4c>)
 800019c:	f003 fc36 	bl	8003a0c <HAL_I2C_Mem_Read>
	xSemaphoreGive(muI2CHandle);
 80001a0:	4b05      	ldr	r3, [pc, #20]	; (80001b8 <d3231_get_time+0x44>)
 80001a2:	6818      	ldr	r0, [r3, #0]
 80001a4:	2300      	movs	r3, #0
 80001a6:	2200      	movs	r2, #0
 80001a8:	2100      	movs	r1, #0
 80001aa:	f00b feb7 	bl	800bf1c <xQueueGenericSend>
	return d3231_mem;
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <d3231_get_time+0x48>)
}
 80001b0:	4618      	mov	r0, r3
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	2000248c 	.word	0x2000248c
 80001bc:	20002478 	.word	0x20002478
 80001c0:	200024b0 	.word	0x200024b0

080001c4 <d3231_get_all>:

uint8_t * d3231_get_all(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af04      	add	r7, sp, #16
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 80001ca:	4b0f      	ldr	r3, [pc, #60]	; (8000208 <d3231_get_all+0x44>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	f04f 31ff 	mov.w	r1, #4294967295
 80001d2:	4618      	mov	r0, r3
 80001d4:	f00c f918 	bl	800c408 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(&hi2c1, D3231_ADDRESS, 0, 1, d3231_mem, 19, 100);
 80001d8:	2364      	movs	r3, #100	; 0x64
 80001da:	9302      	str	r3, [sp, #8]
 80001dc:	2313      	movs	r3, #19
 80001de:	9301      	str	r3, [sp, #4]
 80001e0:	4b0a      	ldr	r3, [pc, #40]	; (800020c <d3231_get_all+0x48>)
 80001e2:	9300      	str	r3, [sp, #0]
 80001e4:	2301      	movs	r3, #1
 80001e6:	2200      	movs	r2, #0
 80001e8:	21d0      	movs	r1, #208	; 0xd0
 80001ea:	4809      	ldr	r0, [pc, #36]	; (8000210 <d3231_get_all+0x4c>)
 80001ec:	f003 fc0e 	bl	8003a0c <HAL_I2C_Mem_Read>
	xSemaphoreGive(muI2CHandle);
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <d3231_get_all+0x44>)
 80001f2:	6818      	ldr	r0, [r3, #0]
 80001f4:	2300      	movs	r3, #0
 80001f6:	2200      	movs	r2, #0
 80001f8:	2100      	movs	r1, #0
 80001fa:	f00b fe8f 	bl	800bf1c <xQueueGenericSend>
	return d3231_mem;
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <d3231_get_all+0x48>)
}
 8000200:	4618      	mov	r0, r3
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	2000248c 	.word	0x2000248c
 800020c:	20002478 	.word	0x20002478
 8000210:	200024b0 	.word	0x200024b0

08000214 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of muI2C */
  muI2CHandle = osMutexNew(&muI2C_attributes);
 8000218:	4821      	ldr	r0, [pc, #132]	; (80002a0 <MX_FREERTOS_Init+0x8c>)
 800021a:	f00b faef 	bl	800b7fc <osMutexNew>
 800021e:	4603      	mov	r3, r0
 8000220:	4a20      	ldr	r2, [pc, #128]	; (80002a4 <MX_FREERTOS_Init+0x90>)
 8000222:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qUSB_rcv */
  qUSB_rcvHandle = osMessageQueueNew (32, sizeof(uint8_t), &qUSB_rcv_attributes);
 8000224:	4a20      	ldr	r2, [pc, #128]	; (80002a8 <MX_FREERTOS_Init+0x94>)
 8000226:	2101      	movs	r1, #1
 8000228:	2020      	movs	r0, #32
 800022a:	f00b fb81 	bl	800b930 <osMessageQueueNew>
 800022e:	4603      	mov	r3, r0
 8000230:	4a1e      	ldr	r2, [pc, #120]	; (80002ac <MX_FREERTOS_Init+0x98>)
 8000232:	6013      	str	r3, [r2, #0]

  /* creation of qVFD */
  qVFDHandle = osMessageQueueNew (16, sizeof(uint16_t), &qVFD_attributes);
 8000234:	4a1e      	ldr	r2, [pc, #120]	; (80002b0 <MX_FREERTOS_Init+0x9c>)
 8000236:	2102      	movs	r1, #2
 8000238:	2010      	movs	r0, #16
 800023a:	f00b fb79 	bl	800b930 <osMessageQueueNew>
 800023e:	4603      	mov	r3, r0
 8000240:	4a1c      	ldr	r2, [pc, #112]	; (80002b4 <MX_FREERTOS_Init+0xa0>)
 8000242:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000244:	4a1c      	ldr	r2, [pc, #112]	; (80002b8 <MX_FREERTOS_Init+0xa4>)
 8000246:	2100      	movs	r1, #0
 8000248:	481c      	ldr	r0, [pc, #112]	; (80002bc <MX_FREERTOS_Init+0xa8>)
 800024a:	f00b f9ff 	bl	800b64c <osThreadNew>
 800024e:	4603      	mov	r3, r0
 8000250:	4a1b      	ldr	r2, [pc, #108]	; (80002c0 <MX_FREERTOS_Init+0xac>)
 8000252:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 8000254:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <MX_FREERTOS_Init+0xb0>)
 8000256:	2100      	movs	r1, #0
 8000258:	481b      	ldr	r0, [pc, #108]	; (80002c8 <MX_FREERTOS_Init+0xb4>)
 800025a:	f00b f9f7 	bl	800b64c <osThreadNew>
 800025e:	4603      	mov	r3, r0
 8000260:	4a1a      	ldr	r2, [pc, #104]	; (80002cc <MX_FREERTOS_Init+0xb8>)
 8000262:	6013      	str	r3, [r2, #0]

  /* creation of taskUSB_rcv */
  taskUSB_rcvHandle = osThreadNew(StartUSB_rcv, NULL, &taskUSB_rcv_attributes);
 8000264:	4a1a      	ldr	r2, [pc, #104]	; (80002d0 <MX_FREERTOS_Init+0xbc>)
 8000266:	2100      	movs	r1, #0
 8000268:	481a      	ldr	r0, [pc, #104]	; (80002d4 <MX_FREERTOS_Init+0xc0>)
 800026a:	f00b f9ef 	bl	800b64c <osThreadNew>
 800026e:	4603      	mov	r3, r0
 8000270:	4a19      	ldr	r2, [pc, #100]	; (80002d8 <MX_FREERTOS_Init+0xc4>)
 8000272:	6013      	str	r3, [r2, #0]

  /* creation of UARTtask */
  UARTtaskHandle = osThreadNew(StartUARTtask, NULL, &UARTtask_attributes);
 8000274:	4a19      	ldr	r2, [pc, #100]	; (80002dc <MX_FREERTOS_Init+0xc8>)
 8000276:	2100      	movs	r1, #0
 8000278:	4819      	ldr	r0, [pc, #100]	; (80002e0 <MX_FREERTOS_Init+0xcc>)
 800027a:	f00b f9e7 	bl	800b64c <osThreadNew>
 800027e:	4603      	mov	r3, r0
 8000280:	4a18      	ldr	r2, [pc, #96]	; (80002e4 <MX_FREERTOS_Init+0xd0>)
 8000282:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(StartEncoder, NULL, &Encoder_attributes);
 8000284:	4a18      	ldr	r2, [pc, #96]	; (80002e8 <MX_FREERTOS_Init+0xd4>)
 8000286:	2100      	movs	r1, #0
 8000288:	4818      	ldr	r0, [pc, #96]	; (80002ec <MX_FREERTOS_Init+0xd8>)
 800028a:	f00b f9df 	bl	800b64c <osThreadNew>
 800028e:	4603      	mov	r3, r0
 8000290:	4a17      	ldr	r2, [pc, #92]	; (80002f0 <MX_FREERTOS_Init+0xdc>)
 8000292:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  qUSB_rcvQueue = qUSB_rcvHandle; // adding to freertos_inc.h
 8000294:	4b05      	ldr	r3, [pc, #20]	; (80002ac <MX_FREERTOS_Init+0x98>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a16      	ldr	r2, [pc, #88]	; (80002f4 <MX_FREERTOS_Init+0xe0>)
 800029a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	0800f7c4 	.word	0x0800f7c4
 80002a4:	2000248c 	.word	0x2000248c
 80002a8:	0800f794 	.word	0x0800f794
 80002ac:	200024a8 	.word	0x200024a8
 80002b0:	0800f7ac 	.word	0x0800f7ac
 80002b4:	20002490 	.word	0x20002490
 80002b8:	0800f6e0 	.word	0x0800f6e0
 80002bc:	080002f9 	.word	0x080002f9
 80002c0:	20002498 	.word	0x20002498
 80002c4:	0800f704 	.word	0x0800f704
 80002c8:	08000331 	.word	0x08000331
 80002cc:	2000249c 	.word	0x2000249c
 80002d0:	0800f728 	.word	0x0800f728
 80002d4:	08000375 	.word	0x08000375
 80002d8:	200024a4 	.word	0x200024a4
 80002dc:	0800f74c 	.word	0x0800f74c
 80002e0:	080003bd 	.word	0x080003bd
 80002e4:	200024a0 	.word	0x200024a0
 80002e8:	0800f770 	.word	0x0800f770
 80002ec:	080003f9 	.word	0x080003f9
 80002f0:	200024ac 	.word	0x200024ac
 80002f4:	20002494 	.word	0x20002494

080002f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000300:	f00e fb7c 	bl	800e9fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */


  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800030a:	4808      	ldr	r0, [pc, #32]	; (800032c <StartDefaultTask+0x34>)
 800030c:	f003 f9e7 	bl	80036de <HAL_GPIO_WritePin>
  osDelay(10);
 8000310:	200a      	movs	r0, #10
 8000312:	f00b fa45 	bl	800b7a0 <osDelay>
  init_microrl();
 8000316:	f002 fa9d 	bl	8002854 <init_microrl>
  set_CDC_ready(); // allow to send
 800031a:	f002 fad5 	bl	80028c8 <set_CDC_ready>

  //vTaskDelete(NULL);
  /* Infinite loop */
  for(;;)
  {
    process_encoder();
 800031e:	f000 fcb1 	bl	8000c84 <process_encoder>
    osDelay(1);
 8000322:	2001      	movs	r0, #1
 8000324:	f00b fa3c 	bl	800b7a0 <osDelay>
    process_encoder();
 8000328:	e7f9      	b.n	800031e <StartDefaultTask+0x26>
 800032a:	bf00      	nop
 800032c:	40010800 	.word	0x40010800

08000330 <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 8000338:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800033c:	617b      	str	r3, [r7, #20]

	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 800033e:	f00c fe4f 	bl	800cfe0 <xTaskGetTickCount>
 8000342:	4603      	mov	r3, r0
 8000344:	613b      	str	r3, [r7, #16]

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000346:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034a:	4808      	ldr	r0, [pc, #32]	; (800036c <StartLEDheartbeat+0x3c>)
 800034c:	f003 f9df 	bl	800370e <HAL_GPIO_TogglePin>
		tick_counter++;
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <StartLEDheartbeat+0x40>)
 8000352:	881b      	ldrh	r3, [r3, #0]
 8000354:	3301      	adds	r3, #1
 8000356:	b29a      	uxth	r2, r3
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <StartLEDheartbeat+0x40>)
 800035a:	801a      	strh	r2, [r3, #0]
				if (++cnt >= ALPHAS + DIGITS + ALPHAR + SPECIAL)
					cnt = 0;

		}

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800035c:	f107 0310 	add.w	r3, r7, #16
 8000360:	6979      	ldr	r1, [r7, #20]
 8000362:	4618      	mov	r0, r3
 8000364:	f00c fc78 	bl	800cc58 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8000368:	e7e9      	b.n	800033e <StartLEDheartbeat+0xe>
 800036a:	bf00      	nop
 800036c:	40011000 	.word	0x40011000
 8000370:	200001ae 	.word	0x200001ae

08000374 <StartUSB_rcv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSB_rcv */
void StartUSB_rcv(void *argument)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	char buf;

	UBaseType_t uxHighWaterMark, uxHighWaterMark_old;

	/* Inspect our own high water mark on entering the task. */
	uxHighWaterMark_old = uxTaskGetStackHighWaterMark( NULL );
 800037c:	2000      	movs	r0, #0
 800037e:	f00d f931 	bl	800d5e4 <uxTaskGetStackHighWaterMark>
 8000382:	6178      	str	r0, [r7, #20]
	uxHighWaterMark = uxHighWaterMark_old;
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <StartUSB_rcv+0x44>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f107 010f 	add.w	r1, r7, #15
 8000390:	f04f 32ff 	mov.w	r2, #4294967295
 8000394:	4618      	mov	r0, r3
 8000396:	f00b ff57 	bl	800c248 <xQueueReceive>
	  microrl_print_char(buf);
 800039a:	7bfb      	ldrb	r3, [r7, #15]
 800039c:	4618      	mov	r0, r3
 800039e:	f001 ff15 	bl	80021cc <microrl_print_char>
	  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80003a2:	2000      	movs	r0, #0
 80003a4:	f00d f91e 	bl	800d5e4 <uxTaskGetStackHighWaterMark>
 80003a8:	6138      	str	r0, [r7, #16]
	  if (uxHighWaterMark < uxHighWaterMark_old)
 80003aa:	693a      	ldr	r2, [r7, #16]
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d2ea      	bcs.n	8000388 <StartUSB_rcv+0x14>
	  {
		  uxHighWaterMark_old = uxHighWaterMark;
 80003b2:	693b      	ldr	r3, [r7, #16]
 80003b4:	617b      	str	r3, [r7, #20]
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80003b6:	e7e7      	b.n	8000388 <StartUSB_rcv+0x14>
 80003b8:	20002494 	.word	0x20002494

080003bc <StartUARTtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTtask */
void StartUARTtask(void *argument)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  uint8_t data;
  for(;;)
  {
	HAL_UART_Receive_IT(&huart2, &data, 1);
 80003c4:	f107 030f 	add.w	r3, r7, #15
 80003c8:	2201      	movs	r2, #1
 80003ca:	4619      	mov	r1, r3
 80003cc:	4809      	ldr	r0, [pc, #36]	; (80003f4 <StartUARTtask+0x38>)
 80003ce:	f006 fecc 	bl	800716a <HAL_UART_Receive_IT>
	/* Wait to be notified of an interrupt. */
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 80003d2:	f04f 31ff 	mov.w	r1, #4294967295
 80003d6:	2001      	movs	r0, #1
 80003d8:	f00d fb08 	bl	800d9ec <ulTaskNotifyTake>
	if (get_nema())
 80003dc:	f002 fbba 	bl	8002b54 <get_nema>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d0ee      	beq.n	80003c4 <StartUARTtask+0x8>
		CDC_Transmit_FS(&data, 1);
 80003e6:	f107 030f 	add.w	r3, r7, #15
 80003ea:	2101      	movs	r1, #1
 80003ec:	4618      	mov	r0, r3
 80003ee:	f00e fbe9 	bl	800ebc4 <CDC_Transmit_FS>
	HAL_UART_Receive_IT(&huart2, &data, 1);
 80003f2:	e7e7      	b.n	80003c4 <StartUARTtask+0x8>
 80003f4:	20002684 	.word	0x20002684

080003f8 <StartEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoder */
void StartEncoder(void *argument)
{
 80003f8:	b5b0      	push	{r4, r5, r7, lr}
 80003fa:	b0ac      	sub	sp, #176	; 0xb0
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]

	static bool invert = true;
	static bool released = true;


  osDelay(500);
 8000400:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000404:	f00b f9cc 	bl	800b7a0 <osDelay>
  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 8000408:	2201      	movs	r2, #1
 800040a:	2120      	movs	r1, #32
 800040c:	48c5      	ldr	r0, [pc, #788]	; (8000724 <StartEncoder+0x32c>)
 800040e:	f003 f966 	bl	80036de <HAL_GPIO_WritePin>
  union VFD {
	  uint8_t arr2[11][3];
	  uint8_t arr1[11*3];
  } vfd;

  for (int i = 0; i < sizeof(vfd.arr1); i++)
 8000412:	2300      	movs	r3, #0
 8000414:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000418:	e00b      	b.n	8000432 <StartEncoder+0x3a>
  {
	  vfd.arr1[i] = 0xFF;
 800041a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800041e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000422:	4413      	add	r3, r2
 8000424:	22ff      	movs	r2, #255	; 0xff
 8000426:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < sizeof(vfd.arr1); i++)
 8000428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800042c:	3301      	adds	r3, #1
 800042e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000436:	2b20      	cmp	r3, #32
 8000438:	d9ef      	bls.n	800041a <StartEncoder+0x22>
  }
  uint8_t data;


  data = 0b01000000; // command 2, write to Display port
 800043a:	2340      	movs	r3, #64	; 0x40
 800043c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000440:	2200      	movs	r2, #0
 8000442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000446:	48b7      	ldr	r0, [pc, #732]	; (8000724 <StartEncoder+0x32c>)
 8000448:	f003 f949 	bl	80036de <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800044c:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000450:	f04f 33ff 	mov.w	r3, #4294967295
 8000454:	2201      	movs	r2, #1
 8000456:	48b4      	ldr	r0, [pc, #720]	; (8000728 <StartEncoder+0x330>)
 8000458:	f006 fa0e 	bl	8006878 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000462:	48b0      	ldr	r0, [pc, #704]	; (8000724 <StartEncoder+0x32c>)
 8000464:	f003 f93b 	bl	80036de <HAL_GPIO_WritePin>
  osDelay(10);
 8000468:	200a      	movs	r0, #10
 800046a:	f00b f999 	bl	800b7a0 <osDelay>
  data = 0b11000000; // command 3, set address to 0
 800046e:	23c0      	movs	r3, #192	; 0xc0
 8000470:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000474:	2200      	movs	r2, #0
 8000476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047a:	48aa      	ldr	r0, [pc, #680]	; (8000724 <StartEncoder+0x32c>)
 800047c:	f003 f92f 	bl	80036de <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000480:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000484:	f04f 33ff 	mov.w	r3, #4294967295
 8000488:	2201      	movs	r2, #1
 800048a:	48a7      	ldr	r0, [pc, #668]	; (8000728 <StartEncoder+0x330>)
 800048c:	f006 f9f4 	bl	8006878 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000490:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000494:	f04f 33ff 	mov.w	r3, #4294967295
 8000498:	2221      	movs	r2, #33	; 0x21
 800049a:	48a3      	ldr	r0, [pc, #652]	; (8000728 <StartEncoder+0x330>)
 800049c:	f006 f9ec 	bl	8006878 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80004a0:	2201      	movs	r2, #1
 80004a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a6:	489f      	ldr	r0, [pc, #636]	; (8000724 <StartEncoder+0x32c>)
 80004a8:	f003 f919 	bl	80036de <HAL_GPIO_WritePin>
  osDelay(10);
 80004ac:	200a      	movs	r0, #10
 80004ae:	f00b f977 	bl	800b7a0 <osDelay>
  // init display, 11 digits 17 segments
  data = 0b00000111; // command 1, 11 digits 17 segments
 80004b2:	2307      	movs	r3, #7
 80004b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80004b8:	2200      	movs	r2, #0
 80004ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004be:	4899      	ldr	r0, [pc, #612]	; (8000724 <StartEncoder+0x32c>)
 80004c0:	f003 f90d 	bl	80036de <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80004c4:	f107 0143 	add.w	r1, r7, #67	; 0x43
 80004c8:	f04f 33ff 	mov.w	r3, #4294967295
 80004cc:	2201      	movs	r2, #1
 80004ce:	4896      	ldr	r0, [pc, #600]	; (8000728 <StartEncoder+0x330>)
 80004d0:	f006 f9d2 	bl	8006878 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004da:	4892      	ldr	r0, [pc, #584]	; (8000724 <StartEncoder+0x32c>)
 80004dc:	f003 f8ff 	bl	80036de <HAL_GPIO_WritePin>
  osDelay(10);
 80004e0:	200a      	movs	r0, #10
 80004e2:	f00b f95d 	bl	800b7a0 <osDelay>

  for (uint8_t i = 0; i <= 0b111; i++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 80004ec:	e02d      	b.n	800054a <StartEncoder+0x152>
  {
	  data = 0b10000000; // command 4
 80004ee:	2380      	movs	r3, #128	; 0x80
 80004f0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  data |= 1<<3; // enable/disable display
 80004f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80004f8:	f043 0308 	orr.w	r3, r3, #8
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  data |= i; // set brightness
 8000502:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8000506:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800050a:	4313      	orrs	r3, r2
 800050c:	b2db      	uxtb	r3, r3
 800050e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000518:	4882      	ldr	r0, [pc, #520]	; (8000724 <StartEncoder+0x32c>)
 800051a:	f003 f8e0 	bl	80036de <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800051e:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000522:	f04f 33ff 	mov.w	r3, #4294967295
 8000526:	2201      	movs	r2, #1
 8000528:	487f      	ldr	r0, [pc, #508]	; (8000728 <StartEncoder+0x330>)
 800052a:	f006 f9a5 	bl	8006878 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800052e:	2201      	movs	r2, #1
 8000530:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000534:	487b      	ldr	r0, [pc, #492]	; (8000724 <StartEncoder+0x32c>)
 8000536:	f003 f8d2 	bl	80036de <HAL_GPIO_WritePin>
	  osDelay(250);
 800053a:	20fa      	movs	r0, #250	; 0xfa
 800053c:	f00b f930 	bl	800b7a0 <osDelay>
  for (uint8_t i = 0; i <= 0b111; i++)
 8000540:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000544:	3301      	adds	r3, #1
 8000546:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 800054a:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800054e:	2b07      	cmp	r3, #7
 8000550:	d9cd      	bls.n	80004ee <StartEncoder+0xf6>
  }



  for (int i = 0; i < 11; i++)
 8000552:	2300      	movs	r3, #0
 8000554:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000558:	e041      	b.n	80005de <StartEncoder+0x1e6>
  {
	  for (int b = 0; b < 3; b++) // erasing from right to left
 800055a:	2300      	movs	r3, #0
 800055c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000560:	e012      	b.n	8000588 <StartEncoder+0x190>
	  {
		  vfd.arr2[i][b] = 0;
 8000562:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000566:	4613      	mov	r3, r2
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	4413      	add	r3, r2
 800056c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000570:	441a      	add	r2, r3
 8000572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000576:	4413      	add	r3, r2
 8000578:	3b6c      	subs	r3, #108	; 0x6c
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
	  for (int b = 0; b < 3; b++) // erasing from right to left
 800057e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000582:	3301      	adds	r3, #1
 8000584:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000588:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800058c:	2b02      	cmp	r3, #2
 800058e:	dde8      	ble.n	8000562 <StartEncoder+0x16a>
	  }
	  data = 0b11000000; // command 3, set address to 0
 8000590:	23c0      	movs	r3, #192	; 0xc0
 8000592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 7180 	mov.w	r1, #256	; 0x100
 800059c:	4861      	ldr	r0, [pc, #388]	; (8000724 <StartEncoder+0x32c>)
 800059e:	f003 f89e 	bl	80036de <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80005a2:	f107 0143 	add.w	r1, r7, #67	; 0x43
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	2201      	movs	r2, #1
 80005ac:	485e      	ldr	r0, [pc, #376]	; (8000728 <StartEncoder+0x330>)
 80005ae:	f006 f963 	bl	8006878 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80005b2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	2221      	movs	r2, #33	; 0x21
 80005bc:	485a      	ldr	r0, [pc, #360]	; (8000728 <StartEncoder+0x330>)
 80005be:	f006 f95b 	bl	8006878 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c8:	4856      	ldr	r0, [pc, #344]	; (8000724 <StartEncoder+0x32c>)
 80005ca:	f003 f888 	bl	80036de <HAL_GPIO_WritePin>
	  osDelay(150);
 80005ce:	2096      	movs	r0, #150	; 0x96
 80005d0:	f00b f8e6 	bl	800b7a0 <osDelay>
  for (int i = 0; i < 11; i++)
 80005d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80005d8:	3301      	adds	r3, #1
 80005da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80005de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80005e2:	2b0a      	cmp	r3, #10
 80005e4:	ddb9      	ble.n	800055a <StartEncoder+0x162>
  }
  osDelay (500);
 80005e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ea:	f00b f8d9 	bl	800b7a0 <osDelay>

  //erase everything... just in case
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80005f4:	e00b      	b.n	800060e <StartEncoder+0x216>
	  vfd.arr1[a] = 0;
 80005f6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80005fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80005fe:	4413      	add	r3, r2
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000608:	3301      	adds	r3, #1
 800060a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800060e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000612:	2b20      	cmp	r3, #32
 8000614:	d9ef      	bls.n	80005f6 <StartEncoder+0x1fe>


  // fill everything
    for (int j = 1; j < 15; j++)
 8000616:	2301      	movs	r3, #1
 8000618:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800061c:	e06a      	b.n	80006f4 <StartEncoder+0x2fc>
    {
  	  uint32_t temp = 1<<j;
 800061e:	2201      	movs	r2, #1
 8000620:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000624:	fa02 f303 	lsl.w	r3, r2, r3
 8000628:	66bb      	str	r3, [r7, #104]	; 0x68
  	  for (int i = 1; i < 11; i++)
 800062a:	2301      	movs	r3, #1
 800062c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000630:	e035      	b.n	800069e <StartEncoder+0x2a6>
  	  {
  		  for (int b = 0; b < 3; b++)
 8000632:	2300      	movs	r3, #0
 8000634:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000638:	e028      	b.n	800068c <StartEncoder+0x294>
  		  {
  			  vfd.arr2[i][b] |= (temp>>(b<<3))&0xFF;
 800063a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800063e:	4613      	mov	r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4413      	add	r3, r2
 8000644:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000648:	441a      	add	r2, r3
 800064a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800064e:	4413      	add	r3, r2
 8000650:	3b6c      	subs	r3, #108	; 0x6c
 8000652:	781a      	ldrb	r2, [r3, #0]
 8000654:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000658:	00db      	lsls	r3, r3, #3
 800065a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800065c:	fa21 f303 	lsr.w	r3, r1, r3
 8000660:	b2db      	uxtb	r3, r3
 8000662:	4313      	orrs	r3, r2
 8000664:	b2d9      	uxtb	r1, r3
 8000666:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800066a:	4613      	mov	r3, r2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	4413      	add	r3, r2
 8000670:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000674:	441a      	add	r2, r3
 8000676:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800067a:	4413      	add	r3, r2
 800067c:	3b6c      	subs	r3, #108	; 0x6c
 800067e:	460a      	mov	r2, r1
 8000680:	701a      	strb	r2, [r3, #0]
  		  for (int b = 0; b < 3; b++)
 8000682:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000686:	3301      	adds	r3, #1
 8000688:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800068c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000690:	2b02      	cmp	r3, #2
 8000692:	ddd2      	ble.n	800063a <StartEncoder+0x242>
  	  for (int i = 1; i < 11; i++)
 8000694:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000698:	3301      	adds	r3, #1
 800069a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800069e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80006a2:	2b0a      	cmp	r3, #10
 80006a4:	ddc5      	ble.n	8000632 <StartEncoder+0x23a>
  		  }
  	  }
  	  data = 0b11000000; // command 3, set address to 0
 80006a6:	23c0      	movs	r3, #192	; 0xc0
 80006a8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b2:	481c      	ldr	r0, [pc, #112]	; (8000724 <StartEncoder+0x32c>)
 80006b4:	f003 f813 	bl	80036de <HAL_GPIO_WritePin>
  	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80006b8:	f107 0143 	add.w	r1, r7, #67	; 0x43
 80006bc:	f04f 33ff 	mov.w	r3, #4294967295
 80006c0:	2201      	movs	r2, #1
 80006c2:	4819      	ldr	r0, [pc, #100]	; (8000728 <StartEncoder+0x330>)
 80006c4:	f006 f8d8 	bl	8006878 <HAL_SPI_Transmit>
  	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80006c8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	2221      	movs	r2, #33	; 0x21
 80006d2:	4815      	ldr	r0, [pc, #84]	; (8000728 <StartEncoder+0x330>)
 80006d4:	f006 f8d0 	bl	8006878 <HAL_SPI_Transmit>
  	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006de:	4811      	ldr	r0, [pc, #68]	; (8000724 <StartEncoder+0x32c>)
 80006e0:	f002 fffd 	bl	80036de <HAL_GPIO_WritePin>
  	  osDelay(100);
 80006e4:	2064      	movs	r0, #100	; 0x64
 80006e6:	f00b f85b 	bl	800b7a0 <osDelay>
    for (int j = 1; j < 15; j++)
 80006ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006ee:	3301      	adds	r3, #1
 80006f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80006f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006f8:	2b0e      	cmp	r3, #14
 80006fa:	dd90      	ble.n	800061e <StartEncoder+0x226>
    }

    const uint8_t arr[][2] = {{6, 0},
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <StartEncoder+0x334>)
 80006fe:	f107 0410 	add.w	r4, r7, #16
 8000702:	461d      	mov	r5, r3
 8000704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000710:	682b      	ldr	r3, [r5, #0]
 8000712:	8023      	strh	r3, [r4, #0]
					   {9, 16},
					   {10, 16},
					   {10, 15},
    };

    for (int j = 0; j < sizeof(arr)/2; j++)
 8000714:	2300      	movs	r3, #0
 8000716:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800071a:	e078      	b.n	800080e <StartEncoder+0x416>
    {
		for (int b = 0; b < 3; b++)
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000722:	e049      	b.n	80007b8 <StartEncoder+0x3c0>
 8000724:	40010c00 	.word	0x40010c00
 8000728:	200025e4 	.word	0x200025e4
 800072c:	0800f4d4 	.word	0x0800f4d4
		  vfd.arr2[arr[j][0]][b] |= ((1<<arr[j][1])>>(b<<3))&0xFF;
 8000730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800073a:	4413      	add	r3, r2
 800073c:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 8000740:	461a      	mov	r2, r3
 8000742:	4613      	mov	r3, r2
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	4413      	add	r3, r2
 8000748:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800074c:	441a      	add	r2, r3
 800074e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000752:	4413      	add	r3, r2
 8000754:	3b6c      	subs	r3, #108	; 0x6c
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b25a      	sxtb	r2, r3
 800075a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000764:	440b      	add	r3, r1
 8000766:	f813 3c9f 	ldrb.w	r3, [r3, #-159]
 800076a:	4619      	mov	r1, r3
 800076c:	2301      	movs	r3, #1
 800076e:	fa03 f101 	lsl.w	r1, r3, r1
 8000772:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	fa41 f303 	asr.w	r3, r1, r3
 800077c:	b25b      	sxtb	r3, r3
 800077e:	4313      	orrs	r3, r2
 8000780:	b259      	sxtb	r1, r3
 8000782:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800078c:	4413      	add	r3, r2
 800078e:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 8000792:	461a      	mov	r2, r3
 8000794:	b2c9      	uxtb	r1, r1
 8000796:	4613      	mov	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	4413      	add	r3, r2
 800079c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80007a0:	441a      	add	r2, r3
 80007a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80007a6:	4413      	add	r3, r2
 80007a8:	3b6c      	subs	r3, #108	; 0x6c
 80007aa:	460a      	mov	r2, r1
 80007ac:	701a      	strb	r2, [r3, #0]
		for (int b = 0; b < 3; b++)
 80007ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80007b2:	3301      	adds	r3, #1
 80007b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80007b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80007bc:	2b02      	cmp	r3, #2
 80007be:	ddb7      	ble.n	8000730 <StartEncoder+0x338>
		data = 0b11000000; // command 3, set address to 0
 80007c0:	23c0      	movs	r3, #192	; 0xc0
 80007c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007cc:	4897      	ldr	r0, [pc, #604]	; (8000a2c <StartEncoder+0x634>)
 80007ce:	f002 ff86 	bl	80036de <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80007d2:	f107 0143 	add.w	r1, r7, #67	; 0x43
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	2201      	movs	r2, #1
 80007dc:	4894      	ldr	r0, [pc, #592]	; (8000a30 <StartEncoder+0x638>)
 80007de:	f006 f84b 	bl	8006878 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80007e2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ea:	2221      	movs	r2, #33	; 0x21
 80007ec:	4890      	ldr	r0, [pc, #576]	; (8000a30 <StartEncoder+0x638>)
 80007ee:	f006 f843 	bl	8006878 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f8:	488c      	ldr	r0, [pc, #560]	; (8000a2c <StartEncoder+0x634>)
 80007fa:	f002 ff70 	bl	80036de <HAL_GPIO_WritePin>
		osDelay(100);
 80007fe:	2064      	movs	r0, #100	; 0x64
 8000800:	f00a ffce 	bl	800b7a0 <osDelay>
    for (int j = 0; j < sizeof(arr)/2; j++)
 8000804:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000808:	3301      	adds	r3, #1
 800080a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800080e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000812:	2b18      	cmp	r3, #24
 8000814:	d982      	bls.n	800071c <StartEncoder+0x324>
    }

    osDelay(500);
 8000816:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800081a:	f00a ffc1 	bl	800b7a0 <osDelay>

    //erase everything... just in case
    for (int a = 0; a < sizeof(vfd.arr1); a++)
 800081e:	2300      	movs	r3, #0
 8000820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000824:	e00b      	b.n	800083e <StartEncoder+0x446>
  	  vfd.arr1[a] = 0;
 8000826:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800082a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800082e:	4413      	add	r3, r2
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
    for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000838:	3301      	adds	r3, #1
 800083a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800083e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000842:	2b20      	cmp	r3, #32
 8000844:	d9ef      	bls.n	8000826 <StartEncoder+0x42e>
//    {
//        vfd.arr2[i+1][0] = vfd_digits[i]&0xFF;
//        vfd.arr2[i+1][1] = (vfd_digits[i]>>8)&0xFF;
//    }

	data = 0b11000000; // command 3, set address to 0
 8000846:	23c0      	movs	r3, #192	; 0xc0
 8000848:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000852:	4876      	ldr	r0, [pc, #472]	; (8000a2c <StartEncoder+0x634>)
 8000854:	f002 ff43 	bl	80036de <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000858:	f107 0143 	add.w	r1, r7, #67	; 0x43
 800085c:	f04f 33ff 	mov.w	r3, #4294967295
 8000860:	2201      	movs	r2, #1
 8000862:	4873      	ldr	r0, [pc, #460]	; (8000a30 <StartEncoder+0x638>)
 8000864:	f006 f808 	bl	8006878 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000868:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800086c:	f04f 33ff 	mov.w	r3, #4294967295
 8000870:	2221      	movs	r2, #33	; 0x21
 8000872:	486f      	ldr	r0, [pc, #444]	; (8000a30 <StartEncoder+0x638>)
 8000874:	f006 f800 	bl	8006878 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087e:	486b      	ldr	r0, [pc, #428]	; (8000a2c <StartEncoder+0x634>)
 8000880:	f002 ff2d 	bl	80036de <HAL_GPIO_WritePin>
	//osDelay(100);


	const char * demo = "VFD FV651G";
 8000884:	4b6b      	ldr	r3, [pc, #428]	; (8000a34 <StartEncoder+0x63c>)
 8000886:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	while (*demo)
 800088a:	e012      	b.n	80008b2 <StartEncoder+0x4ba>
	{
		uint16_t temp = get_char(*(demo++));
 800088c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000890:	1c5a      	adds	r2, r3, #1
 8000892:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f002 fb31 	bl	8002f00 <get_char>
 800089e:	4603      	mov	r3, r0
 80008a0:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(qVFDHandle, &temp, 100);
 80008a2:	4b65      	ldr	r3, [pc, #404]	; (8000a38 <StartEncoder+0x640>)
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	f107 010e 	add.w	r1, r7, #14
 80008aa:	2300      	movs	r3, #0
 80008ac:	2264      	movs	r2, #100	; 0x64
 80008ae:	f00b fb35 	bl	800bf1c <xQueueGenericSend>
	while (*demo)
 80008b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1e7      	bne.n	800088c <StartEncoder+0x494>
	}


  /* Infinite loop */
  d3231_get_all();
 80008bc:	f7ff fc82 	bl	80001c4 <d3231_get_all>
  for(;;)
  {
	  uint16_t buf;
	  if (show_clock)
 80008c0:	4b5e      	ldr	r3, [pc, #376]	; (8000a3c <StartEncoder+0x644>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	f000 809f 	beq.w	8000a08 <StartEncoder+0x610>
	  {
		  uint8_t * time = d3231_get_time();
 80008ca:	f7ff fc53 	bl	8000174 <d3231_get_time>
 80008ce:	66f8      	str	r0, [r7, #108]	; 0x6c
		  uint8_t clock [4];
		  clock[0] = time[1] & 0xF;
 80008d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008d2:	3301      	adds	r3, #1
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	f003 030f 	and.w	r3, r3, #15
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	723b      	strb	r3, [r7, #8]
		  clock[1] = (time[1] >> 4) & 0xF;
 80008de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008e0:	3301      	adds	r3, #1
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	091b      	lsrs	r3, r3, #4
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	727b      	strb	r3, [r7, #9]
		  clock[2] = time[2] & 0xF;
 80008ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008ec:	3302      	adds	r3, #2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	f003 030f 	and.w	r3, r3, #15
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	72bb      	strb	r3, [r7, #10]
		  clock[3] = (time[2] >> 4) & 0xF;
 80008f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008fa:	3302      	adds	r3, #2
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	091b      	lsrs	r3, r3, #4
 8000900:	b2db      	uxtb	r3, r3
 8000902:	72fb      	strb	r3, [r7, #11]

		  //erase everything...
		  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000904:	2300      	movs	r3, #0
 8000906:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000908:	e008      	b.n	800091c <StartEncoder+0x524>
			  vfd.arr1[a] = 0;
 800090a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800090e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000910:	4413      	add	r3, r2
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
		  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000916:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000918:	3301      	adds	r3, #1
 800091a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800091c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800091e:	2b20      	cmp	r3, #32
 8000920:	d9f3      	bls.n	800090a <StartEncoder+0x512>


		  for (int i = 0; i < 4; i++)
 8000922:	2300      	movs	r3, #0
 8000924:	67bb      	str	r3, [r7, #120]	; 0x78
 8000926:	e028      	b.n	800097a <StartEncoder+0x582>
		  {
			  buf = get_char(clock[i]);
 8000928:	f107 0208 	add.w	r2, r7, #8
 800092c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800092e:	4413      	add	r3, r2
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	4618      	mov	r0, r3
 8000934:	f002 fae4 	bl	8002f00 <get_char>
 8000938:	4603      	mov	r3, r0
 800093a:	81bb      	strh	r3, [r7, #12]

			  vfd.arr2[4+i][0] = buf & 0xFF;
 800093c:	89b9      	ldrh	r1, [r7, #12]
 800093e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000940:	1d1a      	adds	r2, r3, #4
 8000942:	b2c9      	uxtb	r1, r1
 8000944:	4613      	mov	r3, r2
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	4413      	add	r3, r2
 800094a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800094e:	4413      	add	r3, r2
 8000950:	3b6c      	subs	r3, #108	; 0x6c
 8000952:	460a      	mov	r2, r1
 8000954:	701a      	strb	r2, [r3, #0]
			  vfd.arr2[4+i][1] = (buf>>8)&0xFF;
 8000956:	89bb      	ldrh	r3, [r7, #12]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b299      	uxth	r1, r3
 800095c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800095e:	1d1a      	adds	r2, r3, #4
 8000960:	b2c9      	uxtb	r1, r1
 8000962:	4613      	mov	r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	4413      	add	r3, r2
 8000968:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800096c:	4413      	add	r3, r2
 800096e:	3b6b      	subs	r3, #107	; 0x6b
 8000970:	460a      	mov	r2, r1
 8000972:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 4; i++)
 8000974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000976:	3301      	adds	r3, #1
 8000978:	67bb      	str	r3, [r7, #120]	; 0x78
 800097a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800097c:	2b03      	cmp	r3, #3
 800097e:	ddd3      	ble.n	8000928 <StartEncoder+0x530>
		  }

		  if ((time[0]&0b1) == 0)
 8000980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	2b00      	cmp	r3, #0
 800098a:	d11d      	bne.n	80009c8 <StartEncoder+0x5d0>
		  {
				for (int b = 0; b < 3; b++)
 800098c:	2300      	movs	r3, #0
 800098e:	677b      	str	r3, [r7, #116]	; 0x74
 8000990:	e017      	b.n	80009c2 <StartEncoder+0x5ca>
				  vfd.arr2[6][b] |= ((1<<0)>>(b<<3))&0xFF;
 8000992:	f107 0256 	add.w	r2, r7, #86	; 0x56
 8000996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000998:	4413      	add	r3, r2
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b25a      	sxtb	r2, r3
 800099e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	2101      	movs	r1, #1
 80009a4:	fa41 f303 	asr.w	r3, r1, r3
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	4313      	orrs	r3, r2
 80009ac:	b25b      	sxtb	r3, r3
 80009ae:	b2d9      	uxtb	r1, r3
 80009b0:	f107 0256 	add.w	r2, r7, #86	; 0x56
 80009b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009b6:	4413      	add	r3, r2
 80009b8:	460a      	mov	r2, r1
 80009ba:	701a      	strb	r2, [r3, #0]
				for (int b = 0; b < 3; b++)
 80009bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009be:	3301      	adds	r3, #1
 80009c0:	677b      	str	r3, [r7, #116]	; 0x74
 80009c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	dde4      	ble.n	8000992 <StartEncoder+0x59a>
		  }

		  data = 0b11000000; // command 3, set address to 0
 80009c8:	23c0      	movs	r3, #192	; 0xc0
 80009ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d4:	4815      	ldr	r0, [pc, #84]	; (8000a2c <StartEncoder+0x634>)
 80009d6:	f002 fe82 	bl	80036de <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80009da:	f107 0143 	add.w	r1, r7, #67	; 0x43
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	2201      	movs	r2, #1
 80009e4:	4812      	ldr	r0, [pc, #72]	; (8000a30 <StartEncoder+0x638>)
 80009e6:	f005 ff47 	bl	8006878 <HAL_SPI_Transmit>
		  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80009ea:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	2221      	movs	r2, #33	; 0x21
 80009f4:	480e      	ldr	r0, [pc, #56]	; (8000a30 <StartEncoder+0x638>)
 80009f6:	f005 ff3f 	bl	8006878 <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80009fa:	2201      	movs	r2, #1
 80009fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a00:	480a      	ldr	r0, [pc, #40]	; (8000a2c <StartEncoder+0x634>)
 8000a02:	f002 fe6c 	bl	80036de <HAL_GPIO_WritePin>
 8000a06:	e072      	b.n	8000aee <StartEncoder+0x6f6>


	  }
	  else
	  {
		  if(qVFDHandle && xQueueReceive(qVFDHandle, &buf, 1))
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <StartEncoder+0x640>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d06e      	beq.n	8000aee <StartEncoder+0x6f6>
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <StartEncoder+0x640>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f107 010c 	add.w	r1, r7, #12
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f00b fc14 	bl	800c248 <xQueueReceive>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d063      	beq.n	8000aee <StartEncoder+0x6f6>
		  {
				for (int i = 10; i > 1; i--)
 8000a26:	230a      	movs	r3, #10
 8000a28:	673b      	str	r3, [r7, #112]	; 0x70
 8000a2a:	e034      	b.n	8000a96 <StartEncoder+0x69e>
 8000a2c:	40010c00 	.word	0x40010c00
 8000a30:	200025e4 	.word	0x200025e4
 8000a34:	0800f4c8 	.word	0x0800f4c8
 8000a38:	20002490 	.word	0x20002490
 8000a3c:	2000000d 	.word	0x2000000d
				{
					vfd.arr2[i][0] = vfd.arr2[i-1][0];
 8000a40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a42:	1e5a      	subs	r2, r3, #1
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000a4e:	4413      	add	r3, r2
 8000a50:	3b6c      	subs	r3, #108	; 0x6c
 8000a52:	7819      	ldrb	r1, [r3, #0]
 8000a54:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000a56:	4613      	mov	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4413      	add	r3, r2
 8000a5c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000a60:	4413      	add	r3, r2
 8000a62:	3b6c      	subs	r3, #108	; 0x6c
 8000a64:	460a      	mov	r2, r1
 8000a66:	701a      	strb	r2, [r3, #0]
					vfd.arr2[i][1] = vfd.arr2[i-1][1];
 8000a68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a6a:	1e5a      	subs	r2, r3, #1
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4413      	add	r3, r2
 8000a72:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000a76:	4413      	add	r3, r2
 8000a78:	3b6b      	subs	r3, #107	; 0x6b
 8000a7a:	7819      	ldrb	r1, [r3, #0]
 8000a7c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000a7e:	4613      	mov	r3, r2
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	4413      	add	r3, r2
 8000a84:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000a88:	4413      	add	r3, r2
 8000a8a:	3b6b      	subs	r3, #107	; 0x6b
 8000a8c:	460a      	mov	r2, r1
 8000a8e:	701a      	strb	r2, [r3, #0]
				for (int i = 10; i > 1; i--)
 8000a90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a92:	3b01      	subs	r3, #1
 8000a94:	673b      	str	r3, [r7, #112]	; 0x70
 8000a96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	dcd1      	bgt.n	8000a40 <StartEncoder+0x648>
				}
				vfd.arr2[1][0] = buf & 0xFF;
 8000a9c:	89bb      	ldrh	r3, [r7, #12]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				vfd.arr2[1][1] = (buf>>8)&0xFF;
 8000aa4:	89bb      	ldrh	r3, [r7, #12]
 8000aa6:	0a1b      	lsrs	r3, r3, #8
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
				data = 0b11000000; // command 3, set address to 0
 8000ab0:	23c0      	movs	r3, #192	; 0xc0
 8000ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000abc:	4857      	ldr	r0, [pc, #348]	; (8000c1c <StartEncoder+0x824>)
 8000abe:	f002 fe0e 	bl	80036de <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000ac2:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	2201      	movs	r2, #1
 8000acc:	4854      	ldr	r0, [pc, #336]	; (8000c20 <StartEncoder+0x828>)
 8000ace:	f005 fed3 	bl	8006878 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000ad2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	2221      	movs	r2, #33	; 0x21
 8000adc:	4850      	ldr	r0, [pc, #320]	; (8000c20 <StartEncoder+0x828>)
 8000ade:	f005 fecb 	bl	8006878 <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae8:	484c      	ldr	r0, [pc, #304]	; (8000c1c <StartEncoder+0x824>)
 8000aea:	f002 fdf8 	bl	80036de <HAL_GPIO_WritePin>
		  }
	  }

	  if (HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin))
 8000aee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af2:	484a      	ldr	r0, [pc, #296]	; (8000c1c <StartEncoder+0x824>)
 8000af4:	f002 fddc 	bl	80036b0 <HAL_GPIO_ReadPin>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <StartEncoder+0x70e>
	  {
		  released = true;
 8000afe:	4b49      	ldr	r3, [pc, #292]	; (8000c24 <StartEncoder+0x82c>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	701a      	strb	r2, [r3, #0]
 8000b04:	e015      	b.n	8000b32 <StartEncoder+0x73a>
	  } else if (released)
 8000b06:	4b47      	ldr	r3, [pc, #284]	; (8000c24 <StartEncoder+0x82c>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d011      	beq.n	8000b32 <StartEncoder+0x73a>
	  {
		  released = false;
 8000b0e:	4b45      	ldr	r3, [pc, #276]	; (8000c24 <StartEncoder+0x82c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
		  invert = !invert;
 8000b14:	4b44      	ldr	r3, [pc, #272]	; (8000c28 <StartEncoder+0x830>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	bf14      	ite	ne
 8000b1c:	2301      	movne	r3, #1
 8000b1e:	2300      	moveq	r3, #0
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f083 0301 	eor.w	r3, r3, #1
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4b3e      	ldr	r3, [pc, #248]	; (8000c28 <StartEncoder+0x830>)
 8000b30:	701a      	strb	r2, [r3, #0]
	  }

	  data = 0b01000001; // command 2, write to LED port
 8000b32:	2341      	movs	r3, #65	; 0x41
 8000b34:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b3e:	4837      	ldr	r0, [pc, #220]	; (8000c1c <StartEncoder+0x824>)
 8000b40:	f002 fdcd 	bl	80036de <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000b44:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4834      	ldr	r0, [pc, #208]	; (8000c20 <StartEncoder+0x828>)
 8000b50:	f005 fe92 	bl	8006878 <HAL_SPI_Transmit>
	  osDelay(10);
 8000b54:	200a      	movs	r0, #10
 8000b56:	f00a fe23 	bl	800b7a0 <osDelay>

	  data = ~(1<<((tick_counter >> 1)&0b11));
 8000b5a:	4b34      	ldr	r3, [pc, #208]	; (8000c2c <StartEncoder+0x834>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	085b      	lsrs	r3, r3, #1
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	f003 0303 	and.w	r3, r3, #3
 8000b66:	2201      	movs	r2, #1
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
//	  if (invert)
//		  data =~data;
	  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, invert);
 8000b76:	4b2c      	ldr	r3, [pc, #176]	; (8000c28 <StartEncoder+0x830>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	4827      	ldr	r0, [pc, #156]	; (8000c1c <StartEncoder+0x824>)
 8000b80:	f002 fdad 	bl	80036de <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000b84:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4824      	ldr	r0, [pc, #144]	; (8000c20 <StartEncoder+0x828>)
 8000b90:	f005 fe72 	bl	8006878 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b9a:	4820      	ldr	r0, [pc, #128]	; (8000c1c <StartEncoder+0x824>)
 8000b9c:	f002 fd9f 	bl	80036de <HAL_GPIO_WritePin>

	  osDelay(10);
 8000ba0:	200a      	movs	r0, #10
 8000ba2:	f00a fdfd 	bl	800b7a0 <osDelay>
	  data = 0b10000000; // command 4
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  data |= invert<<3; // enable/disable display
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <StartEncoder+0x830>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	b25a      	sxtb	r2, r3
 8000bb4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  data |= ((encoder_value >> 2) - 1)&0b111; // set brightness
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <StartEncoder+0x838>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	089b      	lsrs	r3, r3, #2
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	b25b      	sxtb	r3, r3
 8000bd4:	f003 0307 	and.w	r3, r3, #7
 8000bd8:	b25a      	sxtb	r2, r3
 8000bda:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000bde:	b25b      	sxtb	r3, r3
 8000be0:	4313      	orrs	r3, r2
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf0:	480a      	ldr	r0, [pc, #40]	; (8000c1c <StartEncoder+0x824>)
 8000bf2:	f002 fd74 	bl	80036de <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000bf6:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4807      	ldr	r0, [pc, #28]	; (8000c20 <StartEncoder+0x828>)
 8000c02:	f005 fe39 	bl	8006878 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000c06:	2201      	movs	r2, #1
 8000c08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0c:	4803      	ldr	r0, [pc, #12]	; (8000c1c <StartEncoder+0x824>)
 8000c0e:	f002 fd66 	bl	80036de <HAL_GPIO_WritePin>
	  osDelay(10);
 8000c12:	200a      	movs	r0, #10
 8000c14:	f00a fdc4 	bl	800b7a0 <osDelay>
  {
 8000c18:	e652      	b.n	80008c0 <StartEncoder+0x4c8>
 8000c1a:	bf00      	nop
 8000c1c:	40010c00 	.word	0x40010c00
 8000c20:	200025e4 	.word	0x200025e4
 8000c24:	20000000 	.word	0x20000000
 8000c28:	20000001 	.word	0x20000001
 8000c2c:	200001ae 	.word	0x200001ae
 8000c30:	200001ac 	.word	0x200001ac

08000c34 <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	if (huart != &huart2)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <HAL_UART_RxCpltCallback+0x44>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d115      	bne.n	8000c70 <HAL_UART_RxCpltCallback+0x3c>
		return;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]


   /* Notify the task that the transmission is complete by setting the TX_BIT
   in the task's notification value. */
	vTaskNotifyGiveFromISR( UARTtaskHandle,
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <HAL_UART_RxCpltCallback+0x48>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f107 020c 	add.w	r2, r7, #12
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f00c ff12 	bl	800da7c <vTaskNotifyGiveFromISR>

   /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context switch
   should be performed to ensure the interrupt returns directly to the highest
   priority task.  The macro used for this purpose is dependent on the port in
   use and may be called portEND_SWITCHING_ISR(). */
   portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d009      	beq.n	8000c72 <HAL_UART_RxCpltCallback+0x3e>
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_UART_RxCpltCallback+0x4c>)
 8000c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	f3bf 8f4f 	dsb	sy
 8000c6a:	f3bf 8f6f 	isb	sy
 8000c6e:	e000      	b.n	8000c72 <HAL_UART_RxCpltCallback+0x3e>
		return;
 8000c70:	bf00      	nop
}
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20002684 	.word	0x20002684
 8000c7c:	200024a0 	.word	0x200024a0
 8000c80:	e000ed04 	.word	0xe000ed04

08000c84 <process_encoder>:

void process_encoder(void)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
	static uint8_t old;
	uint8_t new;
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000c8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8e:	483c      	ldr	r0, [pc, #240]	; (8000d80 <process_encoder+0xfc>)
 8000c90:	f002 fd0e 	bl	80036b0 <HAL_GPIO_ReadPin>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461c      	mov	r4, r3
		   0b10*HAL_GPIO_ReadPin(enc_b_GPIO_Port, enc_b_Pin));
 8000c98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c9c:	4838      	ldr	r0, [pc, #224]	; (8000d80 <process_encoder+0xfc>)
 8000c9e:	f002 fd07 	bl	80036b0 <HAL_GPIO_ReadPin>
 8000ca2:	4603      	mov	r3, r0
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4423      	add	r3, r4
 8000caa:	71fb      	strb	r3, [r7, #7]
	switch(old)
 8000cac:	4b35      	ldr	r3, [pc, #212]	; (8000d84 <process_encoder+0x100>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d85e      	bhi.n	8000d72 <process_encoder+0xee>
 8000cb4:	a201      	add	r2, pc, #4	; (adr r2, 8000cbc <process_encoder+0x38>)
 8000cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cba:	bf00      	nop
 8000cbc:	08000cf3 	.word	0x08000cf3
 8000cc0:	08000d19 	.word	0x08000d19
 8000cc4:	08000ccd 	.word	0x08000ccd
 8000cc8:	08000d3f 	.word	0x08000d3f
		{
		case 2:
			{
			if(new == 3) encoder_value++;
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d105      	bne.n	8000cde <process_encoder+0x5a>
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <process_encoder+0x104>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <process_encoder+0x104>)
 8000cdc:	801a      	strh	r2, [r3, #0]
			if(new == 0) encoder_value--;
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d13f      	bne.n	8000d64 <process_encoder+0xe0>
 8000ce4:	4b28      	ldr	r3, [pc, #160]	; (8000d88 <process_encoder+0x104>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <process_encoder+0x104>)
 8000cee:	801a      	strh	r2, [r3, #0]
			break;
 8000cf0:	e038      	b.n	8000d64 <process_encoder+0xe0>
			}

		case 0:
			{
			if(new == 2) encoder_value++;
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d105      	bne.n	8000d04 <process_encoder+0x80>
 8000cf8:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <process_encoder+0x104>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <process_encoder+0x104>)
 8000d02:	801a      	strh	r2, [r3, #0]
			if(new == 1) encoder_value--;
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d12e      	bne.n	8000d68 <process_encoder+0xe4>
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <process_encoder+0x104>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <process_encoder+0x104>)
 8000d14:	801a      	strh	r2, [r3, #0]
			break;
 8000d16:	e027      	b.n	8000d68 <process_encoder+0xe4>
			}
		case 1:
			{
			if(new == 0) encoder_value++;
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d105      	bne.n	8000d2a <process_encoder+0xa6>
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <process_encoder+0x104>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <process_encoder+0x104>)
 8000d28:	801a      	strh	r2, [r3, #0]
			if(new == 3) encoder_value--;
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	d11d      	bne.n	8000d6c <process_encoder+0xe8>
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <process_encoder+0x104>)
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <process_encoder+0x104>)
 8000d3a:	801a      	strh	r2, [r3, #0]
			break;
 8000d3c:	e016      	b.n	8000d6c <process_encoder+0xe8>
			}
		case 3:
			{
			if(new == 1) encoder_value++;
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d105      	bne.n	8000d50 <process_encoder+0xcc>
 8000d44:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <process_encoder+0x104>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <process_encoder+0x104>)
 8000d4e:	801a      	strh	r2, [r3, #0]
			if(new == 2) encoder_value--;
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d10c      	bne.n	8000d70 <process_encoder+0xec>
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <process_encoder+0x104>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <process_encoder+0x104>)
 8000d60:	801a      	strh	r2, [r3, #0]
			break;
 8000d62:	e005      	b.n	8000d70 <process_encoder+0xec>
			break;
 8000d64:	bf00      	nop
 8000d66:	e004      	b.n	8000d72 <process_encoder+0xee>
			break;
 8000d68:	bf00      	nop
 8000d6a:	e002      	b.n	8000d72 <process_encoder+0xee>
			break;
 8000d6c:	bf00      	nop
 8000d6e:	e000      	b.n	8000d72 <process_encoder+0xee>
			break;
 8000d70:	bf00      	nop
			}
		}
	old = new;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <process_encoder+0x100>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	7013      	strb	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd90      	pop	{r4, r7, pc}
 8000d80:	40010c00 	.word	0x40010c00
 8000d84:	200001b0 	.word	0x200001b0
 8000d88:	200001ac 	.word	0x200001ac

08000d8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da0:	4b49      	ldr	r3, [pc, #292]	; (8000ec8 <MX_GPIO_Init+0x13c>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a48      	ldr	r2, [pc, #288]	; (8000ec8 <MX_GPIO_Init+0x13c>)
 8000da6:	f043 0310 	orr.w	r3, r3, #16
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b46      	ldr	r3, [pc, #280]	; (8000ec8 <MX_GPIO_Init+0x13c>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0310 	and.w	r3, r3, #16
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db8:	4b43      	ldr	r3, [pc, #268]	; (8000ec8 <MX_GPIO_Init+0x13c>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a42      	ldr	r2, [pc, #264]	; (8000ec8 <MX_GPIO_Init+0x13c>)
 8000dbe:	f043 0320 	orr.w	r3, r3, #32
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b40      	ldr	r3, [pc, #256]	; (8000ec8 <MX_GPIO_Init+0x13c>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0320 	and.w	r3, r3, #32
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b3d      	ldr	r3, [pc, #244]	; (8000ec8 <MX_GPIO_Init+0x13c>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a3c      	ldr	r2, [pc, #240]	; (8000ec8 <MX_GPIO_Init+0x13c>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b3a      	ldr	r3, [pc, #232]	; (8000ec8 <MX_GPIO_Init+0x13c>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de8:	4b37      	ldr	r3, [pc, #220]	; (8000ec8 <MX_GPIO_Init+0x13c>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a36      	ldr	r2, [pc, #216]	; (8000ec8 <MX_GPIO_Init+0x13c>)
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <MX_GPIO_Init+0x13c>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0308 	and.w	r3, r3, #8
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e06:	4831      	ldr	r0, [pc, #196]	; (8000ecc <MX_GPIO_Init+0x140>)
 8000e08:	f002 fc69 	bl	80036de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 5189 	mov.w	r1, #4384	; 0x1120
 8000e12:	482f      	ldr	r0, [pc, #188]	; (8000ed0 <MX_GPIO_Init+0x144>)
 8000e14:	f002 fc63 	bl	80036de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e1e:	482d      	ldr	r0, [pc, #180]	; (8000ed4 <MX_GPIO_Init+0x148>)
 8000e20:	f002 fc5d 	bl	80036de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4823      	ldr	r0, [pc, #140]	; (8000ecc <MX_GPIO_Init+0x140>)
 8000e3e:	f002 fab3 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e42:	2301      	movs	r3, #1
 8000e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e46:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <MX_GPIO_Init+0x14c>)
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	4619      	mov	r1, r3
 8000e54:	481f      	ldr	r0, [pc, #124]	; (8000ed4 <MX_GPIO_Init+0x148>)
 8000e56:	f002 faa7 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin|enc_s_Pin;
 8000e5a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000e5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4818      	ldr	r0, [pc, #96]	; (8000ed0 <MX_GPIO_Init+0x144>)
 8000e70:	f002 fa9a 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8000e74:	f44f 5389 	mov.w	r3, #4384	; 0x1120
 8000e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2302      	movs	r3, #2
 8000e84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4810      	ldr	r0, [pc, #64]	; (8000ed0 <MX_GPIO_Init+0x144>)
 8000e8e:	f002 fa8b 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480a      	ldr	r0, [pc, #40]	; (8000ed4 <MX_GPIO_Init+0x148>)
 8000eac:	f002 fa7c 	bl	80033a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2105      	movs	r1, #5
 8000eb4:	2006      	movs	r0, #6
 8000eb6:	f002 f99c 	bl	80031f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000eba:	2006      	movs	r0, #6
 8000ebc:	f002 f9b5 	bl	800322a <HAL_NVIC_EnableIRQ>

}
 8000ec0:	bf00      	nop
 8000ec2:	3720      	adds	r7, #32
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40011000 	.word	0x40011000
 8000ed0:	40010c00 	.word	0x40010c00
 8000ed4:	40010800 	.word	0x40010800
 8000ed8:	10110000 	.word	0x10110000

08000edc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000ee2:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <MX_I2C1_Init+0x54>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000ee8:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <MX_I2C1_Init+0x58>)
 8000eea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000efa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000efe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f1a:	f002 fc33 	bl	8003784 <HAL_I2C_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f24:	f000 f8c8 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200024b0 	.word	0x200024b0
 8000f30:	40005400 	.word	0x40005400
 8000f34:	000186a0 	.word	0x000186a0

08000f38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <HAL_I2C_MspInit+0x70>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d123      	bne.n	8000fa0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_I2C_MspInit+0x74>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a13      	ldr	r2, [pc, #76]	; (8000fac <HAL_I2C_MspInit+0x74>)
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <HAL_I2C_MspInit+0x74>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f70:	23c0      	movs	r3, #192	; 0xc0
 8000f72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f74:	2312      	movs	r3, #18
 8000f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	4619      	mov	r1, r3
 8000f82:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <HAL_I2C_MspInit+0x78>)
 8000f84:	f002 fa10 	bl	80033a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_I2C_MspInit+0x74>)
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_I2C_MspInit+0x74>)
 8000f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f92:	61d3      	str	r3, [r2, #28]
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_I2C_MspInit+0x74>)
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	3720      	adds	r7, #32
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010c00 	.word	0x40010c00

08000fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb8:	f002 f834 	bl	8003024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fbc:	f000 f80f 	bl	8000fde <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc0:	f7ff fee4 	bl	8000d8c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000fc4:	f001 fdd0 	bl	8002b68 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000fc8:	f001 ff1e 	bl	8002e08 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fcc:	f7ff ff86 	bl	8000edc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000fd0:	f00a fad6 	bl	800b580 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000fd4:	f7ff f91e 	bl	8000214 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000fd8:	f00a fb04 	bl	800b5e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <main+0x28>

08000fde <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b094      	sub	sp, #80	; 0x50
 8000fe2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fe8:	2228      	movs	r2, #40	; 0x28
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f00e fa13 	bl	800f418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800100e:	2301      	movs	r3, #1
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001012:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001018:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800101c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800101e:	2301      	movs	r3, #1
 8001020:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001022:	2302      	movs	r3, #2
 8001024:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800102a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800102c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001030:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001036:	4618      	mov	r0, r3
 8001038:	f004 fe98 	bl	8005d6c <HAL_RCC_OscConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001042:	f000 f839 	bl	80010b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001046:	230f      	movs	r3, #15
 8001048:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104a:	2302      	movs	r3, #2
 800104c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001056:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2102      	movs	r1, #2
 8001062:	4618      	mov	r0, r3
 8001064:	f005 f902 	bl	800626c <HAL_RCC_ClockConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800106e:	f000 f823 	bl	80010b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001072:	2310      	movs	r3, #16
 8001074:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	4618      	mov	r0, r3
 800107e:	f005 fac1 	bl	8006604 <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001088:	f000 f816 	bl	80010b8 <Error_Handler>
  }
}
 800108c:	bf00      	nop
 800108e:	3750      	adds	r7, #80	; 0x50
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d101      	bne.n	80010aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010a6:	f001 ffd3 	bl	8003050 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40012c00 	.word	0x40012c00

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <Error_Handler+0x8>

080010c2 <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	5c8a      	ldrb	r2, [r1, r2]
 80010d6:	4413      	add	r3, r2
 80010d8:	3301      	adds	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2b3f      	cmp	r3, #63	; 0x3f
 80010e0:	dd02      	ble.n	80010e8 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3b40      	subs	r3, #64	; 0x40
 80010e6:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	5cd3      	ldrb	r3, [r2, r3]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <hist_is_space_for_new+0x1a>
		return true;
 800110e:	2301      	movs	r3, #1
 8001110:	e01e      	b.n	8001150 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	429a      	cmp	r2, r3
 800111c:	db0c      	blt.n	8001138 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	4413      	add	r3, r2
 800112c:	3b01      	subs	r3, #1
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	da0c      	bge.n	800114e <hist_is_space_for_new+0x56>
			return true;
 8001134:	2301      	movs	r3, #1
 8001136:	e00b      	b.n	8001150 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	3b01      	subs	r3, #1
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	da01      	bge.n	800114e <hist_is_space_for_new+0x56>
			return true;
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <hist_is_space_for_new+0x58>
	}
	return false;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b3e      	cmp	r3, #62	; 0x3e
 800116a:	dc61      	bgt.n	8001230 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 800116c:	e002      	b.n	8001174 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f7ff ffa7 	bl	80010c2 <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f7ff ffbe 	bl	80010f8 <hist_is_space_for_new>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f5      	beq.n	800116e <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	5cd3      	ldrb	r3, [r2, r3]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d105      	bne.n	800119a <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	b2d1      	uxtb	r1, r2
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	da0a      	bge.n	80011be <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	3301      	adds	r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f00e f906 	bl	800f3c8 <memcpy>
 80011bc:	e018      	b.n	80011f0 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80011c6:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	3301      	adds	r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00e f8f6 	bl	800f3c8 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	18d1      	adds	r1, r2, r3
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	461a      	mov	r2, r3
 80011ec:	f00e f8ec 	bl	800f3c8 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	b2d1      	uxtb	r1, r2
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4413      	add	r3, r2
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	2b3f      	cmp	r3, #63	; 0x3f
 8001210:	dd05      	ble.n	800121e <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	2100      	movs	r1, #0
 8001226:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2200      	movs	r2, #0
 800122c:	649a      	str	r2, [r3, #72]	; 0x48
 800122e:	e000      	b.n	8001232 <hist_save_line+0xd8>
		return;
 8001230:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	; 0x30
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 800124e:	e010      	b.n	8001272 <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001254:	4413      	add	r3, r2
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800125c:	4413      	add	r3, r2
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8001260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001262:	2b3f      	cmp	r3, #63	; 0x3f
 8001264:	dd02      	ble.n	800126c <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 8001266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001268:	3b40      	subs	r3, #64	; 0x40
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 800126c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126e:	3301      	adds	r3, #1
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001276:	4413      	add	r3, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1e8      	bne.n	8001250 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d176      	bne.n	8001372 <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800128a:	429a      	cmp	r2, r3
 800128c:	f2c0 80d6 	blt.w	800143c <hist_restore_line+0x204>
			int header = pThis->begin;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 800129a:	e010      	b.n	80012be <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	4413      	add	r3, r2
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	3301      	adds	r3, #1
 80012a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a8:	4413      	add	r3, r2
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	2b3f      	cmp	r3, #63	; 0x3f
 80012b0:	dd02      	ble.n	80012b8 <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	3b40      	subs	r3, #64	; 0x40
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	3301      	adds	r3, #1
 80012bc:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d007      	beq.n	80012da <hist_restore_line+0xa2>
 80012ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012cc:	6a3b      	ldr	r3, [r7, #32]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	1e5a      	subs	r2, r3, #1
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d1e0      	bne.n	800129c <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	4413      	add	r3, r2
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 80aa 	beq.w	800143c <hist_restore_line+0x204>
					pThis->cur++;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	4413      	add	r3, r2
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	4413      	add	r3, r2
 8001300:	2b3f      	cmp	r3, #63	; 0x3f
 8001302:	dc11      	bgt.n	8001328 <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 8001304:	2233      	movs	r2, #51	; 0x33
 8001306:	2100      	movs	r1, #0
 8001308:	68b8      	ldr	r0, [r7, #8]
 800130a:	f00e f885 	bl	800f418 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	3301      	adds	r3, #1
 8001314:	18d1      	adds	r1, r2, r3
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	4413      	add	r3, r2
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	f00e f851 	bl	800f3c8 <memcpy>
 8001326:	e01f      	b.n	8001368 <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800132e:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 8001330:	2233      	movs	r2, #51	; 0x33
 8001332:	2100      	movs	r1, #0
 8001334:	68b8      	ldr	r0, [r7, #8]
 8001336:	f00e f86f 	bl	800f418 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	3301      	adds	r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4619      	mov	r1, r3
 8001346:	68b8      	ldr	r0, [r7, #8]
 8001348:	f00e f83e 	bl	800f3c8 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	18d0      	adds	r0, r2, r3
 8001352:	68f9      	ldr	r1, [r7, #12]
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	4413      	add	r3, r2
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	461a      	mov	r2, r3
 8001364:	f00e f830 	bl	800f3c8 <memcpy>
				}
				return pThis->ring_buf[header];
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	4413      	add	r3, r2
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	e066      	b.n	8001440 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001376:	2b00      	cmp	r3, #0
 8001378:	dd5e      	ble.n	8001438 <hist_restore_line+0x200>
				pThis->cur--;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137e:	1e5a      	subs	r2, r3, #1
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	61fb      	str	r3, [r7, #28]
			int j = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 800138e:	e010      	b.n	80013b2 <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	4413      	add	r3, r2
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	69fa      	ldr	r2, [r7, #28]
 800139c:	4413      	add	r3, r2
 800139e:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	2b3f      	cmp	r3, #63	; 0x3f
 80013a4:	dd02      	ble.n	80013ac <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b40      	subs	r3, #64	; 0x40
 80013aa:	61fb      	str	r3, [r7, #28]
				j++;
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	3301      	adds	r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	4413      	add	r3, r2
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d006      	beq.n	80013cc <hist_restore_line+0x194>
 80013be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	1ad2      	subs	r2, r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d1e1      	bne.n	8001390 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	4413      	add	r3, r2
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	4413      	add	r3, r2
 80013da:	2b3f      	cmp	r3, #63	; 0x3f
 80013dc:	dc0c      	bgt.n	80013f8 <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	3301      	adds	r3, #1
 80013e4:	18d1      	adds	r1, r2, r3
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	4413      	add	r3, r2
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	68b8      	ldr	r0, [r7, #8]
 80013f2:	f00d ffe9 	bl	800f3c8 <memcpy>
 80013f6:	e01a      	b.n	800142e <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80013fe:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3301      	adds	r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	4619      	mov	r1, r3
 800140c:	68b8      	ldr	r0, [r7, #8]
 800140e:	f00d ffdb 	bl	800f3c8 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	18d0      	adds	r0, r2, r3
 8001418:	68f9      	ldr	r1, [r7, #12]
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	4413      	add	r3, r2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	461a      	mov	r2, r3
 800142a:	f00d ffcd 	bl	800f3c8 <memcpy>
			}
			return pThis->ring_buf[header];
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	4413      	add	r3, r2
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	e003      	b.n	8001440 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 8001438:	2300      	movs	r3, #0
 800143a:	e001      	b.n	8001440 <hist_restore_line+0x208>
		}
	}
	return -1;
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001440:	4618      	mov	r0, r3
 8001442:	3730      	adds	r7, #48	; 0x30
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
	int ind = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 800145c:	e002      	b.n	8001464 <split+0x1c>
			ind++;
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	3301      	adds	r3, #1
 8001462:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4413      	add	r3, r2
 800146a:	3354      	adds	r3, #84	; 0x54
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d103      	bne.n	800147a <split+0x32>
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	429a      	cmp	r2, r3
 8001478:	dbf1      	blt.n	800145e <split+0x16>
		}
		if (!(ind < limit)) return i;
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	429a      	cmp	r2, r3
 8001480:	db01      	blt.n	8001486 <split+0x3e>
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	e024      	b.n	80014d0 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	1c58      	adds	r0, r3, #1
 8001492:	6178      	str	r0, [r7, #20]
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	4403      	add	r3, r0
 800149a:	440a      	add	r2, r1
 800149c:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	dd05      	ble.n	80014b0 <split+0x68>
			return -1;
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295
 80014a8:	e012      	b.n	80014d0 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	3301      	adds	r3, #1
 80014ae:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4413      	add	r3, r2
 80014b6:	3354      	adds	r3, #84	; 0x54
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <split+0x7e>
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	dbf1      	blt.n	80014aa <split+0x62>
		}
		if (!(ind < limit)) return i;
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	dbca      	blt.n	8001464 <split+0x1c>
 80014ce:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014ec:	4610      	mov	r0, r2
 80014ee:	4798      	blx	r3
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001506:	4803      	ldr	r0, [pc, #12]	; (8001514 <terminal_backspace+0x1c>)
 8001508:	4798      	blx	r3
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	0800f518 	.word	0x0800f518

08001518 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001526:	4803      	ldr	r0, [pc, #12]	; (8001534 <terminal_newline+0x1c>)
 8001528:	4798      	blx	r3
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	0800f520 	.word	0x0800f520

08001538 <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 8001538:	b480      	push	{r7}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	2300      	movs	r3, #0
 8001548:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001554:	d235      	bcs.n	80015c2 <u16bit_to_str+0x8a>
		while (nmb > 0) {
 8001556:	e01a      	b.n	800158e <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <u16bit_to_str+0x9c>)
 800155c:	fba3 2301 	umull	r2, r3, r3, r1
 8001560:	08da      	lsrs	r2, r3, #3
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	1aca      	subs	r2, r1, r3
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	1c59      	adds	r1, r3, #1
 8001572:	6179      	str	r1, [r7, #20]
 8001574:	3230      	adds	r2, #48	; 0x30
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	f107 0118 	add.w	r1, r7, #24
 800157c:	440b      	add	r3, r1
 800157e:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <u16bit_to_str+0x9c>)
 8001586:	fba2 2303 	umull	r2, r3, r2, r3
 800158a:	08db      	lsrs	r3, r3, #3
 800158c:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1e1      	bne.n	8001558 <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 8001594:	2300      	movs	r3, #0
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	e00f      	b.n	80015ba <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	1e5a      	subs	r2, r3, #1
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	1c59      	adds	r1, r3, #1
 80015a6:	6039      	str	r1, [r7, #0]
 80015a8:	f107 0118 	add.w	r1, r7, #24
 80015ac:	440a      	add	r2, r1
 80015ae:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80015b2:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	3301      	adds	r3, #1
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	429a      	cmp	r2, r3
 80015c0:	dbeb      	blt.n	800159a <u16bit_to_str+0x62>
	}
	*buf = '\0';
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
	return buf;
 80015c8:	683b      	ldr	r3, [r7, #0]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	371c      	adds	r7, #28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	cccccccd 	.word	0xcccccccd

080015d8 <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	f107 0310 	add.w	r3, r7, #16
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	4a1d      	ldr	r2, [pc, #116]	; (800166c <terminal_move_cursor+0x94>)
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	4611      	mov	r1, r2
 80015fc:	8019      	strh	r1, [r3, #0]
 80015fe:	3302      	adds	r3, #2
 8001600:	0c12      	lsrs	r2, r2, #16
 8001602:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	dd0f      	ble.n	800162a <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	3302      	adds	r3, #2
 8001612:	4619      	mov	r1, r3
 8001614:	4610      	mov	r0, r2
 8001616:	f7ff ff8f 	bl	8001538 <u16bit_to_str>
 800161a:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	4914      	ldr	r1, [pc, #80]	; (8001670 <terminal_move_cursor+0x98>)
 8001620:	461a      	mov	r2, r3
 8001622:	460b      	mov	r3, r1
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	8013      	strh	r3, [r2, #0]
 8001628:	e013      	b.n	8001652 <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	da18      	bge.n	8001662 <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	425b      	negs	r3, r3
 8001634:	461a      	mov	r2, r3
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	3302      	adds	r3, #2
 800163c:	4619      	mov	r1, r3
 800163e:	4610      	mov	r0, r2
 8001640:	f7ff ff7a 	bl	8001538 <u16bit_to_str>
 8001644:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	490a      	ldr	r1, [pc, #40]	; (8001674 <terminal_move_cursor+0x9c>)
 800164a:	461a      	mov	r2, r3
 800164c:	460b      	mov	r3, r1
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001658:	f107 020c 	add.w	r2, r7, #12
 800165c:	4610      	mov	r0, r2
 800165e:	4798      	blx	r3
 8001660:	e000      	b.n	8001664 <terminal_move_cursor+0x8c>
		return;
 8001662:	bf00      	nop
}
 8001664:	3720      	adds	r7, #32
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	0800f524 	.word	0x0800f524
 8001670:	0800f528 	.word	0x0800f528
 8001674:	0800f52c 	.word	0x0800f52c

08001678 <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	4a15      	ldr	r2, [pc, #84]	; (80016dc <terminal_reset_cursor+0x64>)
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	4611      	mov	r1, r2
 800168a:	8019      	strh	r1, [r3, #0]
 800168c:	3302      	adds	r3, #2
 800168e:	0c12      	lsrs	r2, r2, #16
 8001690:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	3302      	adds	r3, #2
 8001698:	4619      	mov	r1, r3
 800169a:	203a      	movs	r0, #58	; 0x3a
 800169c:	f7ff ff4c 	bl	8001538 <u16bit_to_str>
 80016a0:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <terminal_reset_cursor+0x68>)
 80016a6:	6810      	ldr	r0, [r2, #0]
 80016a8:	6018      	str	r0, [r3, #0]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3303      	adds	r3, #3
 80016ae:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 80016b0:	69f9      	ldr	r1, [r7, #28]
 80016b2:	2005      	movs	r0, #5
 80016b4:	f7ff ff40 	bl	8001538 <u16bit_to_str>
 80016b8:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	4909      	ldr	r1, [pc, #36]	; (80016e4 <terminal_reset_cursor+0x6c>)
 80016be:	461a      	mov	r2, r3
 80016c0:	460b      	mov	r3, r1
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016cc:	f107 020c 	add.w	r2, r7, #12
 80016d0:	4610      	mov	r0, r2
 80016d2:	4798      	blx	r3
}
 80016d4:	bf00      	nop
 80016d6:	3720      	adds	r7, #32
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	0800f524 	.word	0x0800f524
 80016e0:	0800f530 	.word	0x0800f530
 80016e4:	0800f528 	.word	0x0800f528

080016e8 <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016fa:	4816      	ldr	r0, [pc, #88]	; (8001754 <terminal_print_line+0x6c>)
 80016fc:	4798      	blx	r3

	char nch [] = {0,0};
 80016fe:	2300      	movs	r3, #0
 8001700:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e014      	b.n	8001732 <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	4413      	add	r3, r2
 800170e:	3354      	adds	r3, #84	; 0x54
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 8001714:	7c3b      	ldrb	r3, [r7, #16]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <terminal_print_line+0x36>
			nch[0] = ' ';
 800171a:	2320      	movs	r3, #32
 800171c:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001724:	f107 0210 	add.w	r2, r7, #16
 8001728:	4610      	mov	r0, r2
 800172a:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3301      	adds	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	429a      	cmp	r2, r3
 800173c:	dbe4      	blt.n	8001708 <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f7ff ff9a 	bl	8001678 <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f7ff ff46 	bl	80015d8 <terminal_move_cursor>
}
 800174c:	bf00      	nop
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	0800f534 	.word	0x0800f534

08001758 <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3354      	adds	r3, #84	; 0x54
 8001766:	2233      	movs	r2, #51	; 0x33
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f00d fe54 	bl	800f418 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3304      	adds	r3, #4
 8001774:	2240      	movs	r2, #64	; 0x40
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f00d fe4d 	bl	800f418 <memset>
	pThis->ring_hist.begin = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pThis->execute = NULL;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	pThis->get_completion = NULL;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif
	pThis->prompt_str = prompt_default;
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <microrl_init+0x78>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000004 	.word	0x20000004

080017d4 <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	1d18      	adds	r0, r3, #4
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3354      	adds	r3, #84	; 0x54
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	4619      	mov	r1, r3
 800183e:	f7ff fcfb 	bl	8001238 <hist_restore_line>
 8001842:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db1a      	blt.n	8001880 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	3354      	adds	r3, #84	; 0x54
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		terminal_reset_cursor (pThis);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ff04 	bl	8001678 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001876:	461a      	mov	r2, r3
 8001878:	2100      	movs	r1, #0
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ff34 	bl	80016e8 <terminal_print_line>
	}
}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	2b5b      	cmp	r3, #91	; 0x5b
 8001898:	d104      	bne.n	80018a4 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
		return 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e07b      	b.n	800199c <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d14f      	bne.n	800194c <escape_process+0xc4>
		if (ch == 'A') {
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	2b41      	cmp	r3, #65	; 0x41
 80018b0:	d105      	bne.n	80018be <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 80018b2:	2100      	movs	r1, #0
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ffb7 	bl	8001828 <hist_search>
#endif
			return 1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e06e      	b.n	800199c <escape_process+0x114>
		} else if (ch == 'B') {
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	2b42      	cmp	r3, #66	; 0x42
 80018c2:	d105      	bne.n	80018d0 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 80018c4:	2101      	movs	r1, #1
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ffae 	bl	8001828 <hist_search>
#endif
			return 1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e065      	b.n	800199c <escape_process+0x114>
		} else if (ch == 'C') {
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	2b43      	cmp	r3, #67	; 0x43
 80018d4:	d114      	bne.n	8001900 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e2:	429a      	cmp	r2, r3
 80018e4:	da0a      	bge.n	80018fc <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 80018e6:	2101      	movs	r1, #1
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff fe75 	bl	80015d8 <terminal_move_cursor>
				pThis->cursor++;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e04d      	b.n	800199c <escape_process+0x114>
		} else if (ch == 'D') {
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	2b44      	cmp	r3, #68	; 0x44
 8001904:	d112      	bne.n	800192c <escape_process+0xa4>
			if (pThis->cursor > 0) {
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800190c:	2b00      	cmp	r3, #0
 800190e:	dd0b      	ble.n	8001928 <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff fe5f 	bl	80015d8 <terminal_move_cursor>
				pThis->cursor--;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001920:	1e5a      	subs	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 8001928:	2301      	movs	r3, #1
 800192a:	e037      	b.n	800199c <escape_process+0x114>
		} else if (ch == '7') {
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	2b37      	cmp	r3, #55	; 0x37
 8001930:	d104      	bne.n	800193c <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2202      	movs	r2, #2
 8001936:	701a      	strb	r2, [r3, #0]
			return 0;
 8001938:	2300      	movs	r3, #0
 800193a:	e02f      	b.n	800199c <escape_process+0x114>
		} else if (ch == '8') {
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	2b38      	cmp	r3, #56	; 0x38
 8001940:	d12b      	bne.n	800199a <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2203      	movs	r2, #3
 8001946:	701a      	strb	r2, [r3, #0]
			return 0;
 8001948:	2300      	movs	r3, #0
 800194a:	e027      	b.n	800199c <escape_process+0x114>
		} 
	} else if (ch == '~') {
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	2b7e      	cmp	r3, #126	; 0x7e
 8001950:	d123      	bne.n	800199a <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d108      	bne.n	800196c <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff fe8c 	bl	8001678 <terminal_reset_cursor>
			pThis->cursor = 0;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 8001968:	2301      	movs	r3, #1
 800196a:	e017      	b.n	800199c <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d112      	bne.n	800199a <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	4619      	mov	r1, r3
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff fe27 	bl	80015d8 <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 800199a:	2301      	movs	r3, #1
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	2b32      	cmp	r3, #50	; 0x32
 80019bc:	dc60      	bgt.n	8001a80 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019ca:	4619      	mov	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	440b      	add	r3, r1
 80019d0:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3354      	adds	r3, #84	; 0x54
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor + len,
 80019dc:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019ea:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 80019ec:	461a      	mov	r2, r3
 80019ee:	f00d fcf9 	bl	800f3e4 <memmove>
		for (i = 0; i < len; i++) {
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e025      	b.n	8001a44 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	441a      	add	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	440b      	add	r3, r1
 8001a08:	7811      	ldrb	r1, [r2, #0]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	460a      	mov	r2, r1
 8001a10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4413      	add	r3, r2
 8001a22:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a26:	2b20      	cmp	r3, #32
 8001a28:	d109      	bne.n	8001a3e <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	4413      	add	r3, r2
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3301      	adds	r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	dbd5      	blt.n	80019f8 <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	441a      	add	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdlen += len;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	441a      	add	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4413      	add	r3, r2
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <microrl_insert_text+0xde>
	}
	return false;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	dd31      	ble.n	8001b00 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff fd2b 	bl	80014f8 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3354      	adds	r3, #84	; 0x54
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor-1,
 8001abc:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f00d fc88 	bl	800f3e4 <memmove>
		pThis->cursor--;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ada:	1e5a      	subs	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af8:	1e5a      	subs	r2, r3, #1
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7fe fb24 	bl	8000164 <strlen>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	e019      	b.n	8001b5a <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fb17 	bl	8000164 <strlen>
 8001b36:	4602      	mov	r2, r0
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d20a      	bcs.n	8001b54 <common_len+0x4c>
			shortest = arr[i];
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f7fe fb0a 	bl	8000164 <strlen>
 8001b50:	4603      	mov	r3, r0
 8001b52:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3301      	adds	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1de      	bne.n	8001b26 <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e01f      	b.n	8001bae <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	e012      	b.n	8001b9a <common_len+0x92>
			if (shortest[i] != arr[j][i])
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	440b      	add	r3, r1
 8001b84:	6819      	ldr	r1, [r3, #0]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	440b      	add	r3, r1
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <common_len+0x8c>
				return i;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	e011      	b.n	8001bb8 <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	3301      	adds	r3, #1
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1e5      	bne.n	8001b74 <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	dbdb      	blt.n	8001b6e <common_len+0x66>

	return i;
 8001bb6:	697b      	ldr	r3, [r7, #20]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 8001bc0:	b5b0      	push	{r4, r5, r7, lr}
 8001bc2:	b08c      	sub	sp, #48	; 0x30
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 809c 	beq.w	8001d0c <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bda:	f107 020c 	add.w	r2, r7, #12
 8001bde:	4619      	mov	r1, r3
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff fc31 	bl	8001448 <split>
 8001be6:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d109      	bne.n	8001c10 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 8001bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001c08:	4413      	add	r3, r2
 8001c0a:	4a42      	ldr	r2, [pc, #264]	; (8001d14 <microrl_get_complite+0x154>)
 8001c0c:	f843 2c24 	str.w	r2, [r3, #-36]
	compl_token = pThis->get_completion (status, tkn_arr);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c16:	f107 020c 	add.w	r2, r7, #12
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c1e:	4798      	blx	r3
 8001c20:	6238      	str	r0, [r7, #32]
	if (compl_token[0] != NULL) {
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d071      	beq.n	8001d0e <microrl_get_complite+0x14e>
		int i = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
		int len;

		if (compl_token[1] == NULL) {
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	3304      	adds	r3, #4
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d107      	bne.n	8001c48 <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fa91 	bl	8000164 <strlen>
 8001c42:	4603      	mov	r3, r0
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
 8001c46:	e026      	b.n	8001c96 <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8001c48:	6a38      	ldr	r0, [r7, #32]
 8001c4a:	f7ff ff5d 	bl	8001b08 <common_len>
 8001c4e:	6278      	str	r0, [r7, #36]	; 0x24
			terminal_newline (pThis);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff fc61 	bl	8001518 <terminal_newline>
			while (compl_token [i] != NULL) {
 8001c56:	e011      	b.n	8001c7c <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c60:	0092      	lsls	r2, r2, #2
 8001c62:	6a39      	ldr	r1, [r7, #32]
 8001c64:	440a      	add	r2, r1
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4798      	blx	r3
				pThis->print (" ");
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c72:	4829      	ldr	r0, [pc, #164]	; (8001d18 <microrl_get_complite+0x158>)
 8001c74:	4798      	blx	r3
				i++;
 8001c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c78:	3301      	adds	r3, #1
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
			while (compl_token [i] != NULL) {
 8001c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	6a3a      	ldr	r2, [r7, #32]
 8001c82:	4413      	add	r3, r2
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1e6      	bne.n	8001c58 <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fc44 	bl	8001518 <terminal_newline>
			print_prompt (pThis);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff fc22 	bl	80014da <print_prompt>
		}
		
		if (len) {
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d02b      	beq.n	8001cf4 <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	681c      	ldr	r4, [r3, #0]
 8001ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001caa:	4413      	add	r3, r2
 8001cac:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fa57 	bl	8000164 <strlen>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 8001cba:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fa49 	bl	8000164 <strlen>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4629      	mov	r1, r5
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff fe62 	bl	80019a4 <microrl_insert_text>
			if (compl_token[1] == NULL) 
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d104      	bne.n	8001cf4 <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 8001cea:	2201      	movs	r2, #1
 8001cec:	490a      	ldr	r1, [pc, #40]	; (8001d18 <microrl_get_complite+0x158>)
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff fe58 	bl	80019a4 <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff fcbf 	bl	8001678 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d00:	461a      	mov	r2, r3
 8001d02:	2100      	movs	r1, #0
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fcef 	bl	80016e8 <terminal_print_line>
 8001d0a:	e000      	b.n	8001d0e <microrl_get_complite+0x14e>
		return;
 8001d0c:	bf00      	nop
	} 
}
 8001d0e:	3730      	adds	r7, #48	; 0x30
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bdb0      	pop	{r4, r5, r7, pc}
 8001d14:	0800f538 	.word	0x0800f538
 8001d18:	0800f53c 	.word	0x0800f53c

08001d1c <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fbf7 	bl	8001518 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	dd0a      	ble.n	8001d4a <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	1d18      	adds	r0, r3, #4
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d44:	461a      	mov	r2, r3
 8001d46:	f7ff fa08 	bl	800115a <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d50:	f107 0208 	add.w	r2, r7, #8
 8001d54:	4619      	mov	r1, r3
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff fb76 	bl	8001448 <split>
 8001d5c:	61f8      	str	r0, [r7, #28]
	if (status == -1){
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d64:	d109      	bne.n	8001d7a <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d6c:	4817      	ldr	r0, [pc, #92]	; (8001dcc <new_line_handler+0xb0>)
 8001d6e:	4798      	blx	r3
		pThis->print (ENDL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d76:	4816      	ldr	r0, [pc, #88]	; (8001dd0 <new_line_handler+0xb4>)
 8001d78:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	dd0c      	ble.n	8001d9a <new_line_handler+0x7e>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d007      	beq.n	8001d9a <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d90:	f107 0208 	add.w	r2, r7, #8
 8001d94:	4611      	mov	r1, r2
 8001d96:	69f8      	ldr	r0, [r7, #28]
 8001d98:	4798      	blx	r3
	print_prompt (pThis);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff fb9d 	bl	80014da <print_prompt>
	pThis->cmdlen = 0;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3354      	adds	r3, #84	; 0x54
 8001db4:	2233      	movs	r2, #51	; 0x33
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f00d fb2d 	bl	800f418 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8001dc4:	bf00      	nop
 8001dc6:	3720      	adds	r7, #32
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	0800f540 	.word	0x0800f540
 8001dd0:	0800f520 	.word	0x0800f520

08001dd4 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	785b      	ldrb	r3, [r3, #1]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00d      	beq.n	8001e02 <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	4619      	mov	r1, r3
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff fd4b 	bl	8001888 <escape_process>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 81e3 	beq.w	80021c0 <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 8001e00:	e1de      	b.n	80021c0 <microrl_insert_char+0x3ec>
		switch (ch) {
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	2b7e      	cmp	r3, #126	; 0x7e
 8001e08:	f200 81af 	bhi.w	800216a <microrl_insert_char+0x396>
 8001e0c:	a201      	add	r2, pc, #4	; (adr r2, 8001e14 <microrl_insert_char+0x40>)
 8001e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e12:	bf00      	nop
 8001e14:	080020a7 	.word	0x080020a7
 8001e18:	080020df 	.word	0x080020df
 8001e1c:	08002157 	.word	0x08002157
 8001e20:	0800216b 	.word	0x0800216b
 8001e24:	08002083 	.word	0x08002083
 8001e28:	080020b7 	.word	0x080020b7
 8001e2c:	0800216b 	.word	0x0800216b
 8001e30:	08002117 	.word	0x08002117
 8001e34:	08002039 	.word	0x08002039
 8001e38:	08002011 	.word	0x08002011
 8001e3c:	0800206b 	.word	0x0800206b
 8001e40:	0800216b 	.word	0x0800216b
 8001e44:	08002011 	.word	0x08002011
 8001e48:	0800210d 	.word	0x0800210d
 8001e4c:	0800216b 	.word	0x0800216b
 8001e50:	08002103 	.word	0x08002103
 8001e54:	0800216b 	.word	0x0800216b
 8001e58:	08002133 	.word	0x08002133
 8001e5c:	0800216b 	.word	0x0800216b
 8001e60:	0800216b 	.word	0x0800216b
 8001e64:	0800204f 	.word	0x0800204f
 8001e68:	0800216b 	.word	0x0800216b
 8001e6c:	0800216b 	.word	0x0800216b
 8001e70:	0800216b 	.word	0x0800216b
 8001e74:	0800216b 	.word	0x0800216b
 8001e78:	0800216b 	.word	0x0800216b
 8001e7c:	08002041 	.word	0x08002041
 8001e80:	0800216b 	.word	0x0800216b
 8001e84:	0800216b 	.word	0x0800216b
 8001e88:	0800216b 	.word	0x0800216b
 8001e8c:	0800216b 	.word	0x0800216b
 8001e90:	0800216b 	.word	0x0800216b
 8001e94:	0800216b 	.word	0x0800216b
 8001e98:	0800216b 	.word	0x0800216b
 8001e9c:	0800216b 	.word	0x0800216b
 8001ea0:	0800216b 	.word	0x0800216b
 8001ea4:	0800216b 	.word	0x0800216b
 8001ea8:	0800216b 	.word	0x0800216b
 8001eac:	0800216b 	.word	0x0800216b
 8001eb0:	0800216b 	.word	0x0800216b
 8001eb4:	0800216b 	.word	0x0800216b
 8001eb8:	0800216b 	.word	0x0800216b
 8001ebc:	0800216b 	.word	0x0800216b
 8001ec0:	0800216b 	.word	0x0800216b
 8001ec4:	0800216b 	.word	0x0800216b
 8001ec8:	0800216b 	.word	0x0800216b
 8001ecc:	0800216b 	.word	0x0800216b
 8001ed0:	0800216b 	.word	0x0800216b
 8001ed4:	0800216b 	.word	0x0800216b
 8001ed8:	0800216b 	.word	0x0800216b
 8001edc:	0800216b 	.word	0x0800216b
 8001ee0:	0800216b 	.word	0x0800216b
 8001ee4:	0800216b 	.word	0x0800216b
 8001ee8:	0800216b 	.word	0x0800216b
 8001eec:	0800216b 	.word	0x0800216b
 8001ef0:	0800216b 	.word	0x0800216b
 8001ef4:	0800216b 	.word	0x0800216b
 8001ef8:	0800216b 	.word	0x0800216b
 8001efc:	0800216b 	.word	0x0800216b
 8001f00:	0800216b 	.word	0x0800216b
 8001f04:	0800216b 	.word	0x0800216b
 8001f08:	0800216b 	.word	0x0800216b
 8001f0c:	0800216b 	.word	0x0800216b
 8001f10:	0800216b 	.word	0x0800216b
 8001f14:	0800216b 	.word	0x0800216b
 8001f18:	0800216b 	.word	0x0800216b
 8001f1c:	0800216b 	.word	0x0800216b
 8001f20:	0800216b 	.word	0x0800216b
 8001f24:	0800216b 	.word	0x0800216b
 8001f28:	0800216b 	.word	0x0800216b
 8001f2c:	0800216b 	.word	0x0800216b
 8001f30:	0800216b 	.word	0x0800216b
 8001f34:	0800216b 	.word	0x0800216b
 8001f38:	0800216b 	.word	0x0800216b
 8001f3c:	0800216b 	.word	0x0800216b
 8001f40:	0800216b 	.word	0x0800216b
 8001f44:	0800216b 	.word	0x0800216b
 8001f48:	0800216b 	.word	0x0800216b
 8001f4c:	0800216b 	.word	0x0800216b
 8001f50:	0800216b 	.word	0x0800216b
 8001f54:	0800216b 	.word	0x0800216b
 8001f58:	0800216b 	.word	0x0800216b
 8001f5c:	0800216b 	.word	0x0800216b
 8001f60:	0800216b 	.word	0x0800216b
 8001f64:	0800216b 	.word	0x0800216b
 8001f68:	0800216b 	.word	0x0800216b
 8001f6c:	0800216b 	.word	0x0800216b
 8001f70:	0800216b 	.word	0x0800216b
 8001f74:	0800216b 	.word	0x0800216b
 8001f78:	0800216b 	.word	0x0800216b
 8001f7c:	0800216b 	.word	0x0800216b
 8001f80:	0800216b 	.word	0x0800216b
 8001f84:	0800216b 	.word	0x0800216b
 8001f88:	0800216b 	.word	0x0800216b
 8001f8c:	0800216b 	.word	0x0800216b
 8001f90:	0800216b 	.word	0x0800216b
 8001f94:	0800216b 	.word	0x0800216b
 8001f98:	0800216b 	.word	0x0800216b
 8001f9c:	0800216b 	.word	0x0800216b
 8001fa0:	0800216b 	.word	0x0800216b
 8001fa4:	0800216b 	.word	0x0800216b
 8001fa8:	0800216b 	.word	0x0800216b
 8001fac:	0800216b 	.word	0x0800216b
 8001fb0:	0800216b 	.word	0x0800216b
 8001fb4:	0800216b 	.word	0x0800216b
 8001fb8:	0800216b 	.word	0x0800216b
 8001fbc:	0800216b 	.word	0x0800216b
 8001fc0:	0800216b 	.word	0x0800216b
 8001fc4:	0800216b 	.word	0x0800216b
 8001fc8:	0800216b 	.word	0x0800216b
 8001fcc:	0800216b 	.word	0x0800216b
 8001fd0:	0800216b 	.word	0x0800216b
 8001fd4:	0800216b 	.word	0x0800216b
 8001fd8:	0800216b 	.word	0x0800216b
 8001fdc:	0800216b 	.word	0x0800216b
 8001fe0:	0800216b 	.word	0x0800216b
 8001fe4:	0800216b 	.word	0x0800216b
 8001fe8:	0800216b 	.word	0x0800216b
 8001fec:	0800216b 	.word	0x0800216b
 8001ff0:	0800216b 	.word	0x0800216b
 8001ff4:	0800216b 	.word	0x0800216b
 8001ff8:	0800216b 	.word	0x0800216b
 8001ffc:	0800216b 	.word	0x0800216b
 8002000:	0800216b 	.word	0x0800216b
 8002004:	0800216b 	.word	0x0800216b
 8002008:	0800216b 	.word	0x0800216b
 800200c:	08002117 	.word	0x08002117
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	789b      	ldrb	r3, [r3, #2]
 8002014:	461a      	mov	r2, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2b0d      	cmp	r3, #13
 800201a:	d101      	bne.n	8002020 <microrl_insert_char+0x24c>
 800201c:	230a      	movs	r3, #10
 800201e:	e000      	b.n	8002022 <microrl_insert_char+0x24e>
 8002020:	230d      	movs	r3, #13
 8002022:	4293      	cmp	r3, r2
 8002024:	f000 80c1 	beq.w	80021aa <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff fe73 	bl	8001d1c <new_line_handler>
				break;
 8002036:	e0c3      	b.n	80021c0 <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff fdc1 	bl	8001bc0 <microrl_get_complite>
			break;
 800203e:	e0bf      	b.n	80021c0 <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	705a      	strb	r2, [r3, #1]
			break;
 8002046:	e0bb      	b.n	80021c0 <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff fd1e 	bl	8001a8a <microrl_backspace>
					while (pThis->cursor > 0) {
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002054:	2b00      	cmp	r3, #0
 8002056:	dcf7      	bgt.n	8002048 <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800205e:	461a      	mov	r2, r3
 8002060:	2100      	movs	r1, #0
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff fb40 	bl	80016e8 <terminal_print_line>
			break;
 8002068:	e0aa      	b.n	80021c0 <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002070:	4855      	ldr	r0, [pc, #340]	; (80021c8 <microrl_insert_char+0x3f4>)
 8002072:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8002080:	e09e      	b.n	80021c0 <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	4619      	mov	r1, r3
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff faa0 	bl	80015d8 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 80020a4:	e08c      	b.n	80021c0 <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff fae6 	bl	8001678 <terminal_reset_cursor>
				pThis->cursor = 0;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 80020b4:	e084      	b.n	80021c0 <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c2:	429a      	cmp	r2, r3
 80020c4:	da73      	bge.n	80021ae <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 80020c6:	2101      	movs	r1, #1
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff fa85 	bl	80015d8 <terminal_move_cursor>
				pThis->cursor++;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 80020dc:	e067      	b.n	80021ae <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d064      	beq.n	80021b2 <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 80020e8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff fa73 	bl	80015d8 <terminal_move_cursor>
				pThis->cursor--;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020f8:	1e5a      	subs	r2, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8002100:	e057      	b.n	80021b2 <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 8002102:	2100      	movs	r1, #0
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff fb8f 	bl	8001828 <hist_search>
			break;
 800210a:	e059      	b.n	80021c0 <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 800210c:	2101      	movs	r1, #1
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff fb8a 	bl	8001828 <hist_search>
			break;
 8002114:	e054      	b.n	80021c0 <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff fcb7 	bl	8001a8a <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002128:	461a      	mov	r2, r3
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff fadc 	bl	80016e8 <terminal_print_line>
			break;
 8002130:	e046      	b.n	80021c0 <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff f9f0 	bl	8001518 <terminal_newline>
				print_prompt (pThis);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff f9ce 	bl	80014da <print_prompt>
				terminal_reset_cursor (pThis);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff fa9a 	bl	8001678 <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800214a:	461a      	mov	r2, r3
 800214c:	2100      	movs	r1, #0
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff faca 	bl	80016e8 <terminal_print_line>
			break;
 8002154:	e034      	b.n	80021c0 <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d02a      	beq.n	80021b6 <microrl_insert_char+0x3e2>
				pThis->sigint();
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002166:	4798      	blx	r3
			break;
 8002168:	e025      	b.n	80021b6 <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b20      	cmp	r3, #32
 800216e:	d104      	bne.n	800217a <microrl_insert_char+0x3a6>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002176:	2b00      	cmp	r3, #0
 8002178:	d01f      	beq.n	80021ba <microrl_insert_char+0x3e6>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b1f      	cmp	r3, #31
 800217e:	dd1c      	ble.n	80021ba <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8002180:	463b      	mov	r3, r7
 8002182:	2201      	movs	r2, #1
 8002184:	4619      	mov	r1, r3
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff fc0c 	bl	80019a4 <microrl_insert_text>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d015      	beq.n	80021be <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002198:	1e59      	subs	r1, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021a0:	461a      	mov	r2, r3
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff faa0 	bl	80016e8 <terminal_print_line>
			break;
 80021a8:	e009      	b.n	80021be <microrl_insert_char+0x3ea>
					break;
 80021aa:	bf00      	nop
 80021ac:	e008      	b.n	80021c0 <microrl_insert_char+0x3ec>
			break;
 80021ae:	bf00      	nop
 80021b0:	e006      	b.n	80021c0 <microrl_insert_char+0x3ec>
			break;
 80021b2:	bf00      	nop
 80021b4:	e004      	b.n	80021c0 <microrl_insert_char+0x3ec>
			break;
 80021b6:	bf00      	nop
 80021b8:	e002      	b.n	80021c0 <microrl_insert_char+0x3ec>
	}
 80021ba:	bf00      	nop
 80021bc:	e000      	b.n	80021c0 <microrl_insert_char+0x3ec>
			break;
 80021be:	bf00      	nop
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	0800f534 	.word	0x0800f534

080021cc <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <microrl_print_char+0x20>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	79fa      	ldrb	r2, [r7, #7]
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fdf8 	bl	8001dd4 <microrl_insert_char>
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000008 	.word	0x20000008

080021f0 <print>:

void print (const char * str)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 80021f8:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <print+0x84>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	f083 0301 	eor.w	r3, r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <print+0x1e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b1b      	cmp	r3, #27
 800220c:	d02b      	beq.n	8002266 <print+0x76>
		return;
	if (!CDC_is_ready)
 800220e:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <print+0x88>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	f083 0301 	eor.w	r3, r3, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d126      	bne.n	800226a <print+0x7a>
		return;
	uint16_t len = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 8002220:	89fb      	ldrh	r3, [r7, #14]
 8002222:	3301      	adds	r3, #1
 8002224:	81fb      	strh	r3, [r7, #14]
 8002226:	89fb      	ldrh	r3, [r7, #14]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	4413      	add	r3, r2
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f6      	bne.n	8002220 <print+0x30>
	uint32_t timeout = HAL_GetTick();
 8002232:	f000 ff1f 	bl	8003074 <HAL_GetTick>
 8002236:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8002238:	e006      	b.n	8002248 <print+0x58>
		if (HAL_GetTick() - timeout >= 5)
 800223a:	f000 ff1b 	bl	8003074 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b04      	cmp	r3, #4
 8002246:	d807      	bhi.n	8002258 <print+0x68>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <print+0x8c>)
 800224a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800224e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f1      	bne.n	800223a <print+0x4a>
 8002256:	e000      	b.n	800225a <print+0x6a>
			break;
 8002258:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 800225a:	89fb      	ldrh	r3, [r7, #14]
 800225c:	4619      	mov	r1, r3
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f00c fcb0 	bl	800ebc4 <CDC_Transmit_FS>
 8002264:	e002      	b.n	800226c <print+0x7c>
		return;
 8002266:	bf00      	nop
 8002268:	e000      	b.n	800226c <print+0x7c>
		return;
 800226a:	bf00      	nop
}
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	2000000c 	.word	0x2000000c
 8002278:	200001b1 	.word	0x200001b1
 800227c:	2000270c 	.word	0x2000270c

08002280 <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	e010      	b.n	80022b2 <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 8002290:	490c      	ldr	r1, [pc, #48]	; (80022c4 <find_color_by_name+0x44>)
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	440b      	add	r3, r1
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	79fa      	ldrb	r2, [r7, #7]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d101      	bne.n	80022ac <find_color_by_name+0x2c>
		{
			return i;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	e006      	b.n	80022ba <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3301      	adds	r3, #1
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b10      	cmp	r3, #16
 80022b6:	d9eb      	bls.n	8002290 <find_color_by_name+0x10>
		}
	}
	return 0;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	0800fb94 	.word	0x0800fb94

080022c8 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff ffd2 	bl	8002280 <find_color_by_name>
 80022dc:	4602      	mov	r2, r0
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	4a08      	ldr	r2, [pc, #32]	; (800230c <print_color+0x44>)
 80022ea:	4413      	add	r3, r2
 80022ec:	3301      	adds	r3, #1
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff7e 	bl	80021f0 <print>
	print(str);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff7b 	bl	80021f0 <print>
	print(COLOR_NC);
 80022fa:	4805      	ldr	r0, [pc, #20]	; (8002310 <print_color+0x48>)
 80022fc:	f7ff ff78 	bl	80021f0 <print>
	return 0;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	0800fb94 	.word	0x0800fb94
 8002310:	0800f558 	.word	0x0800f558

08002314 <str_length>:

int str_length(const char * str)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8002320:	e002      	b.n	8002328 <str_length+0x14>
		i++;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3301      	adds	r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f6      	bne.n	8002322 <str_length+0xe>
	return i;
 8002334:	68fb      	ldr	r3, [r7, #12]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <print_help>:


int print_help(int argc, const char * const * argv)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
	print(_VER);
 800234a:	4858      	ldr	r0, [pc, #352]	; (80024ac <print_help+0x16c>)
 800234c:	f7ff ff50 	bl	80021f0 <print>
	print(ENDL);
 8002350:	4857      	ldr	r0, [pc, #348]	; (80024b0 <print_help+0x170>)
 8002352:	f7ff ff4d 	bl	80021f0 <print>
	print ("Use ");
 8002356:	4857      	ldr	r0, [pc, #348]	; (80024b4 <print_help+0x174>)
 8002358:	f7ff ff4a 	bl	80021f0 <print>
	print_color("TAB", C_GREEN);
 800235c:	2105      	movs	r1, #5
 800235e:	4856      	ldr	r0, [pc, #344]	; (80024b8 <print_help+0x178>)
 8002360:	f7ff ffb2 	bl	80022c8 <print_color>
	print(" key for completion");
 8002364:	4855      	ldr	r0, [pc, #340]	; (80024bc <print_help+0x17c>)
 8002366:	f7ff ff43 	bl	80021f0 <print>
	print (ENDL);
 800236a:	4851      	ldr	r0, [pc, #324]	; (80024b0 <print_help+0x170>)
 800236c:	f7ff ff40 	bl	80021f0 <print>
	print ("Available commands:");
 8002370:	4853      	ldr	r0, [pc, #332]	; (80024c0 <print_help+0x180>)
 8002372:	f7ff ff3d 	bl	80021f0 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	e08a      	b.n	8002492 <print_help+0x152>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 800237c:	4a51      	ldr	r2, [pc, #324]	; (80024c4 <print_help+0x184>)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	019b      	lsls	r3, r3, #6
 8002382:	4413      	add	r3, r2
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238a:	d11b      	bne.n	80023c4 <print_help+0x84>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3b01      	subs	r3, #1
 8002390:	4a4c      	ldr	r2, [pc, #304]	; (80024c4 <print_help+0x184>)
 8002392:	019b      	lsls	r3, r3, #6
 8002394:	4413      	add	r3, r2
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239c:	d004      	beq.n	80023a8 <print_help+0x68>
				print_color(" aka ", C_L_PURPLE);
 800239e:	210c      	movs	r1, #12
 80023a0:	4849      	ldr	r0, [pc, #292]	; (80024c8 <print_help+0x188>)
 80023a2:	f7ff ff91 	bl	80022c8 <print_color>
 80023a6:	e003      	b.n	80023b0 <print_help+0x70>
			else
				print_color("/", C_L_PURPLE);
 80023a8:	210c      	movs	r1, #12
 80023aa:	4848      	ldr	r0, [pc, #288]	; (80024cc <print_help+0x18c>)
 80023ac:	f7ff ff8c 	bl	80022c8 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	019b      	lsls	r3, r3, #6
 80023b4:	4a43      	ldr	r2, [pc, #268]	; (80024c4 <print_help+0x184>)
 80023b6:	4413      	add	r3, r2
 80023b8:	3304      	adds	r3, #4
 80023ba:	210b      	movs	r1, #11
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff83 	bl	80022c8 <print_color>
 80023c2:	e063      	b.n	800248c <print_help+0x14c>
		}
		else
		{
			print(ENDL);
 80023c4:	483a      	ldr	r0, [pc, #232]	; (80024b0 <print_help+0x170>)
 80023c6:	f7ff ff13 	bl	80021f0 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 80023ca:	f06f 0303 	mvn.w	r3, #3
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	e005      	b.n	80023de <print_help+0x9e>
				print(" ");
 80023d2:	483f      	ldr	r0, [pc, #252]	; (80024d0 <print_help+0x190>)
 80023d4:	f7ff ff0c 	bl	80021f0 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	3301      	adds	r3, #1
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	4a39      	ldr	r2, [pc, #228]	; (80024c4 <print_help+0x184>)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	019b      	lsls	r3, r3, #6
 80023e4:	4413      	add	r3, r2
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	dbf1      	blt.n	80023d2 <print_help+0x92>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	019b      	lsls	r3, r3, #6
 80023f2:	4a34      	ldr	r2, [pc, #208]	; (80024c4 <print_help+0x184>)
 80023f4:	4413      	add	r3, r2
 80023f6:	1d1a      	adds	r2, r3, #4
 80023f8:	4932      	ldr	r1, [pc, #200]	; (80024c4 <print_help+0x184>)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	019b      	lsls	r3, r3, #6
 80023fe:	440b      	add	r3, r1
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4934      	ldr	r1, [pc, #208]	; (80024d4 <print_help+0x194>)
 8002404:	5ccb      	ldrb	r3, [r1, r3]
 8002406:	4619      	mov	r1, r3
 8002408:	4610      	mov	r0, r2
 800240a:	f7ff ff5d 	bl	80022c8 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	e005      	b.n	8002420 <print_help+0xe0>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 8002414:	482e      	ldr	r0, [pc, #184]	; (80024d0 <print_help+0x190>)
 8002416:	f7ff feeb 	bl	80021f0 <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	3301      	adds	r3, #1
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	4a28      	ldr	r2, [pc, #160]	; (80024c4 <print_help+0x184>)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	019b      	lsls	r3, r3, #6
 8002426:	4413      	add	r3, r2
 8002428:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 800242a:	f1c3 040c 	rsb	r4, r3, #12
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	019b      	lsls	r3, r3, #6
 8002432:	4a24      	ldr	r2, [pc, #144]	; (80024c4 <print_help+0x184>)
 8002434:	4413      	add	r3, r2
 8002436:	3304      	adds	r3, #4
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff6b 	bl	8002314 <str_length>
 800243e:	4603      	mov	r3, r0
 8002440:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	429a      	cmp	r2, r3
 8002446:	dbe5      	blt.n	8002414 <print_help+0xd4>
			switch (microrl_actions[i].level){
 8002448:	4a1e      	ldr	r2, [pc, #120]	; (80024c4 <print_help+0x184>)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	019b      	lsls	r3, r3, #6
 800244e:	4413      	add	r3, r2
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <print_help+0x11c>
 8002456:	2b01      	cmp	r3, #1
 8002458:	d004      	beq.n	8002464 <print_help+0x124>
 800245a:	e007      	b.n	800246c <print_help+0x12c>
			case 0:
				print ("-");
 800245c:	481e      	ldr	r0, [pc, #120]	; (80024d8 <print_help+0x198>)
 800245e:	f7ff fec7 	bl	80021f0 <print>
				break;
 8002462:	e007      	b.n	8002474 <print_help+0x134>
			case 1:
				print ("^");
 8002464:	481d      	ldr	r0, [pc, #116]	; (80024dc <print_help+0x19c>)
 8002466:	f7ff fec3 	bl	80021f0 <print>
				break;
 800246a:	e003      	b.n	8002474 <print_help+0x134>
			default:
				print ("#");
 800246c:	481c      	ldr	r0, [pc, #112]	; (80024e0 <print_help+0x1a0>)
 800246e:	f7ff febf 	bl	80021f0 <print>
				break;
 8002472:	bf00      	nop
			}
			print (" ");
 8002474:	4816      	ldr	r0, [pc, #88]	; (80024d0 <print_help+0x190>)
 8002476:	f7ff febb 	bl	80021f0 <print>
			print (microrl_actions[i].help_msg);
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	019b      	lsls	r3, r3, #6
 800247e:	3308      	adds	r3, #8
 8002480:	4a10      	ldr	r2, [pc, #64]	; (80024c4 <print_help+0x184>)
 8002482:	4413      	add	r3, r2
 8002484:	3306      	adds	r3, #6
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff feb2 	bl	80021f0 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	3301      	adds	r3, #1
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2b0e      	cmp	r3, #14
 8002496:	f67f af71 	bls.w	800237c <print_help+0x3c>
		}
	}
	print(ENDL);
 800249a:	4805      	ldr	r0, [pc, #20]	; (80024b0 <print_help+0x170>)
 800249c:	f7ff fea8 	bl	80021f0 <print>
	return 0;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	371c      	adds	r7, #28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd90      	pop	{r4, r7, pc}
 80024aa:	bf00      	nop
 80024ac:	0800f560 	.word	0x0800f560
 80024b0:	0800f570 	.word	0x0800f570
 80024b4:	0800f574 	.word	0x0800f574
 80024b8:	0800f57c 	.word	0x0800f57c
 80024bc:	0800f580 	.word	0x0800f580
 80024c0:	0800f594 	.word	0x0800f594
 80024c4:	0800f7d4 	.word	0x0800f7d4
 80024c8:	0800f5a8 	.word	0x0800f5a8
 80024cc:	0800f5b0 	.word	0x0800f5b0
 80024d0:	0800f5b4 	.word	0x0800f5b4
 80024d4:	0800fc50 	.word	0x0800fc50
 80024d8:	0800f5b8 	.word	0x0800f5b8
 80024dc:	0800f5bc 	.word	0x0800f5bc
 80024e0:	0800f5c0 	.word	0x0800f5c0

080024e4 <execute>:



int execute (int argc, const char * const * argv)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	; 0x28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
//	print_help(argc, argv);
//	return 0;
	int (*func)   (int argc, const char * const * argv ) = NULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 80024fa:	2300      	movs	r3, #0
 80024fc:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	e050      	b.n	80025a6 <execute+0xc2>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	e03f      	b.n	800258a <execute+0xa6>
		{
			tokens_found = false;
 800250a:	2300      	movs	r3, #0
 800250c:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 800250e:	4a52      	ldr	r2, [pc, #328]	; (8002658 <execute+0x174>)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	019b      	lsls	r3, r3, #6
 8002514:	4413      	add	r3, r2
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d001      	beq.n	8002526 <execute+0x42>
				synonym_level = current_level; // save the synonym level
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d003      	beq.n	8002536 <execute+0x52>
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	429a      	cmp	r2, r3
 8002534:	db2d      	blt.n	8002592 <execute+0xae>
				break;
			if (current_level == i)
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	429a      	cmp	r2, r3
 800253c:	d101      	bne.n	8002542 <execute+0x5e>
				last_main_synonym = n;
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	4413      	add	r3, r2
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	019b      	lsls	r3, r3, #6
 8002550:	4941      	ldr	r1, [pc, #260]	; (8002658 <execute+0x174>)
 8002552:	440b      	add	r3, r1
 8002554:	3304      	adds	r3, #4
 8002556:	4619      	mov	r1, r3
 8002558:	4610      	mov	r0, r2
 800255a:	f7fd fdf9 	bl	8000150 <strcmp>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10f      	bne.n	8002584 <execute+0xa0>
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	429a      	cmp	r2, r3
 800256a:	d10b      	bne.n	8002584 <execute+0xa0>
					(i == synonym_level))
			{
				tokens_found = true;
 800256c:	2301      	movs	r3, #1
 800256e:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	623a      	str	r2, [r7, #32]
 8002576:	4a38      	ldr	r2, [pc, #224]	; (8002658 <execute+0x174>)
 8002578:	019b      	lsls	r3, r3, #6
 800257a:	4413      	add	r3, r2
 800257c:	333c      	adds	r3, #60	; 0x3c
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8002582:	e007      	b.n	8002594 <execute+0xb0>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	3301      	adds	r3, #1
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	2b0e      	cmp	r3, #14
 800258e:	d9bc      	bls.n	800250a <execute+0x26>
 8002590:	e000      	b.n	8002594 <execute+0xb0>
				break;
 8002592:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 8002594:	7efb      	ldrb	r3, [r7, #27]
 8002596:	f083 0301 	eor.w	r3, r3, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d107      	bne.n	80025b0 <execute+0xcc>
	for (int i = 0; i < argc; i++)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3301      	adds	r3, #1
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	dbaa      	blt.n	8002504 <execute+0x20>
 80025ae:	e000      	b.n	80025b2 <execute+0xce>
			break;
 80025b0:	bf00      	nop
	}

	if (func != NULL)
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <execute+0xe0>
	{
		return func(argc, argv); // function found
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	6839      	ldr	r1, [r7, #0]
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	4798      	blx	r3
 80025c0:	4603      	mov	r3, r0
 80025c2:	e045      	b.n	8002650 <execute+0x16c>
	} else if (tokens_found)
 80025c4:	7efb      	ldrb	r3, [r7, #27]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d021      	beq.n	800260e <execute+0x12a>
	{
		print_color ("command: '", C_L_RED);
 80025ca:	210a      	movs	r1, #10
 80025cc:	4823      	ldr	r0, [pc, #140]	; (800265c <execute+0x178>)
 80025ce:	f7ff fe7b 	bl	80022c8 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	210a      	movs	r1, #10
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fe75 	bl	80022c8 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 80025de:	210a      	movs	r1, #10
 80025e0:	481f      	ldr	r0, [pc, #124]	; (8002660 <execute+0x17c>)
 80025e2:	f7ff fe71 	bl	80022c8 <print_color>
		print(ENDL);
 80025e6:	481f      	ldr	r0, [pc, #124]	; (8002664 <execute+0x180>)
 80025e8:	f7ff fe02 	bl	80021f0 <print>
		print_color ("use '", C_NC);
 80025ec:	2100      	movs	r1, #0
 80025ee:	481e      	ldr	r0, [pc, #120]	; (8002668 <execute+0x184>)
 80025f0:	f7ff fe6a 	bl	80022c8 <print_color>
		print_color ("?", C_GREEN);
 80025f4:	2105      	movs	r1, #5
 80025f6:	481d      	ldr	r0, [pc, #116]	; (800266c <execute+0x188>)
 80025f8:	f7ff fe66 	bl	80022c8 <print_color>
		print_color ("' for help", C_NC);
 80025fc:	2100      	movs	r1, #0
 80025fe:	481c      	ldr	r0, [pc, #112]	; (8002670 <execute+0x18c>)
 8002600:	f7ff fe62 	bl	80022c8 <print_color>
		print (ENDL);
 8002604:	4817      	ldr	r0, [pc, #92]	; (8002664 <execute+0x180>)
 8002606:	f7ff fdf3 	bl	80021f0 <print>
		return 1;
 800260a:	2301      	movs	r3, #1
 800260c:	e020      	b.n	8002650 <execute+0x16c>
	}
	else
	{
		print_color ("command: '", C_RED);
 800260e:	2109      	movs	r1, #9
 8002610:	4812      	ldr	r0, [pc, #72]	; (800265c <execute+0x178>)
 8002612:	f7ff fe59 	bl	80022c8 <print_color>
		print_color ((char*)argv[0], C_RED);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2109      	movs	r1, #9
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fe53 	bl	80022c8 <print_color>
		print_color ("' not found", C_RED);
 8002622:	2109      	movs	r1, #9
 8002624:	4813      	ldr	r0, [pc, #76]	; (8002674 <execute+0x190>)
 8002626:	f7ff fe4f 	bl	80022c8 <print_color>
		print(ENDL);
 800262a:	480e      	ldr	r0, [pc, #56]	; (8002664 <execute+0x180>)
 800262c:	f7ff fde0 	bl	80021f0 <print>
		print_color ("use '", C_NC);
 8002630:	2100      	movs	r1, #0
 8002632:	480d      	ldr	r0, [pc, #52]	; (8002668 <execute+0x184>)
 8002634:	f7ff fe48 	bl	80022c8 <print_color>
		print_color ("?", C_GREEN);
 8002638:	2105      	movs	r1, #5
 800263a:	480c      	ldr	r0, [pc, #48]	; (800266c <execute+0x188>)
 800263c:	f7ff fe44 	bl	80022c8 <print_color>
		print_color ("' for help", C_NC);
 8002640:	2100      	movs	r1, #0
 8002642:	480b      	ldr	r0, [pc, #44]	; (8002670 <execute+0x18c>)
 8002644:	f7ff fe40 	bl	80022c8 <print_color>
		print (ENDL);
 8002648:	4806      	ldr	r0, [pc, #24]	; (8002664 <execute+0x180>)
 800264a:	f7ff fdd1 	bl	80021f0 <print>
		return 1;
 800264e:	2301      	movs	r3, #1

	}
}
 8002650:	4618      	mov	r0, r3
 8002652:	3728      	adds	r7, #40	; 0x28
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	0800f7d4 	.word	0x0800f7d4
 800265c:	0800f5c4 	.word	0x0800f5c4
 8002660:	0800f5d0 	.word	0x0800f5d0
 8002664:	0800f570 	.word	0x0800f570
 8002668:	0800f5f0 	.word	0x0800f5f0
 800266c:	0800f5f8 	.word	0x0800f5f8
 8002670:	0800f5fc 	.word	0x0800f5fc
 8002674:	0800f608 	.word	0x0800f608

08002678 <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08c      	sub	sp, #48	; 0x30
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
	int j = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 8002686:	4b5b      	ldr	r3, [pc, #364]	; (80027f4 <complet+0x17c>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d11b      	bne.n	80026ca <complet+0x52>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 8002692:	2300      	movs	r3, #0
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28
 8002696:	e014      	b.n	80026c2 <complet+0x4a>
			if (microrl_actions[i].level == 0)
 8002698:	4a57      	ldr	r2, [pc, #348]	; (80027f8 <complet+0x180>)
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	019b      	lsls	r3, r3, #6
 800269e:	4413      	add	r3, r2
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10a      	bne.n	80026bc <complet+0x44>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026ae:	0192      	lsls	r2, r2, #6
 80026b0:	4951      	ldr	r1, [pc, #324]	; (80027f8 <complet+0x180>)
 80026b2:	440a      	add	r2, r1
 80026b4:	3204      	adds	r2, #4
 80026b6:	494f      	ldr	r1, [pc, #316]	; (80027f4 <complet+0x17c>)
 80026b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 80026bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026be:	3301      	adds	r3, #1
 80026c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c4:	2b0e      	cmp	r3, #14
 80026c6:	d9e7      	bls.n	8002698 <complet+0x20>
 80026c8:	e08a      	b.n	80027e0 <complet+0x168>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026d0:	3b01      	subs	r3, #1
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 80026e4:	2300      	movs	r3, #0
 80026e6:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 80026e8:	2300      	movs	r3, #0
 80026ea:	61bb      	str	r3, [r7, #24]
 80026ec:	e072      	b.n	80027d4 <complet+0x15c>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	e061      	b.n	80027b8 <complet+0x140>
			{
				tokens_found = false;
 80026f4:	2300      	movs	r3, #0
 80026f6:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 80026f8:	4a3f      	ldr	r2, [pc, #252]	; (80027f8 <complet+0x180>)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	019b      	lsls	r3, r3, #6
 80026fe:	4413      	add	r3, r2
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270a:	d001      	beq.n	8002710 <complet+0x98>
					synonym_level = current_level; // save the synonym level
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002716:	d003      	beq.n	8002720 <complet+0xa8>
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	429a      	cmp	r2, r3
 800271e:	db4f      	blt.n	80027c0 <complet+0x148>
					break;
				if (current_level == i)
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	429a      	cmp	r2, r3
 8002726:	d101      	bne.n	800272c <complet+0xb4>
					last_main_synonym = n;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3b01      	subs	r3, #1
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	429a      	cmp	r2, r3
 8002734:	d122      	bne.n	800277c <complet+0x104>
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	019b      	lsls	r3, r3, #6
 800273a:	4a2f      	ldr	r2, [pc, #188]	; (80027f8 <complet+0x180>)
 800273c:	4413      	add	r3, r2
 800273e:	3304      	adds	r3, #4
 8002740:	6939      	ldr	r1, [r7, #16]
 8002742:	4618      	mov	r0, r3
 8002744:	f00c fe70 	bl	800f428 <strstr>
 8002748:	4602      	mov	r2, r0
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	019b      	lsls	r3, r3, #6
 800274e:	492a      	ldr	r1, [pc, #168]	; (80027f8 <complet+0x180>)
 8002750:	440b      	add	r3, r1
 8002752:	3304      	adds	r3, #4
 8002754:	429a      	cmp	r2, r3
 8002756:	d111      	bne.n	800277c <complet+0x104>
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	429a      	cmp	r2, r3
 800275e:	d10d      	bne.n	800277c <complet+0x104>
										(i == synonym_level))
				{
					tokens_found = true;
 8002760:	2301      	movs	r3, #1
 8002762:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 8002764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	62fa      	str	r2, [r7, #44]	; 0x2c
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	0192      	lsls	r2, r2, #6
 800276e:	4922      	ldr	r1, [pc, #136]	; (80027f8 <complet+0x180>)
 8002770:	440a      	add	r2, r1
 8002772:	3204      	adds	r2, #4
 8002774:	491f      	ldr	r1, [pc, #124]	; (80027f4 <complet+0x17c>)
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800277a:	e01a      	b.n	80027b2 <complet+0x13a>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	4413      	add	r3, r2
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	019b      	lsls	r3, r3, #6
 800278a:	491b      	ldr	r1, [pc, #108]	; (80027f8 <complet+0x180>)
 800278c:	440b      	add	r3, r1
 800278e:	3304      	adds	r3, #4
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	f7fd fcdc 	bl	8000150 <strcmp>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d109      	bne.n	80027b2 <complet+0x13a>
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d105      	bne.n	80027b2 <complet+0x13a>
				{
					last_main_synonym++;
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	3301      	adds	r3, #1
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 80027ac:	2301      	movs	r3, #1
 80027ae:	77fb      	strb	r3, [r7, #31]
					break;
 80027b0:	e007      	b.n	80027c2 <complet+0x14a>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3301      	adds	r3, #1
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b0e      	cmp	r3, #14
 80027bc:	d99a      	bls.n	80026f4 <complet+0x7c>
 80027be:	e000      	b.n	80027c2 <complet+0x14a>
					break;
 80027c0:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 80027c2:	7ffb      	ldrb	r3, [r7, #31]
 80027c4:	f083 0301 	eor.w	r3, r3, #1
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d107      	bne.n	80027de <complet+0x166>
		for (int i = 0; i < argc; i++)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	3301      	adds	r3, #1
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	429a      	cmp	r2, r3
 80027da:	db88      	blt.n	80026ee <complet+0x76>
 80027dc:	e000      	b.n	80027e0 <complet+0x168>
				break;
 80027de:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <complet+0x17c>)
 80027e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e4:	2100      	movs	r1, #0
 80027e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 80027ea:	4b02      	ldr	r3, [pc, #8]	; (80027f4 <complet+0x17c>)
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3730      	adds	r7, #48	; 0x30
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20002504 	.word	0x20002504
 80027f8:	0800f7d4 	.word	0x0800f7d4

080027fc <sigint>:
#endif


void sigint (void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <sigint+0x48>)
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]


	print (ENDL);
 8002808:	480f      	ldr	r0, [pc, #60]	; (8002848 <sigint+0x4c>)
 800280a:	f7ff fcf1 	bl	80021f0 <print>
	print ("^C catched!");
 800280e:	480f      	ldr	r0, [pc, #60]	; (800284c <sigint+0x50>)
 8002810:	f7ff fcee 	bl	80021f0 <print>
	int i = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 8002818:	e009      	b.n	800282e <sigint+0x32>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 800281a:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <sigint+0x54>)
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	4a08      	ldr	r2, [pc, #32]	; (8002848 <sigint+0x4c>)
 8002826:	5cd3      	ldrb	r3, [r2, r3]
 8002828:	4619      	mov	r1, r3
 800282a:	f7ff fad3 	bl	8001dd4 <microrl_insert_char>
	while (ENTER[i])
 800282e:	4a06      	ldr	r2, [pc, #24]	; (8002848 <sigint+0x4c>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4413      	add	r3, r2
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1ef      	bne.n	800281a <sigint+0x1e>
}
 800283a:	bf00      	nop
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	200001b2 	.word	0x200001b2
 8002848:	0800f570 	.word	0x0800f570
 800284c:	0800f614 	.word	0x0800f614
 8002850:	20000008 	.word	0x20000008

08002854 <init_microrl>:

void init_microrl(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <init_microrl+0x38>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	490c      	ldr	r1, [pc, #48]	; (8002890 <init_microrl+0x3c>)
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe ff7a 	bl	8001758 <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <init_microrl+0x38>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	490a      	ldr	r1, [pc, #40]	; (8002894 <init_microrl+0x40>)
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe ffc0 	bl	80017f0 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <init_microrl+0x38>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4908      	ldr	r1, [pc, #32]	; (8002898 <init_microrl+0x44>)
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe ffac 	bl	80017d4 <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <init_microrl+0x38>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4906      	ldr	r1, [pc, #24]	; (800289c <init_microrl+0x48>)
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe ffc2 	bl	800180c <microrl_set_sigint_callback>
}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000008 	.word	0x20000008
 8002890:	080021f1 	.word	0x080021f1
 8002894:	080024e5 	.word	0x080024e5
 8002898:	08002679 	.word	0x08002679
 800289c:	080027fd 	.word	0x080027fd

080028a0 <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 80028aa:	4805      	ldr	r0, [pc, #20]	; (80028c0 <clear_screen+0x20>)
 80028ac:	f7ff fca0 	bl	80021f0 <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 80028b0:	4804      	ldr	r0, [pc, #16]	; (80028c4 <clear_screen+0x24>)
 80028b2:	f7ff fc9d 	bl	80021f0 <print>
	return 0;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	0800f620 	.word	0x0800f620
 80028c4:	0800f628 	.word	0x0800f628

080028c8 <set_CDC_ready>:


void set_CDC_ready(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
	CDC_is_ready = true;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <set_CDC_ready+0x14>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	200001b1 	.word	0x200001b1

080028e0 <color_toggle>:


int color_toggle 	(int argc, const char * const * argv)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <color_toggle+0x30>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	f083 0301 	eor.w	r3, r3, #1
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf14      	ite	ne
 80028f8:	2301      	movne	r3, #1
 80028fa:	2300      	moveq	r3, #0
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	4b04      	ldr	r3, [pc, #16]	; (8002910 <color_toggle+0x30>)
 8002900:	701a      	strb	r2, [r3, #0]
	return 0;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	2000000c 	.word	0x2000000c

08002914 <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
	color_out = 1;
 800291e:	4b07      	ldr	r3, [pc, #28]	; (800293c <color_on+0x28>)
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 8002924:	2105      	movs	r1, #5
 8002926:	4806      	ldr	r0, [pc, #24]	; (8002940 <color_on+0x2c>)
 8002928:	f7ff fcce 	bl	80022c8 <print_color>
	print(ENDL);
 800292c:	4805      	ldr	r0, [pc, #20]	; (8002944 <color_on+0x30>)
 800292e:	f7ff fc5f 	bl	80021f0 <print>
	return 0;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	2000000c 	.word	0x2000000c
 8002940:	0800f62c 	.word	0x0800f62c
 8002944:	0800f570 	.word	0x0800f570

08002948 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
	color_out = 0;
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <color_off+0x28>)
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 8002958:	4806      	ldr	r0, [pc, #24]	; (8002974 <color_off+0x2c>)
 800295a:	f7ff fc49 	bl	80021f0 <print>
	print(ENDL);
 800295e:	4806      	ldr	r0, [pc, #24]	; (8002978 <color_off+0x30>)
 8002960:	f7ff fc46 	bl	80021f0 <print>
	return 0;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	2000000c 	.word	0x2000000c
 8002974:	0800f640 	.word	0x0800f640
 8002978:	0800f570 	.word	0x0800f570

0800297c <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
	if (color_out)
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <color_show+0x34>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d004      	beq.n	8002998 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 800298e:	2105      	movs	r1, #5
 8002990:	4808      	ldr	r0, [pc, #32]	; (80029b4 <color_show+0x38>)
 8002992:	f7ff fc99 	bl	80022c8 <print_color>
 8002996:	e002      	b.n	800299e <color_show+0x22>
	else
		print ("Color output is OFF");
 8002998:	4807      	ldr	r0, [pc, #28]	; (80029b8 <color_show+0x3c>)
 800299a:	f7ff fc29 	bl	80021f0 <print>
	print(ENDL);
 800299e:	4807      	ldr	r0, [pc, #28]	; (80029bc <color_show+0x40>)
 80029a0:	f7ff fc26 	bl	80021f0 <print>
	return 0;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	2000000c 	.word	0x2000000c
 80029b4:	0800f62c 	.word	0x0800f62c
 80029b8:	0800f640 	.word	0x0800f640
 80029bc:	0800f570 	.word	0x0800f570

080029c0 <nema_toggle>:


int nema_toggle 	(int argc, const char * const * argv)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
	nema_out ^= 1;
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <nema_toggle+0x30>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	f083 0301 	eor.w	r3, r3, #1
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <nema_toggle+0x30>)
 80029e0:	701a      	strb	r2, [r3, #0]
	return 0;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	200001b2 	.word	0x200001b2

080029f4 <nema_on>:

int nema_on 		(int argc, const char * const * argv)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
	nema_out = 1;
 80029fe:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <nema_on+0x28>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
	print_color ("NEMA output is ON", C_GREEN);
 8002a04:	2105      	movs	r1, #5
 8002a06:	4806      	ldr	r0, [pc, #24]	; (8002a20 <nema_on+0x2c>)
 8002a08:	f7ff fc5e 	bl	80022c8 <print_color>
	print(ENDL);
 8002a0c:	4805      	ldr	r0, [pc, #20]	; (8002a24 <nema_on+0x30>)
 8002a0e:	f7ff fbef 	bl	80021f0 <print>
	return 0;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	200001b2 	.word	0x200001b2
 8002a20:	0800f654 	.word	0x0800f654
 8002a24:	0800f570 	.word	0x0800f570

08002a28 <nema_off>:

int nema_off 		(int argc, const char * const * argv)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
	nema_out = 0;
 8002a32:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <nema_off+0x28>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]
	print ("NEM output is OFF");
 8002a38:	4806      	ldr	r0, [pc, #24]	; (8002a54 <nema_off+0x2c>)
 8002a3a:	f7ff fbd9 	bl	80021f0 <print>
	print(ENDL);
 8002a3e:	4806      	ldr	r0, [pc, #24]	; (8002a58 <nema_off+0x30>)
 8002a40:	f7ff fbd6 	bl	80021f0 <print>
	return 0;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200001b2 	.word	0x200001b2
 8002a54:	0800f668 	.word	0x0800f668
 8002a58:	0800f570 	.word	0x0800f570

08002a5c <vfd>:

int vfd (int argc, const char * const * argv)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
	for (int i = 1; i < argc; i++)
 8002a66:	2301      	movs	r3, #1
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	e028      	b.n	8002abe <vfd+0x62>
	{
		uint16_t temp = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	81fb      	strh	r3, [r7, #14]
		char * pchar = (char*)argv[i];
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	4413      	add	r3, r2
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	613b      	str	r3, [r7, #16]
		xQueueSendToBack(qVFDHandle, &temp, 100);
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <vfd+0x74>)
 8002a7e:	6818      	ldr	r0, [r3, #0]
 8002a80:	f107 010e 	add.w	r1, r7, #14
 8002a84:	2300      	movs	r3, #0
 8002a86:	2264      	movs	r2, #100	; 0x64
 8002a88:	f009 fa48 	bl	800bf1c <xQueueGenericSend>
		while (*pchar)
 8002a8c:	e010      	b.n	8002ab0 <vfd+0x54>
		{
			temp = get_char(*(pchar++));
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	613a      	str	r2, [r7, #16]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fa32 	bl	8002f00 <get_char>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	81fb      	strh	r3, [r7, #14]
			xQueueSendToBack(qVFDHandle, &temp, 100);
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <vfd+0x74>)
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	f107 010e 	add.w	r1, r7, #14
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2264      	movs	r2, #100	; 0x64
 8002aac:	f009 fa36 	bl	800bf1c <xQueueGenericSend>
		while (*pchar)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1ea      	bne.n	8002a8e <vfd+0x32>
	for (int i = 1; i < argc; i++)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3301      	adds	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	dbd2      	blt.n	8002a6c <vfd+0x10>
		}
	}
	return 0;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20002490 	.word	0x20002490

08002ad4 <show_encoder>:


int show_encoder (int argc, const char * const * argv)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]

	uint32_t buf = encoder_value;
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <show_encoder+0x78>)
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	617b      	str	r3, [r7, #20]
	char str [8];

	for (int i = 0; i < 5; i++)
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	e01d      	b.n	8002b26 <show_encoder+0x52>
	{
		str[4 - i] = buf % 10 + '0';
 8002aea:	6979      	ldr	r1, [r7, #20]
 8002aec:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <show_encoder+0x7c>)
 8002aee:	fba3 2301 	umull	r2, r3, r3, r1
 8002af2:	08da      	lsrs	r2, r3, #3
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	1aca      	subs	r2, r1, r3
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	f1c3 0304 	rsb	r3, r3, #4
 8002b06:	3230      	adds	r2, #48	; 0x30
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	f107 0118 	add.w	r1, r7, #24
 8002b0e:	440b      	add	r3, r1
 8002b10:	f803 2c10 	strb.w	r2, [r3, #-16]
		buf /= 10;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <show_encoder+0x7c>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	08db      	lsrs	r3, r3, #3
 8002b1e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 5; i++)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	3301      	adds	r3, #1
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	ddde      	ble.n	8002aea <show_encoder+0x16>
	}
	str[5] = '\r';
 8002b2c:	230d      	movs	r3, #13
 8002b2e:	737b      	strb	r3, [r7, #13]
	str[6] = '\n';
 8002b30:	230a      	movs	r3, #10
 8002b32:	73bb      	strb	r3, [r7, #14]
	str[7] = '\0';
 8002b34:	2300      	movs	r3, #0
 8002b36:	73fb      	strb	r3, [r7, #15]
	print(str);
 8002b38:	f107 0308 	add.w	r3, r7, #8
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fb57 	bl	80021f0 <print>
	return 0;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	200001ac 	.word	0x200001ac
 8002b50:	cccccccd 	.word	0xcccccccd

08002b54 <get_nema>:


bool get_nema(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
	return nema_out;
 8002b58:	4b02      	ldr	r3, [pc, #8]	; (8002b64 <get_nema+0x10>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	200001b2 	.word	0x200001b2

08002b68 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002b6c:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <MX_SPI2_Init+0x64>)
 8002b6e:	4a18      	ldr	r2, [pc, #96]	; (8002bd0 <MX_SPI2_Init+0x68>)
 8002b70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b72:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <MX_SPI2_Init+0x64>)
 8002b74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b7a:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <MX_SPI2_Init+0x64>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <MX_SPI2_Init+0x64>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002b86:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <MX_SPI2_Init+0x64>)
 8002b88:	2202      	movs	r2, #2
 8002b8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002b8c:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <MX_SPI2_Init+0x64>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b92:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <MX_SPI2_Init+0x64>)
 8002b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <MX_SPI2_Init+0x64>)
 8002b9c:	2218      	movs	r2, #24
 8002b9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8002ba0:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <MX_SPI2_Init+0x64>)
 8002ba2:	2280      	movs	r2, #128	; 0x80
 8002ba4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <MX_SPI2_Init+0x64>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bac:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <MX_SPI2_Init+0x64>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <MX_SPI2_Init+0x64>)
 8002bb4:	220a      	movs	r2, #10
 8002bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002bb8:	4804      	ldr	r0, [pc, #16]	; (8002bcc <MX_SPI2_Init+0x64>)
 8002bba:	f003 fdd9 	bl	8006770 <HAL_SPI_Init>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002bc4:	f7fe fa78 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200025e4 	.word	0x200025e4
 8002bd0:	40003800 	.word	0x40003800

08002bd4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 0310 	add.w	r3, r7, #16
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a1c      	ldr	r2, [pc, #112]	; (8002c60 <HAL_SPI_MspInit+0x8c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d131      	bne.n	8002c58 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <HAL_SPI_MspInit+0x90>)
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <HAL_SPI_MspInit+0x90>)
 8002bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bfe:	61d3      	str	r3, [r2, #28]
 8002c00:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <HAL_SPI_MspInit+0x90>)
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0c:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <HAL_SPI_MspInit+0x90>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	4a14      	ldr	r2, [pc, #80]	; (8002c64 <HAL_SPI_MspInit+0x90>)
 8002c12:	f043 0308 	orr.w	r3, r3, #8
 8002c16:	6193      	str	r3, [r2, #24]
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_SPI_MspInit+0x90>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002c24:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002c28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c32:	f107 0310 	add.w	r3, r7, #16
 8002c36:	4619      	mov	r1, r3
 8002c38:	480b      	ldr	r0, [pc, #44]	; (8002c68 <HAL_SPI_MspInit+0x94>)
 8002c3a:	f000 fbb5 	bl	80033a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4c:	f107 0310 	add.w	r3, r7, #16
 8002c50:	4619      	mov	r1, r3
 8002c52:	4805      	ldr	r0, [pc, #20]	; (8002c68 <HAL_SPI_MspInit+0x94>)
 8002c54:	f000 fba8 	bl	80033a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002c58:	bf00      	nop
 8002c5a:	3720      	adds	r7, #32
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40003800 	.word	0x40003800
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40010c00 	.word	0x40010c00

08002c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c72:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <HAL_MspInit+0x68>)
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	4a17      	ldr	r2, [pc, #92]	; (8002cd4 <HAL_MspInit+0x68>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6193      	str	r3, [r2, #24]
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <HAL_MspInit+0x68>)
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c8a:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_MspInit+0x68>)
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	4a11      	ldr	r2, [pc, #68]	; (8002cd4 <HAL_MspInit+0x68>)
 8002c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c94:	61d3      	str	r3, [r2, #28]
 8002c96:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <HAL_MspInit+0x68>)
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	210f      	movs	r1, #15
 8002ca6:	f06f 0001 	mvn.w	r0, #1
 8002caa:	f000 faa2 	bl	80031f2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cae:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <HAL_MspInit+0x6c>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <HAL_MspInit+0x6c>)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40010000 	.word	0x40010000

08002cdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08c      	sub	sp, #48	; 0x30
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002cec:	2200      	movs	r2, #0
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	2019      	movs	r0, #25
 8002cf2:	f000 fa7e 	bl	80031f2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002cf6:	2019      	movs	r0, #25
 8002cf8:	f000 fa97 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002cfc:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <HAL_InitTick+0x9c>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	4a1d      	ldr	r2, [pc, #116]	; (8002d78 <HAL_InitTick+0x9c>)
 8002d02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d06:	6193      	str	r3, [r2, #24]
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <HAL_InitTick+0x9c>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d14:	f107 0210 	add.w	r2, r7, #16
 8002d18:	f107 0314 	add.w	r3, r7, #20
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f003 fc22 	bl	8006568 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002d24:	f003 fc0c 	bl	8006540 <HAL_RCC_GetPCLK2Freq>
 8002d28:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <HAL_InitTick+0xa0>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	0c9b      	lsrs	r3, r3, #18
 8002d34:	3b01      	subs	r3, #1
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <HAL_InitTick+0xa4>)
 8002d3a:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <HAL_InitTick+0xa8>)
 8002d3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <HAL_InitTick+0xa4>)
 8002d40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d44:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002d46:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <HAL_InitTick+0xa4>)
 8002d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <HAL_InitTick+0xa4>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_InitTick+0xa4>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002d58:	4809      	ldr	r0, [pc, #36]	; (8002d80 <HAL_InitTick+0xa4>)
 8002d5a:	f003 ff6f 	bl	8006c3c <HAL_TIM_Base_Init>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d104      	bne.n	8002d6e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002d64:	4806      	ldr	r0, [pc, #24]	; (8002d80 <HAL_InitTick+0xa4>)
 8002d66:	f003 ffc1 	bl	8006cec <HAL_TIM_Base_Start_IT>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	e000      	b.n	8002d70 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3730      	adds	r7, #48	; 0x30
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	431bde83 	.word	0x431bde83
 8002d80:	2000263c 	.word	0x2000263c
 8002d84:	40012c00 	.word	0x40012c00

08002d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d8c:	e7fe      	b.n	8002d8c <NMI_Handler+0x4>

08002d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d92:	e7fe      	b.n	8002d92 <HardFault_Handler+0x4>

08002d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d98:	e7fe      	b.n	8002d98 <MemManage_Handler+0x4>

08002d9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d9e:	e7fe      	b.n	8002d9e <BusFault_Handler+0x4>

08002da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002da4:	e7fe      	b.n	8002da4 <UsageFault_Handler+0x4>

08002da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002da6:	b480      	push	{r7}
 8002da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr

08002db2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002db6:	2001      	movs	r0, #1
 8002db8:	f000 fcc2 	bl	8003740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002dbc:	bf00      	nop
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002dc4:	4802      	ldr	r0, [pc, #8]	; (8002dd0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002dc6:	f001 fc3d 	bl	8004644 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	200033a0 	.word	0x200033a0

08002dd4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002dd8:	4802      	ldr	r0, [pc, #8]	; (8002de4 <TIM1_UP_IRQHandler+0x10>)
 8002dda:	f003 ffd9 	bl	8006d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	2000263c 	.word	0x2000263c

08002de8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002dec:	4802      	ldr	r0, [pc, #8]	; (8002df8 <USART2_IRQHandler+0x10>)
 8002dee:	f004 f9ed 	bl	80071cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20002684 	.word	0x20002684

08002dfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e0c:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <MX_USART2_UART_Init+0x4c>)
 8002e0e:	4a12      	ldr	r2, [pc, #72]	; (8002e58 <MX_USART2_UART_Init+0x50>)
 8002e10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <MX_USART2_UART_Init+0x4c>)
 8002e14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <MX_USART2_UART_Init+0x4c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <MX_USART2_UART_Init+0x4c>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <MX_USART2_UART_Init+0x4c>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e2c:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <MX_USART2_UART_Init+0x4c>)
 8002e2e:	220c      	movs	r2, #12
 8002e30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e32:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <MX_USART2_UART_Init+0x4c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <MX_USART2_UART_Init+0x4c>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e3e:	4805      	ldr	r0, [pc, #20]	; (8002e54 <MX_USART2_UART_Init+0x4c>)
 8002e40:	f004 f946 	bl	80070d0 <HAL_UART_Init>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e4a:	f7fe f935 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20002684 	.word	0x20002684
 8002e58:	40004400 	.word	0x40004400

08002e5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e64:	f107 0310 	add.w	r3, r7, #16
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1f      	ldr	r2, [pc, #124]	; (8002ef4 <HAL_UART_MspInit+0x98>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d137      	bne.n	8002eec <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <HAL_UART_MspInit+0x9c>)
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <HAL_UART_MspInit+0x9c>)
 8002e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e86:	61d3      	str	r3, [r2, #28]
 8002e88:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <HAL_UART_MspInit+0x9c>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e94:	4b18      	ldr	r3, [pc, #96]	; (8002ef8 <HAL_UART_MspInit+0x9c>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	4a17      	ldr	r2, [pc, #92]	; (8002ef8 <HAL_UART_MspInit+0x9c>)
 8002e9a:	f043 0304 	orr.w	r3, r3, #4
 8002e9e:	6193      	str	r3, [r2, #24]
 8002ea0:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <HAL_UART_MspInit+0x9c>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002eac:	2304      	movs	r3, #4
 8002eae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb8:	f107 0310 	add.w	r3, r7, #16
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	480f      	ldr	r0, [pc, #60]	; (8002efc <HAL_UART_MspInit+0xa0>)
 8002ec0:	f000 fa72 	bl	80033a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ec4:	2308      	movs	r3, #8
 8002ec6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed0:	f107 0310 	add.w	r3, r7, #16
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4809      	ldr	r0, [pc, #36]	; (8002efc <HAL_UART_MspInit+0xa0>)
 8002ed8:	f000 fa66 	bl	80033a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002edc:	2200      	movs	r2, #0
 8002ede:	2105      	movs	r1, #5
 8002ee0:	2026      	movs	r0, #38	; 0x26
 8002ee2:	f000 f986 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ee6:	2026      	movs	r0, #38	; 0x26
 8002ee8:	f000 f99f 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002eec:	bf00      	nop
 8002eee:	3720      	adds	r7, #32
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40004400 	.word	0x40004400
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40010800 	.word	0x40010800

08002f00 <get_char>:
const uint8_t ALPHAS = (sizeof(vfd_alpha)/sizeof(vfd_alpha[0]));
const uint8_t ALPHAR = (sizeof(vfd_alpha_ru)/sizeof(vfd_alpha_ru[0]));
const uint8_t SPECIAL = (sizeof(vfd_special)/sizeof(vfd_special[0]));

uint16_t get_char(char input)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
	if ('0' <= input && input <= '9')
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	2b2f      	cmp	r3, #47	; 0x2f
 8002f0e:	d908      	bls.n	8002f22 <get_char+0x22>
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	2b39      	cmp	r3, #57	; 0x39
 8002f14:	d805      	bhi.n	8002f22 <get_char+0x22>
		return vfd_digits[input - '0'];
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	3b30      	subs	r3, #48	; 0x30
 8002f1a:	4a2a      	ldr	r2, [pc, #168]	; (8002fc4 <get_char+0xc4>)
 8002f1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f20:	e04a      	b.n	8002fb8 <get_char+0xb8>
	if (0 <= input && input <= 9)
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	2b09      	cmp	r3, #9
 8002f26:	d804      	bhi.n	8002f32 <get_char+0x32>
		return vfd_digits[(uint8_t)input];
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	4a26      	ldr	r2, [pc, #152]	; (8002fc4 <get_char+0xc4>)
 8002f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f30:	e042      	b.n	8002fb8 <get_char+0xb8>
	if ('a' <= input && input <= 'z')
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	2b60      	cmp	r3, #96	; 0x60
 8002f36:	d908      	bls.n	8002f4a <get_char+0x4a>
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	2b7a      	cmp	r3, #122	; 0x7a
 8002f3c:	d805      	bhi.n	8002f4a <get_char+0x4a>
		return vfd_alpha[input - 'a'];
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	3b61      	subs	r3, #97	; 0x61
 8002f42:	4a21      	ldr	r2, [pc, #132]	; (8002fc8 <get_char+0xc8>)
 8002f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f48:	e036      	b.n	8002fb8 <get_char+0xb8>
	if ('A' <= input && input <= 'Z')
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	d908      	bls.n	8002f62 <get_char+0x62>
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	2b5a      	cmp	r3, #90	; 0x5a
 8002f54:	d805      	bhi.n	8002f62 <get_char+0x62>
		return vfd_alpha[input - 'A'];
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	3b41      	subs	r3, #65	; 0x41
 8002f5a:	4a1b      	ldr	r2, [pc, #108]	; (8002fc8 <get_char+0xc8>)
 8002f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f60:	e02a      	b.n	8002fb8 <get_char+0xb8>
	if (192 <= input && input <= 223)
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	2bbf      	cmp	r3, #191	; 0xbf
 8002f66:	d908      	bls.n	8002f7a <get_char+0x7a>
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	2bdf      	cmp	r3, #223	; 0xdf
 8002f6c:	d805      	bhi.n	8002f7a <get_char+0x7a>
		return vfd_alpha_ru[input - 192];
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	3bc0      	subs	r3, #192	; 0xc0
 8002f72:	4a16      	ldr	r2, [pc, #88]	; (8002fcc <get_char+0xcc>)
 8002f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f78:	e01e      	b.n	8002fb8 <get_char+0xb8>
	if (224 <= input && input <= 255)
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	2bdf      	cmp	r3, #223	; 0xdf
 8002f7e:	d905      	bls.n	8002f8c <get_char+0x8c>
		return vfd_alpha_ru[input - 224];
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	3be0      	subs	r3, #224	; 0xe0
 8002f84:	4a11      	ldr	r2, [pc, #68]	; (8002fcc <get_char+0xcc>)
 8002f86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f8a:	e015      	b.n	8002fb8 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e00e      	b.n	8002fb0 <get_char+0xb0>
		if (vfd_special_char[i] == input)
 8002f92:	4a0f      	ldr	r2, [pc, #60]	; (8002fd0 <get_char+0xd0>)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4413      	add	r3, r2
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	79fa      	ldrb	r2, [r7, #7]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d104      	bne.n	8002faa <get_char+0xaa>
			return vfd_special[i];
 8002fa0:	4a0c      	ldr	r2, [pc, #48]	; (8002fd4 <get_char+0xd4>)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fa8:	e006      	b.n	8002fb8 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3301      	adds	r3, #1
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b10      	cmp	r3, #16
 8002fb4:	d9ed      	bls.n	8002f92 <get_char+0x92>
	return 0;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	0800fc6c 	.word	0x0800fc6c
 8002fc8:	0800fc80 	.word	0x0800fc80
 8002fcc:	0800fcb4 	.word	0x0800fcb4
 8002fd0:	0800fd18 	.word	0x0800fd18
 8002fd4:	0800fcf4 	.word	0x0800fcf4

08002fd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fd8:	480c      	ldr	r0, [pc, #48]	; (800300c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fda:	490d      	ldr	r1, [pc, #52]	; (8003010 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fdc:	4a0d      	ldr	r2, [pc, #52]	; (8003014 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fe0:	e002      	b.n	8002fe8 <LoopCopyDataInit>

08002fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fe6:	3304      	adds	r3, #4

08002fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fec:	d3f9      	bcc.n	8002fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fee:	4a0a      	ldr	r2, [pc, #40]	; (8003018 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ff0:	4c0a      	ldr	r4, [pc, #40]	; (800301c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ff4:	e001      	b.n	8002ffa <LoopFillZerobss>

08002ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ff8:	3204      	adds	r2, #4

08002ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ffc:	d3fb      	bcc.n	8002ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ffe:	f7ff fefd 	bl	8002dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003002:	f00c f9bd 	bl	800f380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003006:	f7fd ffd5 	bl	8000fb4 <main>
  bx lr
 800300a:	4770      	bx	lr
  ldr r0, =_sdata
 800300c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003010:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8003014:	0800fd34 	.word	0x0800fd34
  ldr r2, =_sbss
 8003018:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 800301c:	2000368c 	.word	0x2000368c

08003020 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003020:	e7fe      	b.n	8003020 <ADC1_2_IRQHandler>
	...

08003024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003028:	4b08      	ldr	r3, [pc, #32]	; (800304c <HAL_Init+0x28>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a07      	ldr	r2, [pc, #28]	; (800304c <HAL_Init+0x28>)
 800302e:	f043 0310 	orr.w	r3, r3, #16
 8003032:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003034:	2003      	movs	r0, #3
 8003036:	f000 f8d1 	bl	80031dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800303a:	2000      	movs	r0, #0
 800303c:	f7ff fe4e 	bl	8002cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003040:	f7ff fe14 	bl	8002c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40022000 	.word	0x40022000

08003050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_IncTick+0x1c>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	4b05      	ldr	r3, [pc, #20]	; (8003070 <HAL_IncTick+0x20>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4413      	add	r3, r2
 8003060:	4a03      	ldr	r2, [pc, #12]	; (8003070 <HAL_IncTick+0x20>)
 8003062:	6013      	str	r3, [r2, #0]
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	20000018 	.word	0x20000018
 8003070:	200026c8 	.word	0x200026c8

08003074 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return uwTick;
 8003078:	4b02      	ldr	r3, [pc, #8]	; (8003084 <HAL_GetTick+0x10>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr
 8003084:	200026c8 	.word	0x200026c8

08003088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030a4:	4013      	ands	r3, r2
 80030a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ba:	4a04      	ldr	r2, [pc, #16]	; (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	60d3      	str	r3, [r2, #12]
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <__NVIC_GetPriorityGrouping+0x18>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	f003 0307 	and.w	r3, r3, #7
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	db0b      	blt.n	8003116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	f003 021f 	and.w	r2, r3, #31
 8003104:	4906      	ldr	r1, [pc, #24]	; (8003120 <__NVIC_EnableIRQ+0x34>)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	2001      	movs	r0, #1
 800310e:	fa00 f202 	lsl.w	r2, r0, r2
 8003112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr
 8003120:	e000e100 	.word	0xe000e100

08003124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	6039      	str	r1, [r7, #0]
 800312e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003134:	2b00      	cmp	r3, #0
 8003136:	db0a      	blt.n	800314e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	490c      	ldr	r1, [pc, #48]	; (8003170 <__NVIC_SetPriority+0x4c>)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	0112      	lsls	r2, r2, #4
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	440b      	add	r3, r1
 8003148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800314c:	e00a      	b.n	8003164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4908      	ldr	r1, [pc, #32]	; (8003174 <__NVIC_SetPriority+0x50>)
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	3b04      	subs	r3, #4
 800315c:	0112      	lsls	r2, r2, #4
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	440b      	add	r3, r1
 8003162:	761a      	strb	r2, [r3, #24]
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	e000e100 	.word	0xe000e100
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003178:	b480      	push	{r7}
 800317a:	b089      	sub	sp, #36	; 0x24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f1c3 0307 	rsb	r3, r3, #7
 8003192:	2b04      	cmp	r3, #4
 8003194:	bf28      	it	cs
 8003196:	2304      	movcs	r3, #4
 8003198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3304      	adds	r3, #4
 800319e:	2b06      	cmp	r3, #6
 80031a0:	d902      	bls.n	80031a8 <NVIC_EncodePriority+0x30>
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3b03      	subs	r3, #3
 80031a6:	e000      	b.n	80031aa <NVIC_EncodePriority+0x32>
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ac:	f04f 32ff 	mov.w	r2, #4294967295
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43da      	mvns	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	401a      	ands	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c0:	f04f 31ff 	mov.w	r1, #4294967295
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	43d9      	mvns	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	4313      	orrs	r3, r2
         );
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3724      	adds	r7, #36	; 0x24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff ff4f 	bl	8003088 <__NVIC_SetPriorityGrouping>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b086      	sub	sp, #24
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	4603      	mov	r3, r0
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003204:	f7ff ff64 	bl	80030d0 <__NVIC_GetPriorityGrouping>
 8003208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	6978      	ldr	r0, [r7, #20]
 8003210:	f7ff ffb2 	bl	8003178 <NVIC_EncodePriority>
 8003214:	4602      	mov	r2, r0
 8003216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ff81 	bl	8003124 <__NVIC_SetPriority>
}
 8003222:	bf00      	nop
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff57 	bl	80030ec <__NVIC_EnableIRQ>
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003246:	b480      	push	{r7}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003258:	2b02      	cmp	r3, #2
 800325a:	d008      	beq.n	800326e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2204      	movs	r2, #4
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e020      	b.n	80032b0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 020e 	bic.w	r2, r2, #14
 800327c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	2101      	movs	r1, #1
 8003298:	fa01 f202 	lsl.w	r2, r1, r2
 800329c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d005      	beq.n	80032de <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2204      	movs	r2, #4
 80032d6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
 80032dc:	e051      	b.n	8003382 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 020e 	bic.w	r2, r2, #14
 80032ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a22      	ldr	r2, [pc, #136]	; (800338c <HAL_DMA_Abort_IT+0xd0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d029      	beq.n	800335c <HAL_DMA_Abort_IT+0xa0>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a20      	ldr	r2, [pc, #128]	; (8003390 <HAL_DMA_Abort_IT+0xd4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d022      	beq.n	8003358 <HAL_DMA_Abort_IT+0x9c>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a1f      	ldr	r2, [pc, #124]	; (8003394 <HAL_DMA_Abort_IT+0xd8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d01a      	beq.n	8003352 <HAL_DMA_Abort_IT+0x96>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a1d      	ldr	r2, [pc, #116]	; (8003398 <HAL_DMA_Abort_IT+0xdc>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d012      	beq.n	800334c <HAL_DMA_Abort_IT+0x90>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a1c      	ldr	r2, [pc, #112]	; (800339c <HAL_DMA_Abort_IT+0xe0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00a      	beq.n	8003346 <HAL_DMA_Abort_IT+0x8a>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a1a      	ldr	r2, [pc, #104]	; (80033a0 <HAL_DMA_Abort_IT+0xe4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d102      	bne.n	8003340 <HAL_DMA_Abort_IT+0x84>
 800333a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800333e:	e00e      	b.n	800335e <HAL_DMA_Abort_IT+0xa2>
 8003340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003344:	e00b      	b.n	800335e <HAL_DMA_Abort_IT+0xa2>
 8003346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800334a:	e008      	b.n	800335e <HAL_DMA_Abort_IT+0xa2>
 800334c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003350:	e005      	b.n	800335e <HAL_DMA_Abort_IT+0xa2>
 8003352:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003356:	e002      	b.n	800335e <HAL_DMA_Abort_IT+0xa2>
 8003358:	2310      	movs	r3, #16
 800335a:	e000      	b.n	800335e <HAL_DMA_Abort_IT+0xa2>
 800335c:	2301      	movs	r3, #1
 800335e:	4a11      	ldr	r2, [pc, #68]	; (80033a4 <HAL_DMA_Abort_IT+0xe8>)
 8003360:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	4798      	blx	r3
    } 
  }
  return status;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40020008 	.word	0x40020008
 8003390:	4002001c 	.word	0x4002001c
 8003394:	40020030 	.word	0x40020030
 8003398:	40020044 	.word	0x40020044
 800339c:	40020058 	.word	0x40020058
 80033a0:	4002006c 	.word	0x4002006c
 80033a4:	40020000 	.word	0x40020000

080033a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b08b      	sub	sp, #44	; 0x2c
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033b2:	2300      	movs	r3, #0
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033b6:	2300      	movs	r3, #0
 80033b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ba:	e169      	b.n	8003690 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033bc:	2201      	movs	r2, #1
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	f040 8158 	bne.w	800368a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4a9a      	ldr	r2, [pc, #616]	; (8003648 <HAL_GPIO_Init+0x2a0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d05e      	beq.n	80034a2 <HAL_GPIO_Init+0xfa>
 80033e4:	4a98      	ldr	r2, [pc, #608]	; (8003648 <HAL_GPIO_Init+0x2a0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d875      	bhi.n	80034d6 <HAL_GPIO_Init+0x12e>
 80033ea:	4a98      	ldr	r2, [pc, #608]	; (800364c <HAL_GPIO_Init+0x2a4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d058      	beq.n	80034a2 <HAL_GPIO_Init+0xfa>
 80033f0:	4a96      	ldr	r2, [pc, #600]	; (800364c <HAL_GPIO_Init+0x2a4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d86f      	bhi.n	80034d6 <HAL_GPIO_Init+0x12e>
 80033f6:	4a96      	ldr	r2, [pc, #600]	; (8003650 <HAL_GPIO_Init+0x2a8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d052      	beq.n	80034a2 <HAL_GPIO_Init+0xfa>
 80033fc:	4a94      	ldr	r2, [pc, #592]	; (8003650 <HAL_GPIO_Init+0x2a8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d869      	bhi.n	80034d6 <HAL_GPIO_Init+0x12e>
 8003402:	4a94      	ldr	r2, [pc, #592]	; (8003654 <HAL_GPIO_Init+0x2ac>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d04c      	beq.n	80034a2 <HAL_GPIO_Init+0xfa>
 8003408:	4a92      	ldr	r2, [pc, #584]	; (8003654 <HAL_GPIO_Init+0x2ac>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d863      	bhi.n	80034d6 <HAL_GPIO_Init+0x12e>
 800340e:	4a92      	ldr	r2, [pc, #584]	; (8003658 <HAL_GPIO_Init+0x2b0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d046      	beq.n	80034a2 <HAL_GPIO_Init+0xfa>
 8003414:	4a90      	ldr	r2, [pc, #576]	; (8003658 <HAL_GPIO_Init+0x2b0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d85d      	bhi.n	80034d6 <HAL_GPIO_Init+0x12e>
 800341a:	2b12      	cmp	r3, #18
 800341c:	d82a      	bhi.n	8003474 <HAL_GPIO_Init+0xcc>
 800341e:	2b12      	cmp	r3, #18
 8003420:	d859      	bhi.n	80034d6 <HAL_GPIO_Init+0x12e>
 8003422:	a201      	add	r2, pc, #4	; (adr r2, 8003428 <HAL_GPIO_Init+0x80>)
 8003424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003428:	080034a3 	.word	0x080034a3
 800342c:	0800347d 	.word	0x0800347d
 8003430:	0800348f 	.word	0x0800348f
 8003434:	080034d1 	.word	0x080034d1
 8003438:	080034d7 	.word	0x080034d7
 800343c:	080034d7 	.word	0x080034d7
 8003440:	080034d7 	.word	0x080034d7
 8003444:	080034d7 	.word	0x080034d7
 8003448:	080034d7 	.word	0x080034d7
 800344c:	080034d7 	.word	0x080034d7
 8003450:	080034d7 	.word	0x080034d7
 8003454:	080034d7 	.word	0x080034d7
 8003458:	080034d7 	.word	0x080034d7
 800345c:	080034d7 	.word	0x080034d7
 8003460:	080034d7 	.word	0x080034d7
 8003464:	080034d7 	.word	0x080034d7
 8003468:	080034d7 	.word	0x080034d7
 800346c:	08003485 	.word	0x08003485
 8003470:	08003499 	.word	0x08003499
 8003474:	4a79      	ldr	r2, [pc, #484]	; (800365c <HAL_GPIO_Init+0x2b4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d013      	beq.n	80034a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800347a:	e02c      	b.n	80034d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	623b      	str	r3, [r7, #32]
          break;
 8003482:	e029      	b.n	80034d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	3304      	adds	r3, #4
 800348a:	623b      	str	r3, [r7, #32]
          break;
 800348c:	e024      	b.n	80034d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	3308      	adds	r3, #8
 8003494:	623b      	str	r3, [r7, #32]
          break;
 8003496:	e01f      	b.n	80034d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	330c      	adds	r3, #12
 800349e:	623b      	str	r3, [r7, #32]
          break;
 80034a0:	e01a      	b.n	80034d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d102      	bne.n	80034b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034aa:	2304      	movs	r3, #4
 80034ac:	623b      	str	r3, [r7, #32]
          break;
 80034ae:	e013      	b.n	80034d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d105      	bne.n	80034c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034b8:	2308      	movs	r3, #8
 80034ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	611a      	str	r2, [r3, #16]
          break;
 80034c2:	e009      	b.n	80034d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034c4:	2308      	movs	r3, #8
 80034c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	615a      	str	r2, [r3, #20]
          break;
 80034ce:	e003      	b.n	80034d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034d0:	2300      	movs	r3, #0
 80034d2:	623b      	str	r3, [r7, #32]
          break;
 80034d4:	e000      	b.n	80034d8 <HAL_GPIO_Init+0x130>
          break;
 80034d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	2bff      	cmp	r3, #255	; 0xff
 80034dc:	d801      	bhi.n	80034e2 <HAL_GPIO_Init+0x13a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	e001      	b.n	80034e6 <HAL_GPIO_Init+0x13e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3304      	adds	r3, #4
 80034e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2bff      	cmp	r3, #255	; 0xff
 80034ec:	d802      	bhi.n	80034f4 <HAL_GPIO_Init+0x14c>
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	e002      	b.n	80034fa <HAL_GPIO_Init+0x152>
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	3b08      	subs	r3, #8
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	210f      	movs	r1, #15
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	fa01 f303 	lsl.w	r3, r1, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	401a      	ands	r2, r3
 800350c:	6a39      	ldr	r1, [r7, #32]
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	431a      	orrs	r2, r3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 80b1 	beq.w	800368a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003528:	4b4d      	ldr	r3, [pc, #308]	; (8003660 <HAL_GPIO_Init+0x2b8>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	4a4c      	ldr	r2, [pc, #304]	; (8003660 <HAL_GPIO_Init+0x2b8>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6193      	str	r3, [r2, #24]
 8003534:	4b4a      	ldr	r3, [pc, #296]	; (8003660 <HAL_GPIO_Init+0x2b8>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003540:	4a48      	ldr	r2, [pc, #288]	; (8003664 <HAL_GPIO_Init+0x2bc>)
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	089b      	lsrs	r3, r3, #2
 8003546:	3302      	adds	r3, #2
 8003548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	220f      	movs	r2, #15
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4013      	ands	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a40      	ldr	r2, [pc, #256]	; (8003668 <HAL_GPIO_Init+0x2c0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d013      	beq.n	8003594 <HAL_GPIO_Init+0x1ec>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a3f      	ldr	r2, [pc, #252]	; (800366c <HAL_GPIO_Init+0x2c4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00d      	beq.n	8003590 <HAL_GPIO_Init+0x1e8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a3e      	ldr	r2, [pc, #248]	; (8003670 <HAL_GPIO_Init+0x2c8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d007      	beq.n	800358c <HAL_GPIO_Init+0x1e4>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a3d      	ldr	r2, [pc, #244]	; (8003674 <HAL_GPIO_Init+0x2cc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d101      	bne.n	8003588 <HAL_GPIO_Init+0x1e0>
 8003584:	2303      	movs	r3, #3
 8003586:	e006      	b.n	8003596 <HAL_GPIO_Init+0x1ee>
 8003588:	2304      	movs	r3, #4
 800358a:	e004      	b.n	8003596 <HAL_GPIO_Init+0x1ee>
 800358c:	2302      	movs	r3, #2
 800358e:	e002      	b.n	8003596 <HAL_GPIO_Init+0x1ee>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <HAL_GPIO_Init+0x1ee>
 8003594:	2300      	movs	r3, #0
 8003596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003598:	f002 0203 	and.w	r2, r2, #3
 800359c:	0092      	lsls	r2, r2, #2
 800359e:	4093      	lsls	r3, r2
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035a6:	492f      	ldr	r1, [pc, #188]	; (8003664 <HAL_GPIO_Init+0x2bc>)
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	089b      	lsrs	r3, r3, #2
 80035ac:	3302      	adds	r3, #2
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d006      	beq.n	80035ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035c0:	4b2d      	ldr	r3, [pc, #180]	; (8003678 <HAL_GPIO_Init+0x2d0>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	492c      	ldr	r1, [pc, #176]	; (8003678 <HAL_GPIO_Init+0x2d0>)
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	600b      	str	r3, [r1, #0]
 80035cc:	e006      	b.n	80035dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035ce:	4b2a      	ldr	r3, [pc, #168]	; (8003678 <HAL_GPIO_Init+0x2d0>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	43db      	mvns	r3, r3
 80035d6:	4928      	ldr	r1, [pc, #160]	; (8003678 <HAL_GPIO_Init+0x2d0>)
 80035d8:	4013      	ands	r3, r2
 80035da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d006      	beq.n	80035f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035e8:	4b23      	ldr	r3, [pc, #140]	; (8003678 <HAL_GPIO_Init+0x2d0>)
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	4922      	ldr	r1, [pc, #136]	; (8003678 <HAL_GPIO_Init+0x2d0>)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]
 80035f4:	e006      	b.n	8003604 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035f6:	4b20      	ldr	r3, [pc, #128]	; (8003678 <HAL_GPIO_Init+0x2d0>)
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	491e      	ldr	r1, [pc, #120]	; (8003678 <HAL_GPIO_Init+0x2d0>)
 8003600:	4013      	ands	r3, r2
 8003602:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d006      	beq.n	800361e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003610:	4b19      	ldr	r3, [pc, #100]	; (8003678 <HAL_GPIO_Init+0x2d0>)
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	4918      	ldr	r1, [pc, #96]	; (8003678 <HAL_GPIO_Init+0x2d0>)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	4313      	orrs	r3, r2
 800361a:	608b      	str	r3, [r1, #8]
 800361c:	e006      	b.n	800362c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800361e:	4b16      	ldr	r3, [pc, #88]	; (8003678 <HAL_GPIO_Init+0x2d0>)
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	43db      	mvns	r3, r3
 8003626:	4914      	ldr	r1, [pc, #80]	; (8003678 <HAL_GPIO_Init+0x2d0>)
 8003628:	4013      	ands	r3, r2
 800362a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d021      	beq.n	800367c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <HAL_GPIO_Init+0x2d0>)
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	490e      	ldr	r1, [pc, #56]	; (8003678 <HAL_GPIO_Init+0x2d0>)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	4313      	orrs	r3, r2
 8003642:	60cb      	str	r3, [r1, #12]
 8003644:	e021      	b.n	800368a <HAL_GPIO_Init+0x2e2>
 8003646:	bf00      	nop
 8003648:	10320000 	.word	0x10320000
 800364c:	10310000 	.word	0x10310000
 8003650:	10220000 	.word	0x10220000
 8003654:	10210000 	.word	0x10210000
 8003658:	10120000 	.word	0x10120000
 800365c:	10110000 	.word	0x10110000
 8003660:	40021000 	.word	0x40021000
 8003664:	40010000 	.word	0x40010000
 8003668:	40010800 	.word	0x40010800
 800366c:	40010c00 	.word	0x40010c00
 8003670:	40011000 	.word	0x40011000
 8003674:	40011400 	.word	0x40011400
 8003678:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_GPIO_Init+0x304>)
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	43db      	mvns	r3, r3
 8003684:	4909      	ldr	r1, [pc, #36]	; (80036ac <HAL_GPIO_Init+0x304>)
 8003686:	4013      	ands	r3, r2
 8003688:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	3301      	adds	r3, #1
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	fa22 f303 	lsr.w	r3, r2, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	f47f ae8e 	bne.w	80033bc <HAL_GPIO_Init+0x14>
  }
}
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop
 80036a4:	372c      	adds	r7, #44	; 0x2c
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	40010400 	.word	0x40010400

080036b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	887b      	ldrh	r3, [r7, #2]
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
 80036cc:	e001      	b.n	80036d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ce:	2300      	movs	r3, #0
 80036d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	460b      	mov	r3, r1
 80036e8:	807b      	strh	r3, [r7, #2]
 80036ea:	4613      	mov	r3, r2
 80036ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036ee:	787b      	ldrb	r3, [r7, #1]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036f4:	887a      	ldrh	r2, [r7, #2]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80036fa:	e003      	b.n	8003704 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036fc:	887b      	ldrh	r3, [r7, #2]
 80036fe:	041a      	lsls	r2, r3, #16
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	611a      	str	r2, [r3, #16]
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr

0800370e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	460b      	mov	r3, r1
 8003718:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003720:	887a      	ldrh	r2, [r7, #2]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4013      	ands	r3, r2
 8003726:	041a      	lsls	r2, r3, #16
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	43d9      	mvns	r1, r3
 800372c:	887b      	ldrh	r3, [r7, #2]
 800372e:	400b      	ands	r3, r1
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	611a      	str	r2, [r3, #16]
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800374a:	4b08      	ldr	r3, [pc, #32]	; (800376c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	4013      	ands	r3, r2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d006      	beq.n	8003764 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003756:	4a05      	ldr	r2, [pc, #20]	; (800376c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003758:	88fb      	ldrh	r3, [r7, #6]
 800375a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800375c:	88fb      	ldrh	r3, [r7, #6]
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f806 	bl	8003770 <HAL_GPIO_EXTI_Callback>
  }
}
 8003764:	bf00      	nop
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40010400 	.word	0x40010400

08003770 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e12b      	b.n	80039ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fd fbc4 	bl	8000f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2224      	movs	r2, #36	; 0x24
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037e8:	f002 fe96 	bl	8006518 <HAL_RCC_GetPCLK1Freq>
 80037ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	4a81      	ldr	r2, [pc, #516]	; (80039f8 <HAL_I2C_Init+0x274>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d807      	bhi.n	8003808 <HAL_I2C_Init+0x84>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4a80      	ldr	r2, [pc, #512]	; (80039fc <HAL_I2C_Init+0x278>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	bf94      	ite	ls
 8003800:	2301      	movls	r3, #1
 8003802:	2300      	movhi	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	e006      	b.n	8003816 <HAL_I2C_Init+0x92>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4a7d      	ldr	r2, [pc, #500]	; (8003a00 <HAL_I2C_Init+0x27c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	bf94      	ite	ls
 8003810:	2301      	movls	r3, #1
 8003812:	2300      	movhi	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e0e7      	b.n	80039ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4a78      	ldr	r2, [pc, #480]	; (8003a04 <HAL_I2C_Init+0x280>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	0c9b      	lsrs	r3, r3, #18
 8003828:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	4a6a      	ldr	r2, [pc, #424]	; (80039f8 <HAL_I2C_Init+0x274>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d802      	bhi.n	8003858 <HAL_I2C_Init+0xd4>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	3301      	adds	r3, #1
 8003856:	e009      	b.n	800386c <HAL_I2C_Init+0xe8>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800385e:	fb02 f303 	mul.w	r3, r2, r3
 8003862:	4a69      	ldr	r2, [pc, #420]	; (8003a08 <HAL_I2C_Init+0x284>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	099b      	lsrs	r3, r3, #6
 800386a:	3301      	adds	r3, #1
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	430b      	orrs	r3, r1
 8003872:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800387e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	495c      	ldr	r1, [pc, #368]	; (80039f8 <HAL_I2C_Init+0x274>)
 8003888:	428b      	cmp	r3, r1
 800388a:	d819      	bhi.n	80038c0 <HAL_I2C_Init+0x13c>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	1e59      	subs	r1, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	fbb1 f3f3 	udiv	r3, r1, r3
 800389a:	1c59      	adds	r1, r3, #1
 800389c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038a0:	400b      	ands	r3, r1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_I2C_Init+0x138>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1e59      	subs	r1, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80038b4:	3301      	adds	r3, #1
 80038b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ba:	e051      	b.n	8003960 <HAL_I2C_Init+0x1dc>
 80038bc:	2304      	movs	r3, #4
 80038be:	e04f      	b.n	8003960 <HAL_I2C_Init+0x1dc>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d111      	bne.n	80038ec <HAL_I2C_Init+0x168>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1e58      	subs	r0, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6859      	ldr	r1, [r3, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	440b      	add	r3, r1
 80038d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038da:	3301      	adds	r3, #1
 80038dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	bf0c      	ite	eq
 80038e4:	2301      	moveq	r3, #1
 80038e6:	2300      	movne	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	e012      	b.n	8003912 <HAL_I2C_Init+0x18e>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1e58      	subs	r0, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6859      	ldr	r1, [r3, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	0099      	lsls	r1, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003902:	3301      	adds	r3, #1
 8003904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003908:	2b00      	cmp	r3, #0
 800390a:	bf0c      	ite	eq
 800390c:	2301      	moveq	r3, #1
 800390e:	2300      	movne	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_I2C_Init+0x196>
 8003916:	2301      	movs	r3, #1
 8003918:	e022      	b.n	8003960 <HAL_I2C_Init+0x1dc>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10e      	bne.n	8003940 <HAL_I2C_Init+0x1bc>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1e58      	subs	r0, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6859      	ldr	r1, [r3, #4]
 800392a:	460b      	mov	r3, r1
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	440b      	add	r3, r1
 8003930:	fbb0 f3f3 	udiv	r3, r0, r3
 8003934:	3301      	adds	r3, #1
 8003936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800393e:	e00f      	b.n	8003960 <HAL_I2C_Init+0x1dc>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	1e58      	subs	r0, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6859      	ldr	r1, [r3, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	0099      	lsls	r1, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	fbb0 f3f3 	udiv	r3, r0, r3
 8003956:	3301      	adds	r3, #1
 8003958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800395c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	6809      	ldr	r1, [r1, #0]
 8003964:	4313      	orrs	r3, r2
 8003966:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69da      	ldr	r2, [r3, #28]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800398e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6911      	ldr	r1, [r2, #16]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68d2      	ldr	r2, [r2, #12]
 800399a:	4311      	orrs	r1, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695a      	ldr	r2, [r3, #20]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	000186a0 	.word	0x000186a0
 80039fc:	001e847f 	.word	0x001e847f
 8003a00:	003d08ff 	.word	0x003d08ff
 8003a04:	431bde83 	.word	0x431bde83
 8003a08:	10624dd3 	.word	0x10624dd3

08003a0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08c      	sub	sp, #48	; 0x30
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	4608      	mov	r0, r1
 8003a16:	4611      	mov	r1, r2
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	817b      	strh	r3, [r7, #10]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	813b      	strh	r3, [r7, #8]
 8003a22:	4613      	mov	r3, r2
 8003a24:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a2a:	f7ff fb23 	bl	8003074 <HAL_GetTick>
 8003a2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	f040 8244 	bne.w	8003ec6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	2319      	movs	r3, #25
 8003a44:	2201      	movs	r2, #1
 8003a46:	4982      	ldr	r1, [pc, #520]	; (8003c50 <HAL_I2C_Mem_Read+0x244>)
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 fb2f 	bl	80040ac <I2C_WaitOnFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003a54:	2302      	movs	r3, #2
 8003a56:	e237      	b.n	8003ec8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_I2C_Mem_Read+0x5a>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e230      	b.n	8003ec8 <HAL_I2C_Mem_Read+0x4bc>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d007      	beq.n	8003a8c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2222      	movs	r2, #34	; 0x22
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2240      	movs	r2, #64	; 0x40
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003abc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4a62      	ldr	r2, [pc, #392]	; (8003c54 <HAL_I2C_Mem_Read+0x248>)
 8003acc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ace:	88f8      	ldrh	r0, [r7, #6]
 8003ad0:	893a      	ldrh	r2, [r7, #8]
 8003ad2:	8979      	ldrh	r1, [r7, #10]
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	9301      	str	r3, [sp, #4]
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	4603      	mov	r3, r0
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f9fc 	bl	8003edc <I2C_RequestMemoryRead>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e1ec      	b.n	8003ec8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d113      	bne.n	8003b1e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	e1c0      	b.n	8003ea0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d11e      	bne.n	8003b64 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b36:	b672      	cpsid	i
}
 8003b38:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b60:	b662      	cpsie	i
}
 8003b62:	e035      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d11e      	bne.n	8003baa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b7c:	b672      	cpsid	i
}
 8003b7e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ba6:	b662      	cpsie	i
}
 8003ba8:	e012      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bb8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bba:	2300      	movs	r3, #0
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003bd0:	e166      	b.n	8003ea0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	f200 811f 	bhi.w	8003e1a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d123      	bne.n	8003c2c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 fb76 	bl	80042da <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e167      	b.n	8003ec8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691a      	ldr	r2, [r3, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c2a:	e139      	b.n	8003ea0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d152      	bne.n	8003cda <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	4906      	ldr	r1, [pc, #24]	; (8003c58 <HAL_I2C_Mem_Read+0x24c>)
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 fa34 	bl	80040ac <I2C_WaitOnFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d008      	beq.n	8003c5c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e13c      	b.n	8003ec8 <HAL_I2C_Mem_Read+0x4bc>
 8003c4e:	bf00      	nop
 8003c50:	00100002 	.word	0x00100002
 8003c54:	ffff0000 	.word	0xffff0000
 8003c58:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003c5c:	b672      	cpsid	i
}
 8003c5e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ca2:	b662      	cpsie	i
}
 8003ca4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cd8:	e0e2      	b.n	8003ea0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	497b      	ldr	r1, [pc, #492]	; (8003ed0 <HAL_I2C_Mem_Read+0x4c4>)
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f9e1 	bl	80040ac <I2C_WaitOnFlagUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0e9      	b.n	8003ec8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d04:	b672      	cpsid	i
}
 8003d06:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d3a:	4b66      	ldr	r3, [pc, #408]	; (8003ed4 <HAL_I2C_Mem_Read+0x4c8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	08db      	lsrs	r3, r3, #3
 8003d40:	4a65      	ldr	r2, [pc, #404]	; (8003ed8 <HAL_I2C_Mem_Read+0x4cc>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	0a1a      	lsrs	r2, r3, #8
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	00da      	lsls	r2, r3, #3
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d118      	bne.n	8003d92 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f043 0220 	orr.w	r2, r3, #32
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003d82:	b662      	cpsie	i
}
 8003d84:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e09a      	b.n	8003ec8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d1d9      	bne.n	8003d54 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003de2:	b662      	cpsie	i
}
 8003de4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e18:	e042      	b.n	8003ea0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 fa5b 	bl	80042da <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e04c      	b.n	8003ec8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d118      	bne.n	8003ea0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f47f ae94 	bne.w	8003bd2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e000      	b.n	8003ec8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003ec6:	2302      	movs	r3, #2
  }
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3728      	adds	r7, #40	; 0x28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	00010004 	.word	0x00010004
 8003ed4:	20000010 	.word	0x20000010
 8003ed8:	14f8b589 	.word	0x14f8b589

08003edc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	4608      	mov	r0, r1
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4603      	mov	r3, r0
 8003eec:	817b      	strh	r3, [r7, #10]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	813b      	strh	r3, [r7, #8]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f8c2 	bl	80040ac <I2C_WaitOnFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00d      	beq.n	8003f4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f3c:	d103      	bne.n	8003f46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e0aa      	b.n	80040a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f4a:	897b      	ldrh	r3, [r7, #10]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	461a      	mov	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	6a3a      	ldr	r2, [r7, #32]
 8003f5e:	4952      	ldr	r1, [pc, #328]	; (80040a8 <I2C_RequestMemoryRead+0x1cc>)
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f8fa 	bl	800415a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e097      	b.n	80040a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f88:	6a39      	ldr	r1, [r7, #32]
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 f964 	bl	8004258 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00d      	beq.n	8003fb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d107      	bne.n	8003fae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e076      	b.n	80040a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fb2:	88fb      	ldrh	r3, [r7, #6]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d105      	bne.n	8003fc4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fb8:	893b      	ldrh	r3, [r7, #8]
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	611a      	str	r2, [r3, #16]
 8003fc2:	e021      	b.n	8004008 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fc4:	893b      	ldrh	r3, [r7, #8]
 8003fc6:	0a1b      	lsrs	r3, r3, #8
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd4:	6a39      	ldr	r1, [r7, #32]
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f93e 	bl	8004258 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00d      	beq.n	8003ffe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d107      	bne.n	8003ffa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e050      	b.n	80040a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ffe:	893b      	ldrh	r3, [r7, #8]
 8004000:	b2da      	uxtb	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400a:	6a39      	ldr	r1, [r7, #32]
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f923 	bl	8004258 <I2C_WaitOnTXEFlagUntilTimeout>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00d      	beq.n	8004034 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	2b04      	cmp	r3, #4
 800401e:	d107      	bne.n	8004030 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e035      	b.n	80040a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004042:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	2200      	movs	r2, #0
 800404c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 f82b 	bl	80040ac <I2C_WaitOnFlagUntilTimeout>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00d      	beq.n	8004078 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800406a:	d103      	bne.n	8004074 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004072:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e013      	b.n	80040a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004078:	897b      	ldrh	r3, [r7, #10]
 800407a:	b2db      	uxtb	r3, r3
 800407c:	f043 0301 	orr.w	r3, r3, #1
 8004080:	b2da      	uxtb	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	6a3a      	ldr	r2, [r7, #32]
 800408c:	4906      	ldr	r1, [pc, #24]	; (80040a8 <I2C_RequestMemoryRead+0x1cc>)
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f863 	bl	800415a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	00010002 	.word	0x00010002

080040ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	4613      	mov	r3, r2
 80040ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040bc:	e025      	b.n	800410a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d021      	beq.n	800410a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c6:	f7fe ffd5 	bl	8003074 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d302      	bcc.n	80040dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d116      	bne.n	800410a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f043 0220 	orr.w	r2, r3, #32
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e023      	b.n	8004152 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	0c1b      	lsrs	r3, r3, #16
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	d10d      	bne.n	8004130 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	43da      	mvns	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4013      	ands	r3, r2
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	bf0c      	ite	eq
 8004126:	2301      	moveq	r3, #1
 8004128:	2300      	movne	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	e00c      	b.n	800414a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	43da      	mvns	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4013      	ands	r3, r2
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	bf0c      	ite	eq
 8004142:	2301      	moveq	r3, #1
 8004144:	2300      	movne	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	429a      	cmp	r2, r3
 800414e:	d0b6      	beq.n	80040be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b084      	sub	sp, #16
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	607a      	str	r2, [r7, #4]
 8004166:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004168:	e051      	b.n	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004178:	d123      	bne.n	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004188:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004192:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f043 0204 	orr.w	r2, r3, #4
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e046      	b.n	8004250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d021      	beq.n	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ca:	f7fe ff53 	bl	8003074 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d302      	bcc.n	80041e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d116      	bne.n	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f043 0220 	orr.w	r2, r3, #32
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e020      	b.n	8004250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	0c1b      	lsrs	r3, r3, #16
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b01      	cmp	r3, #1
 8004216:	d10c      	bne.n	8004232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	43da      	mvns	r2, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4013      	ands	r3, r2
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	bf14      	ite	ne
 800422a:	2301      	movne	r3, #1
 800422c:	2300      	moveq	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	e00b      	b.n	800424a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	43da      	mvns	r2, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4013      	ands	r3, r2
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	bf14      	ite	ne
 8004244:	2301      	movne	r3, #1
 8004246:	2300      	moveq	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d18d      	bne.n	800416a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004264:	e02d      	b.n	80042c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f88d 	bl	8004386 <I2C_IsAcknowledgeFailed>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e02d      	b.n	80042d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427c:	d021      	beq.n	80042c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427e:	f7fe fef9 	bl	8003074 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	429a      	cmp	r2, r3
 800428c:	d302      	bcc.n	8004294 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d116      	bne.n	80042c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f043 0220 	orr.w	r2, r3, #32
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e007      	b.n	80042d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042cc:	2b80      	cmp	r3, #128	; 0x80
 80042ce:	d1ca      	bne.n	8004266 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b084      	sub	sp, #16
 80042de:	af00      	add	r7, sp, #0
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042e6:	e042      	b.n	800436e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2b10      	cmp	r3, #16
 80042f4:	d119      	bne.n	800432a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f06f 0210 	mvn.w	r2, #16
 80042fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e029      	b.n	800437e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432a:	f7fe fea3 	bl	8003074 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	429a      	cmp	r2, r3
 8004338:	d302      	bcc.n	8004340 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d116      	bne.n	800436e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f043 0220 	orr.w	r2, r3, #32
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e007      	b.n	800437e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004378:	2b40      	cmp	r3, #64	; 0x40
 800437a:	d1b5      	bne.n	80042e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439c:	d11b      	bne.n	80043d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	f043 0204 	orr.w	r2, r3, #4
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e000      	b.n	80043d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr

080043e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e4:	b08b      	sub	sp, #44	; 0x2c
 80043e6:	af06      	add	r7, sp, #24
 80043e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0fd      	b.n	80045f0 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d106      	bne.n	800440e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f00a fd0f 	bl	800ee2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2203      	movs	r2, #3
 8004412:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f003 fada 	bl	80079d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	603b      	str	r3, [r7, #0]
 8004426:	687e      	ldr	r6, [r7, #4]
 8004428:	466d      	mov	r5, sp
 800442a:	f106 0410 	add.w	r4, r6, #16
 800442e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	602b      	str	r3, [r5, #0]
 8004436:	1d33      	adds	r3, r6, #4
 8004438:	cb0e      	ldmia	r3, {r1, r2, r3}
 800443a:	6838      	ldr	r0, [r7, #0]
 800443c:	f003 faa4 	bl	8007988 <USB_CoreInit>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d005      	beq.n	8004452 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2202      	movs	r2, #2
 800444a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e0ce      	b.n	80045f0 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2100      	movs	r1, #0
 8004458:	4618      	mov	r0, r3
 800445a:	f003 fad5 	bl	8007a08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800445e:	2300      	movs	r3, #0
 8004460:	73fb      	strb	r3, [r7, #15]
 8004462:	e04c      	b.n	80044fe <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	440b      	add	r3, r1
 8004474:	3301      	adds	r3, #1
 8004476:	2201      	movs	r2, #1
 8004478:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	4613      	mov	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	440b      	add	r3, r1
 800448a:	7bfa      	ldrb	r2, [r7, #15]
 800448c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800448e:	7bfa      	ldrb	r2, [r7, #15]
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	b298      	uxth	r0, r3
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	440b      	add	r3, r1
 80044a0:	3336      	adds	r3, #54	; 0x36
 80044a2:	4602      	mov	r2, r0
 80044a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	440b      	add	r3, r1
 80044b6:	3303      	adds	r3, #3
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044bc:	7bfa      	ldrb	r2, [r7, #15]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	440b      	add	r3, r1
 80044ca:	3338      	adds	r3, #56	; 0x38
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80044d0:	7bfa      	ldrb	r2, [r7, #15]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	440b      	add	r3, r1
 80044de:	333c      	adds	r3, #60	; 0x3c
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80044e4:	7bfa      	ldrb	r2, [r7, #15]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	440b      	add	r3, r1
 80044f2:	3340      	adds	r3, #64	; 0x40
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	3301      	adds	r3, #1
 80044fc:	73fb      	strb	r3, [r7, #15]
 80044fe:	7bfa      	ldrb	r2, [r7, #15]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	429a      	cmp	r2, r3
 8004506:	d3ad      	bcc.n	8004464 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004508:	2300      	movs	r3, #0
 800450a:	73fb      	strb	r3, [r7, #15]
 800450c:	e044      	b.n	8004598 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800450e:	7bfa      	ldrb	r2, [r7, #15]
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	440b      	add	r3, r1
 800451c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004520:	2200      	movs	r2, #0
 8004522:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004524:	7bfa      	ldrb	r2, [r7, #15]
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	440b      	add	r3, r1
 8004532:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004536:	7bfa      	ldrb	r2, [r7, #15]
 8004538:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800453a:	7bfa      	ldrb	r2, [r7, #15]
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	440b      	add	r3, r1
 8004548:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004550:	7bfa      	ldrb	r2, [r7, #15]
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	4613      	mov	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	440b      	add	r3, r1
 800455e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004566:	7bfa      	ldrb	r2, [r7, #15]
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	440b      	add	r3, r1
 8004574:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800457c:	7bfa      	ldrb	r2, [r7, #15]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	440b      	add	r3, r1
 800458a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	3301      	adds	r3, #1
 8004596:	73fb      	strb	r3, [r7, #15]
 8004598:	7bfa      	ldrb	r2, [r7, #15]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d3b5      	bcc.n	800450e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	687e      	ldr	r6, [r7, #4]
 80045aa:	466d      	mov	r5, sp
 80045ac:	f106 0410 	add.w	r4, r6, #16
 80045b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	602b      	str	r3, [r5, #0]
 80045b8:	1d33      	adds	r3, r6, #4
 80045ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045bc:	6838      	ldr	r0, [r7, #0]
 80045be:	f003 fa2f 	bl	8007a20 <USB_DevInit>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e00d      	b.n	80045f0 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f005 fba0 	bl	8009d2e <USB_DevDisconnect>

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_PCD_Start+0x16>
 800460a:	2302      	movs	r3, #2
 800460c:	e016      	b.n	800463c <HAL_PCD_Start+0x44>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f003 f9c4 	bl	80079a8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004620:	2101      	movs	r1, #1
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f00a fe75 	bl	800f312 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f005 fb74 	bl	8009d1a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f005 fb76 	bl	8009d42 <USB_ReadInterrupts>
 8004656:	4603      	mov	r3, r0
 8004658:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800465c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004660:	d102      	bne.n	8004668 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fb61 	bl	8004d2a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f005 fb68 	bl	8009d42 <USB_ReadInterrupts>
 8004672:	4603      	mov	r3, r0
 8004674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800467c:	d112      	bne.n	80046a4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004686:	b29a      	uxth	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004690:	b292      	uxth	r2, r2
 8004692:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f00a fc43 	bl	800ef22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800469c:	2100      	movs	r1, #0
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f925 	bl	80048ee <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f005 fb4a 	bl	8009d42 <USB_ReadInterrupts>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046b8:	d10b      	bne.n	80046d2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046cc:	b292      	uxth	r2, r2
 80046ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f005 fb33 	bl	8009d42 <USB_ReadInterrupts>
 80046dc:	4603      	mov	r3, r0
 80046de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e6:	d10b      	bne.n	8004700 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046fa:	b292      	uxth	r2, r2
 80046fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f005 fb1c 	bl	8009d42 <USB_ReadInterrupts>
 800470a:	4603      	mov	r3, r0
 800470c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004714:	d126      	bne.n	8004764 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800471e:	b29a      	uxth	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0204 	bic.w	r2, r2, #4
 8004728:	b292      	uxth	r2, r2
 800472a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004736:	b29a      	uxth	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0208 	bic.w	r2, r2, #8
 8004740:	b292      	uxth	r2, r2
 8004742:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f00a fc24 	bl	800ef94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004754:	b29a      	uxth	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800475e:	b292      	uxth	r2, r2
 8004760:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f005 faea 	bl	8009d42 <USB_ReadInterrupts>
 800476e:	4603      	mov	r3, r0
 8004770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004778:	f040 8084 	bne.w	8004884 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800477c:	2300      	movs	r3, #0
 800477e:	77fb      	strb	r3, [r7, #31]
 8004780:	e011      	b.n	80047a6 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	7ffb      	ldrb	r3, [r7, #31]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	441a      	add	r2, r3
 800478e:	7ffb      	ldrb	r3, [r7, #31]
 8004790:	8812      	ldrh	r2, [r2, #0]
 8004792:	b292      	uxth	r2, r2
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	f107 0120 	add.w	r1, r7, #32
 800479a:	440b      	add	r3, r1
 800479c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80047a0:	7ffb      	ldrb	r3, [r7, #31]
 80047a2:	3301      	adds	r3, #1
 80047a4:	77fb      	strb	r3, [r7, #31]
 80047a6:	7ffb      	ldrb	r3, [r7, #31]
 80047a8:	2b07      	cmp	r3, #7
 80047aa:	d9ea      	bls.n	8004782 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	b292      	uxth	r2, r2
 80047c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0201 	bic.w	r2, r2, #1
 80047d6:	b292      	uxth	r2, r2
 80047d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80047dc:	bf00      	nop
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0f6      	beq.n	80047de <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004802:	b292      	uxth	r2, r2
 8004804:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004808:	2300      	movs	r3, #0
 800480a:	77fb      	strb	r3, [r7, #31]
 800480c:	e010      	b.n	8004830 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800480e:	7ffb      	ldrb	r3, [r7, #31]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	4611      	mov	r1, r2
 8004816:	7ffa      	ldrb	r2, [r7, #31]
 8004818:	0092      	lsls	r2, r2, #2
 800481a:	440a      	add	r2, r1
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	f107 0120 	add.w	r1, r7, #32
 8004822:	440b      	add	r3, r1
 8004824:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004828:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800482a:	7ffb      	ldrb	r3, [r7, #31]
 800482c:	3301      	adds	r3, #1
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	7ffb      	ldrb	r3, [r7, #31]
 8004832:	2b07      	cmp	r3, #7
 8004834:	d9eb      	bls.n	800480e <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800483e:	b29a      	uxth	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0208 	orr.w	r2, r2, #8
 8004848:	b292      	uxth	r2, r2
 800484a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004856:	b29a      	uxth	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004860:	b292      	uxth	r2, r2
 8004862:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800486e:	b29a      	uxth	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0204 	orr.w	r2, r2, #4
 8004878:	b292      	uxth	r2, r2
 800487a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f00a fb6e 	bl	800ef60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f005 fa5a 	bl	8009d42 <USB_ReadInterrupts>
 800488e:	4603      	mov	r3, r0
 8004890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004898:	d10e      	bne.n	80048b8 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048ac:	b292      	uxth	r2, r2
 80048ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f00a fb27 	bl	800ef06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f005 fa40 	bl	8009d42 <USB_ReadInterrupts>
 80048c2:	4603      	mov	r3, r0
 80048c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048cc:	d10b      	bne.n	80048e6 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048e0:	b292      	uxth	r2, r2
 80048e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80048e6:	bf00      	nop
 80048e8:	3720      	adds	r7, #32
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b082      	sub	sp, #8
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	460b      	mov	r3, r1
 80048f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_PCD_SetAddress+0x1a>
 8004904:	2302      	movs	r3, #2
 8004906:	e013      	b.n	8004930 <HAL_PCD_SetAddress+0x42>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	78fa      	ldrb	r2, [r7, #3]
 8004914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	78fa      	ldrb	r2, [r7, #3]
 800491e:	4611      	mov	r1, r2
 8004920:	4618      	mov	r0, r3
 8004922:	f005 f9e7 	bl	8009cf4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	4608      	mov	r0, r1
 8004942:	4611      	mov	r1, r2
 8004944:	461a      	mov	r2, r3
 8004946:	4603      	mov	r3, r0
 8004948:	70fb      	strb	r3, [r7, #3]
 800494a:	460b      	mov	r3, r1
 800494c:	803b      	strh	r3, [r7, #0]
 800494e:	4613      	mov	r3, r2
 8004950:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004956:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800495a:	2b00      	cmp	r3, #0
 800495c:	da0e      	bge.n	800497c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	4413      	add	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2201      	movs	r2, #1
 8004978:	705a      	strb	r2, [r3, #1]
 800497a:	e00e      	b.n	800499a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	f003 0207 	and.w	r2, r3, #7
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	4413      	add	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80049a6:	883a      	ldrh	r2, [r7, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	78ba      	ldrb	r2, [r7, #2]
 80049b0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	785b      	ldrb	r3, [r3, #1]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d004      	beq.n	80049c4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80049c4:	78bb      	ldrb	r3, [r7, #2]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d102      	bne.n	80049d0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d101      	bne.n	80049de <HAL_PCD_EP_Open+0xa6>
 80049da:	2302      	movs	r3, #2
 80049dc:	e00e      	b.n	80049fc <HAL_PCD_EP_Open+0xc4>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68f9      	ldr	r1, [r7, #12]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f003 f837 	bl	8007a60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80049fa:	7afb      	ldrb	r3, [r7, #11]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	da0e      	bge.n	8004a36 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	705a      	strb	r2, [r3, #1]
 8004a34:	e00e      	b.n	8004a54 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a36:	78fb      	ldrb	r3, [r7, #3]
 8004a38:	f003 0207 	and.w	r2, r3, #7
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_PCD_EP_Close+0x6a>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e00e      	b.n	8004a8c <HAL_PCD_EP_Close+0x88>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68f9      	ldr	r1, [r7, #12]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f003 fb59 	bl	8008134 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	607a      	str	r2, [r7, #4]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aa4:	7afb      	ldrb	r3, [r7, #11]
 8004aa6:	f003 0207 	and.w	r2, r3, #7
 8004aaa:	4613      	mov	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4413      	add	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2200      	movs	r2, #0
 8004acc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ad4:	7afb      	ldrb	r3, [r7, #11]
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ae0:	7afb      	ldrb	r3, [r7, #11]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6979      	ldr	r1, [r7, #20]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f003 fd0b 	bl	800850c <USB_EPStartXfer>
 8004af6:	e005      	b.n	8004b04 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6979      	ldr	r1, [r7, #20]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f003 fd04 	bl	800850c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	460b      	mov	r3, r1
 8004b18:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	f003 0207 	and.w	r2, r3, #7
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	440b      	add	r3, r1
 8004b2c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004b30:	681b      	ldr	r3, [r3, #0]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	607a      	str	r2, [r7, #4]
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b4c:	7afb      	ldrb	r3, [r7, #11]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	4613      	mov	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2201      	movs	r2, #1
 8004b86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b88:	7afb      	ldrb	r3, [r7, #11]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b94:	7afb      	ldrb	r3, [r7, #11]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6979      	ldr	r1, [r7, #20]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f003 fcb1 	bl	800850c <USB_EPStartXfer>
 8004baa:	e005      	b.n	8004bb8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6979      	ldr	r1, [r7, #20]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f003 fcaa 	bl	800850c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004bce:	78fb      	ldrb	r3, [r7, #3]
 8004bd0:	f003 0207 	and.w	r2, r3, #7
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d901      	bls.n	8004be0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e04c      	b.n	8004c7a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	da0e      	bge.n	8004c06 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	705a      	strb	r2, [r3, #1]
 8004c04:	e00c      	b.n	8004c20 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c06:	78fa      	ldrb	r2, [r7, #3]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	4413      	add	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2201      	movs	r2, #1
 8004c24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_PCD_EP_SetStall+0x7e>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e01c      	b.n	8004c7a <HAL_PCD_EP_SetStall+0xb8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68f9      	ldr	r1, [r7, #12]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f004 ff53 	bl	8009afa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d108      	bne.n	8004c70 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	f005 f878 	bl	8009d60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	f003 020f 	and.w	r2, r3, #15
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d901      	bls.n	8004ca0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e040      	b.n	8004d22 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	da0e      	bge.n	8004cc6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	4413      	add	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	705a      	strb	r2, [r3, #1]
 8004cc4:	e00e      	b.n	8004ce4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cc6:	78fb      	ldrb	r3, [r7, #3]
 8004cc8:	f003 0207 	and.w	r2, r3, #7
 8004ccc:	4613      	mov	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	4413      	add	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cea:	78fb      	ldrb	r3, [r7, #3]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_PCD_EP_ClrStall+0x82>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e00e      	b.n	8004d22 <HAL_PCD_EP_ClrStall+0xa0>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68f9      	ldr	r1, [r7, #12]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f004 ff41 	bl	8009b9a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b08e      	sub	sp, #56	; 0x38
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d32:	e2ec      	b.n	800530e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d3c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004d3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004d4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f040 8161 	bne.w	8005016 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004d54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d152      	bne.n	8004e04 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6e:	81fb      	strh	r3, [r7, #14]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	89fb      	ldrh	r3, [r7, #14]
 8004d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3328      	adds	r3, #40	; 0x28
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6812      	ldr	r2, [r2, #0]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	695a      	ldr	r2, [r3, #20]
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	441a      	add	r2, r3
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f00a f884 	bl	800eed2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 829b 	beq.w	800530e <PCD_EP_ISR_Handler+0x5e4>
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f040 8296 	bne.w	800530e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	b292      	uxth	r2, r2
 8004df6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e02:	e284      	b.n	800530e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004e14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d034      	beq.n	8004e88 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	461a      	mov	r2, r3
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	4413      	add	r3, r2
 8004e32:	3306      	adds	r3, #6
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	f004 ffcf 	bl	8009e00 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e6e:	4013      	ands	r3, r2
 8004e70:	823b      	strh	r3, [r7, #16]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	8a3a      	ldrh	r2, [r7, #16]
 8004e78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e7c:	b292      	uxth	r2, r2
 8004e7e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f009 fff9 	bl	800ee78 <HAL_PCD_SetupStageCallback>
 8004e86:	e242      	b.n	800530e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e88:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f280 823e 	bge.w	800530e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	83bb      	strh	r3, [r7, #28]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	8bba      	ldrh	r2, [r7, #28]
 8004ea8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004eac:	b292      	uxth	r2, r2
 8004eae:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	3306      	adds	r3, #6
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6812      	ldr	r2, [r2, #0]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d019      	beq.n	8004f18 <PCD_EP_ISR_Handler+0x1ee>
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d015      	beq.n	8004f18 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6818      	ldr	r0, [r3, #0]
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	6959      	ldr	r1, [r3, #20]
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	f004 ff7f 	bl	8009e00 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	441a      	add	r2, r3
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004f10:	2100      	movs	r1, #0
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f009 ffc2 	bl	800ee9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f040 81f2 	bne.w	800530e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	61bb      	str	r3, [r7, #24]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	4413      	add	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d112      	bne.n	8004f78 <PCD_EP_ISR_Handler+0x24e>
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	801a      	strh	r2, [r3, #0]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	801a      	strh	r2, [r3, #0]
 8004f76:	e02f      	b.n	8004fd8 <PCD_EP_ISR_Handler+0x2ae>
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	2b3e      	cmp	r3, #62	; 0x3e
 8004f7e:	d813      	bhi.n	8004fa8 <PCD_EP_ISR_Handler+0x27e>
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	085b      	lsrs	r3, r3, #1
 8004f86:	633b      	str	r3, [r7, #48]	; 0x30
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <PCD_EP_ISR_Handler+0x270>
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	3301      	adds	r3, #1
 8004f98:	633b      	str	r3, [r7, #48]	; 0x30
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	029b      	lsls	r3, r3, #10
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	801a      	strh	r2, [r3, #0]
 8004fa6:	e017      	b.n	8004fd8 <PCD_EP_ISR_Handler+0x2ae>
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	095b      	lsrs	r3, r3, #5
 8004fae:	633b      	str	r3, [r7, #48]	; 0x30
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f003 031f 	and.w	r3, r3, #31
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d102      	bne.n	8004fc2 <PCD_EP_ISR_Handler+0x298>
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	633b      	str	r3, [r7, #48]	; 0x30
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	029b      	lsls	r3, r3, #10
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe8:	827b      	strh	r3, [r7, #18]
 8004fea:	8a7b      	ldrh	r3, [r7, #18]
 8004fec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ff0:	827b      	strh	r3, [r7, #18]
 8004ff2:	8a7b      	ldrh	r3, [r7, #18]
 8004ff4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ff8:	827b      	strh	r3, [r7, #18]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	8a7b      	ldrh	r3, [r7, #18]
 8005000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800500c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005010:	b29b      	uxth	r3, r3
 8005012:	8013      	strh	r3, [r2, #0]
 8005014:	e17b      	b.n	800530e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005028:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800502c:	2b00      	cmp	r3, #0
 800502e:	f280 80ea 	bge.w	8005206 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	b29a      	uxth	r2, r3
 8005044:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005048:	4013      	ands	r3, r2
 800504a:	853b      	strh	r3, [r7, #40]	; 0x28
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800505c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005060:	b292      	uxth	r2, r2
 8005062:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005064:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	4413      	add	r3, r2
 8005078:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	7b1b      	ldrb	r3, [r3, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d122      	bne.n	80050c8 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800508a:	b29b      	uxth	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4413      	add	r3, r2
 8005096:	3306      	adds	r3, #6
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6812      	ldr	r2, [r2, #0]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050aa:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80050ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 8087 	beq.w	80051c2 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6818      	ldr	r0, [r3, #0]
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	6959      	ldr	r1, [r3, #20]
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	88da      	ldrh	r2, [r3, #6]
 80050c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050c2:	f004 fe9d 	bl	8009e00 <USB_ReadPMA>
 80050c6:	e07c      	b.n	80051c2 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	78db      	ldrb	r3, [r3, #3]
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d108      	bne.n	80050e2 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80050d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80050d2:	461a      	mov	r2, r3
 80050d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f927 	bl	800532a <HAL_PCD_EP_DB_Receive>
 80050dc:	4603      	mov	r3, r0
 80050de:	86fb      	strh	r3, [r7, #54]	; 0x36
 80050e0:	e06f      	b.n	80051c2 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fc:	847b      	strh	r3, [r7, #34]	; 0x22
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	441a      	add	r2, r3
 800510c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800510e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800511a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800511e:	b29b      	uxth	r3, r3
 8005120:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	b29b      	uxth	r3, r3
 8005134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d021      	beq.n	8005180 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005144:	b29b      	uxth	r3, r3
 8005146:	461a      	mov	r2, r3
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	4413      	add	r3, r2
 8005150:	3302      	adds	r3, #2
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005164:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005166:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005168:	2b00      	cmp	r3, #0
 800516a:	d02a      	beq.n	80051c2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	6959      	ldr	r1, [r3, #20]
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	891a      	ldrh	r2, [r3, #8]
 8005178:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800517a:	f004 fe41 	bl	8009e00 <USB_ReadPMA>
 800517e:	e020      	b.n	80051c2 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005188:	b29b      	uxth	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	4413      	add	r3, r2
 8005194:	3306      	adds	r3, #6
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6812      	ldr	r2, [r2, #0]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051a8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80051aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6818      	ldr	r0, [r3, #0]
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	6959      	ldr	r1, [r3, #20]
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	895a      	ldrh	r2, [r3, #10]
 80051bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051be:	f004 fe1f 	bl	8009e00 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	69da      	ldr	r2, [r3, #28]
 80051c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051c8:	441a      	add	r2, r3
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	695a      	ldr	r2, [r3, #20]
 80051d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051d4:	441a      	add	r2, r3
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d004      	beq.n	80051ec <PCD_EP_ISR_Handler+0x4c2>
 80051e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d206      	bcs.n	80051fa <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	4619      	mov	r1, r3
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f009 fe52 	bl	800ee9c <HAL_PCD_DataOutStageCallback>
 80051f8:	e005      	b.n	8005206 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005200:	4618      	mov	r0, r3
 8005202:	f003 f983 	bl	800850c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005206:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520c:	2b00      	cmp	r3, #0
 800520e:	d07e      	beq.n	800530e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005210:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	4413      	add	r3, r2
 8005222:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	461a      	mov	r2, r3
 800522a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29b      	uxth	r3, r3
 8005236:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800523a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523e:	843b      	strh	r3, [r7, #32]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	441a      	add	r2, r3
 800524e:	8c3b      	ldrh	r3, [r7, #32]
 8005250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005258:	b29b      	uxth	r3, r3
 800525a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	78db      	ldrb	r3, [r3, #3]
 8005260:	2b03      	cmp	r3, #3
 8005262:	d00c      	beq.n	800527e <PCD_EP_ISR_Handler+0x554>
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	78db      	ldrb	r3, [r3, #3]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005270:	2b02      	cmp	r3, #2
 8005272:	d146      	bne.n	8005302 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005274:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527a:	2b00      	cmp	r3, #0
 800527c:	d141      	bne.n	8005302 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005286:	b29b      	uxth	r3, r3
 8005288:	461a      	mov	r2, r3
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	4413      	add	r3, r2
 8005292:	3302      	adds	r3, #2
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052a6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	699a      	ldr	r2, [r3, #24]
 80052ac:	8bfb      	ldrh	r3, [r7, #30]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d906      	bls.n	80052c0 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	8bfb      	ldrh	r3, [r7, #30]
 80052b8:	1ad2      	subs	r2, r2, r3
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	619a      	str	r2, [r3, #24]
 80052be:	e002      	b.n	80052c6 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	2200      	movs	r2, #0
 80052c4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	4619      	mov	r1, r3
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f009 fdfc 	bl	800eed2 <HAL_PCD_DataInStageCallback>
 80052da:	e018      	b.n	800530e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	695a      	ldr	r2, [r3, #20]
 80052e0:	8bfb      	ldrh	r3, [r7, #30]
 80052e2:	441a      	add	r2, r3
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	69da      	ldr	r2, [r3, #28]
 80052ec:	8bfb      	ldrh	r3, [r7, #30]
 80052ee:	441a      	add	r2, r3
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052fa:	4618      	mov	r0, r3
 80052fc:	f003 f906 	bl	800850c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005300:	e005      	b.n	800530e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005302:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005304:	461a      	mov	r2, r3
 8005306:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f91b 	bl	8005544 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005316:	b29b      	uxth	r3, r3
 8005318:	b21b      	sxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	f6ff ad0a 	blt.w	8004d34 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3738      	adds	r7, #56	; 0x38
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b088      	sub	sp, #32
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	4613      	mov	r3, r2
 8005336:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005338:	88fb      	ldrh	r3, [r7, #6]
 800533a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d07e      	beq.n	8005440 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800534a:	b29b      	uxth	r3, r3
 800534c:	461a      	mov	r2, r3
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	4413      	add	r3, r2
 8005356:	3302      	adds	r3, #2
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	6812      	ldr	r2, [r2, #0]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800536a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	699a      	ldr	r2, [r3, #24]
 8005370:	8b7b      	ldrh	r3, [r7, #26]
 8005372:	429a      	cmp	r2, r3
 8005374:	d306      	bcc.n	8005384 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	699a      	ldr	r2, [r3, #24]
 800537a:	8b7b      	ldrh	r3, [r7, #26]
 800537c:	1ad2      	subs	r2, r2, r3
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	619a      	str	r2, [r3, #24]
 8005382:	e002      	b.n	800538a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2200      	movs	r2, #0
 8005388:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d123      	bne.n	80053da <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ac:	833b      	strh	r3, [r7, #24]
 80053ae:	8b3b      	ldrh	r3, [r7, #24]
 80053b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053b4:	833b      	strh	r3, [r7, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	441a      	add	r2, r3
 80053c4:	8b3b      	ldrh	r3, [r7, #24]
 80053c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80053da:	88fb      	ldrh	r3, [r7, #6]
 80053dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01f      	beq.n	8005424 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fe:	82fb      	strh	r3, [r7, #22]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	461a      	mov	r2, r3
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	441a      	add	r2, r3
 800540e:	8afb      	ldrh	r3, [r7, #22]
 8005410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005420:	b29b      	uxth	r3, r3
 8005422:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005424:	8b7b      	ldrh	r3, [r7, #26]
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 8087 	beq.w	800553a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6818      	ldr	r0, [r3, #0]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	6959      	ldr	r1, [r3, #20]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	891a      	ldrh	r2, [r3, #8]
 8005438:	8b7b      	ldrh	r3, [r7, #26]
 800543a:	f004 fce1 	bl	8009e00 <USB_ReadPMA>
 800543e:	e07c      	b.n	800553a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005448:	b29b      	uxth	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	4413      	add	r3, r2
 8005454:	3306      	adds	r3, #6
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	6812      	ldr	r2, [r2, #0]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005468:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	8b7b      	ldrh	r3, [r7, #26]
 8005470:	429a      	cmp	r2, r3
 8005472:	d306      	bcc.n	8005482 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	699a      	ldr	r2, [r3, #24]
 8005478:	8b7b      	ldrh	r3, [r7, #26]
 800547a:	1ad2      	subs	r2, r2, r3
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	619a      	str	r2, [r3, #24]
 8005480:	e002      	b.n	8005488 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2200      	movs	r2, #0
 8005486:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d123      	bne.n	80054d8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054aa:	83fb      	strh	r3, [r7, #30]
 80054ac:	8bfb      	ldrh	r3, [r7, #30]
 80054ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054b2:	83fb      	strh	r3, [r7, #30]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	461a      	mov	r2, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	441a      	add	r2, r3
 80054c2:	8bfb      	ldrh	r3, [r7, #30]
 80054c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80054d8:	88fb      	ldrh	r3, [r7, #6]
 80054da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d11f      	bne.n	8005522 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fc:	83bb      	strh	r3, [r7, #28]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	441a      	add	r2, r3
 800550c:	8bbb      	ldrh	r3, [r7, #28]
 800550e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800551e:	b29b      	uxth	r3, r3
 8005520:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005522:	8b7b      	ldrh	r3, [r7, #26]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d008      	beq.n	800553a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	6959      	ldr	r1, [r3, #20]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	895a      	ldrh	r2, [r3, #10]
 8005534:	8b7b      	ldrh	r3, [r7, #26]
 8005536:	f004 fc63 	bl	8009e00 <USB_ReadPMA>
    }
  }

  return count;
 800553a:	8b7b      	ldrh	r3, [r7, #26]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3720      	adds	r7, #32
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b0a2      	sub	sp, #136	; 0x88
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	4613      	mov	r3, r2
 8005550:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005552:	88fb      	ldrh	r3, [r7, #6]
 8005554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 81c7 	beq.w	80058ec <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005566:	b29b      	uxth	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	4413      	add	r3, r2
 8005572:	3302      	adds	r3, #2
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005586:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005592:	429a      	cmp	r2, r3
 8005594:	d907      	bls.n	80055a6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	699a      	ldr	r2, [r3, #24]
 800559a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800559e:	1ad2      	subs	r2, r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	619a      	str	r2, [r3, #24]
 80055a4:	e002      	b.n	80055ac <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2200      	movs	r2, #0
 80055aa:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f040 80b9 	bne.w	8005728 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	785b      	ldrb	r3, [r3, #1]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d126      	bne.n	800560c <HAL_PCD_EP_DB_Transmit+0xc8>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	461a      	mov	r2, r3
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	4413      	add	r3, r2
 80055d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	011a      	lsls	r2, r3, #4
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	4413      	add	r3, r2
 80055e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	801a      	strh	r2, [r3, #0]
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005604:	b29a      	uxth	r2, r3
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	801a      	strh	r2, [r3, #0]
 800560a:	e01a      	b.n	8005642 <HAL_PCD_EP_DB_Transmit+0xfe>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d116      	bne.n	8005642 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	633b      	str	r3, [r7, #48]	; 0x30
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005622:	b29b      	uxth	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	4413      	add	r3, r2
 800562a:	633b      	str	r3, [r7, #48]	; 0x30
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	011a      	lsls	r2, r3, #4
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	4413      	add	r3, r2
 8005636:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800563a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800563c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563e:	2200      	movs	r2, #0
 8005640:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	623b      	str	r3, [r7, #32]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	785b      	ldrb	r3, [r3, #1]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d126      	bne.n	800569e <HAL_PCD_EP_DB_Transmit+0x15a>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800565e:	b29b      	uxth	r3, r3
 8005660:	461a      	mov	r2, r3
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	4413      	add	r3, r2
 8005666:	61bb      	str	r3, [r7, #24]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	011a      	lsls	r2, r3, #4
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	4413      	add	r3, r2
 8005672:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	b29b      	uxth	r3, r3
 800567e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005682:	b29a      	uxth	r2, r3
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	801a      	strh	r2, [r3, #0]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	b29b      	uxth	r3, r3
 800568e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005696:	b29a      	uxth	r2, r3
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	801a      	strh	r2, [r3, #0]
 800569c:	e017      	b.n	80056ce <HAL_PCD_EP_DB_Transmit+0x18a>
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d113      	bne.n	80056ce <HAL_PCD_EP_DB_Transmit+0x18a>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	461a      	mov	r2, r3
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	4413      	add	r3, r2
 80056b6:	623b      	str	r3, [r7, #32]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	011a      	lsls	r2, r3, #4
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	4413      	add	r3, r2
 80056c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056c6:	61fb      	str	r3, [r7, #28]
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	2200      	movs	r2, #0
 80056cc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	4619      	mov	r1, r3
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f009 fbfc 	bl	800eed2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80056da:	88fb      	ldrh	r3, [r7, #6]
 80056dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 82d4 	beq.w	8005c8e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005700:	827b      	strh	r3, [r7, #18]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	441a      	add	r2, r3
 8005710:	8a7b      	ldrh	r3, [r7, #18]
 8005712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800571a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800571e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005722:	b29b      	uxth	r3, r3
 8005724:	8013      	strh	r3, [r2, #0]
 8005726:	e2b2      	b.n	8005c8e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d021      	beq.n	8005776 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b29b      	uxth	r3, r3
 8005744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	461a      	mov	r2, r3
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	441a      	add	r2, r3
 800575e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800576a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800576e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005772:	b29b      	uxth	r3, r3
 8005774:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800577c:	2b01      	cmp	r3, #1
 800577e:	f040 8286 	bne.w	8005c8e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	695a      	ldr	r2, [r3, #20]
 8005786:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800578a:	441a      	add	r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	69da      	ldr	r2, [r3, #28]
 8005794:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005798:	441a      	add	r2, r3
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	6a1a      	ldr	r2, [r3, #32]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d309      	bcc.n	80057be <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	6a1a      	ldr	r2, [r3, #32]
 80057b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057b6:	1ad2      	subs	r2, r2, r3
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	621a      	str	r2, [r3, #32]
 80057bc:	e015      	b.n	80057ea <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d107      	bne.n	80057d6 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80057c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057ca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80057d4:	e009      	b.n	80057ea <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2200      	movs	r2, #0
 80057e8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	785b      	ldrb	r3, [r3, #1]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d155      	bne.n	800589e <HAL_PCD_EP_DB_Transmit+0x35a>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005800:	b29b      	uxth	r3, r3
 8005802:	461a      	mov	r2, r3
 8005804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005806:	4413      	add	r3, r2
 8005808:	63bb      	str	r3, [r7, #56]	; 0x38
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	011a      	lsls	r2, r3, #4
 8005810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005812:	4413      	add	r3, r2
 8005814:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005818:	637b      	str	r3, [r7, #52]	; 0x34
 800581a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800581c:	2b00      	cmp	r3, #0
 800581e:	d112      	bne.n	8005846 <HAL_PCD_EP_DB_Transmit+0x302>
 8005820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	b29b      	uxth	r3, r3
 8005826:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800582a:	b29a      	uxth	r2, r3
 800582c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582e:	801a      	strh	r2, [r3, #0]
 8005830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	b29b      	uxth	r3, r3
 8005836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800583a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800583e:	b29a      	uxth	r2, r3
 8005840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005842:	801a      	strh	r2, [r3, #0]
 8005844:	e047      	b.n	80058d6 <HAL_PCD_EP_DB_Transmit+0x392>
 8005846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005848:	2b3e      	cmp	r3, #62	; 0x3e
 800584a:	d811      	bhi.n	8005870 <HAL_PCD_EP_DB_Transmit+0x32c>
 800584c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800584e:	085b      	lsrs	r3, r3, #1
 8005850:	64bb      	str	r3, [r7, #72]	; 0x48
 8005852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <HAL_PCD_EP_DB_Transmit+0x31e>
 800585c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800585e:	3301      	adds	r3, #1
 8005860:	64bb      	str	r3, [r7, #72]	; 0x48
 8005862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005864:	b29b      	uxth	r3, r3
 8005866:	029b      	lsls	r3, r3, #10
 8005868:	b29a      	uxth	r2, r3
 800586a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586c:	801a      	strh	r2, [r3, #0]
 800586e:	e032      	b.n	80058d6 <HAL_PCD_EP_DB_Transmit+0x392>
 8005870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	64bb      	str	r3, [r7, #72]	; 0x48
 8005876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	2b00      	cmp	r3, #0
 800587e:	d102      	bne.n	8005886 <HAL_PCD_EP_DB_Transmit+0x342>
 8005880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005882:	3b01      	subs	r3, #1
 8005884:	64bb      	str	r3, [r7, #72]	; 0x48
 8005886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005888:	b29b      	uxth	r3, r3
 800588a:	029b      	lsls	r3, r3, #10
 800588c:	b29b      	uxth	r3, r3
 800588e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005896:	b29a      	uxth	r2, r3
 8005898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589a:	801a      	strh	r2, [r3, #0]
 800589c:	e01b      	b.n	80058d6 <HAL_PCD_EP_DB_Transmit+0x392>
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	785b      	ldrb	r3, [r3, #1]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d117      	bne.n	80058d6 <HAL_PCD_EP_DB_Transmit+0x392>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	643b      	str	r3, [r7, #64]	; 0x40
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	461a      	mov	r2, r3
 80058b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ba:	4413      	add	r3, r2
 80058bc:	643b      	str	r3, [r7, #64]	; 0x40
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	011a      	lsls	r2, r3, #4
 80058c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058c6:	4413      	add	r3, r2
 80058c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6818      	ldr	r0, [r3, #0]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	6959      	ldr	r1, [r3, #20]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	891a      	ldrh	r2, [r3, #8]
 80058e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	f004 fa46 	bl	8009d76 <USB_WritePMA>
 80058ea:	e1d0      	b.n	8005c8e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	4413      	add	r3, r2
 8005900:	3306      	adds	r3, #6
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	6812      	ldr	r2, [r2, #0]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005914:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	699a      	ldr	r2, [r3, #24]
 800591c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005920:	429a      	cmp	r2, r3
 8005922:	d307      	bcc.n	8005934 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	699a      	ldr	r2, [r3, #24]
 8005928:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800592c:	1ad2      	subs	r2, r2, r3
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	619a      	str	r2, [r3, #24]
 8005932:	e002      	b.n	800593a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2200      	movs	r2, #0
 8005938:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	2b00      	cmp	r3, #0
 8005940:	f040 80c4 	bne.w	8005acc <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	785b      	ldrb	r3, [r3, #1]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d126      	bne.n	800599a <HAL_PCD_EP_DB_Transmit+0x456>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800595a:	b29b      	uxth	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005960:	4413      	add	r3, r2
 8005962:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	011a      	lsls	r2, r3, #4
 800596a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596c:	4413      	add	r3, r2
 800596e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005972:	66bb      	str	r3, [r7, #104]	; 0x68
 8005974:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800597e:	b29a      	uxth	r2, r3
 8005980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b29b      	uxth	r3, r3
 800598a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800598e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005992:	b29a      	uxth	r2, r3
 8005994:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005996:	801a      	strh	r2, [r3, #0]
 8005998:	e01a      	b.n	80059d0 <HAL_PCD_EP_DB_Transmit+0x48c>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	785b      	ldrb	r3, [r3, #1]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d116      	bne.n	80059d0 <HAL_PCD_EP_DB_Transmit+0x48c>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	677b      	str	r3, [r7, #116]	; 0x74
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	461a      	mov	r2, r3
 80059b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059b6:	4413      	add	r3, r2
 80059b8:	677b      	str	r3, [r7, #116]	; 0x74
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	011a      	lsls	r2, r3, #4
 80059c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059c2:	4413      	add	r3, r2
 80059c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059c8:	673b      	str	r3, [r7, #112]	; 0x70
 80059ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059cc:	2200      	movs	r2, #0
 80059ce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d12f      	bne.n	8005a3e <HAL_PCD_EP_DB_Transmit+0x4fa>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	461a      	mov	r2, r3
 80059f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059f6:	4413      	add	r3, r2
 80059f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	011a      	lsls	r2, r3, #4
 8005a02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a06:	4413      	add	r3, r2
 8005a08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a22:	801a      	strh	r2, [r3, #0]
 8005a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a3a:	801a      	strh	r2, [r3, #0]
 8005a3c:	e017      	b.n	8005a6e <HAL_PCD_EP_DB_Transmit+0x52a>
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	785b      	ldrb	r3, [r3, #1]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d113      	bne.n	8005a6e <HAL_PCD_EP_DB_Transmit+0x52a>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	461a      	mov	r2, r3
 8005a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a54:	4413      	add	r3, r2
 8005a56:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	011a      	lsls	r2, r3, #4
 8005a5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a60:	4413      	add	r3, r2
 8005a62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	4619      	mov	r1, r3
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f009 fa2c 	bl	800eed2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f040 8104 	bne.w	8005c8e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	441a      	add	r2, r3
 8005ab2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005abe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	8013      	strh	r3, [r2, #0]
 8005aca:	e0e0      	b.n	8005c8e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005acc:	88fb      	ldrh	r3, [r7, #6]
 8005ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d121      	bne.n	8005b1a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	441a      	add	r2, r3
 8005b02:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	f040 80b4 	bne.w	8005c8e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	695a      	ldr	r2, [r3, #20]
 8005b2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b2e:	441a      	add	r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	69da      	ldr	r2, [r3, #28]
 8005b38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b3c:	441a      	add	r2, r3
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	6a1a      	ldr	r2, [r3, #32]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d309      	bcc.n	8005b62 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	6a1a      	ldr	r2, [r3, #32]
 8005b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b5a:	1ad2      	subs	r2, r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	621a      	str	r2, [r3, #32]
 8005b60:	e015      	b.n	8005b8e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d107      	bne.n	8005b7a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005b6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b6e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005b78:	e009      	b.n	8005b8e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2200      	movs	r2, #0
 8005b84:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	667b      	str	r3, [r7, #100]	; 0x64
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	785b      	ldrb	r3, [r3, #1]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d155      	bne.n	8005c48 <HAL_PCD_EP_DB_Transmit+0x704>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	461a      	mov	r2, r3
 8005bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bb0:	4413      	add	r3, r2
 8005bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	011a      	lsls	r2, r3, #4
 8005bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d112      	bne.n	8005bf0 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005bca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bd8:	801a      	strh	r2, [r3, #0]
 8005bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bec:	801a      	strh	r2, [r3, #0]
 8005bee:	e044      	b.n	8005c7a <HAL_PCD_EP_DB_Transmit+0x736>
 8005bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf2:	2b3e      	cmp	r3, #62	; 0x3e
 8005bf4:	d811      	bhi.n	8005c1a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf8:	085b      	lsrs	r3, r3, #1
 8005bfa:	657b      	str	r3, [r7, #84]	; 0x54
 8005bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c08:	3301      	adds	r3, #1
 8005c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8005c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	029b      	lsls	r3, r3, #10
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c16:	801a      	strh	r2, [r3, #0]
 8005c18:	e02f      	b.n	8005c7a <HAL_PCD_EP_DB_Transmit+0x736>
 8005c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c1c:	095b      	lsrs	r3, r3, #5
 8005c1e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c22:	f003 031f 	and.w	r3, r3, #31
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d102      	bne.n	8005c30 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	029b      	lsls	r3, r3, #10
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c44:	801a      	strh	r2, [r3, #0]
 8005c46:	e018      	b.n	8005c7a <HAL_PCD_EP_DB_Transmit+0x736>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	785b      	ldrb	r3, [r3, #1]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d114      	bne.n	8005c7a <HAL_PCD_EP_DB_Transmit+0x736>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c5e:	4413      	add	r3, r2
 8005c60:	667b      	str	r3, [r7, #100]	; 0x64
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	011a      	lsls	r2, r3, #4
 8005c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c70:	663b      	str	r3, [r7, #96]	; 0x60
 8005c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c78:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	6959      	ldr	r1, [r3, #20]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	895a      	ldrh	r2, [r3, #10]
 8005c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f004 f874 	bl	8009d76 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ca8:	823b      	strh	r3, [r7, #16]
 8005caa:	8a3b      	ldrh	r3, [r7, #16]
 8005cac:	f083 0310 	eor.w	r3, r3, #16
 8005cb0:	823b      	strh	r3, [r7, #16]
 8005cb2:	8a3b      	ldrh	r3, [r7, #16]
 8005cb4:	f083 0320 	eor.w	r3, r3, #32
 8005cb8:	823b      	strh	r3, [r7, #16]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	441a      	add	r2, r3
 8005cc8:	8a3b      	ldrh	r3, [r7, #16]
 8005cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3788      	adds	r7, #136	; 0x88
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	607b      	str	r3, [r7, #4]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	817b      	strh	r3, [r7, #10]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005cfa:	897b      	ldrh	r3, [r7, #10]
 8005cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00b      	beq.n	8005d1e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d06:	897b      	ldrh	r3, [r7, #10]
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	4613      	mov	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4413      	add	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]
 8005d1c:	e009      	b.n	8005d32 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d1e:	897a      	ldrh	r2, [r7, #10]
 8005d20:	4613      	mov	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	4413      	add	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005d32:	893b      	ldrh	r3, [r7, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d107      	bne.n	8005d48 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	80da      	strh	r2, [r3, #6]
 8005d46:	e00b      	b.n	8005d60 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	0c1b      	lsrs	r3, r3, #16
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	371c      	adds	r7, #28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr

08005d6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e26c      	b.n	8006258 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 8087 	beq.w	8005e9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d8c:	4b92      	ldr	r3, [pc, #584]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f003 030c 	and.w	r3, r3, #12
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d00c      	beq.n	8005db2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d98:	4b8f      	ldr	r3, [pc, #572]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f003 030c 	and.w	r3, r3, #12
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d112      	bne.n	8005dca <HAL_RCC_OscConfig+0x5e>
 8005da4:	4b8c      	ldr	r3, [pc, #560]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db0:	d10b      	bne.n	8005dca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db2:	4b89      	ldr	r3, [pc, #548]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d06c      	beq.n	8005e98 <HAL_RCC_OscConfig+0x12c>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d168      	bne.n	8005e98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e246      	b.n	8006258 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd2:	d106      	bne.n	8005de2 <HAL_RCC_OscConfig+0x76>
 8005dd4:	4b80      	ldr	r3, [pc, #512]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a7f      	ldr	r2, [pc, #508]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	e02e      	b.n	8005e40 <HAL_RCC_OscConfig+0xd4>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10c      	bne.n	8005e04 <HAL_RCC_OscConfig+0x98>
 8005dea:	4b7b      	ldr	r3, [pc, #492]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a7a      	ldr	r2, [pc, #488]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	4b78      	ldr	r3, [pc, #480]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a77      	ldr	r2, [pc, #476]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	e01d      	b.n	8005e40 <HAL_RCC_OscConfig+0xd4>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e0c:	d10c      	bne.n	8005e28 <HAL_RCC_OscConfig+0xbc>
 8005e0e:	4b72      	ldr	r3, [pc, #456]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a71      	ldr	r2, [pc, #452]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	4b6f      	ldr	r3, [pc, #444]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a6e      	ldr	r2, [pc, #440]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e00b      	b.n	8005e40 <HAL_RCC_OscConfig+0xd4>
 8005e28:	4b6b      	ldr	r3, [pc, #428]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a6a      	ldr	r2, [pc, #424]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	4b68      	ldr	r3, [pc, #416]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a67      	ldr	r2, [pc, #412]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d013      	beq.n	8005e70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e48:	f7fd f914 	bl	8003074 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e50:	f7fd f910 	bl	8003074 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b64      	cmp	r3, #100	; 0x64
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e1fa      	b.n	8006258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e62:	4b5d      	ldr	r3, [pc, #372]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0f0      	beq.n	8005e50 <HAL_RCC_OscConfig+0xe4>
 8005e6e:	e014      	b.n	8005e9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e70:	f7fd f900 	bl	8003074 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e78:	f7fd f8fc 	bl	8003074 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b64      	cmp	r3, #100	; 0x64
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e1e6      	b.n	8006258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e8a:	4b53      	ldr	r3, [pc, #332]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1f0      	bne.n	8005e78 <HAL_RCC_OscConfig+0x10c>
 8005e96:	e000      	b.n	8005e9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d063      	beq.n	8005f6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ea6:	4b4c      	ldr	r3, [pc, #304]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f003 030c 	and.w	r3, r3, #12
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00b      	beq.n	8005eca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005eb2:	4b49      	ldr	r3, [pc, #292]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f003 030c 	and.w	r3, r3, #12
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d11c      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x18c>
 8005ebe:	4b46      	ldr	r3, [pc, #280]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d116      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eca:	4b43      	ldr	r3, [pc, #268]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x176>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d001      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e1ba      	b.n	8006258 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee2:	4b3d      	ldr	r3, [pc, #244]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	4939      	ldr	r1, [pc, #228]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ef6:	e03a      	b.n	8005f6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d020      	beq.n	8005f42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f00:	4b36      	ldr	r3, [pc, #216]	; (8005fdc <HAL_RCC_OscConfig+0x270>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f06:	f7fd f8b5 	bl	8003074 <HAL_GetTick>
 8005f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f0e:	f7fd f8b1 	bl	8003074 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e19b      	b.n	8006258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f20:	4b2d      	ldr	r3, [pc, #180]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f0      	beq.n	8005f0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2c:	4b2a      	ldr	r3, [pc, #168]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	4927      	ldr	r1, [pc, #156]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	600b      	str	r3, [r1, #0]
 8005f40:	e015      	b.n	8005f6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f42:	4b26      	ldr	r3, [pc, #152]	; (8005fdc <HAL_RCC_OscConfig+0x270>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f48:	f7fd f894 	bl	8003074 <HAL_GetTick>
 8005f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f50:	f7fd f890 	bl	8003074 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e17a      	b.n	8006258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f62:	4b1d      	ldr	r3, [pc, #116]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1f0      	bne.n	8005f50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d03a      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d019      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f82:	4b17      	ldr	r3, [pc, #92]	; (8005fe0 <HAL_RCC_OscConfig+0x274>)
 8005f84:	2201      	movs	r2, #1
 8005f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f88:	f7fd f874 	bl	8003074 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f90:	f7fd f870 	bl	8003074 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e15a      	b.n	8006258 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <HAL_RCC_OscConfig+0x26c>)
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f0      	beq.n	8005f90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005fae:	2001      	movs	r0, #1
 8005fb0:	f000 fb0a 	bl	80065c8 <RCC_Delay>
 8005fb4:	e01c      	b.n	8005ff0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fb6:	4b0a      	ldr	r3, [pc, #40]	; (8005fe0 <HAL_RCC_OscConfig+0x274>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fbc:	f7fd f85a 	bl	8003074 <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fc2:	e00f      	b.n	8005fe4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fc4:	f7fd f856 	bl	8003074 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d908      	bls.n	8005fe4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e140      	b.n	8006258 <HAL_RCC_OscConfig+0x4ec>
 8005fd6:	bf00      	nop
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	42420000 	.word	0x42420000
 8005fe0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fe4:	4b9e      	ldr	r3, [pc, #632]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e9      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 80a6 	beq.w	800614a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ffe:	2300      	movs	r3, #0
 8006000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006002:	4b97      	ldr	r3, [pc, #604]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10d      	bne.n	800602a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800600e:	4b94      	ldr	r3, [pc, #592]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	4a93      	ldr	r2, [pc, #588]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 8006014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006018:	61d3      	str	r3, [r2, #28]
 800601a:	4b91      	ldr	r3, [pc, #580]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006022:	60bb      	str	r3, [r7, #8]
 8006024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006026:	2301      	movs	r3, #1
 8006028:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800602a:	4b8e      	ldr	r3, [pc, #568]	; (8006264 <HAL_RCC_OscConfig+0x4f8>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006032:	2b00      	cmp	r3, #0
 8006034:	d118      	bne.n	8006068 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006036:	4b8b      	ldr	r3, [pc, #556]	; (8006264 <HAL_RCC_OscConfig+0x4f8>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a8a      	ldr	r2, [pc, #552]	; (8006264 <HAL_RCC_OscConfig+0x4f8>)
 800603c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006042:	f7fd f817 	bl	8003074 <HAL_GetTick>
 8006046:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006048:	e008      	b.n	800605c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800604a:	f7fd f813 	bl	8003074 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b64      	cmp	r3, #100	; 0x64
 8006056:	d901      	bls.n	800605c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e0fd      	b.n	8006258 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800605c:	4b81      	ldr	r3, [pc, #516]	; (8006264 <HAL_RCC_OscConfig+0x4f8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0f0      	beq.n	800604a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d106      	bne.n	800607e <HAL_RCC_OscConfig+0x312>
 8006070:	4b7b      	ldr	r3, [pc, #492]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	4a7a      	ldr	r2, [pc, #488]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 8006076:	f043 0301 	orr.w	r3, r3, #1
 800607a:	6213      	str	r3, [r2, #32]
 800607c:	e02d      	b.n	80060da <HAL_RCC_OscConfig+0x36e>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10c      	bne.n	80060a0 <HAL_RCC_OscConfig+0x334>
 8006086:	4b76      	ldr	r3, [pc, #472]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	4a75      	ldr	r2, [pc, #468]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 800608c:	f023 0301 	bic.w	r3, r3, #1
 8006090:	6213      	str	r3, [r2, #32]
 8006092:	4b73      	ldr	r3, [pc, #460]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	4a72      	ldr	r2, [pc, #456]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 8006098:	f023 0304 	bic.w	r3, r3, #4
 800609c:	6213      	str	r3, [r2, #32]
 800609e:	e01c      	b.n	80060da <HAL_RCC_OscConfig+0x36e>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	2b05      	cmp	r3, #5
 80060a6:	d10c      	bne.n	80060c2 <HAL_RCC_OscConfig+0x356>
 80060a8:	4b6d      	ldr	r3, [pc, #436]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	4a6c      	ldr	r2, [pc, #432]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 80060ae:	f043 0304 	orr.w	r3, r3, #4
 80060b2:	6213      	str	r3, [r2, #32]
 80060b4:	4b6a      	ldr	r3, [pc, #424]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	4a69      	ldr	r2, [pc, #420]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 80060ba:	f043 0301 	orr.w	r3, r3, #1
 80060be:	6213      	str	r3, [r2, #32]
 80060c0:	e00b      	b.n	80060da <HAL_RCC_OscConfig+0x36e>
 80060c2:	4b67      	ldr	r3, [pc, #412]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	4a66      	ldr	r2, [pc, #408]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 80060c8:	f023 0301 	bic.w	r3, r3, #1
 80060cc:	6213      	str	r3, [r2, #32]
 80060ce:	4b64      	ldr	r3, [pc, #400]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	4a63      	ldr	r2, [pc, #396]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 80060d4:	f023 0304 	bic.w	r3, r3, #4
 80060d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d015      	beq.n	800610e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060e2:	f7fc ffc7 	bl	8003074 <HAL_GetTick>
 80060e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060e8:	e00a      	b.n	8006100 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ea:	f7fc ffc3 	bl	8003074 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d901      	bls.n	8006100 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e0ab      	b.n	8006258 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006100:	4b57      	ldr	r3, [pc, #348]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0ee      	beq.n	80060ea <HAL_RCC_OscConfig+0x37e>
 800610c:	e014      	b.n	8006138 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800610e:	f7fc ffb1 	bl	8003074 <HAL_GetTick>
 8006112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006114:	e00a      	b.n	800612c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006116:	f7fc ffad 	bl	8003074 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	f241 3288 	movw	r2, #5000	; 0x1388
 8006124:	4293      	cmp	r3, r2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e095      	b.n	8006258 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800612c:	4b4c      	ldr	r3, [pc, #304]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1ee      	bne.n	8006116 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006138:	7dfb      	ldrb	r3, [r7, #23]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d105      	bne.n	800614a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800613e:	4b48      	ldr	r3, [pc, #288]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	4a47      	ldr	r2, [pc, #284]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 8006144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006148:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 8081 	beq.w	8006256 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006154:	4b42      	ldr	r3, [pc, #264]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f003 030c 	and.w	r3, r3, #12
 800615c:	2b08      	cmp	r3, #8
 800615e:	d061      	beq.n	8006224 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d146      	bne.n	80061f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006168:	4b3f      	ldr	r3, [pc, #252]	; (8006268 <HAL_RCC_OscConfig+0x4fc>)
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800616e:	f7fc ff81 	bl	8003074 <HAL_GetTick>
 8006172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006174:	e008      	b.n	8006188 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006176:	f7fc ff7d 	bl	8003074 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e067      	b.n	8006258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006188:	4b35      	ldr	r3, [pc, #212]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1f0      	bne.n	8006176 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800619c:	d108      	bne.n	80061b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800619e:	4b30      	ldr	r3, [pc, #192]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	492d      	ldr	r1, [pc, #180]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061b0:	4b2b      	ldr	r3, [pc, #172]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a19      	ldr	r1, [r3, #32]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	430b      	orrs	r3, r1
 80061c2:	4927      	ldr	r1, [pc, #156]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061c8:	4b27      	ldr	r3, [pc, #156]	; (8006268 <HAL_RCC_OscConfig+0x4fc>)
 80061ca:	2201      	movs	r2, #1
 80061cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ce:	f7fc ff51 	bl	8003074 <HAL_GetTick>
 80061d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061d4:	e008      	b.n	80061e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061d6:	f7fc ff4d 	bl	8003074 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d901      	bls.n	80061e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e037      	b.n	8006258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061e8:	4b1d      	ldr	r3, [pc, #116]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0f0      	beq.n	80061d6 <HAL_RCC_OscConfig+0x46a>
 80061f4:	e02f      	b.n	8006256 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061f6:	4b1c      	ldr	r3, [pc, #112]	; (8006268 <HAL_RCC_OscConfig+0x4fc>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061fc:	f7fc ff3a 	bl	8003074 <HAL_GetTick>
 8006200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006204:	f7fc ff36 	bl	8003074 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e020      	b.n	8006258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006216:	4b12      	ldr	r3, [pc, #72]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1f0      	bne.n	8006204 <HAL_RCC_OscConfig+0x498>
 8006222:	e018      	b.n	8006256 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e013      	b.n	8006258 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006230:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <HAL_RCC_OscConfig+0x4f4>)
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	429a      	cmp	r2, r3
 8006242:	d106      	bne.n	8006252 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800624e:	429a      	cmp	r2, r3
 8006250:	d001      	beq.n	8006256 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40021000 	.word	0x40021000
 8006264:	40007000 	.word	0x40007000
 8006268:	42420060 	.word	0x42420060

0800626c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e0d0      	b.n	8006422 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006280:	4b6a      	ldr	r3, [pc, #424]	; (800642c <HAL_RCC_ClockConfig+0x1c0>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	429a      	cmp	r2, r3
 800628c:	d910      	bls.n	80062b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800628e:	4b67      	ldr	r3, [pc, #412]	; (800642c <HAL_RCC_ClockConfig+0x1c0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f023 0207 	bic.w	r2, r3, #7
 8006296:	4965      	ldr	r1, [pc, #404]	; (800642c <HAL_RCC_ClockConfig+0x1c0>)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	4313      	orrs	r3, r2
 800629c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800629e:	4b63      	ldr	r3, [pc, #396]	; (800642c <HAL_RCC_ClockConfig+0x1c0>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d001      	beq.n	80062b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e0b8      	b.n	8006422 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d020      	beq.n	80062fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062c8:	4b59      	ldr	r3, [pc, #356]	; (8006430 <HAL_RCC_ClockConfig+0x1c4>)
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	4a58      	ldr	r2, [pc, #352]	; (8006430 <HAL_RCC_ClockConfig+0x1c4>)
 80062ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80062d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0308 	and.w	r3, r3, #8
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d005      	beq.n	80062ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062e0:	4b53      	ldr	r3, [pc, #332]	; (8006430 <HAL_RCC_ClockConfig+0x1c4>)
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	4a52      	ldr	r2, [pc, #328]	; (8006430 <HAL_RCC_ClockConfig+0x1c4>)
 80062e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80062ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062ec:	4b50      	ldr	r3, [pc, #320]	; (8006430 <HAL_RCC_ClockConfig+0x1c4>)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	494d      	ldr	r1, [pc, #308]	; (8006430 <HAL_RCC_ClockConfig+0x1c4>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d040      	beq.n	800638c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d107      	bne.n	8006322 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006312:	4b47      	ldr	r3, [pc, #284]	; (8006430 <HAL_RCC_ClockConfig+0x1c4>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d115      	bne.n	800634a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e07f      	b.n	8006422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2b02      	cmp	r3, #2
 8006328:	d107      	bne.n	800633a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800632a:	4b41      	ldr	r3, [pc, #260]	; (8006430 <HAL_RCC_ClockConfig+0x1c4>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d109      	bne.n	800634a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e073      	b.n	8006422 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800633a:	4b3d      	ldr	r3, [pc, #244]	; (8006430 <HAL_RCC_ClockConfig+0x1c4>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e06b      	b.n	8006422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800634a:	4b39      	ldr	r3, [pc, #228]	; (8006430 <HAL_RCC_ClockConfig+0x1c4>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f023 0203 	bic.w	r2, r3, #3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	4936      	ldr	r1, [pc, #216]	; (8006430 <HAL_RCC_ClockConfig+0x1c4>)
 8006358:	4313      	orrs	r3, r2
 800635a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800635c:	f7fc fe8a 	bl	8003074 <HAL_GetTick>
 8006360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006362:	e00a      	b.n	800637a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006364:	f7fc fe86 	bl	8003074 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006372:	4293      	cmp	r3, r2
 8006374:	d901      	bls.n	800637a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e053      	b.n	8006422 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800637a:	4b2d      	ldr	r3, [pc, #180]	; (8006430 <HAL_RCC_ClockConfig+0x1c4>)
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f003 020c 	and.w	r2, r3, #12
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	429a      	cmp	r2, r3
 800638a:	d1eb      	bne.n	8006364 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800638c:	4b27      	ldr	r3, [pc, #156]	; (800642c <HAL_RCC_ClockConfig+0x1c0>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0307 	and.w	r3, r3, #7
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	429a      	cmp	r2, r3
 8006398:	d210      	bcs.n	80063bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800639a:	4b24      	ldr	r3, [pc, #144]	; (800642c <HAL_RCC_ClockConfig+0x1c0>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f023 0207 	bic.w	r2, r3, #7
 80063a2:	4922      	ldr	r1, [pc, #136]	; (800642c <HAL_RCC_ClockConfig+0x1c0>)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063aa:	4b20      	ldr	r3, [pc, #128]	; (800642c <HAL_RCC_ClockConfig+0x1c0>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d001      	beq.n	80063bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e032      	b.n	8006422 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d008      	beq.n	80063da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063c8:	4b19      	ldr	r3, [pc, #100]	; (8006430 <HAL_RCC_ClockConfig+0x1c4>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	4916      	ldr	r1, [pc, #88]	; (8006430 <HAL_RCC_ClockConfig+0x1c4>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d009      	beq.n	80063fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80063e6:	4b12      	ldr	r3, [pc, #72]	; (8006430 <HAL_RCC_ClockConfig+0x1c4>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	490e      	ldr	r1, [pc, #56]	; (8006430 <HAL_RCC_ClockConfig+0x1c4>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063fa:	f000 f821 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 80063fe:	4602      	mov	r2, r0
 8006400:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <HAL_RCC_ClockConfig+0x1c4>)
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	091b      	lsrs	r3, r3, #4
 8006406:	f003 030f 	and.w	r3, r3, #15
 800640a:	490a      	ldr	r1, [pc, #40]	; (8006434 <HAL_RCC_ClockConfig+0x1c8>)
 800640c:	5ccb      	ldrb	r3, [r1, r3]
 800640e:	fa22 f303 	lsr.w	r3, r2, r3
 8006412:	4a09      	ldr	r2, [pc, #36]	; (8006438 <HAL_RCC_ClockConfig+0x1cc>)
 8006414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006416:	4b09      	ldr	r3, [pc, #36]	; (800643c <HAL_RCC_ClockConfig+0x1d0>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4618      	mov	r0, r3
 800641c:	f7fc fc5e 	bl	8002cdc <HAL_InitTick>

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	40022000 	.word	0x40022000
 8006430:	40021000 	.word	0x40021000
 8006434:	0800fc54 	.word	0x0800fc54
 8006438:	20000010 	.word	0x20000010
 800643c:	20000014 	.word	0x20000014

08006440 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006440:	b490      	push	{r4, r7}
 8006442:	b08a      	sub	sp, #40	; 0x28
 8006444:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006446:	4b2a      	ldr	r3, [pc, #168]	; (80064f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006448:	1d3c      	adds	r4, r7, #4
 800644a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800644c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006450:	f240 2301 	movw	r3, #513	; 0x201
 8006454:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	61fb      	str	r3, [r7, #28]
 800645a:	2300      	movs	r3, #0
 800645c:	61bb      	str	r3, [r7, #24]
 800645e:	2300      	movs	r3, #0
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
 8006462:	2300      	movs	r3, #0
 8006464:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800646a:	4b22      	ldr	r3, [pc, #136]	; (80064f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	f003 030c 	and.w	r3, r3, #12
 8006476:	2b04      	cmp	r3, #4
 8006478:	d002      	beq.n	8006480 <HAL_RCC_GetSysClockFreq+0x40>
 800647a:	2b08      	cmp	r3, #8
 800647c:	d003      	beq.n	8006486 <HAL_RCC_GetSysClockFreq+0x46>
 800647e:	e02d      	b.n	80064dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006480:	4b1d      	ldr	r3, [pc, #116]	; (80064f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006482:	623b      	str	r3, [r7, #32]
      break;
 8006484:	e02d      	b.n	80064e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	0c9b      	lsrs	r3, r3, #18
 800648a:	f003 030f 	and.w	r3, r3, #15
 800648e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006492:	4413      	add	r3, r2
 8006494:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006498:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d013      	beq.n	80064cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064a4:	4b13      	ldr	r3, [pc, #76]	; (80064f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	0c5b      	lsrs	r3, r3, #17
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80064b2:	4413      	add	r3, r2
 80064b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80064b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	4a0e      	ldr	r2, [pc, #56]	; (80064f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064be:	fb02 f203 	mul.w	r2, r2, r3
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ca:	e004      	b.n	80064d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	4a0b      	ldr	r2, [pc, #44]	; (80064fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80064d0:	fb02 f303 	mul.w	r3, r2, r3
 80064d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	623b      	str	r3, [r7, #32]
      break;
 80064da:	e002      	b.n	80064e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80064dc:	4b08      	ldr	r3, [pc, #32]	; (8006500 <HAL_RCC_GetSysClockFreq+0xc0>)
 80064de:	623b      	str	r3, [r7, #32]
      break;
 80064e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064e2:	6a3b      	ldr	r3, [r7, #32]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3728      	adds	r7, #40	; 0x28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bc90      	pop	{r4, r7}
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	0800f67c 	.word	0x0800f67c
 80064f4:	40021000 	.word	0x40021000
 80064f8:	00f42400 	.word	0x00f42400
 80064fc:	003d0900 	.word	0x003d0900
 8006500:	007a1200 	.word	0x007a1200

08006504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006508:	4b02      	ldr	r3, [pc, #8]	; (8006514 <HAL_RCC_GetHCLKFreq+0x10>)
 800650a:	681b      	ldr	r3, [r3, #0]
}
 800650c:	4618      	mov	r0, r3
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr
 8006514:	20000010 	.word	0x20000010

08006518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800651c:	f7ff fff2 	bl	8006504 <HAL_RCC_GetHCLKFreq>
 8006520:	4602      	mov	r2, r0
 8006522:	4b05      	ldr	r3, [pc, #20]	; (8006538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	0a1b      	lsrs	r3, r3, #8
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	4903      	ldr	r1, [pc, #12]	; (800653c <HAL_RCC_GetPCLK1Freq+0x24>)
 800652e:	5ccb      	ldrb	r3, [r1, r3]
 8006530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006534:	4618      	mov	r0, r3
 8006536:	bd80      	pop	{r7, pc}
 8006538:	40021000 	.word	0x40021000
 800653c:	0800fc64 	.word	0x0800fc64

08006540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006544:	f7ff ffde 	bl	8006504 <HAL_RCC_GetHCLKFreq>
 8006548:	4602      	mov	r2, r0
 800654a:	4b05      	ldr	r3, [pc, #20]	; (8006560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	0adb      	lsrs	r3, r3, #11
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	4903      	ldr	r1, [pc, #12]	; (8006564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006556:	5ccb      	ldrb	r3, [r1, r3]
 8006558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800655c:	4618      	mov	r0, r3
 800655e:	bd80      	pop	{r7, pc}
 8006560:	40021000 	.word	0x40021000
 8006564:	0800fc64 	.word	0x0800fc64

08006568 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	220f      	movs	r2, #15
 8006576:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006578:	4b11      	ldr	r3, [pc, #68]	; (80065c0 <HAL_RCC_GetClockConfig+0x58>)
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f003 0203 	and.w	r2, r3, #3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006584:	4b0e      	ldr	r3, [pc, #56]	; (80065c0 <HAL_RCC_GetClockConfig+0x58>)
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006590:	4b0b      	ldr	r3, [pc, #44]	; (80065c0 <HAL_RCC_GetClockConfig+0x58>)
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800659c:	4b08      	ldr	r3, [pc, #32]	; (80065c0 <HAL_RCC_GetClockConfig+0x58>)
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	08db      	lsrs	r3, r3, #3
 80065a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80065aa:	4b06      	ldr	r3, [pc, #24]	; (80065c4 <HAL_RCC_GetClockConfig+0x5c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0207 	and.w	r2, r3, #7
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bc80      	pop	{r7}
 80065be:	4770      	bx	lr
 80065c0:	40021000 	.word	0x40021000
 80065c4:	40022000 	.word	0x40022000

080065c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80065d0:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <RCC_Delay+0x34>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a0a      	ldr	r2, [pc, #40]	; (8006600 <RCC_Delay+0x38>)
 80065d6:	fba2 2303 	umull	r2, r3, r2, r3
 80065da:	0a5b      	lsrs	r3, r3, #9
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	fb02 f303 	mul.w	r3, r2, r3
 80065e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80065e4:	bf00      	nop
  }
  while (Delay --);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	1e5a      	subs	r2, r3, #1
 80065ea:	60fa      	str	r2, [r7, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1f9      	bne.n	80065e4 <RCC_Delay+0x1c>
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bc80      	pop	{r7}
 80065fa:	4770      	bx	lr
 80065fc:	20000010 	.word	0x20000010
 8006600:	10624dd3 	.word	0x10624dd3

08006604 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	2300      	movs	r3, #0
 8006612:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d07d      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006620:	2300      	movs	r3, #0
 8006622:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006624:	4b4f      	ldr	r3, [pc, #316]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10d      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006630:	4b4c      	ldr	r3, [pc, #304]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	4a4b      	ldr	r2, [pc, #300]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663a:	61d3      	str	r3, [r2, #28]
 800663c:	4b49      	ldr	r3, [pc, #292]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006644:	60bb      	str	r3, [r7, #8]
 8006646:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006648:	2301      	movs	r3, #1
 800664a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800664c:	4b46      	ldr	r3, [pc, #280]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006654:	2b00      	cmp	r3, #0
 8006656:	d118      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006658:	4b43      	ldr	r3, [pc, #268]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a42      	ldr	r2, [pc, #264]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800665e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006662:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006664:	f7fc fd06 	bl	8003074 <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800666a:	e008      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800666c:	f7fc fd02 	bl	8003074 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b64      	cmp	r3, #100	; 0x64
 8006678:	d901      	bls.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e06d      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800667e:	4b3a      	ldr	r3, [pc, #232]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0f0      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800668a:	4b36      	ldr	r3, [pc, #216]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006692:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d02e      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d027      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066a8:	4b2e      	ldr	r3, [pc, #184]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066b2:	4b2e      	ldr	r3, [pc, #184]	; (800676c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80066b4:	2201      	movs	r2, #1
 80066b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066b8:	4b2c      	ldr	r3, [pc, #176]	; (800676c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80066be:	4a29      	ldr	r2, [pc, #164]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d014      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ce:	f7fc fcd1 	bl	8003074 <HAL_GetTick>
 80066d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d4:	e00a      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066d6:	f7fc fccd 	bl	8003074 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d901      	bls.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e036      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ec:	4b1d      	ldr	r3, [pc, #116]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0ee      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066f8:	4b1a      	ldr	r3, [pc, #104]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	4917      	ldr	r1, [pc, #92]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006706:	4313      	orrs	r3, r2
 8006708:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800670a:	7dfb      	ldrb	r3, [r7, #23]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d105      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006710:	4b14      	ldr	r3, [pc, #80]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	4a13      	ldr	r2, [pc, #76]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800671a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d008      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006728:	4b0e      	ldr	r3, [pc, #56]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	490b      	ldr	r1, [pc, #44]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006736:	4313      	orrs	r3, r2
 8006738:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0310 	and.w	r3, r3, #16
 8006742:	2b00      	cmp	r3, #0
 8006744:	d008      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006746:	4b07      	ldr	r3, [pc, #28]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	4904      	ldr	r1, [pc, #16]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006754:	4313      	orrs	r3, r2
 8006756:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	40021000 	.word	0x40021000
 8006768:	40007000 	.word	0x40007000
 800676c:	42420440 	.word	0x42420440

08006770 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e076      	b.n	8006870 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	2b00      	cmp	r3, #0
 8006788:	d108      	bne.n	800679c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006792:	d009      	beq.n	80067a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	61da      	str	r2, [r3, #28]
 800679a:	e005      	b.n	80067a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d106      	bne.n	80067c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7fc fa06 	bl	8002bd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80067f0:	431a      	orrs	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067fa:	431a      	orrs	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006818:	431a      	orrs	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682c:	ea42 0103 	orr.w	r1, r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006834:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	0c1a      	lsrs	r2, r3, #16
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f002 0204 	and.w	r2, r2, #4
 800684e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	69da      	ldr	r2, [r3, #28]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800685e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b088      	sub	sp, #32
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	603b      	str	r3, [r7, #0]
 8006884:	4613      	mov	r3, r2
 8006886:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006892:	2b01      	cmp	r3, #1
 8006894:	d101      	bne.n	800689a <HAL_SPI_Transmit+0x22>
 8006896:	2302      	movs	r3, #2
 8006898:	e126      	b.n	8006ae8 <HAL_SPI_Transmit+0x270>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068a2:	f7fc fbe7 	bl	8003074 <HAL_GetTick>
 80068a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80068a8:	88fb      	ldrh	r3, [r7, #6]
 80068aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d002      	beq.n	80068be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80068b8:	2302      	movs	r3, #2
 80068ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068bc:	e10b      	b.n	8006ad6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <HAL_SPI_Transmit+0x52>
 80068c4:	88fb      	ldrh	r3, [r7, #6]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d102      	bne.n	80068d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068ce:	e102      	b.n	8006ad6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2203      	movs	r2, #3
 80068d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	88fa      	ldrh	r2, [r7, #6]
 80068e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	88fa      	ldrh	r2, [r7, #6]
 80068ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006916:	d10f      	bne.n	8006938 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006926:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006936:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006942:	2b40      	cmp	r3, #64	; 0x40
 8006944:	d007      	beq.n	8006956 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006954:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800695e:	d14b      	bne.n	80069f8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d002      	beq.n	800696e <HAL_SPI_Transmit+0xf6>
 8006968:	8afb      	ldrh	r3, [r7, #22]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d13e      	bne.n	80069ec <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006972:	881a      	ldrh	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697e:	1c9a      	adds	r2, r3, #2
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006988:	b29b      	uxth	r3, r3
 800698a:	3b01      	subs	r3, #1
 800698c:	b29a      	uxth	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006992:	e02b      	b.n	80069ec <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d112      	bne.n	80069c8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a6:	881a      	ldrh	r2, [r3, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b2:	1c9a      	adds	r2, r3, #2
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80069c6:	e011      	b.n	80069ec <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069c8:	f7fc fb54 	bl	8003074 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d803      	bhi.n	80069e0 <HAL_SPI_Transmit+0x168>
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069de:	d102      	bne.n	80069e6 <HAL_SPI_Transmit+0x16e>
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d102      	bne.n	80069ec <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80069ea:	e074      	b.n	8006ad6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1ce      	bne.n	8006994 <HAL_SPI_Transmit+0x11c>
 80069f6:	e04c      	b.n	8006a92 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <HAL_SPI_Transmit+0x18e>
 8006a00:	8afb      	ldrh	r3, [r7, #22]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d140      	bne.n	8006a88 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	330c      	adds	r3, #12
 8006a10:	7812      	ldrb	r2, [r2, #0]
 8006a12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006a2c:	e02c      	b.n	8006a88 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d113      	bne.n	8006a64 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	330c      	adds	r3, #12
 8006a46:	7812      	ldrb	r2, [r2, #0]
 8006a48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a62:	e011      	b.n	8006a88 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a64:	f7fc fb06 	bl	8003074 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d803      	bhi.n	8006a7c <HAL_SPI_Transmit+0x204>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7a:	d102      	bne.n	8006a82 <HAL_SPI_Transmit+0x20a>
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d102      	bne.n	8006a88 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a86:	e026      	b.n	8006ad6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1cd      	bne.n	8006a2e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 f8b2 	bl	8006c00 <SPI_EndRxTxTransaction>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10a      	bne.n	8006ac6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	613b      	str	r3, [r7, #16]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	613b      	str	r3, [r7, #16]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	613b      	str	r3, [r7, #16]
 8006ac4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d002      	beq.n	8006ad4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	77fb      	strb	r3, [r7, #31]
 8006ad2:	e000      	b.n	8006ad6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006ad4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ae6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3720      	adds	r7, #32
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b088      	sub	sp, #32
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	603b      	str	r3, [r7, #0]
 8006afc:	4613      	mov	r3, r2
 8006afe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b00:	f7fc fab8 	bl	8003074 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	1a9b      	subs	r3, r3, r2
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b10:	f7fc fab0 	bl	8003074 <HAL_GetTick>
 8006b14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b16:	4b39      	ldr	r3, [pc, #228]	; (8006bfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	015b      	lsls	r3, r3, #5
 8006b1c:	0d1b      	lsrs	r3, r3, #20
 8006b1e:	69fa      	ldr	r2, [r7, #28]
 8006b20:	fb02 f303 	mul.w	r3, r2, r3
 8006b24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b26:	e054      	b.n	8006bd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2e:	d050      	beq.n	8006bd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b30:	f7fc faa0 	bl	8003074 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	69fa      	ldr	r2, [r7, #28]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d902      	bls.n	8006b46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d13d      	bne.n	8006bc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b5e:	d111      	bne.n	8006b84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b68:	d004      	beq.n	8006b74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b72:	d107      	bne.n	8006b84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b8c:	d10f      	bne.n	8006bae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e017      	b.n	8006bf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	bf0c      	ite	eq
 8006be2:	2301      	moveq	r3, #1
 8006be4:	2300      	movne	r3, #0
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	461a      	mov	r2, r3
 8006bea:	79fb      	ldrb	r3, [r7, #7]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d19b      	bne.n	8006b28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3720      	adds	r7, #32
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000010 	.word	0x20000010

08006c00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af02      	add	r7, sp, #8
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2200      	movs	r2, #0
 8006c14:	2180      	movs	r1, #128	; 0x80
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f7ff ff6a 	bl	8006af0 <SPI_WaitFlagStateUntilTimeout>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d007      	beq.n	8006c32 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c26:	f043 0220 	orr.w	r2, r3, #32
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e000      	b.n	8006c34 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e041      	b.n	8006cd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d106      	bne.n	8006c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f839 	bl	8006cda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3304      	adds	r3, #4
 8006c78:	4619      	mov	r1, r3
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	f000 f9b4 	bl	8006fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006ce2:	bf00      	nop
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bc80      	pop	{r7}
 8006cea:	4770      	bx	lr

08006cec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d001      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e03a      	b.n	8006d7a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f042 0201 	orr.w	r2, r2, #1
 8006d1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a18      	ldr	r2, [pc, #96]	; (8006d84 <HAL_TIM_Base_Start_IT+0x98>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d00e      	beq.n	8006d44 <HAL_TIM_Base_Start_IT+0x58>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d2e:	d009      	beq.n	8006d44 <HAL_TIM_Base_Start_IT+0x58>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a14      	ldr	r2, [pc, #80]	; (8006d88 <HAL_TIM_Base_Start_IT+0x9c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d004      	beq.n	8006d44 <HAL_TIM_Base_Start_IT+0x58>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a13      	ldr	r2, [pc, #76]	; (8006d8c <HAL_TIM_Base_Start_IT+0xa0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d111      	bne.n	8006d68 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2b06      	cmp	r3, #6
 8006d54:	d010      	beq.n	8006d78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f042 0201 	orr.w	r2, r2, #1
 8006d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d66:	e007      	b.n	8006d78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0201 	orr.w	r2, r2, #1
 8006d76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bc80      	pop	{r7}
 8006d82:	4770      	bx	lr
 8006d84:	40012c00 	.word	0x40012c00
 8006d88:	40000400 	.word	0x40000400
 8006d8c:	40000800 	.word	0x40000800

08006d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d122      	bne.n	8006dec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d11b      	bne.n	8006dec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f06f 0202 	mvn.w	r2, #2
 8006dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	f003 0303 	and.w	r3, r3, #3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f8ed 	bl	8006fb2 <HAL_TIM_IC_CaptureCallback>
 8006dd8:	e005      	b.n	8006de6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f8e0 	bl	8006fa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f8ef 	bl	8006fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f003 0304 	and.w	r3, r3, #4
 8006df6:	2b04      	cmp	r3, #4
 8006df8:	d122      	bne.n	8006e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d11b      	bne.n	8006e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f06f 0204 	mvn.w	r2, #4
 8006e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2202      	movs	r2, #2
 8006e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f8c3 	bl	8006fb2 <HAL_TIM_IC_CaptureCallback>
 8006e2c:	e005      	b.n	8006e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f8b6 	bl	8006fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f8c5 	bl	8006fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f003 0308 	and.w	r3, r3, #8
 8006e4a:	2b08      	cmp	r3, #8
 8006e4c:	d122      	bne.n	8006e94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f003 0308 	and.w	r3, r3, #8
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d11b      	bne.n	8006e94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f06f 0208 	mvn.w	r2, #8
 8006e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2204      	movs	r2, #4
 8006e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f899 	bl	8006fb2 <HAL_TIM_IC_CaptureCallback>
 8006e80:	e005      	b.n	8006e8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f88c 	bl	8006fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f89b 	bl	8006fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	f003 0310 	and.w	r3, r3, #16
 8006e9e:	2b10      	cmp	r3, #16
 8006ea0:	d122      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f003 0310 	and.w	r3, r3, #16
 8006eac:	2b10      	cmp	r3, #16
 8006eae:	d11b      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f06f 0210 	mvn.w	r2, #16
 8006eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2208      	movs	r2, #8
 8006ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f86f 	bl	8006fb2 <HAL_TIM_IC_CaptureCallback>
 8006ed4:	e005      	b.n	8006ee2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f862 	bl	8006fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f871 	bl	8006fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d10e      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d107      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f06f 0201 	mvn.w	r2, #1
 8006f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7fa f8c0 	bl	8001094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1e:	2b80      	cmp	r3, #128	; 0x80
 8006f20:	d10e      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2c:	2b80      	cmp	r3, #128	; 0x80
 8006f2e:	d107      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f8bf 	bl	80070be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4a:	2b40      	cmp	r3, #64	; 0x40
 8006f4c:	d10e      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f58:	2b40      	cmp	r3, #64	; 0x40
 8006f5a:	d107      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f835 	bl	8006fd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f003 0320 	and.w	r3, r3, #32
 8006f76:	2b20      	cmp	r3, #32
 8006f78:	d10e      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f003 0320 	and.w	r3, r3, #32
 8006f84:	2b20      	cmp	r3, #32
 8006f86:	d107      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f06f 0220 	mvn.w	r2, #32
 8006f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f88a 	bl	80070ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f98:	bf00      	nop
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bc80      	pop	{r7}
 8006fb0:	4770      	bx	lr

08006fb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b083      	sub	sp, #12
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bc80      	pop	{r7}
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bc80      	pop	{r7}
 8006fd4:	4770      	bx	lr

08006fd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fde:	bf00      	nop
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bc80      	pop	{r7}
 8006fe6:	4770      	bx	lr

08006fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a29      	ldr	r2, [pc, #164]	; (80070a0 <TIM_Base_SetConfig+0xb8>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00b      	beq.n	8007018 <TIM_Base_SetConfig+0x30>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007006:	d007      	beq.n	8007018 <TIM_Base_SetConfig+0x30>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a26      	ldr	r2, [pc, #152]	; (80070a4 <TIM_Base_SetConfig+0xbc>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d003      	beq.n	8007018 <TIM_Base_SetConfig+0x30>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a25      	ldr	r2, [pc, #148]	; (80070a8 <TIM_Base_SetConfig+0xc0>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d108      	bne.n	800702a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800701e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	4313      	orrs	r3, r2
 8007028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a1c      	ldr	r2, [pc, #112]	; (80070a0 <TIM_Base_SetConfig+0xb8>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00b      	beq.n	800704a <TIM_Base_SetConfig+0x62>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007038:	d007      	beq.n	800704a <TIM_Base_SetConfig+0x62>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a19      	ldr	r2, [pc, #100]	; (80070a4 <TIM_Base_SetConfig+0xbc>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d003      	beq.n	800704a <TIM_Base_SetConfig+0x62>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a18      	ldr	r2, [pc, #96]	; (80070a8 <TIM_Base_SetConfig+0xc0>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d108      	bne.n	800705c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	4313      	orrs	r3, r2
 800705a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a07      	ldr	r2, [pc, #28]	; (80070a0 <TIM_Base_SetConfig+0xb8>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d103      	bne.n	8007090 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	615a      	str	r2, [r3, #20]
}
 8007096:	bf00      	nop
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	bc80      	pop	{r7}
 800709e:	4770      	bx	lr
 80070a0:	40012c00 	.word	0x40012c00
 80070a4:	40000400 	.word	0x40000400
 80070a8:	40000800 	.word	0x40000800

080070ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bc80      	pop	{r7}
 80070bc:	4770      	bx	lr

080070be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070be:	b480      	push	{r7}
 80070c0:	b083      	sub	sp, #12
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bc80      	pop	{r7}
 80070ce:	4770      	bx	lr

080070d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e03f      	b.n	8007162 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d106      	bne.n	80070fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7fb feb0 	bl	8002e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2224      	movs	r2, #36	; 0x24
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68da      	ldr	r2, [r3, #12]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007112:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fba9 	bl	800786c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	691a      	ldr	r2, [r3, #16]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007128:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	695a      	ldr	r2, [r3, #20]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007138:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68da      	ldr	r2, [r3, #12]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007148:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2220      	movs	r2, #32
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2220      	movs	r2, #32
 800715c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	4613      	mov	r3, r2
 8007176:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b20      	cmp	r3, #32
 8007182:	d11d      	bne.n	80071c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <HAL_UART_Receive_IT+0x26>
 800718a:	88fb      	ldrh	r3, [r7, #6]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d101      	bne.n	8007194 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e016      	b.n	80071c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800719a:	2b01      	cmp	r3, #1
 800719c:	d101      	bne.n	80071a2 <HAL_UART_Receive_IT+0x38>
 800719e:	2302      	movs	r3, #2
 80071a0:	e00f      	b.n	80071c2 <HAL_UART_Receive_IT+0x58>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80071b0:	88fb      	ldrh	r3, [r7, #6]
 80071b2:	461a      	mov	r2, r3
 80071b4:	68b9      	ldr	r1, [r7, #8]
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 f9cf 	bl	800755a <UART_Start_Receive_IT>
 80071bc:	4603      	mov	r3, r0
 80071be:	e000      	b.n	80071c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80071c0:	2302      	movs	r3, #2
  }
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
	...

080071cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b08a      	sub	sp, #40	; 0x28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	f003 030f 	and.w	r3, r3, #15
 80071fa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10d      	bne.n	800721e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	f003 0320 	and.w	r3, r3, #32
 8007208:	2b00      	cmp	r3, #0
 800720a:	d008      	beq.n	800721e <HAL_UART_IRQHandler+0x52>
 800720c:	6a3b      	ldr	r3, [r7, #32]
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fa7f 	bl	800771a <UART_Receive_IT>
      return;
 800721c:	e17b      	b.n	8007516 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 80b1 	beq.w	8007388 <HAL_UART_IRQHandler+0x1bc>
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b00      	cmp	r3, #0
 800722e:	d105      	bne.n	800723c <HAL_UART_IRQHandler+0x70>
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007236:	2b00      	cmp	r3, #0
 8007238:	f000 80a6 	beq.w	8007388 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <HAL_UART_IRQHandler+0x90>
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724c:	2b00      	cmp	r3, #0
 800724e:	d005      	beq.n	800725c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007254:	f043 0201 	orr.w	r2, r3, #1
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	f003 0304 	and.w	r3, r3, #4
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <HAL_UART_IRQHandler+0xb0>
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	2b00      	cmp	r3, #0
 800726e:	d005      	beq.n	800727c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007274:	f043 0202 	orr.w	r2, r3, #2
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	f003 0302 	and.w	r3, r3, #2
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <HAL_UART_IRQHandler+0xd0>
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007294:	f043 0204 	orr.w	r2, r3, #4
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	f003 0308 	and.w	r3, r3, #8
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00f      	beq.n	80072c6 <HAL_UART_IRQHandler+0xfa>
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	f003 0320 	and.w	r3, r3, #32
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d104      	bne.n	80072ba <HAL_UART_IRQHandler+0xee>
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d005      	beq.n	80072c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	f043 0208 	orr.w	r2, r3, #8
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f000 811e 	beq.w	800750c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	f003 0320 	and.w	r3, r3, #32
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d007      	beq.n	80072ea <HAL_UART_IRQHandler+0x11e>
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	f003 0320 	and.w	r3, r3, #32
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fa18 	bl	800771a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bf14      	ite	ne
 80072f8:	2301      	movne	r3, #1
 80072fa:	2300      	moveq	r3, #0
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007304:	f003 0308 	and.w	r3, r3, #8
 8007308:	2b00      	cmp	r3, #0
 800730a:	d102      	bne.n	8007312 <HAL_UART_IRQHandler+0x146>
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d031      	beq.n	8007376 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f95a 	bl	80075cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007322:	2b00      	cmp	r3, #0
 8007324:	d023      	beq.n	800736e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	695a      	ldr	r2, [r3, #20]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007334:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733a:	2b00      	cmp	r3, #0
 800733c:	d013      	beq.n	8007366 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007342:	4a76      	ldr	r2, [pc, #472]	; (800751c <HAL_UART_IRQHandler+0x350>)
 8007344:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734a:	4618      	mov	r0, r3
 800734c:	f7fb ffb6 	bl	80032bc <HAL_DMA_Abort_IT>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d016      	beq.n	8007384 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007360:	4610      	mov	r0, r2
 8007362:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007364:	e00e      	b.n	8007384 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f8e3 	bl	8007532 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800736c:	e00a      	b.n	8007384 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f8df 	bl	8007532 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007374:	e006      	b.n	8007384 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f8db 	bl	8007532 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007382:	e0c3      	b.n	800750c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007384:	bf00      	nop
    return;
 8007386:	e0c1      	b.n	800750c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738c:	2b01      	cmp	r3, #1
 800738e:	f040 80a1 	bne.w	80074d4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	f003 0310 	and.w	r3, r3, #16
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 809b 	beq.w	80074d4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	f003 0310 	and.w	r3, r3, #16
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 8095 	beq.w	80074d4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073aa:	2300      	movs	r3, #0
 80073ac:	60fb      	str	r3, [r7, #12]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	60fb      	str	r3, [r7, #12]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d04e      	beq.n	800746c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80073d8:	8a3b      	ldrh	r3, [r7, #16]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f000 8098 	beq.w	8007510 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073e4:	8a3a      	ldrh	r2, [r7, #16]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	f080 8092 	bcs.w	8007510 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	8a3a      	ldrh	r2, [r7, #16]
 80073f0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	2b20      	cmp	r3, #32
 80073fa:	d02b      	beq.n	8007454 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800740a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	695a      	ldr	r2, [r3, #20]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f022 0201 	bic.w	r2, r2, #1
 800741a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	695a      	ldr	r2, [r3, #20]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800742a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2220      	movs	r2, #32
 8007430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68da      	ldr	r2, [r3, #12]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 0210 	bic.w	r2, r2, #16
 8007448:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744e:	4618      	mov	r0, r3
 8007450:	f7fb fef9 	bl	8003246 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800745c:	b29b      	uxth	r3, r3
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	b29b      	uxth	r3, r3
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f86d 	bl	8007544 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800746a:	e051      	b.n	8007510 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007474:	b29b      	uxth	r3, r3
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800747e:	b29b      	uxth	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	d047      	beq.n	8007514 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007484:	8a7b      	ldrh	r3, [r7, #18]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d044      	beq.n	8007514 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007498:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695a      	ldr	r2, [r3, #20]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0201 	bic.w	r2, r2, #1
 80074a8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68da      	ldr	r2, [r3, #12]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 0210 	bic.w	r2, r2, #16
 80074c6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074c8:	8a7b      	ldrh	r3, [r7, #18]
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f839 	bl	8007544 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80074d2:	e01f      	b.n	8007514 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80074d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d008      	beq.n	80074f0 <HAL_UART_IRQHandler+0x324>
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d003      	beq.n	80074f0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f8af 	bl	800764c <UART_Transmit_IT>
    return;
 80074ee:	e012      	b.n	8007516 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00d      	beq.n	8007516 <HAL_UART_IRQHandler+0x34a>
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007500:	2b00      	cmp	r3, #0
 8007502:	d008      	beq.n	8007516 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f8f0 	bl	80076ea <UART_EndTransmit_IT>
    return;
 800750a:	e004      	b.n	8007516 <HAL_UART_IRQHandler+0x34a>
    return;
 800750c:	bf00      	nop
 800750e:	e002      	b.n	8007516 <HAL_UART_IRQHandler+0x34a>
      return;
 8007510:	bf00      	nop
 8007512:	e000      	b.n	8007516 <HAL_UART_IRQHandler+0x34a>
      return;
 8007514:	bf00      	nop
  }
}
 8007516:	3728      	adds	r7, #40	; 0x28
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	08007625 	.word	0x08007625

08007520 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	bc80      	pop	{r7}
 8007530:	4770      	bx	lr

08007532 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800753a:	bf00      	nop
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	bc80      	pop	{r7}
 8007542:	4770      	bx	lr

08007544 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	460b      	mov	r3, r1
 800754e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	bc80      	pop	{r7}
 8007558:	4770      	bx	lr

0800755a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800755a:	b480      	push	{r7}
 800755c:	b085      	sub	sp, #20
 800755e:	af00      	add	r7, sp, #0
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	4613      	mov	r3, r2
 8007566:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	88fa      	ldrh	r2, [r7, #6]
 8007572:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	88fa      	ldrh	r2, [r7, #6]
 8007578:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2222      	movs	r2, #34	; 0x22
 8007584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68da      	ldr	r2, [r3, #12]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800759e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	695a      	ldr	r2, [r3, #20]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0201 	orr.w	r2, r2, #1
 80075ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f042 0220 	orr.w	r2, r2, #32
 80075be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3714      	adds	r7, #20
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bc80      	pop	{r7}
 80075ca:	4770      	bx	lr

080075cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68da      	ldr	r2, [r3, #12]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80075e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	695a      	ldr	r2, [r3, #20]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0201 	bic.w	r2, r2, #1
 80075f2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d107      	bne.n	800760c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68da      	ldr	r2, [r3, #12]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 0210 	bic.w	r2, r2, #16
 800760a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2220      	movs	r2, #32
 8007610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	631a      	str	r2, [r3, #48]	; 0x30
}
 800761a:	bf00      	nop
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	bc80      	pop	{r7}
 8007622:	4770      	bx	lr

08007624 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007630:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f7ff ff77 	bl	8007532 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007644:	bf00      	nop
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b21      	cmp	r3, #33	; 0x21
 800765e:	d13e      	bne.n	80076de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007668:	d114      	bne.n	8007694 <UART_Transmit_IT+0x48>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d110      	bne.n	8007694 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	461a      	mov	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007686:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	1c9a      	adds	r2, r3, #2
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	621a      	str	r2, [r3, #32]
 8007692:	e008      	b.n	80076a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	1c59      	adds	r1, r3, #1
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	6211      	str	r1, [r2, #32]
 800769e:	781a      	ldrb	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	3b01      	subs	r3, #1
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	4619      	mov	r1, r3
 80076b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10f      	bne.n	80076da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68da      	ldr	r2, [r3, #12]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68da      	ldr	r2, [r3, #12]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	e000      	b.n	80076e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076de:	2302      	movs	r3, #2
  }
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bc80      	pop	{r7}
 80076e8:	4770      	bx	lr

080076ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68da      	ldr	r2, [r3, #12]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007700:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2220      	movs	r2, #32
 8007706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7ff ff08 	bl	8007520 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b086      	sub	sp, #24
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b22      	cmp	r3, #34	; 0x22
 800772c:	f040 8099 	bne.w	8007862 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007738:	d117      	bne.n	800776a <UART_Receive_IT+0x50>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d113      	bne.n	800776a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007742:	2300      	movs	r3, #0
 8007744:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	b29b      	uxth	r3, r3
 8007754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007758:	b29a      	uxth	r2, r3
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007762:	1c9a      	adds	r2, r3, #2
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	629a      	str	r2, [r3, #40]	; 0x28
 8007768:	e026      	b.n	80077b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007770:	2300      	movs	r3, #0
 8007772:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800777c:	d007      	beq.n	800778e <UART_Receive_IT+0x74>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10a      	bne.n	800779c <UART_Receive_IT+0x82>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d106      	bne.n	800779c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	b2da      	uxtb	r2, r3
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	701a      	strb	r2, [r3, #0]
 800779a:	e008      	b.n	80077ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b2:	1c5a      	adds	r2, r3, #1
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077bc:	b29b      	uxth	r3, r3
 80077be:	3b01      	subs	r3, #1
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	4619      	mov	r1, r3
 80077c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d148      	bne.n	800785e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68da      	ldr	r2, [r3, #12]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f022 0220 	bic.w	r2, r2, #32
 80077da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68da      	ldr	r2, [r3, #12]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	695a      	ldr	r2, [r3, #20]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f022 0201 	bic.w	r2, r2, #1
 80077fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2220      	movs	r2, #32
 8007800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007808:	2b01      	cmp	r3, #1
 800780a:	d123      	bne.n	8007854 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68da      	ldr	r2, [r3, #12]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0210 	bic.w	r2, r2, #16
 8007820:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0310 	and.w	r3, r3, #16
 800782c:	2b10      	cmp	r3, #16
 800782e:	d10a      	bne.n	8007846 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007830:	2300      	movs	r3, #0
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff fe79 	bl	8007544 <HAL_UARTEx_RxEventCallback>
 8007852:	e002      	b.n	800785a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7f9 f9ed 	bl	8000c34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	e002      	b.n	8007864 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	e000      	b.n	8007864 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007862:	2302      	movs	r3, #2
  }
}
 8007864:	4618      	mov	r0, r3
 8007866:	3718      	adds	r7, #24
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68da      	ldr	r2, [r3, #12]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	430a      	orrs	r2, r1
 8007888:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689a      	ldr	r2, [r3, #8]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	431a      	orrs	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	4313      	orrs	r3, r2
 800789a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80078a6:	f023 030c 	bic.w	r3, r3, #12
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	6812      	ldr	r2, [r2, #0]
 80078ae:	68b9      	ldr	r1, [r7, #8]
 80078b0:	430b      	orrs	r3, r1
 80078b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	699a      	ldr	r2, [r3, #24]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a2c      	ldr	r2, [pc, #176]	; (8007980 <UART_SetConfig+0x114>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d103      	bne.n	80078dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80078d4:	f7fe fe34 	bl	8006540 <HAL_RCC_GetPCLK2Freq>
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	e002      	b.n	80078e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80078dc:	f7fe fe1c 	bl	8006518 <HAL_RCC_GetPCLK1Freq>
 80078e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	4613      	mov	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	009a      	lsls	r2, r3, #2
 80078ec:	441a      	add	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f8:	4a22      	ldr	r2, [pc, #136]	; (8007984 <UART_SetConfig+0x118>)
 80078fa:	fba2 2303 	umull	r2, r3, r2, r3
 80078fe:	095b      	lsrs	r3, r3, #5
 8007900:	0119      	lsls	r1, r3, #4
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	4613      	mov	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	009a      	lsls	r2, r3, #2
 800790c:	441a      	add	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	fbb2 f2f3 	udiv	r2, r2, r3
 8007918:	4b1a      	ldr	r3, [pc, #104]	; (8007984 <UART_SetConfig+0x118>)
 800791a:	fba3 0302 	umull	r0, r3, r3, r2
 800791e:	095b      	lsrs	r3, r3, #5
 8007920:	2064      	movs	r0, #100	; 0x64
 8007922:	fb00 f303 	mul.w	r3, r0, r3
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	011b      	lsls	r3, r3, #4
 800792a:	3332      	adds	r3, #50	; 0x32
 800792c:	4a15      	ldr	r2, [pc, #84]	; (8007984 <UART_SetConfig+0x118>)
 800792e:	fba2 2303 	umull	r2, r3, r2, r3
 8007932:	095b      	lsrs	r3, r3, #5
 8007934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007938:	4419      	add	r1, r3
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	4613      	mov	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	009a      	lsls	r2, r3, #2
 8007944:	441a      	add	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007950:	4b0c      	ldr	r3, [pc, #48]	; (8007984 <UART_SetConfig+0x118>)
 8007952:	fba3 0302 	umull	r0, r3, r3, r2
 8007956:	095b      	lsrs	r3, r3, #5
 8007958:	2064      	movs	r0, #100	; 0x64
 800795a:	fb00 f303 	mul.w	r3, r0, r3
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	011b      	lsls	r3, r3, #4
 8007962:	3332      	adds	r3, #50	; 0x32
 8007964:	4a07      	ldr	r2, [pc, #28]	; (8007984 <UART_SetConfig+0x118>)
 8007966:	fba2 2303 	umull	r2, r3, r2, r3
 800796a:	095b      	lsrs	r3, r3, #5
 800796c:	f003 020f 	and.w	r2, r3, #15
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	440a      	add	r2, r1
 8007976:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007978:	bf00      	nop
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	40013800 	.word	0x40013800
 8007984:	51eb851f 	.word	0x51eb851f

08007988 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007988:	b084      	sub	sp, #16
 800798a:	b480      	push	{r7}
 800798c:	b083      	sub	sp, #12
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	f107 0014 	add.w	r0, r7, #20
 8007996:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bc80      	pop	{r7}
 80079a4:	b004      	add	sp, #16
 80079a6:	4770      	bx	lr

080079a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80079b8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80079bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr

080079d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80079dc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80079e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	43db      	mvns	r3, r3
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	4013      	ands	r3, r2
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bc80      	pop	{r7}
 8007a06:	4770      	bx	lr

08007a08 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	460b      	mov	r3, r1
 8007a12:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bc80      	pop	{r7}
 8007a1e:	4770      	bx	lr

08007a20 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007a20:	b084      	sub	sp, #16
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	f107 0014 	add.w	r0, r7, #20
 8007a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bc80      	pop	{r7}
 8007a5c:	b004      	add	sp, #16
 8007a5e:	4770      	bx	lr

08007a60 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b09b      	sub	sp, #108	; 0x6c
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a86:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	78db      	ldrb	r3, [r3, #3]
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d81f      	bhi.n	8007ad2 <USB_ActivateEndpoint+0x72>
 8007a92:	a201      	add	r2, pc, #4	; (adr r2, 8007a98 <USB_ActivateEndpoint+0x38>)
 8007a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a98:	08007aa9 	.word	0x08007aa9
 8007a9c:	08007ac5 	.word	0x08007ac5
 8007aa0:	08007adb 	.word	0x08007adb
 8007aa4:	08007ab7 	.word	0x08007ab7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007aa8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007aac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ab0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007ab4:	e012      	b.n	8007adc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007ab6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007aba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007abe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007ac2:	e00b      	b.n	8007adc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007ac4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007ac8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007acc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007ad0:	e004      	b.n	8007adc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007ad8:	e000      	b.n	8007adc <USB_ActivateEndpoint+0x7c>
      break;
 8007ada:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	441a      	add	r2, r3
 8007ae6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	441a      	add	r2, r3
 8007b2c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	7b1b      	ldrb	r3, [r3, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f040 8149 	bne.w	8007de0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	785b      	ldrb	r3, [r3, #1]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 8084 	beq.w	8007c60 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	617b      	str	r3, [r7, #20]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	461a      	mov	r2, r3
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	4413      	add	r3, r2
 8007b6a:	617b      	str	r3, [r7, #20]
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	011a      	lsls	r2, r3, #4
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b7a:	613b      	str	r3, [r7, #16]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	88db      	ldrh	r3, [r3, #6]
 8007b80:	085b      	lsrs	r3, r3, #1
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	881b      	ldrh	r3, [r3, #0]
 8007b98:	81fb      	strh	r3, [r7, #14]
 8007b9a:	89fb      	ldrh	r3, [r7, #14]
 8007b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d01b      	beq.n	8007bdc <USB_ActivateEndpoint+0x17c>
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bba:	81bb      	strh	r3, [r7, #12]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	441a      	add	r2, r3
 8007bc6:	89bb      	ldrh	r3, [r7, #12]
 8007bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	78db      	ldrb	r3, [r3, #3]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d020      	beq.n	8007c26 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bfa:	813b      	strh	r3, [r7, #8]
 8007bfc:	893b      	ldrh	r3, [r7, #8]
 8007bfe:	f083 0320 	eor.w	r3, r3, #32
 8007c02:	813b      	strh	r3, [r7, #8]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	441a      	add	r2, r3
 8007c0e:	893b      	ldrh	r3, [r7, #8]
 8007c10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	8013      	strh	r3, [r2, #0]
 8007c24:	e27f      	b.n	8008126 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4413      	add	r3, r2
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c3c:	817b      	strh	r3, [r7, #10]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	441a      	add	r2, r3
 8007c48:	897b      	ldrh	r3, [r7, #10]
 8007c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	8013      	strh	r3, [r2, #0]
 8007c5e:	e262      	b.n	8008126 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c70:	4413      	add	r3, r2
 8007c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	011a      	lsls	r2, r3, #4
 8007c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007c82:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	88db      	ldrh	r3, [r3, #6]
 8007c88:	085b      	lsrs	r3, r3, #1
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	005b      	lsls	r3, r3, #1
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c92:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca4:	4413      	add	r3, r2
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	011a      	lsls	r2, r3, #4
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007cb6:	623b      	str	r3, [r7, #32]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d112      	bne.n	8007ce6 <USB_ActivateEndpoint+0x286>
 8007cc0:	6a3b      	ldr	r3, [r7, #32]
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	801a      	strh	r2, [r3, #0]
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	801a      	strh	r2, [r3, #0]
 8007ce4:	e02f      	b.n	8007d46 <USB_ActivateEndpoint+0x2e6>
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	2b3e      	cmp	r3, #62	; 0x3e
 8007cec:	d813      	bhi.n	8007d16 <USB_ActivateEndpoint+0x2b6>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	085b      	lsrs	r3, r3, #1
 8007cf4:	663b      	str	r3, [r7, #96]	; 0x60
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d002      	beq.n	8007d08 <USB_ActivateEndpoint+0x2a8>
 8007d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d04:	3301      	adds	r3, #1
 8007d06:	663b      	str	r3, [r7, #96]	; 0x60
 8007d08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	029b      	lsls	r3, r3, #10
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	801a      	strh	r2, [r3, #0]
 8007d14:	e017      	b.n	8007d46 <USB_ActivateEndpoint+0x2e6>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	095b      	lsrs	r3, r3, #5
 8007d1c:	663b      	str	r3, [r7, #96]	; 0x60
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	f003 031f 	and.w	r3, r3, #31
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d102      	bne.n	8007d30 <USB_ActivateEndpoint+0x2d0>
 8007d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	663b      	str	r3, [r7, #96]	; 0x60
 8007d30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	029b      	lsls	r3, r3, #10
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	83fb      	strh	r3, [r7, #30]
 8007d54:	8bfb      	ldrh	r3, [r7, #30]
 8007d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d01b      	beq.n	8007d96 <USB_ActivateEndpoint+0x336>
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4413      	add	r3, r2
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d74:	83bb      	strh	r3, [r7, #28]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	441a      	add	r2, r3
 8007d80:	8bbb      	ldrh	r3, [r7, #28]
 8007d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	881b      	ldrh	r3, [r3, #0]
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dac:	837b      	strh	r3, [r7, #26]
 8007dae:	8b7b      	ldrh	r3, [r7, #26]
 8007db0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007db4:	837b      	strh	r3, [r7, #26]
 8007db6:	8b7b      	ldrh	r3, [r7, #26]
 8007db8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007dbc:	837b      	strh	r3, [r7, #26]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	441a      	add	r2, r3
 8007dc8:	8b7b      	ldrh	r3, [r7, #26]
 8007dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	8013      	strh	r3, [r2, #0]
 8007dde:	e1a2      	b.n	8008126 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007df6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	441a      	add	r2, r3
 8007e04:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007e08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e10:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	461a      	mov	r2, r3
 8007e2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e2c:	4413      	add	r3, r2
 8007e2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	011a      	lsls	r2, r3, #4
 8007e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e3e:	657b      	str	r3, [r7, #84]	; 0x54
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	891b      	ldrh	r3, [r3, #8]
 8007e44:	085b      	lsrs	r3, r3, #1
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	005b      	lsls	r3, r3, #1
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e4e:	801a      	strh	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	653b      	str	r3, [r7, #80]	; 0x50
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e60:	4413      	add	r3, r2
 8007e62:	653b      	str	r3, [r7, #80]	; 0x50
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	011a      	lsls	r2, r3, #4
 8007e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	895b      	ldrh	r3, [r3, #10]
 8007e78:	085b      	lsrs	r3, r3, #1
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e82:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	785b      	ldrb	r3, [r3, #1]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f040 8091 	bne.w	8007fb0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007e9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d01b      	beq.n	8007ede <USB_ActivateEndpoint+0x47e>
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4413      	add	r3, r2
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ebc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	441a      	add	r2, r3
 8007ec8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ed2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4413      	add	r3, r2
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	873b      	strh	r3, [r7, #56]	; 0x38
 8007eec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d01b      	beq.n	8007f2e <USB_ActivateEndpoint+0x4ce>
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	441a      	add	r2, r3
 8007f18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f44:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007f46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007f48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f4c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007f4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007f50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007f54:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	441a      	add	r2, r3
 8007f60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f8c:	867b      	strh	r3, [r7, #50]	; 0x32
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	441a      	add	r2, r3
 8007f98:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	8013      	strh	r3, [r2, #0]
 8007fae:	e0ba      	b.n	8008126 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	881b      	ldrh	r3, [r3, #0]
 8007fbc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007fc0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d01d      	beq.n	8008008 <USB_ActivateEndpoint+0x5a8>
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	881b      	ldrh	r3, [r3, #0]
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fe2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	441a      	add	r2, r3
 8007ff0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ffc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008004:	b29b      	uxth	r3, r3
 8008006:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008018:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800801c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008020:	2b00      	cmp	r3, #0
 8008022:	d01d      	beq.n	8008060 <USB_ActivateEndpoint+0x600>
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	b29b      	uxth	r3, r3
 8008032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	441a      	add	r2, r3
 8008048:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800804c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008058:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800805c:	b29b      	uxth	r3, r3
 800805e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	78db      	ldrb	r3, [r3, #3]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d024      	beq.n	80080b2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4413      	add	r3, r2
 8008072:	881b      	ldrh	r3, [r3, #0]
 8008074:	b29b      	uxth	r3, r3
 8008076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800807a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800807e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008082:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008086:	f083 0320 	eor.w	r3, r3, #32
 800808a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	441a      	add	r2, r3
 8008098:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800809c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	8013      	strh	r3, [r2, #0]
 80080b0:	e01d      	b.n	80080ee <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	441a      	add	r2, r3
 80080d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80080da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008104:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	441a      	add	r2, r3
 8008110:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800811a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800811e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008122:	b29b      	uxth	r3, r3
 8008124:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008126:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800812a:	4618      	mov	r0, r3
 800812c:	376c      	adds	r7, #108	; 0x6c
 800812e:	46bd      	mov	sp, r7
 8008130:	bc80      	pop	{r7}
 8008132:	4770      	bx	lr

08008134 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008134:	b480      	push	{r7}
 8008136:	b08d      	sub	sp, #52	; 0x34
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	7b1b      	ldrb	r3, [r3, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	f040 808e 	bne.w	8008264 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	785b      	ldrb	r3, [r3, #1]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d044      	beq.n	80081da <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	81bb      	strh	r3, [r7, #12]
 800815e:	89bb      	ldrh	r3, [r7, #12]
 8008160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008164:	2b00      	cmp	r3, #0
 8008166:	d01b      	beq.n	80081a0 <USB_DeactivateEndpoint+0x6c>
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4413      	add	r3, r2
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	b29b      	uxth	r3, r3
 8008176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800817a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800817e:	817b      	strh	r3, [r7, #10]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	441a      	add	r2, r3
 800818a:	897b      	ldrh	r3, [r7, #10]
 800818c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008198:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800819c:	b29b      	uxth	r3, r3
 800819e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081b6:	813b      	strh	r3, [r7, #8]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	441a      	add	r2, r3
 80081c2:	893b      	ldrh	r3, [r7, #8]
 80081c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	8013      	strh	r3, [r2, #0]
 80081d8:	e192      	b.n	8008500 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	881b      	ldrh	r3, [r3, #0]
 80081e6:	827b      	strh	r3, [r7, #18]
 80081e8:	8a7b      	ldrh	r3, [r7, #18]
 80081ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d01b      	beq.n	800822a <USB_DeactivateEndpoint+0xf6>
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	881b      	ldrh	r3, [r3, #0]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008208:	823b      	strh	r3, [r7, #16]
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	441a      	add	r2, r3
 8008214:	8a3b      	ldrh	r3, [r7, #16]
 8008216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800821a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800821e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008226:	b29b      	uxth	r3, r3
 8008228:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	b29b      	uxth	r3, r3
 8008238:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800823c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008240:	81fb      	strh	r3, [r7, #14]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	441a      	add	r2, r3
 800824c:	89fb      	ldrh	r3, [r7, #14]
 800824e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800825a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800825e:	b29b      	uxth	r3, r3
 8008260:	8013      	strh	r3, [r2, #0]
 8008262:	e14d      	b.n	8008500 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	785b      	ldrb	r3, [r3, #1]
 8008268:	2b00      	cmp	r3, #0
 800826a:	f040 80a5 	bne.w	80083b8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	881b      	ldrh	r3, [r3, #0]
 800827a:	843b      	strh	r3, [r7, #32]
 800827c:	8c3b      	ldrh	r3, [r7, #32]
 800827e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d01b      	beq.n	80082be <USB_DeactivateEndpoint+0x18a>
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	b29b      	uxth	r3, r3
 8008294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800829c:	83fb      	strh	r3, [r7, #30]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	441a      	add	r2, r3
 80082a8:	8bfb      	ldrh	r3, [r7, #30]
 80082aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	83bb      	strh	r3, [r7, #28]
 80082cc:	8bbb      	ldrh	r3, [r7, #28]
 80082ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d01b      	beq.n	800830e <USB_DeactivateEndpoint+0x1da>
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	881b      	ldrh	r3, [r3, #0]
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ec:	837b      	strh	r3, [r7, #26]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	441a      	add	r2, r3
 80082f8:	8b7b      	ldrh	r3, [r7, #26]
 80082fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008306:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800830a:	b29b      	uxth	r3, r3
 800830c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	b29b      	uxth	r3, r3
 800831c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008324:	833b      	strh	r3, [r7, #24]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	441a      	add	r2, r3
 8008330:	8b3b      	ldrh	r3, [r7, #24]
 8008332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800833a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800833e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008342:	b29b      	uxth	r3, r3
 8008344:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	881b      	ldrh	r3, [r3, #0]
 8008352:	b29b      	uxth	r3, r3
 8008354:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800835c:	82fb      	strh	r3, [r7, #22]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	441a      	add	r2, r3
 8008368:	8afb      	ldrh	r3, [r7, #22]
 800836a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800836e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800837a:	b29b      	uxth	r3, r3
 800837c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	881b      	ldrh	r3, [r3, #0]
 800838a:	b29b      	uxth	r3, r3
 800838c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008394:	82bb      	strh	r3, [r7, #20]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	441a      	add	r2, r3
 80083a0:	8abb      	ldrh	r3, [r7, #20]
 80083a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	8013      	strh	r3, [r2, #0]
 80083b6:	e0a3      	b.n	8008500 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	881b      	ldrh	r3, [r3, #0]
 80083c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80083c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80083c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d01b      	beq.n	8008408 <USB_DeactivateEndpoint+0x2d4>
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	441a      	add	r2, r3
 80083f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80083f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008404:	b29b      	uxth	r3, r3
 8008406:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	881b      	ldrh	r3, [r3, #0]
 8008414:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008416:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800841c:	2b00      	cmp	r3, #0
 800841e:	d01b      	beq.n	8008458 <USB_DeactivateEndpoint+0x324>
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	b29b      	uxth	r3, r3
 800842e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008436:	853b      	strh	r3, [r7, #40]	; 0x28
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	441a      	add	r2, r3
 8008442:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800844c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008450:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008454:	b29b      	uxth	r3, r3
 8008456:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	b29b      	uxth	r3, r3
 8008466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800846a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800846e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	441a      	add	r2, r3
 800847a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800847c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008484:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800848c:	b29b      	uxth	r3, r3
 800848e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	b29b      	uxth	r3, r3
 800849e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	441a      	add	r2, r3
 80084b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084de:	847b      	strh	r3, [r7, #34]	; 0x22
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	441a      	add	r2, r3
 80084ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80084ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3734      	adds	r7, #52	; 0x34
 8008506:	46bd      	mov	sp, r7
 8008508:	bc80      	pop	{r7}
 800850a:	4770      	bx	lr

0800850c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b0cc      	sub	sp, #304	; 0x130
 8008510:	af00      	add	r7, sp, #0
 8008512:	1d3b      	adds	r3, r7, #4
 8008514:	6018      	str	r0, [r3, #0]
 8008516:	463b      	mov	r3, r7
 8008518:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800851a:	463b      	mov	r3, r7
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	785b      	ldrb	r3, [r3, #1]
 8008520:	2b01      	cmp	r3, #1
 8008522:	f040 872e 	bne.w	8009382 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008526:	463b      	mov	r3, r7
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	699a      	ldr	r2, [r3, #24]
 800852c:	463b      	mov	r3, r7
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	429a      	cmp	r2, r3
 8008534:	d905      	bls.n	8008542 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008536:	463b      	mov	r3, r7
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008540:	e004      	b.n	800854c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008542:	463b      	mov	r3, r7
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800854c:	463b      	mov	r3, r7
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	7b1b      	ldrb	r3, [r3, #12]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d134      	bne.n	80085c0 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008556:	463b      	mov	r3, r7
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6959      	ldr	r1, [r3, #20]
 800855c:	463b      	mov	r3, r7
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	88da      	ldrh	r2, [r3, #6]
 8008562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008566:	b29b      	uxth	r3, r3
 8008568:	1d38      	adds	r0, r7, #4
 800856a:	6800      	ldr	r0, [r0, #0]
 800856c:	f001 fc03 	bl	8009d76 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008570:	f107 0310 	add.w	r3, r7, #16
 8008574:	1d3a      	adds	r2, r7, #4
 8008576:	6812      	ldr	r2, [r2, #0]
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	1d3b      	adds	r3, r7, #4
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008582:	b29b      	uxth	r3, r3
 8008584:	4619      	mov	r1, r3
 8008586:	f107 0310 	add.w	r3, r7, #16
 800858a:	f107 0210 	add.w	r2, r7, #16
 800858e:	6812      	ldr	r2, [r2, #0]
 8008590:	440a      	add	r2, r1
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	463b      	mov	r3, r7
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	011a      	lsls	r2, r3, #4
 800859c:	f107 0310 	add.w	r3, r7, #16
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4413      	add	r3, r2
 80085a4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80085a8:	f107 030c 	add.w	r3, r7, #12
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	f107 030c 	add.w	r3, r7, #12
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	801a      	strh	r2, [r3, #0]
 80085bc:	f000 beac 	b.w	8009318 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80085c0:	463b      	mov	r3, r7
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	78db      	ldrb	r3, [r3, #3]
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	f040 838c 	bne.w	8008ce4 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80085cc:	463b      	mov	r3, r7
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6a1a      	ldr	r2, [r3, #32]
 80085d2:	463b      	mov	r3, r7
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	429a      	cmp	r2, r3
 80085da:	f240 8330 	bls.w	8008c3e <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80085de:	1d3b      	adds	r3, r7, #4
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	463b      	mov	r3, r7
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4413      	add	r3, r2
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80085fc:	1d3b      	adds	r3, r7, #4
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	463b      	mov	r3, r7
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	441a      	add	r2, r3
 800860a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800860e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008616:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800861a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800861e:	b29b      	uxth	r3, r3
 8008620:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008622:	463b      	mov	r3, r7
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6a1a      	ldr	r2, [r3, #32]
 8008628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800862c:	1ad2      	subs	r2, r2, r3
 800862e:	463b      	mov	r3, r7
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008634:	1d3b      	adds	r3, r7, #4
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	463b      	mov	r3, r7
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	881b      	ldrh	r3, [r3, #0]
 8008644:	b29b      	uxth	r3, r3
 8008646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864a:	2b00      	cmp	r3, #0
 800864c:	f000 819e 	beq.w	800898c <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008650:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008654:	1d3a      	adds	r2, r7, #4
 8008656:	6812      	ldr	r2, [r2, #0]
 8008658:	601a      	str	r2, [r3, #0]
 800865a:	463b      	mov	r3, r7
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	785b      	ldrb	r3, [r3, #1]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d17a      	bne.n	800875a <USB_EPStartXfer+0x24e>
 8008664:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008668:	1d3a      	adds	r2, r7, #4
 800866a:	6812      	ldr	r2, [r2, #0]
 800866c:	601a      	str	r2, [r3, #0]
 800866e:	1d3b      	adds	r3, r7, #4
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008676:	b29b      	uxth	r3, r3
 8008678:	4619      	mov	r1, r3
 800867a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800867e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008682:	6812      	ldr	r2, [r2, #0]
 8008684:	440a      	add	r2, r1
 8008686:	601a      	str	r2, [r3, #0]
 8008688:	463b      	mov	r3, r7
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	011a      	lsls	r2, r3, #4
 8008690:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4413      	add	r3, r2
 8008698:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800869c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d11a      	bne.n	80086e0 <USB_EPStartXfer+0x1d4>
 80086aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	881b      	ldrh	r3, [r3, #0]
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	801a      	strh	r2, [r3, #0]
 80086c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	881b      	ldrh	r3, [r3, #0]
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	801a      	strh	r2, [r3, #0]
 80086de:	e062      	b.n	80087a6 <USB_EPStartXfer+0x29a>
 80086e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086e4:	2b3e      	cmp	r3, #62	; 0x3e
 80086e6:	d819      	bhi.n	800871c <USB_EPStartXfer+0x210>
 80086e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ec:	085b      	lsrs	r3, r3, #1
 80086ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80086f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d004      	beq.n	8008708 <USB_EPStartXfer+0x1fc>
 80086fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008702:	3301      	adds	r3, #1
 8008704:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008708:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800870c:	b29b      	uxth	r3, r3
 800870e:	029b      	lsls	r3, r3, #10
 8008710:	b29a      	uxth	r2, r3
 8008712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	801a      	strh	r2, [r3, #0]
 800871a:	e044      	b.n	80087a6 <USB_EPStartXfer+0x29a>
 800871c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008720:	095b      	lsrs	r3, r3, #5
 8008722:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800872a:	f003 031f 	and.w	r3, r3, #31
 800872e:	2b00      	cmp	r3, #0
 8008730:	d104      	bne.n	800873c <USB_EPStartXfer+0x230>
 8008732:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008736:	3b01      	subs	r3, #1
 8008738:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800873c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008740:	b29b      	uxth	r3, r3
 8008742:	029b      	lsls	r3, r3, #10
 8008744:	b29b      	uxth	r3, r3
 8008746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800874a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800874e:	b29a      	uxth	r2, r3
 8008750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	801a      	strh	r2, [r3, #0]
 8008758:	e025      	b.n	80087a6 <USB_EPStartXfer+0x29a>
 800875a:	463b      	mov	r3, r7
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	785b      	ldrb	r3, [r3, #1]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d120      	bne.n	80087a6 <USB_EPStartXfer+0x29a>
 8008764:	1d3b      	adds	r3, r7, #4
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800876c:	b29b      	uxth	r3, r3
 800876e:	4619      	mov	r1, r3
 8008770:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008774:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008778:	6812      	ldr	r2, [r2, #0]
 800877a:	440a      	add	r2, r1
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	463b      	mov	r3, r7
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	011a      	lsls	r2, r3, #4
 8008786:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4413      	add	r3, r2
 800878e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800879c:	b29a      	uxth	r2, r3
 800879e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80087a6:	463b      	mov	r3, r7
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	895b      	ldrh	r3, [r3, #10]
 80087ac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087b0:	463b      	mov	r3, r7
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6959      	ldr	r1, [r3, #20]
 80087b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80087c0:	1d38      	adds	r0, r7, #4
 80087c2:	6800      	ldr	r0, [r0, #0]
 80087c4:	f001 fad7 	bl	8009d76 <USB_WritePMA>
            ep->xfer_buff += len;
 80087c8:	463b      	mov	r3, r7
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	695a      	ldr	r2, [r3, #20]
 80087ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d2:	441a      	add	r2, r3
 80087d4:	463b      	mov	r3, r7
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80087da:	463b      	mov	r3, r7
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	6a1a      	ldr	r2, [r3, #32]
 80087e0:	463b      	mov	r3, r7
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d909      	bls.n	80087fe <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80087ea:	463b      	mov	r3, r7
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	6a1a      	ldr	r2, [r3, #32]
 80087f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087f4:	1ad2      	subs	r2, r2, r3
 80087f6:	463b      	mov	r3, r7
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	621a      	str	r2, [r3, #32]
 80087fc:	e008      	b.n	8008810 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80087fe:	463b      	mov	r3, r7
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6a1b      	ldr	r3, [r3, #32]
 8008804:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008808:	463b      	mov	r3, r7
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2200      	movs	r2, #0
 800880e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008810:	463b      	mov	r3, r7
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	785b      	ldrb	r3, [r3, #1]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d17a      	bne.n	8008910 <USB_EPStartXfer+0x404>
 800881a:	f107 0318 	add.w	r3, r7, #24
 800881e:	1d3a      	adds	r2, r7, #4
 8008820:	6812      	ldr	r2, [r2, #0]
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	1d3b      	adds	r3, r7, #4
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800882c:	b29b      	uxth	r3, r3
 800882e:	4619      	mov	r1, r3
 8008830:	f107 0318 	add.w	r3, r7, #24
 8008834:	f107 0218 	add.w	r2, r7, #24
 8008838:	6812      	ldr	r2, [r2, #0]
 800883a:	440a      	add	r2, r1
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	463b      	mov	r3, r7
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	011a      	lsls	r2, r3, #4
 8008846:	f107 0318 	add.w	r3, r7, #24
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4413      	add	r3, r2
 800884e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008852:	f107 0314 	add.w	r3, r7, #20
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800885c:	2b00      	cmp	r3, #0
 800885e:	d11a      	bne.n	8008896 <USB_EPStartXfer+0x38a>
 8008860:	f107 0314 	add.w	r3, r7, #20
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	881b      	ldrh	r3, [r3, #0]
 8008868:	b29b      	uxth	r3, r3
 800886a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800886e:	b29a      	uxth	r2, r3
 8008870:	f107 0314 	add.w	r3, r7, #20
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	801a      	strh	r2, [r3, #0]
 8008878:	f107 0314 	add.w	r3, r7, #20
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	881b      	ldrh	r3, [r3, #0]
 8008880:	b29b      	uxth	r3, r3
 8008882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800888a:	b29a      	uxth	r2, r3
 800888c:	f107 0314 	add.w	r3, r7, #20
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	801a      	strh	r2, [r3, #0]
 8008894:	e067      	b.n	8008966 <USB_EPStartXfer+0x45a>
 8008896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800889a:	2b3e      	cmp	r3, #62	; 0x3e
 800889c:	d819      	bhi.n	80088d2 <USB_EPStartXfer+0x3c6>
 800889e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088a2:	085b      	lsrs	r3, r3, #1
 80088a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80088a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ac:	f003 0301 	and.w	r3, r3, #1
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d004      	beq.n	80088be <USB_EPStartXfer+0x3b2>
 80088b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80088b8:	3301      	adds	r3, #1
 80088ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80088be:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	029b      	lsls	r3, r3, #10
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	f107 0314 	add.w	r3, r7, #20
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	801a      	strh	r2, [r3, #0]
 80088d0:	e049      	b.n	8008966 <USB_EPStartXfer+0x45a>
 80088d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088d6:	095b      	lsrs	r3, r3, #5
 80088d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80088dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088e0:	f003 031f 	and.w	r3, r3, #31
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d104      	bne.n	80088f2 <USB_EPStartXfer+0x3e6>
 80088e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80088ec:	3b01      	subs	r3, #1
 80088ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80088f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	029b      	lsls	r3, r3, #10
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008904:	b29a      	uxth	r2, r3
 8008906:	f107 0314 	add.w	r3, r7, #20
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	801a      	strh	r2, [r3, #0]
 800890e:	e02a      	b.n	8008966 <USB_EPStartXfer+0x45a>
 8008910:	463b      	mov	r3, r7
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	785b      	ldrb	r3, [r3, #1]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d125      	bne.n	8008966 <USB_EPStartXfer+0x45a>
 800891a:	f107 0320 	add.w	r3, r7, #32
 800891e:	1d3a      	adds	r2, r7, #4
 8008920:	6812      	ldr	r2, [r2, #0]
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	1d3b      	adds	r3, r7, #4
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800892c:	b29b      	uxth	r3, r3
 800892e:	4619      	mov	r1, r3
 8008930:	f107 0320 	add.w	r3, r7, #32
 8008934:	f107 0220 	add.w	r2, r7, #32
 8008938:	6812      	ldr	r2, [r2, #0]
 800893a:	440a      	add	r2, r1
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	463b      	mov	r3, r7
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	011a      	lsls	r2, r3, #4
 8008946:	f107 0320 	add.w	r3, r7, #32
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4413      	add	r3, r2
 800894e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008952:	f107 031c 	add.w	r3, r7, #28
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800895c:	b29a      	uxth	r2, r3
 800895e:	f107 031c 	add.w	r3, r7, #28
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008966:	463b      	mov	r3, r7
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	891b      	ldrh	r3, [r3, #8]
 800896c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008970:	463b      	mov	r3, r7
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6959      	ldr	r1, [r3, #20]
 8008976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800897a:	b29b      	uxth	r3, r3
 800897c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008980:	1d38      	adds	r0, r7, #4
 8008982:	6800      	ldr	r0, [r0, #0]
 8008984:	f001 f9f7 	bl	8009d76 <USB_WritePMA>
 8008988:	f000 bcc6 	b.w	8009318 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800898c:	463b      	mov	r3, r7
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	785b      	ldrb	r3, [r3, #1]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d164      	bne.n	8008a60 <USB_EPStartXfer+0x554>
 8008996:	1d3b      	adds	r3, r7, #4
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	64bb      	str	r3, [r7, #72]	; 0x48
 800899c:	1d3b      	adds	r3, r7, #4
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	461a      	mov	r2, r3
 80089a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089aa:	4413      	add	r3, r2
 80089ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80089ae:	463b      	mov	r3, r7
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	011a      	lsls	r2, r3, #4
 80089b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089b8:	4413      	add	r3, r2
 80089ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089be:	647b      	str	r3, [r7, #68]	; 0x44
 80089c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d112      	bne.n	80089ee <USB_EPStartXfer+0x4e2>
 80089c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089d6:	801a      	strh	r2, [r3, #0]
 80089d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089da:	881b      	ldrh	r3, [r3, #0]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ea:	801a      	strh	r2, [r3, #0]
 80089ec:	e057      	b.n	8008a9e <USB_EPStartXfer+0x592>
 80089ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089f2:	2b3e      	cmp	r3, #62	; 0x3e
 80089f4:	d817      	bhi.n	8008a26 <USB_EPStartXfer+0x51a>
 80089f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089fa:	085b      	lsrs	r3, r3, #1
 80089fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d004      	beq.n	8008a16 <USB_EPStartXfer+0x50a>
 8008a0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008a10:	3301      	adds	r3, #1
 8008a12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008a16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	029b      	lsls	r3, r3, #10
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a22:	801a      	strh	r2, [r3, #0]
 8008a24:	e03b      	b.n	8008a9e <USB_EPStartXfer+0x592>
 8008a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a2a:	095b      	lsrs	r3, r3, #5
 8008a2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a34:	f003 031f 	and.w	r3, r3, #31
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d104      	bne.n	8008a46 <USB_EPStartXfer+0x53a>
 8008a3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008a40:	3b01      	subs	r3, #1
 8008a42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008a46:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	029b      	lsls	r3, r3, #10
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a5c:	801a      	strh	r2, [r3, #0]
 8008a5e:	e01e      	b.n	8008a9e <USB_EPStartXfer+0x592>
 8008a60:	463b      	mov	r3, r7
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	785b      	ldrb	r3, [r3, #1]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d119      	bne.n	8008a9e <USB_EPStartXfer+0x592>
 8008a6a:	1d3b      	adds	r3, r7, #4
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	653b      	str	r3, [r7, #80]	; 0x50
 8008a70:	1d3b      	adds	r3, r7, #4
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a7e:	4413      	add	r3, r2
 8008a80:	653b      	str	r3, [r7, #80]	; 0x50
 8008a82:	463b      	mov	r3, r7
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	011a      	lsls	r2, r3, #4
 8008a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008a9e:	463b      	mov	r3, r7
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	891b      	ldrh	r3, [r3, #8]
 8008aa4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008aa8:	463b      	mov	r3, r7
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6959      	ldr	r1, [r3, #20]
 8008aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ab8:	1d38      	adds	r0, r7, #4
 8008aba:	6800      	ldr	r0, [r0, #0]
 8008abc:	f001 f95b 	bl	8009d76 <USB_WritePMA>
            ep->xfer_buff += len;
 8008ac0:	463b      	mov	r3, r7
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	695a      	ldr	r2, [r3, #20]
 8008ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aca:	441a      	add	r2, r3
 8008acc:	463b      	mov	r3, r7
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008ad2:	463b      	mov	r3, r7
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6a1a      	ldr	r2, [r3, #32]
 8008ad8:	463b      	mov	r3, r7
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d909      	bls.n	8008af6 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8008ae2:	463b      	mov	r3, r7
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6a1a      	ldr	r2, [r3, #32]
 8008ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aec:	1ad2      	subs	r2, r2, r3
 8008aee:	463b      	mov	r3, r7
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	621a      	str	r2, [r3, #32]
 8008af4:	e008      	b.n	8008b08 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8008af6:	463b      	mov	r3, r7
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008b00:	463b      	mov	r3, r7
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2200      	movs	r2, #0
 8008b06:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b08:	1d3b      	adds	r3, r7, #4
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8008b0e:	463b      	mov	r3, r7
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	785b      	ldrb	r3, [r3, #1]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d164      	bne.n	8008be2 <USB_EPStartXfer+0x6d6>
 8008b18:	1d3b      	adds	r3, r7, #4
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b1e:	1d3b      	adds	r3, r7, #4
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	461a      	mov	r2, r3
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2c:	4413      	add	r3, r2
 8008b2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b30:	463b      	mov	r3, r7
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	011a      	lsls	r2, r3, #4
 8008b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3a:	4413      	add	r3, r2
 8008b3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b40:	637b      	str	r3, [r7, #52]	; 0x34
 8008b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d112      	bne.n	8008b70 <USB_EPStartXfer+0x664>
 8008b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b58:	801a      	strh	r2, [r3, #0]
 8008b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b5c:	881b      	ldrh	r3, [r3, #0]
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b6c:	801a      	strh	r2, [r3, #0]
 8008b6e:	e054      	b.n	8008c1a <USB_EPStartXfer+0x70e>
 8008b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b74:	2b3e      	cmp	r3, #62	; 0x3e
 8008b76:	d817      	bhi.n	8008ba8 <USB_EPStartXfer+0x69c>
 8008b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b7c:	085b      	lsrs	r3, r3, #1
 8008b7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d004      	beq.n	8008b98 <USB_EPStartXfer+0x68c>
 8008b8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008b92:	3301      	adds	r3, #1
 8008b94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008b98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	029b      	lsls	r3, r3, #10
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba4:	801a      	strh	r2, [r3, #0]
 8008ba6:	e038      	b.n	8008c1a <USB_EPStartXfer+0x70e>
 8008ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bac:	095b      	lsrs	r3, r3, #5
 8008bae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb6:	f003 031f 	and.w	r3, r3, #31
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d104      	bne.n	8008bc8 <USB_EPStartXfer+0x6bc>
 8008bbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008bc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	029b      	lsls	r3, r3, #10
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bde:	801a      	strh	r2, [r3, #0]
 8008be0:	e01b      	b.n	8008c1a <USB_EPStartXfer+0x70e>
 8008be2:	463b      	mov	r3, r7
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	785b      	ldrb	r3, [r3, #1]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d116      	bne.n	8008c1a <USB_EPStartXfer+0x70e>
 8008bec:	1d3b      	adds	r3, r7, #4
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bfa:	4413      	add	r3, r2
 8008bfc:	643b      	str	r3, [r7, #64]	; 0x40
 8008bfe:	463b      	mov	r3, r7
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	011a      	lsls	r2, r3, #4
 8008c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c08:	4413      	add	r3, r2
 8008c0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008c1a:	463b      	mov	r3, r7
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	895b      	ldrh	r3, [r3, #10]
 8008c20:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c24:	463b      	mov	r3, r7
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6959      	ldr	r1, [r3, #20]
 8008c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008c34:	1d38      	adds	r0, r7, #4
 8008c36:	6800      	ldr	r0, [r0, #0]
 8008c38:	f001 f89d 	bl	8009d76 <USB_WritePMA>
 8008c3c:	e36c      	b.n	8009318 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008c3e:	463b      	mov	r3, r7
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6a1b      	ldr	r3, [r3, #32]
 8008c44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008c48:	1d3b      	adds	r3, r7, #4
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	463b      	mov	r3, r7
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c62:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008c66:	1d3b      	adds	r3, r7, #4
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	463b      	mov	r3, r7
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	441a      	add	r2, r3
 8008c74:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008c8c:	1d3b      	adds	r3, r7, #4
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c92:	1d3b      	adds	r3, r7, #4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ca0:	4413      	add	r3, r2
 8008ca2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ca4:	463b      	mov	r3, r7
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	011a      	lsls	r2, r3, #4
 8008cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cae:	4413      	add	r3, r2
 8008cb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008cb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cbe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008cc0:	463b      	mov	r3, r7
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	891b      	ldrh	r3, [r3, #8]
 8008cc6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cca:	463b      	mov	r3, r7
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	6959      	ldr	r1, [r3, #20]
 8008cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008cda:	1d38      	adds	r0, r7, #4
 8008cdc:	6800      	ldr	r0, [r0, #0]
 8008cde:	f001 f84a 	bl	8009d76 <USB_WritePMA>
 8008ce2:	e319      	b.n	8009318 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008ce4:	1d3b      	adds	r3, r7, #4
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	463b      	mov	r3, r7
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	881b      	ldrh	r3, [r3, #0]
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cfe:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008d02:	1d3b      	adds	r3, r7, #4
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	463b      	mov	r3, r7
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	441a      	add	r2, r3
 8008d10:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d1c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008d28:	463b      	mov	r3, r7
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	6a1a      	ldr	r2, [r3, #32]
 8008d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d32:	1ad2      	subs	r2, r2, r3
 8008d34:	463b      	mov	r3, r7
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d3a:	1d3b      	adds	r3, r7, #4
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	463b      	mov	r3, r7
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	881b      	ldrh	r3, [r3, #0]
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 8162 	beq.w	800901a <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d56:	1d3b      	adds	r3, r7, #4
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d5e:	463b      	mov	r3, r7
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	785b      	ldrb	r3, [r3, #1]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d164      	bne.n	8008e32 <USB_EPStartXfer+0x926>
 8008d68:	1d3b      	adds	r3, r7, #4
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d6e:	1d3b      	adds	r3, r7, #4
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	461a      	mov	r2, r3
 8008d7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d7c:	4413      	add	r3, r2
 8008d7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d80:	463b      	mov	r3, r7
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	011a      	lsls	r2, r3, #4
 8008d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d8a:	4413      	add	r3, r2
 8008d8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d90:	677b      	str	r3, [r7, #116]	; 0x74
 8008d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d112      	bne.n	8008dc0 <USB_EPStartXfer+0x8b4>
 8008d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d9c:	881b      	ldrh	r3, [r3, #0]
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008da8:	801a      	strh	r2, [r3, #0]
 8008daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dac:	881b      	ldrh	r3, [r3, #0]
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dbc:	801a      	strh	r2, [r3, #0]
 8008dbe:	e057      	b.n	8008e70 <USB_EPStartXfer+0x964>
 8008dc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dc4:	2b3e      	cmp	r3, #62	; 0x3e
 8008dc6:	d817      	bhi.n	8008df8 <USB_EPStartXfer+0x8ec>
 8008dc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dcc:	085b      	lsrs	r3, r3, #1
 8008dce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d004      	beq.n	8008de8 <USB_EPStartXfer+0x8dc>
 8008dde:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008de2:	3301      	adds	r3, #1
 8008de4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008de8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	029b      	lsls	r3, r3, #10
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008df4:	801a      	strh	r2, [r3, #0]
 8008df6:	e03b      	b.n	8008e70 <USB_EPStartXfer+0x964>
 8008df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dfc:	095b      	lsrs	r3, r3, #5
 8008dfe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e06:	f003 031f 	and.w	r3, r3, #31
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d104      	bne.n	8008e18 <USB_EPStartXfer+0x90c>
 8008e0e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008e12:	3b01      	subs	r3, #1
 8008e14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008e18:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	029b      	lsls	r3, r3, #10
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e2e:	801a      	strh	r2, [r3, #0]
 8008e30:	e01e      	b.n	8008e70 <USB_EPStartXfer+0x964>
 8008e32:	463b      	mov	r3, r7
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	785b      	ldrb	r3, [r3, #1]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d119      	bne.n	8008e70 <USB_EPStartXfer+0x964>
 8008e3c:	1d3b      	adds	r3, r7, #4
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	461a      	mov	r2, r3
 8008e48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e52:	463b      	mov	r3, r7
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	011a      	lsls	r2, r3, #4
 8008e5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e5e:	4413      	add	r3, r2
 8008e60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008e70:	463b      	mov	r3, r7
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	895b      	ldrh	r3, [r3, #10]
 8008e76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e7a:	463b      	mov	r3, r7
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	6959      	ldr	r1, [r3, #20]
 8008e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008e8a:	1d38      	adds	r0, r7, #4
 8008e8c:	6800      	ldr	r0, [r0, #0]
 8008e8e:	f000 ff72 	bl	8009d76 <USB_WritePMA>
          ep->xfer_buff += len;
 8008e92:	463b      	mov	r3, r7
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	695a      	ldr	r2, [r3, #20]
 8008e98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e9c:	441a      	add	r2, r3
 8008e9e:	463b      	mov	r3, r7
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008ea4:	463b      	mov	r3, r7
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6a1a      	ldr	r2, [r3, #32]
 8008eaa:	463b      	mov	r3, r7
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d909      	bls.n	8008ec8 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8008eb4:	463b      	mov	r3, r7
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6a1a      	ldr	r2, [r3, #32]
 8008eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ebe:	1ad2      	subs	r2, r2, r3
 8008ec0:	463b      	mov	r3, r7
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	621a      	str	r2, [r3, #32]
 8008ec6:	e008      	b.n	8008eda <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8008ec8:	463b      	mov	r3, r7
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008ed2:	463b      	mov	r3, r7
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f000 821a 	beq.w	8009318 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ee4:	463b      	mov	r3, r7
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	785b      	ldrb	r3, [r3, #1]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d164      	bne.n	8008fb8 <USB_EPStartXfer+0xaac>
 8008eee:	1d3b      	adds	r3, r7, #4
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ef4:	1d3b      	adds	r3, r7, #4
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	461a      	mov	r2, r3
 8008f00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f02:	4413      	add	r3, r2
 8008f04:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f06:	463b      	mov	r3, r7
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	011a      	lsls	r2, r3, #4
 8008f0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f10:	4413      	add	r3, r2
 8008f12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f16:	667b      	str	r3, [r7, #100]	; 0x64
 8008f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d112      	bne.n	8008f46 <USB_EPStartXfer+0xa3a>
 8008f20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f22:	881b      	ldrh	r3, [r3, #0]
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f2e:	801a      	strh	r2, [r3, #0]
 8008f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f3e:	b29a      	uxth	r2, r3
 8008f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f42:	801a      	strh	r2, [r3, #0]
 8008f44:	e057      	b.n	8008ff6 <USB_EPStartXfer+0xaea>
 8008f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f4a:	2b3e      	cmp	r3, #62	; 0x3e
 8008f4c:	d817      	bhi.n	8008f7e <USB_EPStartXfer+0xa72>
 8008f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f52:	085b      	lsrs	r3, r3, #1
 8008f54:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d004      	beq.n	8008f6e <USB_EPStartXfer+0xa62>
 8008f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f68:	3301      	adds	r3, #1
 8008f6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	029b      	lsls	r3, r3, #10
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f7a:	801a      	strh	r2, [r3, #0]
 8008f7c:	e03b      	b.n	8008ff6 <USB_EPStartXfer+0xaea>
 8008f7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f82:	095b      	lsrs	r3, r3, #5
 8008f84:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f8c:	f003 031f 	and.w	r3, r3, #31
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d104      	bne.n	8008f9e <USB_EPStartXfer+0xa92>
 8008f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	029b      	lsls	r3, r3, #10
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fb4:	801a      	strh	r2, [r3, #0]
 8008fb6:	e01e      	b.n	8008ff6 <USB_EPStartXfer+0xaea>
 8008fb8:	463b      	mov	r3, r7
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	785b      	ldrb	r3, [r3, #1]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d119      	bne.n	8008ff6 <USB_EPStartXfer+0xaea>
 8008fc2:	1d3b      	adds	r3, r7, #4
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	673b      	str	r3, [r7, #112]	; 0x70
 8008fc8:	1d3b      	adds	r3, r7, #4
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fd6:	4413      	add	r3, r2
 8008fd8:	673b      	str	r3, [r7, #112]	; 0x70
 8008fda:	463b      	mov	r3, r7
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	011a      	lsls	r2, r3, #4
 8008fe2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fe4:	4413      	add	r3, r2
 8008fe6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008fea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ff4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ff6:	463b      	mov	r3, r7
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	891b      	ldrh	r3, [r3, #8]
 8008ffc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009000:	463b      	mov	r3, r7
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6959      	ldr	r1, [r3, #20]
 8009006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800900a:	b29b      	uxth	r3, r3
 800900c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009010:	1d38      	adds	r0, r7, #4
 8009012:	6800      	ldr	r0, [r0, #0]
 8009014:	f000 feaf 	bl	8009d76 <USB_WritePMA>
 8009018:	e17e      	b.n	8009318 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800901a:	463b      	mov	r3, r7
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	785b      	ldrb	r3, [r3, #1]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d16f      	bne.n	8009104 <USB_EPStartXfer+0xbf8>
 8009024:	1d3b      	adds	r3, r7, #4
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800902c:	1d3b      	adds	r3, r7, #4
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009034:	b29b      	uxth	r3, r3
 8009036:	461a      	mov	r2, r3
 8009038:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800903c:	4413      	add	r3, r2
 800903e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009042:	463b      	mov	r3, r7
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	011a      	lsls	r2, r3, #4
 800904a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800904e:	4413      	add	r3, r2
 8009050:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800905c:	2b00      	cmp	r3, #0
 800905e:	d116      	bne.n	800908e <USB_EPStartXfer+0xb82>
 8009060:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009064:	881b      	ldrh	r3, [r3, #0]
 8009066:	b29b      	uxth	r3, r3
 8009068:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800906c:	b29a      	uxth	r2, r3
 800906e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009072:	801a      	strh	r2, [r3, #0]
 8009074:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	b29b      	uxth	r3, r3
 800907c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009084:	b29a      	uxth	r2, r3
 8009086:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800908a:	801a      	strh	r2, [r3, #0]
 800908c:	e05f      	b.n	800914e <USB_EPStartXfer+0xc42>
 800908e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009092:	2b3e      	cmp	r3, #62	; 0x3e
 8009094:	d818      	bhi.n	80090c8 <USB_EPStartXfer+0xbbc>
 8009096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800909a:	085b      	lsrs	r3, r3, #1
 800909c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80090a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d004      	beq.n	80090b6 <USB_EPStartXfer+0xbaa>
 80090ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80090b0:	3301      	adds	r3, #1
 80090b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80090b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	029b      	lsls	r3, r3, #10
 80090be:	b29a      	uxth	r2, r3
 80090c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090c4:	801a      	strh	r2, [r3, #0]
 80090c6:	e042      	b.n	800914e <USB_EPStartXfer+0xc42>
 80090c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090cc:	095b      	lsrs	r3, r3, #5
 80090ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80090d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090d6:	f003 031f 	and.w	r3, r3, #31
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d104      	bne.n	80090e8 <USB_EPStartXfer+0xbdc>
 80090de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80090e2:	3b01      	subs	r3, #1
 80090e4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80090e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	029b      	lsls	r3, r3, #10
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009100:	801a      	strh	r2, [r3, #0]
 8009102:	e024      	b.n	800914e <USB_EPStartXfer+0xc42>
 8009104:	463b      	mov	r3, r7
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	785b      	ldrb	r3, [r3, #1]
 800910a:	2b01      	cmp	r3, #1
 800910c:	d11f      	bne.n	800914e <USB_EPStartXfer+0xc42>
 800910e:	1d3b      	adds	r3, r7, #4
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009116:	1d3b      	adds	r3, r7, #4
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800911e:	b29b      	uxth	r3, r3
 8009120:	461a      	mov	r2, r3
 8009122:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009126:	4413      	add	r3, r2
 8009128:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800912c:	463b      	mov	r3, r7
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	011a      	lsls	r2, r3, #4
 8009134:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009138:	4413      	add	r3, r2
 800913a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800913e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009146:	b29a      	uxth	r2, r3
 8009148:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800914c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800914e:	463b      	mov	r3, r7
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	891b      	ldrh	r3, [r3, #8]
 8009154:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009158:	463b      	mov	r3, r7
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6959      	ldr	r1, [r3, #20]
 800915e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009162:	b29b      	uxth	r3, r3
 8009164:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009168:	1d38      	adds	r0, r7, #4
 800916a:	6800      	ldr	r0, [r0, #0]
 800916c:	f000 fe03 	bl	8009d76 <USB_WritePMA>
          ep->xfer_buff += len;
 8009170:	463b      	mov	r3, r7
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	695a      	ldr	r2, [r3, #20]
 8009176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800917a:	441a      	add	r2, r3
 800917c:	463b      	mov	r3, r7
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009182:	463b      	mov	r3, r7
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	6a1a      	ldr	r2, [r3, #32]
 8009188:	463b      	mov	r3, r7
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	429a      	cmp	r2, r3
 8009190:	d909      	bls.n	80091a6 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8009192:	463b      	mov	r3, r7
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6a1a      	ldr	r2, [r3, #32]
 8009198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800919c:	1ad2      	subs	r2, r2, r3
 800919e:	463b      	mov	r3, r7
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	621a      	str	r2, [r3, #32]
 80091a4:	e008      	b.n	80091b8 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80091a6:	463b      	mov	r3, r7
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	6a1b      	ldr	r3, [r3, #32]
 80091ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80091b0:	463b      	mov	r3, r7
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2200      	movs	r2, #0
 80091b6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80091b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f000 80ab 	beq.w	8009318 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80091c2:	1d3b      	adds	r3, r7, #4
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80091ca:	463b      	mov	r3, r7
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	785b      	ldrb	r3, [r3, #1]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d16f      	bne.n	80092b4 <USB_EPStartXfer+0xda8>
 80091d4:	1d3b      	adds	r3, r7, #4
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80091dc:	1d3b      	adds	r3, r7, #4
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	461a      	mov	r2, r3
 80091e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091ec:	4413      	add	r3, r2
 80091ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80091f2:	463b      	mov	r3, r7
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	011a      	lsls	r2, r3, #4
 80091fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091fe:	4413      	add	r3, r2
 8009200:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009204:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800920c:	2b00      	cmp	r3, #0
 800920e:	d116      	bne.n	800923e <USB_EPStartXfer+0xd32>
 8009210:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009214:	881b      	ldrh	r3, [r3, #0]
 8009216:	b29b      	uxth	r3, r3
 8009218:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800921c:	b29a      	uxth	r2, r3
 800921e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009222:	801a      	strh	r2, [r3, #0]
 8009224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009228:	881b      	ldrh	r3, [r3, #0]
 800922a:	b29b      	uxth	r3, r3
 800922c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009234:	b29a      	uxth	r2, r3
 8009236:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800923a:	801a      	strh	r2, [r3, #0]
 800923c:	e05b      	b.n	80092f6 <USB_EPStartXfer+0xdea>
 800923e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009242:	2b3e      	cmp	r3, #62	; 0x3e
 8009244:	d818      	bhi.n	8009278 <USB_EPStartXfer+0xd6c>
 8009246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800924a:	085b      	lsrs	r3, r3, #1
 800924c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009250:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	2b00      	cmp	r3, #0
 800925a:	d004      	beq.n	8009266 <USB_EPStartXfer+0xd5a>
 800925c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009260:	3301      	adds	r3, #1
 8009262:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009266:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800926a:	b29b      	uxth	r3, r3
 800926c:	029b      	lsls	r3, r3, #10
 800926e:	b29a      	uxth	r2, r3
 8009270:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009274:	801a      	strh	r2, [r3, #0]
 8009276:	e03e      	b.n	80092f6 <USB_EPStartXfer+0xdea>
 8009278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800927c:	095b      	lsrs	r3, r3, #5
 800927e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009286:	f003 031f 	and.w	r3, r3, #31
 800928a:	2b00      	cmp	r3, #0
 800928c:	d104      	bne.n	8009298 <USB_EPStartXfer+0xd8c>
 800928e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009292:	3b01      	subs	r3, #1
 8009294:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800929c:	b29b      	uxth	r3, r3
 800929e:	029b      	lsls	r3, r3, #10
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092b0:	801a      	strh	r2, [r3, #0]
 80092b2:	e020      	b.n	80092f6 <USB_EPStartXfer+0xdea>
 80092b4:	463b      	mov	r3, r7
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	785b      	ldrb	r3, [r3, #1]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d11b      	bne.n	80092f6 <USB_EPStartXfer+0xdea>
 80092be:	1d3b      	adds	r3, r7, #4
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	461a      	mov	r2, r3
 80092ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092ce:	4413      	add	r3, r2
 80092d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80092d4:	463b      	mov	r3, r7
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	011a      	lsls	r2, r3, #4
 80092dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092e0:	4413      	add	r3, r2
 80092e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80092ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80092f6:	463b      	mov	r3, r7
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	895b      	ldrh	r3, [r3, #10]
 80092fc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009300:	463b      	mov	r3, r7
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	6959      	ldr	r1, [r3, #20]
 8009306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800930a:	b29b      	uxth	r3, r3
 800930c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009310:	1d38      	adds	r0, r7, #4
 8009312:	6800      	ldr	r0, [r0, #0]
 8009314:	f000 fd2f 	bl	8009d76 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009318:	1d3b      	adds	r3, r7, #4
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	463b      	mov	r3, r7
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4413      	add	r3, r2
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	b29b      	uxth	r3, r3
 800932a:	f107 020a 	add.w	r2, r7, #10
 800932e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009336:	8013      	strh	r3, [r2, #0]
 8009338:	f107 030a 	add.w	r3, r7, #10
 800933c:	f107 020a 	add.w	r2, r7, #10
 8009340:	8812      	ldrh	r2, [r2, #0]
 8009342:	f082 0210 	eor.w	r2, r2, #16
 8009346:	801a      	strh	r2, [r3, #0]
 8009348:	f107 030a 	add.w	r3, r7, #10
 800934c:	f107 020a 	add.w	r2, r7, #10
 8009350:	8812      	ldrh	r2, [r2, #0]
 8009352:	f082 0220 	eor.w	r2, r2, #32
 8009356:	801a      	strh	r2, [r3, #0]
 8009358:	1d3b      	adds	r3, r7, #4
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	463b      	mov	r3, r7
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	441a      	add	r2, r3
 8009366:	f107 030a 	add.w	r3, r7, #10
 800936a:	881b      	ldrh	r3, [r3, #0]
 800936c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800937c:	b29b      	uxth	r3, r3
 800937e:	8013      	strh	r3, [r2, #0]
 8009380:	e3b5      	b.n	8009aee <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009382:	463b      	mov	r3, r7
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	7b1b      	ldrb	r3, [r3, #12]
 8009388:	2b00      	cmp	r3, #0
 800938a:	f040 8090 	bne.w	80094ae <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800938e:	463b      	mov	r3, r7
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	699a      	ldr	r2, [r3, #24]
 8009394:	463b      	mov	r3, r7
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	429a      	cmp	r2, r3
 800939c:	d90e      	bls.n	80093bc <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800939e:	463b      	mov	r3, r7
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80093a8:	463b      	mov	r3, r7
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	699a      	ldr	r2, [r3, #24]
 80093ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093b2:	1ad2      	subs	r2, r2, r3
 80093b4:	463b      	mov	r3, r7
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	619a      	str	r2, [r3, #24]
 80093ba:	e008      	b.n	80093ce <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80093bc:	463b      	mov	r3, r7
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80093c6:	463b      	mov	r3, r7
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2200      	movs	r2, #0
 80093cc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80093ce:	1d3b      	adds	r3, r7, #4
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093d6:	1d3b      	adds	r3, r7, #4
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093de:	b29b      	uxth	r3, r3
 80093e0:	461a      	mov	r2, r3
 80093e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80093e6:	4413      	add	r3, r2
 80093e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093ec:	463b      	mov	r3, r7
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	011a      	lsls	r2, r3, #4
 80093f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80093f8:	4413      	add	r3, r2
 80093fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009406:	2b00      	cmp	r3, #0
 8009408:	d116      	bne.n	8009438 <USB_EPStartXfer+0xf2c>
 800940a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800940e:	881b      	ldrh	r3, [r3, #0]
 8009410:	b29b      	uxth	r3, r3
 8009412:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009416:	b29a      	uxth	r2, r3
 8009418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800941c:	801a      	strh	r2, [r3, #0]
 800941e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009422:	881b      	ldrh	r3, [r3, #0]
 8009424:	b29b      	uxth	r3, r3
 8009426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800942a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800942e:	b29a      	uxth	r2, r3
 8009430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009434:	801a      	strh	r2, [r3, #0]
 8009436:	e32c      	b.n	8009a92 <USB_EPStartXfer+0x1586>
 8009438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800943c:	2b3e      	cmp	r3, #62	; 0x3e
 800943e:	d818      	bhi.n	8009472 <USB_EPStartXfer+0xf66>
 8009440:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009444:	085b      	lsrs	r3, r3, #1
 8009446:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800944a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b00      	cmp	r3, #0
 8009454:	d004      	beq.n	8009460 <USB_EPStartXfer+0xf54>
 8009456:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800945a:	3301      	adds	r3, #1
 800945c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009460:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009464:	b29b      	uxth	r3, r3
 8009466:	029b      	lsls	r3, r3, #10
 8009468:	b29a      	uxth	r2, r3
 800946a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800946e:	801a      	strh	r2, [r3, #0]
 8009470:	e30f      	b.n	8009a92 <USB_EPStartXfer+0x1586>
 8009472:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009476:	095b      	lsrs	r3, r3, #5
 8009478:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800947c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009480:	f003 031f 	and.w	r3, r3, #31
 8009484:	2b00      	cmp	r3, #0
 8009486:	d104      	bne.n	8009492 <USB_EPStartXfer+0xf86>
 8009488:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800948c:	3b01      	subs	r3, #1
 800948e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009492:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009496:	b29b      	uxth	r3, r3
 8009498:	029b      	lsls	r3, r3, #10
 800949a:	b29b      	uxth	r3, r3
 800949c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094aa:	801a      	strh	r2, [r3, #0]
 80094ac:	e2f1      	b.n	8009a92 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80094ae:	463b      	mov	r3, r7
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	78db      	ldrb	r3, [r3, #3]
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	f040 818f 	bne.w	80097d8 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80094ba:	463b      	mov	r3, r7
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	785b      	ldrb	r3, [r3, #1]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d175      	bne.n	80095b0 <USB_EPStartXfer+0x10a4>
 80094c4:	1d3b      	adds	r3, r7, #4
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094cc:	1d3b      	adds	r3, r7, #4
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	461a      	mov	r2, r3
 80094d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80094dc:	4413      	add	r3, r2
 80094de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094e2:	463b      	mov	r3, r7
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	011a      	lsls	r2, r3, #4
 80094ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80094ee:	4413      	add	r3, r2
 80094f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80094f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094f8:	463b      	mov	r3, r7
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d116      	bne.n	8009530 <USB_EPStartXfer+0x1024>
 8009502:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	b29b      	uxth	r3, r3
 800950a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800950e:	b29a      	uxth	r2, r3
 8009510:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009514:	801a      	strh	r2, [r3, #0]
 8009516:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	b29b      	uxth	r3, r3
 800951e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009526:	b29a      	uxth	r2, r3
 8009528:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800952c:	801a      	strh	r2, [r3, #0]
 800952e:	e065      	b.n	80095fc <USB_EPStartXfer+0x10f0>
 8009530:	463b      	mov	r3, r7
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	2b3e      	cmp	r3, #62	; 0x3e
 8009538:	d81a      	bhi.n	8009570 <USB_EPStartXfer+0x1064>
 800953a:	463b      	mov	r3, r7
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	085b      	lsrs	r3, r3, #1
 8009542:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009546:	463b      	mov	r3, r7
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	f003 0301 	and.w	r3, r3, #1
 8009550:	2b00      	cmp	r3, #0
 8009552:	d004      	beq.n	800955e <USB_EPStartXfer+0x1052>
 8009554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009558:	3301      	adds	r3, #1
 800955a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800955e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009562:	b29b      	uxth	r3, r3
 8009564:	029b      	lsls	r3, r3, #10
 8009566:	b29a      	uxth	r2, r3
 8009568:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800956c:	801a      	strh	r2, [r3, #0]
 800956e:	e045      	b.n	80095fc <USB_EPStartXfer+0x10f0>
 8009570:	463b      	mov	r3, r7
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	095b      	lsrs	r3, r3, #5
 8009578:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800957c:	463b      	mov	r3, r7
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	f003 031f 	and.w	r3, r3, #31
 8009586:	2b00      	cmp	r3, #0
 8009588:	d104      	bne.n	8009594 <USB_EPStartXfer+0x1088>
 800958a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800958e:	3b01      	subs	r3, #1
 8009590:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009598:	b29b      	uxth	r3, r3
 800959a:	029b      	lsls	r3, r3, #10
 800959c:	b29b      	uxth	r3, r3
 800959e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095ac:	801a      	strh	r2, [r3, #0]
 80095ae:	e025      	b.n	80095fc <USB_EPStartXfer+0x10f0>
 80095b0:	463b      	mov	r3, r7
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	785b      	ldrb	r3, [r3, #1]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d120      	bne.n	80095fc <USB_EPStartXfer+0x10f0>
 80095ba:	1d3b      	adds	r3, r7, #4
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80095c2:	1d3b      	adds	r3, r7, #4
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	461a      	mov	r2, r3
 80095ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095d2:	4413      	add	r3, r2
 80095d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80095d8:	463b      	mov	r3, r7
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	011a      	lsls	r2, r3, #4
 80095e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095e4:	4413      	add	r3, r2
 80095e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80095ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80095ee:	463b      	mov	r3, r7
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80095fa:	801a      	strh	r2, [r3, #0]
 80095fc:	1d3b      	adds	r3, r7, #4
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009604:	463b      	mov	r3, r7
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	785b      	ldrb	r3, [r3, #1]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d175      	bne.n	80096fa <USB_EPStartXfer+0x11ee>
 800960e:	1d3b      	adds	r3, r7, #4
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009616:	1d3b      	adds	r3, r7, #4
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800961e:	b29b      	uxth	r3, r3
 8009620:	461a      	mov	r2, r3
 8009622:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009626:	4413      	add	r3, r2
 8009628:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800962c:	463b      	mov	r3, r7
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	011a      	lsls	r2, r3, #4
 8009634:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009638:	4413      	add	r3, r2
 800963a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800963e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009642:	463b      	mov	r3, r7
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d116      	bne.n	800967a <USB_EPStartXfer+0x116e>
 800964c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	b29b      	uxth	r3, r3
 8009654:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009658:	b29a      	uxth	r2, r3
 800965a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800965e:	801a      	strh	r2, [r3, #0]
 8009660:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009664:	881b      	ldrh	r3, [r3, #0]
 8009666:	b29b      	uxth	r3, r3
 8009668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800966c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009670:	b29a      	uxth	r2, r3
 8009672:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009676:	801a      	strh	r2, [r3, #0]
 8009678:	e061      	b.n	800973e <USB_EPStartXfer+0x1232>
 800967a:	463b      	mov	r3, r7
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	2b3e      	cmp	r3, #62	; 0x3e
 8009682:	d81a      	bhi.n	80096ba <USB_EPStartXfer+0x11ae>
 8009684:	463b      	mov	r3, r7
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	085b      	lsrs	r3, r3, #1
 800968c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009690:	463b      	mov	r3, r7
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	f003 0301 	and.w	r3, r3, #1
 800969a:	2b00      	cmp	r3, #0
 800969c:	d004      	beq.n	80096a8 <USB_EPStartXfer+0x119c>
 800969e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80096a2:	3301      	adds	r3, #1
 80096a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80096a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	029b      	lsls	r3, r3, #10
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096b6:	801a      	strh	r2, [r3, #0]
 80096b8:	e041      	b.n	800973e <USB_EPStartXfer+0x1232>
 80096ba:	463b      	mov	r3, r7
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	095b      	lsrs	r3, r3, #5
 80096c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80096c6:	463b      	mov	r3, r7
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	f003 031f 	and.w	r3, r3, #31
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d104      	bne.n	80096de <USB_EPStartXfer+0x11d2>
 80096d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80096d8:	3b01      	subs	r3, #1
 80096da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80096de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	029b      	lsls	r3, r3, #10
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096f6:	801a      	strh	r2, [r3, #0]
 80096f8:	e021      	b.n	800973e <USB_EPStartXfer+0x1232>
 80096fa:	463b      	mov	r3, r7
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	785b      	ldrb	r3, [r3, #1]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d11c      	bne.n	800973e <USB_EPStartXfer+0x1232>
 8009704:	1d3b      	adds	r3, r7, #4
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800970c:	b29b      	uxth	r3, r3
 800970e:	461a      	mov	r2, r3
 8009710:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009714:	4413      	add	r3, r2
 8009716:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800971a:	463b      	mov	r3, r7
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	011a      	lsls	r2, r3, #4
 8009722:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009726:	4413      	add	r3, r2
 8009728:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800972c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009730:	463b      	mov	r3, r7
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	b29a      	uxth	r2, r3
 8009738:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800973c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800973e:	463b      	mov	r3, r7
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	69db      	ldr	r3, [r3, #28]
 8009744:	2b00      	cmp	r3, #0
 8009746:	f000 81a4 	beq.w	8009a92 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800974a:	1d3b      	adds	r3, r7, #4
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	463b      	mov	r3, r7
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	4413      	add	r3, r2
 8009758:	881b      	ldrh	r3, [r3, #0]
 800975a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800975e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009766:	2b00      	cmp	r3, #0
 8009768:	d005      	beq.n	8009776 <USB_EPStartXfer+0x126a>
 800976a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800976e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10d      	bne.n	8009792 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009776:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800977a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800977e:	2b00      	cmp	r3, #0
 8009780:	f040 8187 	bne.w	8009a92 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009784:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800978c:	2b00      	cmp	r3, #0
 800978e:	f040 8180 	bne.w	8009a92 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009792:	1d3b      	adds	r3, r7, #4
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	463b      	mov	r3, r7
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	881b      	ldrh	r3, [r3, #0]
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ac:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80097b0:	1d3b      	adds	r3, r7, #4
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	463b      	mov	r3, r7
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	441a      	add	r2, r3
 80097be:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80097c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	8013      	strh	r3, [r2, #0]
 80097d6:	e15c      	b.n	8009a92 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80097d8:	463b      	mov	r3, r7
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	78db      	ldrb	r3, [r3, #3]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	f040 8155 	bne.w	8009a8e <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80097e4:	463b      	mov	r3, r7
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	699a      	ldr	r2, [r3, #24]
 80097ea:	463b      	mov	r3, r7
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d90e      	bls.n	8009812 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80097f4:	463b      	mov	r3, r7
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80097fe:	463b      	mov	r3, r7
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	699a      	ldr	r2, [r3, #24]
 8009804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009808:	1ad2      	subs	r2, r2, r3
 800980a:	463b      	mov	r3, r7
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	619a      	str	r2, [r3, #24]
 8009810:	e008      	b.n	8009824 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8009812:	463b      	mov	r3, r7
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800981c:	463b      	mov	r3, r7
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2200      	movs	r2, #0
 8009822:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009824:	463b      	mov	r3, r7
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	785b      	ldrb	r3, [r3, #1]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d16f      	bne.n	800990e <USB_EPStartXfer+0x1402>
 800982e:	1d3b      	adds	r3, r7, #4
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009836:	1d3b      	adds	r3, r7, #4
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800983e:	b29b      	uxth	r3, r3
 8009840:	461a      	mov	r2, r3
 8009842:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009846:	4413      	add	r3, r2
 8009848:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800984c:	463b      	mov	r3, r7
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	011a      	lsls	r2, r3, #4
 8009854:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009858:	4413      	add	r3, r2
 800985a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800985e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009866:	2b00      	cmp	r3, #0
 8009868:	d116      	bne.n	8009898 <USB_EPStartXfer+0x138c>
 800986a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	b29b      	uxth	r3, r3
 8009872:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009876:	b29a      	uxth	r2, r3
 8009878:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800987c:	801a      	strh	r2, [r3, #0]
 800987e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009882:	881b      	ldrh	r3, [r3, #0]
 8009884:	b29b      	uxth	r3, r3
 8009886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800988a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800988e:	b29a      	uxth	r2, r3
 8009890:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009894:	801a      	strh	r2, [r3, #0]
 8009896:	e05f      	b.n	8009958 <USB_EPStartXfer+0x144c>
 8009898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800989c:	2b3e      	cmp	r3, #62	; 0x3e
 800989e:	d818      	bhi.n	80098d2 <USB_EPStartXfer+0x13c6>
 80098a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098a4:	085b      	lsrs	r3, r3, #1
 80098a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80098aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d004      	beq.n	80098c0 <USB_EPStartXfer+0x13b4>
 80098b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098ba:	3301      	adds	r3, #1
 80098bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80098c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	029b      	lsls	r3, r3, #10
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80098ce:	801a      	strh	r2, [r3, #0]
 80098d0:	e042      	b.n	8009958 <USB_EPStartXfer+0x144c>
 80098d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098d6:	095b      	lsrs	r3, r3, #5
 80098d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80098dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098e0:	f003 031f 	and.w	r3, r3, #31
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d104      	bne.n	80098f2 <USB_EPStartXfer+0x13e6>
 80098e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098ec:	3b01      	subs	r3, #1
 80098ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80098f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	029b      	lsls	r3, r3, #10
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009904:	b29a      	uxth	r2, r3
 8009906:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800990a:	801a      	strh	r2, [r3, #0]
 800990c:	e024      	b.n	8009958 <USB_EPStartXfer+0x144c>
 800990e:	463b      	mov	r3, r7
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	785b      	ldrb	r3, [r3, #1]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d11f      	bne.n	8009958 <USB_EPStartXfer+0x144c>
 8009918:	1d3b      	adds	r3, r7, #4
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009920:	1d3b      	adds	r3, r7, #4
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009928:	b29b      	uxth	r3, r3
 800992a:	461a      	mov	r2, r3
 800992c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009930:	4413      	add	r3, r2
 8009932:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009936:	463b      	mov	r3, r7
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	011a      	lsls	r2, r3, #4
 800993e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009942:	4413      	add	r3, r2
 8009944:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009948:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800994c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009950:	b29a      	uxth	r2, r3
 8009952:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009956:	801a      	strh	r2, [r3, #0]
 8009958:	1d3b      	adds	r3, r7, #4
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009960:	463b      	mov	r3, r7
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	785b      	ldrb	r3, [r3, #1]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d16f      	bne.n	8009a4a <USB_EPStartXfer+0x153e>
 800996a:	1d3b      	adds	r3, r7, #4
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009972:	1d3b      	adds	r3, r7, #4
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800997a:	b29b      	uxth	r3, r3
 800997c:	461a      	mov	r2, r3
 800997e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009982:	4413      	add	r3, r2
 8009984:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009988:	463b      	mov	r3, r7
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	011a      	lsls	r2, r3, #4
 8009990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009994:	4413      	add	r3, r2
 8009996:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800999a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800999e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d116      	bne.n	80099d4 <USB_EPStartXfer+0x14c8>
 80099a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80099aa:	881b      	ldrh	r3, [r3, #0]
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80099b8:	801a      	strh	r2, [r3, #0]
 80099ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80099be:	881b      	ldrh	r3, [r3, #0]
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80099d0:	801a      	strh	r2, [r3, #0]
 80099d2:	e05e      	b.n	8009a92 <USB_EPStartXfer+0x1586>
 80099d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099d8:	2b3e      	cmp	r3, #62	; 0x3e
 80099da:	d818      	bhi.n	8009a0e <USB_EPStartXfer+0x1502>
 80099dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099e0:	085b      	lsrs	r3, r3, #1
 80099e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80099e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099ea:	f003 0301 	and.w	r3, r3, #1
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d004      	beq.n	80099fc <USB_EPStartXfer+0x14f0>
 80099f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80099f6:	3301      	adds	r3, #1
 80099f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80099fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	029b      	lsls	r3, r3, #10
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a0a:	801a      	strh	r2, [r3, #0]
 8009a0c:	e041      	b.n	8009a92 <USB_EPStartXfer+0x1586>
 8009a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a12:	095b      	lsrs	r3, r3, #5
 8009a14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a1c:	f003 031f 	and.w	r3, r3, #31
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d104      	bne.n	8009a2e <USB_EPStartXfer+0x1522>
 8009a24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009a2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	029b      	lsls	r3, r3, #10
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a46:	801a      	strh	r2, [r3, #0]
 8009a48:	e023      	b.n	8009a92 <USB_EPStartXfer+0x1586>
 8009a4a:	463b      	mov	r3, r7
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	785b      	ldrb	r3, [r3, #1]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d11e      	bne.n	8009a92 <USB_EPStartXfer+0x1586>
 8009a54:	1d3b      	adds	r3, r7, #4
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	461a      	mov	r2, r3
 8009a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a64:	4413      	add	r3, r2
 8009a66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a6a:	463b      	mov	r3, r7
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	011a      	lsls	r2, r3, #4
 8009a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a76:	4413      	add	r3, r2
 8009a78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a8a:	801a      	strh	r2, [r3, #0]
 8009a8c:	e001      	b.n	8009a92 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e02e      	b.n	8009af0 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a92:	1d3b      	adds	r3, r7, #4
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	463b      	mov	r3, r7
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	881b      	ldrh	r3, [r3, #0]
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aac:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009ab0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009ab4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009ab8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009abc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009ac0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009ac4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009ac8:	1d3b      	adds	r3, r7, #4
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	463b      	mov	r3, r7
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	441a      	add	r2, r3
 8009ad6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009afa:	b480      	push	{r7}
 8009afc:	b085      	sub	sp, #20
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
 8009b02:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	785b      	ldrb	r3, [r3, #1]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d020      	beq.n	8009b4e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	881b      	ldrh	r3, [r3, #0]
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b22:	81bb      	strh	r3, [r7, #12]
 8009b24:	89bb      	ldrh	r3, [r7, #12]
 8009b26:	f083 0310 	eor.w	r3, r3, #16
 8009b2a:	81bb      	strh	r3, [r7, #12]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	441a      	add	r2, r3
 8009b36:	89bb      	ldrh	r3, [r7, #12]
 8009b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	8013      	strh	r3, [r2, #0]
 8009b4c:	e01f      	b.n	8009b8e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	881b      	ldrh	r3, [r3, #0]
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b64:	81fb      	strh	r3, [r7, #14]
 8009b66:	89fb      	ldrh	r3, [r7, #14]
 8009b68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b6c:	81fb      	strh	r3, [r7, #14]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	441a      	add	r2, r3
 8009b78:	89fb      	ldrh	r3, [r7, #14]
 8009b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3714      	adds	r7, #20
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bc80      	pop	{r7}
 8009b98:	4770      	bx	lr

08009b9a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b087      	sub	sp, #28
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	7b1b      	ldrb	r3, [r3, #12]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f040 809d 	bne.w	8009ce8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	785b      	ldrb	r3, [r3, #1]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d04c      	beq.n	8009c50 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4413      	add	r3, r2
 8009bc0:	881b      	ldrh	r3, [r3, #0]
 8009bc2:	823b      	strh	r3, [r7, #16]
 8009bc4:	8a3b      	ldrh	r3, [r7, #16]
 8009bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d01b      	beq.n	8009c06 <USB_EPClearStall+0x6c>
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4413      	add	r3, r2
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009be4:	81fb      	strh	r3, [r7, #14]
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	441a      	add	r2, r3
 8009bf0:	89fb      	ldrh	r3, [r7, #14]
 8009bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	78db      	ldrb	r3, [r3, #3]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d06c      	beq.n	8009ce8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	4413      	add	r3, r2
 8009c18:	881b      	ldrh	r3, [r3, #0]
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c24:	81bb      	strh	r3, [r7, #12]
 8009c26:	89bb      	ldrh	r3, [r7, #12]
 8009c28:	f083 0320 	eor.w	r3, r3, #32
 8009c2c:	81bb      	strh	r3, [r7, #12]
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	441a      	add	r2, r3
 8009c38:	89bb      	ldrh	r3, [r7, #12]
 8009c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	8013      	strh	r3, [r2, #0]
 8009c4e:	e04b      	b.n	8009ce8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	4413      	add	r3, r2
 8009c5a:	881b      	ldrh	r3, [r3, #0]
 8009c5c:	82fb      	strh	r3, [r7, #22]
 8009c5e:	8afb      	ldrh	r3, [r7, #22]
 8009c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d01b      	beq.n	8009ca0 <USB_EPClearStall+0x106>
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	4413      	add	r3, r2
 8009c72:	881b      	ldrh	r3, [r3, #0]
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c7e:	82bb      	strh	r3, [r7, #20]
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	441a      	add	r2, r3
 8009c8a:	8abb      	ldrh	r3, [r7, #20]
 8009c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cb6:	827b      	strh	r3, [r7, #18]
 8009cb8:	8a7b      	ldrh	r3, [r7, #18]
 8009cba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009cbe:	827b      	strh	r3, [r7, #18]
 8009cc0:	8a7b      	ldrh	r3, [r7, #18]
 8009cc2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009cc6:	827b      	strh	r3, [r7, #18]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	441a      	add	r2, r3
 8009cd2:	8a7b      	ldrh	r3, [r7, #18]
 8009cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	371c      	adds	r7, #28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bc80      	pop	{r7}
 8009cf2:	4770      	bx	lr

08009cf4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009d00:	78fb      	ldrb	r3, [r7, #3]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d103      	bne.n	8009d0e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2280      	movs	r2, #128	; 0x80
 8009d0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bc80      	pop	{r7}
 8009d18:	4770      	bx	lr

08009d1a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bc80      	pop	{r7}
 8009d2c:	4770      	bx	lr

08009d2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009d2e:	b480      	push	{r7}
 8009d30:	b083      	sub	sp, #12
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bc80      	pop	{r7}
 8009d40:	4770      	bx	lr

08009d42 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009d42:	b480      	push	{r7}
 8009d44:	b085      	sub	sp, #20
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009d54:	68fb      	ldr	r3, [r7, #12]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bc80      	pop	{r7}
 8009d5e:	4770      	bx	lr

08009d60 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bc80      	pop	{r7}
 8009d74:	4770      	bx	lr

08009d76 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b08d      	sub	sp, #52	; 0x34
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	60f8      	str	r0, [r7, #12]
 8009d7e:	60b9      	str	r1, [r7, #8]
 8009d80:	4611      	mov	r1, r2
 8009d82:	461a      	mov	r2, r3
 8009d84:	460b      	mov	r3, r1
 8009d86:	80fb      	strh	r3, [r7, #6]
 8009d88:	4613      	mov	r3, r2
 8009d8a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009d8c:	88bb      	ldrh	r3, [r7, #4]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	085b      	lsrs	r3, r3, #1
 8009d92:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009d9c:	88fb      	ldrh	r3, [r7, #6]
 8009d9e:	005a      	lsls	r2, r3, #1
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	4413      	add	r3, r2
 8009da4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009da8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dae:	e01e      	b.n	8009dee <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	3301      	adds	r3, #1
 8009dba:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	021b      	lsls	r3, r3, #8
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd8:	3302      	adds	r3, #2
 8009dda:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dde:	3302      	adds	r3, #2
 8009de0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de4:	3301      	adds	r3, #1
 8009de6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dea:	3b01      	subs	r3, #1
 8009dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d1dd      	bne.n	8009db0 <USB_WritePMA+0x3a>
  }
}
 8009df4:	bf00      	nop
 8009df6:	bf00      	nop
 8009df8:	3734      	adds	r7, #52	; 0x34
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bc80      	pop	{r7}
 8009dfe:	4770      	bx	lr

08009e00 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b08b      	sub	sp, #44	; 0x2c
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	460b      	mov	r3, r1
 8009e10:	80fb      	strh	r3, [r7, #6]
 8009e12:	4613      	mov	r3, r2
 8009e14:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009e16:	88bb      	ldrh	r3, [r7, #4]
 8009e18:	085b      	lsrs	r3, r3, #1
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009e26:	88fb      	ldrh	r3, [r7, #6]
 8009e28:	005a      	lsls	r2, r3, #1
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e32:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	627b      	str	r3, [r7, #36]	; 0x24
 8009e38:	e01b      	b.n	8009e72 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009e3a:	6a3b      	ldr	r3, [r7, #32]
 8009e3c:	881b      	ldrh	r3, [r3, #0]
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009e42:	6a3b      	ldr	r3, [r7, #32]
 8009e44:	3302      	adds	r3, #2
 8009e46:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	b2da      	uxtb	r2, r3
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	3301      	adds	r3, #1
 8009e54:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	0a1b      	lsrs	r3, r3, #8
 8009e5a:	b2da      	uxtb	r2, r3
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	3301      	adds	r3, #1
 8009e64:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009e66:	6a3b      	ldr	r3, [r7, #32]
 8009e68:	3302      	adds	r3, #2
 8009e6a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	627b      	str	r3, [r7, #36]	; 0x24
 8009e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1e0      	bne.n	8009e3a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009e78:	88bb      	ldrh	r3, [r7, #4]
 8009e7a:	f003 0301 	and.w	r3, r3, #1
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d007      	beq.n	8009e94 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009e84:	6a3b      	ldr	r3, [r7, #32]
 8009e86:	881b      	ldrh	r3, [r3, #0]
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	b2da      	uxtb	r2, r3
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	701a      	strb	r2, [r3, #0]
  }
}
 8009e94:	bf00      	nop
 8009e96:	372c      	adds	r7, #44	; 0x2c
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bc80      	pop	{r7}
 8009e9c:	4770      	bx	lr

08009e9e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b084      	sub	sp, #16
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	7c1b      	ldrb	r3, [r3, #16]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d115      	bne.n	8009ee2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009eb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009eba:	2202      	movs	r2, #2
 8009ebc:	2181      	movs	r1, #129	; 0x81
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f005 f8eb 	bl	800f09a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009eca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ece:	2202      	movs	r2, #2
 8009ed0:	2101      	movs	r1, #1
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f005 f8e1 	bl	800f09a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009ee0:	e012      	b.n	8009f08 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009ee2:	2340      	movs	r3, #64	; 0x40
 8009ee4:	2202      	movs	r2, #2
 8009ee6:	2181      	movs	r1, #129	; 0x81
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f005 f8d6 	bl	800f09a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009ef4:	2340      	movs	r3, #64	; 0x40
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	2101      	movs	r1, #1
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f005 f8cd 	bl	800f09a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009f08:	2308      	movs	r3, #8
 8009f0a:	2203      	movs	r2, #3
 8009f0c:	2182      	movs	r1, #130	; 0x82
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f005 f8c3 	bl	800f09a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009f1a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009f1e:	f005 f9e3 	bl	800f2e8 <USBD_static_malloc>
 8009f22:	4602      	mov	r2, r0
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d102      	bne.n	8009f3a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009f34:	2301      	movs	r3, #1
 8009f36:	73fb      	strb	r3, [r7, #15]
 8009f38:	e026      	b.n	8009f88 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f40:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	7c1b      	ldrb	r3, [r3, #16]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d109      	bne.n	8009f78 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f6e:	2101      	movs	r1, #1
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f005 f983 	bl	800f27c <USBD_LL_PrepareReceive>
 8009f76:	e007      	b.n	8009f88 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f7e:	2340      	movs	r3, #64	; 0x40
 8009f80:	2101      	movs	r1, #1
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f005 f97a 	bl	800f27c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b084      	sub	sp, #16
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009fa2:	2181      	movs	r1, #129	; 0x81
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f005 f89e 	bl	800f0e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f005 f897 	bl	800f0e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009fc0:	2182      	movs	r1, #130	; 0x82
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f005 f88f 	bl	800f0e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d00e      	beq.n	8009ff6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f005 f989 	bl	800f300 <USBD_static_free>
    pdev->pClassData = NULL;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a010:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a012:	2300      	movs	r3, #0
 800a014:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a016:	2300      	movs	r3, #0
 800a018:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a01a:	2300      	movs	r3, #0
 800a01c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a026:	2b00      	cmp	r3, #0
 800a028:	d039      	beq.n	800a09e <USBD_CDC_Setup+0x9e>
 800a02a:	2b20      	cmp	r3, #32
 800a02c:	d17f      	bne.n	800a12e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	88db      	ldrh	r3, [r3, #6]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d029      	beq.n	800a08a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	b25b      	sxtb	r3, r3
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	da11      	bge.n	800a064 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	683a      	ldr	r2, [r7, #0]
 800a04a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a04c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a04e:	683a      	ldr	r2, [r7, #0]
 800a050:	88d2      	ldrh	r2, [r2, #6]
 800a052:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a054:	6939      	ldr	r1, [r7, #16]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	88db      	ldrh	r3, [r3, #6]
 800a05a:	461a      	mov	r2, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f001 fa0a 	bl	800b476 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a062:	e06b      	b.n	800a13c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	785a      	ldrb	r2, [r3, #1]
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	88db      	ldrh	r3, [r3, #6]
 800a072:	b2da      	uxtb	r2, r3
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a07a:	6939      	ldr	r1, [r7, #16]
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	88db      	ldrh	r3, [r3, #6]
 800a080:	461a      	mov	r2, r3
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f001 fa25 	bl	800b4d2 <USBD_CtlPrepareRx>
      break;
 800a088:	e058      	b.n	800a13c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	7850      	ldrb	r0, [r2, #1]
 800a096:	2200      	movs	r2, #0
 800a098:	6839      	ldr	r1, [r7, #0]
 800a09a:	4798      	blx	r3
      break;
 800a09c:	e04e      	b.n	800a13c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	785b      	ldrb	r3, [r3, #1]
 800a0a2:	2b0b      	cmp	r3, #11
 800a0a4:	d02e      	beq.n	800a104 <USBD_CDC_Setup+0x104>
 800a0a6:	2b0b      	cmp	r3, #11
 800a0a8:	dc38      	bgt.n	800a11c <USBD_CDC_Setup+0x11c>
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d002      	beq.n	800a0b4 <USBD_CDC_Setup+0xb4>
 800a0ae:	2b0a      	cmp	r3, #10
 800a0b0:	d014      	beq.n	800a0dc <USBD_CDC_Setup+0xdc>
 800a0b2:	e033      	b.n	800a11c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0ba:	2b03      	cmp	r3, #3
 800a0bc:	d107      	bne.n	800a0ce <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a0be:	f107 030c 	add.w	r3, r7, #12
 800a0c2:	2202      	movs	r2, #2
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f001 f9d5 	bl	800b476 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a0cc:	e02e      	b.n	800a12c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a0ce:	6839      	ldr	r1, [r7, #0]
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f001 f966 	bl	800b3a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	75fb      	strb	r3, [r7, #23]
          break;
 800a0da:	e027      	b.n	800a12c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0e2:	2b03      	cmp	r3, #3
 800a0e4:	d107      	bne.n	800a0f6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a0e6:	f107 030f 	add.w	r3, r7, #15
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f001 f9c1 	bl	800b476 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a0f4:	e01a      	b.n	800a12c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a0f6:	6839      	ldr	r1, [r7, #0]
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f001 f952 	bl	800b3a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a0fe:	2302      	movs	r3, #2
 800a100:	75fb      	strb	r3, [r7, #23]
          break;
 800a102:	e013      	b.n	800a12c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a10a:	2b03      	cmp	r3, #3
 800a10c:	d00d      	beq.n	800a12a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f001 f946 	bl	800b3a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a116:	2302      	movs	r3, #2
 800a118:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a11a:	e006      	b.n	800a12a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f001 f93f 	bl	800b3a2 <USBD_CtlError>
          ret = USBD_FAIL;
 800a124:	2302      	movs	r3, #2
 800a126:	75fb      	strb	r3, [r7, #23]
          break;
 800a128:	e000      	b.n	800a12c <USBD_CDC_Setup+0x12c>
          break;
 800a12a:	bf00      	nop
      }
      break;
 800a12c:	e006      	b.n	800a13c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a12e:	6839      	ldr	r1, [r7, #0]
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f001 f936 	bl	800b3a2 <USBD_CtlError>
      ret = USBD_FAIL;
 800a136:	2302      	movs	r3, #2
 800a138:	75fb      	strb	r3, [r7, #23]
      break;
 800a13a:	bf00      	nop
  }

  return ret;
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3718      	adds	r7, #24
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b084      	sub	sp, #16
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	460b      	mov	r3, r1
 800a150:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a158:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a160:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d03a      	beq.n	800a1e2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a16c:	78fa      	ldrb	r2, [r7, #3]
 800a16e:	6879      	ldr	r1, [r7, #4]
 800a170:	4613      	mov	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	440b      	add	r3, r1
 800a17a:	331c      	adds	r3, #28
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d029      	beq.n	800a1d6 <USBD_CDC_DataIn+0x90>
 800a182:	78fa      	ldrb	r2, [r7, #3]
 800a184:	6879      	ldr	r1, [r7, #4]
 800a186:	4613      	mov	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4413      	add	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	440b      	add	r3, r1
 800a190:	331c      	adds	r3, #28
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	78f9      	ldrb	r1, [r7, #3]
 800a196:	68b8      	ldr	r0, [r7, #8]
 800a198:	460b      	mov	r3, r1
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	440b      	add	r3, r1
 800a19e:	00db      	lsls	r3, r3, #3
 800a1a0:	4403      	add	r3, r0
 800a1a2:	3338      	adds	r3, #56	; 0x38
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	fbb2 f1f3 	udiv	r1, r2, r3
 800a1aa:	fb03 f301 	mul.w	r3, r3, r1
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d110      	bne.n	800a1d6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a1b4:	78fa      	ldrb	r2, [r7, #3]
 800a1b6:	6879      	ldr	r1, [r7, #4]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	440b      	add	r3, r1
 800a1c2:	331c      	adds	r3, #28
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a1c8:	78f9      	ldrb	r1, [r7, #3]
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f005 f831 	bl	800f236 <USBD_LL_Transmit>
 800a1d4:	e003      	b.n	800a1de <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	e000      	b.n	800a1e4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a1e2:	2302      	movs	r3, #2
  }
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1fe:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a200:	78fb      	ldrb	r3, [r7, #3]
 800a202:	4619      	mov	r1, r3
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f005 f85c 	bl	800f2c2 <USBD_LL_GetRxDataSize>
 800a20a:	4602      	mov	r2, r0
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00d      	beq.n	800a238 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a230:	4611      	mov	r1, r2
 800a232:	4798      	blx	r3

    return USBD_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	e000      	b.n	800a23a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a238:	2302      	movs	r3, #2
  }
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b084      	sub	sp, #16
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a250:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d015      	beq.n	800a288 <USBD_CDC_EP0_RxReady+0x46>
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a262:	2bff      	cmp	r3, #255	; 0xff
 800a264:	d010      	beq.n	800a288 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a274:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a27c:	b292      	uxth	r2, r2
 800a27e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	22ff      	movs	r2, #255	; 0xff
 800a284:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
	...

0800a294 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2243      	movs	r2, #67	; 0x43
 800a2a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a2a2:	4b03      	ldr	r3, [pc, #12]	; (800a2b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bc80      	pop	{r7}
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	200000a4 	.word	0x200000a4

0800a2b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2243      	movs	r2, #67	; 0x43
 800a2c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a2c2:	4b03      	ldr	r3, [pc, #12]	; (800a2d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bc80      	pop	{r7}
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop
 800a2d0:	20000060 	.word	0x20000060

0800a2d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2243      	movs	r2, #67	; 0x43
 800a2e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a2e2:	4b03      	ldr	r3, [pc, #12]	; (800a2f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bc80      	pop	{r7}
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	200000e8 	.word	0x200000e8

0800a2f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	220a      	movs	r2, #10
 800a300:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a302:	4b03      	ldr	r3, [pc, #12]	; (800a310 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a304:	4618      	mov	r0, r3
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	bc80      	pop	{r7}
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	2000001c 	.word	0x2000001c

0800a314 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a314:	b480      	push	{r7}
 800a316:	b085      	sub	sp, #20
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a31e:	2302      	movs	r3, #2
 800a320:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d005      	beq.n	800a334 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a330:	2300      	movs	r3, #0
 800a332:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a334:	7bfb      	ldrb	r3, [r7, #15]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3714      	adds	r7, #20
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bc80      	pop	{r7}
 800a33e:	4770      	bx	lr

0800a340 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a340:	b480      	push	{r7}
 800a342:	b087      	sub	sp, #28
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	4613      	mov	r3, r2
 800a34c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a354:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a35e:	88fa      	ldrh	r2, [r7, #6]
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	371c      	adds	r7, #28
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bc80      	pop	{r7}
 800a370:	4770      	bx	lr

0800a372 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a372:	b480      	push	{r7}
 800a374:	b085      	sub	sp, #20
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a382:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3714      	adds	r7, #20
 800a392:	46bd      	mov	sp, r7
 800a394:	bc80      	pop	{r7}
 800a396:	4770      	bx	lr

0800a398 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d01c      	beq.n	800a3ec <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d115      	bne.n	800a3e8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	2181      	movs	r1, #129	; 0x81
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f004 ff29 	bl	800f236 <USBD_LL_Transmit>

      return USBD_OK;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	e002      	b.n	800a3ee <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e000      	b.n	800a3ee <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a3ec:	2302      	movs	r3, #2
  }
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b084      	sub	sp, #16
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a404:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d017      	beq.n	800a440 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	7c1b      	ldrb	r3, [r3, #16]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d109      	bne.n	800a42c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a41e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a422:	2101      	movs	r1, #1
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f004 ff29 	bl	800f27c <USBD_LL_PrepareReceive>
 800a42a:	e007      	b.n	800a43c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a432:	2340      	movs	r3, #64	; 0x40
 800a434:	2101      	movs	r1, #1
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f004 ff20 	bl	800f27c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	e000      	b.n	800a442 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a440:	2302      	movs	r3, #2
  }
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	60f8      	str	r0, [r7, #12]
 800a452:	60b9      	str	r1, [r7, #8]
 800a454:	4613      	mov	r3, r2
 800a456:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a45e:	2302      	movs	r3, #2
 800a460:	e01a      	b.n	800a498 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d003      	beq.n	800a474 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d003      	beq.n	800a482 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2201      	movs	r2, #1
 800a486:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	79fa      	ldrb	r2, [r7, #7]
 800a48e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f004 fd8d 	bl	800efb0 <USBD_LL_Init>

  return USBD_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d006      	beq.n	800a4c2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	73fb      	strb	r3, [r7, #15]
 800a4c0:	e001      	b.n	800a4c6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a4c2:	2302      	movs	r3, #2
 800a4c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bc80      	pop	{r7}
 800a4d0:	4770      	bx	lr

0800a4d2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b082      	sub	sp, #8
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f004 fdc2 	bl	800f064 <USBD_LL_Start>

  return USBD_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b083      	sub	sp, #12
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bc80      	pop	{r7}
 800a4fc:	4770      	bx	lr

0800a4fe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b084      	sub	sp, #16
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	460b      	mov	r3, r1
 800a508:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a50a:	2302      	movs	r3, #2
 800a50c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00c      	beq.n	800a532 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	78fa      	ldrb	r2, [r7, #3]
 800a522:	4611      	mov	r1, r2
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	4798      	blx	r3
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d101      	bne.n	800a532 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a532:	7bfb      	ldrb	r3, [r7, #15]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	460b      	mov	r3, r1
 800a546:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	78fa      	ldrb	r2, [r7, #3]
 800a552:	4611      	mov	r1, r2
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	4798      	blx	r3

  return USBD_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b082      	sub	sp, #8
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a572:	6839      	ldr	r1, [r7, #0]
 800a574:	4618      	mov	r0, r3
 800a576:	f000 fed8 	bl	800b32a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a588:	461a      	mov	r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a596:	f003 031f 	and.w	r3, r3, #31
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	d016      	beq.n	800a5cc <USBD_LL_SetupStage+0x6a>
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d81c      	bhi.n	800a5dc <USBD_LL_SetupStage+0x7a>
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d002      	beq.n	800a5ac <USBD_LL_SetupStage+0x4a>
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d008      	beq.n	800a5bc <USBD_LL_SetupStage+0x5a>
 800a5aa:	e017      	b.n	800a5dc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 f9cb 	bl	800a950 <USBD_StdDevReq>
      break;
 800a5ba:	e01a      	b.n	800a5f2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fa2d 	bl	800aa24 <USBD_StdItfReq>
      break;
 800a5ca:	e012      	b.n	800a5f2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fa6d 	bl	800aab4 <USBD_StdEPReq>
      break;
 800a5da:	e00a      	b.n	800a5f2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a5e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f004 fd9a 	bl	800f124 <USBD_LL_StallEP>
      break;
 800a5f0:	bf00      	nop
  }

  return USBD_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	460b      	mov	r3, r1
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a60a:	7afb      	ldrb	r3, [r7, #11]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d14b      	bne.n	800a6a8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a616:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a61e:	2b03      	cmp	r3, #3
 800a620:	d134      	bne.n	800a68c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	68da      	ldr	r2, [r3, #12]
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d919      	bls.n	800a662 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	68da      	ldr	r2, [r3, #12]
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	1ad2      	subs	r2, r2, r3
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	68da      	ldr	r2, [r3, #12]
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a644:	429a      	cmp	r2, r3
 800a646:	d203      	bcs.n	800a650 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	e002      	b.n	800a656 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a654:	b29b      	uxth	r3, r3
 800a656:	461a      	mov	r2, r3
 800a658:	6879      	ldr	r1, [r7, #4]
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f000 ff57 	bl	800b50e <USBD_CtlContinueRx>
 800a660:	e038      	b.n	800a6d4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00a      	beq.n	800a684 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a674:	2b03      	cmp	r3, #3
 800a676:	d105      	bne.n	800a684 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f000 ff54 	bl	800b532 <USBD_CtlSendStatus>
 800a68a:	e023      	b.n	800a6d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a692:	2b05      	cmp	r3, #5
 800a694:	d11e      	bne.n	800a6d4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a69e:	2100      	movs	r1, #0
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f004 fd3f 	bl	800f124 <USBD_LL_StallEP>
 800a6a6:	e015      	b.n	800a6d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ae:	699b      	ldr	r3, [r3, #24]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00d      	beq.n	800a6d0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	d108      	bne.n	800a6d0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	7afa      	ldrb	r2, [r7, #11]
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	4798      	blx	r3
 800a6ce:	e001      	b.n	800a6d4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	e000      	b.n	800a6d6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3718      	adds	r7, #24
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b086      	sub	sp, #24
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	60f8      	str	r0, [r7, #12]
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	607a      	str	r2, [r7, #4]
 800a6ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a6ec:	7afb      	ldrb	r3, [r7, #11]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d17f      	bne.n	800a7f2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	3314      	adds	r3, #20
 800a6f6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	d15c      	bne.n	800a7bc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	68da      	ldr	r2, [r3, #12]
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d915      	bls.n	800a73a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	68da      	ldr	r2, [r3, #12]
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	1ad2      	subs	r2, r2, r3
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	b29b      	uxth	r3, r3
 800a722:	461a      	mov	r2, r3
 800a724:	6879      	ldr	r1, [r7, #4]
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f000 fec1 	bl	800b4ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a72c:	2300      	movs	r3, #0
 800a72e:	2200      	movs	r2, #0
 800a730:	2100      	movs	r1, #0
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f004 fda2 	bl	800f27c <USBD_LL_PrepareReceive>
 800a738:	e04e      	b.n	800a7d8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	697a      	ldr	r2, [r7, #20]
 800a740:	6912      	ldr	r2, [r2, #16]
 800a742:	fbb3 f1f2 	udiv	r1, r3, r2
 800a746:	fb02 f201 	mul.w	r2, r2, r1
 800a74a:	1a9b      	subs	r3, r3, r2
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d11c      	bne.n	800a78a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	689a      	ldr	r2, [r3, #8]
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a758:	429a      	cmp	r2, r3
 800a75a:	d316      	bcc.n	800a78a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	689a      	ldr	r2, [r3, #8]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a766:	429a      	cmp	r2, r3
 800a768:	d20f      	bcs.n	800a78a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a76a:	2200      	movs	r2, #0
 800a76c:	2100      	movs	r1, #0
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f000 fe9d 	bl	800b4ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a77c:	2300      	movs	r3, #0
 800a77e:	2200      	movs	r2, #0
 800a780:	2100      	movs	r1, #0
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	f004 fd7a 	bl	800f27c <USBD_LL_PrepareReceive>
 800a788:	e026      	b.n	800a7d8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00a      	beq.n	800a7ac <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a79c:	2b03      	cmp	r3, #3
 800a79e:	d105      	bne.n	800a7ac <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a7ac:	2180      	movs	r1, #128	; 0x80
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f004 fcb8 	bl	800f124 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f000 fecf 	bl	800b558 <USBD_CtlReceiveStatus>
 800a7ba:	e00d      	b.n	800a7d8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a7c2:	2b04      	cmp	r3, #4
 800a7c4:	d004      	beq.n	800a7d0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d103      	bne.n	800a7d8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a7d0:	2180      	movs	r1, #128	; 0x80
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f004 fca6 	bl	800f124 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d11d      	bne.n	800a81e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f7ff fe81 	bl	800a4ea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a7f0:	e015      	b.n	800a81e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7f8:	695b      	ldr	r3, [r3, #20]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00d      	beq.n	800a81a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a804:	2b03      	cmp	r3, #3
 800a806:	d108      	bne.n	800a81a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a80e:	695b      	ldr	r3, [r3, #20]
 800a810:	7afa      	ldrb	r2, [r7, #11]
 800a812:	4611      	mov	r1, r2
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	4798      	blx	r3
 800a818:	e001      	b.n	800a81e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a81a:	2302      	movs	r3, #2
 800a81c:	e000      	b.n	800a820 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3718      	adds	r7, #24
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a830:	2340      	movs	r3, #64	; 0x40
 800a832:	2200      	movs	r2, #0
 800a834:	2100      	movs	r1, #0
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f004 fc2f 	bl	800f09a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2240      	movs	r2, #64	; 0x40
 800a848:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a84c:	2340      	movs	r3, #64	; 0x40
 800a84e:	2200      	movs	r2, #0
 800a850:	2180      	movs	r1, #128	; 0x80
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f004 fc21 	bl	800f09a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2240      	movs	r2, #64	; 0x40
 800a862:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2201      	movs	r2, #1
 800a868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d009      	beq.n	800a8a0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	6852      	ldr	r2, [r2, #4]
 800a898:	b2d2      	uxtb	r2, r2
 800a89a:	4611      	mov	r1, r2
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	4798      	blx	r3
  }

  return USBD_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3708      	adds	r7, #8
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a8aa:	b480      	push	{r7}
 800a8ac:	b083      	sub	sp, #12
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	78fa      	ldrb	r2, [r7, #3]
 800a8ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	370c      	adds	r7, #12
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bc80      	pop	{r7}
 800a8c6:	4770      	bx	lr

0800a8c8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2204      	movs	r2, #4
 800a8e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	370c      	adds	r7, #12
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bc80      	pop	{r7}
 800a8ee:	4770      	bx	lr

0800a8f0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8fe:	2b04      	cmp	r3, #4
 800a900:	d105      	bne.n	800a90e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	bc80      	pop	{r7}
 800a918:	4770      	bx	lr

0800a91a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b082      	sub	sp, #8
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a928:	2b03      	cmp	r3, #3
 800a92a:	d10b      	bne.n	800a944 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a932:	69db      	ldr	r3, [r3, #28]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d005      	beq.n	800a944 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a93e:	69db      	ldr	r3, [r3, #28]
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3708      	adds	r7, #8
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
	...

0800a950 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a966:	2b40      	cmp	r3, #64	; 0x40
 800a968:	d005      	beq.n	800a976 <USBD_StdDevReq+0x26>
 800a96a:	2b40      	cmp	r3, #64	; 0x40
 800a96c:	d84f      	bhi.n	800aa0e <USBD_StdDevReq+0xbe>
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d009      	beq.n	800a986 <USBD_StdDevReq+0x36>
 800a972:	2b20      	cmp	r3, #32
 800a974:	d14b      	bne.n	800aa0e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	6839      	ldr	r1, [r7, #0]
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	4798      	blx	r3
      break;
 800a984:	e048      	b.n	800aa18 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	785b      	ldrb	r3, [r3, #1]
 800a98a:	2b09      	cmp	r3, #9
 800a98c:	d839      	bhi.n	800aa02 <USBD_StdDevReq+0xb2>
 800a98e:	a201      	add	r2, pc, #4	; (adr r2, 800a994 <USBD_StdDevReq+0x44>)
 800a990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a994:	0800a9e5 	.word	0x0800a9e5
 800a998:	0800a9f9 	.word	0x0800a9f9
 800a99c:	0800aa03 	.word	0x0800aa03
 800a9a0:	0800a9ef 	.word	0x0800a9ef
 800a9a4:	0800aa03 	.word	0x0800aa03
 800a9a8:	0800a9c7 	.word	0x0800a9c7
 800a9ac:	0800a9bd 	.word	0x0800a9bd
 800a9b0:	0800aa03 	.word	0x0800aa03
 800a9b4:	0800a9db 	.word	0x0800a9db
 800a9b8:	0800a9d1 	.word	0x0800a9d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a9bc:	6839      	ldr	r1, [r7, #0]
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f9dc 	bl	800ad7c <USBD_GetDescriptor>
          break;
 800a9c4:	e022      	b.n	800aa0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fb3f 	bl	800b04c <USBD_SetAddress>
          break;
 800a9ce:	e01d      	b.n	800aa0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a9d0:	6839      	ldr	r1, [r7, #0]
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 fb7e 	bl	800b0d4 <USBD_SetConfig>
          break;
 800a9d8:	e018      	b.n	800aa0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fc07 	bl	800b1f0 <USBD_GetConfig>
          break;
 800a9e2:	e013      	b.n	800aa0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a9e4:	6839      	ldr	r1, [r7, #0]
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 fc37 	bl	800b25a <USBD_GetStatus>
          break;
 800a9ec:	e00e      	b.n	800aa0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a9ee:	6839      	ldr	r1, [r7, #0]
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 fc65 	bl	800b2c0 <USBD_SetFeature>
          break;
 800a9f6:	e009      	b.n	800aa0c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a9f8:	6839      	ldr	r1, [r7, #0]
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fc74 	bl	800b2e8 <USBD_ClrFeature>
          break;
 800aa00:	e004      	b.n	800aa0c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800aa02:	6839      	ldr	r1, [r7, #0]
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 fccc 	bl	800b3a2 <USBD_CtlError>
          break;
 800aa0a:	bf00      	nop
      }
      break;
 800aa0c:	e004      	b.n	800aa18 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800aa0e:	6839      	ldr	r1, [r7, #0]
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 fcc6 	bl	800b3a2 <USBD_CtlError>
      break;
 800aa16:	bf00      	nop
  }

  return ret;
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop

0800aa24 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa3a:	2b40      	cmp	r3, #64	; 0x40
 800aa3c:	d005      	beq.n	800aa4a <USBD_StdItfReq+0x26>
 800aa3e:	2b40      	cmp	r3, #64	; 0x40
 800aa40:	d82e      	bhi.n	800aaa0 <USBD_StdItfReq+0x7c>
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d001      	beq.n	800aa4a <USBD_StdItfReq+0x26>
 800aa46:	2b20      	cmp	r3, #32
 800aa48:	d12a      	bne.n	800aaa0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa50:	3b01      	subs	r3, #1
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d81d      	bhi.n	800aa92 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	889b      	ldrh	r3, [r3, #4]
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d813      	bhi.n	800aa88 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	6839      	ldr	r1, [r7, #0]
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	4798      	blx	r3
 800aa6e:	4603      	mov	r3, r0
 800aa70:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	88db      	ldrh	r3, [r3, #6]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d110      	bne.n	800aa9c <USBD_StdItfReq+0x78>
 800aa7a:	7bfb      	ldrb	r3, [r7, #15]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d10d      	bne.n	800aa9c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 fd56 	bl	800b532 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa86:	e009      	b.n	800aa9c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800aa88:	6839      	ldr	r1, [r7, #0]
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 fc89 	bl	800b3a2 <USBD_CtlError>
          break;
 800aa90:	e004      	b.n	800aa9c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800aa92:	6839      	ldr	r1, [r7, #0]
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 fc84 	bl	800b3a2 <USBD_CtlError>
          break;
 800aa9a:	e000      	b.n	800aa9e <USBD_StdItfReq+0x7a>
          break;
 800aa9c:	bf00      	nop
      }
      break;
 800aa9e:	e004      	b.n	800aaaa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800aaa0:	6839      	ldr	r1, [r7, #0]
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fc7d 	bl	800b3a2 <USBD_CtlError>
      break;
 800aaa8:	bf00      	nop
  }

  return USBD_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3710      	adds	r7, #16
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	889b      	ldrh	r3, [r3, #4]
 800aac6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aad0:	2b40      	cmp	r3, #64	; 0x40
 800aad2:	d007      	beq.n	800aae4 <USBD_StdEPReq+0x30>
 800aad4:	2b40      	cmp	r3, #64	; 0x40
 800aad6:	f200 8146 	bhi.w	800ad66 <USBD_StdEPReq+0x2b2>
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00a      	beq.n	800aaf4 <USBD_StdEPReq+0x40>
 800aade:	2b20      	cmp	r3, #32
 800aae0:	f040 8141 	bne.w	800ad66 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	6839      	ldr	r1, [r7, #0]
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	4798      	blx	r3
      break;
 800aaf2:	e13d      	b.n	800ad70 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aafc:	2b20      	cmp	r3, #32
 800aafe:	d10a      	bne.n	800ab16 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	6839      	ldr	r1, [r7, #0]
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	4798      	blx	r3
 800ab0e:	4603      	mov	r3, r0
 800ab10:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ab12:	7bfb      	ldrb	r3, [r7, #15]
 800ab14:	e12d      	b.n	800ad72 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	785b      	ldrb	r3, [r3, #1]
 800ab1a:	2b03      	cmp	r3, #3
 800ab1c:	d007      	beq.n	800ab2e <USBD_StdEPReq+0x7a>
 800ab1e:	2b03      	cmp	r3, #3
 800ab20:	f300 811b 	bgt.w	800ad5a <USBD_StdEPReq+0x2a6>
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d072      	beq.n	800ac0e <USBD_StdEPReq+0x15a>
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d03a      	beq.n	800aba2 <USBD_StdEPReq+0xee>
 800ab2c:	e115      	b.n	800ad5a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab34:	2b02      	cmp	r3, #2
 800ab36:	d002      	beq.n	800ab3e <USBD_StdEPReq+0x8a>
 800ab38:	2b03      	cmp	r3, #3
 800ab3a:	d015      	beq.n	800ab68 <USBD_StdEPReq+0xb4>
 800ab3c:	e02b      	b.n	800ab96 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab3e:	7bbb      	ldrb	r3, [r7, #14]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00c      	beq.n	800ab5e <USBD_StdEPReq+0xaa>
 800ab44:	7bbb      	ldrb	r3, [r7, #14]
 800ab46:	2b80      	cmp	r3, #128	; 0x80
 800ab48:	d009      	beq.n	800ab5e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ab4a:	7bbb      	ldrb	r3, [r7, #14]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f004 fae8 	bl	800f124 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ab54:	2180      	movs	r1, #128	; 0x80
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f004 fae4 	bl	800f124 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab5c:	e020      	b.n	800aba0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 fc1e 	bl	800b3a2 <USBD_CtlError>
              break;
 800ab66:	e01b      	b.n	800aba0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	885b      	ldrh	r3, [r3, #2]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10e      	bne.n	800ab8e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ab70:	7bbb      	ldrb	r3, [r7, #14]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00b      	beq.n	800ab8e <USBD_StdEPReq+0xda>
 800ab76:	7bbb      	ldrb	r3, [r7, #14]
 800ab78:	2b80      	cmp	r3, #128	; 0x80
 800ab7a:	d008      	beq.n	800ab8e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	88db      	ldrh	r3, [r3, #6]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d104      	bne.n	800ab8e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ab84:	7bbb      	ldrb	r3, [r7, #14]
 800ab86:	4619      	mov	r1, r3
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f004 facb 	bl	800f124 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fccf 	bl	800b532 <USBD_CtlSendStatus>

              break;
 800ab94:	e004      	b.n	800aba0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800ab96:	6839      	ldr	r1, [r7, #0]
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 fc02 	bl	800b3a2 <USBD_CtlError>
              break;
 800ab9e:	bf00      	nop
          }
          break;
 800aba0:	e0e0      	b.n	800ad64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aba8:	2b02      	cmp	r3, #2
 800abaa:	d002      	beq.n	800abb2 <USBD_StdEPReq+0xfe>
 800abac:	2b03      	cmp	r3, #3
 800abae:	d015      	beq.n	800abdc <USBD_StdEPReq+0x128>
 800abb0:	e026      	b.n	800ac00 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abb2:	7bbb      	ldrb	r3, [r7, #14]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d00c      	beq.n	800abd2 <USBD_StdEPReq+0x11e>
 800abb8:	7bbb      	ldrb	r3, [r7, #14]
 800abba:	2b80      	cmp	r3, #128	; 0x80
 800abbc:	d009      	beq.n	800abd2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800abbe:	7bbb      	ldrb	r3, [r7, #14]
 800abc0:	4619      	mov	r1, r3
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f004 faae 	bl	800f124 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800abc8:	2180      	movs	r1, #128	; 0x80
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f004 faaa 	bl	800f124 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800abd0:	e01c      	b.n	800ac0c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800abd2:	6839      	ldr	r1, [r7, #0]
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fbe4 	bl	800b3a2 <USBD_CtlError>
              break;
 800abda:	e017      	b.n	800ac0c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	885b      	ldrh	r3, [r3, #2]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d112      	bne.n	800ac0a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800abe4:	7bbb      	ldrb	r3, [r7, #14]
 800abe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abea:	2b00      	cmp	r3, #0
 800abec:	d004      	beq.n	800abf8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800abee:	7bbb      	ldrb	r3, [r7, #14]
 800abf0:	4619      	mov	r1, r3
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f004 fab5 	bl	800f162 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 fc9a 	bl	800b532 <USBD_CtlSendStatus>
              }
              break;
 800abfe:	e004      	b.n	800ac0a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ac00:	6839      	ldr	r1, [r7, #0]
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 fbcd 	bl	800b3a2 <USBD_CtlError>
              break;
 800ac08:	e000      	b.n	800ac0c <USBD_StdEPReq+0x158>
              break;
 800ac0a:	bf00      	nop
          }
          break;
 800ac0c:	e0aa      	b.n	800ad64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	d002      	beq.n	800ac1e <USBD_StdEPReq+0x16a>
 800ac18:	2b03      	cmp	r3, #3
 800ac1a:	d032      	beq.n	800ac82 <USBD_StdEPReq+0x1ce>
 800ac1c:	e097      	b.n	800ad4e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac1e:	7bbb      	ldrb	r3, [r7, #14]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d007      	beq.n	800ac34 <USBD_StdEPReq+0x180>
 800ac24:	7bbb      	ldrb	r3, [r7, #14]
 800ac26:	2b80      	cmp	r3, #128	; 0x80
 800ac28:	d004      	beq.n	800ac34 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fbb8 	bl	800b3a2 <USBD_CtlError>
                break;
 800ac32:	e091      	b.n	800ad58 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	da0b      	bge.n	800ac54 <USBD_StdEPReq+0x1a0>
 800ac3c:	7bbb      	ldrb	r3, [r7, #14]
 800ac3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac42:	4613      	mov	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	3310      	adds	r3, #16
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	4413      	add	r3, r2
 800ac50:	3304      	adds	r3, #4
 800ac52:	e00b      	b.n	800ac6c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
 800ac56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4413      	add	r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	4413      	add	r3, r2
 800ac6a:	3304      	adds	r3, #4
 800ac6c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	2200      	movs	r2, #0
 800ac72:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	2202      	movs	r2, #2
 800ac78:	4619      	mov	r1, r3
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 fbfb 	bl	800b476 <USBD_CtlSendData>
              break;
 800ac80:	e06a      	b.n	800ad58 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ac82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	da11      	bge.n	800acae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac8a:	7bbb      	ldrb	r3, [r7, #14]
 800ac8c:	f003 020f 	and.w	r2, r3, #15
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	4613      	mov	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	440b      	add	r3, r1
 800ac9c:	3318      	adds	r3, #24
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d117      	bne.n	800acd4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800aca4:	6839      	ldr	r1, [r7, #0]
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fb7b 	bl	800b3a2 <USBD_CtlError>
                  break;
 800acac:	e054      	b.n	800ad58 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800acae:	7bbb      	ldrb	r3, [r7, #14]
 800acb0:	f003 020f 	and.w	r2, r3, #15
 800acb4:	6879      	ldr	r1, [r7, #4]
 800acb6:	4613      	mov	r3, r2
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	4413      	add	r3, r2
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	440b      	add	r3, r1
 800acc0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d104      	bne.n	800acd4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fb68 	bl	800b3a2 <USBD_CtlError>
                  break;
 800acd2:	e041      	b.n	800ad58 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	da0b      	bge.n	800acf4 <USBD_StdEPReq+0x240>
 800acdc:	7bbb      	ldrb	r3, [r7, #14]
 800acde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ace2:	4613      	mov	r3, r2
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	4413      	add	r3, r2
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	3310      	adds	r3, #16
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	4413      	add	r3, r2
 800acf0:	3304      	adds	r3, #4
 800acf2:	e00b      	b.n	800ad0c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800acf4:	7bbb      	ldrb	r3, [r7, #14]
 800acf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acfa:	4613      	mov	r3, r2
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	4413      	add	r3, r2
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	4413      	add	r3, r2
 800ad0a:	3304      	adds	r3, #4
 800ad0c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad0e:	7bbb      	ldrb	r3, [r7, #14]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d002      	beq.n	800ad1a <USBD_StdEPReq+0x266>
 800ad14:	7bbb      	ldrb	r3, [r7, #14]
 800ad16:	2b80      	cmp	r3, #128	; 0x80
 800ad18:	d103      	bne.n	800ad22 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	601a      	str	r2, [r3, #0]
 800ad20:	e00e      	b.n	800ad40 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ad22:	7bbb      	ldrb	r3, [r7, #14]
 800ad24:	4619      	mov	r1, r3
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f004 fa3a 	bl	800f1a0 <USBD_LL_IsStallEP>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d003      	beq.n	800ad3a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	2201      	movs	r2, #1
 800ad36:	601a      	str	r2, [r3, #0]
 800ad38:	e002      	b.n	800ad40 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	2202      	movs	r2, #2
 800ad44:	4619      	mov	r1, r3
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 fb95 	bl	800b476 <USBD_CtlSendData>
              break;
 800ad4c:	e004      	b.n	800ad58 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ad4e:	6839      	ldr	r1, [r7, #0]
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 fb26 	bl	800b3a2 <USBD_CtlError>
              break;
 800ad56:	bf00      	nop
          }
          break;
 800ad58:	e004      	b.n	800ad64 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 fb20 	bl	800b3a2 <USBD_CtlError>
          break;
 800ad62:	bf00      	nop
      }
      break;
 800ad64:	e004      	b.n	800ad70 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 fb1a 	bl	800b3a2 <USBD_CtlError>
      break;
 800ad6e:	bf00      	nop
  }

  return ret;
 800ad70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
	...

0800ad7c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad86:	2300      	movs	r3, #0
 800ad88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	885b      	ldrh	r3, [r3, #2]
 800ad96:	0a1b      	lsrs	r3, r3, #8
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	3b01      	subs	r3, #1
 800ad9c:	2b06      	cmp	r3, #6
 800ad9e:	f200 8128 	bhi.w	800aff2 <USBD_GetDescriptor+0x276>
 800ada2:	a201      	add	r2, pc, #4	; (adr r2, 800ada8 <USBD_GetDescriptor+0x2c>)
 800ada4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada8:	0800adc5 	.word	0x0800adc5
 800adac:	0800addd 	.word	0x0800addd
 800adb0:	0800ae1d 	.word	0x0800ae1d
 800adb4:	0800aff3 	.word	0x0800aff3
 800adb8:	0800aff3 	.word	0x0800aff3
 800adbc:	0800af93 	.word	0x0800af93
 800adc0:	0800afbf 	.word	0x0800afbf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	7c12      	ldrb	r2, [r2, #16]
 800add0:	f107 0108 	add.w	r1, r7, #8
 800add4:	4610      	mov	r0, r2
 800add6:	4798      	blx	r3
 800add8:	60f8      	str	r0, [r7, #12]
      break;
 800adda:	e112      	b.n	800b002 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	7c1b      	ldrb	r3, [r3, #16]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10d      	bne.n	800ae00 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adec:	f107 0208 	add.w	r2, r7, #8
 800adf0:	4610      	mov	r0, r2
 800adf2:	4798      	blx	r3
 800adf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	3301      	adds	r3, #1
 800adfa:	2202      	movs	r2, #2
 800adfc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800adfe:	e100      	b.n	800b002 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae08:	f107 0208 	add.w	r2, r7, #8
 800ae0c:	4610      	mov	r0, r2
 800ae0e:	4798      	blx	r3
 800ae10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	3301      	adds	r3, #1
 800ae16:	2202      	movs	r2, #2
 800ae18:	701a      	strb	r2, [r3, #0]
      break;
 800ae1a:	e0f2      	b.n	800b002 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	885b      	ldrh	r3, [r3, #2]
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	2b05      	cmp	r3, #5
 800ae24:	f200 80ac 	bhi.w	800af80 <USBD_GetDescriptor+0x204>
 800ae28:	a201      	add	r2, pc, #4	; (adr r2, 800ae30 <USBD_GetDescriptor+0xb4>)
 800ae2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2e:	bf00      	nop
 800ae30:	0800ae49 	.word	0x0800ae49
 800ae34:	0800ae7d 	.word	0x0800ae7d
 800ae38:	0800aeb1 	.word	0x0800aeb1
 800ae3c:	0800aee5 	.word	0x0800aee5
 800ae40:	0800af19 	.word	0x0800af19
 800ae44:	0800af4d 	.word	0x0800af4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00b      	beq.n	800ae6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	7c12      	ldrb	r2, [r2, #16]
 800ae60:	f107 0108 	add.w	r1, r7, #8
 800ae64:	4610      	mov	r0, r2
 800ae66:	4798      	blx	r3
 800ae68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae6a:	e091      	b.n	800af90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae6c:	6839      	ldr	r1, [r7, #0]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fa97 	bl	800b3a2 <USBD_CtlError>
            err++;
 800ae74:	7afb      	ldrb	r3, [r7, #11]
 800ae76:	3301      	adds	r3, #1
 800ae78:	72fb      	strb	r3, [r7, #11]
          break;
 800ae7a:	e089      	b.n	800af90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d00b      	beq.n	800aea0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	7c12      	ldrb	r2, [r2, #16]
 800ae94:	f107 0108 	add.w	r1, r7, #8
 800ae98:	4610      	mov	r0, r2
 800ae9a:	4798      	blx	r3
 800ae9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae9e:	e077      	b.n	800af90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aea0:	6839      	ldr	r1, [r7, #0]
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 fa7d 	bl	800b3a2 <USBD_CtlError>
            err++;
 800aea8:	7afb      	ldrb	r3, [r7, #11]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	72fb      	strb	r3, [r7, #11]
          break;
 800aeae:	e06f      	b.n	800af90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00b      	beq.n	800aed4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	7c12      	ldrb	r2, [r2, #16]
 800aec8:	f107 0108 	add.w	r1, r7, #8
 800aecc:	4610      	mov	r0, r2
 800aece:	4798      	blx	r3
 800aed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aed2:	e05d      	b.n	800af90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fa63 	bl	800b3a2 <USBD_CtlError>
            err++;
 800aedc:	7afb      	ldrb	r3, [r7, #11]
 800aede:	3301      	adds	r3, #1
 800aee0:	72fb      	strb	r3, [r7, #11]
          break;
 800aee2:	e055      	b.n	800af90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00b      	beq.n	800af08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	7c12      	ldrb	r2, [r2, #16]
 800aefc:	f107 0108 	add.w	r1, r7, #8
 800af00:	4610      	mov	r0, r2
 800af02:	4798      	blx	r3
 800af04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af06:	e043      	b.n	800af90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fa49 	bl	800b3a2 <USBD_CtlError>
            err++;
 800af10:	7afb      	ldrb	r3, [r7, #11]
 800af12:	3301      	adds	r3, #1
 800af14:	72fb      	strb	r3, [r7, #11]
          break;
 800af16:	e03b      	b.n	800af90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af1e:	695b      	ldr	r3, [r3, #20]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00b      	beq.n	800af3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af2a:	695b      	ldr	r3, [r3, #20]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	7c12      	ldrb	r2, [r2, #16]
 800af30:	f107 0108 	add.w	r1, r7, #8
 800af34:	4610      	mov	r0, r2
 800af36:	4798      	blx	r3
 800af38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af3a:	e029      	b.n	800af90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af3c:	6839      	ldr	r1, [r7, #0]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 fa2f 	bl	800b3a2 <USBD_CtlError>
            err++;
 800af44:	7afb      	ldrb	r3, [r7, #11]
 800af46:	3301      	adds	r3, #1
 800af48:	72fb      	strb	r3, [r7, #11]
          break;
 800af4a:	e021      	b.n	800af90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af52:	699b      	ldr	r3, [r3, #24]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00b      	beq.n	800af70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af5e:	699b      	ldr	r3, [r3, #24]
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	7c12      	ldrb	r2, [r2, #16]
 800af64:	f107 0108 	add.w	r1, r7, #8
 800af68:	4610      	mov	r0, r2
 800af6a:	4798      	blx	r3
 800af6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af6e:	e00f      	b.n	800af90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af70:	6839      	ldr	r1, [r7, #0]
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fa15 	bl	800b3a2 <USBD_CtlError>
            err++;
 800af78:	7afb      	ldrb	r3, [r7, #11]
 800af7a:	3301      	adds	r3, #1
 800af7c:	72fb      	strb	r3, [r7, #11]
          break;
 800af7e:	e007      	b.n	800af90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fa0d 	bl	800b3a2 <USBD_CtlError>
          err++;
 800af88:	7afb      	ldrb	r3, [r7, #11]
 800af8a:	3301      	adds	r3, #1
 800af8c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800af8e:	e038      	b.n	800b002 <USBD_GetDescriptor+0x286>
 800af90:	e037      	b.n	800b002 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	7c1b      	ldrb	r3, [r3, #16]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d109      	bne.n	800afae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afa2:	f107 0208 	add.w	r2, r7, #8
 800afa6:	4610      	mov	r0, r2
 800afa8:	4798      	blx	r3
 800afaa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afac:	e029      	b.n	800b002 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800afae:	6839      	ldr	r1, [r7, #0]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 f9f6 	bl	800b3a2 <USBD_CtlError>
        err++;
 800afb6:	7afb      	ldrb	r3, [r7, #11]
 800afb8:	3301      	adds	r3, #1
 800afba:	72fb      	strb	r3, [r7, #11]
      break;
 800afbc:	e021      	b.n	800b002 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	7c1b      	ldrb	r3, [r3, #16]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d10d      	bne.n	800afe2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afce:	f107 0208 	add.w	r2, r7, #8
 800afd2:	4610      	mov	r0, r2
 800afd4:	4798      	blx	r3
 800afd6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	3301      	adds	r3, #1
 800afdc:	2207      	movs	r2, #7
 800afde:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afe0:	e00f      	b.n	800b002 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800afe2:	6839      	ldr	r1, [r7, #0]
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f9dc 	bl	800b3a2 <USBD_CtlError>
        err++;
 800afea:	7afb      	ldrb	r3, [r7, #11]
 800afec:	3301      	adds	r3, #1
 800afee:	72fb      	strb	r3, [r7, #11]
      break;
 800aff0:	e007      	b.n	800b002 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800aff2:	6839      	ldr	r1, [r7, #0]
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 f9d4 	bl	800b3a2 <USBD_CtlError>
      err++;
 800affa:	7afb      	ldrb	r3, [r7, #11]
 800affc:	3301      	adds	r3, #1
 800affe:	72fb      	strb	r3, [r7, #11]
      break;
 800b000:	bf00      	nop
  }

  if (err != 0U)
 800b002:	7afb      	ldrb	r3, [r7, #11]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d11c      	bne.n	800b042 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b008:	893b      	ldrh	r3, [r7, #8]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d011      	beq.n	800b032 <USBD_GetDescriptor+0x2b6>
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	88db      	ldrh	r3, [r3, #6]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00d      	beq.n	800b032 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	88da      	ldrh	r2, [r3, #6]
 800b01a:	893b      	ldrh	r3, [r7, #8]
 800b01c:	4293      	cmp	r3, r2
 800b01e:	bf28      	it	cs
 800b020:	4613      	movcs	r3, r2
 800b022:	b29b      	uxth	r3, r3
 800b024:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b026:	893b      	ldrh	r3, [r7, #8]
 800b028:	461a      	mov	r2, r3
 800b02a:	68f9      	ldr	r1, [r7, #12]
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fa22 	bl	800b476 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	88db      	ldrh	r3, [r3, #6]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d104      	bne.n	800b044 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 fa79 	bl	800b532 <USBD_CtlSendStatus>
 800b040:	e000      	b.n	800b044 <USBD_GetDescriptor+0x2c8>
    return;
 800b042:	bf00      	nop
    }
  }
}
 800b044:	3710      	adds	r7, #16
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop

0800b04c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	889b      	ldrh	r3, [r3, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d130      	bne.n	800b0c0 <USBD_SetAddress+0x74>
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	88db      	ldrh	r3, [r3, #6]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d12c      	bne.n	800b0c0 <USBD_SetAddress+0x74>
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	885b      	ldrh	r3, [r3, #2]
 800b06a:	2b7f      	cmp	r3, #127	; 0x7f
 800b06c:	d828      	bhi.n	800b0c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	885b      	ldrh	r3, [r3, #2]
 800b072:	b2db      	uxtb	r3, r3
 800b074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b078:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b080:	2b03      	cmp	r3, #3
 800b082:	d104      	bne.n	800b08e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 f98b 	bl	800b3a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b08c:	e01d      	b.n	800b0ca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	7bfa      	ldrb	r2, [r7, #15]
 800b092:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b096:	7bfb      	ldrb	r3, [r7, #15]
 800b098:	4619      	mov	r1, r3
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f004 f8ac 	bl	800f1f8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 fa46 	bl	800b532 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b0a6:	7bfb      	ldrb	r3, [r7, #15]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d004      	beq.n	800b0b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2202      	movs	r2, #2
 800b0b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0b4:	e009      	b.n	800b0ca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0be:	e004      	b.n	800b0ca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b0c0:	6839      	ldr	r1, [r7, #0]
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 f96d 	bl	800b3a2 <USBD_CtlError>
  }
}
 800b0c8:	bf00      	nop
 800b0ca:	bf00      	nop
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
	...

0800b0d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	885b      	ldrh	r3, [r3, #2]
 800b0e2:	b2da      	uxtb	r2, r3
 800b0e4:	4b41      	ldr	r3, [pc, #260]	; (800b1ec <USBD_SetConfig+0x118>)
 800b0e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b0e8:	4b40      	ldr	r3, [pc, #256]	; (800b1ec <USBD_SetConfig+0x118>)
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d904      	bls.n	800b0fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b0f0:	6839      	ldr	r1, [r7, #0]
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f955 	bl	800b3a2 <USBD_CtlError>
 800b0f8:	e075      	b.n	800b1e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b100:	2b02      	cmp	r3, #2
 800b102:	d002      	beq.n	800b10a <USBD_SetConfig+0x36>
 800b104:	2b03      	cmp	r3, #3
 800b106:	d023      	beq.n	800b150 <USBD_SetConfig+0x7c>
 800b108:	e062      	b.n	800b1d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b10a:	4b38      	ldr	r3, [pc, #224]	; (800b1ec <USBD_SetConfig+0x118>)
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d01a      	beq.n	800b148 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b112:	4b36      	ldr	r3, [pc, #216]	; (800b1ec <USBD_SetConfig+0x118>)
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	461a      	mov	r2, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2203      	movs	r2, #3
 800b120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b124:	4b31      	ldr	r3, [pc, #196]	; (800b1ec <USBD_SetConfig+0x118>)
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	4619      	mov	r1, r3
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f7ff f9e7 	bl	800a4fe <USBD_SetClassConfig>
 800b130:	4603      	mov	r3, r0
 800b132:	2b02      	cmp	r3, #2
 800b134:	d104      	bne.n	800b140 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 f932 	bl	800b3a2 <USBD_CtlError>
            return;
 800b13e:	e052      	b.n	800b1e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 f9f6 	bl	800b532 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b146:	e04e      	b.n	800b1e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 f9f2 	bl	800b532 <USBD_CtlSendStatus>
        break;
 800b14e:	e04a      	b.n	800b1e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b150:	4b26      	ldr	r3, [pc, #152]	; (800b1ec <USBD_SetConfig+0x118>)
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d112      	bne.n	800b17e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2202      	movs	r2, #2
 800b15c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b160:	4b22      	ldr	r3, [pc, #136]	; (800b1ec <USBD_SetConfig+0x118>)
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	461a      	mov	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b16a:	4b20      	ldr	r3, [pc, #128]	; (800b1ec <USBD_SetConfig+0x118>)
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f7ff f9e3 	bl	800a53c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 f9db 	bl	800b532 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b17c:	e033      	b.n	800b1e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b17e:	4b1b      	ldr	r3, [pc, #108]	; (800b1ec <USBD_SetConfig+0x118>)
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	461a      	mov	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d01d      	beq.n	800b1c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	b2db      	uxtb	r3, r3
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7ff f9d1 	bl	800a53c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b19a:	4b14      	ldr	r3, [pc, #80]	; (800b1ec <USBD_SetConfig+0x118>)
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	461a      	mov	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b1a4:	4b11      	ldr	r3, [pc, #68]	; (800b1ec <USBD_SetConfig+0x118>)
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f7ff f9a7 	bl	800a4fe <USBD_SetClassConfig>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b02      	cmp	r3, #2
 800b1b4:	d104      	bne.n	800b1c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b1b6:	6839      	ldr	r1, [r7, #0]
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 f8f2 	bl	800b3a2 <USBD_CtlError>
            return;
 800b1be:	e012      	b.n	800b1e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 f9b6 	bl	800b532 <USBD_CtlSendStatus>
        break;
 800b1c6:	e00e      	b.n	800b1e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f9b2 	bl	800b532 <USBD_CtlSendStatus>
        break;
 800b1ce:	e00a      	b.n	800b1e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b1d0:	6839      	ldr	r1, [r7, #0]
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 f8e5 	bl	800b3a2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b1d8:	4b04      	ldr	r3, [pc, #16]	; (800b1ec <USBD_SetConfig+0x118>)
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	4619      	mov	r1, r3
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f7ff f9ac 	bl	800a53c <USBD_ClrClassConfig>
        break;
 800b1e4:	bf00      	nop
    }
  }
}
 800b1e6:	3708      	adds	r7, #8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	200001b3 	.word	0x200001b3

0800b1f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	88db      	ldrh	r3, [r3, #6]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d004      	beq.n	800b20c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b202:	6839      	ldr	r1, [r7, #0]
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 f8cc 	bl	800b3a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b20a:	e022      	b.n	800b252 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b212:	2b02      	cmp	r3, #2
 800b214:	dc02      	bgt.n	800b21c <USBD_GetConfig+0x2c>
 800b216:	2b00      	cmp	r3, #0
 800b218:	dc03      	bgt.n	800b222 <USBD_GetConfig+0x32>
 800b21a:	e015      	b.n	800b248 <USBD_GetConfig+0x58>
 800b21c:	2b03      	cmp	r3, #3
 800b21e:	d00b      	beq.n	800b238 <USBD_GetConfig+0x48>
 800b220:	e012      	b.n	800b248 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	3308      	adds	r3, #8
 800b22c:	2201      	movs	r2, #1
 800b22e:	4619      	mov	r1, r3
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 f920 	bl	800b476 <USBD_CtlSendData>
        break;
 800b236:	e00c      	b.n	800b252 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	3304      	adds	r3, #4
 800b23c:	2201      	movs	r2, #1
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 f918 	bl	800b476 <USBD_CtlSendData>
        break;
 800b246:	e004      	b.n	800b252 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b248:	6839      	ldr	r1, [r7, #0]
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f8a9 	bl	800b3a2 <USBD_CtlError>
        break;
 800b250:	bf00      	nop
}
 800b252:	bf00      	nop
 800b254:	3708      	adds	r7, #8
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b082      	sub	sp, #8
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
 800b262:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b26a:	3b01      	subs	r3, #1
 800b26c:	2b02      	cmp	r3, #2
 800b26e:	d81e      	bhi.n	800b2ae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	88db      	ldrh	r3, [r3, #6]
 800b274:	2b02      	cmp	r3, #2
 800b276:	d004      	beq.n	800b282 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b278:	6839      	ldr	r1, [r7, #0]
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 f891 	bl	800b3a2 <USBD_CtlError>
        break;
 800b280:	e01a      	b.n	800b2b8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2201      	movs	r2, #1
 800b286:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d005      	beq.n	800b29e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	f043 0202 	orr.w	r2, r3, #2
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	330c      	adds	r3, #12
 800b2a2:	2202      	movs	r2, #2
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f8e5 	bl	800b476 <USBD_CtlSendData>
      break;
 800b2ac:	e004      	b.n	800b2b8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 f876 	bl	800b3a2 <USBD_CtlError>
      break;
 800b2b6:	bf00      	nop
  }
}
 800b2b8:	bf00      	nop
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	885b      	ldrh	r3, [r3, #2]
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d106      	bne.n	800b2e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f929 	bl	800b532 <USBD_CtlSendStatus>
  }
}
 800b2e0:	bf00      	nop
 800b2e2:	3708      	adds	r7, #8
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d80b      	bhi.n	800b316 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	885b      	ldrh	r3, [r3, #2]
 800b302:	2b01      	cmp	r3, #1
 800b304:	d10c      	bne.n	800b320 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f90f 	bl	800b532 <USBD_CtlSendStatus>
      }
      break;
 800b314:	e004      	b.n	800b320 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b316:	6839      	ldr	r1, [r7, #0]
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f842 	bl	800b3a2 <USBD_CtlError>
      break;
 800b31e:	e000      	b.n	800b322 <USBD_ClrFeature+0x3a>
      break;
 800b320:	bf00      	nop
  }
}
 800b322:	bf00      	nop
 800b324:	3708      	adds	r7, #8
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b32a:	b480      	push	{r7}
 800b32c:	b083      	sub	sp, #12
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
 800b332:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	781a      	ldrb	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	785a      	ldrb	r2, [r3, #1]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	3302      	adds	r3, #2
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	3303      	adds	r3, #3
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	b29b      	uxth	r3, r3
 800b354:	021b      	lsls	r3, r3, #8
 800b356:	b29b      	uxth	r3, r3
 800b358:	4413      	add	r3, r2
 800b35a:	b29a      	uxth	r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	3304      	adds	r3, #4
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	b29a      	uxth	r2, r3
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	3305      	adds	r3, #5
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	b29b      	uxth	r3, r3
 800b370:	021b      	lsls	r3, r3, #8
 800b372:	b29b      	uxth	r3, r3
 800b374:	4413      	add	r3, r2
 800b376:	b29a      	uxth	r2, r3
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	3306      	adds	r3, #6
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	b29a      	uxth	r2, r3
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	3307      	adds	r3, #7
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	021b      	lsls	r3, r3, #8
 800b38e:	b29b      	uxth	r3, r3
 800b390:	4413      	add	r3, r2
 800b392:	b29a      	uxth	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	80da      	strh	r2, [r3, #6]

}
 800b398:	bf00      	nop
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bc80      	pop	{r7}
 800b3a0:	4770      	bx	lr

0800b3a2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b082      	sub	sp, #8
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b3ac:	2180      	movs	r1, #128	; 0x80
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f003 feb8 	bl	800f124 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f003 feb4 	bl	800f124 <USBD_LL_StallEP>
}
 800b3bc:	bf00      	nop
 800b3be:	3708      	adds	r7, #8
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b086      	sub	sp, #24
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d032      	beq.n	800b440 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f000 f834 	bl	800b448 <USBD_GetLen>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	005b      	lsls	r3, r3, #1
 800b3e8:	b29a      	uxth	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b3ee:	7dfb      	ldrb	r3, [r7, #23]
 800b3f0:	1c5a      	adds	r2, r3, #1
 800b3f2:	75fa      	strb	r2, [r7, #23]
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	7812      	ldrb	r2, [r2, #0]
 800b3fe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b400:	7dfb      	ldrb	r3, [r7, #23]
 800b402:	1c5a      	adds	r2, r3, #1
 800b404:	75fa      	strb	r2, [r7, #23]
 800b406:	461a      	mov	r2, r3
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	4413      	add	r3, r2
 800b40c:	2203      	movs	r2, #3
 800b40e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b410:	e012      	b.n	800b438 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	1c5a      	adds	r2, r3, #1
 800b416:	60fa      	str	r2, [r7, #12]
 800b418:	7dfa      	ldrb	r2, [r7, #23]
 800b41a:	1c51      	adds	r1, r2, #1
 800b41c:	75f9      	strb	r1, [r7, #23]
 800b41e:	4611      	mov	r1, r2
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	440a      	add	r2, r1
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b428:	7dfb      	ldrb	r3, [r7, #23]
 800b42a:	1c5a      	adds	r2, r3, #1
 800b42c:	75fa      	strb	r2, [r7, #23]
 800b42e:	461a      	mov	r2, r3
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	4413      	add	r3, r2
 800b434:	2200      	movs	r2, #0
 800b436:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1e8      	bne.n	800b412 <USBD_GetString+0x4e>
    }
  }
}
 800b440:	bf00      	nop
 800b442:	3718      	adds	r7, #24
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b450:	2300      	movs	r3, #0
 800b452:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b454:	e005      	b.n	800b462 <USBD_GetLen+0x1a>
  {
    len++;
 800b456:	7bfb      	ldrb	r3, [r7, #15]
 800b458:	3301      	adds	r3, #1
 800b45a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	3301      	adds	r3, #1
 800b460:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1f5      	bne.n	800b456 <USBD_GetLen+0xe>
  }

  return len;
 800b46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3714      	adds	r7, #20
 800b470:	46bd      	mov	sp, r7
 800b472:	bc80      	pop	{r7}
 800b474:	4770      	bx	lr

0800b476 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b084      	sub	sp, #16
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	60f8      	str	r0, [r7, #12]
 800b47e:	60b9      	str	r1, [r7, #8]
 800b480:	4613      	mov	r3, r2
 800b482:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2202      	movs	r2, #2
 800b488:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b48c:	88fa      	ldrh	r2, [r7, #6]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b492:	88fa      	ldrh	r2, [r7, #6]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b498:	88fb      	ldrh	r3, [r7, #6]
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	2100      	movs	r1, #0
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f003 fec9 	bl	800f236 <USBD_LL_Transmit>

  return USBD_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b084      	sub	sp, #16
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	60f8      	str	r0, [r7, #12]
 800b4b6:	60b9      	str	r1, [r7, #8]
 800b4b8:	4613      	mov	r3, r2
 800b4ba:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4bc:	88fb      	ldrh	r3, [r7, #6]
 800b4be:	68ba      	ldr	r2, [r7, #8]
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f003 feb7 	bl	800f236 <USBD_LL_Transmit>

  return USBD_OK;
 800b4c8:	2300      	movs	r3, #0
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b084      	sub	sp, #16
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	60f8      	str	r0, [r7, #12]
 800b4da:	60b9      	str	r1, [r7, #8]
 800b4dc:	4613      	mov	r3, r2
 800b4de:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2203      	movs	r2, #3
 800b4e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b4e8:	88fa      	ldrh	r2, [r7, #6]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b4f0:	88fa      	ldrh	r2, [r7, #6]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4f8:	88fb      	ldrh	r3, [r7, #6]
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f003 febc 	bl	800f27c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b084      	sub	sp, #16
 800b512:	af00      	add	r7, sp, #0
 800b514:	60f8      	str	r0, [r7, #12]
 800b516:	60b9      	str	r1, [r7, #8]
 800b518:	4613      	mov	r3, r2
 800b51a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b51c:	88fb      	ldrh	r3, [r7, #6]
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	2100      	movs	r1, #0
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	f003 feaa 	bl	800f27c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b082      	sub	sp, #8
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2204      	movs	r2, #4
 800b53e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b542:	2300      	movs	r3, #0
 800b544:	2200      	movs	r2, #0
 800b546:	2100      	movs	r1, #0
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f003 fe74 	bl	800f236 <USBD_LL_Transmit>

  return USBD_OK;
 800b54e:	2300      	movs	r3, #0
}
 800b550:	4618      	mov	r0, r3
 800b552:	3708      	adds	r7, #8
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2205      	movs	r2, #5
 800b564:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b568:	2300      	movs	r3, #0
 800b56a:	2200      	movs	r2, #0
 800b56c:	2100      	movs	r1, #0
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f003 fe84 	bl	800f27c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
	...

0800b580 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b586:	f3ef 8305 	mrs	r3, IPSR
 800b58a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b58c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10f      	bne.n	800b5b2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b592:	f3ef 8310 	mrs	r3, PRIMASK
 800b596:	607b      	str	r3, [r7, #4]
  return(result);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d109      	bne.n	800b5b2 <osKernelInitialize+0x32>
 800b59e:	4b10      	ldr	r3, [pc, #64]	; (800b5e0 <osKernelInitialize+0x60>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	d109      	bne.n	800b5ba <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b5a6:	f3ef 8311 	mrs	r3, BASEPRI
 800b5aa:	603b      	str	r3, [r7, #0]
  return(result);
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d003      	beq.n	800b5ba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b5b2:	f06f 0305 	mvn.w	r3, #5
 800b5b6:	60fb      	str	r3, [r7, #12]
 800b5b8:	e00c      	b.n	800b5d4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b5ba:	4b09      	ldr	r3, [pc, #36]	; (800b5e0 <osKernelInitialize+0x60>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d105      	bne.n	800b5ce <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800b5c2:	4b07      	ldr	r3, [pc, #28]	; (800b5e0 <osKernelInitialize+0x60>)
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	60fb      	str	r3, [r7, #12]
 800b5cc:	e002      	b.n	800b5d4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b5ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b5d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3714      	adds	r7, #20
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bc80      	pop	{r7}
 800b5de:	4770      	bx	lr
 800b5e0:	200001b4 	.word	0x200001b4

0800b5e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5ea:	f3ef 8305 	mrs	r3, IPSR
 800b5ee:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d10f      	bne.n	800b616 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5f6:	f3ef 8310 	mrs	r3, PRIMASK
 800b5fa:	607b      	str	r3, [r7, #4]
  return(result);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d109      	bne.n	800b616 <osKernelStart+0x32>
 800b602:	4b11      	ldr	r3, [pc, #68]	; (800b648 <osKernelStart+0x64>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2b02      	cmp	r3, #2
 800b608:	d109      	bne.n	800b61e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b60a:	f3ef 8311 	mrs	r3, BASEPRI
 800b60e:	603b      	str	r3, [r7, #0]
  return(result);
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d003      	beq.n	800b61e <osKernelStart+0x3a>
    stat = osErrorISR;
 800b616:	f06f 0305 	mvn.w	r3, #5
 800b61a:	60fb      	str	r3, [r7, #12]
 800b61c:	e00e      	b.n	800b63c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800b61e:	4b0a      	ldr	r3, [pc, #40]	; (800b648 <osKernelStart+0x64>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b01      	cmp	r3, #1
 800b624:	d107      	bne.n	800b636 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800b626:	4b08      	ldr	r3, [pc, #32]	; (800b648 <osKernelStart+0x64>)
 800b628:	2202      	movs	r2, #2
 800b62a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800b62c:	f001 fbc6 	bl	800cdbc <vTaskStartScheduler>
      stat = osOK;
 800b630:	2300      	movs	r3, #0
 800b632:	60fb      	str	r3, [r7, #12]
 800b634:	e002      	b.n	800b63c <osKernelStart+0x58>
    } else {
      stat = osError;
 800b636:	f04f 33ff 	mov.w	r3, #4294967295
 800b63a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b63c:	68fb      	ldr	r3, [r7, #12]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	200001b4 	.word	0x200001b4

0800b64c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b092      	sub	sp, #72	; 0x48
 800b650:	af04      	add	r7, sp, #16
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b658:	2300      	movs	r3, #0
 800b65a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b65c:	f3ef 8305 	mrs	r3, IPSR
 800b660:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b662:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800b664:	2b00      	cmp	r3, #0
 800b666:	f040 8094 	bne.w	800b792 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b66a:	f3ef 8310 	mrs	r3, PRIMASK
 800b66e:	623b      	str	r3, [r7, #32]
  return(result);
 800b670:	6a3b      	ldr	r3, [r7, #32]
 800b672:	2b00      	cmp	r3, #0
 800b674:	f040 808d 	bne.w	800b792 <osThreadNew+0x146>
 800b678:	4b48      	ldr	r3, [pc, #288]	; (800b79c <osThreadNew+0x150>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	d106      	bne.n	800b68e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b680:	f3ef 8311 	mrs	r3, BASEPRI
 800b684:	61fb      	str	r3, [r7, #28]
  return(result);
 800b686:	69fb      	ldr	r3, [r7, #28]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f040 8082 	bne.w	800b792 <osThreadNew+0x146>
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d07e      	beq.n	800b792 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800b694:	2380      	movs	r3, #128	; 0x80
 800b696:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800b698:	2318      	movs	r3, #24
 800b69a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800b69c:	2300      	movs	r3, #0
 800b69e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800b6a0:	f107 031b 	add.w	r3, r7, #27
 800b6a4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800b6a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6aa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d045      	beq.n	800b73e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d002      	beq.n	800b6c0 <osThreadNew+0x74>
        name = attr->name;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	699b      	ldr	r3, [r3, #24]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d002      	beq.n	800b6ce <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	699b      	ldr	r3, [r3, #24]
 800b6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d008      	beq.n	800b6e6 <osThreadNew+0x9a>
 800b6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d6:	2b38      	cmp	r3, #56	; 0x38
 800b6d8:	d805      	bhi.n	800b6e6 <osThreadNew+0x9a>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	f003 0301 	and.w	r3, r3, #1
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d001      	beq.n	800b6ea <osThreadNew+0x9e>
        return (NULL);
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	e054      	b.n	800b794 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	695b      	ldr	r3, [r3, #20]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d003      	beq.n	800b6fa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	695b      	ldr	r3, [r3, #20]
 800b6f6:	089b      	lsrs	r3, r3, #2
 800b6f8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d00e      	beq.n	800b720 <osThreadNew+0xd4>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	2b5b      	cmp	r3, #91	; 0x5b
 800b708:	d90a      	bls.n	800b720 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d006      	beq.n	800b720 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	695b      	ldr	r3, [r3, #20]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d002      	beq.n	800b720 <osThreadNew+0xd4>
        mem = 1;
 800b71a:	2301      	movs	r3, #1
 800b71c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b71e:	e010      	b.n	800b742 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d10c      	bne.n	800b742 <osThreadNew+0xf6>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d108      	bne.n	800b742 <osThreadNew+0xf6>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	691b      	ldr	r3, [r3, #16]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d104      	bne.n	800b742 <osThreadNew+0xf6>
          mem = 0;
 800b738:	2300      	movs	r3, #0
 800b73a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b73c:	e001      	b.n	800b742 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800b73e:	2300      	movs	r3, #0
 800b740:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800b742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b744:	2b01      	cmp	r3, #1
 800b746:	d110      	bne.n	800b76a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b750:	9202      	str	r2, [sp, #8]
 800b752:	9301      	str	r3, [sp, #4]
 800b754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b75c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f001 f8e2 	bl	800c928 <xTaskCreateStatic>
 800b764:	4603      	mov	r3, r0
 800b766:	617b      	str	r3, [r7, #20]
 800b768:	e013      	b.n	800b792 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800b76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d110      	bne.n	800b792 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b772:	b29a      	uxth	r2, r3
 800b774:	f107 0314 	add.w	r3, r7, #20
 800b778:	9301      	str	r3, [sp, #4]
 800b77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77c:	9300      	str	r3, [sp, #0]
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b782:	68f8      	ldr	r0, [r7, #12]
 800b784:	f001 f92c 	bl	800c9e0 <xTaskCreate>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d001      	beq.n	800b792 <osThreadNew+0x146>
          hTask = NULL;
 800b78e:	2300      	movs	r3, #0
 800b790:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b792:	697b      	ldr	r3, [r7, #20]
}
 800b794:	4618      	mov	r0, r3
 800b796:	3738      	adds	r7, #56	; 0x38
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	200001b4 	.word	0x200001b4

0800b7a0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7a8:	f3ef 8305 	mrs	r3, IPSR
 800b7ac:	613b      	str	r3, [r7, #16]
  return(result);
 800b7ae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10f      	bne.n	800b7d4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7b4:	f3ef 8310 	mrs	r3, PRIMASK
 800b7b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d109      	bne.n	800b7d4 <osDelay+0x34>
 800b7c0:	4b0d      	ldr	r3, [pc, #52]	; (800b7f8 <osDelay+0x58>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2b02      	cmp	r3, #2
 800b7c6:	d109      	bne.n	800b7dc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b7c8:	f3ef 8311 	mrs	r3, BASEPRI
 800b7cc:	60bb      	str	r3, [r7, #8]
  return(result);
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d003      	beq.n	800b7dc <osDelay+0x3c>
    stat = osErrorISR;
 800b7d4:	f06f 0305 	mvn.w	r3, #5
 800b7d8:	617b      	str	r3, [r7, #20]
 800b7da:	e007      	b.n	800b7ec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d002      	beq.n	800b7ec <osDelay+0x4c>
      vTaskDelay(ticks);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f001 fab4 	bl	800cd54 <vTaskDelay>
    }
  }

  return (stat);
 800b7ec:	697b      	ldr	r3, [r7, #20]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3718      	adds	r7, #24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	200001b4 	.word	0x200001b4

0800b7fc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b08a      	sub	sp, #40	; 0x28
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b804:	2300      	movs	r3, #0
 800b806:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b808:	f3ef 8305 	mrs	r3, IPSR
 800b80c:	613b      	str	r3, [r7, #16]
  return(result);
 800b80e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800b810:	2b00      	cmp	r3, #0
 800b812:	f040 8085 	bne.w	800b920 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b816:	f3ef 8310 	mrs	r3, PRIMASK
 800b81a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d17e      	bne.n	800b920 <osMutexNew+0x124>
 800b822:	4b42      	ldr	r3, [pc, #264]	; (800b92c <osMutexNew+0x130>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b02      	cmp	r3, #2
 800b828:	d105      	bne.n	800b836 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b82a:	f3ef 8311 	mrs	r3, BASEPRI
 800b82e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d174      	bne.n	800b920 <osMutexNew+0x124>
    if (attr != NULL) {
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d003      	beq.n	800b844 <osMutexNew+0x48>
      type = attr->attr_bits;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	623b      	str	r3, [r7, #32]
 800b842:	e001      	b.n	800b848 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800b844:	2300      	movs	r3, #0
 800b846:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b848:	6a3b      	ldr	r3, [r7, #32]
 800b84a:	f003 0301 	and.w	r3, r3, #1
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d002      	beq.n	800b858 <osMutexNew+0x5c>
      rmtx = 1U;
 800b852:	2301      	movs	r3, #1
 800b854:	61fb      	str	r3, [r7, #28]
 800b856:	e001      	b.n	800b85c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800b858:	2300      	movs	r3, #0
 800b85a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b85c:	6a3b      	ldr	r3, [r7, #32]
 800b85e:	f003 0308 	and.w	r3, r3, #8
 800b862:	2b00      	cmp	r3, #0
 800b864:	d15c      	bne.n	800b920 <osMutexNew+0x124>
      mem = -1;
 800b866:	f04f 33ff 	mov.w	r3, #4294967295
 800b86a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d015      	beq.n	800b89e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d006      	beq.n	800b888 <osMutexNew+0x8c>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	2b4f      	cmp	r3, #79	; 0x4f
 800b880:	d902      	bls.n	800b888 <osMutexNew+0x8c>
          mem = 1;
 800b882:	2301      	movs	r3, #1
 800b884:	61bb      	str	r3, [r7, #24]
 800b886:	e00c      	b.n	800b8a2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d108      	bne.n	800b8a2 <osMutexNew+0xa6>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d104      	bne.n	800b8a2 <osMutexNew+0xa6>
            mem = 0;
 800b898:	2300      	movs	r3, #0
 800b89a:	61bb      	str	r3, [r7, #24]
 800b89c:	e001      	b.n	800b8a2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d112      	bne.n	800b8ce <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d007      	beq.n	800b8be <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	2004      	movs	r0, #4
 800b8b6:	f000 fb15 	bl	800bee4 <xQueueCreateMutexStatic>
 800b8ba:	6278      	str	r0, [r7, #36]	; 0x24
 800b8bc:	e016      	b.n	800b8ec <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	2001      	movs	r0, #1
 800b8c6:	f000 fb0d 	bl	800bee4 <xQueueCreateMutexStatic>
 800b8ca:	6278      	str	r0, [r7, #36]	; 0x24
 800b8cc:	e00e      	b.n	800b8ec <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10b      	bne.n	800b8ec <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d004      	beq.n	800b8e4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800b8da:	2004      	movs	r0, #4
 800b8dc:	f000 faea 	bl	800beb4 <xQueueCreateMutex>
 800b8e0:	6278      	str	r0, [r7, #36]	; 0x24
 800b8e2:	e003      	b.n	800b8ec <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800b8e4:	2001      	movs	r0, #1
 800b8e6:	f000 fae5 	bl	800beb4 <xQueueCreateMutex>
 800b8ea:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00c      	beq.n	800b90c <osMutexNew+0x110>
        if (attr != NULL) {
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d003      	beq.n	800b900 <osMutexNew+0x104>
          name = attr->name;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	617b      	str	r3, [r7, #20]
 800b8fe:	e001      	b.n	800b904 <osMutexNew+0x108>
        } else {
          name = NULL;
 800b900:	2300      	movs	r3, #0
 800b902:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800b904:	6979      	ldr	r1, [r7, #20]
 800b906:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b908:	f000 ffb2 	bl	800c870 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d006      	beq.n	800b920 <osMutexNew+0x124>
 800b912:	69fb      	ldr	r3, [r7, #28]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d003      	beq.n	800b920 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91a:	f043 0301 	orr.w	r3, r3, #1
 800b91e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b922:	4618      	mov	r0, r3
 800b924:	3728      	adds	r7, #40	; 0x28
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	200001b4 	.word	0x200001b4

0800b930 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b930:	b580      	push	{r7, lr}
 800b932:	b08c      	sub	sp, #48	; 0x30
 800b934:	af02      	add	r7, sp, #8
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	60b9      	str	r1, [r7, #8]
 800b93a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b93c:	2300      	movs	r3, #0
 800b93e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b940:	f3ef 8305 	mrs	r3, IPSR
 800b944:	61bb      	str	r3, [r7, #24]
  return(result);
 800b946:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d16f      	bne.n	800ba2c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b94c:	f3ef 8310 	mrs	r3, PRIMASK
 800b950:	617b      	str	r3, [r7, #20]
  return(result);
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d169      	bne.n	800ba2c <osMessageQueueNew+0xfc>
 800b958:	4b37      	ldr	r3, [pc, #220]	; (800ba38 <osMessageQueueNew+0x108>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d105      	bne.n	800b96c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b960:	f3ef 8311 	mrs	r3, BASEPRI
 800b964:	613b      	str	r3, [r7, #16]
  return(result);
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d15f      	bne.n	800ba2c <osMessageQueueNew+0xfc>
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d05c      	beq.n	800ba2c <osMessageQueueNew+0xfc>
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d059      	beq.n	800ba2c <osMessageQueueNew+0xfc>
    mem = -1;
 800b978:	f04f 33ff 	mov.w	r3, #4294967295
 800b97c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d029      	beq.n	800b9d8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	689b      	ldr	r3, [r3, #8]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d012      	beq.n	800b9b2 <osMessageQueueNew+0x82>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	2b4f      	cmp	r3, #79	; 0x4f
 800b992:	d90e      	bls.n	800b9b2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d00a      	beq.n	800b9b2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	695a      	ldr	r2, [r3, #20]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	68b9      	ldr	r1, [r7, #8]
 800b9a4:	fb01 f303 	mul.w	r3, r1, r3
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d302      	bcc.n	800b9b2 <osMessageQueueNew+0x82>
        mem = 1;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	623b      	str	r3, [r7, #32]
 800b9b0:	e014      	b.n	800b9dc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d110      	bne.n	800b9dc <osMessageQueueNew+0xac>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d10c      	bne.n	800b9dc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d108      	bne.n	800b9dc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	695b      	ldr	r3, [r3, #20]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d104      	bne.n	800b9dc <osMessageQueueNew+0xac>
          mem = 0;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	623b      	str	r3, [r7, #32]
 800b9d6:	e001      	b.n	800b9dc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b9dc:	6a3b      	ldr	r3, [r7, #32]
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	d10b      	bne.n	800b9fa <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	691a      	ldr	r2, [r3, #16]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	689b      	ldr	r3, [r3, #8]
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	9100      	str	r1, [sp, #0]
 800b9ee:	68b9      	ldr	r1, [r7, #8]
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f000 f96d 	bl	800bcd0 <xQueueGenericCreateStatic>
 800b9f6:	6278      	str	r0, [r7, #36]	; 0x24
 800b9f8:	e008      	b.n	800ba0c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800b9fa:	6a3b      	ldr	r3, [r7, #32]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d105      	bne.n	800ba0c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ba00:	2200      	movs	r2, #0
 800ba02:	68b9      	ldr	r1, [r7, #8]
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f000 f9da 	bl	800bdbe <xQueueGenericCreate>
 800ba0a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00c      	beq.n	800ba2c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d003      	beq.n	800ba20 <osMessageQueueNew+0xf0>
        name = attr->name;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	61fb      	str	r3, [r7, #28]
 800ba1e:	e001      	b.n	800ba24 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800ba20:	2300      	movs	r3, #0
 800ba22:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800ba24:	69f9      	ldr	r1, [r7, #28]
 800ba26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba28:	f000 ff22 	bl	800c870 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3728      	adds	r7, #40	; 0x28
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	200001b4 	.word	0x200001b4

0800ba3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ba3c:	b480      	push	{r7}
 800ba3e:	b085      	sub	sp, #20
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	4a06      	ldr	r2, [pc, #24]	; (800ba64 <vApplicationGetIdleTaskMemory+0x28>)
 800ba4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	4a05      	ldr	r2, [pc, #20]	; (800ba68 <vApplicationGetIdleTaskMemory+0x2c>)
 800ba52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2280      	movs	r2, #128	; 0x80
 800ba58:	601a      	str	r2, [r3, #0]
}
 800ba5a:	bf00      	nop
 800ba5c:	3714      	adds	r7, #20
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bc80      	pop	{r7}
 800ba62:	4770      	bx	lr
 800ba64:	200001b8 	.word	0x200001b8
 800ba68:	20000214 	.word	0x20000214

0800ba6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4a07      	ldr	r2, [pc, #28]	; (800ba98 <vApplicationGetTimerTaskMemory+0x2c>)
 800ba7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	4a06      	ldr	r2, [pc, #24]	; (800ba9c <vApplicationGetTimerTaskMemory+0x30>)
 800ba82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba8a:	601a      	str	r2, [r3, #0]
}
 800ba8c:	bf00      	nop
 800ba8e:	3714      	adds	r7, #20
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bc80      	pop	{r7}
 800ba94:	4770      	bx	lr
 800ba96:	bf00      	nop
 800ba98:	20000414 	.word	0x20000414
 800ba9c:	20000470 	.word	0x20000470

0800baa0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f103 0208 	add.w	r2, r3, #8
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f04f 32ff 	mov.w	r2, #4294967295
 800bab8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f103 0208 	add.w	r2, r3, #8
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f103 0208 	add.w	r2, r3, #8
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bad4:	bf00      	nop
 800bad6:	370c      	adds	r7, #12
 800bad8:	46bd      	mov	sp, r7
 800bada:	bc80      	pop	{r7}
 800badc:	4770      	bx	lr

0800bade <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bade:	b480      	push	{r7}
 800bae0:	b083      	sub	sp, #12
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800baec:	bf00      	nop
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bc80      	pop	{r7}
 800baf4:	4770      	bx	lr

0800baf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800baf6:	b480      	push	{r7}
 800baf8:	b085      	sub	sp, #20
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
 800bafe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	68fa      	ldr	r2, [r7, #12]
 800bb0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	689a      	ldr	r2, [r3, #8]
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	683a      	ldr	r2, [r7, #0]
 800bb1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	683a      	ldr	r2, [r7, #0]
 800bb20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	1c5a      	adds	r2, r3, #1
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	601a      	str	r2, [r3, #0]
}
 800bb32:	bf00      	nop
 800bb34:	3714      	adds	r7, #20
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bc80      	pop	{r7}
 800bb3a:	4770      	bx	lr

0800bb3c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b085      	sub	sp, #20
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb52:	d103      	bne.n	800bb5c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	691b      	ldr	r3, [r3, #16]
 800bb58:	60fb      	str	r3, [r7, #12]
 800bb5a:	e00c      	b.n	800bb76 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	3308      	adds	r3, #8
 800bb60:	60fb      	str	r3, [r7, #12]
 800bb62:	e002      	b.n	800bb6a <vListInsert+0x2e>
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	60fb      	str	r3, [r7, #12]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d2f6      	bcs.n	800bb64 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	685a      	ldr	r2, [r3, #4]
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	683a      	ldr	r2, [r7, #0]
 800bb84:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	683a      	ldr	r2, [r7, #0]
 800bb90:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	1c5a      	adds	r2, r3, #1
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	601a      	str	r2, [r3, #0]
}
 800bba2:	bf00      	nop
 800bba4:	3714      	adds	r7, #20
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bc80      	pop	{r7}
 800bbaa:	4770      	bx	lr

0800bbac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	6892      	ldr	r2, [r2, #8]
 800bbc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	6852      	ldr	r2, [r2, #4]
 800bbcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d103      	bne.n	800bbe0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	689a      	ldr	r2, [r3, #8]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	1e5a      	subs	r2, r3, #1
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3714      	adds	r7, #20
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bc80      	pop	{r7}
 800bbfc:	4770      	bx	lr
	...

0800bc00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d10a      	bne.n	800bc2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc18:	f383 8811 	msr	BASEPRI, r3
 800bc1c:	f3bf 8f6f 	isb	sy
 800bc20:	f3bf 8f4f 	dsb	sy
 800bc24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bc26:	bf00      	nop
 800bc28:	e7fe      	b.n	800bc28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bc2a:	f002 fc0f 	bl	800e44c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc36:	68f9      	ldr	r1, [r7, #12]
 800bc38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc3a:	fb01 f303 	mul.w	r3, r1, r3
 800bc3e:	441a      	add	r2, r3
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2200      	movs	r2, #0
 800bc48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	68f9      	ldr	r1, [r7, #12]
 800bc5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc60:	fb01 f303 	mul.w	r3, r1, r3
 800bc64:	441a      	add	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	22ff      	movs	r2, #255	; 0xff
 800bc6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	22ff      	movs	r2, #255	; 0xff
 800bc76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d114      	bne.n	800bcaa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	691b      	ldr	r3, [r3, #16]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d01a      	beq.n	800bcbe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	3310      	adds	r3, #16
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f001 fb1f 	bl	800d2d0 <xTaskRemoveFromEventList>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d012      	beq.n	800bcbe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bc98:	4b0c      	ldr	r3, [pc, #48]	; (800bccc <xQueueGenericReset+0xcc>)
 800bc9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc9e:	601a      	str	r2, [r3, #0]
 800bca0:	f3bf 8f4f 	dsb	sy
 800bca4:	f3bf 8f6f 	isb	sy
 800bca8:	e009      	b.n	800bcbe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	3310      	adds	r3, #16
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7ff fef6 	bl	800baa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	3324      	adds	r3, #36	; 0x24
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7ff fef1 	bl	800baa0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bcbe:	f002 fbf5 	bl	800e4ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bcc2:	2301      	movs	r3, #1
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	e000ed04 	.word	0xe000ed04

0800bcd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b08e      	sub	sp, #56	; 0x38
 800bcd4:	af02      	add	r7, sp, #8
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	607a      	str	r2, [r7, #4]
 800bcdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10a      	bne.n	800bcfa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce8:	f383 8811 	msr	BASEPRI, r3
 800bcec:	f3bf 8f6f 	isb	sy
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bcf6:	bf00      	nop
 800bcf8:	e7fe      	b.n	800bcf8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d10a      	bne.n	800bd16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd12:	bf00      	nop
 800bd14:	e7fe      	b.n	800bd14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d002      	beq.n	800bd22 <xQueueGenericCreateStatic+0x52>
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d001      	beq.n	800bd26 <xQueueGenericCreateStatic+0x56>
 800bd22:	2301      	movs	r3, #1
 800bd24:	e000      	b.n	800bd28 <xQueueGenericCreateStatic+0x58>
 800bd26:	2300      	movs	r3, #0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d10a      	bne.n	800bd42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd30:	f383 8811 	msr	BASEPRI, r3
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	623b      	str	r3, [r7, #32]
}
 800bd3e:	bf00      	nop
 800bd40:	e7fe      	b.n	800bd40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d102      	bne.n	800bd4e <xQueueGenericCreateStatic+0x7e>
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d101      	bne.n	800bd52 <xQueueGenericCreateStatic+0x82>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e000      	b.n	800bd54 <xQueueGenericCreateStatic+0x84>
 800bd52:	2300      	movs	r3, #0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d10a      	bne.n	800bd6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5c:	f383 8811 	msr	BASEPRI, r3
 800bd60:	f3bf 8f6f 	isb	sy
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	61fb      	str	r3, [r7, #28]
}
 800bd6a:	bf00      	nop
 800bd6c:	e7fe      	b.n	800bd6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bd6e:	2350      	movs	r3, #80	; 0x50
 800bd70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	2b50      	cmp	r3, #80	; 0x50
 800bd76:	d00a      	beq.n	800bd8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7c:	f383 8811 	msr	BASEPRI, r3
 800bd80:	f3bf 8f6f 	isb	sy
 800bd84:	f3bf 8f4f 	dsb	sy
 800bd88:	61bb      	str	r3, [r7, #24]
}
 800bd8a:	bf00      	nop
 800bd8c:	e7fe      	b.n	800bd8c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00d      	beq.n	800bdb4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bda0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda6:	9300      	str	r3, [sp, #0]
 800bda8:	4613      	mov	r3, r2
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	68b9      	ldr	r1, [r7, #8]
 800bdae:	68f8      	ldr	r0, [r7, #12]
 800bdb0:	f000 f843 	bl	800be3a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800bdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3730      	adds	r7, #48	; 0x30
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}

0800bdbe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bdbe:	b580      	push	{r7, lr}
 800bdc0:	b08a      	sub	sp, #40	; 0x28
 800bdc2:	af02      	add	r7, sp, #8
 800bdc4:	60f8      	str	r0, [r7, #12]
 800bdc6:	60b9      	str	r1, [r7, #8]
 800bdc8:	4613      	mov	r3, r2
 800bdca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d10a      	bne.n	800bde8 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd6:	f383 8811 	msr	BASEPRI, r3
 800bdda:	f3bf 8f6f 	isb	sy
 800bdde:	f3bf 8f4f 	dsb	sy
 800bde2:	613b      	str	r3, [r7, #16]
}
 800bde4:	bf00      	nop
 800bde6:	e7fe      	b.n	800bde6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d102      	bne.n	800bdf4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	61fb      	str	r3, [r7, #28]
 800bdf2:	e004      	b.n	800bdfe <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	68ba      	ldr	r2, [r7, #8]
 800bdf8:	fb02 f303 	mul.w	r3, r2, r3
 800bdfc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	3350      	adds	r3, #80	; 0x50
 800be02:	4618      	mov	r0, r3
 800be04:	f002 fc22 	bl	800e64c <pvPortMalloc>
 800be08:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00f      	beq.n	800be30 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800be10:	69bb      	ldr	r3, [r7, #24]
 800be12:	3350      	adds	r3, #80	; 0x50
 800be14:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	2200      	movs	r2, #0
 800be1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be1e:	79fa      	ldrb	r2, [r7, #7]
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	9300      	str	r3, [sp, #0]
 800be24:	4613      	mov	r3, r2
 800be26:	697a      	ldr	r2, [r7, #20]
 800be28:	68b9      	ldr	r1, [r7, #8]
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	f000 f805 	bl	800be3a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800be30:	69bb      	ldr	r3, [r7, #24]
	}
 800be32:	4618      	mov	r0, r3
 800be34:	3720      	adds	r7, #32
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b084      	sub	sp, #16
 800be3e:	af00      	add	r7, sp, #0
 800be40:	60f8      	str	r0, [r7, #12]
 800be42:	60b9      	str	r1, [r7, #8]
 800be44:	607a      	str	r2, [r7, #4]
 800be46:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d103      	bne.n	800be56 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	69ba      	ldr	r2, [r7, #24]
 800be52:	601a      	str	r2, [r3, #0]
 800be54:	e002      	b.n	800be5c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	68ba      	ldr	r2, [r7, #8]
 800be66:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800be68:	2101      	movs	r1, #1
 800be6a:	69b8      	ldr	r0, [r7, #24]
 800be6c:	f7ff fec8 	bl	800bc00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	78fa      	ldrb	r2, [r7, #3]
 800be74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be78:	bf00      	nop
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00e      	beq.n	800beac <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2200      	movs	r2, #0
 800be92:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bea0:	2300      	movs	r3, #0
 800bea2:	2200      	movs	r2, #0
 800bea4:	2100      	movs	r1, #0
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 f838 	bl	800bf1c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800beac:	bf00      	nop
 800beae:	3708      	adds	r7, #8
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b086      	sub	sp, #24
 800beb8:	af00      	add	r7, sp, #0
 800beba:	4603      	mov	r3, r0
 800bebc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bebe:	2301      	movs	r3, #1
 800bec0:	617b      	str	r3, [r7, #20]
 800bec2:	2300      	movs	r3, #0
 800bec4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bec6:	79fb      	ldrb	r3, [r7, #7]
 800bec8:	461a      	mov	r2, r3
 800beca:	6939      	ldr	r1, [r7, #16]
 800becc:	6978      	ldr	r0, [r7, #20]
 800bece:	f7ff ff76 	bl	800bdbe <xQueueGenericCreate>
 800bed2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f7ff ffd3 	bl	800be80 <prvInitialiseMutex>

		return pxNewQueue;
 800beda:	68fb      	ldr	r3, [r7, #12]
	}
 800bedc:	4618      	mov	r0, r3
 800bede:	3718      	adds	r7, #24
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b088      	sub	sp, #32
 800bee8:	af02      	add	r7, sp, #8
 800beea:	4603      	mov	r3, r0
 800beec:	6039      	str	r1, [r7, #0]
 800beee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bef0:	2301      	movs	r3, #1
 800bef2:	617b      	str	r3, [r7, #20]
 800bef4:	2300      	movs	r3, #0
 800bef6:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bef8:	79fb      	ldrb	r3, [r7, #7]
 800befa:	9300      	str	r3, [sp, #0]
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	2200      	movs	r2, #0
 800bf00:	6939      	ldr	r1, [r7, #16]
 800bf02:	6978      	ldr	r0, [r7, #20]
 800bf04:	f7ff fee4 	bl	800bcd0 <xQueueGenericCreateStatic>
 800bf08:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800bf0a:	68f8      	ldr	r0, [r7, #12]
 800bf0c:	f7ff ffb8 	bl	800be80 <prvInitialiseMutex>

		return pxNewQueue;
 800bf10:	68fb      	ldr	r3, [r7, #12]
	}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3718      	adds	r7, #24
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
	...

0800bf1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b08e      	sub	sp, #56	; 0x38
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
 800bf28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d10a      	bne.n	800bf4e <xQueueGenericSend+0x32>
	__asm volatile
 800bf38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf3c:	f383 8811 	msr	BASEPRI, r3
 800bf40:	f3bf 8f6f 	isb	sy
 800bf44:	f3bf 8f4f 	dsb	sy
 800bf48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf4a:	bf00      	nop
 800bf4c:	e7fe      	b.n	800bf4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d103      	bne.n	800bf5c <xQueueGenericSend+0x40>
 800bf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d101      	bne.n	800bf60 <xQueueGenericSend+0x44>
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	e000      	b.n	800bf62 <xQueueGenericSend+0x46>
 800bf60:	2300      	movs	r3, #0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d10a      	bne.n	800bf7c <xQueueGenericSend+0x60>
	__asm volatile
 800bf66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6a:	f383 8811 	msr	BASEPRI, r3
 800bf6e:	f3bf 8f6f 	isb	sy
 800bf72:	f3bf 8f4f 	dsb	sy
 800bf76:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf78:	bf00      	nop
 800bf7a:	e7fe      	b.n	800bf7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	2b02      	cmp	r3, #2
 800bf80:	d103      	bne.n	800bf8a <xQueueGenericSend+0x6e>
 800bf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d101      	bne.n	800bf8e <xQueueGenericSend+0x72>
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e000      	b.n	800bf90 <xQueueGenericSend+0x74>
 800bf8e:	2300      	movs	r3, #0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d10a      	bne.n	800bfaa <xQueueGenericSend+0x8e>
	__asm volatile
 800bf94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf98:	f383 8811 	msr	BASEPRI, r3
 800bf9c:	f3bf 8f6f 	isb	sy
 800bfa0:	f3bf 8f4f 	dsb	sy
 800bfa4:	623b      	str	r3, [r7, #32]
}
 800bfa6:	bf00      	nop
 800bfa8:	e7fe      	b.n	800bfa8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bfaa:	f001 fb8b 	bl	800d6c4 <xTaskGetSchedulerState>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d102      	bne.n	800bfba <xQueueGenericSend+0x9e>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d101      	bne.n	800bfbe <xQueueGenericSend+0xa2>
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e000      	b.n	800bfc0 <xQueueGenericSend+0xa4>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d10a      	bne.n	800bfda <xQueueGenericSend+0xbe>
	__asm volatile
 800bfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc8:	f383 8811 	msr	BASEPRI, r3
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	f3bf 8f4f 	dsb	sy
 800bfd4:	61fb      	str	r3, [r7, #28]
}
 800bfd6:	bf00      	nop
 800bfd8:	e7fe      	b.n	800bfd8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bfda:	f002 fa37 	bl	800e44c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d302      	bcc.n	800bff0 <xQueueGenericSend+0xd4>
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b02      	cmp	r3, #2
 800bfee:	d129      	bne.n	800c044 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bff0:	683a      	ldr	r2, [r7, #0]
 800bff2:	68b9      	ldr	r1, [r7, #8]
 800bff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bff6:	f000 fb2a 	bl	800c64e <prvCopyDataToQueue>
 800bffa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c000:	2b00      	cmp	r3, #0
 800c002:	d010      	beq.n	800c026 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c006:	3324      	adds	r3, #36	; 0x24
 800c008:	4618      	mov	r0, r3
 800c00a:	f001 f961 	bl	800d2d0 <xTaskRemoveFromEventList>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d013      	beq.n	800c03c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c014:	4b3f      	ldr	r3, [pc, #252]	; (800c114 <xQueueGenericSend+0x1f8>)
 800c016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c01a:	601a      	str	r2, [r3, #0]
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	f3bf 8f6f 	isb	sy
 800c024:	e00a      	b.n	800c03c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d007      	beq.n	800c03c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c02c:	4b39      	ldr	r3, [pc, #228]	; (800c114 <xQueueGenericSend+0x1f8>)
 800c02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c032:	601a      	str	r2, [r3, #0]
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c03c:	f002 fa36 	bl	800e4ac <vPortExitCritical>
				return pdPASS;
 800c040:	2301      	movs	r3, #1
 800c042:	e063      	b.n	800c10c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d103      	bne.n	800c052 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c04a:	f002 fa2f 	bl	800e4ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c04e:	2300      	movs	r3, #0
 800c050:	e05c      	b.n	800c10c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c054:	2b00      	cmp	r3, #0
 800c056:	d106      	bne.n	800c066 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c058:	f107 0314 	add.w	r3, r7, #20
 800c05c:	4618      	mov	r0, r3
 800c05e:	f001 f99b 	bl	800d398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c062:	2301      	movs	r3, #1
 800c064:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c066:	f002 fa21 	bl	800e4ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c06a:	f000 ff0d 	bl	800ce88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c06e:	f002 f9ed 	bl	800e44c <vPortEnterCritical>
 800c072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c074:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c078:	b25b      	sxtb	r3, r3
 800c07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c07e:	d103      	bne.n	800c088 <xQueueGenericSend+0x16c>
 800c080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c082:	2200      	movs	r2, #0
 800c084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c08e:	b25b      	sxtb	r3, r3
 800c090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c094:	d103      	bne.n	800c09e <xQueueGenericSend+0x182>
 800c096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c098:	2200      	movs	r2, #0
 800c09a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c09e:	f002 fa05 	bl	800e4ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0a2:	1d3a      	adds	r2, r7, #4
 800c0a4:	f107 0314 	add.w	r3, r7, #20
 800c0a8:	4611      	mov	r1, r2
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f001 f98a 	bl	800d3c4 <xTaskCheckForTimeOut>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d124      	bne.n	800c100 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c0b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0b8:	f000 fbc1 	bl	800c83e <prvIsQueueFull>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d018      	beq.n	800c0f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c4:	3310      	adds	r3, #16
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	4611      	mov	r1, r2
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f001 f8b0 	bl	800d230 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c0d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0d2:	f000 fb4c 	bl	800c76e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c0d6:	f000 fee5 	bl	800cea4 <xTaskResumeAll>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	f47f af7c 	bne.w	800bfda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c0e2:	4b0c      	ldr	r3, [pc, #48]	; (800c114 <xQueueGenericSend+0x1f8>)
 800c0e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0e8:	601a      	str	r2, [r3, #0]
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	f3bf 8f6f 	isb	sy
 800c0f2:	e772      	b.n	800bfda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c0f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0f6:	f000 fb3a 	bl	800c76e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0fa:	f000 fed3 	bl	800cea4 <xTaskResumeAll>
 800c0fe:	e76c      	b.n	800bfda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c102:	f000 fb34 	bl	800c76e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c106:	f000 fecd 	bl	800cea4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c10a:	2300      	movs	r3, #0
		}
	}
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3738      	adds	r7, #56	; 0x38
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	e000ed04 	.word	0xe000ed04

0800c118 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b08e      	sub	sp, #56	; 0x38
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
 800c124:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d10a      	bne.n	800c146 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c142:	bf00      	nop
 800c144:	e7fe      	b.n	800c144 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d103      	bne.n	800c154 <xQueueGenericSendFromISR+0x3c>
 800c14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c150:	2b00      	cmp	r3, #0
 800c152:	d101      	bne.n	800c158 <xQueueGenericSendFromISR+0x40>
 800c154:	2301      	movs	r3, #1
 800c156:	e000      	b.n	800c15a <xQueueGenericSendFromISR+0x42>
 800c158:	2300      	movs	r3, #0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d10a      	bne.n	800c174 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c162:	f383 8811 	msr	BASEPRI, r3
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	623b      	str	r3, [r7, #32]
}
 800c170:	bf00      	nop
 800c172:	e7fe      	b.n	800c172 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	2b02      	cmp	r3, #2
 800c178:	d103      	bne.n	800c182 <xQueueGenericSendFromISR+0x6a>
 800c17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d101      	bne.n	800c186 <xQueueGenericSendFromISR+0x6e>
 800c182:	2301      	movs	r3, #1
 800c184:	e000      	b.n	800c188 <xQueueGenericSendFromISR+0x70>
 800c186:	2300      	movs	r3, #0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d10a      	bne.n	800c1a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c190:	f383 8811 	msr	BASEPRI, r3
 800c194:	f3bf 8f6f 	isb	sy
 800c198:	f3bf 8f4f 	dsb	sy
 800c19c:	61fb      	str	r3, [r7, #28]
}
 800c19e:	bf00      	nop
 800c1a0:	e7fe      	b.n	800c1a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c1a2:	f002 fa15 	bl	800e5d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c1a6:	f3ef 8211 	mrs	r2, BASEPRI
 800c1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ae:	f383 8811 	msr	BASEPRI, r3
 800c1b2:	f3bf 8f6f 	isb	sy
 800c1b6:	f3bf 8f4f 	dsb	sy
 800c1ba:	61ba      	str	r2, [r7, #24]
 800c1bc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c1be:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d302      	bcc.n	800c1d4 <xQueueGenericSendFromISR+0xbc>
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	2b02      	cmp	r3, #2
 800c1d2:	d12c      	bne.n	800c22e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c1de:	683a      	ldr	r2, [r7, #0]
 800c1e0:	68b9      	ldr	r1, [r7, #8]
 800c1e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1e4:	f000 fa33 	bl	800c64e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c1e8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f0:	d112      	bne.n	800c218 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d016      	beq.n	800c228 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fc:	3324      	adds	r3, #36	; 0x24
 800c1fe:	4618      	mov	r0, r3
 800c200:	f001 f866 	bl	800d2d0 <xTaskRemoveFromEventList>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00e      	beq.n	800c228 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00b      	beq.n	800c228 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2201      	movs	r2, #1
 800c214:	601a      	str	r2, [r3, #0]
 800c216:	e007      	b.n	800c228 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c218:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c21c:	3301      	adds	r3, #1
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	b25a      	sxtb	r2, r3
 800c222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c228:	2301      	movs	r3, #1
 800c22a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c22c:	e001      	b.n	800c232 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c22e:	2300      	movs	r3, #0
 800c230:	637b      	str	r3, [r7, #52]	; 0x34
 800c232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c234:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c23c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c240:	4618      	mov	r0, r3
 800c242:	3738      	adds	r7, #56	; 0x38
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b08c      	sub	sp, #48	; 0x30
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c254:	2300      	movs	r3, #0
 800c256:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d10a      	bne.n	800c278 <xQueueReceive+0x30>
	__asm volatile
 800c262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c266:	f383 8811 	msr	BASEPRI, r3
 800c26a:	f3bf 8f6f 	isb	sy
 800c26e:	f3bf 8f4f 	dsb	sy
 800c272:	623b      	str	r3, [r7, #32]
}
 800c274:	bf00      	nop
 800c276:	e7fe      	b.n	800c276 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d103      	bne.n	800c286 <xQueueReceive+0x3e>
 800c27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c282:	2b00      	cmp	r3, #0
 800c284:	d101      	bne.n	800c28a <xQueueReceive+0x42>
 800c286:	2301      	movs	r3, #1
 800c288:	e000      	b.n	800c28c <xQueueReceive+0x44>
 800c28a:	2300      	movs	r3, #0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d10a      	bne.n	800c2a6 <xQueueReceive+0x5e>
	__asm volatile
 800c290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c294:	f383 8811 	msr	BASEPRI, r3
 800c298:	f3bf 8f6f 	isb	sy
 800c29c:	f3bf 8f4f 	dsb	sy
 800c2a0:	61fb      	str	r3, [r7, #28]
}
 800c2a2:	bf00      	nop
 800c2a4:	e7fe      	b.n	800c2a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2a6:	f001 fa0d 	bl	800d6c4 <xTaskGetSchedulerState>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d102      	bne.n	800c2b6 <xQueueReceive+0x6e>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d101      	bne.n	800c2ba <xQueueReceive+0x72>
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	e000      	b.n	800c2bc <xQueueReceive+0x74>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d10a      	bne.n	800c2d6 <xQueueReceive+0x8e>
	__asm volatile
 800c2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c4:	f383 8811 	msr	BASEPRI, r3
 800c2c8:	f3bf 8f6f 	isb	sy
 800c2cc:	f3bf 8f4f 	dsb	sy
 800c2d0:	61bb      	str	r3, [r7, #24]
}
 800c2d2:	bf00      	nop
 800c2d4:	e7fe      	b.n	800c2d4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c2d6:	f002 f8b9 	bl	800e44c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d01f      	beq.n	800c326 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c2e6:	68b9      	ldr	r1, [r7, #8]
 800c2e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ea:	f000 fa1a 	bl	800c722 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f0:	1e5a      	subs	r2, r3, #1
 800c2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f8:	691b      	ldr	r3, [r3, #16]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00f      	beq.n	800c31e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c300:	3310      	adds	r3, #16
 800c302:	4618      	mov	r0, r3
 800c304:	f000 ffe4 	bl	800d2d0 <xTaskRemoveFromEventList>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d007      	beq.n	800c31e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c30e:	4b3d      	ldr	r3, [pc, #244]	; (800c404 <xQueueReceive+0x1bc>)
 800c310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c314:	601a      	str	r2, [r3, #0]
 800c316:	f3bf 8f4f 	dsb	sy
 800c31a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c31e:	f002 f8c5 	bl	800e4ac <vPortExitCritical>
				return pdPASS;
 800c322:	2301      	movs	r3, #1
 800c324:	e069      	b.n	800c3fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d103      	bne.n	800c334 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c32c:	f002 f8be 	bl	800e4ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c330:	2300      	movs	r3, #0
 800c332:	e062      	b.n	800c3fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c336:	2b00      	cmp	r3, #0
 800c338:	d106      	bne.n	800c348 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c33a:	f107 0310 	add.w	r3, r7, #16
 800c33e:	4618      	mov	r0, r3
 800c340:	f001 f82a 	bl	800d398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c344:	2301      	movs	r3, #1
 800c346:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c348:	f002 f8b0 	bl	800e4ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c34c:	f000 fd9c 	bl	800ce88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c350:	f002 f87c 	bl	800e44c <vPortEnterCritical>
 800c354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c356:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c35a:	b25b      	sxtb	r3, r3
 800c35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c360:	d103      	bne.n	800c36a <xQueueReceive+0x122>
 800c362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c364:	2200      	movs	r2, #0
 800c366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c370:	b25b      	sxtb	r3, r3
 800c372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c376:	d103      	bne.n	800c380 <xQueueReceive+0x138>
 800c378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c380:	f002 f894 	bl	800e4ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c384:	1d3a      	adds	r2, r7, #4
 800c386:	f107 0310 	add.w	r3, r7, #16
 800c38a:	4611      	mov	r1, r2
 800c38c:	4618      	mov	r0, r3
 800c38e:	f001 f819 	bl	800d3c4 <xTaskCheckForTimeOut>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d123      	bne.n	800c3e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c39a:	f000 fa3a 	bl	800c812 <prvIsQueueEmpty>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d017      	beq.n	800c3d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a6:	3324      	adds	r3, #36	; 0x24
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	4611      	mov	r1, r2
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f000 ff3f 	bl	800d230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c3b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3b4:	f000 f9db 	bl	800c76e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c3b8:	f000 fd74 	bl	800cea4 <xTaskResumeAll>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d189      	bne.n	800c2d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c3c2:	4b10      	ldr	r3, [pc, #64]	; (800c404 <xQueueReceive+0x1bc>)
 800c3c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3c8:	601a      	str	r2, [r3, #0]
 800c3ca:	f3bf 8f4f 	dsb	sy
 800c3ce:	f3bf 8f6f 	isb	sy
 800c3d2:	e780      	b.n	800c2d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c3d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3d6:	f000 f9ca 	bl	800c76e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3da:	f000 fd63 	bl	800cea4 <xTaskResumeAll>
 800c3de:	e77a      	b.n	800c2d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c3e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3e2:	f000 f9c4 	bl	800c76e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c3e6:	f000 fd5d 	bl	800cea4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3ec:	f000 fa11 	bl	800c812 <prvIsQueueEmpty>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	f43f af6f 	beq.w	800c2d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c3f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3730      	adds	r7, #48	; 0x30
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	e000ed04 	.word	0xe000ed04

0800c408 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b08e      	sub	sp, #56	; 0x38
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c412:	2300      	movs	r3, #0
 800c414:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c41a:	2300      	movs	r3, #0
 800c41c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c420:	2b00      	cmp	r3, #0
 800c422:	d10a      	bne.n	800c43a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	623b      	str	r3, [r7, #32]
}
 800c436:	bf00      	nop
 800c438:	e7fe      	b.n	800c438 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d00a      	beq.n	800c458 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	61fb      	str	r3, [r7, #28]
}
 800c454:	bf00      	nop
 800c456:	e7fe      	b.n	800c456 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c458:	f001 f934 	bl	800d6c4 <xTaskGetSchedulerState>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d102      	bne.n	800c468 <xQueueSemaphoreTake+0x60>
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d101      	bne.n	800c46c <xQueueSemaphoreTake+0x64>
 800c468:	2301      	movs	r3, #1
 800c46a:	e000      	b.n	800c46e <xQueueSemaphoreTake+0x66>
 800c46c:	2300      	movs	r3, #0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d10a      	bne.n	800c488 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c476:	f383 8811 	msr	BASEPRI, r3
 800c47a:	f3bf 8f6f 	isb	sy
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	61bb      	str	r3, [r7, #24]
}
 800c484:	bf00      	nop
 800c486:	e7fe      	b.n	800c486 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c488:	f001 ffe0 	bl	800e44c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c490:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c494:	2b00      	cmp	r3, #0
 800c496:	d024      	beq.n	800c4e2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49a:	1e5a      	subs	r2, r3, #1
 800c49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d104      	bne.n	800c4b2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800c4a8:	f001 fa8c 	bl	800d9c4 <pvTaskIncrementMutexHeldCount>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d00f      	beq.n	800c4da <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4bc:	3310      	adds	r3, #16
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f000 ff06 	bl	800d2d0 <xTaskRemoveFromEventList>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d007      	beq.n	800c4da <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c4ca:	4b54      	ldr	r3, [pc, #336]	; (800c61c <xQueueSemaphoreTake+0x214>)
 800c4cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4d0:	601a      	str	r2, [r3, #0]
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c4da:	f001 ffe7 	bl	800e4ac <vPortExitCritical>
				return pdPASS;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e097      	b.n	800c612 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d111      	bne.n	800c50c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00a      	beq.n	800c504 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	617b      	str	r3, [r7, #20]
}
 800c500:	bf00      	nop
 800c502:	e7fe      	b.n	800c502 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c504:	f001 ffd2 	bl	800e4ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c508:	2300      	movs	r3, #0
 800c50a:	e082      	b.n	800c612 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d106      	bne.n	800c520 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c512:	f107 030c 	add.w	r3, r7, #12
 800c516:	4618      	mov	r0, r3
 800c518:	f000 ff3e 	bl	800d398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c51c:	2301      	movs	r3, #1
 800c51e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c520:	f001 ffc4 	bl	800e4ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c524:	f000 fcb0 	bl	800ce88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c528:	f001 ff90 	bl	800e44c <vPortEnterCritical>
 800c52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c52e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c532:	b25b      	sxtb	r3, r3
 800c534:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c538:	d103      	bne.n	800c542 <xQueueSemaphoreTake+0x13a>
 800c53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53c:	2200      	movs	r2, #0
 800c53e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c548:	b25b      	sxtb	r3, r3
 800c54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c54e:	d103      	bne.n	800c558 <xQueueSemaphoreTake+0x150>
 800c550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c552:	2200      	movs	r2, #0
 800c554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c558:	f001 ffa8 	bl	800e4ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c55c:	463a      	mov	r2, r7
 800c55e:	f107 030c 	add.w	r3, r7, #12
 800c562:	4611      	mov	r1, r2
 800c564:	4618      	mov	r0, r3
 800c566:	f000 ff2d 	bl	800d3c4 <xTaskCheckForTimeOut>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d132      	bne.n	800c5d6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c570:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c572:	f000 f94e 	bl	800c812 <prvIsQueueEmpty>
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d026      	beq.n	800c5ca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d109      	bne.n	800c598 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c584:	f001 ff62 	bl	800e44c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800c588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	4618      	mov	r0, r3
 800c58e:	f001 f8b7 	bl	800d700 <xTaskPriorityInherit>
 800c592:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c594:	f001 ff8a 	bl	800e4ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59a:	3324      	adds	r3, #36	; 0x24
 800c59c:	683a      	ldr	r2, [r7, #0]
 800c59e:	4611      	mov	r1, r2
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f000 fe45 	bl	800d230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c5a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5a8:	f000 f8e1 	bl	800c76e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c5ac:	f000 fc7a 	bl	800cea4 <xTaskResumeAll>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f47f af68 	bne.w	800c488 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c5b8:	4b18      	ldr	r3, [pc, #96]	; (800c61c <xQueueSemaphoreTake+0x214>)
 800c5ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5be:	601a      	str	r2, [r3, #0]
 800c5c0:	f3bf 8f4f 	dsb	sy
 800c5c4:	f3bf 8f6f 	isb	sy
 800c5c8:	e75e      	b.n	800c488 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c5ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5cc:	f000 f8cf 	bl	800c76e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c5d0:	f000 fc68 	bl	800cea4 <xTaskResumeAll>
 800c5d4:	e758      	b.n	800c488 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c5d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5d8:	f000 f8c9 	bl	800c76e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5dc:	f000 fc62 	bl	800cea4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5e2:	f000 f916 	bl	800c812 <prvIsQueueEmpty>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	f43f af4d 	beq.w	800c488 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d00d      	beq.n	800c610 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c5f4:	f001 ff2a 	bl	800e44c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c5f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5fa:	f000 f811 	bl	800c620 <prvGetDisinheritPriorityAfterTimeout>
 800c5fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800c600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c606:	4618      	mov	r0, r3
 800c608:	f001 f956 	bl	800d8b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c60c:	f001 ff4e 	bl	800e4ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c610:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c612:	4618      	mov	r0, r3
 800c614:	3738      	adds	r7, #56	; 0x38
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	e000ed04 	.word	0xe000ed04

0800c620 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c620:	b480      	push	{r7}
 800c622:	b085      	sub	sp, #20
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d006      	beq.n	800c63e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c63a:	60fb      	str	r3, [r7, #12]
 800c63c:	e001      	b.n	800c642 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c63e:	2300      	movs	r3, #0
 800c640:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c642:	68fb      	ldr	r3, [r7, #12]
	}
 800c644:	4618      	mov	r0, r3
 800c646:	3714      	adds	r7, #20
 800c648:	46bd      	mov	sp, r7
 800c64a:	bc80      	pop	{r7}
 800c64c:	4770      	bx	lr

0800c64e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b086      	sub	sp, #24
 800c652:	af00      	add	r7, sp, #0
 800c654:	60f8      	str	r0, [r7, #12]
 800c656:	60b9      	str	r1, [r7, #8]
 800c658:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c65a:	2300      	movs	r3, #0
 800c65c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c662:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d10d      	bne.n	800c688 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d14d      	bne.n	800c710 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	4618      	mov	r0, r3
 800c67a:	f001 f8af 	bl	800d7dc <xTaskPriorityDisinherit>
 800c67e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2200      	movs	r2, #0
 800c684:	605a      	str	r2, [r3, #4]
 800c686:	e043      	b.n	800c710 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d119      	bne.n	800c6c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	6898      	ldr	r0, [r3, #8]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c696:	461a      	mov	r2, r3
 800c698:	68b9      	ldr	r1, [r7, #8]
 800c69a:	f002 fe95 	bl	800f3c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	689a      	ldr	r2, [r3, #8]
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a6:	441a      	add	r2, r3
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	689a      	ldr	r2, [r3, #8]
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d32b      	bcc.n	800c710 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	609a      	str	r2, [r3, #8]
 800c6c0:	e026      	b.n	800c710 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	68d8      	ldr	r0, [r3, #12]
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	68b9      	ldr	r1, [r7, #8]
 800c6ce:	f002 fe7b 	bl	800f3c8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	68da      	ldr	r2, [r3, #12]
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6da:	425b      	negs	r3, r3
 800c6dc:	441a      	add	r2, r3
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	68da      	ldr	r2, [r3, #12]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d207      	bcs.n	800c6fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	685a      	ldr	r2, [r3, #4]
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f6:	425b      	negs	r3, r3
 800c6f8:	441a      	add	r2, r3
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2b02      	cmp	r3, #2
 800c702:	d105      	bne.n	800c710 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d002      	beq.n	800c710 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	3b01      	subs	r3, #1
 800c70e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	1c5a      	adds	r2, r3, #1
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c718:	697b      	ldr	r3, [r7, #20]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3718      	adds	r7, #24
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c722:	b580      	push	{r7, lr}
 800c724:	b082      	sub	sp, #8
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
 800c72a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c730:	2b00      	cmp	r3, #0
 800c732:	d018      	beq.n	800c766 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	68da      	ldr	r2, [r3, #12]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c73c:	441a      	add	r2, r3
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	68da      	ldr	r2, [r3, #12]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d303      	bcc.n	800c756 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	68d9      	ldr	r1, [r3, #12]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c75e:	461a      	mov	r2, r3
 800c760:	6838      	ldr	r0, [r7, #0]
 800c762:	f002 fe31 	bl	800f3c8 <memcpy>
	}
}
 800c766:	bf00      	nop
 800c768:	3708      	adds	r7, #8
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}

0800c76e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c76e:	b580      	push	{r7, lr}
 800c770:	b084      	sub	sp, #16
 800c772:	af00      	add	r7, sp, #0
 800c774:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c776:	f001 fe69 	bl	800e44c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c780:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c782:	e011      	b.n	800c7a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d012      	beq.n	800c7b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	3324      	adds	r3, #36	; 0x24
 800c790:	4618      	mov	r0, r3
 800c792:	f000 fd9d 	bl	800d2d0 <xTaskRemoveFromEventList>
 800c796:	4603      	mov	r3, r0
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d001      	beq.n	800c7a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c79c:	f000 fe74 	bl	800d488 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c7a0:	7bfb      	ldrb	r3, [r7, #15]
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	dce9      	bgt.n	800c784 <prvUnlockQueue+0x16>
 800c7b0:	e000      	b.n	800c7b4 <prvUnlockQueue+0x46>
					break;
 800c7b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	22ff      	movs	r2, #255	; 0xff
 800c7b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c7bc:	f001 fe76 	bl	800e4ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c7c0:	f001 fe44 	bl	800e44c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7cc:	e011      	b.n	800c7f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	691b      	ldr	r3, [r3, #16]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d012      	beq.n	800c7fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	3310      	adds	r3, #16
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f000 fd78 	bl	800d2d0 <xTaskRemoveFromEventList>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d001      	beq.n	800c7ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c7e6:	f000 fe4f 	bl	800d488 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c7ea:	7bbb      	ldrb	r3, [r7, #14]
 800c7ec:	3b01      	subs	r3, #1
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	dce9      	bgt.n	800c7ce <prvUnlockQueue+0x60>
 800c7fa:	e000      	b.n	800c7fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c7fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	22ff      	movs	r2, #255	; 0xff
 800c802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c806:	f001 fe51 	bl	800e4ac <vPortExitCritical>
}
 800c80a:	bf00      	nop
 800c80c:	3710      	adds	r7, #16
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}

0800c812 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c812:	b580      	push	{r7, lr}
 800c814:	b084      	sub	sp, #16
 800c816:	af00      	add	r7, sp, #0
 800c818:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c81a:	f001 fe17 	bl	800e44c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c822:	2b00      	cmp	r3, #0
 800c824:	d102      	bne.n	800c82c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c826:	2301      	movs	r3, #1
 800c828:	60fb      	str	r3, [r7, #12]
 800c82a:	e001      	b.n	800c830 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c82c:	2300      	movs	r3, #0
 800c82e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c830:	f001 fe3c 	bl	800e4ac <vPortExitCritical>

	return xReturn;
 800c834:	68fb      	ldr	r3, [r7, #12]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c83e:	b580      	push	{r7, lr}
 800c840:	b084      	sub	sp, #16
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c846:	f001 fe01 	bl	800e44c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c852:	429a      	cmp	r2, r3
 800c854:	d102      	bne.n	800c85c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c856:	2301      	movs	r3, #1
 800c858:	60fb      	str	r3, [r7, #12]
 800c85a:	e001      	b.n	800c860 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c85c:	2300      	movs	r3, #0
 800c85e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c860:	f001 fe24 	bl	800e4ac <vPortExitCritical>

	return xReturn;
 800c864:	68fb      	ldr	r3, [r7, #12]
}
 800c866:	4618      	mov	r0, r3
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
	...

0800c870 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c870:	b480      	push	{r7}
 800c872:	b085      	sub	sp, #20
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c87a:	2300      	movs	r3, #0
 800c87c:	60fb      	str	r3, [r7, #12]
 800c87e:	e014      	b.n	800c8aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c880:	4a0e      	ldr	r2, [pc, #56]	; (800c8bc <vQueueAddToRegistry+0x4c>)
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d10b      	bne.n	800c8a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c88c:	490b      	ldr	r1, [pc, #44]	; (800c8bc <vQueueAddToRegistry+0x4c>)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	683a      	ldr	r2, [r7, #0]
 800c892:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c896:	4a09      	ldr	r2, [pc, #36]	; (800c8bc <vQueueAddToRegistry+0x4c>)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	00db      	lsls	r3, r3, #3
 800c89c:	4413      	add	r3, r2
 800c89e:	687a      	ldr	r2, [r7, #4]
 800c8a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c8a2:	e006      	b.n	800c8b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	60fb      	str	r3, [r7, #12]
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	2b07      	cmp	r3, #7
 800c8ae:	d9e7      	bls.n	800c880 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c8b0:	bf00      	nop
 800c8b2:	bf00      	nop
 800c8b4:	3714      	adds	r7, #20
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bc80      	pop	{r7}
 800c8ba:	4770      	bx	lr
 800c8bc:	200026cc 	.word	0x200026cc

0800c8c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b086      	sub	sp, #24
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c8d0:	f001 fdbc 	bl	800e44c <vPortEnterCritical>
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8da:	b25b      	sxtb	r3, r3
 800c8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e0:	d103      	bne.n	800c8ea <vQueueWaitForMessageRestricted+0x2a>
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8f0:	b25b      	sxtb	r3, r3
 800c8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f6:	d103      	bne.n	800c900 <vQueueWaitForMessageRestricted+0x40>
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c900:	f001 fdd4 	bl	800e4ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d106      	bne.n	800c91a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	3324      	adds	r3, #36	; 0x24
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	68b9      	ldr	r1, [r7, #8]
 800c914:	4618      	mov	r0, r3
 800c916:	f000 fcaf 	bl	800d278 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c91a:	6978      	ldr	r0, [r7, #20]
 800c91c:	f7ff ff27 	bl	800c76e <prvUnlockQueue>
	}
 800c920:	bf00      	nop
 800c922:	3718      	adds	r7, #24
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b08e      	sub	sp, #56	; 0x38
 800c92c:	af04      	add	r7, sp, #16
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	607a      	str	r2, [r7, #4]
 800c934:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10a      	bne.n	800c952 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c940:	f383 8811 	msr	BASEPRI, r3
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	623b      	str	r3, [r7, #32]
}
 800c94e:	bf00      	nop
 800c950:	e7fe      	b.n	800c950 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c954:	2b00      	cmp	r3, #0
 800c956:	d10a      	bne.n	800c96e <xTaskCreateStatic+0x46>
	__asm volatile
 800c958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95c:	f383 8811 	msr	BASEPRI, r3
 800c960:	f3bf 8f6f 	isb	sy
 800c964:	f3bf 8f4f 	dsb	sy
 800c968:	61fb      	str	r3, [r7, #28]
}
 800c96a:	bf00      	nop
 800c96c:	e7fe      	b.n	800c96c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c96e:	235c      	movs	r3, #92	; 0x5c
 800c970:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	2b5c      	cmp	r3, #92	; 0x5c
 800c976:	d00a      	beq.n	800c98e <xTaskCreateStatic+0x66>
	__asm volatile
 800c978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97c:	f383 8811 	msr	BASEPRI, r3
 800c980:	f3bf 8f6f 	isb	sy
 800c984:	f3bf 8f4f 	dsb	sy
 800c988:	61bb      	str	r3, [r7, #24]
}
 800c98a:	bf00      	nop
 800c98c:	e7fe      	b.n	800c98c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c990:	2b00      	cmp	r3, #0
 800c992:	d01e      	beq.n	800c9d2 <xTaskCreateStatic+0xaa>
 800c994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c996:	2b00      	cmp	r3, #0
 800c998:	d01b      	beq.n	800c9d2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a6:	2202      	movs	r2, #2
 800c9a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	9303      	str	r3, [sp, #12]
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	9302      	str	r3, [sp, #8]
 800c9b4:	f107 0314 	add.w	r3, r7, #20
 800c9b8:	9301      	str	r3, [sp, #4]
 800c9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	68b9      	ldr	r1, [r7, #8]
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f000 f850 	bl	800ca6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c9ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9cc:	f000 f8d4 	bl	800cb78 <prvAddNewTaskToReadyList>
 800c9d0:	e001      	b.n	800c9d6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c9d6:	697b      	ldr	r3, [r7, #20]
	}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3728      	adds	r7, #40	; 0x28
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b08c      	sub	sp, #48	; 0x30
 800c9e4:	af04      	add	r7, sp, #16
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	603b      	str	r3, [r7, #0]
 800c9ec:	4613      	mov	r3, r2
 800c9ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9f0:	88fb      	ldrh	r3, [r7, #6]
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f001 fe29 	bl	800e64c <pvPortMalloc>
 800c9fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d00e      	beq.n	800ca20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ca02:	205c      	movs	r0, #92	; 0x5c
 800ca04:	f001 fe22 	bl	800e64c <pvPortMalloc>
 800ca08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ca0a:	69fb      	ldr	r3, [r7, #28]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d003      	beq.n	800ca18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ca10:	69fb      	ldr	r3, [r7, #28]
 800ca12:	697a      	ldr	r2, [r7, #20]
 800ca14:	631a      	str	r2, [r3, #48]	; 0x30
 800ca16:	e005      	b.n	800ca24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ca18:	6978      	ldr	r0, [r7, #20]
 800ca1a:	f001 fedb 	bl	800e7d4 <vPortFree>
 800ca1e:	e001      	b.n	800ca24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ca20:	2300      	movs	r3, #0
 800ca22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d017      	beq.n	800ca5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ca2a:	69fb      	ldr	r3, [r7, #28]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ca32:	88fa      	ldrh	r2, [r7, #6]
 800ca34:	2300      	movs	r3, #0
 800ca36:	9303      	str	r3, [sp, #12]
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	9302      	str	r3, [sp, #8]
 800ca3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3e:	9301      	str	r3, [sp, #4]
 800ca40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca42:	9300      	str	r3, [sp, #0]
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	68b9      	ldr	r1, [r7, #8]
 800ca48:	68f8      	ldr	r0, [r7, #12]
 800ca4a:	f000 f80e 	bl	800ca6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca4e:	69f8      	ldr	r0, [r7, #28]
 800ca50:	f000 f892 	bl	800cb78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ca54:	2301      	movs	r3, #1
 800ca56:	61bb      	str	r3, [r7, #24]
 800ca58:	e002      	b.n	800ca60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ca5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ca5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ca60:	69bb      	ldr	r3, [r7, #24]
	}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3720      	adds	r7, #32
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	b088      	sub	sp, #32
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	60f8      	str	r0, [r7, #12]
 800ca72:	60b9      	str	r1, [r7, #8]
 800ca74:	607a      	str	r2, [r7, #4]
 800ca76:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ca78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	461a      	mov	r2, r3
 800ca82:	21a5      	movs	r1, #165	; 0xa5
 800ca84:	f002 fcc8 	bl	800f418 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800ca88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ca92:	3b01      	subs	r3, #1
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	4413      	add	r3, r2
 800ca98:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ca9a:	69bb      	ldr	r3, [r7, #24]
 800ca9c:	f023 0307 	bic.w	r3, r3, #7
 800caa0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	f003 0307 	and.w	r3, r3, #7
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d00a      	beq.n	800cac2 <prvInitialiseNewTask+0x58>
	__asm volatile
 800caac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab0:	f383 8811 	msr	BASEPRI, r3
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	617b      	str	r3, [r7, #20]
}
 800cabe:	bf00      	nop
 800cac0:	e7fe      	b.n	800cac0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cac2:	2300      	movs	r3, #0
 800cac4:	61fb      	str	r3, [r7, #28]
 800cac6:	e012      	b.n	800caee <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cac8:	68ba      	ldr	r2, [r7, #8]
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	4413      	add	r3, r2
 800cace:	7819      	ldrb	r1, [r3, #0]
 800cad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	4413      	add	r3, r2
 800cad6:	3334      	adds	r3, #52	; 0x34
 800cad8:	460a      	mov	r2, r1
 800cada:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	69fb      	ldr	r3, [r7, #28]
 800cae0:	4413      	add	r3, r2
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d006      	beq.n	800caf6 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	3301      	adds	r3, #1
 800caec:	61fb      	str	r3, [r7, #28]
 800caee:	69fb      	ldr	r3, [r7, #28]
 800caf0:	2b0f      	cmp	r3, #15
 800caf2:	d9e9      	bls.n	800cac8 <prvInitialiseNewTask+0x5e>
 800caf4:	e000      	b.n	800caf8 <prvInitialiseNewTask+0x8e>
		{
			break;
 800caf6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800caf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafa:	2200      	movs	r2, #0
 800cafc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb02:	2b37      	cmp	r3, #55	; 0x37
 800cb04:	d901      	bls.n	800cb0a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cb06:	2337      	movs	r3, #55	; 0x37
 800cb08:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb0e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb14:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb18:	2200      	movs	r2, #0
 800cb1a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1e:	3304      	adds	r3, #4
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7fe ffdc 	bl	800bade <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb28:	3318      	adds	r3, #24
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7fe ffd7 	bl	800bade <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb34:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb44:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb48:	2200      	movs	r2, #0
 800cb4a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cb54:	683a      	ldr	r2, [r7, #0]
 800cb56:	68f9      	ldr	r1, [r7, #12]
 800cb58:	69b8      	ldr	r0, [r7, #24]
 800cb5a:	f001 fb89 	bl	800e270 <pxPortInitialiseStack>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb62:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800cb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d002      	beq.n	800cb70 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb70:	bf00      	nop
 800cb72:	3720      	adds	r7, #32
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cb80:	f001 fc64 	bl	800e44c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cb84:	4b2d      	ldr	r3, [pc, #180]	; (800cc3c <prvAddNewTaskToReadyList+0xc4>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	3301      	adds	r3, #1
 800cb8a:	4a2c      	ldr	r2, [pc, #176]	; (800cc3c <prvAddNewTaskToReadyList+0xc4>)
 800cb8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cb8e:	4b2c      	ldr	r3, [pc, #176]	; (800cc40 <prvAddNewTaskToReadyList+0xc8>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d109      	bne.n	800cbaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cb96:	4a2a      	ldr	r2, [pc, #168]	; (800cc40 <prvAddNewTaskToReadyList+0xc8>)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cb9c:	4b27      	ldr	r3, [pc, #156]	; (800cc3c <prvAddNewTaskToReadyList+0xc4>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d110      	bne.n	800cbc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cba4:	f000 fc94 	bl	800d4d0 <prvInitialiseTaskLists>
 800cba8:	e00d      	b.n	800cbc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cbaa:	4b26      	ldr	r3, [pc, #152]	; (800cc44 <prvAddNewTaskToReadyList+0xcc>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d109      	bne.n	800cbc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cbb2:	4b23      	ldr	r3, [pc, #140]	; (800cc40 <prvAddNewTaskToReadyList+0xc8>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d802      	bhi.n	800cbc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cbc0:	4a1f      	ldr	r2, [pc, #124]	; (800cc40 <prvAddNewTaskToReadyList+0xc8>)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cbc6:	4b20      	ldr	r3, [pc, #128]	; (800cc48 <prvAddNewTaskToReadyList+0xd0>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	4a1e      	ldr	r2, [pc, #120]	; (800cc48 <prvAddNewTaskToReadyList+0xd0>)
 800cbce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cbd0:	4b1d      	ldr	r3, [pc, #116]	; (800cc48 <prvAddNewTaskToReadyList+0xd0>)
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbdc:	4b1b      	ldr	r3, [pc, #108]	; (800cc4c <prvAddNewTaskToReadyList+0xd4>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d903      	bls.n	800cbec <prvAddNewTaskToReadyList+0x74>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe8:	4a18      	ldr	r2, [pc, #96]	; (800cc4c <prvAddNewTaskToReadyList+0xd4>)
 800cbea:	6013      	str	r3, [r2, #0]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbf0:	4613      	mov	r3, r2
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	4413      	add	r3, r2
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	4a15      	ldr	r2, [pc, #84]	; (800cc50 <prvAddNewTaskToReadyList+0xd8>)
 800cbfa:	441a      	add	r2, r3
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	3304      	adds	r3, #4
 800cc00:	4619      	mov	r1, r3
 800cc02:	4610      	mov	r0, r2
 800cc04:	f7fe ff77 	bl	800baf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cc08:	f001 fc50 	bl	800e4ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cc0c:	4b0d      	ldr	r3, [pc, #52]	; (800cc44 <prvAddNewTaskToReadyList+0xcc>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00e      	beq.n	800cc32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cc14:	4b0a      	ldr	r3, [pc, #40]	; (800cc40 <prvAddNewTaskToReadyList+0xc8>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d207      	bcs.n	800cc32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cc22:	4b0c      	ldr	r3, [pc, #48]	; (800cc54 <prvAddNewTaskToReadyList+0xdc>)
 800cc24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc28:	601a      	str	r2, [r3, #0]
 800cc2a:	f3bf 8f4f 	dsb	sy
 800cc2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc32:	bf00      	nop
 800cc34:	3708      	adds	r7, #8
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	20000d44 	.word	0x20000d44
 800cc40:	20000870 	.word	0x20000870
 800cc44:	20000d50 	.word	0x20000d50
 800cc48:	20000d60 	.word	0x20000d60
 800cc4c:	20000d4c 	.word	0x20000d4c
 800cc50:	20000874 	.word	0x20000874
 800cc54:	e000ed04 	.word	0xe000ed04

0800cc58 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b08a      	sub	sp, #40	; 0x28
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800cc62:	2300      	movs	r3, #0
 800cc64:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d10a      	bne.n	800cc82 <vTaskDelayUntil+0x2a>
	__asm volatile
 800cc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc70:	f383 8811 	msr	BASEPRI, r3
 800cc74:	f3bf 8f6f 	isb	sy
 800cc78:	f3bf 8f4f 	dsb	sy
 800cc7c:	617b      	str	r3, [r7, #20]
}
 800cc7e:	bf00      	nop
 800cc80:	e7fe      	b.n	800cc80 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d10a      	bne.n	800cc9e <vTaskDelayUntil+0x46>
	__asm volatile
 800cc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8c:	f383 8811 	msr	BASEPRI, r3
 800cc90:	f3bf 8f6f 	isb	sy
 800cc94:	f3bf 8f4f 	dsb	sy
 800cc98:	613b      	str	r3, [r7, #16]
}
 800cc9a:	bf00      	nop
 800cc9c:	e7fe      	b.n	800cc9c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800cc9e:	4b2a      	ldr	r3, [pc, #168]	; (800cd48 <vTaskDelayUntil+0xf0>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d00a      	beq.n	800ccbc <vTaskDelayUntil+0x64>
	__asm volatile
 800cca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccaa:	f383 8811 	msr	BASEPRI, r3
 800ccae:	f3bf 8f6f 	isb	sy
 800ccb2:	f3bf 8f4f 	dsb	sy
 800ccb6:	60fb      	str	r3, [r7, #12]
}
 800ccb8:	bf00      	nop
 800ccba:	e7fe      	b.n	800ccba <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800ccbc:	f000 f8e4 	bl	800ce88 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ccc0:	4b22      	ldr	r3, [pc, #136]	; (800cd4c <vTaskDelayUntil+0xf4>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	683a      	ldr	r2, [r7, #0]
 800cccc:	4413      	add	r3, r2
 800ccce:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	6a3a      	ldr	r2, [r7, #32]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d20b      	bcs.n	800ccf2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	69fa      	ldr	r2, [r7, #28]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d211      	bcs.n	800cd08 <vTaskDelayUntil+0xb0>
 800cce4:	69fa      	ldr	r2, [r7, #28]
 800cce6:	6a3b      	ldr	r3, [r7, #32]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d90d      	bls.n	800cd08 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800ccec:	2301      	movs	r3, #1
 800ccee:	627b      	str	r3, [r7, #36]	; 0x24
 800ccf0:	e00a      	b.n	800cd08 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	69fa      	ldr	r2, [r7, #28]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d303      	bcc.n	800cd04 <vTaskDelayUntil+0xac>
 800ccfc:	69fa      	ldr	r2, [r7, #28]
 800ccfe:	6a3b      	ldr	r3, [r7, #32]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d901      	bls.n	800cd08 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800cd04:	2301      	movs	r3, #1
 800cd06:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	69fa      	ldr	r2, [r7, #28]
 800cd0c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800cd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d006      	beq.n	800cd22 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800cd14:	69fa      	ldr	r2, [r7, #28]
 800cd16:	6a3b      	ldr	r3, [r7, #32]
 800cd18:	1ad3      	subs	r3, r2, r3
 800cd1a:	2100      	movs	r1, #0
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f000 ff41 	bl	800dba4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800cd22:	f000 f8bf 	bl	800cea4 <xTaskResumeAll>
 800cd26:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d107      	bne.n	800cd3e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800cd2e:	4b08      	ldr	r3, [pc, #32]	; (800cd50 <vTaskDelayUntil+0xf8>)
 800cd30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd34:	601a      	str	r2, [r3, #0]
 800cd36:	f3bf 8f4f 	dsb	sy
 800cd3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd3e:	bf00      	nop
 800cd40:	3728      	adds	r7, #40	; 0x28
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	20000d6c 	.word	0x20000d6c
 800cd4c:	20000d48 	.word	0x20000d48
 800cd50:	e000ed04 	.word	0xe000ed04

0800cd54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d017      	beq.n	800cd96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cd66:	4b13      	ldr	r3, [pc, #76]	; (800cdb4 <vTaskDelay+0x60>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d00a      	beq.n	800cd84 <vTaskDelay+0x30>
	__asm volatile
 800cd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd72:	f383 8811 	msr	BASEPRI, r3
 800cd76:	f3bf 8f6f 	isb	sy
 800cd7a:	f3bf 8f4f 	dsb	sy
 800cd7e:	60bb      	str	r3, [r7, #8]
}
 800cd80:	bf00      	nop
 800cd82:	e7fe      	b.n	800cd82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cd84:	f000 f880 	bl	800ce88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cd88:	2100      	movs	r1, #0
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 ff0a 	bl	800dba4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cd90:	f000 f888 	bl	800cea4 <xTaskResumeAll>
 800cd94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d107      	bne.n	800cdac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cd9c:	4b06      	ldr	r3, [pc, #24]	; (800cdb8 <vTaskDelay+0x64>)
 800cd9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cda2:	601a      	str	r2, [r3, #0]
 800cda4:	f3bf 8f4f 	dsb	sy
 800cda8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cdac:	bf00      	nop
 800cdae:	3710      	adds	r7, #16
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	20000d6c 	.word	0x20000d6c
 800cdb8:	e000ed04 	.word	0xe000ed04

0800cdbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b08a      	sub	sp, #40	; 0x28
 800cdc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cdca:	463a      	mov	r2, r7
 800cdcc:	1d39      	adds	r1, r7, #4
 800cdce:	f107 0308 	add.w	r3, r7, #8
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7fe fe32 	bl	800ba3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cdd8:	6839      	ldr	r1, [r7, #0]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	68ba      	ldr	r2, [r7, #8]
 800cdde:	9202      	str	r2, [sp, #8]
 800cde0:	9301      	str	r3, [sp, #4]
 800cde2:	2300      	movs	r3, #0
 800cde4:	9300      	str	r3, [sp, #0]
 800cde6:	2300      	movs	r3, #0
 800cde8:	460a      	mov	r2, r1
 800cdea:	4921      	ldr	r1, [pc, #132]	; (800ce70 <vTaskStartScheduler+0xb4>)
 800cdec:	4821      	ldr	r0, [pc, #132]	; (800ce74 <vTaskStartScheduler+0xb8>)
 800cdee:	f7ff fd9b 	bl	800c928 <xTaskCreateStatic>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	4a20      	ldr	r2, [pc, #128]	; (800ce78 <vTaskStartScheduler+0xbc>)
 800cdf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cdf8:	4b1f      	ldr	r3, [pc, #124]	; (800ce78 <vTaskStartScheduler+0xbc>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d002      	beq.n	800ce06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ce00:	2301      	movs	r3, #1
 800ce02:	617b      	str	r3, [r7, #20]
 800ce04:	e001      	b.n	800ce0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ce06:	2300      	movs	r3, #0
 800ce08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d102      	bne.n	800ce16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ce10:	f000 ff1c 	bl	800dc4c <xTimerCreateTimerTask>
 800ce14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d116      	bne.n	800ce4a <vTaskStartScheduler+0x8e>
	__asm volatile
 800ce1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce20:	f383 8811 	msr	BASEPRI, r3
 800ce24:	f3bf 8f6f 	isb	sy
 800ce28:	f3bf 8f4f 	dsb	sy
 800ce2c:	613b      	str	r3, [r7, #16]
}
 800ce2e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ce30:	4b12      	ldr	r3, [pc, #72]	; (800ce7c <vTaskStartScheduler+0xc0>)
 800ce32:	f04f 32ff 	mov.w	r2, #4294967295
 800ce36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ce38:	4b11      	ldr	r3, [pc, #68]	; (800ce80 <vTaskStartScheduler+0xc4>)
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ce3e:	4b11      	ldr	r3, [pc, #68]	; (800ce84 <vTaskStartScheduler+0xc8>)
 800ce40:	2200      	movs	r2, #0
 800ce42:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ce44:	f001 fa90 	bl	800e368 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ce48:	e00e      	b.n	800ce68 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce50:	d10a      	bne.n	800ce68 <vTaskStartScheduler+0xac>
	__asm volatile
 800ce52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce56:	f383 8811 	msr	BASEPRI, r3
 800ce5a:	f3bf 8f6f 	isb	sy
 800ce5e:	f3bf 8f4f 	dsb	sy
 800ce62:	60fb      	str	r3, [r7, #12]
}
 800ce64:	bf00      	nop
 800ce66:	e7fe      	b.n	800ce66 <vTaskStartScheduler+0xaa>
}
 800ce68:	bf00      	nop
 800ce6a:	3718      	adds	r7, #24
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	0800f68c 	.word	0x0800f68c
 800ce74:	0800d4a1 	.word	0x0800d4a1
 800ce78:	20000d68 	.word	0x20000d68
 800ce7c:	20000d64 	.word	0x20000d64
 800ce80:	20000d50 	.word	0x20000d50
 800ce84:	20000d48 	.word	0x20000d48

0800ce88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ce88:	b480      	push	{r7}
 800ce8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ce8c:	4b04      	ldr	r3, [pc, #16]	; (800cea0 <vTaskSuspendAll+0x18>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	3301      	adds	r3, #1
 800ce92:	4a03      	ldr	r2, [pc, #12]	; (800cea0 <vTaskSuspendAll+0x18>)
 800ce94:	6013      	str	r3, [r2, #0]
}
 800ce96:	bf00      	nop
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bc80      	pop	{r7}
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop
 800cea0:	20000d6c 	.word	0x20000d6c

0800cea4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ceb2:	4b42      	ldr	r3, [pc, #264]	; (800cfbc <xTaskResumeAll+0x118>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d10a      	bne.n	800ced0 <xTaskResumeAll+0x2c>
	__asm volatile
 800ceba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cebe:	f383 8811 	msr	BASEPRI, r3
 800cec2:	f3bf 8f6f 	isb	sy
 800cec6:	f3bf 8f4f 	dsb	sy
 800ceca:	603b      	str	r3, [r7, #0]
}
 800cecc:	bf00      	nop
 800cece:	e7fe      	b.n	800cece <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ced0:	f001 fabc 	bl	800e44c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ced4:	4b39      	ldr	r3, [pc, #228]	; (800cfbc <xTaskResumeAll+0x118>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	3b01      	subs	r3, #1
 800ceda:	4a38      	ldr	r2, [pc, #224]	; (800cfbc <xTaskResumeAll+0x118>)
 800cedc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cede:	4b37      	ldr	r3, [pc, #220]	; (800cfbc <xTaskResumeAll+0x118>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d162      	bne.n	800cfac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cee6:	4b36      	ldr	r3, [pc, #216]	; (800cfc0 <xTaskResumeAll+0x11c>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d05e      	beq.n	800cfac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ceee:	e02f      	b.n	800cf50 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800cef0:	4b34      	ldr	r3, [pc, #208]	; (800cfc4 <xTaskResumeAll+0x120>)
 800cef2:	68db      	ldr	r3, [r3, #12]
 800cef4:	68db      	ldr	r3, [r3, #12]
 800cef6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	3318      	adds	r3, #24
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7fe fe55 	bl	800bbac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	3304      	adds	r3, #4
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7fe fe50 	bl	800bbac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf10:	4b2d      	ldr	r3, [pc, #180]	; (800cfc8 <xTaskResumeAll+0x124>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d903      	bls.n	800cf20 <xTaskResumeAll+0x7c>
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf1c:	4a2a      	ldr	r2, [pc, #168]	; (800cfc8 <xTaskResumeAll+0x124>)
 800cf1e:	6013      	str	r3, [r2, #0]
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf24:	4613      	mov	r3, r2
 800cf26:	009b      	lsls	r3, r3, #2
 800cf28:	4413      	add	r3, r2
 800cf2a:	009b      	lsls	r3, r3, #2
 800cf2c:	4a27      	ldr	r2, [pc, #156]	; (800cfcc <xTaskResumeAll+0x128>)
 800cf2e:	441a      	add	r2, r3
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	3304      	adds	r3, #4
 800cf34:	4619      	mov	r1, r3
 800cf36:	4610      	mov	r0, r2
 800cf38:	f7fe fddd 	bl	800baf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf40:	4b23      	ldr	r3, [pc, #140]	; (800cfd0 <xTaskResumeAll+0x12c>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d302      	bcc.n	800cf50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cf4a:	4b22      	ldr	r3, [pc, #136]	; (800cfd4 <xTaskResumeAll+0x130>)
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf50:	4b1c      	ldr	r3, [pc, #112]	; (800cfc4 <xTaskResumeAll+0x120>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d1cb      	bne.n	800cef0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d001      	beq.n	800cf62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cf5e:	f000 fb8d 	bl	800d67c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cf62:	4b1d      	ldr	r3, [pc, #116]	; (800cfd8 <xTaskResumeAll+0x134>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d010      	beq.n	800cf90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cf6e:	f000 f845 	bl	800cffc <xTaskIncrementTick>
 800cf72:	4603      	mov	r3, r0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d002      	beq.n	800cf7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cf78:	4b16      	ldr	r3, [pc, #88]	; (800cfd4 <xTaskResumeAll+0x130>)
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	3b01      	subs	r3, #1
 800cf82:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d1f1      	bne.n	800cf6e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800cf8a:	4b13      	ldr	r3, [pc, #76]	; (800cfd8 <xTaskResumeAll+0x134>)
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf90:	4b10      	ldr	r3, [pc, #64]	; (800cfd4 <xTaskResumeAll+0x130>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d009      	beq.n	800cfac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cf9c:	4b0f      	ldr	r3, [pc, #60]	; (800cfdc <xTaskResumeAll+0x138>)
 800cf9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfa2:	601a      	str	r2, [r3, #0]
 800cfa4:	f3bf 8f4f 	dsb	sy
 800cfa8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cfac:	f001 fa7e 	bl	800e4ac <vPortExitCritical>

	return xAlreadyYielded;
 800cfb0:	68bb      	ldr	r3, [r7, #8]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3710      	adds	r7, #16
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	20000d6c 	.word	0x20000d6c
 800cfc0:	20000d44 	.word	0x20000d44
 800cfc4:	20000d04 	.word	0x20000d04
 800cfc8:	20000d4c 	.word	0x20000d4c
 800cfcc:	20000874 	.word	0x20000874
 800cfd0:	20000870 	.word	0x20000870
 800cfd4:	20000d58 	.word	0x20000d58
 800cfd8:	20000d54 	.word	0x20000d54
 800cfdc:	e000ed04 	.word	0xe000ed04

0800cfe0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b083      	sub	sp, #12
 800cfe4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cfe6:	4b04      	ldr	r3, [pc, #16]	; (800cff8 <xTaskGetTickCount+0x18>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cfec:	687b      	ldr	r3, [r7, #4]
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	370c      	adds	r7, #12
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bc80      	pop	{r7}
 800cff6:	4770      	bx	lr
 800cff8:	20000d48 	.word	0x20000d48

0800cffc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b086      	sub	sp, #24
 800d000:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d002:	2300      	movs	r3, #0
 800d004:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d006:	4b51      	ldr	r3, [pc, #324]	; (800d14c <xTaskIncrementTick+0x150>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	f040 808e 	bne.w	800d12c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d010:	4b4f      	ldr	r3, [pc, #316]	; (800d150 <xTaskIncrementTick+0x154>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	3301      	adds	r3, #1
 800d016:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d018:	4a4d      	ldr	r2, [pc, #308]	; (800d150 <xTaskIncrementTick+0x154>)
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d120      	bne.n	800d066 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d024:	4b4b      	ldr	r3, [pc, #300]	; (800d154 <xTaskIncrementTick+0x158>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00a      	beq.n	800d044 <xTaskIncrementTick+0x48>
	__asm volatile
 800d02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d032:	f383 8811 	msr	BASEPRI, r3
 800d036:	f3bf 8f6f 	isb	sy
 800d03a:	f3bf 8f4f 	dsb	sy
 800d03e:	603b      	str	r3, [r7, #0]
}
 800d040:	bf00      	nop
 800d042:	e7fe      	b.n	800d042 <xTaskIncrementTick+0x46>
 800d044:	4b43      	ldr	r3, [pc, #268]	; (800d154 <xTaskIncrementTick+0x158>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	60fb      	str	r3, [r7, #12]
 800d04a:	4b43      	ldr	r3, [pc, #268]	; (800d158 <xTaskIncrementTick+0x15c>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	4a41      	ldr	r2, [pc, #260]	; (800d154 <xTaskIncrementTick+0x158>)
 800d050:	6013      	str	r3, [r2, #0]
 800d052:	4a41      	ldr	r2, [pc, #260]	; (800d158 <xTaskIncrementTick+0x15c>)
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6013      	str	r3, [r2, #0]
 800d058:	4b40      	ldr	r3, [pc, #256]	; (800d15c <xTaskIncrementTick+0x160>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	3301      	adds	r3, #1
 800d05e:	4a3f      	ldr	r2, [pc, #252]	; (800d15c <xTaskIncrementTick+0x160>)
 800d060:	6013      	str	r3, [r2, #0]
 800d062:	f000 fb0b 	bl	800d67c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d066:	4b3e      	ldr	r3, [pc, #248]	; (800d160 <xTaskIncrementTick+0x164>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	693a      	ldr	r2, [r7, #16]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d34e      	bcc.n	800d10e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d070:	4b38      	ldr	r3, [pc, #224]	; (800d154 <xTaskIncrementTick+0x158>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d101      	bne.n	800d07e <xTaskIncrementTick+0x82>
 800d07a:	2301      	movs	r3, #1
 800d07c:	e000      	b.n	800d080 <xTaskIncrementTick+0x84>
 800d07e:	2300      	movs	r3, #0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d004      	beq.n	800d08e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d084:	4b36      	ldr	r3, [pc, #216]	; (800d160 <xTaskIncrementTick+0x164>)
 800d086:	f04f 32ff 	mov.w	r2, #4294967295
 800d08a:	601a      	str	r2, [r3, #0]
					break;
 800d08c:	e03f      	b.n	800d10e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d08e:	4b31      	ldr	r3, [pc, #196]	; (800d154 <xTaskIncrementTick+0x158>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	68db      	ldr	r3, [r3, #12]
 800d096:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	685b      	ldr	r3, [r3, #4]
 800d09c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d09e:	693a      	ldr	r2, [r7, #16]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d203      	bcs.n	800d0ae <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d0a6:	4a2e      	ldr	r2, [pc, #184]	; (800d160 <xTaskIncrementTick+0x164>)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6013      	str	r3, [r2, #0]
						break;
 800d0ac:	e02f      	b.n	800d10e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	3304      	adds	r3, #4
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7fe fd7a 	bl	800bbac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d004      	beq.n	800d0ca <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	3318      	adds	r3, #24
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7fe fd71 	bl	800bbac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0ce:	4b25      	ldr	r3, [pc, #148]	; (800d164 <xTaskIncrementTick+0x168>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d903      	bls.n	800d0de <xTaskIncrementTick+0xe2>
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0da:	4a22      	ldr	r2, [pc, #136]	; (800d164 <xTaskIncrementTick+0x168>)
 800d0dc:	6013      	str	r3, [r2, #0]
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0e2:	4613      	mov	r3, r2
 800d0e4:	009b      	lsls	r3, r3, #2
 800d0e6:	4413      	add	r3, r2
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	4a1f      	ldr	r2, [pc, #124]	; (800d168 <xTaskIncrementTick+0x16c>)
 800d0ec:	441a      	add	r2, r3
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	3304      	adds	r3, #4
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	4610      	mov	r0, r2
 800d0f6:	f7fe fcfe 	bl	800baf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0fe:	4b1b      	ldr	r3, [pc, #108]	; (800d16c <xTaskIncrementTick+0x170>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d104:	429a      	cmp	r2, r3
 800d106:	d3b3      	bcc.n	800d070 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d108:	2301      	movs	r3, #1
 800d10a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d10c:	e7b0      	b.n	800d070 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d10e:	4b17      	ldr	r3, [pc, #92]	; (800d16c <xTaskIncrementTick+0x170>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d114:	4914      	ldr	r1, [pc, #80]	; (800d168 <xTaskIncrementTick+0x16c>)
 800d116:	4613      	mov	r3, r2
 800d118:	009b      	lsls	r3, r3, #2
 800d11a:	4413      	add	r3, r2
 800d11c:	009b      	lsls	r3, r3, #2
 800d11e:	440b      	add	r3, r1
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	2b01      	cmp	r3, #1
 800d124:	d907      	bls.n	800d136 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d126:	2301      	movs	r3, #1
 800d128:	617b      	str	r3, [r7, #20]
 800d12a:	e004      	b.n	800d136 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d12c:	4b10      	ldr	r3, [pc, #64]	; (800d170 <xTaskIncrementTick+0x174>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	3301      	adds	r3, #1
 800d132:	4a0f      	ldr	r2, [pc, #60]	; (800d170 <xTaskIncrementTick+0x174>)
 800d134:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d136:	4b0f      	ldr	r3, [pc, #60]	; (800d174 <xTaskIncrementTick+0x178>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d001      	beq.n	800d142 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800d13e:	2301      	movs	r3, #1
 800d140:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d142:	697b      	ldr	r3, [r7, #20]
}
 800d144:	4618      	mov	r0, r3
 800d146:	3718      	adds	r7, #24
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	20000d6c 	.word	0x20000d6c
 800d150:	20000d48 	.word	0x20000d48
 800d154:	20000cfc 	.word	0x20000cfc
 800d158:	20000d00 	.word	0x20000d00
 800d15c:	20000d5c 	.word	0x20000d5c
 800d160:	20000d64 	.word	0x20000d64
 800d164:	20000d4c 	.word	0x20000d4c
 800d168:	20000874 	.word	0x20000874
 800d16c:	20000870 	.word	0x20000870
 800d170:	20000d54 	.word	0x20000d54
 800d174:	20000d58 	.word	0x20000d58

0800d178 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d178:	b480      	push	{r7}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d17e:	4b27      	ldr	r3, [pc, #156]	; (800d21c <vTaskSwitchContext+0xa4>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d003      	beq.n	800d18e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d186:	4b26      	ldr	r3, [pc, #152]	; (800d220 <vTaskSwitchContext+0xa8>)
 800d188:	2201      	movs	r2, #1
 800d18a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d18c:	e041      	b.n	800d212 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d18e:	4b24      	ldr	r3, [pc, #144]	; (800d220 <vTaskSwitchContext+0xa8>)
 800d190:	2200      	movs	r2, #0
 800d192:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d194:	4b23      	ldr	r3, [pc, #140]	; (800d224 <vTaskSwitchContext+0xac>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	60fb      	str	r3, [r7, #12]
 800d19a:	e010      	b.n	800d1be <vTaskSwitchContext+0x46>
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d10a      	bne.n	800d1b8 <vTaskSwitchContext+0x40>
	__asm volatile
 800d1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a6:	f383 8811 	msr	BASEPRI, r3
 800d1aa:	f3bf 8f6f 	isb	sy
 800d1ae:	f3bf 8f4f 	dsb	sy
 800d1b2:	607b      	str	r3, [r7, #4]
}
 800d1b4:	bf00      	nop
 800d1b6:	e7fe      	b.n	800d1b6 <vTaskSwitchContext+0x3e>
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	60fb      	str	r3, [r7, #12]
 800d1be:	491a      	ldr	r1, [pc, #104]	; (800d228 <vTaskSwitchContext+0xb0>)
 800d1c0:	68fa      	ldr	r2, [r7, #12]
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	4413      	add	r3, r2
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	440b      	add	r3, r1
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d0e4      	beq.n	800d19c <vTaskSwitchContext+0x24>
 800d1d2:	68fa      	ldr	r2, [r7, #12]
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	4413      	add	r3, r2
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	4a12      	ldr	r2, [pc, #72]	; (800d228 <vTaskSwitchContext+0xb0>)
 800d1de:	4413      	add	r3, r2
 800d1e0:	60bb      	str	r3, [r7, #8]
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	685a      	ldr	r2, [r3, #4]
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	605a      	str	r2, [r3, #4]
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	685a      	ldr	r2, [r3, #4]
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	3308      	adds	r3, #8
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d104      	bne.n	800d202 <vTaskSwitchContext+0x8a>
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	685a      	ldr	r2, [r3, #4]
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	605a      	str	r2, [r3, #4]
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	685b      	ldr	r3, [r3, #4]
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	4a08      	ldr	r2, [pc, #32]	; (800d22c <vTaskSwitchContext+0xb4>)
 800d20a:	6013      	str	r3, [r2, #0]
 800d20c:	4a05      	ldr	r2, [pc, #20]	; (800d224 <vTaskSwitchContext+0xac>)
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	6013      	str	r3, [r2, #0]
}
 800d212:	bf00      	nop
 800d214:	3714      	adds	r7, #20
 800d216:	46bd      	mov	sp, r7
 800d218:	bc80      	pop	{r7}
 800d21a:	4770      	bx	lr
 800d21c:	20000d6c 	.word	0x20000d6c
 800d220:	20000d58 	.word	0x20000d58
 800d224:	20000d4c 	.word	0x20000d4c
 800d228:	20000874 	.word	0x20000874
 800d22c:	20000870 	.word	0x20000870

0800d230 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d10a      	bne.n	800d256 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d244:	f383 8811 	msr	BASEPRI, r3
 800d248:	f3bf 8f6f 	isb	sy
 800d24c:	f3bf 8f4f 	dsb	sy
 800d250:	60fb      	str	r3, [r7, #12]
}
 800d252:	bf00      	nop
 800d254:	e7fe      	b.n	800d254 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d256:	4b07      	ldr	r3, [pc, #28]	; (800d274 <vTaskPlaceOnEventList+0x44>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	3318      	adds	r3, #24
 800d25c:	4619      	mov	r1, r3
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f7fe fc6c 	bl	800bb3c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d264:	2101      	movs	r1, #1
 800d266:	6838      	ldr	r0, [r7, #0]
 800d268:	f000 fc9c 	bl	800dba4 <prvAddCurrentTaskToDelayedList>
}
 800d26c:	bf00      	nop
 800d26e:	3710      	adds	r7, #16
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	20000870 	.word	0x20000870

0800d278 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b086      	sub	sp, #24
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d10a      	bne.n	800d2a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28e:	f383 8811 	msr	BASEPRI, r3
 800d292:	f3bf 8f6f 	isb	sy
 800d296:	f3bf 8f4f 	dsb	sy
 800d29a:	617b      	str	r3, [r7, #20]
}
 800d29c:	bf00      	nop
 800d29e:	e7fe      	b.n	800d29e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d2a0:	4b0a      	ldr	r3, [pc, #40]	; (800d2cc <vTaskPlaceOnEventListRestricted+0x54>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	3318      	adds	r3, #24
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	68f8      	ldr	r0, [r7, #12]
 800d2aa:	f7fe fc24 	bl	800baf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d002      	beq.n	800d2ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d2b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d2b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d2ba:	6879      	ldr	r1, [r7, #4]
 800d2bc:	68b8      	ldr	r0, [r7, #8]
 800d2be:	f000 fc71 	bl	800dba4 <prvAddCurrentTaskToDelayedList>
	}
 800d2c2:	bf00      	nop
 800d2c4:	3718      	adds	r7, #24
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	20000870 	.word	0x20000870

0800d2d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b086      	sub	sp, #24
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	68db      	ldr	r3, [r3, #12]
 800d2dc:	68db      	ldr	r3, [r3, #12]
 800d2de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d10a      	bne.n	800d2fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ea:	f383 8811 	msr	BASEPRI, r3
 800d2ee:	f3bf 8f6f 	isb	sy
 800d2f2:	f3bf 8f4f 	dsb	sy
 800d2f6:	60fb      	str	r3, [r7, #12]
}
 800d2f8:	bf00      	nop
 800d2fa:	e7fe      	b.n	800d2fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	3318      	adds	r3, #24
 800d300:	4618      	mov	r0, r3
 800d302:	f7fe fc53 	bl	800bbac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d306:	4b1e      	ldr	r3, [pc, #120]	; (800d380 <xTaskRemoveFromEventList+0xb0>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d11d      	bne.n	800d34a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	3304      	adds	r3, #4
 800d312:	4618      	mov	r0, r3
 800d314:	f7fe fc4a 	bl	800bbac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d31c:	4b19      	ldr	r3, [pc, #100]	; (800d384 <xTaskRemoveFromEventList+0xb4>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	429a      	cmp	r2, r3
 800d322:	d903      	bls.n	800d32c <xTaskRemoveFromEventList+0x5c>
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d328:	4a16      	ldr	r2, [pc, #88]	; (800d384 <xTaskRemoveFromEventList+0xb4>)
 800d32a:	6013      	str	r3, [r2, #0]
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d330:	4613      	mov	r3, r2
 800d332:	009b      	lsls	r3, r3, #2
 800d334:	4413      	add	r3, r2
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	4a13      	ldr	r2, [pc, #76]	; (800d388 <xTaskRemoveFromEventList+0xb8>)
 800d33a:	441a      	add	r2, r3
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	3304      	adds	r3, #4
 800d340:	4619      	mov	r1, r3
 800d342:	4610      	mov	r0, r2
 800d344:	f7fe fbd7 	bl	800baf6 <vListInsertEnd>
 800d348:	e005      	b.n	800d356 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	3318      	adds	r3, #24
 800d34e:	4619      	mov	r1, r3
 800d350:	480e      	ldr	r0, [pc, #56]	; (800d38c <xTaskRemoveFromEventList+0xbc>)
 800d352:	f7fe fbd0 	bl	800baf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d35a:	4b0d      	ldr	r3, [pc, #52]	; (800d390 <xTaskRemoveFromEventList+0xc0>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d360:	429a      	cmp	r2, r3
 800d362:	d905      	bls.n	800d370 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d364:	2301      	movs	r3, #1
 800d366:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d368:	4b0a      	ldr	r3, [pc, #40]	; (800d394 <xTaskRemoveFromEventList+0xc4>)
 800d36a:	2201      	movs	r2, #1
 800d36c:	601a      	str	r2, [r3, #0]
 800d36e:	e001      	b.n	800d374 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d370:	2300      	movs	r3, #0
 800d372:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800d374:	697b      	ldr	r3, [r7, #20]
}
 800d376:	4618      	mov	r0, r3
 800d378:	3718      	adds	r7, #24
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	20000d6c 	.word	0x20000d6c
 800d384:	20000d4c 	.word	0x20000d4c
 800d388:	20000874 	.word	0x20000874
 800d38c:	20000d04 	.word	0x20000d04
 800d390:	20000870 	.word	0x20000870
 800d394:	20000d58 	.word	0x20000d58

0800d398 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d398:	b480      	push	{r7}
 800d39a:	b083      	sub	sp, #12
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d3a0:	4b06      	ldr	r3, [pc, #24]	; (800d3bc <vTaskInternalSetTimeOutState+0x24>)
 800d3a2:	681a      	ldr	r2, [r3, #0]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d3a8:	4b05      	ldr	r3, [pc, #20]	; (800d3c0 <vTaskInternalSetTimeOutState+0x28>)
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	605a      	str	r2, [r3, #4]
}
 800d3b0:	bf00      	nop
 800d3b2:	370c      	adds	r7, #12
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bc80      	pop	{r7}
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop
 800d3bc:	20000d5c 	.word	0x20000d5c
 800d3c0:	20000d48 	.word	0x20000d48

0800d3c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b088      	sub	sp, #32
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d10a      	bne.n	800d3ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d8:	f383 8811 	msr	BASEPRI, r3
 800d3dc:	f3bf 8f6f 	isb	sy
 800d3e0:	f3bf 8f4f 	dsb	sy
 800d3e4:	613b      	str	r3, [r7, #16]
}
 800d3e6:	bf00      	nop
 800d3e8:	e7fe      	b.n	800d3e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d10a      	bne.n	800d406 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f4:	f383 8811 	msr	BASEPRI, r3
 800d3f8:	f3bf 8f6f 	isb	sy
 800d3fc:	f3bf 8f4f 	dsb	sy
 800d400:	60fb      	str	r3, [r7, #12]
}
 800d402:	bf00      	nop
 800d404:	e7fe      	b.n	800d404 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d406:	f001 f821 	bl	800e44c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d40a:	4b1d      	ldr	r3, [pc, #116]	; (800d480 <xTaskCheckForTimeOut+0xbc>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	69ba      	ldr	r2, [r7, #24]
 800d416:	1ad3      	subs	r3, r2, r3
 800d418:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d422:	d102      	bne.n	800d42a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d424:	2300      	movs	r3, #0
 800d426:	61fb      	str	r3, [r7, #28]
 800d428:	e023      	b.n	800d472 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681a      	ldr	r2, [r3, #0]
 800d42e:	4b15      	ldr	r3, [pc, #84]	; (800d484 <xTaskCheckForTimeOut+0xc0>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	429a      	cmp	r2, r3
 800d434:	d007      	beq.n	800d446 <xTaskCheckForTimeOut+0x82>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	69ba      	ldr	r2, [r7, #24]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d302      	bcc.n	800d446 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d440:	2301      	movs	r3, #1
 800d442:	61fb      	str	r3, [r7, #28]
 800d444:	e015      	b.n	800d472 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	697a      	ldr	r2, [r7, #20]
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d20b      	bcs.n	800d468 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	1ad2      	subs	r2, r2, r3
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f7ff ff9b 	bl	800d398 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d462:	2300      	movs	r3, #0
 800d464:	61fb      	str	r3, [r7, #28]
 800d466:	e004      	b.n	800d472 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	2200      	movs	r2, #0
 800d46c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d46e:	2301      	movs	r3, #1
 800d470:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d472:	f001 f81b 	bl	800e4ac <vPortExitCritical>

	return xReturn;
 800d476:	69fb      	ldr	r3, [r7, #28]
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3720      	adds	r7, #32
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	20000d48 	.word	0x20000d48
 800d484:	20000d5c 	.word	0x20000d5c

0800d488 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d488:	b480      	push	{r7}
 800d48a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d48c:	4b03      	ldr	r3, [pc, #12]	; (800d49c <vTaskMissedYield+0x14>)
 800d48e:	2201      	movs	r2, #1
 800d490:	601a      	str	r2, [r3, #0]
}
 800d492:	bf00      	nop
 800d494:	46bd      	mov	sp, r7
 800d496:	bc80      	pop	{r7}
 800d498:	4770      	bx	lr
 800d49a:	bf00      	nop
 800d49c:	20000d58 	.word	0x20000d58

0800d4a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d4a8:	f000 f852 	bl	800d550 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d4ac:	4b06      	ldr	r3, [pc, #24]	; (800d4c8 <prvIdleTask+0x28>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d9f9      	bls.n	800d4a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d4b4:	4b05      	ldr	r3, [pc, #20]	; (800d4cc <prvIdleTask+0x2c>)
 800d4b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4ba:	601a      	str	r2, [r3, #0]
 800d4bc:	f3bf 8f4f 	dsb	sy
 800d4c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d4c4:	e7f0      	b.n	800d4a8 <prvIdleTask+0x8>
 800d4c6:	bf00      	nop
 800d4c8:	20000874 	.word	0x20000874
 800d4cc:	e000ed04 	.word	0xe000ed04

0800d4d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	607b      	str	r3, [r7, #4]
 800d4da:	e00c      	b.n	800d4f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	4613      	mov	r3, r2
 800d4e0:	009b      	lsls	r3, r3, #2
 800d4e2:	4413      	add	r3, r2
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	4a12      	ldr	r2, [pc, #72]	; (800d530 <prvInitialiseTaskLists+0x60>)
 800d4e8:	4413      	add	r3, r2
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7fe fad8 	bl	800baa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	607b      	str	r3, [r7, #4]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2b37      	cmp	r3, #55	; 0x37
 800d4fa:	d9ef      	bls.n	800d4dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d4fc:	480d      	ldr	r0, [pc, #52]	; (800d534 <prvInitialiseTaskLists+0x64>)
 800d4fe:	f7fe facf 	bl	800baa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d502:	480d      	ldr	r0, [pc, #52]	; (800d538 <prvInitialiseTaskLists+0x68>)
 800d504:	f7fe facc 	bl	800baa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d508:	480c      	ldr	r0, [pc, #48]	; (800d53c <prvInitialiseTaskLists+0x6c>)
 800d50a:	f7fe fac9 	bl	800baa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d50e:	480c      	ldr	r0, [pc, #48]	; (800d540 <prvInitialiseTaskLists+0x70>)
 800d510:	f7fe fac6 	bl	800baa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d514:	480b      	ldr	r0, [pc, #44]	; (800d544 <prvInitialiseTaskLists+0x74>)
 800d516:	f7fe fac3 	bl	800baa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d51a:	4b0b      	ldr	r3, [pc, #44]	; (800d548 <prvInitialiseTaskLists+0x78>)
 800d51c:	4a05      	ldr	r2, [pc, #20]	; (800d534 <prvInitialiseTaskLists+0x64>)
 800d51e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d520:	4b0a      	ldr	r3, [pc, #40]	; (800d54c <prvInitialiseTaskLists+0x7c>)
 800d522:	4a05      	ldr	r2, [pc, #20]	; (800d538 <prvInitialiseTaskLists+0x68>)
 800d524:	601a      	str	r2, [r3, #0]
}
 800d526:	bf00      	nop
 800d528:	3708      	adds	r7, #8
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	20000874 	.word	0x20000874
 800d534:	20000cd4 	.word	0x20000cd4
 800d538:	20000ce8 	.word	0x20000ce8
 800d53c:	20000d04 	.word	0x20000d04
 800d540:	20000d18 	.word	0x20000d18
 800d544:	20000d30 	.word	0x20000d30
 800d548:	20000cfc 	.word	0x20000cfc
 800d54c:	20000d00 	.word	0x20000d00

0800d550 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d556:	e019      	b.n	800d58c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d558:	f000 ff78 	bl	800e44c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d55c:	4b10      	ldr	r3, [pc, #64]	; (800d5a0 <prvCheckTasksWaitingTermination+0x50>)
 800d55e:	68db      	ldr	r3, [r3, #12]
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	3304      	adds	r3, #4
 800d568:	4618      	mov	r0, r3
 800d56a:	f7fe fb1f 	bl	800bbac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d56e:	4b0d      	ldr	r3, [pc, #52]	; (800d5a4 <prvCheckTasksWaitingTermination+0x54>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	3b01      	subs	r3, #1
 800d574:	4a0b      	ldr	r2, [pc, #44]	; (800d5a4 <prvCheckTasksWaitingTermination+0x54>)
 800d576:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d578:	4b0b      	ldr	r3, [pc, #44]	; (800d5a8 <prvCheckTasksWaitingTermination+0x58>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	3b01      	subs	r3, #1
 800d57e:	4a0a      	ldr	r2, [pc, #40]	; (800d5a8 <prvCheckTasksWaitingTermination+0x58>)
 800d580:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d582:	f000 ff93 	bl	800e4ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f000 f848 	bl	800d61c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d58c:	4b06      	ldr	r3, [pc, #24]	; (800d5a8 <prvCheckTasksWaitingTermination+0x58>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d1e1      	bne.n	800d558 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d594:	bf00      	nop
 800d596:	bf00      	nop
 800d598:	3708      	adds	r7, #8
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	20000d18 	.word	0x20000d18
 800d5a4:	20000d44 	.word	0x20000d44
 800d5a8:	20000d2c 	.word	0x20000d2c

0800d5ac <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b085      	sub	sp, #20
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d5b8:	e005      	b.n	800d5c6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	3301      	adds	r3, #1
 800d5be:	607b      	str	r3, [r7, #4]
			ulCount++;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	2ba5      	cmp	r3, #165	; 0xa5
 800d5cc:	d0f5      	beq.n	800d5ba <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	089b      	lsrs	r3, r3, #2
 800d5d2:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	b29b      	uxth	r3, r3
	}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3714      	adds	r7, #20
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bc80      	pop	{r7}
 800d5e0:	4770      	bx	lr
	...

0800d5e4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b086      	sub	sp, #24
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d102      	bne.n	800d5f8 <uxTaskGetStackHighWaterMark+0x14>
 800d5f2:	4b09      	ldr	r3, [pc, #36]	; (800d618 <uxTaskGetStackHighWaterMark+0x34>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	e000      	b.n	800d5fa <uxTaskGetStackHighWaterMark+0x16>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d600:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800d602:	6938      	ldr	r0, [r7, #16]
 800d604:	f7ff ffd2 	bl	800d5ac <prvTaskCheckFreeStackSpace>
 800d608:	4603      	mov	r3, r0
 800d60a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800d60c:	68fb      	ldr	r3, [r7, #12]
	}
 800d60e:	4618      	mov	r0, r3
 800d610:	3718      	adds	r7, #24
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	20000870 	.word	0x20000870

0800d61c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d108      	bne.n	800d640 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d632:	4618      	mov	r0, r3
 800d634:	f001 f8ce 	bl	800e7d4 <vPortFree>
				vPortFree( pxTCB );
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f001 f8cb 	bl	800e7d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d63e:	e018      	b.n	800d672 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d646:	2b01      	cmp	r3, #1
 800d648:	d103      	bne.n	800d652 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f001 f8c2 	bl	800e7d4 <vPortFree>
	}
 800d650:	e00f      	b.n	800d672 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d658:	2b02      	cmp	r3, #2
 800d65a:	d00a      	beq.n	800d672 <prvDeleteTCB+0x56>
	__asm volatile
 800d65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d660:	f383 8811 	msr	BASEPRI, r3
 800d664:	f3bf 8f6f 	isb	sy
 800d668:	f3bf 8f4f 	dsb	sy
 800d66c:	60fb      	str	r3, [r7, #12]
}
 800d66e:	bf00      	nop
 800d670:	e7fe      	b.n	800d670 <prvDeleteTCB+0x54>
	}
 800d672:	bf00      	nop
 800d674:	3710      	adds	r7, #16
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
	...

0800d67c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d682:	4b0e      	ldr	r3, [pc, #56]	; (800d6bc <prvResetNextTaskUnblockTime+0x40>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d101      	bne.n	800d690 <prvResetNextTaskUnblockTime+0x14>
 800d68c:	2301      	movs	r3, #1
 800d68e:	e000      	b.n	800d692 <prvResetNextTaskUnblockTime+0x16>
 800d690:	2300      	movs	r3, #0
 800d692:	2b00      	cmp	r3, #0
 800d694:	d004      	beq.n	800d6a0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d696:	4b0a      	ldr	r3, [pc, #40]	; (800d6c0 <prvResetNextTaskUnblockTime+0x44>)
 800d698:	f04f 32ff 	mov.w	r2, #4294967295
 800d69c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d69e:	e008      	b.n	800d6b2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d6a0:	4b06      	ldr	r3, [pc, #24]	; (800d6bc <prvResetNextTaskUnblockTime+0x40>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	4a04      	ldr	r2, [pc, #16]	; (800d6c0 <prvResetNextTaskUnblockTime+0x44>)
 800d6b0:	6013      	str	r3, [r2, #0]
}
 800d6b2:	bf00      	nop
 800d6b4:	370c      	adds	r7, #12
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bc80      	pop	{r7}
 800d6ba:	4770      	bx	lr
 800d6bc:	20000cfc 	.word	0x20000cfc
 800d6c0:	20000d64 	.word	0x20000d64

0800d6c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b083      	sub	sp, #12
 800d6c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d6ca:	4b0b      	ldr	r3, [pc, #44]	; (800d6f8 <xTaskGetSchedulerState+0x34>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d102      	bne.n	800d6d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	607b      	str	r3, [r7, #4]
 800d6d6:	e008      	b.n	800d6ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6d8:	4b08      	ldr	r3, [pc, #32]	; (800d6fc <xTaskGetSchedulerState+0x38>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d102      	bne.n	800d6e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d6e0:	2302      	movs	r3, #2
 800d6e2:	607b      	str	r3, [r7, #4]
 800d6e4:	e001      	b.n	800d6ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d6ea:	687b      	ldr	r3, [r7, #4]
	}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	370c      	adds	r7, #12
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bc80      	pop	{r7}
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop
 800d6f8:	20000d50 	.word	0x20000d50
 800d6fc:	20000d6c 	.word	0x20000d6c

0800d700 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d700:	b580      	push	{r7, lr}
 800d702:	b084      	sub	sp, #16
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d70c:	2300      	movs	r3, #0
 800d70e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d056      	beq.n	800d7c4 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d71a:	4b2d      	ldr	r3, [pc, #180]	; (800d7d0 <xTaskPriorityInherit+0xd0>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d720:	429a      	cmp	r2, r3
 800d722:	d246      	bcs.n	800d7b2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	699b      	ldr	r3, [r3, #24]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	db06      	blt.n	800d73a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d72c:	4b28      	ldr	r3, [pc, #160]	; (800d7d0 <xTaskPriorityInherit+0xd0>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d732:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	6959      	ldr	r1, [r3, #20]
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d742:	4613      	mov	r3, r2
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	4413      	add	r3, r2
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	4a22      	ldr	r2, [pc, #136]	; (800d7d4 <xTaskPriorityInherit+0xd4>)
 800d74c:	4413      	add	r3, r2
 800d74e:	4299      	cmp	r1, r3
 800d750:	d101      	bne.n	800d756 <xTaskPriorityInherit+0x56>
 800d752:	2301      	movs	r3, #1
 800d754:	e000      	b.n	800d758 <xTaskPriorityInherit+0x58>
 800d756:	2300      	movs	r3, #0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d022      	beq.n	800d7a2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	3304      	adds	r3, #4
 800d760:	4618      	mov	r0, r3
 800d762:	f7fe fa23 	bl	800bbac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d766:	4b1a      	ldr	r3, [pc, #104]	; (800d7d0 <xTaskPriorityInherit+0xd0>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d774:	4b18      	ldr	r3, [pc, #96]	; (800d7d8 <xTaskPriorityInherit+0xd8>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d903      	bls.n	800d784 <xTaskPriorityInherit+0x84>
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d780:	4a15      	ldr	r2, [pc, #84]	; (800d7d8 <xTaskPriorityInherit+0xd8>)
 800d782:	6013      	str	r3, [r2, #0]
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d788:	4613      	mov	r3, r2
 800d78a:	009b      	lsls	r3, r3, #2
 800d78c:	4413      	add	r3, r2
 800d78e:	009b      	lsls	r3, r3, #2
 800d790:	4a10      	ldr	r2, [pc, #64]	; (800d7d4 <xTaskPriorityInherit+0xd4>)
 800d792:	441a      	add	r2, r3
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	3304      	adds	r3, #4
 800d798:	4619      	mov	r1, r3
 800d79a:	4610      	mov	r0, r2
 800d79c:	f7fe f9ab 	bl	800baf6 <vListInsertEnd>
 800d7a0:	e004      	b.n	800d7ac <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d7a2:	4b0b      	ldr	r3, [pc, #44]	; (800d7d0 <xTaskPriorityInherit+0xd0>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	60fb      	str	r3, [r7, #12]
 800d7b0:	e008      	b.n	800d7c4 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d7b6:	4b06      	ldr	r3, [pc, #24]	; (800d7d0 <xTaskPriorityInherit+0xd0>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d201      	bcs.n	800d7c4 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
	}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	20000870 	.word	0x20000870
 800d7d4:	20000874 	.word	0x20000874
 800d7d8:	20000d4c 	.word	0x20000d4c

0800d7dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b086      	sub	sp, #24
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d056      	beq.n	800d8a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d7f2:	4b2e      	ldr	r3, [pc, #184]	; (800d8ac <xTaskPriorityDisinherit+0xd0>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	693a      	ldr	r2, [r7, #16]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d00a      	beq.n	800d812 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d800:	f383 8811 	msr	BASEPRI, r3
 800d804:	f3bf 8f6f 	isb	sy
 800d808:	f3bf 8f4f 	dsb	sy
 800d80c:	60fb      	str	r3, [r7, #12]
}
 800d80e:	bf00      	nop
 800d810:	e7fe      	b.n	800d810 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d816:	2b00      	cmp	r3, #0
 800d818:	d10a      	bne.n	800d830 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81e:	f383 8811 	msr	BASEPRI, r3
 800d822:	f3bf 8f6f 	isb	sy
 800d826:	f3bf 8f4f 	dsb	sy
 800d82a:	60bb      	str	r3, [r7, #8]
}
 800d82c:	bf00      	nop
 800d82e:	e7fe      	b.n	800d82e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d834:	1e5a      	subs	r2, r3, #1
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d842:	429a      	cmp	r2, r3
 800d844:	d02c      	beq.n	800d8a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d128      	bne.n	800d8a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	3304      	adds	r3, #4
 800d852:	4618      	mov	r0, r3
 800d854:	f7fe f9aa 	bl	800bbac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d864:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d870:	4b0f      	ldr	r3, [pc, #60]	; (800d8b0 <xTaskPriorityDisinherit+0xd4>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	429a      	cmp	r2, r3
 800d876:	d903      	bls.n	800d880 <xTaskPriorityDisinherit+0xa4>
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87c:	4a0c      	ldr	r2, [pc, #48]	; (800d8b0 <xTaskPriorityDisinherit+0xd4>)
 800d87e:	6013      	str	r3, [r2, #0]
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d884:	4613      	mov	r3, r2
 800d886:	009b      	lsls	r3, r3, #2
 800d888:	4413      	add	r3, r2
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	4a09      	ldr	r2, [pc, #36]	; (800d8b4 <xTaskPriorityDisinherit+0xd8>)
 800d88e:	441a      	add	r2, r3
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	3304      	adds	r3, #4
 800d894:	4619      	mov	r1, r3
 800d896:	4610      	mov	r0, r2
 800d898:	f7fe f92d 	bl	800baf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d89c:	2301      	movs	r3, #1
 800d89e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d8a0:	697b      	ldr	r3, [r7, #20]
	}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3718      	adds	r7, #24
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	20000870 	.word	0x20000870
 800d8b0:	20000d4c 	.word	0x20000d4c
 800d8b4:	20000874 	.word	0x20000874

0800d8b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b088      	sub	sp, #32
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d06f      	beq.n	800d9b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d10a      	bne.n	800d8ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8dc:	f383 8811 	msr	BASEPRI, r3
 800d8e0:	f3bf 8f6f 	isb	sy
 800d8e4:	f3bf 8f4f 	dsb	sy
 800d8e8:	60fb      	str	r3, [r7, #12]
}
 800d8ea:	bf00      	nop
 800d8ec:	e7fe      	b.n	800d8ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8f2:	683a      	ldr	r2, [r7, #0]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d902      	bls.n	800d8fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	61fb      	str	r3, [r7, #28]
 800d8fc:	e002      	b.n	800d904 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d8fe:	69bb      	ldr	r3, [r7, #24]
 800d900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d902:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d904:	69bb      	ldr	r3, [r7, #24]
 800d906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d908:	69fa      	ldr	r2, [r7, #28]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d050      	beq.n	800d9b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d90e:	69bb      	ldr	r3, [r7, #24]
 800d910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d912:	697a      	ldr	r2, [r7, #20]
 800d914:	429a      	cmp	r2, r3
 800d916:	d14b      	bne.n	800d9b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d918:	4b27      	ldr	r3, [pc, #156]	; (800d9b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	69ba      	ldr	r2, [r7, #24]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d10a      	bne.n	800d938 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d926:	f383 8811 	msr	BASEPRI, r3
 800d92a:	f3bf 8f6f 	isb	sy
 800d92e:	f3bf 8f4f 	dsb	sy
 800d932:	60bb      	str	r3, [r7, #8]
}
 800d934:	bf00      	nop
 800d936:	e7fe      	b.n	800d936 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d93e:	69bb      	ldr	r3, [r7, #24]
 800d940:	69fa      	ldr	r2, [r7, #28]
 800d942:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d944:	69bb      	ldr	r3, [r7, #24]
 800d946:	699b      	ldr	r3, [r3, #24]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	db04      	blt.n	800d956 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d956:	69bb      	ldr	r3, [r7, #24]
 800d958:	6959      	ldr	r1, [r3, #20]
 800d95a:	693a      	ldr	r2, [r7, #16]
 800d95c:	4613      	mov	r3, r2
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	4413      	add	r3, r2
 800d962:	009b      	lsls	r3, r3, #2
 800d964:	4a15      	ldr	r2, [pc, #84]	; (800d9bc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d966:	4413      	add	r3, r2
 800d968:	4299      	cmp	r1, r3
 800d96a:	d101      	bne.n	800d970 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800d96c:	2301      	movs	r3, #1
 800d96e:	e000      	b.n	800d972 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800d970:	2300      	movs	r3, #0
 800d972:	2b00      	cmp	r3, #0
 800d974:	d01c      	beq.n	800d9b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	3304      	adds	r3, #4
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7fe f916 	bl	800bbac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d980:	69bb      	ldr	r3, [r7, #24]
 800d982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d984:	4b0e      	ldr	r3, [pc, #56]	; (800d9c0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d903      	bls.n	800d994 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800d98c:	69bb      	ldr	r3, [r7, #24]
 800d98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d990:	4a0b      	ldr	r2, [pc, #44]	; (800d9c0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d992:	6013      	str	r3, [r2, #0]
 800d994:	69bb      	ldr	r3, [r7, #24]
 800d996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d998:	4613      	mov	r3, r2
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	4413      	add	r3, r2
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	4a06      	ldr	r2, [pc, #24]	; (800d9bc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d9a2:	441a      	add	r2, r3
 800d9a4:	69bb      	ldr	r3, [r7, #24]
 800d9a6:	3304      	adds	r3, #4
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	4610      	mov	r0, r2
 800d9ac:	f7fe f8a3 	bl	800baf6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d9b0:	bf00      	nop
 800d9b2:	3720      	adds	r7, #32
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	20000870 	.word	0x20000870
 800d9bc:	20000874 	.word	0x20000874
 800d9c0:	20000d4c 	.word	0x20000d4c

0800d9c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800d9c4:	b480      	push	{r7}
 800d9c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d9c8:	4b07      	ldr	r3, [pc, #28]	; (800d9e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d004      	beq.n	800d9da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d9d0:	4b05      	ldr	r3, [pc, #20]	; (800d9e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d9d6:	3201      	adds	r2, #1
 800d9d8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d9da:	4b03      	ldr	r3, [pc, #12]	; (800d9e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
	}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bc80      	pop	{r7}
 800d9e4:	4770      	bx	lr
 800d9e6:	bf00      	nop
 800d9e8:	20000870 	.word	0x20000870

0800d9ec <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800d9f6:	f000 fd29 	bl	800e44c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800d9fa:	4b1e      	ldr	r3, [pc, #120]	; (800da74 <ulTaskNotifyTake+0x88>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da00:	2b00      	cmp	r3, #0
 800da02:	d113      	bne.n	800da2c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800da04:	4b1b      	ldr	r3, [pc, #108]	; (800da74 <ulTaskNotifyTake+0x88>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2201      	movs	r2, #1
 800da0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00b      	beq.n	800da2c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800da14:	2101      	movs	r1, #1
 800da16:	6838      	ldr	r0, [r7, #0]
 800da18:	f000 f8c4 	bl	800dba4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800da1c:	4b16      	ldr	r3, [pc, #88]	; (800da78 <ulTaskNotifyTake+0x8c>)
 800da1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da22:	601a      	str	r2, [r3, #0]
 800da24:	f3bf 8f4f 	dsb	sy
 800da28:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800da2c:	f000 fd3e 	bl	800e4ac <vPortExitCritical>

		taskENTER_CRITICAL();
 800da30:	f000 fd0c 	bl	800e44c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800da34:	4b0f      	ldr	r3, [pc, #60]	; (800da74 <ulTaskNotifyTake+0x88>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da3a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00c      	beq.n	800da5c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d004      	beq.n	800da52 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800da48:	4b0a      	ldr	r3, [pc, #40]	; (800da74 <ulTaskNotifyTake+0x88>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2200      	movs	r2, #0
 800da4e:	655a      	str	r2, [r3, #84]	; 0x54
 800da50:	e004      	b.n	800da5c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800da52:	4b08      	ldr	r3, [pc, #32]	; (800da74 <ulTaskNotifyTake+0x88>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	68fa      	ldr	r2, [r7, #12]
 800da58:	3a01      	subs	r2, #1
 800da5a:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800da5c:	4b05      	ldr	r3, [pc, #20]	; (800da74 <ulTaskNotifyTake+0x88>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2200      	movs	r2, #0
 800da62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800da66:	f000 fd21 	bl	800e4ac <vPortExitCritical>

		return ulReturn;
 800da6a:	68fb      	ldr	r3, [r7, #12]
	}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3710      	adds	r7, #16
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	20000870 	.word	0x20000870
 800da78:	e000ed04 	.word	0xe000ed04

0800da7c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b08a      	sub	sp, #40	; 0x28
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d10a      	bne.n	800daa2 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800da8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da90:	f383 8811 	msr	BASEPRI, r3
 800da94:	f3bf 8f6f 	isb	sy
 800da98:	f3bf 8f4f 	dsb	sy
 800da9c:	61bb      	str	r3, [r7, #24]
}
 800da9e:	bf00      	nop
 800daa0:	e7fe      	b.n	800daa0 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800daa2:	f000 fd95 	bl	800e5d0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800daaa:	f3ef 8211 	mrs	r2, BASEPRI
 800daae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab2:	f383 8811 	msr	BASEPRI, r3
 800dab6:	f3bf 8f6f 	isb	sy
 800daba:	f3bf 8f4f 	dsb	sy
 800dabe:	617a      	str	r2, [r7, #20]
 800dac0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800dac2:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dac4:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800dac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800dacc:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800dace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad0:	2202      	movs	r2, #2
 800dad2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800dad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dada:	1c5a      	adds	r2, r3, #1
 800dadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dade:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800dae0:	7ffb      	ldrb	r3, [r7, #31]
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d147      	bne.n	800db76 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800dae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daea:	2b00      	cmp	r3, #0
 800daec:	d00a      	beq.n	800db04 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 800daee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf2:	f383 8811 	msr	BASEPRI, r3
 800daf6:	f3bf 8f6f 	isb	sy
 800dafa:	f3bf 8f4f 	dsb	sy
 800dafe:	60fb      	str	r3, [r7, #12]
}
 800db00:	bf00      	nop
 800db02:	e7fe      	b.n	800db02 <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db04:	4b21      	ldr	r3, [pc, #132]	; (800db8c <vTaskNotifyGiveFromISR+0x110>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d11d      	bne.n	800db48 <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0e:	3304      	adds	r3, #4
 800db10:	4618      	mov	r0, r3
 800db12:	f7fe f84b 	bl	800bbac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800db16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db1a:	4b1d      	ldr	r3, [pc, #116]	; (800db90 <vTaskNotifyGiveFromISR+0x114>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d903      	bls.n	800db2a <vTaskNotifyGiveFromISR+0xae>
 800db22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db26:	4a1a      	ldr	r2, [pc, #104]	; (800db90 <vTaskNotifyGiveFromISR+0x114>)
 800db28:	6013      	str	r3, [r2, #0]
 800db2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db2e:	4613      	mov	r3, r2
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	4413      	add	r3, r2
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	4a17      	ldr	r2, [pc, #92]	; (800db94 <vTaskNotifyGiveFromISR+0x118>)
 800db38:	441a      	add	r2, r3
 800db3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3c:	3304      	adds	r3, #4
 800db3e:	4619      	mov	r1, r3
 800db40:	4610      	mov	r0, r2
 800db42:	f7fd ffd8 	bl	800baf6 <vListInsertEnd>
 800db46:	e005      	b.n	800db54 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800db48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4a:	3318      	adds	r3, #24
 800db4c:	4619      	mov	r1, r3
 800db4e:	4812      	ldr	r0, [pc, #72]	; (800db98 <vTaskNotifyGiveFromISR+0x11c>)
 800db50:	f7fd ffd1 	bl	800baf6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db58:	4b10      	ldr	r3, [pc, #64]	; (800db9c <vTaskNotifyGiveFromISR+0x120>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db5e:	429a      	cmp	r2, r3
 800db60:	d909      	bls.n	800db76 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d003      	beq.n	800db70 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	2201      	movs	r2, #1
 800db6c:	601a      	str	r2, [r3, #0]
 800db6e:	e002      	b.n	800db76 <vTaskNotifyGiveFromISR+0xfa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800db70:	4b0b      	ldr	r3, [pc, #44]	; (800dba0 <vTaskNotifyGiveFromISR+0x124>)
 800db72:	2201      	movs	r2, #1
 800db74:	601a      	str	r2, [r3, #0]
 800db76:	6a3b      	ldr	r3, [r7, #32]
 800db78:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	f383 8811 	msr	BASEPRI, r3
}
 800db80:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800db82:	bf00      	nop
 800db84:	3728      	adds	r7, #40	; 0x28
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
 800db8a:	bf00      	nop
 800db8c:	20000d6c 	.word	0x20000d6c
 800db90:	20000d4c 	.word	0x20000d4c
 800db94:	20000874 	.word	0x20000874
 800db98:	20000d04 	.word	0x20000d04
 800db9c:	20000870 	.word	0x20000870
 800dba0:	20000d58 	.word	0x20000d58

0800dba4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dbae:	4b21      	ldr	r3, [pc, #132]	; (800dc34 <prvAddCurrentTaskToDelayedList+0x90>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbb4:	4b20      	ldr	r3, [pc, #128]	; (800dc38 <prvAddCurrentTaskToDelayedList+0x94>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	3304      	adds	r3, #4
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7fd fff6 	bl	800bbac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbc6:	d10a      	bne.n	800dbde <prvAddCurrentTaskToDelayedList+0x3a>
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d007      	beq.n	800dbde <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbce:	4b1a      	ldr	r3, [pc, #104]	; (800dc38 <prvAddCurrentTaskToDelayedList+0x94>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	3304      	adds	r3, #4
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	4819      	ldr	r0, [pc, #100]	; (800dc3c <prvAddCurrentTaskToDelayedList+0x98>)
 800dbd8:	f7fd ff8d 	bl	800baf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dbdc:	e026      	b.n	800dc2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dbde:	68fa      	ldr	r2, [r7, #12]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	4413      	add	r3, r2
 800dbe4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dbe6:	4b14      	ldr	r3, [pc, #80]	; (800dc38 <prvAddCurrentTaskToDelayedList+0x94>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	68ba      	ldr	r2, [r7, #8]
 800dbec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dbee:	68ba      	ldr	r2, [r7, #8]
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d209      	bcs.n	800dc0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbf6:	4b12      	ldr	r3, [pc, #72]	; (800dc40 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dbf8:	681a      	ldr	r2, [r3, #0]
 800dbfa:	4b0f      	ldr	r3, [pc, #60]	; (800dc38 <prvAddCurrentTaskToDelayedList+0x94>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	3304      	adds	r3, #4
 800dc00:	4619      	mov	r1, r3
 800dc02:	4610      	mov	r0, r2
 800dc04:	f7fd ff9a 	bl	800bb3c <vListInsert>
}
 800dc08:	e010      	b.n	800dc2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc0a:	4b0e      	ldr	r3, [pc, #56]	; (800dc44 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dc0c:	681a      	ldr	r2, [r3, #0]
 800dc0e:	4b0a      	ldr	r3, [pc, #40]	; (800dc38 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	3304      	adds	r3, #4
 800dc14:	4619      	mov	r1, r3
 800dc16:	4610      	mov	r0, r2
 800dc18:	f7fd ff90 	bl	800bb3c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc1c:	4b0a      	ldr	r3, [pc, #40]	; (800dc48 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	68ba      	ldr	r2, [r7, #8]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d202      	bcs.n	800dc2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dc26:	4a08      	ldr	r2, [pc, #32]	; (800dc48 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	6013      	str	r3, [r2, #0]
}
 800dc2c:	bf00      	nop
 800dc2e:	3710      	adds	r7, #16
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}
 800dc34:	20000d48 	.word	0x20000d48
 800dc38:	20000870 	.word	0x20000870
 800dc3c:	20000d30 	.word	0x20000d30
 800dc40:	20000d00 	.word	0x20000d00
 800dc44:	20000cfc 	.word	0x20000cfc
 800dc48:	20000d64 	.word	0x20000d64

0800dc4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b08a      	sub	sp, #40	; 0x28
 800dc50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dc52:	2300      	movs	r3, #0
 800dc54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dc56:	f000 facb 	bl	800e1f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dc5a:	4b1c      	ldr	r3, [pc, #112]	; (800dccc <xTimerCreateTimerTask+0x80>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d021      	beq.n	800dca6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dc62:	2300      	movs	r3, #0
 800dc64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dc66:	2300      	movs	r3, #0
 800dc68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dc6a:	1d3a      	adds	r2, r7, #4
 800dc6c:	f107 0108 	add.w	r1, r7, #8
 800dc70:	f107 030c 	add.w	r3, r7, #12
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fd fef9 	bl	800ba6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dc7a:	6879      	ldr	r1, [r7, #4]
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	68fa      	ldr	r2, [r7, #12]
 800dc80:	9202      	str	r2, [sp, #8]
 800dc82:	9301      	str	r3, [sp, #4]
 800dc84:	2302      	movs	r3, #2
 800dc86:	9300      	str	r3, [sp, #0]
 800dc88:	2300      	movs	r3, #0
 800dc8a:	460a      	mov	r2, r1
 800dc8c:	4910      	ldr	r1, [pc, #64]	; (800dcd0 <xTimerCreateTimerTask+0x84>)
 800dc8e:	4811      	ldr	r0, [pc, #68]	; (800dcd4 <xTimerCreateTimerTask+0x88>)
 800dc90:	f7fe fe4a 	bl	800c928 <xTaskCreateStatic>
 800dc94:	4603      	mov	r3, r0
 800dc96:	4a10      	ldr	r2, [pc, #64]	; (800dcd8 <xTimerCreateTimerTask+0x8c>)
 800dc98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dc9a:	4b0f      	ldr	r3, [pc, #60]	; (800dcd8 <xTimerCreateTimerTask+0x8c>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d001      	beq.n	800dca6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dca2:	2301      	movs	r3, #1
 800dca4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d10a      	bne.n	800dcc2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb0:	f383 8811 	msr	BASEPRI, r3
 800dcb4:	f3bf 8f6f 	isb	sy
 800dcb8:	f3bf 8f4f 	dsb	sy
 800dcbc:	613b      	str	r3, [r7, #16]
}
 800dcbe:	bf00      	nop
 800dcc0:	e7fe      	b.n	800dcc0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dcc2:	697b      	ldr	r3, [r7, #20]
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3718      	adds	r7, #24
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	20000da0 	.word	0x20000da0
 800dcd0:	0800f694 	.word	0x0800f694
 800dcd4:	0800ddf9 	.word	0x0800ddf9
 800dcd8:	20000da4 	.word	0x20000da4

0800dcdc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b08a      	sub	sp, #40	; 0x28
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	607a      	str	r2, [r7, #4]
 800dce8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dcea:	2300      	movs	r3, #0
 800dcec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d10a      	bne.n	800dd0a <xTimerGenericCommand+0x2e>
	__asm volatile
 800dcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf8:	f383 8811 	msr	BASEPRI, r3
 800dcfc:	f3bf 8f6f 	isb	sy
 800dd00:	f3bf 8f4f 	dsb	sy
 800dd04:	623b      	str	r3, [r7, #32]
}
 800dd06:	bf00      	nop
 800dd08:	e7fe      	b.n	800dd08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dd0a:	4b1a      	ldr	r3, [pc, #104]	; (800dd74 <xTimerGenericCommand+0x98>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d02a      	beq.n	800dd68 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	2b05      	cmp	r3, #5
 800dd22:	dc18      	bgt.n	800dd56 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dd24:	f7ff fcce 	bl	800d6c4 <xTaskGetSchedulerState>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b02      	cmp	r3, #2
 800dd2c:	d109      	bne.n	800dd42 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dd2e:	4b11      	ldr	r3, [pc, #68]	; (800dd74 <xTimerGenericCommand+0x98>)
 800dd30:	6818      	ldr	r0, [r3, #0]
 800dd32:	f107 0110 	add.w	r1, r7, #16
 800dd36:	2300      	movs	r3, #0
 800dd38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd3a:	f7fe f8ef 	bl	800bf1c <xQueueGenericSend>
 800dd3e:	6278      	str	r0, [r7, #36]	; 0x24
 800dd40:	e012      	b.n	800dd68 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dd42:	4b0c      	ldr	r3, [pc, #48]	; (800dd74 <xTimerGenericCommand+0x98>)
 800dd44:	6818      	ldr	r0, [r3, #0]
 800dd46:	f107 0110 	add.w	r1, r7, #16
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	f7fe f8e5 	bl	800bf1c <xQueueGenericSend>
 800dd52:	6278      	str	r0, [r7, #36]	; 0x24
 800dd54:	e008      	b.n	800dd68 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dd56:	4b07      	ldr	r3, [pc, #28]	; (800dd74 <xTimerGenericCommand+0x98>)
 800dd58:	6818      	ldr	r0, [r3, #0]
 800dd5a:	f107 0110 	add.w	r1, r7, #16
 800dd5e:	2300      	movs	r3, #0
 800dd60:	683a      	ldr	r2, [r7, #0]
 800dd62:	f7fe f9d9 	bl	800c118 <xQueueGenericSendFromISR>
 800dd66:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3728      	adds	r7, #40	; 0x28
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	20000da0 	.word	0x20000da0

0800dd78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b088      	sub	sp, #32
 800dd7c:	af02      	add	r7, sp, #8
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd82:	4b1c      	ldr	r3, [pc, #112]	; (800ddf4 <prvProcessExpiredTimer+0x7c>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	68db      	ldr	r3, [r3, #12]
 800dd8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	3304      	adds	r3, #4
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7fd ff0b 	bl	800bbac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	69db      	ldr	r3, [r3, #28]
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d122      	bne.n	800dde4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	699a      	ldr	r2, [r3, #24]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	18d1      	adds	r1, r2, r3
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	683a      	ldr	r2, [r7, #0]
 800ddaa:	6978      	ldr	r0, [r7, #20]
 800ddac:	f000 f8c8 	bl	800df40 <prvInsertTimerInActiveList>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d016      	beq.n	800dde4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	9300      	str	r3, [sp, #0]
 800ddba:	2300      	movs	r3, #0
 800ddbc:	687a      	ldr	r2, [r7, #4]
 800ddbe:	2100      	movs	r1, #0
 800ddc0:	6978      	ldr	r0, [r7, #20]
 800ddc2:	f7ff ff8b 	bl	800dcdc <xTimerGenericCommand>
 800ddc6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d10a      	bne.n	800dde4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800ddce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd2:	f383 8811 	msr	BASEPRI, r3
 800ddd6:	f3bf 8f6f 	isb	sy
 800ddda:	f3bf 8f4f 	dsb	sy
 800ddde:	60fb      	str	r3, [r7, #12]
}
 800dde0:	bf00      	nop
 800dde2:	e7fe      	b.n	800dde2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dde4:	697b      	ldr	r3, [r7, #20]
 800dde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde8:	6978      	ldr	r0, [r7, #20]
 800ddea:	4798      	blx	r3
}
 800ddec:	bf00      	nop
 800ddee:	3718      	adds	r7, #24
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	20000d98 	.word	0x20000d98

0800ddf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de00:	f107 0308 	add.w	r3, r7, #8
 800de04:	4618      	mov	r0, r3
 800de06:	f000 f857 	bl	800deb8 <prvGetNextExpireTime>
 800de0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	4619      	mov	r1, r3
 800de10:	68f8      	ldr	r0, [r7, #12]
 800de12:	f000 f803 	bl	800de1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800de16:	f000 f8d5 	bl	800dfc4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de1a:	e7f1      	b.n	800de00 <prvTimerTask+0x8>

0800de1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800de26:	f7ff f82f 	bl	800ce88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800de2a:	f107 0308 	add.w	r3, r7, #8
 800de2e:	4618      	mov	r0, r3
 800de30:	f000 f866 	bl	800df00 <prvSampleTimeNow>
 800de34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d130      	bne.n	800de9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d10a      	bne.n	800de58 <prvProcessTimerOrBlockTask+0x3c>
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	429a      	cmp	r2, r3
 800de48:	d806      	bhi.n	800de58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800de4a:	f7ff f82b 	bl	800cea4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800de4e:	68f9      	ldr	r1, [r7, #12]
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f7ff ff91 	bl	800dd78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800de56:	e024      	b.n	800dea2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d008      	beq.n	800de70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800de5e:	4b13      	ldr	r3, [pc, #76]	; (800deac <prvProcessTimerOrBlockTask+0x90>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	2b00      	cmp	r3, #0
 800de66:	bf0c      	ite	eq
 800de68:	2301      	moveq	r3, #1
 800de6a:	2300      	movne	r3, #0
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800de70:	4b0f      	ldr	r3, [pc, #60]	; (800deb0 <prvProcessTimerOrBlockTask+0x94>)
 800de72:	6818      	ldr	r0, [r3, #0]
 800de74:	687a      	ldr	r2, [r7, #4]
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	1ad3      	subs	r3, r2, r3
 800de7a:	683a      	ldr	r2, [r7, #0]
 800de7c:	4619      	mov	r1, r3
 800de7e:	f7fe fd1f 	bl	800c8c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800de82:	f7ff f80f 	bl	800cea4 <xTaskResumeAll>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d10a      	bne.n	800dea2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800de8c:	4b09      	ldr	r3, [pc, #36]	; (800deb4 <prvProcessTimerOrBlockTask+0x98>)
 800de8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de92:	601a      	str	r2, [r3, #0]
 800de94:	f3bf 8f4f 	dsb	sy
 800de98:	f3bf 8f6f 	isb	sy
}
 800de9c:	e001      	b.n	800dea2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800de9e:	f7ff f801 	bl	800cea4 <xTaskResumeAll>
}
 800dea2:	bf00      	nop
 800dea4:	3710      	adds	r7, #16
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
 800deaa:	bf00      	nop
 800deac:	20000d9c 	.word	0x20000d9c
 800deb0:	20000da0 	.word	0x20000da0
 800deb4:	e000ed04 	.word	0xe000ed04

0800deb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800deb8:	b480      	push	{r7}
 800deba:	b085      	sub	sp, #20
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dec0:	4b0e      	ldr	r3, [pc, #56]	; (800defc <prvGetNextExpireTime+0x44>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	bf0c      	ite	eq
 800deca:	2301      	moveq	r3, #1
 800decc:	2300      	movne	r3, #0
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	461a      	mov	r2, r3
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d105      	bne.n	800deea <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dede:	4b07      	ldr	r3, [pc, #28]	; (800defc <prvGetNextExpireTime+0x44>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	68db      	ldr	r3, [r3, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	60fb      	str	r3, [r7, #12]
 800dee8:	e001      	b.n	800deee <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800deea:	2300      	movs	r3, #0
 800deec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800deee:	68fb      	ldr	r3, [r7, #12]
}
 800def0:	4618      	mov	r0, r3
 800def2:	3714      	adds	r7, #20
 800def4:	46bd      	mov	sp, r7
 800def6:	bc80      	pop	{r7}
 800def8:	4770      	bx	lr
 800defa:	bf00      	nop
 800defc:	20000d98 	.word	0x20000d98

0800df00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800df08:	f7ff f86a 	bl	800cfe0 <xTaskGetTickCount>
 800df0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800df0e:	4b0b      	ldr	r3, [pc, #44]	; (800df3c <prvSampleTimeNow+0x3c>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	68fa      	ldr	r2, [r7, #12]
 800df14:	429a      	cmp	r2, r3
 800df16:	d205      	bcs.n	800df24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800df18:	f000 f908 	bl	800e12c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2201      	movs	r2, #1
 800df20:	601a      	str	r2, [r3, #0]
 800df22:	e002      	b.n	800df2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2200      	movs	r2, #0
 800df28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800df2a:	4a04      	ldr	r2, [pc, #16]	; (800df3c <prvSampleTimeNow+0x3c>)
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800df30:	68fb      	ldr	r3, [r7, #12]
}
 800df32:	4618      	mov	r0, r3
 800df34:	3710      	adds	r7, #16
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
 800df3a:	bf00      	nop
 800df3c:	20000da8 	.word	0x20000da8

0800df40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b086      	sub	sp, #24
 800df44:	af00      	add	r7, sp, #0
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	607a      	str	r2, [r7, #4]
 800df4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800df4e:	2300      	movs	r3, #0
 800df50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	68ba      	ldr	r2, [r7, #8]
 800df56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	68fa      	ldr	r2, [r7, #12]
 800df5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800df5e:	68ba      	ldr	r2, [r7, #8]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	429a      	cmp	r2, r3
 800df64:	d812      	bhi.n	800df8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df66:	687a      	ldr	r2, [r7, #4]
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	1ad2      	subs	r2, r2, r3
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	699b      	ldr	r3, [r3, #24]
 800df70:	429a      	cmp	r2, r3
 800df72:	d302      	bcc.n	800df7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800df74:	2301      	movs	r3, #1
 800df76:	617b      	str	r3, [r7, #20]
 800df78:	e01b      	b.n	800dfb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800df7a:	4b10      	ldr	r3, [pc, #64]	; (800dfbc <prvInsertTimerInActiveList+0x7c>)
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	3304      	adds	r3, #4
 800df82:	4619      	mov	r1, r3
 800df84:	4610      	mov	r0, r2
 800df86:	f7fd fdd9 	bl	800bb3c <vListInsert>
 800df8a:	e012      	b.n	800dfb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800df8c:	687a      	ldr	r2, [r7, #4]
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	429a      	cmp	r2, r3
 800df92:	d206      	bcs.n	800dfa2 <prvInsertTimerInActiveList+0x62>
 800df94:	68ba      	ldr	r2, [r7, #8]
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	429a      	cmp	r2, r3
 800df9a:	d302      	bcc.n	800dfa2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800df9c:	2301      	movs	r3, #1
 800df9e:	617b      	str	r3, [r7, #20]
 800dfa0:	e007      	b.n	800dfb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dfa2:	4b07      	ldr	r3, [pc, #28]	; (800dfc0 <prvInsertTimerInActiveList+0x80>)
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	3304      	adds	r3, #4
 800dfaa:	4619      	mov	r1, r3
 800dfac:	4610      	mov	r0, r2
 800dfae:	f7fd fdc5 	bl	800bb3c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dfb2:	697b      	ldr	r3, [r7, #20]
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3718      	adds	r7, #24
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	20000d9c 	.word	0x20000d9c
 800dfc0:	20000d98 	.word	0x20000d98

0800dfc4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b08e      	sub	sp, #56	; 0x38
 800dfc8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dfca:	e09d      	b.n	800e108 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	da18      	bge.n	800e004 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dfd2:	1d3b      	adds	r3, r7, #4
 800dfd4:	3304      	adds	r3, #4
 800dfd6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d10a      	bne.n	800dff4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe2:	f383 8811 	msr	BASEPRI, r3
 800dfe6:	f3bf 8f6f 	isb	sy
 800dfea:	f3bf 8f4f 	dsb	sy
 800dfee:	61fb      	str	r3, [r7, #28]
}
 800dff0:	bf00      	nop
 800dff2:	e7fe      	b.n	800dff2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dffa:	6850      	ldr	r0, [r2, #4]
 800dffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dffe:	6892      	ldr	r2, [r2, #8]
 800e000:	4611      	mov	r1, r2
 800e002:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	db7d      	blt.n	800e106 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e010:	695b      	ldr	r3, [r3, #20]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d004      	beq.n	800e020 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e018:	3304      	adds	r3, #4
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7fd fdc6 	bl	800bbac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e020:	463b      	mov	r3, r7
 800e022:	4618      	mov	r0, r3
 800e024:	f7ff ff6c 	bl	800df00 <prvSampleTimeNow>
 800e028:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2b09      	cmp	r3, #9
 800e02e:	d86b      	bhi.n	800e108 <prvProcessReceivedCommands+0x144>
 800e030:	a201      	add	r2, pc, #4	; (adr r2, 800e038 <prvProcessReceivedCommands+0x74>)
 800e032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e036:	bf00      	nop
 800e038:	0800e061 	.word	0x0800e061
 800e03c:	0800e061 	.word	0x0800e061
 800e040:	0800e061 	.word	0x0800e061
 800e044:	0800e109 	.word	0x0800e109
 800e048:	0800e0bd 	.word	0x0800e0bd
 800e04c:	0800e0f5 	.word	0x0800e0f5
 800e050:	0800e061 	.word	0x0800e061
 800e054:	0800e061 	.word	0x0800e061
 800e058:	0800e109 	.word	0x0800e109
 800e05c:	0800e0bd 	.word	0x0800e0bd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e060:	68ba      	ldr	r2, [r7, #8]
 800e062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e064:	699b      	ldr	r3, [r3, #24]
 800e066:	18d1      	adds	r1, r2, r3
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e06c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e06e:	f7ff ff67 	bl	800df40 <prvInsertTimerInActiveList>
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d047      	beq.n	800e108 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e07c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e07e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e082:	69db      	ldr	r3, [r3, #28]
 800e084:	2b01      	cmp	r3, #1
 800e086:	d13f      	bne.n	800e108 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e088:	68ba      	ldr	r2, [r7, #8]
 800e08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e08c:	699b      	ldr	r3, [r3, #24]
 800e08e:	441a      	add	r2, r3
 800e090:	2300      	movs	r3, #0
 800e092:	9300      	str	r3, [sp, #0]
 800e094:	2300      	movs	r3, #0
 800e096:	2100      	movs	r1, #0
 800e098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e09a:	f7ff fe1f 	bl	800dcdc <xTimerGenericCommand>
 800e09e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e0a0:	6a3b      	ldr	r3, [r7, #32]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d130      	bne.n	800e108 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800e0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0aa:	f383 8811 	msr	BASEPRI, r3
 800e0ae:	f3bf 8f6f 	isb	sy
 800e0b2:	f3bf 8f4f 	dsb	sy
 800e0b6:	61bb      	str	r3, [r7, #24]
}
 800e0b8:	bf00      	nop
 800e0ba:	e7fe      	b.n	800e0ba <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e0bc:	68ba      	ldr	r2, [r7, #8]
 800e0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c4:	699b      	ldr	r3, [r3, #24]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d10a      	bne.n	800e0e0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800e0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ce:	f383 8811 	msr	BASEPRI, r3
 800e0d2:	f3bf 8f6f 	isb	sy
 800e0d6:	f3bf 8f4f 	dsb	sy
 800e0da:	617b      	str	r3, [r7, #20]
}
 800e0dc:	bf00      	nop
 800e0de:	e7fe      	b.n	800e0de <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e2:	699a      	ldr	r2, [r3, #24]
 800e0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e6:	18d1      	adds	r1, r2, r3
 800e0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0ee:	f7ff ff27 	bl	800df40 <prvInsertTimerInActiveList>
					break;
 800e0f2:	e009      	b.n	800e108 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d104      	bne.n	800e108 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800e0fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e100:	f000 fb68 	bl	800e7d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e104:	e000      	b.n	800e108 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e106:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e108:	4b07      	ldr	r3, [pc, #28]	; (800e128 <prvProcessReceivedCommands+0x164>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	1d39      	adds	r1, r7, #4
 800e10e:	2200      	movs	r2, #0
 800e110:	4618      	mov	r0, r3
 800e112:	f7fe f899 	bl	800c248 <xQueueReceive>
 800e116:	4603      	mov	r3, r0
 800e118:	2b00      	cmp	r3, #0
 800e11a:	f47f af57 	bne.w	800dfcc <prvProcessReceivedCommands+0x8>
	}
}
 800e11e:	bf00      	nop
 800e120:	bf00      	nop
 800e122:	3730      	adds	r7, #48	; 0x30
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}
 800e128:	20000da0 	.word	0x20000da0

0800e12c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b088      	sub	sp, #32
 800e130:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e132:	e045      	b.n	800e1c0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e134:	4b2c      	ldr	r3, [pc, #176]	; (800e1e8 <prvSwitchTimerLists+0xbc>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	68db      	ldr	r3, [r3, #12]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e13e:	4b2a      	ldr	r3, [pc, #168]	; (800e1e8 <prvSwitchTimerLists+0xbc>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	68db      	ldr	r3, [r3, #12]
 800e144:	68db      	ldr	r3, [r3, #12]
 800e146:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	3304      	adds	r3, #4
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7fd fd2d 	bl	800bbac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e156:	68f8      	ldr	r0, [r7, #12]
 800e158:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	69db      	ldr	r3, [r3, #28]
 800e15e:	2b01      	cmp	r3, #1
 800e160:	d12e      	bne.n	800e1c0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	699b      	ldr	r3, [r3, #24]
 800e166:	693a      	ldr	r2, [r7, #16]
 800e168:	4413      	add	r3, r2
 800e16a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e16c:	68ba      	ldr	r2, [r7, #8]
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	429a      	cmp	r2, r3
 800e172:	d90e      	bls.n	800e192 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	68ba      	ldr	r2, [r7, #8]
 800e178:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	68fa      	ldr	r2, [r7, #12]
 800e17e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e180:	4b19      	ldr	r3, [pc, #100]	; (800e1e8 <prvSwitchTimerLists+0xbc>)
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	3304      	adds	r3, #4
 800e188:	4619      	mov	r1, r3
 800e18a:	4610      	mov	r0, r2
 800e18c:	f7fd fcd6 	bl	800bb3c <vListInsert>
 800e190:	e016      	b.n	800e1c0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e192:	2300      	movs	r3, #0
 800e194:	9300      	str	r3, [sp, #0]
 800e196:	2300      	movs	r3, #0
 800e198:	693a      	ldr	r2, [r7, #16]
 800e19a:	2100      	movs	r1, #0
 800e19c:	68f8      	ldr	r0, [r7, #12]
 800e19e:	f7ff fd9d 	bl	800dcdc <xTimerGenericCommand>
 800e1a2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d10a      	bne.n	800e1c0 <prvSwitchTimerLists+0x94>
	__asm volatile
 800e1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ae:	f383 8811 	msr	BASEPRI, r3
 800e1b2:	f3bf 8f6f 	isb	sy
 800e1b6:	f3bf 8f4f 	dsb	sy
 800e1ba:	603b      	str	r3, [r7, #0]
}
 800e1bc:	bf00      	nop
 800e1be:	e7fe      	b.n	800e1be <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e1c0:	4b09      	ldr	r3, [pc, #36]	; (800e1e8 <prvSwitchTimerLists+0xbc>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d1b4      	bne.n	800e134 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e1ca:	4b07      	ldr	r3, [pc, #28]	; (800e1e8 <prvSwitchTimerLists+0xbc>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e1d0:	4b06      	ldr	r3, [pc, #24]	; (800e1ec <prvSwitchTimerLists+0xc0>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4a04      	ldr	r2, [pc, #16]	; (800e1e8 <prvSwitchTimerLists+0xbc>)
 800e1d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e1d8:	4a04      	ldr	r2, [pc, #16]	; (800e1ec <prvSwitchTimerLists+0xc0>)
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	6013      	str	r3, [r2, #0]
}
 800e1de:	bf00      	nop
 800e1e0:	3718      	adds	r7, #24
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	20000d98 	.word	0x20000d98
 800e1ec:	20000d9c 	.word	0x20000d9c

0800e1f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e1f6:	f000 f929 	bl	800e44c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e1fa:	4b15      	ldr	r3, [pc, #84]	; (800e250 <prvCheckForValidListAndQueue+0x60>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d120      	bne.n	800e244 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e202:	4814      	ldr	r0, [pc, #80]	; (800e254 <prvCheckForValidListAndQueue+0x64>)
 800e204:	f7fd fc4c 	bl	800baa0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e208:	4813      	ldr	r0, [pc, #76]	; (800e258 <prvCheckForValidListAndQueue+0x68>)
 800e20a:	f7fd fc49 	bl	800baa0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e20e:	4b13      	ldr	r3, [pc, #76]	; (800e25c <prvCheckForValidListAndQueue+0x6c>)
 800e210:	4a10      	ldr	r2, [pc, #64]	; (800e254 <prvCheckForValidListAndQueue+0x64>)
 800e212:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e214:	4b12      	ldr	r3, [pc, #72]	; (800e260 <prvCheckForValidListAndQueue+0x70>)
 800e216:	4a10      	ldr	r2, [pc, #64]	; (800e258 <prvCheckForValidListAndQueue+0x68>)
 800e218:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e21a:	2300      	movs	r3, #0
 800e21c:	9300      	str	r3, [sp, #0]
 800e21e:	4b11      	ldr	r3, [pc, #68]	; (800e264 <prvCheckForValidListAndQueue+0x74>)
 800e220:	4a11      	ldr	r2, [pc, #68]	; (800e268 <prvCheckForValidListAndQueue+0x78>)
 800e222:	2110      	movs	r1, #16
 800e224:	200a      	movs	r0, #10
 800e226:	f7fd fd53 	bl	800bcd0 <xQueueGenericCreateStatic>
 800e22a:	4603      	mov	r3, r0
 800e22c:	4a08      	ldr	r2, [pc, #32]	; (800e250 <prvCheckForValidListAndQueue+0x60>)
 800e22e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e230:	4b07      	ldr	r3, [pc, #28]	; (800e250 <prvCheckForValidListAndQueue+0x60>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d005      	beq.n	800e244 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e238:	4b05      	ldr	r3, [pc, #20]	; (800e250 <prvCheckForValidListAndQueue+0x60>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	490b      	ldr	r1, [pc, #44]	; (800e26c <prvCheckForValidListAndQueue+0x7c>)
 800e23e:	4618      	mov	r0, r3
 800e240:	f7fe fb16 	bl	800c870 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e244:	f000 f932 	bl	800e4ac <vPortExitCritical>
}
 800e248:	bf00      	nop
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	20000da0 	.word	0x20000da0
 800e254:	20000d70 	.word	0x20000d70
 800e258:	20000d84 	.word	0x20000d84
 800e25c:	20000d98 	.word	0x20000d98
 800e260:	20000d9c 	.word	0x20000d9c
 800e264:	20000e4c 	.word	0x20000e4c
 800e268:	20000dac 	.word	0x20000dac
 800e26c:	0800f69c 	.word	0x0800f69c

0800e270 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e270:	b480      	push	{r7}
 800e272:	b085      	sub	sp, #20
 800e274:	af00      	add	r7, sp, #0
 800e276:	60f8      	str	r0, [r7, #12]
 800e278:	60b9      	str	r1, [r7, #8]
 800e27a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	3b04      	subs	r3, #4
 800e280:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e288:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	3b04      	subs	r3, #4
 800e28e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	f023 0201 	bic.w	r2, r3, #1
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	3b04      	subs	r3, #4
 800e29e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e2a0:	4a08      	ldr	r2, [pc, #32]	; (800e2c4 <pxPortInitialiseStack+0x54>)
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	3b14      	subs	r3, #20
 800e2aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e2ac:	687a      	ldr	r2, [r7, #4]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	3b20      	subs	r3, #32
 800e2b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3714      	adds	r7, #20
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bc80      	pop	{r7}
 800e2c2:	4770      	bx	lr
 800e2c4:	0800e2c9 	.word	0x0800e2c9

0800e2c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b085      	sub	sp, #20
 800e2cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e2d2:	4b12      	ldr	r3, [pc, #72]	; (800e31c <prvTaskExitError+0x54>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2da:	d00a      	beq.n	800e2f2 <prvTaskExitError+0x2a>
	__asm volatile
 800e2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e0:	f383 8811 	msr	BASEPRI, r3
 800e2e4:	f3bf 8f6f 	isb	sy
 800e2e8:	f3bf 8f4f 	dsb	sy
 800e2ec:	60fb      	str	r3, [r7, #12]
}
 800e2ee:	bf00      	nop
 800e2f0:	e7fe      	b.n	800e2f0 <prvTaskExitError+0x28>
	__asm volatile
 800e2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f6:	f383 8811 	msr	BASEPRI, r3
 800e2fa:	f3bf 8f6f 	isb	sy
 800e2fe:	f3bf 8f4f 	dsb	sy
 800e302:	60bb      	str	r3, [r7, #8]
}
 800e304:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e306:	bf00      	nop
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d0fc      	beq.n	800e308 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e30e:	bf00      	nop
 800e310:	bf00      	nop
 800e312:	3714      	adds	r7, #20
 800e314:	46bd      	mov	sp, r7
 800e316:	bc80      	pop	{r7}
 800e318:	4770      	bx	lr
 800e31a:	bf00      	nop
 800e31c:	2000012c 	.word	0x2000012c

0800e320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e320:	4b07      	ldr	r3, [pc, #28]	; (800e340 <pxCurrentTCBConst2>)
 800e322:	6819      	ldr	r1, [r3, #0]
 800e324:	6808      	ldr	r0, [r1, #0]
 800e326:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e32a:	f380 8809 	msr	PSP, r0
 800e32e:	f3bf 8f6f 	isb	sy
 800e332:	f04f 0000 	mov.w	r0, #0
 800e336:	f380 8811 	msr	BASEPRI, r0
 800e33a:	f04e 0e0d 	orr.w	lr, lr, #13
 800e33e:	4770      	bx	lr

0800e340 <pxCurrentTCBConst2>:
 800e340:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e344:	bf00      	nop
 800e346:	bf00      	nop

0800e348 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800e348:	4806      	ldr	r0, [pc, #24]	; (800e364 <prvPortStartFirstTask+0x1c>)
 800e34a:	6800      	ldr	r0, [r0, #0]
 800e34c:	6800      	ldr	r0, [r0, #0]
 800e34e:	f380 8808 	msr	MSP, r0
 800e352:	b662      	cpsie	i
 800e354:	b661      	cpsie	f
 800e356:	f3bf 8f4f 	dsb	sy
 800e35a:	f3bf 8f6f 	isb	sy
 800e35e:	df00      	svc	0
 800e360:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e362:	bf00      	nop
 800e364:	e000ed08 	.word	0xe000ed08

0800e368 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e36e:	4b32      	ldr	r3, [pc, #200]	; (800e438 <xPortStartScheduler+0xd0>)
 800e370:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	b2db      	uxtb	r3, r3
 800e378:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	22ff      	movs	r2, #255	; 0xff
 800e37e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	b2db      	uxtb	r3, r3
 800e386:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e388:	78fb      	ldrb	r3, [r7, #3]
 800e38a:	b2db      	uxtb	r3, r3
 800e38c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e390:	b2da      	uxtb	r2, r3
 800e392:	4b2a      	ldr	r3, [pc, #168]	; (800e43c <xPortStartScheduler+0xd4>)
 800e394:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e396:	4b2a      	ldr	r3, [pc, #168]	; (800e440 <xPortStartScheduler+0xd8>)
 800e398:	2207      	movs	r2, #7
 800e39a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e39c:	e009      	b.n	800e3b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e39e:	4b28      	ldr	r3, [pc, #160]	; (800e440 <xPortStartScheduler+0xd8>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	3b01      	subs	r3, #1
 800e3a4:	4a26      	ldr	r2, [pc, #152]	; (800e440 <xPortStartScheduler+0xd8>)
 800e3a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e3a8:	78fb      	ldrb	r3, [r7, #3]
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	005b      	lsls	r3, r3, #1
 800e3ae:	b2db      	uxtb	r3, r3
 800e3b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e3b2:	78fb      	ldrb	r3, [r7, #3]
 800e3b4:	b2db      	uxtb	r3, r3
 800e3b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3ba:	2b80      	cmp	r3, #128	; 0x80
 800e3bc:	d0ef      	beq.n	800e39e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e3be:	4b20      	ldr	r3, [pc, #128]	; (800e440 <xPortStartScheduler+0xd8>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f1c3 0307 	rsb	r3, r3, #7
 800e3c6:	2b04      	cmp	r3, #4
 800e3c8:	d00a      	beq.n	800e3e0 <xPortStartScheduler+0x78>
	__asm volatile
 800e3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ce:	f383 8811 	msr	BASEPRI, r3
 800e3d2:	f3bf 8f6f 	isb	sy
 800e3d6:	f3bf 8f4f 	dsb	sy
 800e3da:	60bb      	str	r3, [r7, #8]
}
 800e3dc:	bf00      	nop
 800e3de:	e7fe      	b.n	800e3de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e3e0:	4b17      	ldr	r3, [pc, #92]	; (800e440 <xPortStartScheduler+0xd8>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	021b      	lsls	r3, r3, #8
 800e3e6:	4a16      	ldr	r2, [pc, #88]	; (800e440 <xPortStartScheduler+0xd8>)
 800e3e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e3ea:	4b15      	ldr	r3, [pc, #84]	; (800e440 <xPortStartScheduler+0xd8>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e3f2:	4a13      	ldr	r2, [pc, #76]	; (800e440 <xPortStartScheduler+0xd8>)
 800e3f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	b2da      	uxtb	r2, r3
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e3fe:	4b11      	ldr	r3, [pc, #68]	; (800e444 <xPortStartScheduler+0xdc>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	4a10      	ldr	r2, [pc, #64]	; (800e444 <xPortStartScheduler+0xdc>)
 800e404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e408:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e40a:	4b0e      	ldr	r3, [pc, #56]	; (800e444 <xPortStartScheduler+0xdc>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4a0d      	ldr	r2, [pc, #52]	; (800e444 <xPortStartScheduler+0xdc>)
 800e410:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e414:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e416:	f000 f8b9 	bl	800e58c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e41a:	4b0b      	ldr	r3, [pc, #44]	; (800e448 <xPortStartScheduler+0xe0>)
 800e41c:	2200      	movs	r2, #0
 800e41e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e420:	f7ff ff92 	bl	800e348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e424:	f7fe fea8 	bl	800d178 <vTaskSwitchContext>
	prvTaskExitError();
 800e428:	f7ff ff4e 	bl	800e2c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e42c:	2300      	movs	r3, #0
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3710      	adds	r7, #16
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	e000e400 	.word	0xe000e400
 800e43c:	20000e9c 	.word	0x20000e9c
 800e440:	20000ea0 	.word	0x20000ea0
 800e444:	e000ed20 	.word	0xe000ed20
 800e448:	2000012c 	.word	0x2000012c

0800e44c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
	__asm volatile
 800e452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e456:	f383 8811 	msr	BASEPRI, r3
 800e45a:	f3bf 8f6f 	isb	sy
 800e45e:	f3bf 8f4f 	dsb	sy
 800e462:	607b      	str	r3, [r7, #4]
}
 800e464:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e466:	4b0f      	ldr	r3, [pc, #60]	; (800e4a4 <vPortEnterCritical+0x58>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	3301      	adds	r3, #1
 800e46c:	4a0d      	ldr	r2, [pc, #52]	; (800e4a4 <vPortEnterCritical+0x58>)
 800e46e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e470:	4b0c      	ldr	r3, [pc, #48]	; (800e4a4 <vPortEnterCritical+0x58>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	2b01      	cmp	r3, #1
 800e476:	d10f      	bne.n	800e498 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e478:	4b0b      	ldr	r3, [pc, #44]	; (800e4a8 <vPortEnterCritical+0x5c>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d00a      	beq.n	800e498 <vPortEnterCritical+0x4c>
	__asm volatile
 800e482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e486:	f383 8811 	msr	BASEPRI, r3
 800e48a:	f3bf 8f6f 	isb	sy
 800e48e:	f3bf 8f4f 	dsb	sy
 800e492:	603b      	str	r3, [r7, #0]
}
 800e494:	bf00      	nop
 800e496:	e7fe      	b.n	800e496 <vPortEnterCritical+0x4a>
	}
}
 800e498:	bf00      	nop
 800e49a:	370c      	adds	r7, #12
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bc80      	pop	{r7}
 800e4a0:	4770      	bx	lr
 800e4a2:	bf00      	nop
 800e4a4:	2000012c 	.word	0x2000012c
 800e4a8:	e000ed04 	.word	0xe000ed04

0800e4ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b083      	sub	sp, #12
 800e4b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e4b2:	4b11      	ldr	r3, [pc, #68]	; (800e4f8 <vPortExitCritical+0x4c>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d10a      	bne.n	800e4d0 <vPortExitCritical+0x24>
	__asm volatile
 800e4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4be:	f383 8811 	msr	BASEPRI, r3
 800e4c2:	f3bf 8f6f 	isb	sy
 800e4c6:	f3bf 8f4f 	dsb	sy
 800e4ca:	607b      	str	r3, [r7, #4]
}
 800e4cc:	bf00      	nop
 800e4ce:	e7fe      	b.n	800e4ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e4d0:	4b09      	ldr	r3, [pc, #36]	; (800e4f8 <vPortExitCritical+0x4c>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	3b01      	subs	r3, #1
 800e4d6:	4a08      	ldr	r2, [pc, #32]	; (800e4f8 <vPortExitCritical+0x4c>)
 800e4d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e4da:	4b07      	ldr	r3, [pc, #28]	; (800e4f8 <vPortExitCritical+0x4c>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d105      	bne.n	800e4ee <vPortExitCritical+0x42>
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	f383 8811 	msr	BASEPRI, r3
}
 800e4ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e4ee:	bf00      	nop
 800e4f0:	370c      	adds	r7, #12
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bc80      	pop	{r7}
 800e4f6:	4770      	bx	lr
 800e4f8:	2000012c 	.word	0x2000012c
 800e4fc:	00000000 	.word	0x00000000

0800e500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e500:	f3ef 8009 	mrs	r0, PSP
 800e504:	f3bf 8f6f 	isb	sy
 800e508:	4b0d      	ldr	r3, [pc, #52]	; (800e540 <pxCurrentTCBConst>)
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e510:	6010      	str	r0, [r2, #0]
 800e512:	e92d 4008 	stmdb	sp!, {r3, lr}
 800e516:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e51a:	f380 8811 	msr	BASEPRI, r0
 800e51e:	f7fe fe2b 	bl	800d178 <vTaskSwitchContext>
 800e522:	f04f 0000 	mov.w	r0, #0
 800e526:	f380 8811 	msr	BASEPRI, r0
 800e52a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e52e:	6819      	ldr	r1, [r3, #0]
 800e530:	6808      	ldr	r0, [r1, #0]
 800e532:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e536:	f380 8809 	msr	PSP, r0
 800e53a:	f3bf 8f6f 	isb	sy
 800e53e:	4770      	bx	lr

0800e540 <pxCurrentTCBConst>:
 800e540:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e544:	bf00      	nop
 800e546:	bf00      	nop

0800e548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b082      	sub	sp, #8
 800e54c:	af00      	add	r7, sp, #0
	__asm volatile
 800e54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e552:	f383 8811 	msr	BASEPRI, r3
 800e556:	f3bf 8f6f 	isb	sy
 800e55a:	f3bf 8f4f 	dsb	sy
 800e55e:	607b      	str	r3, [r7, #4]
}
 800e560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e562:	f7fe fd4b 	bl	800cffc <xTaskIncrementTick>
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d003      	beq.n	800e574 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e56c:	4b06      	ldr	r3, [pc, #24]	; (800e588 <SysTick_Handler+0x40>)
 800e56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e572:	601a      	str	r2, [r3, #0]
 800e574:	2300      	movs	r3, #0
 800e576:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	f383 8811 	msr	BASEPRI, r3
}
 800e57e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e580:	bf00      	nop
 800e582:	3708      	adds	r7, #8
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}
 800e588:	e000ed04 	.word	0xe000ed04

0800e58c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e58c:	b480      	push	{r7}
 800e58e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e590:	4b0a      	ldr	r3, [pc, #40]	; (800e5bc <vPortSetupTimerInterrupt+0x30>)
 800e592:	2200      	movs	r2, #0
 800e594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e596:	4b0a      	ldr	r3, [pc, #40]	; (800e5c0 <vPortSetupTimerInterrupt+0x34>)
 800e598:	2200      	movs	r2, #0
 800e59a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e59c:	4b09      	ldr	r3, [pc, #36]	; (800e5c4 <vPortSetupTimerInterrupt+0x38>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4a09      	ldr	r2, [pc, #36]	; (800e5c8 <vPortSetupTimerInterrupt+0x3c>)
 800e5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e5a6:	099b      	lsrs	r3, r3, #6
 800e5a8:	4a08      	ldr	r2, [pc, #32]	; (800e5cc <vPortSetupTimerInterrupt+0x40>)
 800e5aa:	3b01      	subs	r3, #1
 800e5ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e5ae:	4b03      	ldr	r3, [pc, #12]	; (800e5bc <vPortSetupTimerInterrupt+0x30>)
 800e5b0:	2207      	movs	r2, #7
 800e5b2:	601a      	str	r2, [r3, #0]
}
 800e5b4:	bf00      	nop
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bc80      	pop	{r7}
 800e5ba:	4770      	bx	lr
 800e5bc:	e000e010 	.word	0xe000e010
 800e5c0:	e000e018 	.word	0xe000e018
 800e5c4:	20000010 	.word	0x20000010
 800e5c8:	10624dd3 	.word	0x10624dd3
 800e5cc:	e000e014 	.word	0xe000e014

0800e5d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e5d0:	b480      	push	{r7}
 800e5d2:	b085      	sub	sp, #20
 800e5d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e5d6:	f3ef 8305 	mrs	r3, IPSR
 800e5da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	2b0f      	cmp	r3, #15
 800e5e0:	d914      	bls.n	800e60c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e5e2:	4a16      	ldr	r2, [pc, #88]	; (800e63c <vPortValidateInterruptPriority+0x6c>)
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e5ec:	4b14      	ldr	r3, [pc, #80]	; (800e640 <vPortValidateInterruptPriority+0x70>)
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	7afa      	ldrb	r2, [r7, #11]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d20a      	bcs.n	800e60c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5fa:	f383 8811 	msr	BASEPRI, r3
 800e5fe:	f3bf 8f6f 	isb	sy
 800e602:	f3bf 8f4f 	dsb	sy
 800e606:	607b      	str	r3, [r7, #4]
}
 800e608:	bf00      	nop
 800e60a:	e7fe      	b.n	800e60a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e60c:	4b0d      	ldr	r3, [pc, #52]	; (800e644 <vPortValidateInterruptPriority+0x74>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e614:	4b0c      	ldr	r3, [pc, #48]	; (800e648 <vPortValidateInterruptPriority+0x78>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	429a      	cmp	r2, r3
 800e61a:	d90a      	bls.n	800e632 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e620:	f383 8811 	msr	BASEPRI, r3
 800e624:	f3bf 8f6f 	isb	sy
 800e628:	f3bf 8f4f 	dsb	sy
 800e62c:	603b      	str	r3, [r7, #0]
}
 800e62e:	bf00      	nop
 800e630:	e7fe      	b.n	800e630 <vPortValidateInterruptPriority+0x60>
	}
 800e632:	bf00      	nop
 800e634:	3714      	adds	r7, #20
 800e636:	46bd      	mov	sp, r7
 800e638:	bc80      	pop	{r7}
 800e63a:	4770      	bx	lr
 800e63c:	e000e3f0 	.word	0xe000e3f0
 800e640:	20000e9c 	.word	0x20000e9c
 800e644:	e000ed0c 	.word	0xe000ed0c
 800e648:	20000ea0 	.word	0x20000ea0

0800e64c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b08a      	sub	sp, #40	; 0x28
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e654:	2300      	movs	r3, #0
 800e656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e658:	f7fe fc16 	bl	800ce88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e65c:	4b58      	ldr	r3, [pc, #352]	; (800e7c0 <pvPortMalloc+0x174>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d101      	bne.n	800e668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e664:	f000 f910 	bl	800e888 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e668:	4b56      	ldr	r3, [pc, #344]	; (800e7c4 <pvPortMalloc+0x178>)
 800e66a:	681a      	ldr	r2, [r3, #0]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	4013      	ands	r3, r2
 800e670:	2b00      	cmp	r3, #0
 800e672:	f040 808e 	bne.w	800e792 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d01d      	beq.n	800e6b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e67c:	2208      	movs	r2, #8
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	4413      	add	r3, r2
 800e682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f003 0307 	and.w	r3, r3, #7
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d014      	beq.n	800e6b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f023 0307 	bic.w	r3, r3, #7
 800e694:	3308      	adds	r3, #8
 800e696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f003 0307 	and.w	r3, r3, #7
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d00a      	beq.n	800e6b8 <pvPortMalloc+0x6c>
	__asm volatile
 800e6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a6:	f383 8811 	msr	BASEPRI, r3
 800e6aa:	f3bf 8f6f 	isb	sy
 800e6ae:	f3bf 8f4f 	dsb	sy
 800e6b2:	617b      	str	r3, [r7, #20]
}
 800e6b4:	bf00      	nop
 800e6b6:	e7fe      	b.n	800e6b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d069      	beq.n	800e792 <pvPortMalloc+0x146>
 800e6be:	4b42      	ldr	r3, [pc, #264]	; (800e7c8 <pvPortMalloc+0x17c>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	687a      	ldr	r2, [r7, #4]
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d864      	bhi.n	800e792 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e6c8:	4b40      	ldr	r3, [pc, #256]	; (800e7cc <pvPortMalloc+0x180>)
 800e6ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e6cc:	4b3f      	ldr	r3, [pc, #252]	; (800e7cc <pvPortMalloc+0x180>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e6d2:	e004      	b.n	800e6de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	687a      	ldr	r2, [r7, #4]
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d903      	bls.n	800e6f0 <pvPortMalloc+0xa4>
 800e6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d1f1      	bne.n	800e6d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e6f0:	4b33      	ldr	r3, [pc, #204]	; (800e7c0 <pvPortMalloc+0x174>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d04b      	beq.n	800e792 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e6fa:	6a3b      	ldr	r3, [r7, #32]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2208      	movs	r2, #8
 800e700:	4413      	add	r3, r2
 800e702:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	6a3b      	ldr	r3, [r7, #32]
 800e70a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70e:	685a      	ldr	r2, [r3, #4]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	1ad2      	subs	r2, r2, r3
 800e714:	2308      	movs	r3, #8
 800e716:	005b      	lsls	r3, r3, #1
 800e718:	429a      	cmp	r2, r3
 800e71a:	d91f      	bls.n	800e75c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e71c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	4413      	add	r3, r2
 800e722:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e724:	69bb      	ldr	r3, [r7, #24]
 800e726:	f003 0307 	and.w	r3, r3, #7
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d00a      	beq.n	800e744 <pvPortMalloc+0xf8>
	__asm volatile
 800e72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e732:	f383 8811 	msr	BASEPRI, r3
 800e736:	f3bf 8f6f 	isb	sy
 800e73a:	f3bf 8f4f 	dsb	sy
 800e73e:	613b      	str	r3, [r7, #16]
}
 800e740:	bf00      	nop
 800e742:	e7fe      	b.n	800e742 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e746:	685a      	ldr	r2, [r3, #4]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	1ad2      	subs	r2, r2, r3
 800e74c:	69bb      	ldr	r3, [r7, #24]
 800e74e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e756:	69b8      	ldr	r0, [r7, #24]
 800e758:	f000 f8f8 	bl	800e94c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e75c:	4b1a      	ldr	r3, [pc, #104]	; (800e7c8 <pvPortMalloc+0x17c>)
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	1ad3      	subs	r3, r2, r3
 800e766:	4a18      	ldr	r2, [pc, #96]	; (800e7c8 <pvPortMalloc+0x17c>)
 800e768:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e76a:	4b17      	ldr	r3, [pc, #92]	; (800e7c8 <pvPortMalloc+0x17c>)
 800e76c:	681a      	ldr	r2, [r3, #0]
 800e76e:	4b18      	ldr	r3, [pc, #96]	; (800e7d0 <pvPortMalloc+0x184>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	429a      	cmp	r2, r3
 800e774:	d203      	bcs.n	800e77e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e776:	4b14      	ldr	r3, [pc, #80]	; (800e7c8 <pvPortMalloc+0x17c>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4a15      	ldr	r2, [pc, #84]	; (800e7d0 <pvPortMalloc+0x184>)
 800e77c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e780:	685a      	ldr	r2, [r3, #4]
 800e782:	4b10      	ldr	r3, [pc, #64]	; (800e7c4 <pvPortMalloc+0x178>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	431a      	orrs	r2, r3
 800e788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78e:	2200      	movs	r2, #0
 800e790:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e792:	f7fe fb87 	bl	800cea4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e796:	69fb      	ldr	r3, [r7, #28]
 800e798:	f003 0307 	and.w	r3, r3, #7
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d00a      	beq.n	800e7b6 <pvPortMalloc+0x16a>
	__asm volatile
 800e7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a4:	f383 8811 	msr	BASEPRI, r3
 800e7a8:	f3bf 8f6f 	isb	sy
 800e7ac:	f3bf 8f4f 	dsb	sy
 800e7b0:	60fb      	str	r3, [r7, #12]
}
 800e7b2:	bf00      	nop
 800e7b4:	e7fe      	b.n	800e7b4 <pvPortMalloc+0x168>
	return pvReturn;
 800e7b6:	69fb      	ldr	r3, [r7, #28]
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3728      	adds	r7, #40	; 0x28
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	20002248 	.word	0x20002248
 800e7c4:	20002254 	.word	0x20002254
 800e7c8:	2000224c 	.word	0x2000224c
 800e7cc:	20002240 	.word	0x20002240
 800e7d0:	20002250 	.word	0x20002250

0800e7d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b086      	sub	sp, #24
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d048      	beq.n	800e878 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e7e6:	2308      	movs	r3, #8
 800e7e8:	425b      	negs	r3, r3
 800e7ea:	697a      	ldr	r2, [r7, #20]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	685a      	ldr	r2, [r3, #4]
 800e7f8:	4b21      	ldr	r3, [pc, #132]	; (800e880 <vPortFree+0xac>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4013      	ands	r3, r2
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d10a      	bne.n	800e818 <vPortFree+0x44>
	__asm volatile
 800e802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e806:	f383 8811 	msr	BASEPRI, r3
 800e80a:	f3bf 8f6f 	isb	sy
 800e80e:	f3bf 8f4f 	dsb	sy
 800e812:	60fb      	str	r3, [r7, #12]
}
 800e814:	bf00      	nop
 800e816:	e7fe      	b.n	800e816 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d00a      	beq.n	800e836 <vPortFree+0x62>
	__asm volatile
 800e820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e824:	f383 8811 	msr	BASEPRI, r3
 800e828:	f3bf 8f6f 	isb	sy
 800e82c:	f3bf 8f4f 	dsb	sy
 800e830:	60bb      	str	r3, [r7, #8]
}
 800e832:	bf00      	nop
 800e834:	e7fe      	b.n	800e834 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	685a      	ldr	r2, [r3, #4]
 800e83a:	4b11      	ldr	r3, [pc, #68]	; (800e880 <vPortFree+0xac>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	4013      	ands	r3, r2
 800e840:	2b00      	cmp	r3, #0
 800e842:	d019      	beq.n	800e878 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d115      	bne.n	800e878 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	685a      	ldr	r2, [r3, #4]
 800e850:	4b0b      	ldr	r3, [pc, #44]	; (800e880 <vPortFree+0xac>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	43db      	mvns	r3, r3
 800e856:	401a      	ands	r2, r3
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e85c:	f7fe fb14 	bl	800ce88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	685a      	ldr	r2, [r3, #4]
 800e864:	4b07      	ldr	r3, [pc, #28]	; (800e884 <vPortFree+0xb0>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	4413      	add	r3, r2
 800e86a:	4a06      	ldr	r2, [pc, #24]	; (800e884 <vPortFree+0xb0>)
 800e86c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e86e:	6938      	ldr	r0, [r7, #16]
 800e870:	f000 f86c 	bl	800e94c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e874:	f7fe fb16 	bl	800cea4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e878:	bf00      	nop
 800e87a:	3718      	adds	r7, #24
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	20002254 	.word	0x20002254
 800e884:	2000224c 	.word	0x2000224c

0800e888 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e888:	b480      	push	{r7}
 800e88a:	b085      	sub	sp, #20
 800e88c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e88e:	f241 339c 	movw	r3, #5020	; 0x139c
 800e892:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e894:	4b27      	ldr	r3, [pc, #156]	; (800e934 <prvHeapInit+0xac>)
 800e896:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f003 0307 	and.w	r3, r3, #7
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d00c      	beq.n	800e8bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	3307      	adds	r3, #7
 800e8a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	f023 0307 	bic.w	r3, r3, #7
 800e8ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e8b0:	68ba      	ldr	r2, [r7, #8]
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	1ad3      	subs	r3, r2, r3
 800e8b6:	4a1f      	ldr	r2, [pc, #124]	; (800e934 <prvHeapInit+0xac>)
 800e8b8:	4413      	add	r3, r2
 800e8ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e8c0:	4a1d      	ldr	r2, [pc, #116]	; (800e938 <prvHeapInit+0xb0>)
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e8c6:	4b1c      	ldr	r3, [pc, #112]	; (800e938 <prvHeapInit+0xb0>)
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	68ba      	ldr	r2, [r7, #8]
 800e8d0:	4413      	add	r3, r2
 800e8d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e8d4:	2208      	movs	r2, #8
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	1a9b      	subs	r3, r3, r2
 800e8da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f023 0307 	bic.w	r3, r3, #7
 800e8e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	4a15      	ldr	r2, [pc, #84]	; (800e93c <prvHeapInit+0xb4>)
 800e8e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e8ea:	4b14      	ldr	r3, [pc, #80]	; (800e93c <prvHeapInit+0xb4>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e8f2:	4b12      	ldr	r3, [pc, #72]	; (800e93c <prvHeapInit+0xb4>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	68fa      	ldr	r2, [r7, #12]
 800e902:	1ad2      	subs	r2, r2, r3
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e908:	4b0c      	ldr	r3, [pc, #48]	; (800e93c <prvHeapInit+0xb4>)
 800e90a:	681a      	ldr	r2, [r3, #0]
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	4a0a      	ldr	r2, [pc, #40]	; (800e940 <prvHeapInit+0xb8>)
 800e916:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	685b      	ldr	r3, [r3, #4]
 800e91c:	4a09      	ldr	r2, [pc, #36]	; (800e944 <prvHeapInit+0xbc>)
 800e91e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e920:	4b09      	ldr	r3, [pc, #36]	; (800e948 <prvHeapInit+0xc0>)
 800e922:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e926:	601a      	str	r2, [r3, #0]
}
 800e928:	bf00      	nop
 800e92a:	3714      	adds	r7, #20
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bc80      	pop	{r7}
 800e930:	4770      	bx	lr
 800e932:	bf00      	nop
 800e934:	20000ea4 	.word	0x20000ea4
 800e938:	20002240 	.word	0x20002240
 800e93c:	20002248 	.word	0x20002248
 800e940:	20002250 	.word	0x20002250
 800e944:	2000224c 	.word	0x2000224c
 800e948:	20002254 	.word	0x20002254

0800e94c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e94c:	b480      	push	{r7}
 800e94e:	b085      	sub	sp, #20
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e954:	4b27      	ldr	r3, [pc, #156]	; (800e9f4 <prvInsertBlockIntoFreeList+0xa8>)
 800e956:	60fb      	str	r3, [r7, #12]
 800e958:	e002      	b.n	800e960 <prvInsertBlockIntoFreeList+0x14>
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	60fb      	str	r3, [r7, #12]
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	687a      	ldr	r2, [r7, #4]
 800e966:	429a      	cmp	r2, r3
 800e968:	d8f7      	bhi.n	800e95a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	685b      	ldr	r3, [r3, #4]
 800e972:	68ba      	ldr	r2, [r7, #8]
 800e974:	4413      	add	r3, r2
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	429a      	cmp	r2, r3
 800e97a:	d108      	bne.n	800e98e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	685a      	ldr	r2, [r3, #4]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	685b      	ldr	r3, [r3, #4]
 800e984:	441a      	add	r2, r3
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	685b      	ldr	r3, [r3, #4]
 800e996:	68ba      	ldr	r2, [r7, #8]
 800e998:	441a      	add	r2, r3
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	d118      	bne.n	800e9d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681a      	ldr	r2, [r3, #0]
 800e9a6:	4b14      	ldr	r3, [pc, #80]	; (800e9f8 <prvInsertBlockIntoFreeList+0xac>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d00d      	beq.n	800e9ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	685a      	ldr	r2, [r3, #4]
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	441a      	add	r2, r3
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	681a      	ldr	r2, [r3, #0]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	601a      	str	r2, [r3, #0]
 800e9c8:	e008      	b.n	800e9dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e9ca:	4b0b      	ldr	r3, [pc, #44]	; (800e9f8 <prvInsertBlockIntoFreeList+0xac>)
 800e9cc:	681a      	ldr	r2, [r3, #0]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	601a      	str	r2, [r3, #0]
 800e9d2:	e003      	b.n	800e9dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	681a      	ldr	r2, [r3, #0]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e9dc:	68fa      	ldr	r2, [r7, #12]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	429a      	cmp	r2, r3
 800e9e2:	d002      	beq.n	800e9ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	687a      	ldr	r2, [r7, #4]
 800e9e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e9ea:	bf00      	nop
 800e9ec:	3714      	adds	r7, #20
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bc80      	pop	{r7}
 800e9f2:	4770      	bx	lr
 800e9f4:	20002240 	.word	0x20002240
 800e9f8:	20002248 	.word	0x20002248

0800e9fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ea00:	2200      	movs	r2, #0
 800ea02:	4912      	ldr	r1, [pc, #72]	; (800ea4c <MX_USB_DEVICE_Init+0x50>)
 800ea04:	4812      	ldr	r0, [pc, #72]	; (800ea50 <MX_USB_DEVICE_Init+0x54>)
 800ea06:	f7fb fd20 	bl	800a44a <USBD_Init>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d001      	beq.n	800ea14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ea10:	f7f2 fb52 	bl	80010b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ea14:	490f      	ldr	r1, [pc, #60]	; (800ea54 <MX_USB_DEVICE_Init+0x58>)
 800ea16:	480e      	ldr	r0, [pc, #56]	; (800ea50 <MX_USB_DEVICE_Init+0x54>)
 800ea18:	f7fb fd42 	bl	800a4a0 <USBD_RegisterClass>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d001      	beq.n	800ea26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ea22:	f7f2 fb49 	bl	80010b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ea26:	490c      	ldr	r1, [pc, #48]	; (800ea58 <MX_USB_DEVICE_Init+0x5c>)
 800ea28:	4809      	ldr	r0, [pc, #36]	; (800ea50 <MX_USB_DEVICE_Init+0x54>)
 800ea2a:	f7fb fc73 	bl	800a314 <USBD_CDC_RegisterInterface>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d001      	beq.n	800ea38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ea34:	f7f2 fb40 	bl	80010b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ea38:	4805      	ldr	r0, [pc, #20]	; (800ea50 <MX_USB_DEVICE_Init+0x54>)
 800ea3a:	f7fb fd4a 	bl	800a4d2 <USBD_Start>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d001      	beq.n	800ea48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ea44:	f7f2 fb38 	bl	80010b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ea48:	bf00      	nop
 800ea4a:	bd80      	pop	{r7, pc}
 800ea4c:	20000140 	.word	0x20000140
 800ea50:	2000270c 	.word	0x2000270c
 800ea54:	20000028 	.word	0x20000028
 800ea58:	20000130 	.word	0x20000130

0800ea5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ea60:	2200      	movs	r2, #0
 800ea62:	4905      	ldr	r1, [pc, #20]	; (800ea78 <CDC_Init_FS+0x1c>)
 800ea64:	4805      	ldr	r0, [pc, #20]	; (800ea7c <CDC_Init_FS+0x20>)
 800ea66:	f7fb fc6b 	bl	800a340 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ea6a:	4905      	ldr	r1, [pc, #20]	; (800ea80 <CDC_Init_FS+0x24>)
 800ea6c:	4803      	ldr	r0, [pc, #12]	; (800ea7c <CDC_Init_FS+0x20>)
 800ea6e:	f7fb fc80 	bl	800a372 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ea72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	20002db8 	.word	0x20002db8
 800ea7c:	2000270c 	.word	0x2000270c
 800ea80:	200029d0 	.word	0x200029d0

0800ea84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ea84:	b480      	push	{r7}
 800ea86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ea88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bc80      	pop	{r7}
 800ea90:	4770      	bx	lr
	...

0800ea94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b083      	sub	sp, #12
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	6039      	str	r1, [r7, #0]
 800ea9e:	71fb      	strb	r3, [r7, #7]
 800eaa0:	4613      	mov	r3, r2
 800eaa2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800eaa4:	79fb      	ldrb	r3, [r7, #7]
 800eaa6:	2b23      	cmp	r3, #35	; 0x23
 800eaa8:	d84a      	bhi.n	800eb40 <CDC_Control_FS+0xac>
 800eaaa:	a201      	add	r2, pc, #4	; (adr r2, 800eab0 <CDC_Control_FS+0x1c>)
 800eaac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab0:	0800eb41 	.word	0x0800eb41
 800eab4:	0800eb41 	.word	0x0800eb41
 800eab8:	0800eb41 	.word	0x0800eb41
 800eabc:	0800eb41 	.word	0x0800eb41
 800eac0:	0800eb41 	.word	0x0800eb41
 800eac4:	0800eb41 	.word	0x0800eb41
 800eac8:	0800eb41 	.word	0x0800eb41
 800eacc:	0800eb41 	.word	0x0800eb41
 800ead0:	0800eb41 	.word	0x0800eb41
 800ead4:	0800eb41 	.word	0x0800eb41
 800ead8:	0800eb41 	.word	0x0800eb41
 800eadc:	0800eb41 	.word	0x0800eb41
 800eae0:	0800eb41 	.word	0x0800eb41
 800eae4:	0800eb41 	.word	0x0800eb41
 800eae8:	0800eb41 	.word	0x0800eb41
 800eaec:	0800eb41 	.word	0x0800eb41
 800eaf0:	0800eb41 	.word	0x0800eb41
 800eaf4:	0800eb41 	.word	0x0800eb41
 800eaf8:	0800eb41 	.word	0x0800eb41
 800eafc:	0800eb41 	.word	0x0800eb41
 800eb00:	0800eb41 	.word	0x0800eb41
 800eb04:	0800eb41 	.word	0x0800eb41
 800eb08:	0800eb41 	.word	0x0800eb41
 800eb0c:	0800eb41 	.word	0x0800eb41
 800eb10:	0800eb41 	.word	0x0800eb41
 800eb14:	0800eb41 	.word	0x0800eb41
 800eb18:	0800eb41 	.word	0x0800eb41
 800eb1c:	0800eb41 	.word	0x0800eb41
 800eb20:	0800eb41 	.word	0x0800eb41
 800eb24:	0800eb41 	.word	0x0800eb41
 800eb28:	0800eb41 	.word	0x0800eb41
 800eb2c:	0800eb41 	.word	0x0800eb41
 800eb30:	0800eb41 	.word	0x0800eb41
 800eb34:	0800eb41 	.word	0x0800eb41
 800eb38:	0800eb41 	.word	0x0800eb41
 800eb3c:	0800eb41 	.word	0x0800eb41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eb40:	bf00      	nop
  }

  return (USBD_OK);
 800eb42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	370c      	adds	r7, #12
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bc80      	pop	{r7}
 800eb4c:	4770      	bx	lr
 800eb4e:	bf00      	nop

0800eb50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < (*Len); i++)
 800eb5e:	2300      	movs	r3, #0
 800eb60:	60fb      	str	r3, [r7, #12]
 800eb62:	e00c      	b.n	800eb7e <CDC_Receive_FS+0x2e>
	{
		xQueueSendToBackFromISR(qUSB_rcvQueue, &Buf[i], &xHigherPriorityTaskWoken );
 800eb64:	4b14      	ldr	r3, [pc, #80]	; (800ebb8 <CDC_Receive_FS+0x68>)
 800eb66:	6818      	ldr	r0, [r3, #0]
 800eb68:	687a      	ldr	r2, [r7, #4]
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	18d1      	adds	r1, r2, r3
 800eb6e:	f107 0208 	add.w	r2, r7, #8
 800eb72:	2300      	movs	r3, #0
 800eb74:	f7fd fad0 	bl	800c118 <xQueueGenericSendFromISR>
	for (uint32_t i = 0; i < (*Len); i++)
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	60fb      	str	r3, [r7, #12]
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d3ed      	bcc.n	800eb64 <CDC_Receive_FS+0x14>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800eb88:	6879      	ldr	r1, [r7, #4]
 800eb8a:	480c      	ldr	r0, [pc, #48]	; (800ebbc <CDC_Receive_FS+0x6c>)
 800eb8c:	f7fb fbf1 	bl	800a372 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800eb90:	480a      	ldr	r0, [pc, #40]	; (800ebbc <CDC_Receive_FS+0x6c>)
 800eb92:	f7fb fc30 	bl	800a3f6 <USBD_CDC_ReceivePacket>
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d007      	beq.n	800ebac <CDC_Receive_FS+0x5c>
 800eb9c:	4b08      	ldr	r3, [pc, #32]	; (800ebc0 <CDC_Receive_FS+0x70>)
 800eb9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eba2:	601a      	str	r2, [r3, #0]
 800eba4:	f3bf 8f4f 	dsb	sy
 800eba8:	f3bf 8f6f 	isb	sy
  return (USBD_OK);
 800ebac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	3710      	adds	r7, #16
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}
 800ebb6:	bf00      	nop
 800ebb8:	20002494 	.word	0x20002494
 800ebbc:	2000270c 	.word	0x2000270c
 800ebc0:	e000ed04 	.word	0xe000ed04

0800ebc4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	460b      	mov	r3, r1
 800ebce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ebd4:	4b0d      	ldr	r3, [pc, #52]	; (800ec0c <CDC_Transmit_FS+0x48>)
 800ebd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebda:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d001      	beq.n	800ebea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	e00b      	b.n	800ec02 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ebea:	887b      	ldrh	r3, [r7, #2]
 800ebec:	461a      	mov	r2, r3
 800ebee:	6879      	ldr	r1, [r7, #4]
 800ebf0:	4806      	ldr	r0, [pc, #24]	; (800ec0c <CDC_Transmit_FS+0x48>)
 800ebf2:	f7fb fba5 	bl	800a340 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ebf6:	4805      	ldr	r0, [pc, #20]	; (800ec0c <CDC_Transmit_FS+0x48>)
 800ebf8:	f7fb fbce 	bl	800a398 <USBD_CDC_TransmitPacket>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ec00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3710      	adds	r7, #16
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}
 800ec0a:	bf00      	nop
 800ec0c:	2000270c 	.word	0x2000270c

0800ec10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b083      	sub	sp, #12
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	4603      	mov	r3, r0
 800ec18:	6039      	str	r1, [r7, #0]
 800ec1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	2212      	movs	r2, #18
 800ec20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ec22:	4b03      	ldr	r3, [pc, #12]	; (800ec30 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	370c      	adds	r7, #12
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bc80      	pop	{r7}
 800ec2c:	4770      	bx	lr
 800ec2e:	bf00      	nop
 800ec30:	2000015c 	.word	0x2000015c

0800ec34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec34:	b480      	push	{r7}
 800ec36:	b083      	sub	sp, #12
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	6039      	str	r1, [r7, #0]
 800ec3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	2204      	movs	r2, #4
 800ec44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ec46:	4b03      	ldr	r3, [pc, #12]	; (800ec54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	370c      	adds	r7, #12
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bc80      	pop	{r7}
 800ec50:	4770      	bx	lr
 800ec52:	bf00      	nop
 800ec54:	20000170 	.word	0x20000170

0800ec58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b082      	sub	sp, #8
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	4603      	mov	r3, r0
 800ec60:	6039      	str	r1, [r7, #0]
 800ec62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ec64:	79fb      	ldrb	r3, [r7, #7]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d105      	bne.n	800ec76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ec6a:	683a      	ldr	r2, [r7, #0]
 800ec6c:	4907      	ldr	r1, [pc, #28]	; (800ec8c <USBD_FS_ProductStrDescriptor+0x34>)
 800ec6e:	4808      	ldr	r0, [pc, #32]	; (800ec90 <USBD_FS_ProductStrDescriptor+0x38>)
 800ec70:	f7fc fba8 	bl	800b3c4 <USBD_GetString>
 800ec74:	e004      	b.n	800ec80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ec76:	683a      	ldr	r2, [r7, #0]
 800ec78:	4904      	ldr	r1, [pc, #16]	; (800ec8c <USBD_FS_ProductStrDescriptor+0x34>)
 800ec7a:	4805      	ldr	r0, [pc, #20]	; (800ec90 <USBD_FS_ProductStrDescriptor+0x38>)
 800ec7c:	f7fc fba2 	bl	800b3c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec80:	4b02      	ldr	r3, [pc, #8]	; (800ec8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3708      	adds	r7, #8
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	200031a0 	.word	0x200031a0
 800ec90:	0800f6a4 	.word	0x0800f6a4

0800ec94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	6039      	str	r1, [r7, #0]
 800ec9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eca0:	683a      	ldr	r2, [r7, #0]
 800eca2:	4904      	ldr	r1, [pc, #16]	; (800ecb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eca4:	4804      	ldr	r0, [pc, #16]	; (800ecb8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eca6:	f7fc fb8d 	bl	800b3c4 <USBD_GetString>
  return USBD_StrDesc;
 800ecaa:	4b02      	ldr	r3, [pc, #8]	; (800ecb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3708      	adds	r7, #8
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	200031a0 	.word	0x200031a0
 800ecb8:	0800f6b0 	.word	0x0800f6b0

0800ecbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b082      	sub	sp, #8
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	6039      	str	r1, [r7, #0]
 800ecc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	221a      	movs	r2, #26
 800eccc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ecce:	f000 f843 	bl	800ed58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ecd2:	4b02      	ldr	r3, [pc, #8]	; (800ecdc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3708      	adds	r7, #8
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}
 800ecdc:	20000174 	.word	0x20000174

0800ece0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	4603      	mov	r3, r0
 800ece8:	6039      	str	r1, [r7, #0]
 800ecea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ecec:	79fb      	ldrb	r3, [r7, #7]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d105      	bne.n	800ecfe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ecf2:	683a      	ldr	r2, [r7, #0]
 800ecf4:	4907      	ldr	r1, [pc, #28]	; (800ed14 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ecf6:	4808      	ldr	r0, [pc, #32]	; (800ed18 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ecf8:	f7fc fb64 	bl	800b3c4 <USBD_GetString>
 800ecfc:	e004      	b.n	800ed08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ecfe:	683a      	ldr	r2, [r7, #0]
 800ed00:	4904      	ldr	r1, [pc, #16]	; (800ed14 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ed02:	4805      	ldr	r0, [pc, #20]	; (800ed18 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ed04:	f7fc fb5e 	bl	800b3c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ed08:	4b02      	ldr	r3, [pc, #8]	; (800ed14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	200031a0 	.word	0x200031a0
 800ed18:	0800f6c4 	.word	0x0800f6c4

0800ed1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	4603      	mov	r3, r0
 800ed24:	6039      	str	r1, [r7, #0]
 800ed26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ed28:	79fb      	ldrb	r3, [r7, #7]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d105      	bne.n	800ed3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ed2e:	683a      	ldr	r2, [r7, #0]
 800ed30:	4907      	ldr	r1, [pc, #28]	; (800ed50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ed32:	4808      	ldr	r0, [pc, #32]	; (800ed54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ed34:	f7fc fb46 	bl	800b3c4 <USBD_GetString>
 800ed38:	e004      	b.n	800ed44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ed3a:	683a      	ldr	r2, [r7, #0]
 800ed3c:	4904      	ldr	r1, [pc, #16]	; (800ed50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ed3e:	4805      	ldr	r0, [pc, #20]	; (800ed54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ed40:	f7fc fb40 	bl	800b3c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ed44:	4b02      	ldr	r3, [pc, #8]	; (800ed50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3708      	adds	r7, #8
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
 800ed4e:	bf00      	nop
 800ed50:	200031a0 	.word	0x200031a0
 800ed54:	0800f6d0 	.word	0x0800f6d0

0800ed58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ed5e:	4b0f      	ldr	r3, [pc, #60]	; (800ed9c <Get_SerialNum+0x44>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ed64:	4b0e      	ldr	r3, [pc, #56]	; (800eda0 <Get_SerialNum+0x48>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ed6a:	4b0e      	ldr	r3, [pc, #56]	; (800eda4 <Get_SerialNum+0x4c>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ed70:	68fa      	ldr	r2, [r7, #12]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	4413      	add	r3, r2
 800ed76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d009      	beq.n	800ed92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ed7e:	2208      	movs	r2, #8
 800ed80:	4909      	ldr	r1, [pc, #36]	; (800eda8 <Get_SerialNum+0x50>)
 800ed82:	68f8      	ldr	r0, [r7, #12]
 800ed84:	f000 f814 	bl	800edb0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ed88:	2204      	movs	r2, #4
 800ed8a:	4908      	ldr	r1, [pc, #32]	; (800edac <Get_SerialNum+0x54>)
 800ed8c:	68b8      	ldr	r0, [r7, #8]
 800ed8e:	f000 f80f 	bl	800edb0 <IntToUnicode>
  }
}
 800ed92:	bf00      	nop
 800ed94:	3710      	adds	r7, #16
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
 800ed9a:	bf00      	nop
 800ed9c:	1ffff7e8 	.word	0x1ffff7e8
 800eda0:	1ffff7ec 	.word	0x1ffff7ec
 800eda4:	1ffff7f0 	.word	0x1ffff7f0
 800eda8:	20000176 	.word	0x20000176
 800edac:	20000186 	.word	0x20000186

0800edb0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b087      	sub	sp, #28
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	60f8      	str	r0, [r7, #12]
 800edb8:	60b9      	str	r1, [r7, #8]
 800edba:	4613      	mov	r3, r2
 800edbc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800edbe:	2300      	movs	r3, #0
 800edc0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800edc2:	2300      	movs	r3, #0
 800edc4:	75fb      	strb	r3, [r7, #23]
 800edc6:	e027      	b.n	800ee18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	0f1b      	lsrs	r3, r3, #28
 800edcc:	2b09      	cmp	r3, #9
 800edce:	d80b      	bhi.n	800ede8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	0f1b      	lsrs	r3, r3, #28
 800edd4:	b2da      	uxtb	r2, r3
 800edd6:	7dfb      	ldrb	r3, [r7, #23]
 800edd8:	005b      	lsls	r3, r3, #1
 800edda:	4619      	mov	r1, r3
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	440b      	add	r3, r1
 800ede0:	3230      	adds	r2, #48	; 0x30
 800ede2:	b2d2      	uxtb	r2, r2
 800ede4:	701a      	strb	r2, [r3, #0]
 800ede6:	e00a      	b.n	800edfe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	0f1b      	lsrs	r3, r3, #28
 800edec:	b2da      	uxtb	r2, r3
 800edee:	7dfb      	ldrb	r3, [r7, #23]
 800edf0:	005b      	lsls	r3, r3, #1
 800edf2:	4619      	mov	r1, r3
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	440b      	add	r3, r1
 800edf8:	3237      	adds	r2, #55	; 0x37
 800edfa:	b2d2      	uxtb	r2, r2
 800edfc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	011b      	lsls	r3, r3, #4
 800ee02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ee04:	7dfb      	ldrb	r3, [r7, #23]
 800ee06:	005b      	lsls	r3, r3, #1
 800ee08:	3301      	adds	r3, #1
 800ee0a:	68ba      	ldr	r2, [r7, #8]
 800ee0c:	4413      	add	r3, r2
 800ee0e:	2200      	movs	r2, #0
 800ee10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ee12:	7dfb      	ldrb	r3, [r7, #23]
 800ee14:	3301      	adds	r3, #1
 800ee16:	75fb      	strb	r3, [r7, #23]
 800ee18:	7dfa      	ldrb	r2, [r7, #23]
 800ee1a:	79fb      	ldrb	r3, [r7, #7]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d3d3      	bcc.n	800edc8 <IntToUnicode+0x18>
  }
}
 800ee20:	bf00      	nop
 800ee22:	bf00      	nop
 800ee24:	371c      	adds	r7, #28
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bc80      	pop	{r7}
 800ee2a:	4770      	bx	lr

0800ee2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	4a0d      	ldr	r2, [pc, #52]	; (800ee70 <HAL_PCD_MspInit+0x44>)
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d113      	bne.n	800ee66 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ee3e:	4b0d      	ldr	r3, [pc, #52]	; (800ee74 <HAL_PCD_MspInit+0x48>)
 800ee40:	69db      	ldr	r3, [r3, #28]
 800ee42:	4a0c      	ldr	r2, [pc, #48]	; (800ee74 <HAL_PCD_MspInit+0x48>)
 800ee44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ee48:	61d3      	str	r3, [r2, #28]
 800ee4a:	4b0a      	ldr	r3, [pc, #40]	; (800ee74 <HAL_PCD_MspInit+0x48>)
 800ee4c:	69db      	ldr	r3, [r3, #28]
 800ee4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee52:	60fb      	str	r3, [r7, #12]
 800ee54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800ee56:	2200      	movs	r2, #0
 800ee58:	2105      	movs	r1, #5
 800ee5a:	2014      	movs	r0, #20
 800ee5c:	f7f4 f9c9 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ee60:	2014      	movs	r0, #20
 800ee62:	f7f4 f9e2 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ee66:	bf00      	nop
 800ee68:	3710      	adds	r7, #16
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	40005c00 	.word	0x40005c00
 800ee74:	40021000 	.word	0x40021000

0800ee78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b082      	sub	sp, #8
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ee8c:	4619      	mov	r1, r3
 800ee8e:	4610      	mov	r0, r2
 800ee90:	f7fb fb67 	bl	800a562 <USBD_LL_SetupStage>
}
 800ee94:	bf00      	nop
 800ee96:	3708      	adds	r7, #8
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}

0800ee9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	460b      	mov	r3, r1
 800eea6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800eeae:	78fa      	ldrb	r2, [r7, #3]
 800eeb0:	6879      	ldr	r1, [r7, #4]
 800eeb2:	4613      	mov	r3, r2
 800eeb4:	009b      	lsls	r3, r3, #2
 800eeb6:	4413      	add	r3, r2
 800eeb8:	00db      	lsls	r3, r3, #3
 800eeba:	440b      	add	r3, r1
 800eebc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800eec0:	681a      	ldr	r2, [r3, #0]
 800eec2:	78fb      	ldrb	r3, [r7, #3]
 800eec4:	4619      	mov	r1, r3
 800eec6:	f7fb fb99 	bl	800a5fc <USBD_LL_DataOutStage>
}
 800eeca:	bf00      	nop
 800eecc:	3708      	adds	r7, #8
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}

0800eed2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eed2:	b580      	push	{r7, lr}
 800eed4:	b082      	sub	sp, #8
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	6078      	str	r0, [r7, #4]
 800eeda:	460b      	mov	r3, r1
 800eedc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800eee4:	78fa      	ldrb	r2, [r7, #3]
 800eee6:	6879      	ldr	r1, [r7, #4]
 800eee8:	4613      	mov	r3, r2
 800eeea:	009b      	lsls	r3, r3, #2
 800eeec:	4413      	add	r3, r2
 800eeee:	00db      	lsls	r3, r3, #3
 800eef0:	440b      	add	r3, r1
 800eef2:	333c      	adds	r3, #60	; 0x3c
 800eef4:	681a      	ldr	r2, [r3, #0]
 800eef6:	78fb      	ldrb	r3, [r7, #3]
 800eef8:	4619      	mov	r1, r3
 800eefa:	f7fb fbf0 	bl	800a6de <USBD_LL_DataInStage>
}
 800eefe:	bf00      	nop
 800ef00:	3708      	adds	r7, #8
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}

0800ef06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef06:	b580      	push	{r7, lr}
 800ef08:	b082      	sub	sp, #8
 800ef0a:	af00      	add	r7, sp, #0
 800ef0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ef14:	4618      	mov	r0, r3
 800ef16:	f7fb fd00 	bl	800a91a <USBD_LL_SOF>
}
 800ef1a:	bf00      	nop
 800ef1c:	3708      	adds	r7, #8
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}

0800ef22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef22:	b580      	push	{r7, lr}
 800ef24:	b084      	sub	sp, #16
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	689b      	ldr	r3, [r3, #8]
 800ef32:	2b02      	cmp	r3, #2
 800ef34:	d001      	beq.n	800ef3a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ef36:	f7f2 f8bf 	bl	80010b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ef40:	7bfa      	ldrb	r2, [r7, #15]
 800ef42:	4611      	mov	r1, r2
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7fb fcb0 	bl	800a8aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7fb fc69 	bl	800a828 <USBD_LL_Reset>
}
 800ef56:	bf00      	nop
 800ef58:	3710      	adds	r7, #16
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
	...

0800ef60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7fb fcaa 	bl	800a8c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	699b      	ldr	r3, [r3, #24]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d005      	beq.n	800ef88 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef7c:	4b04      	ldr	r3, [pc, #16]	; (800ef90 <HAL_PCD_SuspendCallback+0x30>)
 800ef7e:	691b      	ldr	r3, [r3, #16]
 800ef80:	4a03      	ldr	r2, [pc, #12]	; (800ef90 <HAL_PCD_SuspendCallback+0x30>)
 800ef82:	f043 0306 	orr.w	r3, r3, #6
 800ef86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ef88:	bf00      	nop
 800ef8a:	3708      	adds	r7, #8
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}
 800ef90:	e000ed00 	.word	0xe000ed00

0800ef94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fb fca4 	bl	800a8f0 <USBD_LL_Resume>
}
 800efa8:	bf00      	nop
 800efaa:	3708      	adds	r7, #8
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800efb8:	4a28      	ldr	r2, [pc, #160]	; (800f05c <USBD_LL_Init+0xac>)
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	4a26      	ldr	r2, [pc, #152]	; (800f05c <USBD_LL_Init+0xac>)
 800efc4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800efc8:	4b24      	ldr	r3, [pc, #144]	; (800f05c <USBD_LL_Init+0xac>)
 800efca:	4a25      	ldr	r2, [pc, #148]	; (800f060 <USBD_LL_Init+0xb0>)
 800efcc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800efce:	4b23      	ldr	r3, [pc, #140]	; (800f05c <USBD_LL_Init+0xac>)
 800efd0:	2208      	movs	r2, #8
 800efd2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800efd4:	4b21      	ldr	r3, [pc, #132]	; (800f05c <USBD_LL_Init+0xac>)
 800efd6:	2202      	movs	r2, #2
 800efd8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800efda:	4b20      	ldr	r3, [pc, #128]	; (800f05c <USBD_LL_Init+0xac>)
 800efdc:	2200      	movs	r2, #0
 800efde:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800efe0:	4b1e      	ldr	r3, [pc, #120]	; (800f05c <USBD_LL_Init+0xac>)
 800efe2:	2200      	movs	r2, #0
 800efe4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800efe6:	4b1d      	ldr	r3, [pc, #116]	; (800f05c <USBD_LL_Init+0xac>)
 800efe8:	2200      	movs	r2, #0
 800efea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800efec:	481b      	ldr	r0, [pc, #108]	; (800f05c <USBD_LL_Init+0xac>)
 800efee:	f7f5 f9f8 	bl	80043e2 <HAL_PCD_Init>
 800eff2:	4603      	mov	r3, r0
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d001      	beq.n	800effc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800eff8:	f7f2 f85e 	bl	80010b8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f002:	2318      	movs	r3, #24
 800f004:	2200      	movs	r2, #0
 800f006:	2100      	movs	r1, #0
 800f008:	f7f6 fe6e 	bl	8005ce8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f012:	2358      	movs	r3, #88	; 0x58
 800f014:	2200      	movs	r2, #0
 800f016:	2180      	movs	r1, #128	; 0x80
 800f018:	f7f6 fe66 	bl	8005ce8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f022:	23c0      	movs	r3, #192	; 0xc0
 800f024:	2200      	movs	r2, #0
 800f026:	2181      	movs	r1, #129	; 0x81
 800f028:	f7f6 fe5e 	bl	8005ce8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f032:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f036:	2200      	movs	r2, #0
 800f038:	2101      	movs	r1, #1
 800f03a:	f7f6 fe55 	bl	8005ce8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f044:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f048:	2200      	movs	r2, #0
 800f04a:	2182      	movs	r1, #130	; 0x82
 800f04c:	f7f6 fe4c 	bl	8005ce8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800f050:	2300      	movs	r3, #0
}
 800f052:	4618      	mov	r0, r3
 800f054:	3708      	adds	r7, #8
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
 800f05a:	bf00      	nop
 800f05c:	200033a0 	.word	0x200033a0
 800f060:	40005c00 	.word	0x40005c00

0800f064 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b084      	sub	sp, #16
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f06c:	2300      	movs	r3, #0
 800f06e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f070:	2300      	movs	r3, #0
 800f072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7f5 fabc 	bl	80045f8 <HAL_PCD_Start>
 800f080:	4603      	mov	r3, r0
 800f082:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f084:	7bfb      	ldrb	r3, [r7, #15]
 800f086:	4618      	mov	r0, r3
 800f088:	f000 f94e 	bl	800f328 <USBD_Get_USB_Status>
 800f08c:	4603      	mov	r3, r0
 800f08e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f090:	7bbb      	ldrb	r3, [r7, #14]
}
 800f092:	4618      	mov	r0, r3
 800f094:	3710      	adds	r7, #16
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}

0800f09a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f09a:	b580      	push	{r7, lr}
 800f09c:	b084      	sub	sp, #16
 800f09e:	af00      	add	r7, sp, #0
 800f0a0:	6078      	str	r0, [r7, #4]
 800f0a2:	4608      	mov	r0, r1
 800f0a4:	4611      	mov	r1, r2
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	70fb      	strb	r3, [r7, #3]
 800f0ac:	460b      	mov	r3, r1
 800f0ae:	70bb      	strb	r3, [r7, #2]
 800f0b0:	4613      	mov	r3, r2
 800f0b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f0c2:	78bb      	ldrb	r3, [r7, #2]
 800f0c4:	883a      	ldrh	r2, [r7, #0]
 800f0c6:	78f9      	ldrb	r1, [r7, #3]
 800f0c8:	f7f5 fc36 	bl	8004938 <HAL_PCD_EP_Open>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f000 f928 	bl	800f328 <USBD_Get_USB_Status>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3710      	adds	r7, #16
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}

0800f0e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0e6:	b580      	push	{r7, lr}
 800f0e8:	b084      	sub	sp, #16
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]
 800f0ee:	460b      	mov	r3, r1
 800f0f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f100:	78fa      	ldrb	r2, [r7, #3]
 800f102:	4611      	mov	r1, r2
 800f104:	4618      	mov	r0, r3
 800f106:	f7f5 fc7d 	bl	8004a04 <HAL_PCD_EP_Close>
 800f10a:	4603      	mov	r3, r0
 800f10c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f10e:	7bfb      	ldrb	r3, [r7, #15]
 800f110:	4618      	mov	r0, r3
 800f112:	f000 f909 	bl	800f328 <USBD_Get_USB_Status>
 800f116:	4603      	mov	r3, r0
 800f118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f11a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3710      	adds	r7, #16
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b084      	sub	sp, #16
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	460b      	mov	r3, r1
 800f12e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f130:	2300      	movs	r3, #0
 800f132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f134:	2300      	movs	r3, #0
 800f136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f13e:	78fa      	ldrb	r2, [r7, #3]
 800f140:	4611      	mov	r1, r2
 800f142:	4618      	mov	r0, r3
 800f144:	f7f5 fd3d 	bl	8004bc2 <HAL_PCD_EP_SetStall>
 800f148:	4603      	mov	r3, r0
 800f14a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f14c:	7bfb      	ldrb	r3, [r7, #15]
 800f14e:	4618      	mov	r0, r3
 800f150:	f000 f8ea 	bl	800f328 <USBD_Get_USB_Status>
 800f154:	4603      	mov	r3, r0
 800f156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f158:	7bbb      	ldrb	r3, [r7, #14]
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3710      	adds	r7, #16
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}

0800f162 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f162:	b580      	push	{r7, lr}
 800f164:	b084      	sub	sp, #16
 800f166:	af00      	add	r7, sp, #0
 800f168:	6078      	str	r0, [r7, #4]
 800f16a:	460b      	mov	r3, r1
 800f16c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f16e:	2300      	movs	r3, #0
 800f170:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f172:	2300      	movs	r3, #0
 800f174:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f17c:	78fa      	ldrb	r2, [r7, #3]
 800f17e:	4611      	mov	r1, r2
 800f180:	4618      	mov	r0, r3
 800f182:	f7f5 fd7e 	bl	8004c82 <HAL_PCD_EP_ClrStall>
 800f186:	4603      	mov	r3, r0
 800f188:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f18a:	7bfb      	ldrb	r3, [r7, #15]
 800f18c:	4618      	mov	r0, r3
 800f18e:	f000 f8cb 	bl	800f328 <USBD_Get_USB_Status>
 800f192:	4603      	mov	r3, r0
 800f194:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f196:	7bbb      	ldrb	r3, [r7, #14]
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3710      	adds	r7, #16
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}

0800f1a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b085      	sub	sp, #20
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	460b      	mov	r3, r1
 800f1aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f1b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f1b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	da0c      	bge.n	800f1d6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f1bc:	78fb      	ldrb	r3, [r7, #3]
 800f1be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1c2:	68f9      	ldr	r1, [r7, #12]
 800f1c4:	1c5a      	adds	r2, r3, #1
 800f1c6:	4613      	mov	r3, r2
 800f1c8:	009b      	lsls	r3, r3, #2
 800f1ca:	4413      	add	r3, r2
 800f1cc:	00db      	lsls	r3, r3, #3
 800f1ce:	440b      	add	r3, r1
 800f1d0:	3302      	adds	r3, #2
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	e00b      	b.n	800f1ee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f1d6:	78fb      	ldrb	r3, [r7, #3]
 800f1d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f1dc:	68f9      	ldr	r1, [r7, #12]
 800f1de:	4613      	mov	r3, r2
 800f1e0:	009b      	lsls	r3, r3, #2
 800f1e2:	4413      	add	r3, r2
 800f1e4:	00db      	lsls	r3, r3, #3
 800f1e6:	440b      	add	r3, r1
 800f1e8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800f1ec:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3714      	adds	r7, #20
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bc80      	pop	{r7}
 800f1f6:	4770      	bx	lr

0800f1f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b084      	sub	sp, #16
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	460b      	mov	r3, r1
 800f202:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f204:	2300      	movs	r3, #0
 800f206:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f208:	2300      	movs	r3, #0
 800f20a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f212:	78fa      	ldrb	r2, [r7, #3]
 800f214:	4611      	mov	r1, r2
 800f216:	4618      	mov	r0, r3
 800f218:	f7f5 fb69 	bl	80048ee <HAL_PCD_SetAddress>
 800f21c:	4603      	mov	r3, r0
 800f21e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f220:	7bfb      	ldrb	r3, [r7, #15]
 800f222:	4618      	mov	r0, r3
 800f224:	f000 f880 	bl	800f328 <USBD_Get_USB_Status>
 800f228:	4603      	mov	r3, r0
 800f22a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f22c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3710      	adds	r7, #16
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}

0800f236 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f236:	b580      	push	{r7, lr}
 800f238:	b086      	sub	sp, #24
 800f23a:	af00      	add	r7, sp, #0
 800f23c:	60f8      	str	r0, [r7, #12]
 800f23e:	607a      	str	r2, [r7, #4]
 800f240:	461a      	mov	r2, r3
 800f242:	460b      	mov	r3, r1
 800f244:	72fb      	strb	r3, [r7, #11]
 800f246:	4613      	mov	r3, r2
 800f248:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f24a:	2300      	movs	r3, #0
 800f24c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f24e:	2300      	movs	r3, #0
 800f250:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f258:	893b      	ldrh	r3, [r7, #8]
 800f25a:	7af9      	ldrb	r1, [r7, #11]
 800f25c:	687a      	ldr	r2, [r7, #4]
 800f25e:	f7f5 fc6d 	bl	8004b3c <HAL_PCD_EP_Transmit>
 800f262:	4603      	mov	r3, r0
 800f264:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f266:	7dfb      	ldrb	r3, [r7, #23]
 800f268:	4618      	mov	r0, r3
 800f26a:	f000 f85d 	bl	800f328 <USBD_Get_USB_Status>
 800f26e:	4603      	mov	r3, r0
 800f270:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f272:	7dbb      	ldrb	r3, [r7, #22]
}
 800f274:	4618      	mov	r0, r3
 800f276:	3718      	adds	r7, #24
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b086      	sub	sp, #24
 800f280:	af00      	add	r7, sp, #0
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	607a      	str	r2, [r7, #4]
 800f286:	461a      	mov	r2, r3
 800f288:	460b      	mov	r3, r1
 800f28a:	72fb      	strb	r3, [r7, #11]
 800f28c:	4613      	mov	r3, r2
 800f28e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f290:	2300      	movs	r3, #0
 800f292:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f294:	2300      	movs	r3, #0
 800f296:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f29e:	893b      	ldrh	r3, [r7, #8]
 800f2a0:	7af9      	ldrb	r1, [r7, #11]
 800f2a2:	687a      	ldr	r2, [r7, #4]
 800f2a4:	f7f5 fbf6 	bl	8004a94 <HAL_PCD_EP_Receive>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2ac:	7dfb      	ldrb	r3, [r7, #23]
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f000 f83a 	bl	800f328 <USBD_Get_USB_Status>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f2b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3718      	adds	r7, #24
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}

0800f2c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2c2:	b580      	push	{r7, lr}
 800f2c4:	b082      	sub	sp, #8
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	6078      	str	r0, [r7, #4]
 800f2ca:	460b      	mov	r3, r1
 800f2cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f2d4:	78fa      	ldrb	r2, [r7, #3]
 800f2d6:	4611      	mov	r1, r2
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7f5 fc18 	bl	8004b0e <HAL_PCD_EP_GetRxCount>
 800f2de:	4603      	mov	r3, r0
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3708      	adds	r7, #8
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}

0800f2e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b083      	sub	sp, #12
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f2f0:	4b02      	ldr	r3, [pc, #8]	; (800f2fc <USBD_static_malloc+0x14>)
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	370c      	adds	r7, #12
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bc80      	pop	{r7}
 800f2fa:	4770      	bx	lr
 800f2fc:	20002258 	.word	0x20002258

0800f300 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f300:	b480      	push	{r7}
 800f302:	b083      	sub	sp, #12
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]

}
 800f308:	bf00      	nop
 800f30a:	370c      	adds	r7, #12
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bc80      	pop	{r7}
 800f310:	4770      	bx	lr

0800f312 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f312:	b480      	push	{r7}
 800f314:	b083      	sub	sp, #12
 800f316:	af00      	add	r7, sp, #0
 800f318:	6078      	str	r0, [r7, #4]
 800f31a:	460b      	mov	r3, r1
 800f31c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800f31e:	bf00      	nop
 800f320:	370c      	adds	r7, #12
 800f322:	46bd      	mov	sp, r7
 800f324:	bc80      	pop	{r7}
 800f326:	4770      	bx	lr

0800f328 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f328:	b480      	push	{r7}
 800f32a:	b085      	sub	sp, #20
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	4603      	mov	r3, r0
 800f330:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f332:	2300      	movs	r3, #0
 800f334:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f336:	79fb      	ldrb	r3, [r7, #7]
 800f338:	2b03      	cmp	r3, #3
 800f33a:	d817      	bhi.n	800f36c <USBD_Get_USB_Status+0x44>
 800f33c:	a201      	add	r2, pc, #4	; (adr r2, 800f344 <USBD_Get_USB_Status+0x1c>)
 800f33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f342:	bf00      	nop
 800f344:	0800f355 	.word	0x0800f355
 800f348:	0800f35b 	.word	0x0800f35b
 800f34c:	0800f361 	.word	0x0800f361
 800f350:	0800f367 	.word	0x0800f367
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f354:	2300      	movs	r3, #0
 800f356:	73fb      	strb	r3, [r7, #15]
    break;
 800f358:	e00b      	b.n	800f372 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f35a:	2302      	movs	r3, #2
 800f35c:	73fb      	strb	r3, [r7, #15]
    break;
 800f35e:	e008      	b.n	800f372 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f360:	2301      	movs	r3, #1
 800f362:	73fb      	strb	r3, [r7, #15]
    break;
 800f364:	e005      	b.n	800f372 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f366:	2302      	movs	r3, #2
 800f368:	73fb      	strb	r3, [r7, #15]
    break;
 800f36a:	e002      	b.n	800f372 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f36c:	2302      	movs	r3, #2
 800f36e:	73fb      	strb	r3, [r7, #15]
    break;
 800f370:	bf00      	nop
  }
  return usb_status;
 800f372:	7bfb      	ldrb	r3, [r7, #15]
}
 800f374:	4618      	mov	r0, r3
 800f376:	3714      	adds	r7, #20
 800f378:	46bd      	mov	sp, r7
 800f37a:	bc80      	pop	{r7}
 800f37c:	4770      	bx	lr
 800f37e:	bf00      	nop

0800f380 <__libc_init_array>:
 800f380:	b570      	push	{r4, r5, r6, lr}
 800f382:	2600      	movs	r6, #0
 800f384:	4d0c      	ldr	r5, [pc, #48]	; (800f3b8 <__libc_init_array+0x38>)
 800f386:	4c0d      	ldr	r4, [pc, #52]	; (800f3bc <__libc_init_array+0x3c>)
 800f388:	1b64      	subs	r4, r4, r5
 800f38a:	10a4      	asrs	r4, r4, #2
 800f38c:	42a6      	cmp	r6, r4
 800f38e:	d109      	bne.n	800f3a4 <__libc_init_array+0x24>
 800f390:	f000 f862 	bl	800f458 <_init>
 800f394:	2600      	movs	r6, #0
 800f396:	4d0a      	ldr	r5, [pc, #40]	; (800f3c0 <__libc_init_array+0x40>)
 800f398:	4c0a      	ldr	r4, [pc, #40]	; (800f3c4 <__libc_init_array+0x44>)
 800f39a:	1b64      	subs	r4, r4, r5
 800f39c:	10a4      	asrs	r4, r4, #2
 800f39e:	42a6      	cmp	r6, r4
 800f3a0:	d105      	bne.n	800f3ae <__libc_init_array+0x2e>
 800f3a2:	bd70      	pop	{r4, r5, r6, pc}
 800f3a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3a8:	4798      	blx	r3
 800f3aa:	3601      	adds	r6, #1
 800f3ac:	e7ee      	b.n	800f38c <__libc_init_array+0xc>
 800f3ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3b2:	4798      	blx	r3
 800f3b4:	3601      	adds	r6, #1
 800f3b6:	e7f2      	b.n	800f39e <__libc_init_array+0x1e>
 800f3b8:	0800fd2c 	.word	0x0800fd2c
 800f3bc:	0800fd2c 	.word	0x0800fd2c
 800f3c0:	0800fd2c 	.word	0x0800fd2c
 800f3c4:	0800fd30 	.word	0x0800fd30

0800f3c8 <memcpy>:
 800f3c8:	440a      	add	r2, r1
 800f3ca:	4291      	cmp	r1, r2
 800f3cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3d0:	d100      	bne.n	800f3d4 <memcpy+0xc>
 800f3d2:	4770      	bx	lr
 800f3d4:	b510      	push	{r4, lr}
 800f3d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3da:	4291      	cmp	r1, r2
 800f3dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3e0:	d1f9      	bne.n	800f3d6 <memcpy+0xe>
 800f3e2:	bd10      	pop	{r4, pc}

0800f3e4 <memmove>:
 800f3e4:	4288      	cmp	r0, r1
 800f3e6:	b510      	push	{r4, lr}
 800f3e8:	eb01 0402 	add.w	r4, r1, r2
 800f3ec:	d902      	bls.n	800f3f4 <memmove+0x10>
 800f3ee:	4284      	cmp	r4, r0
 800f3f0:	4623      	mov	r3, r4
 800f3f2:	d807      	bhi.n	800f404 <memmove+0x20>
 800f3f4:	1e43      	subs	r3, r0, #1
 800f3f6:	42a1      	cmp	r1, r4
 800f3f8:	d008      	beq.n	800f40c <memmove+0x28>
 800f3fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f402:	e7f8      	b.n	800f3f6 <memmove+0x12>
 800f404:	4601      	mov	r1, r0
 800f406:	4402      	add	r2, r0
 800f408:	428a      	cmp	r2, r1
 800f40a:	d100      	bne.n	800f40e <memmove+0x2a>
 800f40c:	bd10      	pop	{r4, pc}
 800f40e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f412:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f416:	e7f7      	b.n	800f408 <memmove+0x24>

0800f418 <memset>:
 800f418:	4603      	mov	r3, r0
 800f41a:	4402      	add	r2, r0
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d100      	bne.n	800f422 <memset+0xa>
 800f420:	4770      	bx	lr
 800f422:	f803 1b01 	strb.w	r1, [r3], #1
 800f426:	e7f9      	b.n	800f41c <memset+0x4>

0800f428 <strstr>:
 800f428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f42a:	780c      	ldrb	r4, [r1, #0]
 800f42c:	b164      	cbz	r4, 800f448 <strstr+0x20>
 800f42e:	4603      	mov	r3, r0
 800f430:	781a      	ldrb	r2, [r3, #0]
 800f432:	4618      	mov	r0, r3
 800f434:	1c5e      	adds	r6, r3, #1
 800f436:	b90a      	cbnz	r2, 800f43c <strstr+0x14>
 800f438:	4610      	mov	r0, r2
 800f43a:	e005      	b.n	800f448 <strstr+0x20>
 800f43c:	4294      	cmp	r4, r2
 800f43e:	d108      	bne.n	800f452 <strstr+0x2a>
 800f440:	460d      	mov	r5, r1
 800f442:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800f446:	b902      	cbnz	r2, 800f44a <strstr+0x22>
 800f448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f44a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800f44e:	4297      	cmp	r7, r2
 800f450:	d0f7      	beq.n	800f442 <strstr+0x1a>
 800f452:	4633      	mov	r3, r6
 800f454:	e7ec      	b.n	800f430 <strstr+0x8>
	...

0800f458 <_init>:
 800f458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f45a:	bf00      	nop
 800f45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f45e:	bc08      	pop	{r3}
 800f460:	469e      	mov	lr, r3
 800f462:	4770      	bx	lr

0800f464 <_fini>:
 800f464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f466:	bf00      	nop
 800f468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f46a:	bc08      	pop	{r3}
 800f46c:	469e      	mov	lr, r3
 800f46e:	4770      	bx	lr
