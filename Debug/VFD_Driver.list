
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a294  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800a3a4  0800a3a4  0001a3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a484  0800a484  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800a484  0800a484  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a484  0800a484  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a484  0800a484  0001a484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a488  0800a488  0001a488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800a48c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b5c  20000180  0800a60c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002cdc  0800a60c  00022cdc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023cc0  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b88  00000000  00000000  00043e69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  000489f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001560  00000000  00000000  0004a160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb29  00000000  00000000  0004b6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c151  00000000  00000000  000671e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097eaf  00000000  00000000  0008333a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011b1e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fc8  00000000  00000000  0011b23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a38c 	.word	0x0800a38c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800a38c 	.word	0x0800a38c

08000150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000154:	4a08      	ldr	r2, [pc, #32]	; (8000178 <MX_FREERTOS_Init+0x28>)
 8000156:	2100      	movs	r1, #0
 8000158:	4808      	ldr	r0, [pc, #32]	; (800017c <MX_FREERTOS_Init+0x2c>)
 800015a:	f006 ff05 	bl	8006f68 <osThreadNew>
 800015e:	4603      	mov	r3, r0
 8000160:	4a07      	ldr	r2, [pc, #28]	; (8000180 <MX_FREERTOS_Init+0x30>)
 8000162:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 8000164:	4a07      	ldr	r2, [pc, #28]	; (8000184 <MX_FREERTOS_Init+0x34>)
 8000166:	2100      	movs	r1, #0
 8000168:	4807      	ldr	r0, [pc, #28]	; (8000188 <MX_FREERTOS_Init+0x38>)
 800016a:	f006 fefd 	bl	8006f68 <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a06      	ldr	r2, [pc, #24]	; (800018c <MX_FREERTOS_Init+0x3c>)
 8000172:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	0800a424 	.word	0x0800a424
 800017c:	08000191 	.word	0x08000191
 8000180:	20001cc8 	.word	0x20001cc8
 8000184:	0800a448 	.word	0x0800a448
 8000188:	080001bd 	.word	0x080001bd
 800018c:	20001ccc 	.word	0x20001ccc

08000190 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000198:	f009 fc48 	bl	8009a2c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 800019c:	2201      	movs	r2, #1
 800019e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001a2:	4805      	ldr	r0, [pc, #20]	; (80001b8 <StartDefaultTask+0x28>)
 80001a4:	f000 fc82 	bl	8000aac <HAL_GPIO_WritePin>

  vTaskDelete(NULL);
 80001a8:	2000      	movs	r0, #0
 80001aa:	f007 ff13 	bl	8007fd4 <vTaskDelete>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80001ae:	2001      	movs	r0, #1
 80001b0:	f006 ff84 	bl	80070bc <osDelay>
 80001b4:	e7fb      	b.n	80001ae <StartDefaultTask+0x1e>
 80001b6:	bf00      	nop
 80001b8:	40010800 	.word	0x40010800

080001bc <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 80001c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001c8:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 80001ca:	f008 f939 	bl	8008440 <xTaskGetTickCount>
 80001ce:	4603      	mov	r3, r0
 80001d0:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d6:	4805      	ldr	r0, [pc, #20]	; (80001ec <StartLEDheartbeat+0x30>)
 80001d8:	f000 fc80 	bl	8000adc <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80001dc:	f107 0308 	add.w	r3, r7, #8
 80001e0:	68f9      	ldr	r1, [r7, #12]
 80001e2:	4618      	mov	r0, r3
 80001e4:	f007 ff68 	bl	80080b8 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 80001e8:	e7ef      	b.n	80001ca <StartLEDheartbeat+0xe>
 80001ea:	bf00      	nop
 80001ec:	40011000 	.word	0x40011000

080001f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b088      	sub	sp, #32
 80001f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f6:	f107 0310 	add.w	r3, r7, #16
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000204:	4b28      	ldr	r3, [pc, #160]	; (80002a8 <MX_GPIO_Init+0xb8>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	4a27      	ldr	r2, [pc, #156]	; (80002a8 <MX_GPIO_Init+0xb8>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6193      	str	r3, [r2, #24]
 8000210:	4b25      	ldr	r3, [pc, #148]	; (80002a8 <MX_GPIO_Init+0xb8>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	f003 0310 	and.w	r3, r3, #16
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800021c:	4b22      	ldr	r3, [pc, #136]	; (80002a8 <MX_GPIO_Init+0xb8>)
 800021e:	699b      	ldr	r3, [r3, #24]
 8000220:	4a21      	ldr	r2, [pc, #132]	; (80002a8 <MX_GPIO_Init+0xb8>)
 8000222:	f043 0320 	orr.w	r3, r3, #32
 8000226:	6193      	str	r3, [r2, #24]
 8000228:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <MX_GPIO_Init+0xb8>)
 800022a:	699b      	ldr	r3, [r3, #24]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	60bb      	str	r3, [r7, #8]
 8000232:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000234:	4b1c      	ldr	r3, [pc, #112]	; (80002a8 <MX_GPIO_Init+0xb8>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	4a1b      	ldr	r2, [pc, #108]	; (80002a8 <MX_GPIO_Init+0xb8>)
 800023a:	f043 0304 	orr.w	r3, r3, #4
 800023e:	6193      	str	r3, [r2, #24]
 8000240:	4b19      	ldr	r3, [pc, #100]	; (80002a8 <MX_GPIO_Init+0xb8>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	f003 0304 	and.w	r3, r3, #4
 8000248:	607b      	str	r3, [r7, #4]
 800024a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800024c:	2201      	movs	r2, #1
 800024e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000252:	4816      	ldr	r0, [pc, #88]	; (80002ac <MX_GPIO_Init+0xbc>)
 8000254:	f000 fc2a 	bl	8000aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800025e:	4814      	ldr	r0, [pc, #80]	; (80002b0 <MX_GPIO_Init+0xc0>)
 8000260:	f000 fc24 	bl	8000aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000264:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000268:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800026a:	2301      	movs	r3, #1
 800026c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026e:	2300      	movs	r3, #0
 8000270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000272:	2302      	movs	r3, #2
 8000274:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000276:	f107 0310 	add.w	r3, r7, #16
 800027a:	4619      	mov	r1, r3
 800027c:	480b      	ldr	r0, [pc, #44]	; (80002ac <MX_GPIO_Init+0xbc>)
 800027e:	f000 fa91 	bl	80007a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000288:	2301      	movs	r3, #1
 800028a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028c:	2300      	movs	r3, #0
 800028e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000290:	2302      	movs	r3, #2
 8000292:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000294:	f107 0310 	add.w	r3, r7, #16
 8000298:	4619      	mov	r1, r3
 800029a:	4805      	ldr	r0, [pc, #20]	; (80002b0 <MX_GPIO_Init+0xc0>)
 800029c:	f000 fa82 	bl	80007a4 <HAL_GPIO_Init>

}
 80002a0:	bf00      	nop
 80002a2:	3720      	adds	r7, #32
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40021000 	.word	0x40021000
 80002ac:	40011000 	.word	0x40011000
 80002b0:	40010800 	.word	0x40010800

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b8:	f000 f962 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002bc:	f000 f809 	bl	80002d2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c0:	f7ff ff96 	bl	80001f0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80002c4:	f006 fdea 	bl	8006e9c <osKernelInitialize>
  MX_FREERTOS_Init();
 80002c8:	f7ff ff42 	bl	8000150 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80002cc:	f006 fe18 	bl	8006f00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d0:	e7fe      	b.n	80002d0 <main+0x1c>

080002d2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b094      	sub	sp, #80	; 0x50
 80002d6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002dc:	2228      	movs	r2, #40	; 0x28
 80002de:	2100      	movs	r1, #0
 80002e0:	4618      	mov	r0, r3
 80002e2:	f00a f84b 	bl	800a37c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e6:	f107 0314 	add.w	r3, r7, #20
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000302:	2301      	movs	r3, #1
 8000304:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800030a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000310:	2301      	movs	r3, #1
 8000312:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000314:	2302      	movs	r3, #2
 8000316:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800031c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800031e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000322:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000324:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000328:	4618      	mov	r0, r3
 800032a:	f002 f8b5 	bl	8002498 <HAL_RCC_OscConfig>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000334:	f000 f83a 	bl	80003ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000338:	230f      	movs	r3, #15
 800033a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033c:	2302      	movs	r3, #2
 800033e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000348:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800034e:	f107 0314 	add.w	r3, r7, #20
 8000352:	2101      	movs	r1, #1
 8000354:	4618      	mov	r0, r3
 8000356:	f002 fb1f 	bl	8002998 <HAL_RCC_ClockConfig>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000360:	f000 f824 	bl	80003ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000364:	2310      	movs	r3, #16
 8000366:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000368:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800036c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4618      	mov	r0, r3
 8000372:	f002 fcc7 	bl	8002d04 <HAL_RCCEx_PeriphCLKConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800037c:	f000 f816 	bl	80003ac <Error_Handler>
  }
}
 8000380:	bf00      	nop
 8000382:	3750      	adds	r7, #80	; 0x50
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d101      	bne.n	800039e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800039a:	f000 f907 	bl	80005ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40012c00 	.word	0x40012c00

080003ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b0:	b672      	cpsid	i
}
 80003b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <Error_Handler+0x8>
	...

080003b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003be:	4b18      	ldr	r3, [pc, #96]	; (8000420 <HAL_MspInit+0x68>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4a17      	ldr	r2, [pc, #92]	; (8000420 <HAL_MspInit+0x68>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	6193      	str	r3, [r2, #24]
 80003ca:	4b15      	ldr	r3, [pc, #84]	; (8000420 <HAL_MspInit+0x68>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	60bb      	str	r3, [r7, #8]
 80003d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d6:	4b12      	ldr	r3, [pc, #72]	; (8000420 <HAL_MspInit+0x68>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	4a11      	ldr	r2, [pc, #68]	; (8000420 <HAL_MspInit+0x68>)
 80003dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e0:	61d3      	str	r3, [r2, #28]
 80003e2:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <HAL_MspInit+0x68>)
 80003e4:	69db      	ldr	r3, [r3, #28]
 80003e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003ee:	2200      	movs	r2, #0
 80003f0:	210f      	movs	r1, #15
 80003f2:	f06f 0001 	mvn.w	r0, #1
 80003f6:	f000 f9aa 	bl	800074e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003fa:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <HAL_MspInit+0x6c>)
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <HAL_MspInit+0x6c>)
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000416:	bf00      	nop
 8000418:	3710      	adds	r7, #16
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000
 8000424:	40010000 	.word	0x40010000

08000428 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b08c      	sub	sp, #48	; 0x30
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000438:	2200      	movs	r2, #0
 800043a:	6879      	ldr	r1, [r7, #4]
 800043c:	2019      	movs	r0, #25
 800043e:	f000 f986 	bl	800074e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000442:	2019      	movs	r0, #25
 8000444:	f000 f99f 	bl	8000786 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000448:	4b1e      	ldr	r3, [pc, #120]	; (80004c4 <HAL_InitTick+0x9c>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a1d      	ldr	r2, [pc, #116]	; (80004c4 <HAL_InitTick+0x9c>)
 800044e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <HAL_InitTick+0x9c>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800045c:	60fb      	str	r3, [r7, #12]
 800045e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000460:	f107 0210 	add.w	r2, r7, #16
 8000464:	f107 0314 	add.w	r3, r7, #20
 8000468:	4611      	mov	r1, r2
 800046a:	4618      	mov	r0, r3
 800046c:	f002 fbfc 	bl	8002c68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000470:	f002 fbe6 	bl	8002c40 <HAL_RCC_GetPCLK2Freq>
 8000474:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000478:	4a13      	ldr	r2, [pc, #76]	; (80004c8 <HAL_InitTick+0xa0>)
 800047a:	fba2 2303 	umull	r2, r3, r2, r3
 800047e:	0c9b      	lsrs	r3, r3, #18
 8000480:	3b01      	subs	r3, #1
 8000482:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <HAL_InitTick+0xa4>)
 8000486:	4a12      	ldr	r2, [pc, #72]	; (80004d0 <HAL_InitTick+0xa8>)
 8000488:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800048a:	4b10      	ldr	r3, [pc, #64]	; (80004cc <HAL_InitTick+0xa4>)
 800048c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000490:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000492:	4a0e      	ldr	r2, [pc, #56]	; (80004cc <HAL_InitTick+0xa4>)
 8000494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000496:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <HAL_InitTick+0xa4>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <HAL_InitTick+0xa4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80004a4:	4809      	ldr	r0, [pc, #36]	; (80004cc <HAL_InitTick+0xa4>)
 80004a6:	f002 fce3 	bl	8002e70 <HAL_TIM_Base_Init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d104      	bne.n	80004ba <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80004b0:	4806      	ldr	r0, [pc, #24]	; (80004cc <HAL_InitTick+0xa4>)
 80004b2:	f002 fd35 	bl	8002f20 <HAL_TIM_Base_Start_IT>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e000      	b.n	80004bc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80004ba:	2301      	movs	r3, #1
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3730      	adds	r7, #48	; 0x30
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40021000 	.word	0x40021000
 80004c8:	431bde83 	.word	0x431bde83
 80004cc:	20001cd0 	.word	0x20001cd0
 80004d0:	40012c00 	.word	0x40012c00

080004d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <NMI_Handler+0x4>

080004da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004de:	e7fe      	b.n	80004de <HardFault_Handler+0x4>

080004e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <MemManage_Handler+0x4>

080004e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <BusFault_Handler+0x4>

080004ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <UsageFault_Handler+0x4>

080004f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
	...

08000500 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000504:	4802      	ldr	r0, [pc, #8]	; (8000510 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000506:	f000 fc33 	bl	8000d70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200029f0 	.word	0x200029f0

08000514 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000518:	4802      	ldr	r0, [pc, #8]	; (8000524 <TIM1_UP_IRQHandler+0x10>)
 800051a:	f002 fd53 	bl	8002fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20001cd0 	.word	0x20001cd0

08000528 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000534:	480c      	ldr	r0, [pc, #48]	; (8000568 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000536:	490d      	ldr	r1, [pc, #52]	; (800056c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000538:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054a:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800054c:	4c0a      	ldr	r4, [pc, #40]	; (8000578 <LoopFillZerobss+0x22>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800055a:	f7ff ffe5 	bl	8000528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800055e:	f009 fedb 	bl	800a318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000562:	f7ff fea7 	bl	80002b4 <main>
  bx lr
 8000566:	4770      	bx	lr
  ldr r0, =_sdata
 8000568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800056c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000570:	0800a48c 	.word	0x0800a48c
  ldr r2, =_sbss
 8000574:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000578:	20002cdc 	.word	0x20002cdc

0800057c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800057c:	e7fe      	b.n	800057c <ADC1_2_IRQHandler>
	...

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <HAL_Init+0x28>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <HAL_Init+0x28>)
 800058a:	f043 0310 	orr.w	r3, r3, #16
 800058e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000590:	2003      	movs	r0, #3
 8000592:	f000 f8d1 	bl	8000738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000596:	2000      	movs	r0, #0
 8000598:	f7ff ff46 	bl	8000428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800059c:	f7ff ff0c 	bl	80003b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a0:	2300      	movs	r3, #0
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40022000 	.word	0x40022000

080005ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <HAL_IncTick+0x1c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b05      	ldr	r3, [pc, #20]	; (80005cc <HAL_IncTick+0x20>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4413      	add	r3, r2
 80005bc:	4a03      	ldr	r2, [pc, #12]	; (80005cc <HAL_IncTick+0x20>)
 80005be:	6013      	str	r3, [r2, #0]
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	20000008 	.word	0x20000008
 80005cc:	20001d18 	.word	0x20001d18

080005d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b02      	ldr	r3, [pc, #8]	; (80005e0 <HAL_GetTick+0x10>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	20001d18 	.word	0x20001d18

080005e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f003 0307 	and.w	r3, r3, #7
 80005f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__NVIC_SetPriorityGrouping+0x44>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fa:	68ba      	ldr	r2, [r7, #8]
 80005fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000600:	4013      	ands	r3, r2
 8000602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800060c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000616:	4a04      	ldr	r2, [pc, #16]	; (8000628 <__NVIC_SetPriorityGrouping+0x44>)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	60d3      	str	r3, [r2, #12]
}
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <__NVIC_GetPriorityGrouping+0x18>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	0a1b      	lsrs	r3, r3, #8
 8000636:	f003 0307 	and.w	r3, r3, #7
}
 800063a:	4618      	mov	r0, r3
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	2b00      	cmp	r3, #0
 8000658:	db0b      	blt.n	8000672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	f003 021f 	and.w	r2, r3, #31
 8000660:	4906      	ldr	r1, [pc, #24]	; (800067c <__NVIC_EnableIRQ+0x34>)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	095b      	lsrs	r3, r3, #5
 8000668:	2001      	movs	r0, #1
 800066a:	fa00 f202 	lsl.w	r2, r0, r2
 800066e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	e000e100 	.word	0xe000e100

08000680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	db0a      	blt.n	80006aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	490c      	ldr	r1, [pc, #48]	; (80006cc <__NVIC_SetPriority+0x4c>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	0112      	lsls	r2, r2, #4
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a8:	e00a      	b.n	80006c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4908      	ldr	r1, [pc, #32]	; (80006d0 <__NVIC_SetPriority+0x50>)
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	f003 030f 	and.w	r3, r3, #15
 80006b6:	3b04      	subs	r3, #4
 80006b8:	0112      	lsls	r2, r2, #4
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	440b      	add	r3, r1
 80006be:	761a      	strb	r2, [r3, #24]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000e100 	.word	0xe000e100
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	f1c3 0307 	rsb	r3, r3, #7
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	bf28      	it	cs
 80006f2:	2304      	movcs	r3, #4
 80006f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3304      	adds	r3, #4
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d902      	bls.n	8000704 <NVIC_EncodePriority+0x30>
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3b03      	subs	r3, #3
 8000702:	e000      	b.n	8000706 <NVIC_EncodePriority+0x32>
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	f04f 32ff 	mov.w	r2, #4294967295
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	43da      	mvns	r2, r3
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	401a      	ands	r2, r3
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800071c:	f04f 31ff 	mov.w	r1, #4294967295
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	43d9      	mvns	r1, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	4313      	orrs	r3, r2
         );
}
 800072e:	4618      	mov	r0, r3
 8000730:	3724      	adds	r7, #36	; 0x24
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff ff4f 	bl	80005e4 <__NVIC_SetPriorityGrouping>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800074e:	b580      	push	{r7, lr}
 8000750:	b086      	sub	sp, #24
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	60b9      	str	r1, [r7, #8]
 8000758:	607a      	str	r2, [r7, #4]
 800075a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000760:	f7ff ff64 	bl	800062c <__NVIC_GetPriorityGrouping>
 8000764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	68b9      	ldr	r1, [r7, #8]
 800076a:	6978      	ldr	r0, [r7, #20]
 800076c:	f7ff ffb2 	bl	80006d4 <NVIC_EncodePriority>
 8000770:	4602      	mov	r2, r0
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4611      	mov	r1, r2
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff81 	bl	8000680 <__NVIC_SetPriority>
}
 800077e:	bf00      	nop
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff57 	bl	8000648 <__NVIC_EnableIRQ>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b08b      	sub	sp, #44	; 0x2c
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007b6:	e169      	b.n	8000a8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007b8:	2201      	movs	r2, #1
 80007ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	69fa      	ldr	r2, [r7, #28]
 80007c8:	4013      	ands	r3, r2
 80007ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007cc:	69ba      	ldr	r2, [r7, #24]
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	f040 8158 	bne.w	8000a86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	4a9a      	ldr	r2, [pc, #616]	; (8000a44 <HAL_GPIO_Init+0x2a0>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d05e      	beq.n	800089e <HAL_GPIO_Init+0xfa>
 80007e0:	4a98      	ldr	r2, [pc, #608]	; (8000a44 <HAL_GPIO_Init+0x2a0>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d875      	bhi.n	80008d2 <HAL_GPIO_Init+0x12e>
 80007e6:	4a98      	ldr	r2, [pc, #608]	; (8000a48 <HAL_GPIO_Init+0x2a4>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d058      	beq.n	800089e <HAL_GPIO_Init+0xfa>
 80007ec:	4a96      	ldr	r2, [pc, #600]	; (8000a48 <HAL_GPIO_Init+0x2a4>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d86f      	bhi.n	80008d2 <HAL_GPIO_Init+0x12e>
 80007f2:	4a96      	ldr	r2, [pc, #600]	; (8000a4c <HAL_GPIO_Init+0x2a8>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d052      	beq.n	800089e <HAL_GPIO_Init+0xfa>
 80007f8:	4a94      	ldr	r2, [pc, #592]	; (8000a4c <HAL_GPIO_Init+0x2a8>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d869      	bhi.n	80008d2 <HAL_GPIO_Init+0x12e>
 80007fe:	4a94      	ldr	r2, [pc, #592]	; (8000a50 <HAL_GPIO_Init+0x2ac>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d04c      	beq.n	800089e <HAL_GPIO_Init+0xfa>
 8000804:	4a92      	ldr	r2, [pc, #584]	; (8000a50 <HAL_GPIO_Init+0x2ac>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d863      	bhi.n	80008d2 <HAL_GPIO_Init+0x12e>
 800080a:	4a92      	ldr	r2, [pc, #584]	; (8000a54 <HAL_GPIO_Init+0x2b0>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d046      	beq.n	800089e <HAL_GPIO_Init+0xfa>
 8000810:	4a90      	ldr	r2, [pc, #576]	; (8000a54 <HAL_GPIO_Init+0x2b0>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d85d      	bhi.n	80008d2 <HAL_GPIO_Init+0x12e>
 8000816:	2b12      	cmp	r3, #18
 8000818:	d82a      	bhi.n	8000870 <HAL_GPIO_Init+0xcc>
 800081a:	2b12      	cmp	r3, #18
 800081c:	d859      	bhi.n	80008d2 <HAL_GPIO_Init+0x12e>
 800081e:	a201      	add	r2, pc, #4	; (adr r2, 8000824 <HAL_GPIO_Init+0x80>)
 8000820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000824:	0800089f 	.word	0x0800089f
 8000828:	08000879 	.word	0x08000879
 800082c:	0800088b 	.word	0x0800088b
 8000830:	080008cd 	.word	0x080008cd
 8000834:	080008d3 	.word	0x080008d3
 8000838:	080008d3 	.word	0x080008d3
 800083c:	080008d3 	.word	0x080008d3
 8000840:	080008d3 	.word	0x080008d3
 8000844:	080008d3 	.word	0x080008d3
 8000848:	080008d3 	.word	0x080008d3
 800084c:	080008d3 	.word	0x080008d3
 8000850:	080008d3 	.word	0x080008d3
 8000854:	080008d3 	.word	0x080008d3
 8000858:	080008d3 	.word	0x080008d3
 800085c:	080008d3 	.word	0x080008d3
 8000860:	080008d3 	.word	0x080008d3
 8000864:	080008d3 	.word	0x080008d3
 8000868:	08000881 	.word	0x08000881
 800086c:	08000895 	.word	0x08000895
 8000870:	4a79      	ldr	r2, [pc, #484]	; (8000a58 <HAL_GPIO_Init+0x2b4>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d013      	beq.n	800089e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000876:	e02c      	b.n	80008d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	623b      	str	r3, [r7, #32]
          break;
 800087e:	e029      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	3304      	adds	r3, #4
 8000886:	623b      	str	r3, [r7, #32]
          break;
 8000888:	e024      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	68db      	ldr	r3, [r3, #12]
 800088e:	3308      	adds	r3, #8
 8000890:	623b      	str	r3, [r7, #32]
          break;
 8000892:	e01f      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	330c      	adds	r3, #12
 800089a:	623b      	str	r3, [r7, #32]
          break;
 800089c:	e01a      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d102      	bne.n	80008ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008a6:	2304      	movs	r3, #4
 80008a8:	623b      	str	r3, [r7, #32]
          break;
 80008aa:	e013      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d105      	bne.n	80008c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008b4:	2308      	movs	r3, #8
 80008b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	69fa      	ldr	r2, [r7, #28]
 80008bc:	611a      	str	r2, [r3, #16]
          break;
 80008be:	e009      	b.n	80008d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008c0:	2308      	movs	r3, #8
 80008c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	69fa      	ldr	r2, [r7, #28]
 80008c8:	615a      	str	r2, [r3, #20]
          break;
 80008ca:	e003      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
          break;
 80008d0:	e000      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          break;
 80008d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	2bff      	cmp	r3, #255	; 0xff
 80008d8:	d801      	bhi.n	80008de <HAL_GPIO_Init+0x13a>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	e001      	b.n	80008e2 <HAL_GPIO_Init+0x13e>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3304      	adds	r3, #4
 80008e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	2bff      	cmp	r3, #255	; 0xff
 80008e8:	d802      	bhi.n	80008f0 <HAL_GPIO_Init+0x14c>
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	e002      	b.n	80008f6 <HAL_GPIO_Init+0x152>
 80008f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f2:	3b08      	subs	r3, #8
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	210f      	movs	r1, #15
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	fa01 f303 	lsl.w	r3, r1, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	401a      	ands	r2, r3
 8000908:	6a39      	ldr	r1, [r7, #32]
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	fa01 f303 	lsl.w	r3, r1, r3
 8000910:	431a      	orrs	r2, r3
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 80b1 	beq.w	8000a86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000924:	4b4d      	ldr	r3, [pc, #308]	; (8000a5c <HAL_GPIO_Init+0x2b8>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a4c      	ldr	r2, [pc, #304]	; (8000a5c <HAL_GPIO_Init+0x2b8>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b4a      	ldr	r3, [pc, #296]	; (8000a5c <HAL_GPIO_Init+0x2b8>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800093c:	4a48      	ldr	r2, [pc, #288]	; (8000a60 <HAL_GPIO_Init+0x2bc>)
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	089b      	lsrs	r3, r3, #2
 8000942:	3302      	adds	r3, #2
 8000944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000948:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094c:	f003 0303 	and.w	r3, r3, #3
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	220f      	movs	r2, #15
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	4013      	ands	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a40      	ldr	r2, [pc, #256]	; (8000a64 <HAL_GPIO_Init+0x2c0>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d013      	beq.n	8000990 <HAL_GPIO_Init+0x1ec>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a3f      	ldr	r2, [pc, #252]	; (8000a68 <HAL_GPIO_Init+0x2c4>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d00d      	beq.n	800098c <HAL_GPIO_Init+0x1e8>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a3e      	ldr	r2, [pc, #248]	; (8000a6c <HAL_GPIO_Init+0x2c8>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d007      	beq.n	8000988 <HAL_GPIO_Init+0x1e4>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a3d      	ldr	r2, [pc, #244]	; (8000a70 <HAL_GPIO_Init+0x2cc>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d101      	bne.n	8000984 <HAL_GPIO_Init+0x1e0>
 8000980:	2303      	movs	r3, #3
 8000982:	e006      	b.n	8000992 <HAL_GPIO_Init+0x1ee>
 8000984:	2304      	movs	r3, #4
 8000986:	e004      	b.n	8000992 <HAL_GPIO_Init+0x1ee>
 8000988:	2302      	movs	r3, #2
 800098a:	e002      	b.n	8000992 <HAL_GPIO_Init+0x1ee>
 800098c:	2301      	movs	r3, #1
 800098e:	e000      	b.n	8000992 <HAL_GPIO_Init+0x1ee>
 8000990:	2300      	movs	r3, #0
 8000992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000994:	f002 0203 	and.w	r2, r2, #3
 8000998:	0092      	lsls	r2, r2, #2
 800099a:	4093      	lsls	r3, r2
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	4313      	orrs	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009a2:	492f      	ldr	r1, [pc, #188]	; (8000a60 <HAL_GPIO_Init+0x2bc>)
 80009a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a6:	089b      	lsrs	r3, r3, #2
 80009a8:	3302      	adds	r3, #2
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d006      	beq.n	80009ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009bc:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	492c      	ldr	r1, [pc, #176]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	600b      	str	r3, [r1, #0]
 80009c8:	e006      	b.n	80009d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009ca:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	43db      	mvns	r3, r3
 80009d2:	4928      	ldr	r1, [pc, #160]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009d4:	4013      	ands	r3, r2
 80009d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d006      	beq.n	80009f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009e4:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	4922      	ldr	r1, [pc, #136]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	604b      	str	r3, [r1, #4]
 80009f0:	e006      	b.n	8000a00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009f2:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009f4:	685a      	ldr	r2, [r3, #4]
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	491e      	ldr	r1, [pc, #120]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009fc:	4013      	ands	r3, r2
 80009fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d006      	beq.n	8000a1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 8000a0e:	689a      	ldr	r2, [r3, #8]
 8000a10:	4918      	ldr	r1, [pc, #96]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	608b      	str	r3, [r1, #8]
 8000a18:	e006      	b.n	8000a28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 8000a1c:	689a      	ldr	r2, [r3, #8]
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	43db      	mvns	r3, r3
 8000a22:	4914      	ldr	r1, [pc, #80]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d021      	beq.n	8000a78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 8000a36:	68da      	ldr	r2, [r3, #12]
 8000a38:	490e      	ldr	r1, [pc, #56]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	60cb      	str	r3, [r1, #12]
 8000a40:	e021      	b.n	8000a86 <HAL_GPIO_Init+0x2e2>
 8000a42:	bf00      	nop
 8000a44:	10320000 	.word	0x10320000
 8000a48:	10310000 	.word	0x10310000
 8000a4c:	10220000 	.word	0x10220000
 8000a50:	10210000 	.word	0x10210000
 8000a54:	10120000 	.word	0x10120000
 8000a58:	10110000 	.word	0x10110000
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40010000 	.word	0x40010000
 8000a64:	40010800 	.word	0x40010800
 8000a68:	40010c00 	.word	0x40010c00
 8000a6c:	40011000 	.word	0x40011000
 8000a70:	40011400 	.word	0x40011400
 8000a74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_GPIO_Init+0x304>)
 8000a7a:	68da      	ldr	r2, [r3, #12]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	4909      	ldr	r1, [pc, #36]	; (8000aa8 <HAL_GPIO_Init+0x304>)
 8000a82:	4013      	ands	r3, r2
 8000a84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a88:	3301      	adds	r3, #1
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a92:	fa22 f303 	lsr.w	r3, r2, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f47f ae8e 	bne.w	80007b8 <HAL_GPIO_Init+0x14>
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	372c      	adds	r7, #44	; 0x2c
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	40010400 	.word	0x40010400

08000aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	807b      	strh	r3, [r7, #2]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000abc:	787b      	ldrb	r3, [r7, #1]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ac2:	887a      	ldrh	r2, [r7, #2]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ac8:	e003      	b.n	8000ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	041a      	lsls	r2, r3, #16
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	611a      	str	r2, [r3, #16]
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000aee:	887a      	ldrh	r2, [r7, #2]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4013      	ands	r3, r2
 8000af4:	041a      	lsls	r2, r3, #16
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	43d9      	mvns	r1, r3
 8000afa:	887b      	ldrh	r3, [r7, #2]
 8000afc:	400b      	ands	r3, r1
 8000afe:	431a      	orrs	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	611a      	str	r2, [r3, #16]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b10:	b08b      	sub	sp, #44	; 0x2c
 8000b12:	af06      	add	r7, sp, #24
 8000b14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e0fd      	b.n	8000d1c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d106      	bne.n	8000b3a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f009 f945 	bl	8009dc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 fc02 	bl	8003350 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	687e      	ldr	r6, [r7, #4]
 8000b54:	466d      	mov	r5, sp
 8000b56:	f106 0410 	add.w	r4, r6, #16
 8000b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b5e:	6823      	ldr	r3, [r4, #0]
 8000b60:	602b      	str	r3, [r5, #0]
 8000b62:	1d33      	adds	r3, r6, #4
 8000b64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b66:	6838      	ldr	r0, [r7, #0]
 8000b68:	f002 fbcc 	bl	8003304 <USB_CoreInit>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d005      	beq.n	8000b7e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2202      	movs	r2, #2
 8000b76:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e0ce      	b.n	8000d1c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 fbfd 	bl	8003384 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	73fb      	strb	r3, [r7, #15]
 8000b8e:	e04c      	b.n	8000c2a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	1c5a      	adds	r2, r3, #1
 8000b96:	4613      	mov	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	440b      	add	r3, r1
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	6879      	ldr	r1, [r7, #4]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	4613      	mov	r3, r2
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4413      	add	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	440b      	add	r3, r1
 8000bb6:	7bfa      	ldrb	r2, [r7, #15]
 8000bb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000bba:	7bfa      	ldrb	r2, [r7, #15]
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	b298      	uxth	r0, r3
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	4413      	add	r3, r2
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	440b      	add	r3, r1
 8000bcc:	3336      	adds	r3, #54	; 0x36
 8000bce:	4602      	mov	r2, r0
 8000bd0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	4613      	mov	r3, r2
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	4413      	add	r3, r2
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	440b      	add	r3, r1
 8000be2:	3303      	adds	r3, #3
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000be8:	7bfa      	ldrb	r2, [r7, #15]
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	4613      	mov	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	440b      	add	r3, r1
 8000bf6:	3338      	adds	r3, #56	; 0x38
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000bfc:	7bfa      	ldrb	r2, [r7, #15]
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	440b      	add	r3, r1
 8000c0a:	333c      	adds	r3, #60	; 0x3c
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c10:	7bfa      	ldrb	r2, [r7, #15]
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	4613      	mov	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	440b      	add	r3, r1
 8000c1e:	3340      	adds	r3, #64	; 0x40
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	3301      	adds	r3, #1
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	7bfa      	ldrb	r2, [r7, #15]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d3ad      	bcc.n	8000b90 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e044      	b.n	8000cc4 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c3a:	7bfa      	ldrb	r2, [r7, #15]
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	440b      	add	r3, r1
 8000c48:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c50:	7bfa      	ldrb	r2, [r7, #15]
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	4613      	mov	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	440b      	add	r3, r1
 8000c5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c62:	7bfa      	ldrb	r2, [r7, #15]
 8000c64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c66:	7bfa      	ldrb	r2, [r7, #15]
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4413      	add	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	440b      	add	r3, r1
 8000c74:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c7c:	7bfa      	ldrb	r2, [r7, #15]
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	4613      	mov	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	440b      	add	r3, r1
 8000c8a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c92:	7bfa      	ldrb	r2, [r7, #15]
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ca8:	7bfa      	ldrb	r2, [r7, #15]
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	4613      	mov	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	440b      	add	r3, r1
 8000cb6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	7bfa      	ldrb	r2, [r7, #15]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d3b5      	bcc.n	8000c3a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	687e      	ldr	r6, [r7, #4]
 8000cd6:	466d      	mov	r5, sp
 8000cd8:	f106 0410 	add.w	r4, r6, #16
 8000cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	602b      	str	r3, [r5, #0]
 8000ce4:	1d33      	adds	r3, r6, #4
 8000ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ce8:	6838      	ldr	r0, [r7, #0]
 8000cea:	f002 fb57 	bl	800339c <USB_DevInit>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d005      	beq.n	8000d00 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e00d      	b.n	8000d1c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f004 fcc8 	bl	80056aa <USB_DevDisconnect>

  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d101      	bne.n	8000d3a <HAL_PCD_Start+0x16>
 8000d36:	2302      	movs	r3, #2
 8000d38:	e016      	b.n	8000d68 <HAL_PCD_Start+0x44>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 faec 	bl	8003324 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f009 faab 	bl	800a2aa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f004 fc9c 	bl	8005696 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f004 fc9e 	bl	80056be <USB_ReadInterrupts>
 8000d82:	4603      	mov	r3, r0
 8000d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d8c:	d102      	bne.n	8000d94 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f000 fb61 	bl	8001456 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 fc90 	bl	80056be <USB_ReadInterrupts>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000da8:	d112      	bne.n	8000dd0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dbc:	b292      	uxth	r2, r2
 8000dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f009 f879 	bl	8009eba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000dc8:	2100      	movs	r1, #0
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 f925 	bl	800101a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 fc72 	bl	80056be <USB_ReadInterrupts>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000de4:	d10b      	bne.n	8000dfe <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000df8:	b292      	uxth	r2, r2
 8000dfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f004 fc5b 	bl	80056be <USB_ReadInterrupts>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e12:	d10b      	bne.n	8000e2c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e26:	b292      	uxth	r2, r2
 8000e28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f004 fc44 	bl	80056be <USB_ReadInterrupts>
 8000e36:	4603      	mov	r3, r0
 8000e38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e40:	d126      	bne.n	8000e90 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f022 0204 	bic.w	r2, r2, #4
 8000e54:	b292      	uxth	r2, r2
 8000e56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f022 0208 	bic.w	r2, r2, #8
 8000e6c:	b292      	uxth	r2, r2
 8000e6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f009 f85a 	bl	8009f2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e8a:	b292      	uxth	r2, r2
 8000e8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f004 fc12 	bl	80056be <USB_ReadInterrupts>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ea4:	f040 8084 	bne.w	8000fb0 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	77fb      	strb	r3, [r7, #31]
 8000eac:	e011      	b.n	8000ed2 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	7ffb      	ldrb	r3, [r7, #31]
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	441a      	add	r2, r3
 8000eba:	7ffb      	ldrb	r3, [r7, #31]
 8000ebc:	8812      	ldrh	r2, [r2, #0]
 8000ebe:	b292      	uxth	r2, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	f107 0120 	add.w	r1, r7, #32
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000ecc:	7ffb      	ldrb	r3, [r7, #31]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	77fb      	strb	r3, [r7, #31]
 8000ed2:	7ffb      	ldrb	r3, [r7, #31]
 8000ed4:	2b07      	cmp	r3, #7
 8000ed6:	d9ea      	bls.n	8000eae <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0201 	orr.w	r2, r2, #1
 8000eea:	b292      	uxth	r2, r2
 8000eec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0201 	bic.w	r2, r2, #1
 8000f02:	b292      	uxth	r2, r2
 8000f04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000f08:	bf00      	nop
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0f6      	beq.n	8000f0a <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	77fb      	strb	r3, [r7, #31]
 8000f38:	e010      	b.n	8000f5c <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000f3a:	7ffb      	ldrb	r3, [r7, #31]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	6812      	ldr	r2, [r2, #0]
 8000f40:	4611      	mov	r1, r2
 8000f42:	7ffa      	ldrb	r2, [r7, #31]
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	440a      	add	r2, r1
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	f107 0120 	add.w	r1, r7, #32
 8000f4e:	440b      	add	r3, r1
 8000f50:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000f54:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000f56:	7ffb      	ldrb	r3, [r7, #31]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	77fb      	strb	r3, [r7, #31]
 8000f5c:	7ffb      	ldrb	r3, [r7, #31]
 8000f5e:	2b07      	cmp	r3, #7
 8000f60:	d9eb      	bls.n	8000f3a <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f042 0208 	orr.w	r2, r2, #8
 8000f74:	b292      	uxth	r2, r2
 8000f76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f8c:	b292      	uxth	r2, r2
 8000f8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f042 0204 	orr.w	r2, r2, #4
 8000fa4:	b292      	uxth	r2, r2
 8000fa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f008 ffa4 	bl	8009ef8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f004 fb82 	bl	80056be <USB_ReadInterrupts>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fc4:	d10e      	bne.n	8000fe4 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fd8:	b292      	uxth	r2, r2
 8000fda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f008 ff5d 	bl	8009e9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f004 fb68 	bl	80056be <USB_ReadInterrupts>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ff8:	d10b      	bne.n	8001012 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001002:	b29a      	uxth	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800100c:	b292      	uxth	r2, r2
 800100e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001012:	bf00      	nop
 8001014:	3720      	adds	r7, #32
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800102c:	2b01      	cmp	r3, #1
 800102e:	d101      	bne.n	8001034 <HAL_PCD_SetAddress+0x1a>
 8001030:	2302      	movs	r3, #2
 8001032:	e013      	b.n	800105c <HAL_PCD_SetAddress+0x42>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	78fa      	ldrb	r2, [r7, #3]
 8001040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	78fa      	ldrb	r2, [r7, #3]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f004 fb0f 	bl	8005670 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	4608      	mov	r0, r1
 800106e:	4611      	mov	r1, r2
 8001070:	461a      	mov	r2, r3
 8001072:	4603      	mov	r3, r0
 8001074:	70fb      	strb	r3, [r7, #3]
 8001076:	460b      	mov	r3, r1
 8001078:	803b      	strh	r3, [r7, #0]
 800107a:	4613      	mov	r3, r2
 800107c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001082:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001086:	2b00      	cmp	r3, #0
 8001088:	da0e      	bge.n	80010a8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2201      	movs	r2, #1
 80010a4:	705a      	strb	r2, [r3, #1]
 80010a6:	e00e      	b.n	80010c6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	f003 0207 	and.w	r2, r3, #7
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2200      	movs	r2, #0
 80010c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010d2:	883a      	ldrh	r2, [r7, #0]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	78ba      	ldrb	r2, [r7, #2]
 80010dc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	785b      	ldrb	r3, [r3, #1]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d004      	beq.n	80010f0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80010f0:	78bb      	ldrb	r3, [r7, #2]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d102      	bne.n	80010fc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001102:	2b01      	cmp	r3, #1
 8001104:	d101      	bne.n	800110a <HAL_PCD_EP_Open+0xa6>
 8001106:	2302      	movs	r3, #2
 8001108:	e00e      	b.n	8001128 <HAL_PCD_EP_Open+0xc4>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68f9      	ldr	r1, [r7, #12]
 8001118:	4618      	mov	r0, r3
 800111a:	f002 f95f 	bl	80033dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001126:	7afb      	ldrb	r3, [r7, #11]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800113c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001140:	2b00      	cmp	r3, #0
 8001142:	da0e      	bge.n	8001162 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2201      	movs	r2, #1
 800115e:	705a      	strb	r2, [r3, #1]
 8001160:	e00e      	b.n	8001180 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	f003 0207 	and.w	r2, r3, #7
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2200      	movs	r2, #0
 800117e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	b2da      	uxtb	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_PCD_EP_Close+0x6a>
 8001196:	2302      	movs	r3, #2
 8001198:	e00e      	b.n	80011b8 <HAL_PCD_EP_Close+0x88>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68f9      	ldr	r1, [r7, #12]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 fc81 	bl	8003ab0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	460b      	mov	r3, r1
 80011ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011d0:	7afb      	ldrb	r3, [r7, #11]
 80011d2:	f003 0207 	and.w	r2, r3, #7
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	4413      	add	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	2200      	movs	r2, #0
 80011fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001200:	7afb      	ldrb	r3, [r7, #11]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	b2da      	uxtb	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800120c:	7afb      	ldrb	r3, [r7, #11]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	2b00      	cmp	r3, #0
 8001214:	d106      	bne.n	8001224 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6979      	ldr	r1, [r7, #20]
 800121c:	4618      	mov	r0, r3
 800121e:	f002 fe33 	bl	8003e88 <USB_EPStartXfer>
 8001222:	e005      	b.n	8001230 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6979      	ldr	r1, [r7, #20]
 800122a:	4618      	mov	r0, r3
 800122c:	f002 fe2c 	bl	8003e88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	460b      	mov	r3, r1
 8001244:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	f003 0207 	and.w	r2, r3, #7
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	440b      	add	r3, r1
 8001258:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800125c:	681b      	ldr	r3, [r3, #0]
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	460b      	mov	r3, r1
 8001276:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001278:	7afb      	ldrb	r3, [r7, #11]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	2201      	movs	r2, #1
 80012b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012c0:	7afb      	ldrb	r3, [r7, #11]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d106      	bne.n	80012d8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6979      	ldr	r1, [r7, #20]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 fdd9 	bl	8003e88 <USB_EPStartXfer>
 80012d6:	e005      	b.n	80012e4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6979      	ldr	r1, [r7, #20]
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fdd2 	bl	8003e88 <USB_EPStartXfer>
  }

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	f003 0207 	and.w	r2, r3, #7
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	429a      	cmp	r2, r3
 8001306:	d901      	bls.n	800130c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e04c      	b.n	80013a6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800130c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001310:	2b00      	cmp	r3, #0
 8001312:	da0e      	bge.n	8001332 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	4413      	add	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2201      	movs	r2, #1
 800132e:	705a      	strb	r2, [r3, #1]
 8001330:	e00c      	b.n	800134c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001332:	78fa      	ldrb	r2, [r7, #3]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2201      	movs	r2, #1
 8001350:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	b2da      	uxtb	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <HAL_PCD_EP_SetStall+0x7e>
 8001368:	2302      	movs	r3, #2
 800136a:	e01c      	b.n	80013a6 <HAL_PCD_EP_SetStall+0xb8>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68f9      	ldr	r1, [r7, #12]
 800137a:	4618      	mov	r0, r3
 800137c:	f004 f87b 	bl	8005476 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	2b00      	cmp	r3, #0
 8001388:	d108      	bne.n	800139c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f004 f9a0 	bl	80056dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	460b      	mov	r3, r1
 80013b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80013ba:	78fb      	ldrb	r3, [r7, #3]
 80013bc:	f003 020f 	and.w	r2, r3, #15
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d901      	bls.n	80013cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e040      	b.n	800144e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	da0e      	bge.n	80013f2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2201      	movs	r2, #1
 80013ee:	705a      	strb	r2, [r3, #1]
 80013f0:	e00e      	b.n	8001410 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	f003 0207 	and.w	r2, r3, #7
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2200      	movs	r2, #0
 8001414:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001416:	78fb      	ldrb	r3, [r7, #3]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	b2da      	uxtb	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <HAL_PCD_EP_ClrStall+0x82>
 800142c:	2302      	movs	r3, #2
 800142e:	e00e      	b.n	800144e <HAL_PCD_EP_ClrStall+0xa0>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68f9      	ldr	r1, [r7, #12]
 800143e:	4618      	mov	r0, r3
 8001440:	f004 f869 	bl	8005516 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b08e      	sub	sp, #56	; 0x38
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800145e:	e2ec      	b.n	8001a3a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001468:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800146a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001476:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800147a:	2b00      	cmp	r3, #0
 800147c:	f040 8161 	bne.w	8001742 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001480:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	2b00      	cmp	r3, #0
 8001488:	d152      	bne.n	8001530 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800149a:	81fb      	strh	r3, [r7, #14]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	89fb      	ldrh	r3, [r7, #14]
 80014a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3328      	adds	r3, #40	; 0x28
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014bc:	b29b      	uxth	r3, r3
 80014be:	461a      	mov	r2, r3
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	4413      	add	r3, r2
 80014c8:	3302      	adds	r3, #2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	4413      	add	r3, r2
 80014d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	695a      	ldr	r2, [r3, #20]
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	441a      	add	r2, r3
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80014ee:	2100      	movs	r1, #0
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f008 fcba 	bl	8009e6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 829b 	beq.w	8001a3a <PCD_EP_ISR_Handler+0x5e4>
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	f040 8296 	bne.w	8001a3a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800151a:	b2da      	uxtb	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	b292      	uxth	r2, r2
 8001522:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800152e:	e284      	b.n	8001a3a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001540:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001546:	2b00      	cmp	r3, #0
 8001548:	d034      	beq.n	80015b4 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001552:	b29b      	uxth	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4413      	add	r3, r2
 800155e:	3306      	adds	r3, #6
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	4413      	add	r3, r2
 8001568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001588:	b29b      	uxth	r3, r3
 800158a:	f004 f8f7 	bl	800577c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	b29a      	uxth	r2, r3
 8001596:	f640 738f 	movw	r3, #3983	; 0xf8f
 800159a:	4013      	ands	r3, r2
 800159c:	823b      	strh	r3, [r7, #16]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	8a3a      	ldrh	r2, [r7, #16]
 80015a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015a8:	b292      	uxth	r2, r2
 80015aa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f008 fc2f 	bl	8009e10 <HAL_PCD_SetupStageCallback>
 80015b2:	e242      	b.n	8001a3a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80015b4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f280 823e 	bge.w	8001a3a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80015ca:	4013      	ands	r3, r2
 80015cc:	83bb      	strh	r3, [r7, #28]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	8bba      	ldrh	r2, [r7, #28]
 80015d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015d8:	b292      	uxth	r2, r2
 80015da:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	3306      	adds	r3, #6
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	4413      	add	r3, r2
 80015fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d019      	beq.n	8001644 <PCD_EP_ISR_Handler+0x1ee>
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d015      	beq.n	8001644 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	6959      	ldr	r1, [r3, #20]
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001628:	b29b      	uxth	r3, r3
 800162a:	f004 f8a7 	bl	800577c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	695a      	ldr	r2, [r3, #20]
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	441a      	add	r2, r3
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800163c:	2100      	movs	r1, #0
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f008 fbf8 	bl	8009e34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	b29b      	uxth	r3, r3
 800164c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001650:	2b00      	cmp	r3, #0
 8001652:	f040 81f2 	bne.w	8001a3a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	61bb      	str	r3, [r7, #24]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001664:	b29b      	uxth	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	4413      	add	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d112      	bne.n	80016a4 <PCD_EP_ISR_Handler+0x24e>
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	b29b      	uxth	r3, r3
 8001684:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001688:	b29a      	uxth	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	801a      	strh	r2, [r3, #0]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800169c:	b29a      	uxth	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	801a      	strh	r2, [r3, #0]
 80016a2:	e02f      	b.n	8001704 <PCD_EP_ISR_Handler+0x2ae>
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	2b3e      	cmp	r3, #62	; 0x3e
 80016aa:	d813      	bhi.n	80016d4 <PCD_EP_ISR_Handler+0x27e>
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	085b      	lsrs	r3, r3, #1
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <PCD_EP_ISR_Handler+0x270>
 80016c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c2:	3301      	adds	r3, #1
 80016c4:	633b      	str	r3, [r7, #48]	; 0x30
 80016c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	029b      	lsls	r3, r3, #10
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	801a      	strh	r2, [r3, #0]
 80016d2:	e017      	b.n	8001704 <PCD_EP_ISR_Handler+0x2ae>
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	095b      	lsrs	r3, r3, #5
 80016da:	633b      	str	r3, [r7, #48]	; 0x30
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	f003 031f 	and.w	r3, r3, #31
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <PCD_EP_ISR_Handler+0x298>
 80016e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ea:	3b01      	subs	r3, #1
 80016ec:	633b      	str	r3, [r7, #48]	; 0x30
 80016ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	029b      	lsls	r3, r3, #10
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016fe:	b29a      	uxth	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	b29b      	uxth	r3, r3
 800170c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001714:	827b      	strh	r3, [r7, #18]
 8001716:	8a7b      	ldrh	r3, [r7, #18]
 8001718:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800171c:	827b      	strh	r3, [r7, #18]
 800171e:	8a7b      	ldrh	r3, [r7, #18]
 8001720:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001724:	827b      	strh	r3, [r7, #18]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	8a7b      	ldrh	r3, [r7, #18]
 800172c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800173c:	b29b      	uxth	r3, r3
 800173e:	8013      	strh	r3, [r2, #0]
 8001740:	e17b      	b.n	8001a3a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001754:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001758:	2b00      	cmp	r3, #0
 800175a:	f280 80ea 	bge.w	8001932 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	b29a      	uxth	r2, r3
 8001770:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001774:	4013      	ands	r3, r2
 8001776:	853b      	strh	r3, [r7, #40]	; 0x28
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001788:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800178c:	b292      	uxth	r2, r2
 800178e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001790:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	4413      	add	r3, r2
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	7b1b      	ldrb	r3, [r3, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d122      	bne.n	80017f4 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	461a      	mov	r2, r3
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4413      	add	r3, r2
 80017c2:	3306      	adds	r3, #6
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017d6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80017d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 8087 	beq.w	80018ee <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	6959      	ldr	r1, [r3, #20]
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	88da      	ldrh	r2, [r3, #6]
 80017ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017ee:	f003 ffc5 	bl	800577c <USB_ReadPMA>
 80017f2:	e07c      	b.n	80018ee <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	78db      	ldrb	r3, [r3, #3]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d108      	bne.n	800180e <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80017fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80017fe:	461a      	mov	r2, r3
 8001800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f927 	bl	8001a56 <HAL_PCD_EP_DB_Receive>
 8001808:	4603      	mov	r3, r0
 800180a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800180c:	e06f      	b.n	80018ee <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	b29b      	uxth	r3, r3
 8001820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001828:	847b      	strh	r3, [r7, #34]	; 0x22
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	441a      	add	r2, r3
 8001838:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800183a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800183e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001846:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800184a:	b29b      	uxth	r3, r3
 800184c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	b29b      	uxth	r3, r3
 8001860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d021      	beq.n	80018ac <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001870:	b29b      	uxth	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4413      	add	r3, r2
 800187c:	3302      	adds	r3, #2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	4413      	add	r3, r2
 8001886:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001890:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001892:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001894:	2b00      	cmp	r3, #0
 8001896:	d02a      	beq.n	80018ee <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	6959      	ldr	r1, [r3, #20]
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	891a      	ldrh	r2, [r3, #8]
 80018a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018a6:	f003 ff69 	bl	800577c <USB_ReadPMA>
 80018aa:	e020      	b.n	80018ee <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4413      	add	r3, r2
 80018c0:	3306      	adds	r3, #6
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018d4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80018d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d008      	beq.n	80018ee <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	6959      	ldr	r1, [r3, #20]
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	895a      	ldrh	r2, [r3, #10]
 80018e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018ea:	f003 ff47 	bl	800577c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	69da      	ldr	r2, [r3, #28]
 80018f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018f4:	441a      	add	r2, r3
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	695a      	ldr	r2, [r3, #20]
 80018fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001900:	441a      	add	r2, r3
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d004      	beq.n	8001918 <PCD_EP_ISR_Handler+0x4c2>
 800190e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	429a      	cmp	r2, r3
 8001916:	d206      	bcs.n	8001926 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f008 fa88 	bl	8009e34 <HAL_PCD_DataOutStageCallback>
 8001924:	e005      	b.n	8001932 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800192c:	4618      	mov	r0, r3
 800192e:	f002 faab 	bl	8003e88 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001932:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001938:	2b00      	cmp	r3, #0
 800193a:	d07e      	beq.n	8001a3a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800193c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	b29b      	uxth	r3, r3
 8001962:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800196a:	843b      	strh	r3, [r7, #32]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	441a      	add	r2, r3
 800197a:	8c3b      	ldrh	r3, [r7, #32]
 800197c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001984:	b29b      	uxth	r3, r3
 8001986:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	78db      	ldrb	r3, [r3, #3]
 800198c:	2b03      	cmp	r3, #3
 800198e:	d00c      	beq.n	80019aa <PCD_EP_ISR_Handler+0x554>
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	78db      	ldrb	r3, [r3, #3]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800199c:	2b02      	cmp	r3, #2
 800199e:	d146      	bne.n	8001a2e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80019a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d141      	bne.n	8001a2e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	4413      	add	r3, r2
 80019be:	3302      	adds	r3, #2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019d2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	699a      	ldr	r2, [r3, #24]
 80019d8:	8bfb      	ldrh	r3, [r7, #30]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d906      	bls.n	80019ec <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	699a      	ldr	r2, [r3, #24]
 80019e2:	8bfb      	ldrh	r3, [r7, #30]
 80019e4:	1ad2      	subs	r2, r2, r3
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	619a      	str	r2, [r3, #24]
 80019ea:	e002      	b.n	80019f2 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	2200      	movs	r2, #0
 80019f0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d106      	bne.n	8001a08 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	4619      	mov	r1, r3
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f008 fa32 	bl	8009e6a <HAL_PCD_DataInStageCallback>
 8001a06:	e018      	b.n	8001a3a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	8bfb      	ldrh	r3, [r7, #30]
 8001a0e:	441a      	add	r2, r3
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	69da      	ldr	r2, [r3, #28]
 8001a18:	8bfb      	ldrh	r3, [r7, #30]
 8001a1a:	441a      	add	r2, r3
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 fa2e 	bl	8003e88 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001a2c:	e005      	b.n	8001a3a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001a2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a30:	461a      	mov	r2, r3
 8001a32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f91b 	bl	8001c70 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f6ff ad0a 	blt.w	8001460 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3738      	adds	r7, #56	; 0x38
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b088      	sub	sp, #32
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	4613      	mov	r3, r2
 8001a62:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d07e      	beq.n	8001b6c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	3302      	adds	r3, #2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a96:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	699a      	ldr	r2, [r3, #24]
 8001a9c:	8b7b      	ldrh	r3, [r7, #26]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d306      	bcc.n	8001ab0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	699a      	ldr	r2, [r3, #24]
 8001aa6:	8b7b      	ldrh	r3, [r7, #26]
 8001aa8:	1ad2      	subs	r2, r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	619a      	str	r2, [r3, #24]
 8001aae:	e002      	b.n	8001ab6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d123      	bne.n	8001b06 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad8:	833b      	strh	r3, [r7, #24]
 8001ada:	8b3b      	ldrh	r3, [r7, #24]
 8001adc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ae0:	833b      	strh	r3, [r7, #24]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	441a      	add	r2, r3
 8001af0:	8b3b      	ldrh	r3, [r7, #24]
 8001af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01f      	beq.n	8001b50 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b2a:	82fb      	strh	r3, [r7, #22]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	441a      	add	r2, r3
 8001b3a:	8afb      	ldrh	r3, [r7, #22]
 8001b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001b50:	8b7b      	ldrh	r3, [r7, #26]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8087 	beq.w	8001c66 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	6959      	ldr	r1, [r3, #20]
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	891a      	ldrh	r2, [r3, #8]
 8001b64:	8b7b      	ldrh	r3, [r7, #26]
 8001b66:	f003 fe09 	bl	800577c <USB_ReadPMA>
 8001b6a:	e07c      	b.n	8001c66 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4413      	add	r3, r2
 8001b80:	3306      	adds	r3, #6
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	4413      	add	r3, r2
 8001b8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	699a      	ldr	r2, [r3, #24]
 8001b9a:	8b7b      	ldrh	r3, [r7, #26]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d306      	bcc.n	8001bae <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	699a      	ldr	r2, [r3, #24]
 8001ba4:	8b7b      	ldrh	r3, [r7, #26]
 8001ba6:	1ad2      	subs	r2, r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	619a      	str	r2, [r3, #24]
 8001bac:	e002      	b.n	8001bb4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d123      	bne.n	8001c04 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bd6:	83fb      	strh	r3, [r7, #30]
 8001bd8:	8bfb      	ldrh	r3, [r7, #30]
 8001bda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bde:	83fb      	strh	r3, [r7, #30]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	441a      	add	r2, r3
 8001bee:	8bfb      	ldrh	r3, [r7, #30]
 8001bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d11f      	bne.n	8001c4e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c28:	83bb      	strh	r3, [r7, #28]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	441a      	add	r2, r3
 8001c38:	8bbb      	ldrh	r3, [r7, #28]
 8001c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c4e:	8b7b      	ldrh	r3, [r7, #26]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	6959      	ldr	r1, [r3, #20]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	895a      	ldrh	r2, [r3, #10]
 8001c60:	8b7b      	ldrh	r3, [r7, #26]
 8001c62:	f003 fd8b 	bl	800577c <USB_ReadPMA>
    }
  }

  return count;
 8001c66:	8b7b      	ldrh	r3, [r7, #26]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3720      	adds	r7, #32
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b0a2      	sub	sp, #136	; 0x88
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 81c7 	beq.w	8002018 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	699a      	ldr	r2, [r3, #24]
 8001cba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d907      	bls.n	8001cd2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	699a      	ldr	r2, [r3, #24]
 8001cc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	619a      	str	r2, [r3, #24]
 8001cd0:	e002      	b.n	8001cd8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f040 80b9 	bne.w	8001e54 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	785b      	ldrb	r3, [r3, #1]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d126      	bne.n	8001d38 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfe:	4413      	add	r3, r2
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	011a      	lsls	r2, r3, #4
 8001d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	801a      	strh	r2, [r3, #0]
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	801a      	strh	r2, [r3, #0]
 8001d36:	e01a      	b.n	8001d6e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	785b      	ldrb	r3, [r3, #1]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d116      	bne.n	8001d6e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	633b      	str	r3, [r7, #48]	; 0x30
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d54:	4413      	add	r3, r2
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	011a      	lsls	r2, r3, #4
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d60:	4413      	add	r3, r2
 8001d62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	623b      	str	r3, [r7, #32]
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	785b      	ldrb	r3, [r3, #1]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d126      	bne.n	8001dca <HAL_PCD_EP_DB_Transmit+0x15a>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	4413      	add	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	011a      	lsls	r2, r3, #4
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	801a      	strh	r2, [r3, #0]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	801a      	strh	r2, [r3, #0]
 8001dc8:	e017      	b.n	8001dfa <HAL_PCD_EP_DB_Transmit+0x18a>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	785b      	ldrb	r3, [r3, #1]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d113      	bne.n	8001dfa <HAL_PCD_EP_DB_Transmit+0x18a>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	4413      	add	r3, r2
 8001de2:	623b      	str	r3, [r7, #32]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	011a      	lsls	r2, r3, #4
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	4413      	add	r3, r2
 8001dee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001df2:	61fb      	str	r3, [r7, #28]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	2200      	movs	r2, #0
 8001df8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f008 f832 	bl	8009e6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 82d4 	beq.w	80023ba <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e2c:	827b      	strh	r3, [r7, #18]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	441a      	add	r2, r3
 8001e3c:	8a7b      	ldrh	r3, [r7, #18]
 8001e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	8013      	strh	r3, [r2, #0]
 8001e52:	e2b2      	b.n	80023ba <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d021      	beq.n	8001ea2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e78:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	441a      	add	r2, r3
 8001e8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	f040 8286 	bne.w	80023ba <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001eb6:	441a      	add	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	69da      	ldr	r2, [r3, #28]
 8001ec0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ec4:	441a      	add	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	6a1a      	ldr	r2, [r3, #32]
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d309      	bcc.n	8001eea <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	6a1a      	ldr	r2, [r3, #32]
 8001ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ee2:	1ad2      	subs	r2, r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	621a      	str	r2, [r3, #32]
 8001ee8:	e015      	b.n	8001f16 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d107      	bne.n	8001f02 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8001ef2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ef6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f00:	e009      	b.n	8001f16 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2200      	movs	r2, #0
 8001f14:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	785b      	ldrb	r3, [r3, #1]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d155      	bne.n	8001fca <HAL_PCD_EP_DB_Transmit+0x35a>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f32:	4413      	add	r3, r2
 8001f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	011a      	lsls	r2, r3, #4
 8001f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f3e:	4413      	add	r3, r2
 8001f40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f44:	637b      	str	r3, [r7, #52]	; 0x34
 8001f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d112      	bne.n	8001f72 <HAL_PCD_EP_DB_Transmit+0x302>
 8001f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5a:	801a      	strh	r2, [r3, #0]
 8001f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f6e:	801a      	strh	r2, [r3, #0]
 8001f70:	e047      	b.n	8002002 <HAL_PCD_EP_DB_Transmit+0x392>
 8001f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f74:	2b3e      	cmp	r3, #62	; 0x3e
 8001f76:	d811      	bhi.n	8001f9c <HAL_PCD_EP_DB_Transmit+0x32c>
 8001f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f7a:	085b      	lsrs	r3, r3, #1
 8001f7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d002      	beq.n	8001f8e <HAL_PCD_EP_DB_Transmit+0x31e>
 8001f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	029b      	lsls	r3, r3, #10
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f98:	801a      	strh	r2, [r3, #0]
 8001f9a:	e032      	b.n	8002002 <HAL_PCD_EP_DB_Transmit+0x392>
 8001f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <HAL_PCD_EP_DB_Transmit+0x342>
 8001fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	029b      	lsls	r3, r3, #10
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc6:	801a      	strh	r2, [r3, #0]
 8001fc8:	e01b      	b.n	8002002 <HAL_PCD_EP_DB_Transmit+0x392>
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	785b      	ldrb	r3, [r3, #1]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d117      	bne.n	8002002 <HAL_PCD_EP_DB_Transmit+0x392>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe6:	4413      	add	r3, r2
 8001fe8:	643b      	str	r3, [r7, #64]	; 0x40
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	011a      	lsls	r2, r3, #4
 8001ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002000:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	6959      	ldr	r1, [r3, #20]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	891a      	ldrh	r2, [r3, #8]
 800200e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002010:	b29b      	uxth	r3, r3
 8002012:	f003 fb6e 	bl	80056f2 <USB_WritePMA>
 8002016:	e1d0      	b.n	80023ba <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002020:	b29b      	uxth	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	3306      	adds	r3, #6
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002040:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	699a      	ldr	r2, [r3, #24]
 8002048:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800204c:	429a      	cmp	r2, r3
 800204e:	d307      	bcc.n	8002060 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	699a      	ldr	r2, [r3, #24]
 8002054:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002058:	1ad2      	subs	r2, r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	619a      	str	r2, [r3, #24]
 800205e:	e002      	b.n	8002066 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2200      	movs	r2, #0
 8002064:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 80c4 	bne.w	80021f8 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	785b      	ldrb	r3, [r3, #1]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d126      	bne.n	80020c6 <HAL_PCD_EP_DB_Transmit+0x456>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002086:	b29b      	uxth	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800208c:	4413      	add	r3, r2
 800208e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	011a      	lsls	r2, r3, #4
 8002096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002098:	4413      	add	r3, r2
 800209a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800209e:	66bb      	str	r3, [r7, #104]	; 0x68
 80020a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020ae:	801a      	strh	r2, [r3, #0]
 80020b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020be:	b29a      	uxth	r2, r3
 80020c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020c2:	801a      	strh	r2, [r3, #0]
 80020c4:	e01a      	b.n	80020fc <HAL_PCD_EP_DB_Transmit+0x48c>
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	785b      	ldrb	r3, [r3, #1]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d116      	bne.n	80020fc <HAL_PCD_EP_DB_Transmit+0x48c>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	677b      	str	r3, [r7, #116]	; 0x74
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020dc:	b29b      	uxth	r3, r3
 80020de:	461a      	mov	r2, r3
 80020e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020e2:	4413      	add	r3, r2
 80020e4:	677b      	str	r3, [r7, #116]	; 0x74
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	011a      	lsls	r2, r3, #4
 80020ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020ee:	4413      	add	r3, r2
 80020f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020f4:	673b      	str	r3, [r7, #112]	; 0x70
 80020f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020f8:	2200      	movs	r2, #0
 80020fa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	67bb      	str	r3, [r7, #120]	; 0x78
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	785b      	ldrb	r3, [r3, #1]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d12f      	bne.n	800216a <HAL_PCD_EP_DB_Transmit+0x4fa>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800211a:	b29b      	uxth	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002122:	4413      	add	r3, r2
 8002124:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	011a      	lsls	r2, r3, #4
 800212e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002132:	4413      	add	r3, r2
 8002134:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800213c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002148:	b29a      	uxth	r2, r3
 800214a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800214e:	801a      	strh	r2, [r3, #0]
 8002150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800215c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002160:	b29a      	uxth	r2, r3
 8002162:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002166:	801a      	strh	r2, [r3, #0]
 8002168:	e017      	b.n	800219a <HAL_PCD_EP_DB_Transmit+0x52a>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	785b      	ldrb	r3, [r3, #1]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d113      	bne.n	800219a <HAL_PCD_EP_DB_Transmit+0x52a>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800217a:	b29b      	uxth	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002180:	4413      	add	r3, r2
 8002182:	67bb      	str	r3, [r7, #120]	; 0x78
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	011a      	lsls	r2, r3, #4
 800218a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800218c:	4413      	add	r3, r2
 800218e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002192:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002194:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002196:	2200      	movs	r2, #0
 8002198:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	4619      	mov	r1, r3
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f007 fe62 	bl	8009e6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f040 8104 	bne.w	80023ba <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	441a      	add	r2, r3
 80021de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80021e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	8013      	strh	r3, [r2, #0]
 80021f6:	e0e0      	b.n	80023ba <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d121      	bne.n	8002246 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	b29b      	uxth	r3, r3
 8002214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	441a      	add	r2, r3
 800222e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800223a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800223e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002242:	b29b      	uxth	r3, r3
 8002244:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800224c:	2b01      	cmp	r3, #1
 800224e:	f040 80b4 	bne.w	80023ba <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800225a:	441a      	add	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	69da      	ldr	r2, [r3, #28]
 8002264:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002268:	441a      	add	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	6a1a      	ldr	r2, [r3, #32]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	429a      	cmp	r2, r3
 8002278:	d309      	bcc.n	800228e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	6a1a      	ldr	r2, [r3, #32]
 8002284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002286:	1ad2      	subs	r2, r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	621a      	str	r2, [r3, #32]
 800228c:	e015      	b.n	80022ba <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d107      	bne.n	80022a6 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002296:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800229a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022a4:	e009      	b.n	80022ba <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2200      	movs	r2, #0
 80022b0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	667b      	str	r3, [r7, #100]	; 0x64
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	785b      	ldrb	r3, [r3, #1]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d155      	bne.n	8002374 <HAL_PCD_EP_DB_Transmit+0x704>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022dc:	4413      	add	r3, r2
 80022de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	011a      	lsls	r2, r3, #4
 80022e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022e8:	4413      	add	r3, r2
 80022ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80022f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d112      	bne.n	800231c <HAL_PCD_EP_DB_Transmit+0x6ac>
 80022f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002300:	b29a      	uxth	r2, r3
 8002302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002304:	801a      	strh	r2, [r3, #0]
 8002306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002314:	b29a      	uxth	r2, r3
 8002316:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002318:	801a      	strh	r2, [r3, #0]
 800231a:	e044      	b.n	80023a6 <HAL_PCD_EP_DB_Transmit+0x736>
 800231c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800231e:	2b3e      	cmp	r3, #62	; 0x3e
 8002320:	d811      	bhi.n	8002346 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002324:	085b      	lsrs	r3, r3, #1
 8002326:	657b      	str	r3, [r7, #84]	; 0x54
 8002328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002334:	3301      	adds	r3, #1
 8002336:	657b      	str	r3, [r7, #84]	; 0x54
 8002338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800233a:	b29b      	uxth	r3, r3
 800233c:	029b      	lsls	r3, r3, #10
 800233e:	b29a      	uxth	r2, r3
 8002340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002342:	801a      	strh	r2, [r3, #0]
 8002344:	e02f      	b.n	80023a6 <HAL_PCD_EP_DB_Transmit+0x736>
 8002346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	657b      	str	r3, [r7, #84]	; 0x54
 800234c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800234e:	f003 031f 	and.w	r3, r3, #31
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002358:	3b01      	subs	r3, #1
 800235a:	657b      	str	r3, [r7, #84]	; 0x54
 800235c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800235e:	b29b      	uxth	r3, r3
 8002360:	029b      	lsls	r3, r3, #10
 8002362:	b29b      	uxth	r3, r3
 8002364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800236c:	b29a      	uxth	r2, r3
 800236e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002370:	801a      	strh	r2, [r3, #0]
 8002372:	e018      	b.n	80023a6 <HAL_PCD_EP_DB_Transmit+0x736>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	785b      	ldrb	r3, [r3, #1]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d114      	bne.n	80023a6 <HAL_PCD_EP_DB_Transmit+0x736>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002384:	b29b      	uxth	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800238a:	4413      	add	r3, r2
 800238c:	667b      	str	r3, [r7, #100]	; 0x64
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	011a      	lsls	r2, r3, #4
 8002394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002396:	4413      	add	r3, r2
 8002398:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800239c:	663b      	str	r3, [r7, #96]	; 0x60
 800239e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023a4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	6959      	ldr	r1, [r3, #20]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	895a      	ldrh	r2, [r3, #10]
 80023b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	f003 f99c 	bl	80056f2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023d4:	823b      	strh	r3, [r7, #16]
 80023d6:	8a3b      	ldrh	r3, [r7, #16]
 80023d8:	f083 0310 	eor.w	r3, r3, #16
 80023dc:	823b      	strh	r3, [r7, #16]
 80023de:	8a3b      	ldrh	r3, [r7, #16]
 80023e0:	f083 0320 	eor.w	r3, r3, #32
 80023e4:	823b      	strh	r3, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	441a      	add	r2, r3
 80023f4:	8a3b      	ldrh	r3, [r7, #16]
 80023f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002406:	b29b      	uxth	r3, r3
 8002408:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3788      	adds	r7, #136	; 0x88
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	607b      	str	r3, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	817b      	strh	r3, [r7, #10]
 8002422:	4613      	mov	r3, r2
 8002424:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002426:	897b      	ldrh	r3, [r7, #10]
 8002428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242c:	b29b      	uxth	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00b      	beq.n	800244a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002432:	897b      	ldrh	r3, [r7, #10]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4413      	add	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e009      	b.n	800245e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800244a:	897a      	ldrh	r2, [r7, #10]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800245e:	893b      	ldrh	r3, [r7, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d107      	bne.n	8002474 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2200      	movs	r2, #0
 8002468:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	b29a      	uxth	r2, r3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	80da      	strh	r2, [r3, #6]
 8002472:	e00b      	b.n	800248c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2201      	movs	r2, #1
 8002478:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	b29a      	uxth	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	0c1b      	lsrs	r3, r3, #16
 8002486:	b29a      	uxth	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	371c      	adds	r7, #28
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e26c      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8087 	beq.w	80025c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024b8:	4b92      	ldr	r3, [pc, #584]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d00c      	beq.n	80024de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024c4:	4b8f      	ldr	r3, [pc, #572]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 030c 	and.w	r3, r3, #12
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d112      	bne.n	80024f6 <HAL_RCC_OscConfig+0x5e>
 80024d0:	4b8c      	ldr	r3, [pc, #560]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024dc:	d10b      	bne.n	80024f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024de:	4b89      	ldr	r3, [pc, #548]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d06c      	beq.n	80025c4 <HAL_RCC_OscConfig+0x12c>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d168      	bne.n	80025c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e246      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fe:	d106      	bne.n	800250e <HAL_RCC_OscConfig+0x76>
 8002500:	4b80      	ldr	r3, [pc, #512]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a7f      	ldr	r2, [pc, #508]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	e02e      	b.n	800256c <HAL_RCC_OscConfig+0xd4>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x98>
 8002516:	4b7b      	ldr	r3, [pc, #492]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a7a      	ldr	r2, [pc, #488]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800251c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b78      	ldr	r3, [pc, #480]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a77      	ldr	r2, [pc, #476]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002528:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e01d      	b.n	800256c <HAL_RCC_OscConfig+0xd4>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0xbc>
 800253a:	4b72      	ldr	r3, [pc, #456]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a71      	ldr	r2, [pc, #452]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b6f      	ldr	r3, [pc, #444]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6e      	ldr	r2, [pc, #440]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800254c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e00b      	b.n	800256c <HAL_RCC_OscConfig+0xd4>
 8002554:	4b6b      	ldr	r3, [pc, #428]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a6a      	ldr	r2, [pc, #424]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800255a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b68      	ldr	r3, [pc, #416]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a67      	ldr	r2, [pc, #412]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d013      	beq.n	800259c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7fe f82c 	bl	80005d0 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800257c:	f7fe f828 	bl	80005d0 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e1fa      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b5d      	ldr	r3, [pc, #372]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0xe4>
 800259a:	e014      	b.n	80025c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7fe f818 	bl	80005d0 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a4:	f7fe f814 	bl	80005d0 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e1e6      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	4b53      	ldr	r3, [pc, #332]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x10c>
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d063      	beq.n	800269a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025d2:	4b4c      	ldr	r3, [pc, #304]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025de:	4b49      	ldr	r3, [pc, #292]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d11c      	bne.n	8002624 <HAL_RCC_OscConfig+0x18c>
 80025ea:	4b46      	ldr	r3, [pc, #280]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d116      	bne.n	8002624 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f6:	4b43      	ldr	r3, [pc, #268]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_RCC_OscConfig+0x176>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d001      	beq.n	800260e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e1ba      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260e:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4939      	ldr	r1, [pc, #228]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002622:	e03a      	b.n	800269a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d020      	beq.n	800266e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800262c:	4b36      	ldr	r3, [pc, #216]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7fd ffcd 	bl	80005d0 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263a:	f7fd ffc9 	bl	80005d0 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e19b      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264c:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002658:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4927      	ldr	r1, [pc, #156]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002668:	4313      	orrs	r3, r2
 800266a:	600b      	str	r3, [r1, #0]
 800266c:	e015      	b.n	800269a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800266e:	4b26      	ldr	r3, [pc, #152]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002674:	f7fd ffac 	bl	80005d0 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267c:	f7fd ffa8 	bl	80005d0 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e17a      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d03a      	beq.n	800271c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d019      	beq.n	80026e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b4:	f7fd ff8c 	bl	80005d0 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026bc:	f7fd ff88 	bl	80005d0 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e15a      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ce:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026da:	2001      	movs	r0, #1
 80026dc:	f000 faf4 	bl	8002cc8 <RCC_Delay>
 80026e0:	e01c      	b.n	800271c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e8:	f7fd ff72 	bl	80005d0 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ee:	e00f      	b.n	8002710 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f0:	f7fd ff6e 	bl	80005d0 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d908      	bls.n	8002710 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e140      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	42420000 	.word	0x42420000
 800270c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002710:	4b9e      	ldr	r3, [pc, #632]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1e9      	bne.n	80026f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80a6 	beq.w	8002876 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272e:	4b97      	ldr	r3, [pc, #604]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10d      	bne.n	8002756 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	4b94      	ldr	r3, [pc, #592]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	4a93      	ldr	r2, [pc, #588]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002744:	61d3      	str	r3, [r2, #28]
 8002746:	4b91      	ldr	r3, [pc, #580]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002752:	2301      	movs	r3, #1
 8002754:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002756:	4b8e      	ldr	r3, [pc, #568]	; (8002990 <HAL_RCC_OscConfig+0x4f8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d118      	bne.n	8002794 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002762:	4b8b      	ldr	r3, [pc, #556]	; (8002990 <HAL_RCC_OscConfig+0x4f8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a8a      	ldr	r2, [pc, #552]	; (8002990 <HAL_RCC_OscConfig+0x4f8>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276e:	f7fd ff2f 	bl	80005d0 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002776:	f7fd ff2b 	bl	80005d0 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b64      	cmp	r3, #100	; 0x64
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e0fd      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	4b81      	ldr	r3, [pc, #516]	; (8002990 <HAL_RCC_OscConfig+0x4f8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d106      	bne.n	80027aa <HAL_RCC_OscConfig+0x312>
 800279c:	4b7b      	ldr	r3, [pc, #492]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4a7a      	ldr	r2, [pc, #488]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6213      	str	r3, [r2, #32]
 80027a8:	e02d      	b.n	8002806 <HAL_RCC_OscConfig+0x36e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x334>
 80027b2:	4b76      	ldr	r3, [pc, #472]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	4a75      	ldr	r2, [pc, #468]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	6213      	str	r3, [r2, #32]
 80027be:	4b73      	ldr	r3, [pc, #460]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	4a72      	ldr	r2, [pc, #456]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027c4:	f023 0304 	bic.w	r3, r3, #4
 80027c8:	6213      	str	r3, [r2, #32]
 80027ca:	e01c      	b.n	8002806 <HAL_RCC_OscConfig+0x36e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d10c      	bne.n	80027ee <HAL_RCC_OscConfig+0x356>
 80027d4:	4b6d      	ldr	r3, [pc, #436]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4a6c      	ldr	r2, [pc, #432]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	6213      	str	r3, [r2, #32]
 80027e0:	4b6a      	ldr	r3, [pc, #424]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	4a69      	ldr	r2, [pc, #420]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6213      	str	r3, [r2, #32]
 80027ec:	e00b      	b.n	8002806 <HAL_RCC_OscConfig+0x36e>
 80027ee:	4b67      	ldr	r3, [pc, #412]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4a66      	ldr	r2, [pc, #408]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6213      	str	r3, [r2, #32]
 80027fa:	4b64      	ldr	r3, [pc, #400]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	4a63      	ldr	r2, [pc, #396]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d015      	beq.n	800283a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280e:	f7fd fedf 	bl	80005d0 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002814:	e00a      	b.n	800282c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002816:	f7fd fedb 	bl	80005d0 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f241 3288 	movw	r2, #5000	; 0x1388
 8002824:	4293      	cmp	r3, r2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e0ab      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282c:	4b57      	ldr	r3, [pc, #348]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ee      	beq.n	8002816 <HAL_RCC_OscConfig+0x37e>
 8002838:	e014      	b.n	8002864 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283a:	f7fd fec9 	bl	80005d0 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7fd fec5 	bl	80005d0 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e095      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002858:	4b4c      	ldr	r3, [pc, #304]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ee      	bne.n	8002842 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002864:	7dfb      	ldrb	r3, [r7, #23]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d105      	bne.n	8002876 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286a:	4b48      	ldr	r3, [pc, #288]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	4a47      	ldr	r2, [pc, #284]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002874:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8081 	beq.w	8002982 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002880:	4b42      	ldr	r3, [pc, #264]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b08      	cmp	r3, #8
 800288a:	d061      	beq.n	8002950 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d146      	bne.n	8002922 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002894:	4b3f      	ldr	r3, [pc, #252]	; (8002994 <HAL_RCC_OscConfig+0x4fc>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7fd fe99 	bl	80005d0 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a2:	f7fd fe95 	bl	80005d0 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e067      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b4:	4b35      	ldr	r3, [pc, #212]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c8:	d108      	bne.n	80028dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ca:	4b30      	ldr	r3, [pc, #192]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	492d      	ldr	r1, [pc, #180]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028dc:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a19      	ldr	r1, [r3, #32]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	430b      	orrs	r3, r1
 80028ee:	4927      	ldr	r1, [pc, #156]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f4:	4b27      	ldr	r3, [pc, #156]	; (8002994 <HAL_RCC_OscConfig+0x4fc>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fa:	f7fd fe69 	bl	80005d0 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002902:	f7fd fe65 	bl	80005d0 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e037      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002914:	4b1d      	ldr	r3, [pc, #116]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x46a>
 8002920:	e02f      	b.n	8002982 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002922:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <HAL_RCC_OscConfig+0x4fc>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7fd fe52 	bl	80005d0 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002930:	f7fd fe4e 	bl	80005d0 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e020      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x498>
 800294e:	e018      	b.n	8002982 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e013      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	429a      	cmp	r2, r3
 800296e:	d106      	bne.n	800297e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d001      	beq.n	8002982 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	40007000 	.word	0x40007000
 8002994:	42420060 	.word	0x42420060

08002998 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0d0      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029ac:	4b6a      	ldr	r3, [pc, #424]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d910      	bls.n	80029dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b67      	ldr	r3, [pc, #412]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 0207 	bic.w	r2, r3, #7
 80029c2:	4965      	ldr	r1, [pc, #404]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ca:	4b63      	ldr	r3, [pc, #396]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0b8      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d020      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f4:	4b59      	ldr	r3, [pc, #356]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4a58      	ldr	r2, [pc, #352]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a0c:	4b53      	ldr	r3, [pc, #332]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4a52      	ldr	r2, [pc, #328]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a18:	4b50      	ldr	r3, [pc, #320]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	494d      	ldr	r1, [pc, #308]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d040      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	4b47      	ldr	r3, [pc, #284]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d115      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e07f      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a56:	4b41      	ldr	r3, [pc, #260]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e073      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a66:	4b3d      	ldr	r3, [pc, #244]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e06b      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a76:	4b39      	ldr	r3, [pc, #228]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f023 0203 	bic.w	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4936      	ldr	r1, [pc, #216]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a88:	f7fd fda2 	bl	80005d0 <HAL_GetTick>
 8002a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a90:	f7fd fd9e 	bl	80005d0 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e053      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 020c 	and.w	r2, r3, #12
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d1eb      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d210      	bcs.n	8002ae8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 0207 	bic.w	r2, r3, #7
 8002ace:	4922      	ldr	r1, [pc, #136]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e032      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af4:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	4916      	ldr	r1, [pc, #88]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b12:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	490e      	ldr	r1, [pc, #56]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b26:	f000 f821 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	490a      	ldr	r1, [pc, #40]	; (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002b38:	5ccb      	ldrb	r3, [r1, r3]
 8002b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3e:	4a09      	ldr	r2, [pc, #36]	; (8002b64 <HAL_RCC_ClockConfig+0x1cc>)
 8002b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b42:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <HAL_RCC_ClockConfig+0x1d0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fc6e 	bl	8000428 <HAL_InitTick>

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40022000 	.word	0x40022000
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	0800a46c 	.word	0x0800a46c
 8002b64:	20000000 	.word	0x20000000
 8002b68:	20000004 	.word	0x20000004

08002b6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b6c:	b490      	push	{r4, r7}
 8002b6e:	b08a      	sub	sp, #40	; 0x28
 8002b70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b72:	4b2a      	ldr	r3, [pc, #168]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b74:	1d3c      	adds	r4, r7, #4
 8002b76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b7c:	f240 2301 	movw	r3, #513	; 0x201
 8002b80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b96:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d002      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0x40>
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d003      	beq.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x46>
 8002baa:	e02d      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bac:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bae:	623b      	str	r3, [r7, #32]
      break;
 8002bb0:	e02d      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	0c9b      	lsrs	r3, r3, #18
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bc4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d013      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bd0:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	0c5b      	lsrs	r3, r3, #17
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bde:	4413      	add	r3, r2
 8002be0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002be4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	4a0e      	ldr	r2, [pc, #56]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bea:	fb02 f203 	mul.w	r2, r2, r3
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf6:	e004      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	4a0b      	ldr	r2, [pc, #44]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bfc:	fb02 f303 	mul.w	r3, r2, r3
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	623b      	str	r3, [r7, #32]
      break;
 8002c06:	e002      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c0a:	623b      	str	r3, [r7, #32]
      break;
 8002c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3728      	adds	r7, #40	; 0x28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc90      	pop	{r4, r7}
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	0800a3c0 	.word	0x0800a3c0
 8002c20:	40021000 	.word	0x40021000
 8002c24:	007a1200 	.word	0x007a1200
 8002c28:	003d0900 	.word	0x003d0900

08002c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c30:	4b02      	ldr	r3, [pc, #8]	; (8002c3c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	20000000 	.word	0x20000000

08002c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c44:	f7ff fff2 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	0adb      	lsrs	r3, r3, #11
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	4903      	ldr	r1, [pc, #12]	; (8002c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c56:	5ccb      	ldrb	r3, [r1, r3]
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000
 8002c64:	0800a47c 	.word	0x0800a47c

08002c68 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	220f      	movs	r2, #15
 8002c76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c78:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <HAL_RCC_GetClockConfig+0x58>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0203 	and.w	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c84:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <HAL_RCC_GetClockConfig+0x58>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_RCC_GetClockConfig+0x58>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c9c:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <HAL_RCC_GetClockConfig+0x58>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	08db      	lsrs	r3, r3, #3
 8002ca2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0207 	and.w	r2, r3, #7
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40022000 	.word	0x40022000

08002cc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <RCC_Delay+0x34>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <RCC_Delay+0x38>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	0a5b      	lsrs	r3, r3, #9
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ce4:	bf00      	nop
  }
  while (Delay --);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1e5a      	subs	r2, r3, #1
 8002cea:	60fa      	str	r2, [r7, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f9      	bne.n	8002ce4 <RCC_Delay+0x1c>
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	10624dd3 	.word	0x10624dd3

08002d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d07d      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d20:	2300      	movs	r3, #0
 8002d22:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d24:	4b4f      	ldr	r3, [pc, #316]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10d      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d30:	4b4c      	ldr	r3, [pc, #304]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	4a4b      	ldr	r2, [pc, #300]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	61d3      	str	r3, [r2, #28]
 8002d3c:	4b49      	ldr	r3, [pc, #292]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	4b46      	ldr	r3, [pc, #280]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d118      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d58:	4b43      	ldr	r3, [pc, #268]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a42      	ldr	r2, [pc, #264]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d64:	f7fd fc34 	bl	80005d0 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6a:	e008      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6c:	f7fd fc30 	bl	80005d0 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	; 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e06d      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7e:	4b3a      	ldr	r3, [pc, #232]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d8a:	4b36      	ldr	r3, [pc, #216]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d02e      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d027      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002da8:	4b2e      	ldr	r3, [pc, #184]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002db2:	4b2e      	ldr	r3, [pc, #184]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002db8:	4b2c      	ldr	r3, [pc, #176]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dbe:	4a29      	ldr	r2, [pc, #164]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d014      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7fd fbff 	bl	80005d0 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fd fbfb 	bl	80005d0 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e036      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dec:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ee      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002df8:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4917      	ldr	r1, [pc, #92]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d105      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e10:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	4a13      	ldr	r2, [pc, #76]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	490b      	ldr	r1, [pc, #44]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d008      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	4904      	ldr	r1, [pc, #16]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40007000 	.word	0x40007000
 8002e6c:	42420440 	.word	0x42420440

08002e70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e041      	b.n	8002f06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f839 	bl	8002f0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3304      	adds	r3, #4
 8002eac:	4619      	mov	r1, r3
 8002eae:	4610      	mov	r0, r2
 8002eb0:	f000 f9b4 	bl	800321c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d001      	beq.n	8002f38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e03a      	b.n	8002fae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <HAL_TIM_Base_Start_IT+0x98>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00e      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x58>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f62:	d009      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x58>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a14      	ldr	r2, [pc, #80]	; (8002fbc <HAL_TIM_Base_Start_IT+0x9c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d004      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x58>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a13      	ldr	r2, [pc, #76]	; (8002fc0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d111      	bne.n	8002f9c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d010      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9a:	e007      	b.n	8002fac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800

08002fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d122      	bne.n	8003020 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d11b      	bne.n	8003020 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0202 	mvn.w	r2, #2
 8002ff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f8ed 	bl	80031e6 <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f8e0 	bl	80031d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f8ef 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b04      	cmp	r3, #4
 800302c:	d122      	bne.n	8003074 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b04      	cmp	r3, #4
 800303a:	d11b      	bne.n	8003074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0204 	mvn.w	r2, #4
 8003044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f8c3 	bl	80031e6 <HAL_TIM_IC_CaptureCallback>
 8003060:	e005      	b.n	800306e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f8b6 	bl	80031d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f8c5 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b08      	cmp	r3, #8
 8003080:	d122      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b08      	cmp	r3, #8
 800308e:	d11b      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0208 	mvn.w	r2, #8
 8003098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2204      	movs	r2, #4
 800309e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f899 	bl	80031e6 <HAL_TIM_IC_CaptureCallback>
 80030b4:	e005      	b.n	80030c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f88c 	bl	80031d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f89b 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	d122      	bne.n	800311c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d11b      	bne.n	800311c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0210 	mvn.w	r2, #16
 80030ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2208      	movs	r2, #8
 80030f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f86f 	bl	80031e6 <HAL_TIM_IC_CaptureCallback>
 8003108:	e005      	b.n	8003116 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f862 	bl	80031d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f871 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b01      	cmp	r3, #1
 8003128:	d10e      	bne.n	8003148 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d107      	bne.n	8003148 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0201 	mvn.w	r2, #1
 8003140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fd f920 	bl	8000388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b80      	cmp	r3, #128	; 0x80
 8003154:	d10e      	bne.n	8003174 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003160:	2b80      	cmp	r3, #128	; 0x80
 8003162:	d107      	bne.n	8003174 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800316c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f8bf 	bl	80032f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317e:	2b40      	cmp	r3, #64	; 0x40
 8003180:	d10e      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318c:	2b40      	cmp	r3, #64	; 0x40
 800318e:	d107      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f835 	bl	800320a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d10e      	bne.n	80031cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d107      	bne.n	80031cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0220 	mvn.w	r2, #32
 80031c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f88a 	bl	80032e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a29      	ldr	r2, [pc, #164]	; (80032d4 <TIM_Base_SetConfig+0xb8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00b      	beq.n	800324c <TIM_Base_SetConfig+0x30>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323a:	d007      	beq.n	800324c <TIM_Base_SetConfig+0x30>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a26      	ldr	r2, [pc, #152]	; (80032d8 <TIM_Base_SetConfig+0xbc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d003      	beq.n	800324c <TIM_Base_SetConfig+0x30>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a25      	ldr	r2, [pc, #148]	; (80032dc <TIM_Base_SetConfig+0xc0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d108      	bne.n	800325e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a1c      	ldr	r2, [pc, #112]	; (80032d4 <TIM_Base_SetConfig+0xb8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00b      	beq.n	800327e <TIM_Base_SetConfig+0x62>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326c:	d007      	beq.n	800327e <TIM_Base_SetConfig+0x62>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a19      	ldr	r2, [pc, #100]	; (80032d8 <TIM_Base_SetConfig+0xbc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d003      	beq.n	800327e <TIM_Base_SetConfig+0x62>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a18      	ldr	r2, [pc, #96]	; (80032dc <TIM_Base_SetConfig+0xc0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d108      	bne.n	8003290 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a07      	ldr	r2, [pc, #28]	; (80032d4 <TIM_Base_SetConfig+0xb8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d103      	bne.n	80032c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	615a      	str	r2, [r3, #20]
}
 80032ca:	bf00      	nop
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr
 80032d4:	40012c00 	.word	0x40012c00
 80032d8:	40000400 	.word	0x40000400
 80032dc:	40000800 	.word	0x40000800

080032e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr

080032f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003304:	b084      	sub	sp, #16
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	f107 0014 	add.w	r0, r7, #20
 8003312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	b004      	add	sp, #16
 8003322:	4770      	bx	lr

08003324 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003334:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003338:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	b29a      	uxth	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003358:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800335c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	b29b      	uxth	r3, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	b29b      	uxth	r3, r3
 800336e:	4013      	ands	r3, r2
 8003370:	b29a      	uxth	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr

0800339c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800339c:	b084      	sub	sp, #16
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	f107 0014 	add.w	r0, r7, #20
 80033aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	b004      	add	sp, #16
 80033da:	4770      	bx	lr

080033dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80033dc:	b480      	push	{r7}
 80033de:	b09b      	sub	sp, #108	; 0x6c
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80033fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003402:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	78db      	ldrb	r3, [r3, #3]
 800340a:	2b03      	cmp	r3, #3
 800340c:	d81f      	bhi.n	800344e <USB_ActivateEndpoint+0x72>
 800340e:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <USB_ActivateEndpoint+0x38>)
 8003410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003414:	08003425 	.word	0x08003425
 8003418:	08003441 	.word	0x08003441
 800341c:	08003457 	.word	0x08003457
 8003420:	08003433 	.word	0x08003433
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003424:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003428:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800342c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003430:	e012      	b.n	8003458 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003432:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003436:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800343a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800343e:	e00b      	b.n	8003458 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003440:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003444:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003448:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800344c:	e004      	b.n	8003458 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003454:	e000      	b.n	8003458 <USB_ActivateEndpoint+0x7c>
      break;
 8003456:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	441a      	add	r2, r3
 8003462:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800346a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800346e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003476:	b29b      	uxth	r3, r3
 8003478:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003490:	b29a      	uxth	r2, r3
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	4313      	orrs	r3, r2
 800349a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	441a      	add	r2, r3
 80034a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80034ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034bc:	b29b      	uxth	r3, r3
 80034be:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	7b1b      	ldrb	r3, [r3, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f040 8149 	bne.w	800375c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	785b      	ldrb	r3, [r3, #1]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8084 	beq.w	80035dc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034de:	b29b      	uxth	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	4413      	add	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	011a      	lsls	r2, r3, #4
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	88db      	ldrh	r3, [r3, #6]
 80034fc:	085b      	lsrs	r3, r3, #1
 80034fe:	b29b      	uxth	r3, r3
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	81fb      	strh	r3, [r7, #14]
 8003516:	89fb      	ldrh	r3, [r7, #14]
 8003518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01b      	beq.n	8003558 <USB_ActivateEndpoint+0x17c>
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	b29b      	uxth	r3, r3
 800352e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003536:	81bb      	strh	r3, [r7, #12]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	441a      	add	r2, r3
 8003542:	89bb      	ldrh	r3, [r7, #12]
 8003544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800354c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003550:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003554:	b29b      	uxth	r3, r3
 8003556:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	78db      	ldrb	r3, [r3, #3]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d020      	beq.n	80035a2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	b29b      	uxth	r3, r3
 800356e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003576:	813b      	strh	r3, [r7, #8]
 8003578:	893b      	ldrh	r3, [r7, #8]
 800357a:	f083 0320 	eor.w	r3, r3, #32
 800357e:	813b      	strh	r3, [r7, #8]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	441a      	add	r2, r3
 800358a:	893b      	ldrh	r3, [r7, #8]
 800358c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800359c:	b29b      	uxth	r3, r3
 800359e:	8013      	strh	r3, [r2, #0]
 80035a0:	e27f      	b.n	8003aa2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035b8:	817b      	strh	r3, [r7, #10]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	441a      	add	r2, r3
 80035c4:	897b      	ldrh	r3, [r7, #10]
 80035c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	8013      	strh	r3, [r2, #0]
 80035da:	e262      	b.n	8003aa2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	461a      	mov	r2, r3
 80035ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ec:	4413      	add	r3, r2
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	011a      	lsls	r2, r3, #4
 80035f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80035fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	88db      	ldrh	r3, [r3, #6]
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	b29b      	uxth	r3, r3
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800361a:	b29b      	uxth	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	4413      	add	r3, r2
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	011a      	lsls	r2, r3, #4
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	4413      	add	r3, r2
 800362e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003632:	623b      	str	r3, [r7, #32]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d112      	bne.n	8003662 <USB_ActivateEndpoint+0x286>
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	b29b      	uxth	r3, r3
 8003642:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003646:	b29a      	uxth	r2, r3
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	801a      	strh	r2, [r3, #0]
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	b29b      	uxth	r3, r3
 8003652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800365a:	b29a      	uxth	r2, r3
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	801a      	strh	r2, [r3, #0]
 8003660:	e02f      	b.n	80036c2 <USB_ActivateEndpoint+0x2e6>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b3e      	cmp	r3, #62	; 0x3e
 8003668:	d813      	bhi.n	8003692 <USB_ActivateEndpoint+0x2b6>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	085b      	lsrs	r3, r3, #1
 8003670:	663b      	str	r3, [r7, #96]	; 0x60
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <USB_ActivateEndpoint+0x2a8>
 800367e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003680:	3301      	adds	r3, #1
 8003682:	663b      	str	r3, [r7, #96]	; 0x60
 8003684:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003686:	b29b      	uxth	r3, r3
 8003688:	029b      	lsls	r3, r3, #10
 800368a:	b29a      	uxth	r2, r3
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	801a      	strh	r2, [r3, #0]
 8003690:	e017      	b.n	80036c2 <USB_ActivateEndpoint+0x2e6>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	663b      	str	r3, [r7, #96]	; 0x60
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <USB_ActivateEndpoint+0x2d0>
 80036a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036a8:	3b01      	subs	r3, #1
 80036aa:	663b      	str	r3, [r7, #96]	; 0x60
 80036ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	029b      	lsls	r3, r3, #10
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036bc:	b29a      	uxth	r2, r3
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	83fb      	strh	r3, [r7, #30]
 80036d0:	8bfb      	ldrh	r3, [r7, #30]
 80036d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d01b      	beq.n	8003712 <USB_ActivateEndpoint+0x336>
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f0:	83bb      	strh	r3, [r7, #28]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	441a      	add	r2, r3
 80036fc:	8bbb      	ldrh	r3, [r7, #28]
 80036fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800370a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370e:	b29b      	uxth	r3, r3
 8003710:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	b29b      	uxth	r3, r3
 8003720:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003728:	837b      	strh	r3, [r7, #26]
 800372a:	8b7b      	ldrh	r3, [r7, #26]
 800372c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003730:	837b      	strh	r3, [r7, #26]
 8003732:	8b7b      	ldrh	r3, [r7, #26]
 8003734:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003738:	837b      	strh	r3, [r7, #26]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	441a      	add	r2, r3
 8003744:	8b7b      	ldrh	r3, [r7, #26]
 8003746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800374a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800374e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003756:	b29b      	uxth	r3, r3
 8003758:	8013      	strh	r3, [r2, #0]
 800375a:	e1a2      	b.n	8003aa2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	b29b      	uxth	r3, r3
 800376a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800376e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003772:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	441a      	add	r2, r3
 8003780:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800378c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003794:	b29b      	uxth	r3, r3
 8003796:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	65bb      	str	r3, [r7, #88]	; 0x58
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	461a      	mov	r2, r3
 80037a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037a8:	4413      	add	r3, r2
 80037aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	011a      	lsls	r2, r3, #4
 80037b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037ba:	657b      	str	r3, [r7, #84]	; 0x54
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	891b      	ldrh	r3, [r3, #8]
 80037c0:	085b      	lsrs	r3, r3, #1
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ca:	801a      	strh	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	653b      	str	r3, [r7, #80]	; 0x50
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	461a      	mov	r2, r3
 80037da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037dc:	4413      	add	r3, r2
 80037de:	653b      	str	r3, [r7, #80]	; 0x50
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	011a      	lsls	r2, r3, #4
 80037e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80037ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	895b      	ldrh	r3, [r3, #10]
 80037f4:	085b      	lsrs	r3, r3, #1
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	785b      	ldrb	r3, [r3, #1]
 8003804:	2b00      	cmp	r3, #0
 8003806:	f040 8091 	bne.w	800392c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003818:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800381a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d01b      	beq.n	800385a <USB_ActivateEndpoint+0x47e>
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003838:	877b      	strh	r3, [r7, #58]	; 0x3a
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	441a      	add	r2, r3
 8003844:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800384a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800384e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003856:	b29b      	uxth	r3, r3
 8003858:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	873b      	strh	r3, [r7, #56]	; 0x38
 8003868:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800386a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	d01b      	beq.n	80038aa <USB_ActivateEndpoint+0x4ce>
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	b29b      	uxth	r3, r3
 8003880:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003888:	86fb      	strh	r3, [r7, #54]	; 0x36
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	441a      	add	r2, r3
 8003894:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800389a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800389e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80038c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80038c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80038c8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80038ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80038cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80038d0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	441a      	add	r2, r3
 80038dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80038de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003908:	867b      	strh	r3, [r7, #50]	; 0x32
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	441a      	add	r2, r3
 8003914:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800391a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800391e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003926:	b29b      	uxth	r3, r3
 8003928:	8013      	strh	r3, [r2, #0]
 800392a:	e0ba      	b.n	8003aa2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800393c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d01d      	beq.n	8003984 <USB_ActivateEndpoint+0x5a8>
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	b29b      	uxth	r3, r3
 8003956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800395a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	441a      	add	r2, r3
 800396c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800397c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003980:	b29b      	uxth	r3, r3
 8003982:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003994:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01d      	beq.n	80039dc <USB_ActivateEndpoint+0x600>
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	441a      	add	r2, r3
 80039c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80039c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039d8:	b29b      	uxth	r3, r3
 80039da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	78db      	ldrb	r3, [r3, #3]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d024      	beq.n	8003a2e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80039fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003a02:	f083 0320 	eor.w	r3, r3, #32
 8003a06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	441a      	add	r2, r3
 8003a14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	8013      	strh	r3, [r2, #0]
 8003a2c:	e01d      	b.n	8003a6a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	441a      	add	r2, r3
 8003a52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a80:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	441a      	add	r2, r3
 8003a8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003aa2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	376c      	adds	r7, #108	; 0x6c
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr

08003ab0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b08d      	sub	sp, #52	; 0x34
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	7b1b      	ldrb	r3, [r3, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f040 808e 	bne.w	8003be0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	785b      	ldrb	r3, [r3, #1]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d044      	beq.n	8003b56 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	81bb      	strh	r3, [r7, #12]
 8003ada:	89bb      	ldrh	r3, [r7, #12]
 8003adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01b      	beq.n	8003b1c <USB_DeactivateEndpoint+0x6c>
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afa:	817b      	strh	r3, [r7, #10]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	441a      	add	r2, r3
 8003b06:	897b      	ldrh	r3, [r7, #10]
 8003b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b32:	813b      	strh	r3, [r7, #8]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	441a      	add	r2, r3
 8003b3e:	893b      	ldrh	r3, [r7, #8]
 8003b40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	8013      	strh	r3, [r2, #0]
 8003b54:	e192      	b.n	8003e7c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	827b      	strh	r3, [r7, #18]
 8003b64:	8a7b      	ldrh	r3, [r7, #18]
 8003b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01b      	beq.n	8003ba6 <USB_DeactivateEndpoint+0xf6>
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b84:	823b      	strh	r3, [r7, #16]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	441a      	add	r2, r3
 8003b90:	8a3b      	ldrh	r3, [r7, #16]
 8003b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbc:	81fb      	strh	r3, [r7, #14]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	441a      	add	r2, r3
 8003bc8:	89fb      	ldrh	r3, [r7, #14]
 8003bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	8013      	strh	r3, [r2, #0]
 8003bde:	e14d      	b.n	8003e7c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	785b      	ldrb	r3, [r3, #1]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f040 80a5 	bne.w	8003d34 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	843b      	strh	r3, [r7, #32]
 8003bf8:	8c3b      	ldrh	r3, [r7, #32]
 8003bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d01b      	beq.n	8003c3a <USB_DeactivateEndpoint+0x18a>
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c18:	83fb      	strh	r3, [r7, #30]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	441a      	add	r2, r3
 8003c24:	8bfb      	ldrh	r3, [r7, #30]
 8003c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	83bb      	strh	r3, [r7, #28]
 8003c48:	8bbb      	ldrh	r3, [r7, #28]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d01b      	beq.n	8003c8a <USB_DeactivateEndpoint+0x1da>
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c68:	837b      	strh	r3, [r7, #26]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	441a      	add	r2, r3
 8003c74:	8b7b      	ldrh	r3, [r7, #26]
 8003c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca0:	833b      	strh	r3, [r7, #24]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	441a      	add	r2, r3
 8003cac:	8b3b      	ldrh	r3, [r7, #24]
 8003cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd8:	82fb      	strh	r3, [r7, #22]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	441a      	add	r2, r3
 8003ce4:	8afb      	ldrh	r3, [r7, #22]
 8003ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d10:	82bb      	strh	r3, [r7, #20]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	441a      	add	r2, r3
 8003d1c:	8abb      	ldrh	r3, [r7, #20]
 8003d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	8013      	strh	r3, [r2, #0]
 8003d32:	e0a3      	b.n	8003e7c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003d42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d01b      	beq.n	8003d84 <USB_DeactivateEndpoint+0x2d4>
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d62:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	441a      	add	r2, r3
 8003d6e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003d92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01b      	beq.n	8003dd4 <USB_DeactivateEndpoint+0x324>
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db2:	853b      	strh	r3, [r7, #40]	; 0x28
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	441a      	add	r2, r3
 8003dbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dea:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	441a      	add	r2, r3
 8003df6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e22:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	441a      	add	r2, r3
 8003e2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5a:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	441a      	add	r2, r3
 8003e66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3734      	adds	r7, #52	; 0x34
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr

08003e88 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b0cc      	sub	sp, #304	; 0x130
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	1d3b      	adds	r3, r7, #4
 8003e90:	6018      	str	r0, [r3, #0]
 8003e92:	463b      	mov	r3, r7
 8003e94:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e96:	463b      	mov	r3, r7
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	785b      	ldrb	r3, [r3, #1]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	f040 872e 	bne.w	8004cfe <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003ea2:	463b      	mov	r3, r7
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699a      	ldr	r2, [r3, #24]
 8003ea8:	463b      	mov	r3, r7
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d905      	bls.n	8003ebe <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003eb2:	463b      	mov	r3, r7
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003ebc:	e004      	b.n	8003ec8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003ebe:	463b      	mov	r3, r7
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003ec8:	463b      	mov	r3, r7
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	7b1b      	ldrb	r3, [r3, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d134      	bne.n	8003f3c <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003ed2:	463b      	mov	r3, r7
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6959      	ldr	r1, [r3, #20]
 8003ed8:	463b      	mov	r3, r7
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	88da      	ldrh	r2, [r3, #6]
 8003ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	1d38      	adds	r0, r7, #4
 8003ee6:	6800      	ldr	r0, [r0, #0]
 8003ee8:	f001 fc03 	bl	80056f2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003eec:	f107 0310 	add.w	r3, r7, #16
 8003ef0:	1d3a      	adds	r2, r7, #4
 8003ef2:	6812      	ldr	r2, [r2, #0]
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	1d3b      	adds	r3, r7, #4
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	4619      	mov	r1, r3
 8003f02:	f107 0310 	add.w	r3, r7, #16
 8003f06:	f107 0210 	add.w	r2, r7, #16
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	440a      	add	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	463b      	mov	r3, r7
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	011a      	lsls	r2, r3, #4
 8003f18:	f107 0310 	add.w	r3, r7, #16
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003f24:	f107 030c 	add.w	r3, r7, #12
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	f107 030c 	add.w	r3, r7, #12
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	801a      	strh	r2, [r3, #0]
 8003f38:	f000 beac 	b.w	8004c94 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003f3c:	463b      	mov	r3, r7
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	78db      	ldrb	r3, [r3, #3]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	f040 838c 	bne.w	8004660 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003f48:	463b      	mov	r3, r7
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6a1a      	ldr	r2, [r3, #32]
 8003f4e:	463b      	mov	r3, r7
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	f240 8330 	bls.w	80045ba <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003f5a:	1d3b      	adds	r3, r7, #4
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	463b      	mov	r3, r7
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003f78:	1d3b      	adds	r3, r7, #4
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	463b      	mov	r3, r7
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	441a      	add	r2, r3
 8003f86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f92:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003f9e:	463b      	mov	r3, r7
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6a1a      	ldr	r2, [r3, #32]
 8003fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fa8:	1ad2      	subs	r2, r2, r3
 8003faa:	463b      	mov	r3, r7
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003fb0:	1d3b      	adds	r3, r7, #4
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	463b      	mov	r3, r7
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 819e 	beq.w	8004308 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003fcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003fd0:	1d3a      	adds	r2, r7, #4
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	463b      	mov	r3, r7
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	785b      	ldrb	r3, [r3, #1]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d17a      	bne.n	80040d6 <USB_EPStartXfer+0x24e>
 8003fe0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fe4:	1d3a      	adds	r2, r7, #4
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	1d3b      	adds	r3, r7, #4
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ffa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	440a      	add	r2, r1
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	463b      	mov	r3, r7
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	011a      	lsls	r2, r3, #4
 800400c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4413      	add	r3, r2
 8004014:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d11a      	bne.n	800405c <USB_EPStartXfer+0x1d4>
 8004026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	b29b      	uxth	r3, r3
 8004030:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004034:	b29a      	uxth	r2, r3
 8004036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	801a      	strh	r2, [r3, #0]
 800403e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800404c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004050:	b29a      	uxth	r2, r3
 8004052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	801a      	strh	r2, [r3, #0]
 800405a:	e062      	b.n	8004122 <USB_EPStartXfer+0x29a>
 800405c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004060:	2b3e      	cmp	r3, #62	; 0x3e
 8004062:	d819      	bhi.n	8004098 <USB_EPStartXfer+0x210>
 8004064:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004068:	085b      	lsrs	r3, r3, #1
 800406a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800406e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d004      	beq.n	8004084 <USB_EPStartXfer+0x1fc>
 800407a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800407e:	3301      	adds	r3, #1
 8004080:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004084:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004088:	b29b      	uxth	r3, r3
 800408a:	029b      	lsls	r3, r3, #10
 800408c:	b29a      	uxth	r2, r3
 800408e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	801a      	strh	r2, [r3, #0]
 8004096:	e044      	b.n	8004122 <USB_EPStartXfer+0x29a>
 8004098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80040a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <USB_EPStartXfer+0x230>
 80040ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040b2:	3b01      	subs	r3, #1
 80040b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80040b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040bc:	b29b      	uxth	r3, r3
 80040be:	029b      	lsls	r3, r3, #10
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	801a      	strh	r2, [r3, #0]
 80040d4:	e025      	b.n	8004122 <USB_EPStartXfer+0x29a>
 80040d6:	463b      	mov	r3, r7
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d120      	bne.n	8004122 <USB_EPStartXfer+0x29a>
 80040e0:	1d3b      	adds	r3, r7, #4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	4619      	mov	r1, r3
 80040ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	440a      	add	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	463b      	mov	r3, r7
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	011a      	lsls	r2, r3, #4
 8004102:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4413      	add	r3, r2
 800410a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800410e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004118:	b29a      	uxth	r2, r3
 800411a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004122:	463b      	mov	r3, r7
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	895b      	ldrh	r3, [r3, #10]
 8004128:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800412c:	463b      	mov	r3, r7
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6959      	ldr	r1, [r3, #20]
 8004132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004136:	b29b      	uxth	r3, r3
 8004138:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800413c:	1d38      	adds	r0, r7, #4
 800413e:	6800      	ldr	r0, [r0, #0]
 8004140:	f001 fad7 	bl	80056f2 <USB_WritePMA>
            ep->xfer_buff += len;
 8004144:	463b      	mov	r3, r7
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695a      	ldr	r2, [r3, #20]
 800414a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800414e:	441a      	add	r2, r3
 8004150:	463b      	mov	r3, r7
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004156:	463b      	mov	r3, r7
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6a1a      	ldr	r2, [r3, #32]
 800415c:	463b      	mov	r3, r7
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	429a      	cmp	r2, r3
 8004164:	d909      	bls.n	800417a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8004166:	463b      	mov	r3, r7
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6a1a      	ldr	r2, [r3, #32]
 800416c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004170:	1ad2      	subs	r2, r2, r3
 8004172:	463b      	mov	r3, r7
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	621a      	str	r2, [r3, #32]
 8004178:	e008      	b.n	800418c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800417a:	463b      	mov	r3, r7
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004184:	463b      	mov	r3, r7
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2200      	movs	r2, #0
 800418a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800418c:	463b      	mov	r3, r7
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	785b      	ldrb	r3, [r3, #1]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d17a      	bne.n	800428c <USB_EPStartXfer+0x404>
 8004196:	f107 0318 	add.w	r3, r7, #24
 800419a:	1d3a      	adds	r2, r7, #4
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	1d3b      	adds	r3, r7, #4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	4619      	mov	r1, r3
 80041ac:	f107 0318 	add.w	r3, r7, #24
 80041b0:	f107 0218 	add.w	r2, r7, #24
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	440a      	add	r2, r1
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	463b      	mov	r3, r7
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	011a      	lsls	r2, r3, #4
 80041c2:	f107 0318 	add.w	r3, r7, #24
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4413      	add	r3, r2
 80041ca:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80041ce:	f107 0314 	add.w	r3, r7, #20
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d11a      	bne.n	8004212 <USB_EPStartXfer+0x38a>
 80041dc:	f107 0314 	add.w	r3, r7, #20
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	801a      	strh	r2, [r3, #0]
 80041f4:	f107 0314 	add.w	r3, r7, #20
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004206:	b29a      	uxth	r2, r3
 8004208:	f107 0314 	add.w	r3, r7, #20
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	801a      	strh	r2, [r3, #0]
 8004210:	e067      	b.n	80042e2 <USB_EPStartXfer+0x45a>
 8004212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004216:	2b3e      	cmp	r3, #62	; 0x3e
 8004218:	d819      	bhi.n	800424e <USB_EPStartXfer+0x3c6>
 800421a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800421e:	085b      	lsrs	r3, r3, #1
 8004220:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004224:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d004      	beq.n	800423a <USB_EPStartXfer+0x3b2>
 8004230:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004234:	3301      	adds	r3, #1
 8004236:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800423a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800423e:	b29b      	uxth	r3, r3
 8004240:	029b      	lsls	r3, r3, #10
 8004242:	b29a      	uxth	r2, r3
 8004244:	f107 0314 	add.w	r3, r7, #20
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	801a      	strh	r2, [r3, #0]
 800424c:	e049      	b.n	80042e2 <USB_EPStartXfer+0x45a>
 800424e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800425c:	f003 031f 	and.w	r3, r3, #31
 8004260:	2b00      	cmp	r3, #0
 8004262:	d104      	bne.n	800426e <USB_EPStartXfer+0x3e6>
 8004264:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004268:	3b01      	subs	r3, #1
 800426a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800426e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004272:	b29b      	uxth	r3, r3
 8004274:	029b      	lsls	r3, r3, #10
 8004276:	b29b      	uxth	r3, r3
 8004278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800427c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004280:	b29a      	uxth	r2, r3
 8004282:	f107 0314 	add.w	r3, r7, #20
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	801a      	strh	r2, [r3, #0]
 800428a:	e02a      	b.n	80042e2 <USB_EPStartXfer+0x45a>
 800428c:	463b      	mov	r3, r7
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	785b      	ldrb	r3, [r3, #1]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d125      	bne.n	80042e2 <USB_EPStartXfer+0x45a>
 8004296:	f107 0320 	add.w	r3, r7, #32
 800429a:	1d3a      	adds	r2, r7, #4
 800429c:	6812      	ldr	r2, [r2, #0]
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	1d3b      	adds	r3, r7, #4
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	4619      	mov	r1, r3
 80042ac:	f107 0320 	add.w	r3, r7, #32
 80042b0:	f107 0220 	add.w	r2, r7, #32
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	440a      	add	r2, r1
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	463b      	mov	r3, r7
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	011a      	lsls	r2, r3, #4
 80042c2:	f107 0320 	add.w	r3, r7, #32
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4413      	add	r3, r2
 80042ca:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80042ce:	f107 031c 	add.w	r3, r7, #28
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042d8:	b29a      	uxth	r2, r3
 80042da:	f107 031c 	add.w	r3, r7, #28
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80042e2:	463b      	mov	r3, r7
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	891b      	ldrh	r3, [r3, #8]
 80042e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042ec:	463b      	mov	r3, r7
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6959      	ldr	r1, [r3, #20]
 80042f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80042fc:	1d38      	adds	r0, r7, #4
 80042fe:	6800      	ldr	r0, [r0, #0]
 8004300:	f001 f9f7 	bl	80056f2 <USB_WritePMA>
 8004304:	f000 bcc6 	b.w	8004c94 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004308:	463b      	mov	r3, r7
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	785b      	ldrb	r3, [r3, #1]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d164      	bne.n	80043dc <USB_EPStartXfer+0x554>
 8004312:	1d3b      	adds	r3, r7, #4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	64bb      	str	r3, [r7, #72]	; 0x48
 8004318:	1d3b      	adds	r3, r7, #4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004320:	b29b      	uxth	r3, r3
 8004322:	461a      	mov	r2, r3
 8004324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004326:	4413      	add	r3, r2
 8004328:	64bb      	str	r3, [r7, #72]	; 0x48
 800432a:	463b      	mov	r3, r7
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	011a      	lsls	r2, r3, #4
 8004332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004334:	4413      	add	r3, r2
 8004336:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800433a:	647b      	str	r3, [r7, #68]	; 0x44
 800433c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d112      	bne.n	800436a <USB_EPStartXfer+0x4e2>
 8004344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	b29b      	uxth	r3, r3
 800434a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800434e:	b29a      	uxth	r2, r3
 8004350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004352:	801a      	strh	r2, [r3, #0]
 8004354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	b29b      	uxth	r3, r3
 800435a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800435e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004362:	b29a      	uxth	r2, r3
 8004364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004366:	801a      	strh	r2, [r3, #0]
 8004368:	e057      	b.n	800441a <USB_EPStartXfer+0x592>
 800436a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800436e:	2b3e      	cmp	r3, #62	; 0x3e
 8004370:	d817      	bhi.n	80043a2 <USB_EPStartXfer+0x51a>
 8004372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004376:	085b      	lsrs	r3, r3, #1
 8004378:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800437c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d004      	beq.n	8004392 <USB_EPStartXfer+0x50a>
 8004388:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800438c:	3301      	adds	r3, #1
 800438e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004392:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004396:	b29b      	uxth	r3, r3
 8004398:	029b      	lsls	r3, r3, #10
 800439a:	b29a      	uxth	r2, r3
 800439c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800439e:	801a      	strh	r2, [r3, #0]
 80043a0:	e03b      	b.n	800441a <USB_EPStartXfer+0x592>
 80043a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80043ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d104      	bne.n	80043c2 <USB_EPStartXfer+0x53a>
 80043b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80043bc:	3b01      	subs	r3, #1
 80043be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80043c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	029b      	lsls	r3, r3, #10
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043d8:	801a      	strh	r2, [r3, #0]
 80043da:	e01e      	b.n	800441a <USB_EPStartXfer+0x592>
 80043dc:	463b      	mov	r3, r7
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	785b      	ldrb	r3, [r3, #1]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d119      	bne.n	800441a <USB_EPStartXfer+0x592>
 80043e6:	1d3b      	adds	r3, r7, #4
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	653b      	str	r3, [r7, #80]	; 0x50
 80043ec:	1d3b      	adds	r3, r7, #4
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	461a      	mov	r2, r3
 80043f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043fa:	4413      	add	r3, r2
 80043fc:	653b      	str	r3, [r7, #80]	; 0x50
 80043fe:	463b      	mov	r3, r7
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	011a      	lsls	r2, r3, #4
 8004406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004408:	4413      	add	r3, r2
 800440a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800440e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004414:	b29a      	uxth	r2, r3
 8004416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004418:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800441a:	463b      	mov	r3, r7
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	891b      	ldrh	r3, [r3, #8]
 8004420:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004424:	463b      	mov	r3, r7
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6959      	ldr	r1, [r3, #20]
 800442a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800442e:	b29b      	uxth	r3, r3
 8004430:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004434:	1d38      	adds	r0, r7, #4
 8004436:	6800      	ldr	r0, [r0, #0]
 8004438:	f001 f95b 	bl	80056f2 <USB_WritePMA>
            ep->xfer_buff += len;
 800443c:	463b      	mov	r3, r7
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004446:	441a      	add	r2, r3
 8004448:	463b      	mov	r3, r7
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800444e:	463b      	mov	r3, r7
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6a1a      	ldr	r2, [r3, #32]
 8004454:	463b      	mov	r3, r7
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	429a      	cmp	r2, r3
 800445c:	d909      	bls.n	8004472 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800445e:	463b      	mov	r3, r7
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6a1a      	ldr	r2, [r3, #32]
 8004464:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004468:	1ad2      	subs	r2, r2, r3
 800446a:	463b      	mov	r3, r7
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	621a      	str	r2, [r3, #32]
 8004470:	e008      	b.n	8004484 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8004472:	463b      	mov	r3, r7
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800447c:	463b      	mov	r3, r7
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2200      	movs	r2, #0
 8004482:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004484:	1d3b      	adds	r3, r7, #4
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	643b      	str	r3, [r7, #64]	; 0x40
 800448a:	463b      	mov	r3, r7
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	785b      	ldrb	r3, [r3, #1]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d164      	bne.n	800455e <USB_EPStartXfer+0x6d6>
 8004494:	1d3b      	adds	r3, r7, #4
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	63bb      	str	r3, [r7, #56]	; 0x38
 800449a:	1d3b      	adds	r3, r7, #4
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	461a      	mov	r2, r3
 80044a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a8:	4413      	add	r3, r2
 80044aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80044ac:	463b      	mov	r3, r7
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	011a      	lsls	r2, r3, #4
 80044b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b6:	4413      	add	r3, r2
 80044b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044bc:	637b      	str	r3, [r7, #52]	; 0x34
 80044be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d112      	bne.n	80044ec <USB_EPStartXfer+0x664>
 80044c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d4:	801a      	strh	r2, [r3, #0]
 80044d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e8:	801a      	strh	r2, [r3, #0]
 80044ea:	e054      	b.n	8004596 <USB_EPStartXfer+0x70e>
 80044ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044f0:	2b3e      	cmp	r3, #62	; 0x3e
 80044f2:	d817      	bhi.n	8004524 <USB_EPStartXfer+0x69c>
 80044f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044f8:	085b      	lsrs	r3, r3, #1
 80044fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80044fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d004      	beq.n	8004514 <USB_EPStartXfer+0x68c>
 800450a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800450e:	3301      	adds	r3, #1
 8004510:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004514:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004518:	b29b      	uxth	r3, r3
 800451a:	029b      	lsls	r3, r3, #10
 800451c:	b29a      	uxth	r2, r3
 800451e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004520:	801a      	strh	r2, [r3, #0]
 8004522:	e038      	b.n	8004596 <USB_EPStartXfer+0x70e>
 8004524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800452e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	2b00      	cmp	r3, #0
 8004538:	d104      	bne.n	8004544 <USB_EPStartXfer+0x6bc>
 800453a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800453e:	3b01      	subs	r3, #1
 8004540:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004544:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004548:	b29b      	uxth	r3, r3
 800454a:	029b      	lsls	r3, r3, #10
 800454c:	b29b      	uxth	r3, r3
 800454e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004556:	b29a      	uxth	r2, r3
 8004558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455a:	801a      	strh	r2, [r3, #0]
 800455c:	e01b      	b.n	8004596 <USB_EPStartXfer+0x70e>
 800455e:	463b      	mov	r3, r7
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	785b      	ldrb	r3, [r3, #1]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d116      	bne.n	8004596 <USB_EPStartXfer+0x70e>
 8004568:	1d3b      	adds	r3, r7, #4
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004570:	b29b      	uxth	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004576:	4413      	add	r3, r2
 8004578:	643b      	str	r3, [r7, #64]	; 0x40
 800457a:	463b      	mov	r3, r7
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	011a      	lsls	r2, r3, #4
 8004582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004584:	4413      	add	r3, r2
 8004586:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800458a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800458c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004590:	b29a      	uxth	r2, r3
 8004592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004594:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004596:	463b      	mov	r3, r7
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	895b      	ldrh	r3, [r3, #10]
 800459c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045a0:	463b      	mov	r3, r7
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6959      	ldr	r1, [r3, #20]
 80045a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80045b0:	1d38      	adds	r0, r7, #4
 80045b2:	6800      	ldr	r0, [r0, #0]
 80045b4:	f001 f89d 	bl	80056f2 <USB_WritePMA>
 80045b8:	e36c      	b.n	8004c94 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80045ba:	463b      	mov	r3, r7
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80045c4:	1d3b      	adds	r3, r7, #4
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	463b      	mov	r3, r7
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80045da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045de:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80045e2:	1d3b      	adds	r3, r7, #4
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	463b      	mov	r3, r7
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	441a      	add	r2, r3
 80045f0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80045f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004604:	b29b      	uxth	r3, r3
 8004606:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004608:	1d3b      	adds	r3, r7, #4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800460e:	1d3b      	adds	r3, r7, #4
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004616:	b29b      	uxth	r3, r3
 8004618:	461a      	mov	r2, r3
 800461a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800461c:	4413      	add	r3, r2
 800461e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004620:	463b      	mov	r3, r7
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	011a      	lsls	r2, r3, #4
 8004628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800462a:	4413      	add	r3, r2
 800462c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004630:	65bb      	str	r3, [r7, #88]	; 0x58
 8004632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004636:	b29a      	uxth	r2, r3
 8004638:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800463a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800463c:	463b      	mov	r3, r7
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	891b      	ldrh	r3, [r3, #8]
 8004642:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004646:	463b      	mov	r3, r7
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6959      	ldr	r1, [r3, #20]
 800464c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004650:	b29b      	uxth	r3, r3
 8004652:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004656:	1d38      	adds	r0, r7, #4
 8004658:	6800      	ldr	r0, [r0, #0]
 800465a:	f001 f84a 	bl	80056f2 <USB_WritePMA>
 800465e:	e319      	b.n	8004c94 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004660:	1d3b      	adds	r3, r7, #4
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	463b      	mov	r3, r7
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	b29b      	uxth	r3, r3
 8004672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800467e:	1d3b      	adds	r3, r7, #4
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	463b      	mov	r3, r7
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	441a      	add	r2, r3
 800468c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004698:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800469c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80046a4:	463b      	mov	r3, r7
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6a1a      	ldr	r2, [r3, #32]
 80046aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046ae:	1ad2      	subs	r2, r2, r3
 80046b0:	463b      	mov	r3, r7
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80046b6:	1d3b      	adds	r3, r7, #4
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	463b      	mov	r3, r7
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8162 	beq.w	8004996 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80046d2:	1d3b      	adds	r3, r7, #4
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046da:	463b      	mov	r3, r7
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	785b      	ldrb	r3, [r3, #1]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d164      	bne.n	80047ae <USB_EPStartXfer+0x926>
 80046e4:	1d3b      	adds	r3, r7, #4
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80046ea:	1d3b      	adds	r3, r7, #4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046f8:	4413      	add	r3, r2
 80046fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80046fc:	463b      	mov	r3, r7
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	011a      	lsls	r2, r3, #4
 8004704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004706:	4413      	add	r3, r2
 8004708:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800470c:	677b      	str	r3, [r7, #116]	; 0x74
 800470e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d112      	bne.n	800473c <USB_EPStartXfer+0x8b4>
 8004716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	b29b      	uxth	r3, r3
 800471c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004720:	b29a      	uxth	r2, r3
 8004722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004724:	801a      	strh	r2, [r3, #0]
 8004726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	b29b      	uxth	r3, r3
 800472c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004734:	b29a      	uxth	r2, r3
 8004736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004738:	801a      	strh	r2, [r3, #0]
 800473a:	e057      	b.n	80047ec <USB_EPStartXfer+0x964>
 800473c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004740:	2b3e      	cmp	r3, #62	; 0x3e
 8004742:	d817      	bhi.n	8004774 <USB_EPStartXfer+0x8ec>
 8004744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800474e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d004      	beq.n	8004764 <USB_EPStartXfer+0x8dc>
 800475a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800475e:	3301      	adds	r3, #1
 8004760:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004764:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004768:	b29b      	uxth	r3, r3
 800476a:	029b      	lsls	r3, r3, #10
 800476c:	b29a      	uxth	r2, r3
 800476e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	e03b      	b.n	80047ec <USB_EPStartXfer+0x964>
 8004774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004778:	095b      	lsrs	r3, r3, #5
 800477a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800477e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	2b00      	cmp	r3, #0
 8004788:	d104      	bne.n	8004794 <USB_EPStartXfer+0x90c>
 800478a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800478e:	3b01      	subs	r3, #1
 8004790:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004794:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004798:	b29b      	uxth	r3, r3
 800479a:	029b      	lsls	r3, r3, #10
 800479c:	b29b      	uxth	r3, r3
 800479e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047aa:	801a      	strh	r2, [r3, #0]
 80047ac:	e01e      	b.n	80047ec <USB_EPStartXfer+0x964>
 80047ae:	463b      	mov	r3, r7
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	785b      	ldrb	r3, [r3, #1]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d119      	bne.n	80047ec <USB_EPStartXfer+0x964>
 80047b8:	1d3b      	adds	r3, r7, #4
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047c8:	4413      	add	r3, r2
 80047ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047ce:	463b      	mov	r3, r7
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	011a      	lsls	r2, r3, #4
 80047d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047da:	4413      	add	r3, r2
 80047dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80047e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80047ec:	463b      	mov	r3, r7
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	895b      	ldrh	r3, [r3, #10]
 80047f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047f6:	463b      	mov	r3, r7
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6959      	ldr	r1, [r3, #20]
 80047fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004800:	b29b      	uxth	r3, r3
 8004802:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004806:	1d38      	adds	r0, r7, #4
 8004808:	6800      	ldr	r0, [r0, #0]
 800480a:	f000 ff72 	bl	80056f2 <USB_WritePMA>
          ep->xfer_buff += len;
 800480e:	463b      	mov	r3, r7
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695a      	ldr	r2, [r3, #20]
 8004814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004818:	441a      	add	r2, r3
 800481a:	463b      	mov	r3, r7
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004820:	463b      	mov	r3, r7
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6a1a      	ldr	r2, [r3, #32]
 8004826:	463b      	mov	r3, r7
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	429a      	cmp	r2, r3
 800482e:	d909      	bls.n	8004844 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8004830:	463b      	mov	r3, r7
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6a1a      	ldr	r2, [r3, #32]
 8004836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800483a:	1ad2      	subs	r2, r2, r3
 800483c:	463b      	mov	r3, r7
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	621a      	str	r2, [r3, #32]
 8004842:	e008      	b.n	8004856 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8004844:	463b      	mov	r3, r7
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800484e:	463b      	mov	r3, r7
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2200      	movs	r2, #0
 8004854:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004856:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 821a 	beq.w	8004c94 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004860:	463b      	mov	r3, r7
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	785b      	ldrb	r3, [r3, #1]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d164      	bne.n	8004934 <USB_EPStartXfer+0xaac>
 800486a:	1d3b      	adds	r3, r7, #4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004870:	1d3b      	adds	r3, r7, #4
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004878:	b29b      	uxth	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800487e:	4413      	add	r3, r2
 8004880:	66bb      	str	r3, [r7, #104]	; 0x68
 8004882:	463b      	mov	r3, r7
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	011a      	lsls	r2, r3, #4
 800488a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800488c:	4413      	add	r3, r2
 800488e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004892:	667b      	str	r3, [r7, #100]	; 0x64
 8004894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d112      	bne.n	80048c2 <USB_EPStartXfer+0xa3a>
 800489c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048aa:	801a      	strh	r2, [r3, #0]
 80048ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	e057      	b.n	8004972 <USB_EPStartXfer+0xaea>
 80048c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048c6:	2b3e      	cmp	r3, #62	; 0x3e
 80048c8:	d817      	bhi.n	80048fa <USB_EPStartXfer+0xa72>
 80048ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ce:	085b      	lsrs	r3, r3, #1
 80048d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80048d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d004      	beq.n	80048ea <USB_EPStartXfer+0xa62>
 80048e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e4:	3301      	adds	r3, #1
 80048e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80048ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	029b      	lsls	r3, r3, #10
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048f6:	801a      	strh	r2, [r3, #0]
 80048f8:	e03b      	b.n	8004972 <USB_EPStartXfer+0xaea>
 80048fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	2b00      	cmp	r3, #0
 800490e:	d104      	bne.n	800491a <USB_EPStartXfer+0xa92>
 8004910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004914:	3b01      	subs	r3, #1
 8004916:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800491a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800491e:	b29b      	uxth	r3, r3
 8004920:	029b      	lsls	r3, r3, #10
 8004922:	b29b      	uxth	r3, r3
 8004924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800492c:	b29a      	uxth	r2, r3
 800492e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004930:	801a      	strh	r2, [r3, #0]
 8004932:	e01e      	b.n	8004972 <USB_EPStartXfer+0xaea>
 8004934:	463b      	mov	r3, r7
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	785b      	ldrb	r3, [r3, #1]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d119      	bne.n	8004972 <USB_EPStartXfer+0xaea>
 800493e:	1d3b      	adds	r3, r7, #4
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	673b      	str	r3, [r7, #112]	; 0x70
 8004944:	1d3b      	adds	r3, r7, #4
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800494c:	b29b      	uxth	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004952:	4413      	add	r3, r2
 8004954:	673b      	str	r3, [r7, #112]	; 0x70
 8004956:	463b      	mov	r3, r7
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	011a      	lsls	r2, r3, #4
 800495e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004960:	4413      	add	r3, r2
 8004962:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004966:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800496c:	b29a      	uxth	r2, r3
 800496e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004970:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004972:	463b      	mov	r3, r7
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	891b      	ldrh	r3, [r3, #8]
 8004978:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800497c:	463b      	mov	r3, r7
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6959      	ldr	r1, [r3, #20]
 8004982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004986:	b29b      	uxth	r3, r3
 8004988:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800498c:	1d38      	adds	r0, r7, #4
 800498e:	6800      	ldr	r0, [r0, #0]
 8004990:	f000 feaf 	bl	80056f2 <USB_WritePMA>
 8004994:	e17e      	b.n	8004c94 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004996:	463b      	mov	r3, r7
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	785b      	ldrb	r3, [r3, #1]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d16f      	bne.n	8004a80 <USB_EPStartXfer+0xbf8>
 80049a0:	1d3b      	adds	r3, r7, #4
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049a8:	1d3b      	adds	r3, r7, #4
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	461a      	mov	r2, r3
 80049b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049b8:	4413      	add	r3, r2
 80049ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049be:	463b      	mov	r3, r7
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	011a      	lsls	r2, r3, #4
 80049c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049ca:	4413      	add	r3, r2
 80049cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d116      	bne.n	8004a0a <USB_EPStartXfer+0xb82>
 80049dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049ee:	801a      	strh	r2, [r3, #0]
 80049f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a06:	801a      	strh	r2, [r3, #0]
 8004a08:	e05f      	b.n	8004aca <USB_EPStartXfer+0xc42>
 8004a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a0e:	2b3e      	cmp	r3, #62	; 0x3e
 8004a10:	d818      	bhi.n	8004a44 <USB_EPStartXfer+0xbbc>
 8004a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a16:	085b      	lsrs	r3, r3, #1
 8004a18:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d004      	beq.n	8004a32 <USB_EPStartXfer+0xbaa>
 8004a28:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004a32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	029b      	lsls	r3, r3, #10
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a40:	801a      	strh	r2, [r3, #0]
 8004a42:	e042      	b.n	8004aca <USB_EPStartXfer+0xc42>
 8004a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d104      	bne.n	8004a64 <USB_EPStartXfer+0xbdc>
 8004a5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004a64:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	029b      	lsls	r3, r3, #10
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a7c:	801a      	strh	r2, [r3, #0]
 8004a7e:	e024      	b.n	8004aca <USB_EPStartXfer+0xc42>
 8004a80:	463b      	mov	r3, r7
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	785b      	ldrb	r3, [r3, #1]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d11f      	bne.n	8004aca <USB_EPStartXfer+0xc42>
 8004a8a:	1d3b      	adds	r3, r7, #4
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004a92:	1d3b      	adds	r3, r7, #4
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004aa8:	463b      	mov	r3, r7
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	011a      	lsls	r2, r3, #4
 8004ab0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ac8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004aca:	463b      	mov	r3, r7
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	891b      	ldrh	r3, [r3, #8]
 8004ad0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ad4:	463b      	mov	r3, r7
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6959      	ldr	r1, [r3, #20]
 8004ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ae4:	1d38      	adds	r0, r7, #4
 8004ae6:	6800      	ldr	r0, [r0, #0]
 8004ae8:	f000 fe03 	bl	80056f2 <USB_WritePMA>
          ep->xfer_buff += len;
 8004aec:	463b      	mov	r3, r7
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695a      	ldr	r2, [r3, #20]
 8004af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004af6:	441a      	add	r2, r3
 8004af8:	463b      	mov	r3, r7
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004afe:	463b      	mov	r3, r7
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6a1a      	ldr	r2, [r3, #32]
 8004b04:	463b      	mov	r3, r7
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d909      	bls.n	8004b22 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8004b0e:	463b      	mov	r3, r7
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6a1a      	ldr	r2, [r3, #32]
 8004b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b18:	1ad2      	subs	r2, r2, r3
 8004b1a:	463b      	mov	r3, r7
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	621a      	str	r2, [r3, #32]
 8004b20:	e008      	b.n	8004b34 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8004b22:	463b      	mov	r3, r7
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004b2c:	463b      	mov	r3, r7
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2200      	movs	r2, #0
 8004b32:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80ab 	beq.w	8004c94 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b3e:	1d3b      	adds	r3, r7, #4
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b46:	463b      	mov	r3, r7
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	785b      	ldrb	r3, [r3, #1]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d16f      	bne.n	8004c30 <USB_EPStartXfer+0xda8>
 8004b50:	1d3b      	adds	r3, r7, #4
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b58:	1d3b      	adds	r3, r7, #4
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	461a      	mov	r2, r3
 8004b64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b68:	4413      	add	r3, r2
 8004b6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b6e:	463b      	mov	r3, r7
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	011a      	lsls	r2, r3, #4
 8004b76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d116      	bne.n	8004bba <USB_EPStartXfer+0xd32>
 8004b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b9e:	801a      	strh	r2, [r3, #0]
 8004ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bb6:	801a      	strh	r2, [r3, #0]
 8004bb8:	e05b      	b.n	8004c72 <USB_EPStartXfer+0xdea>
 8004bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bbe:	2b3e      	cmp	r3, #62	; 0x3e
 8004bc0:	d818      	bhi.n	8004bf4 <USB_EPStartXfer+0xd6c>
 8004bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bc6:	085b      	lsrs	r3, r3, #1
 8004bc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d004      	beq.n	8004be2 <USB_EPStartXfer+0xd5a>
 8004bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bdc:	3301      	adds	r3, #1
 8004bde:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	029b      	lsls	r3, r3, #10
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bf0:	801a      	strh	r2, [r3, #0]
 8004bf2:	e03e      	b.n	8004c72 <USB_EPStartXfer+0xdea>
 8004bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c02:	f003 031f 	and.w	r3, r3, #31
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d104      	bne.n	8004c14 <USB_EPStartXfer+0xd8c>
 8004c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	029b      	lsls	r3, r3, #10
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c2c:	801a      	strh	r2, [r3, #0]
 8004c2e:	e020      	b.n	8004c72 <USB_EPStartXfer+0xdea>
 8004c30:	463b      	mov	r3, r7
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	785b      	ldrb	r3, [r3, #1]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d11b      	bne.n	8004c72 <USB_EPStartXfer+0xdea>
 8004c3a:	1d3b      	adds	r3, r7, #4
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	461a      	mov	r2, r3
 8004c46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c50:	463b      	mov	r3, r7
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	011a      	lsls	r2, r3, #4
 8004c58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004c72:	463b      	mov	r3, r7
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	895b      	ldrh	r3, [r3, #10]
 8004c78:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c7c:	463b      	mov	r3, r7
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6959      	ldr	r1, [r3, #20]
 8004c82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004c8c:	1d38      	adds	r0, r7, #4
 8004c8e:	6800      	ldr	r0, [r0, #0]
 8004c90:	f000 fd2f 	bl	80056f2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004c94:	1d3b      	adds	r3, r7, #4
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	463b      	mov	r3, r7
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	f107 020a 	add.w	r2, r7, #10
 8004caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb2:	8013      	strh	r3, [r2, #0]
 8004cb4:	f107 030a 	add.w	r3, r7, #10
 8004cb8:	f107 020a 	add.w	r2, r7, #10
 8004cbc:	8812      	ldrh	r2, [r2, #0]
 8004cbe:	f082 0210 	eor.w	r2, r2, #16
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	f107 030a 	add.w	r3, r7, #10
 8004cc8:	f107 020a 	add.w	r2, r7, #10
 8004ccc:	8812      	ldrh	r2, [r2, #0]
 8004cce:	f082 0220 	eor.w	r2, r2, #32
 8004cd2:	801a      	strh	r2, [r3, #0]
 8004cd4:	1d3b      	adds	r3, r7, #4
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	463b      	mov	r3, r7
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	441a      	add	r2, r3
 8004ce2:	f107 030a 	add.w	r3, r7, #10
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	8013      	strh	r3, [r2, #0]
 8004cfc:	e3b5      	b.n	800546a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004cfe:	463b      	mov	r3, r7
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	7b1b      	ldrb	r3, [r3, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f040 8090 	bne.w	8004e2a <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004d0a:	463b      	mov	r3, r7
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699a      	ldr	r2, [r3, #24]
 8004d10:	463b      	mov	r3, r7
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d90e      	bls.n	8004d38 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8004d1a:	463b      	mov	r3, r7
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8004d24:	463b      	mov	r3, r7
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d2e:	1ad2      	subs	r2, r2, r3
 8004d30:	463b      	mov	r3, r7
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	619a      	str	r2, [r3, #24]
 8004d36:	e008      	b.n	8004d4a <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8004d38:	463b      	mov	r3, r7
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8004d42:	463b      	mov	r3, r7
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2200      	movs	r2, #0
 8004d48:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004d4a:	1d3b      	adds	r3, r7, #4
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d52:	1d3b      	adds	r3, r7, #4
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d62:	4413      	add	r3, r2
 8004d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d68:	463b      	mov	r3, r7
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	011a      	lsls	r2, r3, #4
 8004d70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d74:	4413      	add	r3, r2
 8004d76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d116      	bne.n	8004db4 <USB_EPStartXfer+0xf2c>
 8004d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d98:	801a      	strh	r2, [r3, #0]
 8004d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004db0:	801a      	strh	r2, [r3, #0]
 8004db2:	e32c      	b.n	800540e <USB_EPStartXfer+0x1586>
 8004db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004db8:	2b3e      	cmp	r3, #62	; 0x3e
 8004dba:	d818      	bhi.n	8004dee <USB_EPStartXfer+0xf66>
 8004dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dc0:	085b      	lsrs	r3, r3, #1
 8004dc2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d004      	beq.n	8004ddc <USB_EPStartXfer+0xf54>
 8004dd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004ddc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	029b      	lsls	r3, r3, #10
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dea:	801a      	strh	r2, [r3, #0]
 8004dec:	e30f      	b.n	800540e <USB_EPStartXfer+0x1586>
 8004dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dfc:	f003 031f 	and.w	r3, r3, #31
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d104      	bne.n	8004e0e <USB_EPStartXfer+0xf86>
 8004e04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004e0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	029b      	lsls	r3, r3, #10
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e26:	801a      	strh	r2, [r3, #0]
 8004e28:	e2f1      	b.n	800540e <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004e2a:	463b      	mov	r3, r7
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	78db      	ldrb	r3, [r3, #3]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	f040 818f 	bne.w	8005154 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004e36:	463b      	mov	r3, r7
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	785b      	ldrb	r3, [r3, #1]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d175      	bne.n	8004f2c <USB_EPStartXfer+0x10a4>
 8004e40:	1d3b      	adds	r3, r7, #4
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e48:	1d3b      	adds	r3, r7, #4
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	461a      	mov	r2, r3
 8004e54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e58:	4413      	add	r3, r2
 8004e5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e5e:	463b      	mov	r3, r7
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	011a      	lsls	r2, r3, #4
 8004e66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e74:	463b      	mov	r3, r7
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d116      	bne.n	8004eac <USB_EPStartXfer+0x1024>
 8004e7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e90:	801a      	strh	r2, [r3, #0]
 8004e92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ea8:	801a      	strh	r2, [r3, #0]
 8004eaa:	e065      	b.n	8004f78 <USB_EPStartXfer+0x10f0>
 8004eac:	463b      	mov	r3, r7
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b3e      	cmp	r3, #62	; 0x3e
 8004eb4:	d81a      	bhi.n	8004eec <USB_EPStartXfer+0x1064>
 8004eb6:	463b      	mov	r3, r7
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	085b      	lsrs	r3, r3, #1
 8004ebe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ec2:	463b      	mov	r3, r7
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d004      	beq.n	8004eda <USB_EPStartXfer+0x1052>
 8004ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	029b      	lsls	r3, r3, #10
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ee8:	801a      	strh	r2, [r3, #0]
 8004eea:	e045      	b.n	8004f78 <USB_EPStartXfer+0x10f0>
 8004eec:	463b      	mov	r3, r7
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ef8:	463b      	mov	r3, r7
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f003 031f 	and.w	r3, r3, #31
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d104      	bne.n	8004f10 <USB_EPStartXfer+0x1088>
 8004f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	029b      	lsls	r3, r3, #10
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f28:	801a      	strh	r2, [r3, #0]
 8004f2a:	e025      	b.n	8004f78 <USB_EPStartXfer+0x10f0>
 8004f2c:	463b      	mov	r3, r7
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	785b      	ldrb	r3, [r3, #1]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d120      	bne.n	8004f78 <USB_EPStartXfer+0x10f0>
 8004f36:	1d3b      	adds	r3, r7, #4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004f3e:	1d3b      	adds	r3, r7, #4
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f4e:	4413      	add	r3, r2
 8004f50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004f54:	463b      	mov	r3, r7
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	011a      	lsls	r2, r3, #4
 8004f5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f60:	4413      	add	r3, r2
 8004f62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f6a:	463b      	mov	r3, r7
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004f76:	801a      	strh	r2, [r3, #0]
 8004f78:	1d3b      	adds	r3, r7, #4
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f80:	463b      	mov	r3, r7
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	785b      	ldrb	r3, [r3, #1]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d175      	bne.n	8005076 <USB_EPStartXfer+0x11ee>
 8004f8a:	1d3b      	adds	r3, r7, #4
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004f92:	1d3b      	adds	r3, r7, #4
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004fa8:	463b      	mov	r3, r7
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	011a      	lsls	r2, r3, #4
 8004fb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fbe:	463b      	mov	r3, r7
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d116      	bne.n	8004ff6 <USB_EPStartXfer+0x116e>
 8004fc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fda:	801a      	strh	r2, [r3, #0]
 8004fdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ff2:	801a      	strh	r2, [r3, #0]
 8004ff4:	e061      	b.n	80050ba <USB_EPStartXfer+0x1232>
 8004ff6:	463b      	mov	r3, r7
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	2b3e      	cmp	r3, #62	; 0x3e
 8004ffe:	d81a      	bhi.n	8005036 <USB_EPStartXfer+0x11ae>
 8005000:	463b      	mov	r3, r7
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	085b      	lsrs	r3, r3, #1
 8005008:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800500c:	463b      	mov	r3, r7
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d004      	beq.n	8005024 <USB_EPStartXfer+0x119c>
 800501a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800501e:	3301      	adds	r3, #1
 8005020:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005024:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005028:	b29b      	uxth	r3, r3
 800502a:	029b      	lsls	r3, r3, #10
 800502c:	b29a      	uxth	r2, r3
 800502e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005032:	801a      	strh	r2, [r3, #0]
 8005034:	e041      	b.n	80050ba <USB_EPStartXfer+0x1232>
 8005036:	463b      	mov	r3, r7
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005042:	463b      	mov	r3, r7
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f003 031f 	and.w	r3, r3, #31
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <USB_EPStartXfer+0x11d2>
 8005050:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005054:	3b01      	subs	r3, #1
 8005056:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800505a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800505e:	b29b      	uxth	r3, r3
 8005060:	029b      	lsls	r3, r3, #10
 8005062:	b29b      	uxth	r3, r3
 8005064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800506c:	b29a      	uxth	r2, r3
 800506e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005072:	801a      	strh	r2, [r3, #0]
 8005074:	e021      	b.n	80050ba <USB_EPStartXfer+0x1232>
 8005076:	463b      	mov	r3, r7
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	785b      	ldrb	r3, [r3, #1]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d11c      	bne.n	80050ba <USB_EPStartXfer+0x1232>
 8005080:	1d3b      	adds	r3, r7, #4
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005088:	b29b      	uxth	r3, r3
 800508a:	461a      	mov	r2, r3
 800508c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005090:	4413      	add	r3, r2
 8005092:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005096:	463b      	mov	r3, r7
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	011a      	lsls	r2, r3, #4
 800509e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050a2:	4413      	add	r3, r2
 80050a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050ac:	463b      	mov	r3, r7
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050b8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80050ba:	463b      	mov	r3, r7
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 81a4 	beq.w	800540e <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80050c6:	1d3b      	adds	r3, r7, #4
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	463b      	mov	r3, r7
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80050da:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80050de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <USB_EPStartXfer+0x126a>
 80050e6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80050ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10d      	bne.n	800510e <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80050f2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80050f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f040 8187 	bne.w	800540e <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005100:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005108:	2b00      	cmp	r3, #0
 800510a:	f040 8180 	bne.w	800540e <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800510e:	1d3b      	adds	r3, r7, #4
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	463b      	mov	r3, r7
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005128:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800512c:	1d3b      	adds	r3, r7, #4
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	463b      	mov	r3, r7
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	441a      	add	r2, r3
 800513a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800513e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800514a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800514e:	b29b      	uxth	r3, r3
 8005150:	8013      	strh	r3, [r2, #0]
 8005152:	e15c      	b.n	800540e <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005154:	463b      	mov	r3, r7
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	78db      	ldrb	r3, [r3, #3]
 800515a:	2b01      	cmp	r3, #1
 800515c:	f040 8155 	bne.w	800540a <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005160:	463b      	mov	r3, r7
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699a      	ldr	r2, [r3, #24]
 8005166:	463b      	mov	r3, r7
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	429a      	cmp	r2, r3
 800516e:	d90e      	bls.n	800518e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8005170:	463b      	mov	r3, r7
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800517a:	463b      	mov	r3, r7
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	699a      	ldr	r2, [r3, #24]
 8005180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005184:	1ad2      	subs	r2, r2, r3
 8005186:	463b      	mov	r3, r7
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	619a      	str	r2, [r3, #24]
 800518c:	e008      	b.n	80051a0 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800518e:	463b      	mov	r3, r7
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005198:	463b      	mov	r3, r7
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2200      	movs	r2, #0
 800519e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80051a0:	463b      	mov	r3, r7
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	785b      	ldrb	r3, [r3, #1]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d16f      	bne.n	800528a <USB_EPStartXfer+0x1402>
 80051aa:	1d3b      	adds	r3, r7, #4
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80051b2:	1d3b      	adds	r3, r7, #4
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80051c2:	4413      	add	r3, r2
 80051c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80051c8:	463b      	mov	r3, r7
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	011a      	lsls	r2, r3, #4
 80051d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80051d4:	4413      	add	r3, r2
 80051d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d116      	bne.n	8005214 <USB_EPStartXfer+0x138c>
 80051e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051f8:	801a      	strh	r2, [r3, #0]
 80051fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800520a:	b29a      	uxth	r2, r3
 800520c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005210:	801a      	strh	r2, [r3, #0]
 8005212:	e05f      	b.n	80052d4 <USB_EPStartXfer+0x144c>
 8005214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005218:	2b3e      	cmp	r3, #62	; 0x3e
 800521a:	d818      	bhi.n	800524e <USB_EPStartXfer+0x13c6>
 800521c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005220:	085b      	lsrs	r3, r3, #1
 8005222:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005226:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d004      	beq.n	800523c <USB_EPStartXfer+0x13b4>
 8005232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005236:	3301      	adds	r3, #1
 8005238:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800523c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005240:	b29b      	uxth	r3, r3
 8005242:	029b      	lsls	r3, r3, #10
 8005244:	b29a      	uxth	r2, r3
 8005246:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800524a:	801a      	strh	r2, [r3, #0]
 800524c:	e042      	b.n	80052d4 <USB_EPStartXfer+0x144c>
 800524e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	2b00      	cmp	r3, #0
 8005262:	d104      	bne.n	800526e <USB_EPStartXfer+0x13e6>
 8005264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005268:	3b01      	subs	r3, #1
 800526a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800526e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005272:	b29b      	uxth	r3, r3
 8005274:	029b      	lsls	r3, r3, #10
 8005276:	b29b      	uxth	r3, r3
 8005278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800527c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005280:	b29a      	uxth	r2, r3
 8005282:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005286:	801a      	strh	r2, [r3, #0]
 8005288:	e024      	b.n	80052d4 <USB_EPStartXfer+0x144c>
 800528a:	463b      	mov	r3, r7
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	785b      	ldrb	r3, [r3, #1]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d11f      	bne.n	80052d4 <USB_EPStartXfer+0x144c>
 8005294:	1d3b      	adds	r3, r7, #4
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800529c:	1d3b      	adds	r3, r7, #4
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ac:	4413      	add	r3, r2
 80052ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80052b2:	463b      	mov	r3, r7
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	011a      	lsls	r2, r3, #4
 80052ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052be:	4413      	add	r3, r2
 80052c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80052c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80052d2:	801a      	strh	r2, [r3, #0]
 80052d4:	1d3b      	adds	r3, r7, #4
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052dc:	463b      	mov	r3, r7
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	785b      	ldrb	r3, [r3, #1]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d16f      	bne.n	80053c6 <USB_EPStartXfer+0x153e>
 80052e6:	1d3b      	adds	r3, r7, #4
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052ee:	1d3b      	adds	r3, r7, #4
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	461a      	mov	r2, r3
 80052fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052fe:	4413      	add	r3, r2
 8005300:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005304:	463b      	mov	r3, r7
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	011a      	lsls	r2, r3, #4
 800530c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005310:	4413      	add	r3, r2
 8005312:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800531a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800531e:	2b00      	cmp	r3, #0
 8005320:	d116      	bne.n	8005350 <USB_EPStartXfer+0x14c8>
 8005322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	b29b      	uxth	r3, r3
 800532a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800532e:	b29a      	uxth	r2, r3
 8005330:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005334:	801a      	strh	r2, [r3, #0]
 8005336:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005346:	b29a      	uxth	r2, r3
 8005348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800534c:	801a      	strh	r2, [r3, #0]
 800534e:	e05e      	b.n	800540e <USB_EPStartXfer+0x1586>
 8005350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005354:	2b3e      	cmp	r3, #62	; 0x3e
 8005356:	d818      	bhi.n	800538a <USB_EPStartXfer+0x1502>
 8005358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800535c:	085b      	lsrs	r3, r3, #1
 800535e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d004      	beq.n	8005378 <USB_EPStartXfer+0x14f0>
 800536e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005372:	3301      	adds	r3, #1
 8005374:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005378:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800537c:	b29b      	uxth	r3, r3
 800537e:	029b      	lsls	r3, r3, #10
 8005380:	b29a      	uxth	r2, r3
 8005382:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005386:	801a      	strh	r2, [r3, #0]
 8005388:	e041      	b.n	800540e <USB_EPStartXfer+0x1586>
 800538a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005394:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005398:	f003 031f 	and.w	r3, r3, #31
 800539c:	2b00      	cmp	r3, #0
 800539e:	d104      	bne.n	80053aa <USB_EPStartXfer+0x1522>
 80053a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053a4:	3b01      	subs	r3, #1
 80053a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	029b      	lsls	r3, r3, #10
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053bc:	b29a      	uxth	r2, r3
 80053be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053c2:	801a      	strh	r2, [r3, #0]
 80053c4:	e023      	b.n	800540e <USB_EPStartXfer+0x1586>
 80053c6:	463b      	mov	r3, r7
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	785b      	ldrb	r3, [r3, #1]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d11e      	bne.n	800540e <USB_EPStartXfer+0x1586>
 80053d0:	1d3b      	adds	r3, r7, #4
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d8:	b29b      	uxth	r3, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e0:	4413      	add	r3, r2
 80053e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053e6:	463b      	mov	r3, r7
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	011a      	lsls	r2, r3, #4
 80053ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f2:	4413      	add	r3, r2
 80053f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005400:	b29a      	uxth	r2, r3
 8005402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005406:	801a      	strh	r2, [r3, #0]
 8005408:	e001      	b.n	800540e <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e02e      	b.n	800546c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800540e:	1d3b      	adds	r3, r7, #4
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	463b      	mov	r3, r7
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005428:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800542c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005430:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005434:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005438:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800543c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005440:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005444:	1d3b      	adds	r3, r7, #4
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	463b      	mov	r3, r7
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	441a      	add	r2, r3
 8005452:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800545a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800545e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005466:	b29b      	uxth	r3, r3
 8005468:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005476:	b480      	push	{r7}
 8005478:	b085      	sub	sp, #20
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	785b      	ldrb	r3, [r3, #1]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d020      	beq.n	80054ca <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	b29b      	uxth	r3, r3
 8005496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800549e:	81bb      	strh	r3, [r7, #12]
 80054a0:	89bb      	ldrh	r3, [r7, #12]
 80054a2:	f083 0310 	eor.w	r3, r3, #16
 80054a6:	81bb      	strh	r3, [r7, #12]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	441a      	add	r2, r3
 80054b2:	89bb      	ldrh	r3, [r7, #12]
 80054b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	8013      	strh	r3, [r2, #0]
 80054c8:	e01f      	b.n	800550a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e0:	81fb      	strh	r3, [r7, #14]
 80054e2:	89fb      	ldrh	r3, [r7, #14]
 80054e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80054e8:	81fb      	strh	r3, [r7, #14]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	441a      	add	r2, r3
 80054f4:	89fb      	ldrh	r3, [r7, #14]
 80054f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005506:	b29b      	uxth	r3, r3
 8005508:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr

08005516 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005516:	b480      	push	{r7}
 8005518:	b087      	sub	sp, #28
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	7b1b      	ldrb	r3, [r3, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	f040 809d 	bne.w	8005664 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d04c      	beq.n	80055cc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	823b      	strh	r3, [r7, #16]
 8005540:	8a3b      	ldrh	r3, [r7, #16]
 8005542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d01b      	beq.n	8005582 <USB_EPClearStall+0x6c>
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	b29b      	uxth	r3, r3
 8005558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800555c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005560:	81fb      	strh	r3, [r7, #14]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	441a      	add	r2, r3
 800556c:	89fb      	ldrh	r3, [r7, #14]
 800556e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800557a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800557e:	b29b      	uxth	r3, r3
 8005580:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	78db      	ldrb	r3, [r3, #3]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d06c      	beq.n	8005664 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	b29b      	uxth	r3, r3
 8005598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a0:	81bb      	strh	r3, [r7, #12]
 80055a2:	89bb      	ldrh	r3, [r7, #12]
 80055a4:	f083 0320 	eor.w	r3, r3, #32
 80055a8:	81bb      	strh	r3, [r7, #12]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	441a      	add	r2, r3
 80055b4:	89bb      	ldrh	r3, [r7, #12]
 80055b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	8013      	strh	r3, [r2, #0]
 80055ca:	e04b      	b.n	8005664 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	82fb      	strh	r3, [r7, #22]
 80055da:	8afb      	ldrh	r3, [r7, #22]
 80055dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d01b      	beq.n	800561c <USB_EPClearStall+0x106>
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fa:	82bb      	strh	r3, [r7, #20]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	441a      	add	r2, r3
 8005606:	8abb      	ldrh	r3, [r7, #20]
 8005608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800560c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005610:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005618:	b29b      	uxth	r3, r3
 800561a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	b29b      	uxth	r3, r3
 800562a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800562e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005632:	827b      	strh	r3, [r7, #18]
 8005634:	8a7b      	ldrh	r3, [r7, #18]
 8005636:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800563a:	827b      	strh	r3, [r7, #18]
 800563c:	8a7b      	ldrh	r3, [r7, #18]
 800563e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005642:	827b      	strh	r3, [r7, #18]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	441a      	add	r2, r3
 800564e:	8a7b      	ldrh	r3, [r7, #18]
 8005650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800565c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005660:	b29b      	uxth	r3, r3
 8005662:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	460b      	mov	r3, r1
 800567a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d103      	bne.n	800568a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2280      	movs	r2, #128	; 0x80
 8005686:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr

08005696 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr

080056aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr

080056be <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80056be:	b480      	push	{r7}
 80056c0:	b085      	sub	sp, #20
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80056d0:	68fb      	ldr	r3, [r7, #12]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr

080056dc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr

080056f2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b08d      	sub	sp, #52	; 0x34
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	4611      	mov	r1, r2
 80056fe:	461a      	mov	r2, r3
 8005700:	460b      	mov	r3, r1
 8005702:	80fb      	strh	r3, [r7, #6]
 8005704:	4613      	mov	r3, r2
 8005706:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005708:	88bb      	ldrh	r3, [r7, #4]
 800570a:	3301      	adds	r3, #1
 800570c:	085b      	lsrs	r3, r3, #1
 800570e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005718:	88fb      	ldrh	r3, [r7, #6]
 800571a:	005a      	lsls	r2, r3, #1
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005724:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800572a:	e01e      	b.n	800576a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	3301      	adds	r3, #1
 8005736:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	021b      	lsls	r3, r3, #8
 8005740:	b29b      	uxth	r3, r3
 8005742:	461a      	mov	r2, r3
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	b29a      	uxth	r2, r3
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005754:	3302      	adds	r3, #2
 8005756:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	3302      	adds	r3, #2
 800575c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	3301      	adds	r3, #1
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005766:	3b01      	subs	r3, #1
 8005768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800576a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1dd      	bne.n	800572c <USB_WritePMA+0x3a>
  }
}
 8005770:	bf00      	nop
 8005772:	bf00      	nop
 8005774:	3734      	adds	r7, #52	; 0x34
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr

0800577c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800577c:	b480      	push	{r7}
 800577e:	b08b      	sub	sp, #44	; 0x2c
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	4611      	mov	r1, r2
 8005788:	461a      	mov	r2, r3
 800578a:	460b      	mov	r3, r1
 800578c:	80fb      	strh	r3, [r7, #6]
 800578e:	4613      	mov	r3, r2
 8005790:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005792:	88bb      	ldrh	r3, [r7, #4]
 8005794:	085b      	lsrs	r3, r3, #1
 8005796:	b29b      	uxth	r3, r3
 8005798:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80057a2:	88fb      	ldrh	r3, [r7, #6]
 80057a4:	005a      	lsls	r2, r3, #1
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ae:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	627b      	str	r3, [r7, #36]	; 0x24
 80057b4:	e01b      	b.n	80057ee <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	3302      	adds	r3, #2
 80057c2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	3301      	adds	r3, #1
 80057d0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	0a1b      	lsrs	r3, r3, #8
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	3301      	adds	r3, #1
 80057e0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	3302      	adds	r3, #2
 80057e6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	3b01      	subs	r3, #1
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1e0      	bne.n	80057b6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80057f4:	88bb      	ldrh	r3, [r7, #4]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d007      	beq.n	8005810 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	b2da      	uxtb	r2, r3
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	701a      	strb	r2, [r3, #0]
  }
}
 8005810:	bf00      	nop
 8005812:	372c      	adds	r7, #44	; 0x2c
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr

0800581a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	460b      	mov	r3, r1
 8005824:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	7c1b      	ldrb	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d115      	bne.n	800585e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005836:	2202      	movs	r2, #2
 8005838:	2181      	movs	r1, #129	; 0x81
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f004 fbf9 	bl	800a032 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800584a:	2202      	movs	r2, #2
 800584c:	2101      	movs	r1, #1
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f004 fbef 	bl	800a032 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800585c:	e012      	b.n	8005884 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800585e:	2340      	movs	r3, #64	; 0x40
 8005860:	2202      	movs	r2, #2
 8005862:	2181      	movs	r1, #129	; 0x81
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f004 fbe4 	bl	800a032 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005870:	2340      	movs	r3, #64	; 0x40
 8005872:	2202      	movs	r2, #2
 8005874:	2101      	movs	r1, #1
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f004 fbdb 	bl	800a032 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005884:	2308      	movs	r3, #8
 8005886:	2203      	movs	r2, #3
 8005888:	2182      	movs	r1, #130	; 0x82
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f004 fbd1 	bl	800a032 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005896:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800589a:	f004 fcf1 	bl	800a280 <USBD_static_malloc>
 800589e:	4602      	mov	r2, r0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d102      	bne.n	80058b6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80058b0:	2301      	movs	r3, #1
 80058b2:	73fb      	strb	r3, [r7, #15]
 80058b4:	e026      	b.n	8005904 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058bc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	7c1b      	ldrb	r3, [r3, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d109      	bne.n	80058f4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058ea:	2101      	movs	r1, #1
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f004 fc91 	bl	800a214 <USBD_LL_PrepareReceive>
 80058f2:	e007      	b.n	8005904 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058fa:	2340      	movs	r3, #64	; 0x40
 80058fc:	2101      	movs	r1, #1
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f004 fc88 	bl	800a214 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005904:	7bfb      	ldrb	r3, [r7, #15]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	460b      	mov	r3, r1
 8005918:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800591e:	2181      	movs	r1, #129	; 0x81
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f004 fbac 	bl	800a07e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800592c:	2101      	movs	r1, #1
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f004 fba5 	bl	800a07e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800593c:	2182      	movs	r1, #130	; 0x82
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f004 fb9d 	bl	800a07e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00e      	beq.n	8005972 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005964:	4618      	mov	r0, r3
 8005966:	f004 fc97 	bl	800a298 <USBD_static_free>
    pdev->pClassData = NULL;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005972:	7bfb      	ldrb	r3, [r7, #15]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800598c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d039      	beq.n	8005a1a <USBD_CDC_Setup+0x9e>
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d17f      	bne.n	8005aaa <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	88db      	ldrh	r3, [r3, #6]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d029      	beq.n	8005a06 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	b25b      	sxtb	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	da11      	bge.n	80059e0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80059c8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	88d2      	ldrh	r2, [r2, #6]
 80059ce:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80059d0:	6939      	ldr	r1, [r7, #16]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	88db      	ldrh	r3, [r3, #6]
 80059d6:	461a      	mov	r2, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f001 f9da 	bl	8006d92 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80059de:	e06b      	b.n	8005ab8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	785a      	ldrb	r2, [r3, #1]
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	88db      	ldrh	r3, [r3, #6]
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80059f6:	6939      	ldr	r1, [r7, #16]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	88db      	ldrh	r3, [r3, #6]
 80059fc:	461a      	mov	r2, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f001 f9f5 	bl	8006dee <USBD_CtlPrepareRx>
      break;
 8005a04:	e058      	b.n	8005ab8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	7850      	ldrb	r0, [r2, #1]
 8005a12:	2200      	movs	r2, #0
 8005a14:	6839      	ldr	r1, [r7, #0]
 8005a16:	4798      	blx	r3
      break;
 8005a18:	e04e      	b.n	8005ab8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	785b      	ldrb	r3, [r3, #1]
 8005a1e:	2b0b      	cmp	r3, #11
 8005a20:	d02e      	beq.n	8005a80 <USBD_CDC_Setup+0x104>
 8005a22:	2b0b      	cmp	r3, #11
 8005a24:	dc38      	bgt.n	8005a98 <USBD_CDC_Setup+0x11c>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <USBD_CDC_Setup+0xb4>
 8005a2a:	2b0a      	cmp	r3, #10
 8005a2c:	d014      	beq.n	8005a58 <USBD_CDC_Setup+0xdc>
 8005a2e:	e033      	b.n	8005a98 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d107      	bne.n	8005a4a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005a3a:	f107 030c 	add.w	r3, r7, #12
 8005a3e:	2202      	movs	r2, #2
 8005a40:	4619      	mov	r1, r3
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f001 f9a5 	bl	8006d92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a48:	e02e      	b.n	8005aa8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f001 f936 	bl	8006cbe <USBD_CtlError>
            ret = USBD_FAIL;
 8005a52:	2302      	movs	r3, #2
 8005a54:	75fb      	strb	r3, [r7, #23]
          break;
 8005a56:	e027      	b.n	8005aa8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	d107      	bne.n	8005a72 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a62:	f107 030f 	add.w	r3, r7, #15
 8005a66:	2201      	movs	r2, #1
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f001 f991 	bl	8006d92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a70:	e01a      	b.n	8005aa8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005a72:	6839      	ldr	r1, [r7, #0]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 f922 	bl	8006cbe <USBD_CtlError>
            ret = USBD_FAIL;
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	75fb      	strb	r3, [r7, #23]
          break;
 8005a7e:	e013      	b.n	8005aa8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d00d      	beq.n	8005aa6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005a8a:	6839      	ldr	r1, [r7, #0]
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f001 f916 	bl	8006cbe <USBD_CtlError>
            ret = USBD_FAIL;
 8005a92:	2302      	movs	r3, #2
 8005a94:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005a96:	e006      	b.n	8005aa6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f001 f90f 	bl	8006cbe <USBD_CtlError>
          ret = USBD_FAIL;
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	75fb      	strb	r3, [r7, #23]
          break;
 8005aa4:	e000      	b.n	8005aa8 <USBD_CDC_Setup+0x12c>
          break;
 8005aa6:	bf00      	nop
      }
      break;
 8005aa8:	e006      	b.n	8005ab8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005aaa:	6839      	ldr	r1, [r7, #0]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f001 f906 	bl	8006cbe <USBD_CtlError>
      ret = USBD_FAIL;
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab6:	bf00      	nop
  }

  return ret;
 8005ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	460b      	mov	r3, r1
 8005acc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005adc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d03a      	beq.n	8005b5e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005ae8:	78fa      	ldrb	r2, [r7, #3]
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	440b      	add	r3, r1
 8005af6:	331c      	adds	r3, #28
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d029      	beq.n	8005b52 <USBD_CDC_DataIn+0x90>
 8005afe:	78fa      	ldrb	r2, [r7, #3]
 8005b00:	6879      	ldr	r1, [r7, #4]
 8005b02:	4613      	mov	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	440b      	add	r3, r1
 8005b0c:	331c      	adds	r3, #28
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	78f9      	ldrb	r1, [r7, #3]
 8005b12:	68b8      	ldr	r0, [r7, #8]
 8005b14:	460b      	mov	r3, r1
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	440b      	add	r3, r1
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	4403      	add	r3, r0
 8005b1e:	3338      	adds	r3, #56	; 0x38
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b26:	fb03 f301 	mul.w	r3, r3, r1
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d110      	bne.n	8005b52 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005b30:	78fa      	ldrb	r2, [r7, #3]
 8005b32:	6879      	ldr	r1, [r7, #4]
 8005b34:	4613      	mov	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	331c      	adds	r3, #28
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b44:	78f9      	ldrb	r1, [r7, #3]
 8005b46:	2300      	movs	r3, #0
 8005b48:	2200      	movs	r2, #0
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f004 fb3f 	bl	800a1ce <USBD_LL_Transmit>
 8005b50:	e003      	b.n	8005b5a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e000      	b.n	8005b60 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005b5e:	2302      	movs	r3, #2
  }
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b7c:	78fb      	ldrb	r3, [r7, #3]
 8005b7e:	4619      	mov	r1, r3
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f004 fb6a 	bl	800a25a <USBD_LL_GetRxDataSize>
 8005b86:	4602      	mov	r2, r0
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00d      	beq.n	8005bb4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005bac:	4611      	mov	r1, r2
 8005bae:	4798      	blx	r3

    return USBD_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	e000      	b.n	8005bb6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005bb4:	2302      	movs	r3, #2
  }
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bcc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d015      	beq.n	8005c04 <USBD_CDC_EP0_RxReady+0x46>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005bde:	2bff      	cmp	r3, #255	; 0xff
 8005be0:	d010      	beq.n	8005c04 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005bf0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005bf8:	b292      	uxth	r2, r2
 8005bfa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	22ff      	movs	r2, #255	; 0xff
 8005c00:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2243      	movs	r2, #67	; 0x43
 8005c1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005c1e:	4b03      	ldr	r3, [pc, #12]	; (8005c2c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	20000094 	.word	0x20000094

08005c30 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2243      	movs	r2, #67	; 0x43
 8005c3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005c3e:	4b03      	ldr	r3, [pc, #12]	; (8005c4c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bc80      	pop	{r7}
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	20000050 	.word	0x20000050

08005c50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2243      	movs	r2, #67	; 0x43
 8005c5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005c5e:	4b03      	ldr	r3, [pc, #12]	; (8005c6c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	200000d8 	.word	0x200000d8

08005c70 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	220a      	movs	r2, #10
 8005c7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005c7e:	4b03      	ldr	r3, [pc, #12]	; (8005c8c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bc80      	pop	{r7}
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	2000000c 	.word	0x2000000c

08005c90 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d005      	beq.n	8005cb0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr

08005cbc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005cda:	88fa      	ldrh	r2, [r7, #6]
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	371c      	adds	r7, #28
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr

08005cee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bc80      	pop	{r7}
 8005d12:	4770      	bx	lr

08005d14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d017      	beq.n	8005d5e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	7c1b      	ldrb	r3, [r3, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d109      	bne.n	8005d4a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d40:	2101      	movs	r1, #1
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f004 fa66 	bl	800a214 <USBD_LL_PrepareReceive>
 8005d48:	e007      	b.n	8005d5a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d50:	2340      	movs	r3, #64	; 0x40
 8005d52:	2101      	movs	r1, #1
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f004 fa5d 	bl	800a214 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e000      	b.n	8005d60 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005d5e:	2302      	movs	r3, #2
  }
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	4613      	mov	r3, r2
 8005d74:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e01a      	b.n	8005db6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	79fa      	ldrb	r2, [r7, #7]
 8005dac:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f004 f8ca 	bl	8009f48 <USBD_LL_Init>

  return USBD_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b085      	sub	sp, #20
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d006      	beq.n	8005de0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	73fb      	strb	r3, [r7, #15]
 8005dde:	e001      	b.n	8005de4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005de0:	2302      	movs	r3, #2
 8005de2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr

08005df0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f004 f8ff 	bl	8009ffc <USBD_LL_Start>

  return USBD_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr

08005e1c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e28:	2302      	movs	r3, #2
 8005e2a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00c      	beq.n	8005e50 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	78fa      	ldrb	r2, [r7, #3]
 8005e40:	4611      	mov	r1, r2
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b082      	sub	sp, #8
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	460b      	mov	r3, r1
 8005e64:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	78fa      	ldrb	r2, [r7, #3]
 8005e70:	4611      	mov	r1, r2
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	4798      	blx	r3

  return USBD_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e90:	6839      	ldr	r1, [r7, #0]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fed7 	bl	8006c46 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005eb4:	f003 031f 	and.w	r3, r3, #31
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d016      	beq.n	8005eea <USBD_LL_SetupStage+0x6a>
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d81c      	bhi.n	8005efa <USBD_LL_SetupStage+0x7a>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <USBD_LL_SetupStage+0x4a>
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d008      	beq.n	8005eda <USBD_LL_SetupStage+0x5a>
 8005ec8:	e017      	b.n	8005efa <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f9ca 	bl	800626c <USBD_StdDevReq>
      break;
 8005ed8:	e01a      	b.n	8005f10 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fa2c 	bl	8006340 <USBD_StdItfReq>
      break;
 8005ee8:	e012      	b.n	8005f10 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fa6c 	bl	80063d0 <USBD_StdEPReq>
      break;
 8005ef8:	e00a      	b.n	8005f10 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005f00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f004 f8d7 	bl	800a0bc <USBD_LL_StallEP>
      break;
 8005f0e:	bf00      	nop
  }

  return USBD_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b086      	sub	sp, #24
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	460b      	mov	r3, r1
 8005f24:	607a      	str	r2, [r7, #4]
 8005f26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f28:	7afb      	ldrb	r3, [r7, #11]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d14b      	bne.n	8005fc6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f34:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d134      	bne.n	8005faa <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d919      	bls.n	8005f80 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	1ad2      	subs	r2, r2, r3
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d203      	bcs.n	8005f6e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	e002      	b.n	8005f74 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	461a      	mov	r2, r3
 8005f76:	6879      	ldr	r1, [r7, #4]
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 ff56 	bl	8006e2a <USBD_CtlContinueRx>
 8005f7e:	e038      	b.n	8005ff2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00a      	beq.n	8005fa2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f92:	2b03      	cmp	r3, #3
 8005f94:	d105      	bne.n	8005fa2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 ff53 	bl	8006e4e <USBD_CtlSendStatus>
 8005fa8:	e023      	b.n	8005ff2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fb0:	2b05      	cmp	r3, #5
 8005fb2:	d11e      	bne.n	8005ff2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f004 f87c 	bl	800a0bc <USBD_LL_StallEP>
 8005fc4:	e015      	b.n	8005ff2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00d      	beq.n	8005fee <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d108      	bne.n	8005fee <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	7afa      	ldrb	r2, [r7, #11]
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	4798      	blx	r3
 8005fec:	e001      	b.n	8005ff2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005fee:	2302      	movs	r3, #2
 8005ff0:	e000      	b.n	8005ff4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	460b      	mov	r3, r1
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800600a:	7afb      	ldrb	r3, [r7, #11]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d17f      	bne.n	8006110 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	3314      	adds	r3, #20
 8006014:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800601c:	2b02      	cmp	r3, #2
 800601e:	d15c      	bne.n	80060da <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	429a      	cmp	r2, r3
 800602a:	d915      	bls.n	8006058 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	68da      	ldr	r2, [r3, #12]
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	1ad2      	subs	r2, r2, r3
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	b29b      	uxth	r3, r3
 8006040:	461a      	mov	r2, r3
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 fec0 	bl	8006dca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800604a:	2300      	movs	r3, #0
 800604c:	2200      	movs	r2, #0
 800604e:	2100      	movs	r1, #0
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f004 f8df 	bl	800a214 <USBD_LL_PrepareReceive>
 8006056:	e04e      	b.n	80060f6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	6912      	ldr	r2, [r2, #16]
 8006060:	fbb3 f1f2 	udiv	r1, r3, r2
 8006064:	fb02 f201 	mul.w	r2, r2, r1
 8006068:	1a9b      	subs	r3, r3, r2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d11c      	bne.n	80060a8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006076:	429a      	cmp	r2, r3
 8006078:	d316      	bcc.n	80060a8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006084:	429a      	cmp	r2, r3
 8006086:	d20f      	bcs.n	80060a8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006088:	2200      	movs	r2, #0
 800608a:	2100      	movs	r1, #0
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 fe9c 	bl	8006dca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800609a:	2300      	movs	r3, #0
 800609c:	2200      	movs	r2, #0
 800609e:	2100      	movs	r1, #0
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f004 f8b7 	bl	800a214 <USBD_LL_PrepareReceive>
 80060a6:	e026      	b.n	80060f6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00a      	beq.n	80060ca <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d105      	bne.n	80060ca <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80060ca:	2180      	movs	r1, #128	; 0x80
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f003 fff5 	bl	800a0bc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 fece 	bl	8006e74 <USBD_CtlReceiveStatus>
 80060d8:	e00d      	b.n	80060f6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d004      	beq.n	80060ee <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d103      	bne.n	80060f6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80060ee:	2180      	movs	r1, #128	; 0x80
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f003 ffe3 	bl	800a0bc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d11d      	bne.n	800613c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f7ff fe81 	bl	8005e08 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800610e:	e015      	b.n	800613c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00d      	beq.n	8006138 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006122:	2b03      	cmp	r3, #3
 8006124:	d108      	bne.n	8006138 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	7afa      	ldrb	r2, [r7, #11]
 8006130:	4611      	mov	r1, r2
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	4798      	blx	r3
 8006136:	e001      	b.n	800613c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006138:	2302      	movs	r3, #2
 800613a:	e000      	b.n	800613e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b082      	sub	sp, #8
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800614e:	2340      	movs	r3, #64	; 0x40
 8006150:	2200      	movs	r2, #0
 8006152:	2100      	movs	r1, #0
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f003 ff6c 	bl	800a032 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2240      	movs	r2, #64	; 0x40
 8006166:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800616a:	2340      	movs	r3, #64	; 0x40
 800616c:	2200      	movs	r2, #0
 800616e:	2180      	movs	r1, #128	; 0x80
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f003 ff5e 	bl	800a032 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2240      	movs	r2, #64	; 0x40
 8006180:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d009      	beq.n	80061be <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6852      	ldr	r2, [r2, #4]
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	4611      	mov	r1, r2
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	4798      	blx	r3
  }

  return USBD_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	460b      	mov	r3, r1
 80061d2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	78fa      	ldrb	r2, [r7, #3]
 80061d8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bc80      	pop	{r7}
 80061e4:	4770      	bx	lr

080061e6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2204      	movs	r2, #4
 80061fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	bc80      	pop	{r7}
 800620c:	4770      	bx	lr

0800620e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800621c:	2b04      	cmp	r3, #4
 800621e:	d105      	bne.n	800622c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	bc80      	pop	{r7}
 8006236:	4770      	bx	lr

08006238 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006246:	2b03      	cmp	r3, #3
 8006248:	d10b      	bne.n	8006262 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d005      	beq.n	8006262 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006282:	2b40      	cmp	r3, #64	; 0x40
 8006284:	d005      	beq.n	8006292 <USBD_StdDevReq+0x26>
 8006286:	2b40      	cmp	r3, #64	; 0x40
 8006288:	d84f      	bhi.n	800632a <USBD_StdDevReq+0xbe>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d009      	beq.n	80062a2 <USBD_StdDevReq+0x36>
 800628e:	2b20      	cmp	r3, #32
 8006290:	d14b      	bne.n	800632a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	4798      	blx	r3
      break;
 80062a0:	e048      	b.n	8006334 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	785b      	ldrb	r3, [r3, #1]
 80062a6:	2b09      	cmp	r3, #9
 80062a8:	d839      	bhi.n	800631e <USBD_StdDevReq+0xb2>
 80062aa:	a201      	add	r2, pc, #4	; (adr r2, 80062b0 <USBD_StdDevReq+0x44>)
 80062ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b0:	08006301 	.word	0x08006301
 80062b4:	08006315 	.word	0x08006315
 80062b8:	0800631f 	.word	0x0800631f
 80062bc:	0800630b 	.word	0x0800630b
 80062c0:	0800631f 	.word	0x0800631f
 80062c4:	080062e3 	.word	0x080062e3
 80062c8:	080062d9 	.word	0x080062d9
 80062cc:	0800631f 	.word	0x0800631f
 80062d0:	080062f7 	.word	0x080062f7
 80062d4:	080062ed 	.word	0x080062ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f9dc 	bl	8006698 <USBD_GetDescriptor>
          break;
 80062e0:	e022      	b.n	8006328 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fb3f 	bl	8006968 <USBD_SetAddress>
          break;
 80062ea:	e01d      	b.n	8006328 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fb7e 	bl	80069f0 <USBD_SetConfig>
          break;
 80062f4:	e018      	b.n	8006328 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fc07 	bl	8006b0c <USBD_GetConfig>
          break;
 80062fe:	e013      	b.n	8006328 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fc37 	bl	8006b76 <USBD_GetStatus>
          break;
 8006308:	e00e      	b.n	8006328 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fc65 	bl	8006bdc <USBD_SetFeature>
          break;
 8006312:	e009      	b.n	8006328 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fc74 	bl	8006c04 <USBD_ClrFeature>
          break;
 800631c:	e004      	b.n	8006328 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fccc 	bl	8006cbe <USBD_CtlError>
          break;
 8006326:	bf00      	nop
      }
      break;
 8006328:	e004      	b.n	8006334 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800632a:	6839      	ldr	r1, [r7, #0]
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fcc6 	bl	8006cbe <USBD_CtlError>
      break;
 8006332:	bf00      	nop
  }

  return ret;
 8006334:	7bfb      	ldrb	r3, [r7, #15]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop

08006340 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006356:	2b40      	cmp	r3, #64	; 0x40
 8006358:	d005      	beq.n	8006366 <USBD_StdItfReq+0x26>
 800635a:	2b40      	cmp	r3, #64	; 0x40
 800635c:	d82e      	bhi.n	80063bc <USBD_StdItfReq+0x7c>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <USBD_StdItfReq+0x26>
 8006362:	2b20      	cmp	r3, #32
 8006364:	d12a      	bne.n	80063bc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800636c:	3b01      	subs	r3, #1
 800636e:	2b02      	cmp	r3, #2
 8006370:	d81d      	bhi.n	80063ae <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	889b      	ldrh	r3, [r3, #4]
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b01      	cmp	r3, #1
 800637a:	d813      	bhi.n	80063a4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	4798      	blx	r3
 800638a:	4603      	mov	r3, r0
 800638c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	88db      	ldrh	r3, [r3, #6]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d110      	bne.n	80063b8 <USBD_StdItfReq+0x78>
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10d      	bne.n	80063b8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fd56 	bl	8006e4e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80063a2:	e009      	b.n	80063b8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fc89 	bl	8006cbe <USBD_CtlError>
          break;
 80063ac:	e004      	b.n	80063b8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fc84 	bl	8006cbe <USBD_CtlError>
          break;
 80063b6:	e000      	b.n	80063ba <USBD_StdItfReq+0x7a>
          break;
 80063b8:	bf00      	nop
      }
      break;
 80063ba:	e004      	b.n	80063c6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fc7d 	bl	8006cbe <USBD_CtlError>
      break;
 80063c4:	bf00      	nop
  }

  return USBD_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	889b      	ldrh	r3, [r3, #4]
 80063e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063ec:	2b40      	cmp	r3, #64	; 0x40
 80063ee:	d007      	beq.n	8006400 <USBD_StdEPReq+0x30>
 80063f0:	2b40      	cmp	r3, #64	; 0x40
 80063f2:	f200 8146 	bhi.w	8006682 <USBD_StdEPReq+0x2b2>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <USBD_StdEPReq+0x40>
 80063fa:	2b20      	cmp	r3, #32
 80063fc:	f040 8141 	bne.w	8006682 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	4798      	blx	r3
      break;
 800640e:	e13d      	b.n	800668c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006418:	2b20      	cmp	r3, #32
 800641a:	d10a      	bne.n	8006432 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	4798      	blx	r3
 800642a:	4603      	mov	r3, r0
 800642c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800642e:	7bfb      	ldrb	r3, [r7, #15]
 8006430:	e12d      	b.n	800668e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	785b      	ldrb	r3, [r3, #1]
 8006436:	2b03      	cmp	r3, #3
 8006438:	d007      	beq.n	800644a <USBD_StdEPReq+0x7a>
 800643a:	2b03      	cmp	r3, #3
 800643c:	f300 811b 	bgt.w	8006676 <USBD_StdEPReq+0x2a6>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d072      	beq.n	800652a <USBD_StdEPReq+0x15a>
 8006444:	2b01      	cmp	r3, #1
 8006446:	d03a      	beq.n	80064be <USBD_StdEPReq+0xee>
 8006448:	e115      	b.n	8006676 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006450:	2b02      	cmp	r3, #2
 8006452:	d002      	beq.n	800645a <USBD_StdEPReq+0x8a>
 8006454:	2b03      	cmp	r3, #3
 8006456:	d015      	beq.n	8006484 <USBD_StdEPReq+0xb4>
 8006458:	e02b      	b.n	80064b2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800645a:	7bbb      	ldrb	r3, [r7, #14]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00c      	beq.n	800647a <USBD_StdEPReq+0xaa>
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	2b80      	cmp	r3, #128	; 0x80
 8006464:	d009      	beq.n	800647a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006466:	7bbb      	ldrb	r3, [r7, #14]
 8006468:	4619      	mov	r1, r3
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f003 fe26 	bl	800a0bc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006470:	2180      	movs	r1, #128	; 0x80
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f003 fe22 	bl	800a0bc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006478:	e020      	b.n	80064bc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fc1e 	bl	8006cbe <USBD_CtlError>
              break;
 8006482:	e01b      	b.n	80064bc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	885b      	ldrh	r3, [r3, #2]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10e      	bne.n	80064aa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800648c:	7bbb      	ldrb	r3, [r7, #14]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00b      	beq.n	80064aa <USBD_StdEPReq+0xda>
 8006492:	7bbb      	ldrb	r3, [r7, #14]
 8006494:	2b80      	cmp	r3, #128	; 0x80
 8006496:	d008      	beq.n	80064aa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	88db      	ldrh	r3, [r3, #6]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d104      	bne.n	80064aa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80064a0:	7bbb      	ldrb	r3, [r7, #14]
 80064a2:	4619      	mov	r1, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f003 fe09 	bl	800a0bc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fccf 	bl	8006e4e <USBD_CtlSendStatus>

              break;
 80064b0:	e004      	b.n	80064bc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fc02 	bl	8006cbe <USBD_CtlError>
              break;
 80064ba:	bf00      	nop
          }
          break;
 80064bc:	e0e0      	b.n	8006680 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d002      	beq.n	80064ce <USBD_StdEPReq+0xfe>
 80064c8:	2b03      	cmp	r3, #3
 80064ca:	d015      	beq.n	80064f8 <USBD_StdEPReq+0x128>
 80064cc:	e026      	b.n	800651c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00c      	beq.n	80064ee <USBD_StdEPReq+0x11e>
 80064d4:	7bbb      	ldrb	r3, [r7, #14]
 80064d6:	2b80      	cmp	r3, #128	; 0x80
 80064d8:	d009      	beq.n	80064ee <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80064da:	7bbb      	ldrb	r3, [r7, #14]
 80064dc:	4619      	mov	r1, r3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f003 fdec 	bl	800a0bc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80064e4:	2180      	movs	r1, #128	; 0x80
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f003 fde8 	bl	800a0bc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064ec:	e01c      	b.n	8006528 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fbe4 	bl	8006cbe <USBD_CtlError>
              break;
 80064f6:	e017      	b.n	8006528 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	885b      	ldrh	r3, [r3, #2]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d112      	bne.n	8006526 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006506:	2b00      	cmp	r3, #0
 8006508:	d004      	beq.n	8006514 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800650a:	7bbb      	ldrb	r3, [r7, #14]
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f003 fdf3 	bl	800a0fa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fc9a 	bl	8006e4e <USBD_CtlSendStatus>
              }
              break;
 800651a:	e004      	b.n	8006526 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fbcd 	bl	8006cbe <USBD_CtlError>
              break;
 8006524:	e000      	b.n	8006528 <USBD_StdEPReq+0x158>
              break;
 8006526:	bf00      	nop
          }
          break;
 8006528:	e0aa      	b.n	8006680 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006530:	2b02      	cmp	r3, #2
 8006532:	d002      	beq.n	800653a <USBD_StdEPReq+0x16a>
 8006534:	2b03      	cmp	r3, #3
 8006536:	d032      	beq.n	800659e <USBD_StdEPReq+0x1ce>
 8006538:	e097      	b.n	800666a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800653a:	7bbb      	ldrb	r3, [r7, #14]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d007      	beq.n	8006550 <USBD_StdEPReq+0x180>
 8006540:	7bbb      	ldrb	r3, [r7, #14]
 8006542:	2b80      	cmp	r3, #128	; 0x80
 8006544:	d004      	beq.n	8006550 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fbb8 	bl	8006cbe <USBD_CtlError>
                break;
 800654e:	e091      	b.n	8006674 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006550:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006554:	2b00      	cmp	r3, #0
 8006556:	da0b      	bge.n	8006570 <USBD_StdEPReq+0x1a0>
 8006558:	7bbb      	ldrb	r3, [r7, #14]
 800655a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800655e:	4613      	mov	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	3310      	adds	r3, #16
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	4413      	add	r3, r2
 800656c:	3304      	adds	r3, #4
 800656e:	e00b      	b.n	8006588 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006570:	7bbb      	ldrb	r3, [r7, #14]
 8006572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	4413      	add	r3, r2
 8006586:	3304      	adds	r3, #4
 8006588:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2202      	movs	r2, #2
 8006594:	4619      	mov	r1, r3
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fbfb 	bl	8006d92 <USBD_CtlSendData>
              break;
 800659c:	e06a      	b.n	8006674 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800659e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	da11      	bge.n	80065ca <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065a6:	7bbb      	ldrb	r3, [r7, #14]
 80065a8:	f003 020f 	and.w	r2, r3, #15
 80065ac:	6879      	ldr	r1, [r7, #4]
 80065ae:	4613      	mov	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	440b      	add	r3, r1
 80065b8:	3318      	adds	r3, #24
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d117      	bne.n	80065f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fb7b 	bl	8006cbe <USBD_CtlError>
                  break;
 80065c8:	e054      	b.n	8006674 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065ca:	7bbb      	ldrb	r3, [r7, #14]
 80065cc:	f003 020f 	and.w	r2, r3, #15
 80065d0:	6879      	ldr	r1, [r7, #4]
 80065d2:	4613      	mov	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	440b      	add	r3, r1
 80065dc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d104      	bne.n	80065f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80065e6:	6839      	ldr	r1, [r7, #0]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fb68 	bl	8006cbe <USBD_CtlError>
                  break;
 80065ee:	e041      	b.n	8006674 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	da0b      	bge.n	8006610 <USBD_StdEPReq+0x240>
 80065f8:	7bbb      	ldrb	r3, [r7, #14]
 80065fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	3310      	adds	r3, #16
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	4413      	add	r3, r2
 800660c:	3304      	adds	r3, #4
 800660e:	e00b      	b.n	8006628 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006610:	7bbb      	ldrb	r3, [r7, #14]
 8006612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006616:	4613      	mov	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	4413      	add	r3, r2
 8006626:	3304      	adds	r3, #4
 8006628:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <USBD_StdEPReq+0x266>
 8006630:	7bbb      	ldrb	r3, [r7, #14]
 8006632:	2b80      	cmp	r3, #128	; 0x80
 8006634:	d103      	bne.n	800663e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	e00e      	b.n	800665c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800663e:	7bbb      	ldrb	r3, [r7, #14]
 8006640:	4619      	mov	r1, r3
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f003 fd78 	bl	800a138 <USBD_LL_IsStallEP>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2201      	movs	r2, #1
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	e002      	b.n	800665c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	2200      	movs	r2, #0
 800665a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2202      	movs	r2, #2
 8006660:	4619      	mov	r1, r3
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fb95 	bl	8006d92 <USBD_CtlSendData>
              break;
 8006668:	e004      	b.n	8006674 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fb26 	bl	8006cbe <USBD_CtlError>
              break;
 8006672:	bf00      	nop
          }
          break;
 8006674:	e004      	b.n	8006680 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fb20 	bl	8006cbe <USBD_CtlError>
          break;
 800667e:	bf00      	nop
      }
      break;
 8006680:	e004      	b.n	800668c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006682:	6839      	ldr	r1, [r7, #0]
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fb1a 	bl	8006cbe <USBD_CtlError>
      break;
 800668a:	bf00      	nop
  }

  return ret;
 800668c:	7bfb      	ldrb	r3, [r7, #15]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80066a6:	2300      	movs	r3, #0
 80066a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	885b      	ldrh	r3, [r3, #2]
 80066b2:	0a1b      	lsrs	r3, r3, #8
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	3b01      	subs	r3, #1
 80066b8:	2b06      	cmp	r3, #6
 80066ba:	f200 8128 	bhi.w	800690e <USBD_GetDescriptor+0x276>
 80066be:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <USBD_GetDescriptor+0x2c>)
 80066c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c4:	080066e1 	.word	0x080066e1
 80066c8:	080066f9 	.word	0x080066f9
 80066cc:	08006739 	.word	0x08006739
 80066d0:	0800690f 	.word	0x0800690f
 80066d4:	0800690f 	.word	0x0800690f
 80066d8:	080068af 	.word	0x080068af
 80066dc:	080068db 	.word	0x080068db
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	7c12      	ldrb	r2, [r2, #16]
 80066ec:	f107 0108 	add.w	r1, r7, #8
 80066f0:	4610      	mov	r0, r2
 80066f2:	4798      	blx	r3
 80066f4:	60f8      	str	r0, [r7, #12]
      break;
 80066f6:	e112      	b.n	800691e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	7c1b      	ldrb	r3, [r3, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10d      	bne.n	800671c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006708:	f107 0208 	add.w	r2, r7, #8
 800670c:	4610      	mov	r0, r2
 800670e:	4798      	blx	r3
 8006710:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3301      	adds	r3, #1
 8006716:	2202      	movs	r2, #2
 8006718:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800671a:	e100      	b.n	800691e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	f107 0208 	add.w	r2, r7, #8
 8006728:	4610      	mov	r0, r2
 800672a:	4798      	blx	r3
 800672c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	3301      	adds	r3, #1
 8006732:	2202      	movs	r2, #2
 8006734:	701a      	strb	r2, [r3, #0]
      break;
 8006736:	e0f2      	b.n	800691e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	885b      	ldrh	r3, [r3, #2]
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b05      	cmp	r3, #5
 8006740:	f200 80ac 	bhi.w	800689c <USBD_GetDescriptor+0x204>
 8006744:	a201      	add	r2, pc, #4	; (adr r2, 800674c <USBD_GetDescriptor+0xb4>)
 8006746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674a:	bf00      	nop
 800674c:	08006765 	.word	0x08006765
 8006750:	08006799 	.word	0x08006799
 8006754:	080067cd 	.word	0x080067cd
 8006758:	08006801 	.word	0x08006801
 800675c:	08006835 	.word	0x08006835
 8006760:	08006869 	.word	0x08006869
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00b      	beq.n	8006788 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	7c12      	ldrb	r2, [r2, #16]
 800677c:	f107 0108 	add.w	r1, r7, #8
 8006780:	4610      	mov	r0, r2
 8006782:	4798      	blx	r3
 8006784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006786:	e091      	b.n	80068ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fa97 	bl	8006cbe <USBD_CtlError>
            err++;
 8006790:	7afb      	ldrb	r3, [r7, #11]
 8006792:	3301      	adds	r3, #1
 8006794:	72fb      	strb	r3, [r7, #11]
          break;
 8006796:	e089      	b.n	80068ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	7c12      	ldrb	r2, [r2, #16]
 80067b0:	f107 0108 	add.w	r1, r7, #8
 80067b4:	4610      	mov	r0, r2
 80067b6:	4798      	blx	r3
 80067b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ba:	e077      	b.n	80068ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa7d 	bl	8006cbe <USBD_CtlError>
            err++;
 80067c4:	7afb      	ldrb	r3, [r7, #11]
 80067c6:	3301      	adds	r3, #1
 80067c8:	72fb      	strb	r3, [r7, #11]
          break;
 80067ca:	e06f      	b.n	80068ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00b      	beq.n	80067f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	7c12      	ldrb	r2, [r2, #16]
 80067e4:	f107 0108 	add.w	r1, r7, #8
 80067e8:	4610      	mov	r0, r2
 80067ea:	4798      	blx	r3
 80067ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ee:	e05d      	b.n	80068ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fa63 	bl	8006cbe <USBD_CtlError>
            err++;
 80067f8:	7afb      	ldrb	r3, [r7, #11]
 80067fa:	3301      	adds	r3, #1
 80067fc:	72fb      	strb	r3, [r7, #11]
          break;
 80067fe:	e055      	b.n	80068ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00b      	beq.n	8006824 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	7c12      	ldrb	r2, [r2, #16]
 8006818:	f107 0108 	add.w	r1, r7, #8
 800681c:	4610      	mov	r0, r2
 800681e:	4798      	blx	r3
 8006820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006822:	e043      	b.n	80068ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fa49 	bl	8006cbe <USBD_CtlError>
            err++;
 800682c:	7afb      	ldrb	r3, [r7, #11]
 800682e:	3301      	adds	r3, #1
 8006830:	72fb      	strb	r3, [r7, #11]
          break;
 8006832:	e03b      	b.n	80068ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00b      	beq.n	8006858 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	7c12      	ldrb	r2, [r2, #16]
 800684c:	f107 0108 	add.w	r1, r7, #8
 8006850:	4610      	mov	r0, r2
 8006852:	4798      	blx	r3
 8006854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006856:	e029      	b.n	80068ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006858:	6839      	ldr	r1, [r7, #0]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fa2f 	bl	8006cbe <USBD_CtlError>
            err++;
 8006860:	7afb      	ldrb	r3, [r7, #11]
 8006862:	3301      	adds	r3, #1
 8006864:	72fb      	strb	r3, [r7, #11]
          break;
 8006866:	e021      	b.n	80068ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00b      	beq.n	800688c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	7c12      	ldrb	r2, [r2, #16]
 8006880:	f107 0108 	add.w	r1, r7, #8
 8006884:	4610      	mov	r0, r2
 8006886:	4798      	blx	r3
 8006888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800688a:	e00f      	b.n	80068ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800688c:	6839      	ldr	r1, [r7, #0]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fa15 	bl	8006cbe <USBD_CtlError>
            err++;
 8006894:	7afb      	ldrb	r3, [r7, #11]
 8006896:	3301      	adds	r3, #1
 8006898:	72fb      	strb	r3, [r7, #11]
          break;
 800689a:	e007      	b.n	80068ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fa0d 	bl	8006cbe <USBD_CtlError>
          err++;
 80068a4:	7afb      	ldrb	r3, [r7, #11]
 80068a6:	3301      	adds	r3, #1
 80068a8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80068aa:	e038      	b.n	800691e <USBD_GetDescriptor+0x286>
 80068ac:	e037      	b.n	800691e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	7c1b      	ldrb	r3, [r3, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d109      	bne.n	80068ca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068be:	f107 0208 	add.w	r2, r7, #8
 80068c2:	4610      	mov	r0, r2
 80068c4:	4798      	blx	r3
 80068c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068c8:	e029      	b.n	800691e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068ca:	6839      	ldr	r1, [r7, #0]
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f9f6 	bl	8006cbe <USBD_CtlError>
        err++;
 80068d2:	7afb      	ldrb	r3, [r7, #11]
 80068d4:	3301      	adds	r3, #1
 80068d6:	72fb      	strb	r3, [r7, #11]
      break;
 80068d8:	e021      	b.n	800691e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	7c1b      	ldrb	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10d      	bne.n	80068fe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ea:	f107 0208 	add.w	r2, r7, #8
 80068ee:	4610      	mov	r0, r2
 80068f0:	4798      	blx	r3
 80068f2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	3301      	adds	r3, #1
 80068f8:	2207      	movs	r2, #7
 80068fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068fc:	e00f      	b.n	800691e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f9dc 	bl	8006cbe <USBD_CtlError>
        err++;
 8006906:	7afb      	ldrb	r3, [r7, #11]
 8006908:	3301      	adds	r3, #1
 800690a:	72fb      	strb	r3, [r7, #11]
      break;
 800690c:	e007      	b.n	800691e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f9d4 	bl	8006cbe <USBD_CtlError>
      err++;
 8006916:	7afb      	ldrb	r3, [r7, #11]
 8006918:	3301      	adds	r3, #1
 800691a:	72fb      	strb	r3, [r7, #11]
      break;
 800691c:	bf00      	nop
  }

  if (err != 0U)
 800691e:	7afb      	ldrb	r3, [r7, #11]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d11c      	bne.n	800695e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006924:	893b      	ldrh	r3, [r7, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d011      	beq.n	800694e <USBD_GetDescriptor+0x2b6>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	88db      	ldrh	r3, [r3, #6]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00d      	beq.n	800694e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	88da      	ldrh	r2, [r3, #6]
 8006936:	893b      	ldrh	r3, [r7, #8]
 8006938:	4293      	cmp	r3, r2
 800693a:	bf28      	it	cs
 800693c:	4613      	movcs	r3, r2
 800693e:	b29b      	uxth	r3, r3
 8006940:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006942:	893b      	ldrh	r3, [r7, #8]
 8006944:	461a      	mov	r2, r3
 8006946:	68f9      	ldr	r1, [r7, #12]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fa22 	bl	8006d92 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	88db      	ldrh	r3, [r3, #6]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d104      	bne.n	8006960 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fa79 	bl	8006e4e <USBD_CtlSendStatus>
 800695c:	e000      	b.n	8006960 <USBD_GetDescriptor+0x2c8>
    return;
 800695e:	bf00      	nop
    }
  }
}
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop

08006968 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	889b      	ldrh	r3, [r3, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d130      	bne.n	80069dc <USBD_SetAddress+0x74>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	88db      	ldrh	r3, [r3, #6]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d12c      	bne.n	80069dc <USBD_SetAddress+0x74>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	885b      	ldrh	r3, [r3, #2]
 8006986:	2b7f      	cmp	r3, #127	; 0x7f
 8006988:	d828      	bhi.n	80069dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	885b      	ldrh	r3, [r3, #2]
 800698e:	b2db      	uxtb	r3, r3
 8006990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006994:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800699c:	2b03      	cmp	r3, #3
 800699e:	d104      	bne.n	80069aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f98b 	bl	8006cbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069a8:	e01d      	b.n	80069e6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	7bfa      	ldrb	r2, [r7, #15]
 80069ae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f003 fbea 	bl	800a190 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fa46 	bl	8006e4e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d004      	beq.n	80069d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d0:	e009      	b.n	80069e6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069da:	e004      	b.n	80069e6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f96d 	bl	8006cbe <USBD_CtlError>
  }
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	885b      	ldrh	r3, [r3, #2]
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	4b41      	ldr	r3, [pc, #260]	; (8006b08 <USBD_SetConfig+0x118>)
 8006a02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a04:	4b40      	ldr	r3, [pc, #256]	; (8006b08 <USBD_SetConfig+0x118>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d904      	bls.n	8006a16 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f955 	bl	8006cbe <USBD_CtlError>
 8006a14:	e075      	b.n	8006b02 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d002      	beq.n	8006a26 <USBD_SetConfig+0x36>
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d023      	beq.n	8006a6c <USBD_SetConfig+0x7c>
 8006a24:	e062      	b.n	8006aec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006a26:	4b38      	ldr	r3, [pc, #224]	; (8006b08 <USBD_SetConfig+0x118>)
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d01a      	beq.n	8006a64 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006a2e:	4b36      	ldr	r3, [pc, #216]	; (8006b08 <USBD_SetConfig+0x118>)
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	461a      	mov	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2203      	movs	r2, #3
 8006a3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a40:	4b31      	ldr	r3, [pc, #196]	; (8006b08 <USBD_SetConfig+0x118>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7ff f9e8 	bl	8005e1c <USBD_SetClassConfig>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d104      	bne.n	8006a5c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f932 	bl	8006cbe <USBD_CtlError>
            return;
 8006a5a:	e052      	b.n	8006b02 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f9f6 	bl	8006e4e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a62:	e04e      	b.n	8006b02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f9f2 	bl	8006e4e <USBD_CtlSendStatus>
        break;
 8006a6a:	e04a      	b.n	8006b02 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006a6c:	4b26      	ldr	r3, [pc, #152]	; (8006b08 <USBD_SetConfig+0x118>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d112      	bne.n	8006a9a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006a7c:	4b22      	ldr	r3, [pc, #136]	; (8006b08 <USBD_SetConfig+0x118>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	461a      	mov	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006a86:	4b20      	ldr	r3, [pc, #128]	; (8006b08 <USBD_SetConfig+0x118>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7ff f9e4 	bl	8005e5a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f9db 	bl	8006e4e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a98:	e033      	b.n	8006b02 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006a9a:	4b1b      	ldr	r3, [pc, #108]	; (8006b08 <USBD_SetConfig+0x118>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d01d      	beq.n	8006ae4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff f9d2 	bl	8005e5a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006ab6:	4b14      	ldr	r3, [pc, #80]	; (8006b08 <USBD_SetConfig+0x118>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006ac0:	4b11      	ldr	r3, [pc, #68]	; (8006b08 <USBD_SetConfig+0x118>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff f9a8 	bl	8005e1c <USBD_SetClassConfig>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d104      	bne.n	8006adc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f8f2 	bl	8006cbe <USBD_CtlError>
            return;
 8006ada:	e012      	b.n	8006b02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f9b6 	bl	8006e4e <USBD_CtlSendStatus>
        break;
 8006ae2:	e00e      	b.n	8006b02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f9b2 	bl	8006e4e <USBD_CtlSendStatus>
        break;
 8006aea:	e00a      	b.n	8006b02 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f8e5 	bl	8006cbe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006af4:	4b04      	ldr	r3, [pc, #16]	; (8006b08 <USBD_SetConfig+0x118>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7ff f9ad 	bl	8005e5a <USBD_ClrClassConfig>
        break;
 8006b00:	bf00      	nop
    }
  }
}
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	2000019c 	.word	0x2000019c

08006b0c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	88db      	ldrh	r3, [r3, #6]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d004      	beq.n	8006b28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f8cc 	bl	8006cbe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b26:	e022      	b.n	8006b6e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	dc02      	bgt.n	8006b38 <USBD_GetConfig+0x2c>
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	dc03      	bgt.n	8006b3e <USBD_GetConfig+0x32>
 8006b36:	e015      	b.n	8006b64 <USBD_GetConfig+0x58>
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d00b      	beq.n	8006b54 <USBD_GetConfig+0x48>
 8006b3c:	e012      	b.n	8006b64 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3308      	adds	r3, #8
 8006b48:	2201      	movs	r2, #1
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f920 	bl	8006d92 <USBD_CtlSendData>
        break;
 8006b52:	e00c      	b.n	8006b6e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	3304      	adds	r3, #4
 8006b58:	2201      	movs	r2, #1
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f918 	bl	8006d92 <USBD_CtlSendData>
        break;
 8006b62:	e004      	b.n	8006b6e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f8a9 	bl	8006cbe <USBD_CtlError>
        break;
 8006b6c:	bf00      	nop
}
 8006b6e:	bf00      	nop
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b082      	sub	sp, #8
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b86:	3b01      	subs	r3, #1
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d81e      	bhi.n	8006bca <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	88db      	ldrh	r3, [r3, #6]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d004      	beq.n	8006b9e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f891 	bl	8006cbe <USBD_CtlError>
        break;
 8006b9c:	e01a      	b.n	8006bd4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d005      	beq.n	8006bba <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	f043 0202 	orr.w	r2, r3, #2
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	330c      	adds	r3, #12
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f8e5 	bl	8006d92 <USBD_CtlSendData>
      break;
 8006bc8:	e004      	b.n	8006bd4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f876 	bl	8006cbe <USBD_CtlError>
      break;
 8006bd2:	bf00      	nop
  }
}
 8006bd4:	bf00      	nop
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	885b      	ldrh	r3, [r3, #2]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d106      	bne.n	8006bfc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f929 	bl	8006e4e <USBD_CtlSendStatus>
  }
}
 8006bfc:	bf00      	nop
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c14:	3b01      	subs	r3, #1
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d80b      	bhi.n	8006c32 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	885b      	ldrh	r3, [r3, #2]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d10c      	bne.n	8006c3c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f90f 	bl	8006e4e <USBD_CtlSendStatus>
      }
      break;
 8006c30:	e004      	b.n	8006c3c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f842 	bl	8006cbe <USBD_CtlError>
      break;
 8006c3a:	e000      	b.n	8006c3e <USBD_ClrFeature+0x3a>
      break;
 8006c3c:	bf00      	nop
  }
}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	781a      	ldrb	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	785a      	ldrb	r2, [r3, #1]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	3302      	adds	r3, #2
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	3303      	adds	r3, #3
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	021b      	lsls	r3, r3, #8
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	4413      	add	r3, r2
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	3304      	adds	r3, #4
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	3305      	adds	r3, #5
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	021b      	lsls	r3, r3, #8
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	4413      	add	r3, r2
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	3306      	adds	r3, #6
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	3307      	adds	r3, #7
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	021b      	lsls	r3, r3, #8
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	4413      	add	r3, r2
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	80da      	strh	r2, [r3, #6]

}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bc80      	pop	{r7}
 8006cbc:	4770      	bx	lr

08006cbe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b082      	sub	sp, #8
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006cc8:	2180      	movs	r1, #128	; 0x80
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f003 f9f6 	bl	800a0bc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f003 f9f2 	bl	800a0bc <USBD_LL_StallEP>
}
 8006cd8:	bf00      	nop
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d032      	beq.n	8006d5c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 f834 	bl	8006d64 <USBD_GetLen>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	3301      	adds	r3, #1
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006d0a:	7dfb      	ldrb	r3, [r7, #23]
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	75fa      	strb	r2, [r7, #23]
 8006d10:	461a      	mov	r2, r3
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	4413      	add	r3, r2
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	7812      	ldrb	r2, [r2, #0]
 8006d1a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006d1c:	7dfb      	ldrb	r3, [r7, #23]
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	75fa      	strb	r2, [r7, #23]
 8006d22:	461a      	mov	r2, r3
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	4413      	add	r3, r2
 8006d28:	2203      	movs	r2, #3
 8006d2a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006d2c:	e012      	b.n	8006d54 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	60fa      	str	r2, [r7, #12]
 8006d34:	7dfa      	ldrb	r2, [r7, #23]
 8006d36:	1c51      	adds	r1, r2, #1
 8006d38:	75f9      	strb	r1, [r7, #23]
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	440a      	add	r2, r1
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006d44:	7dfb      	ldrb	r3, [r7, #23]
 8006d46:	1c5a      	adds	r2, r3, #1
 8006d48:	75fa      	strb	r2, [r7, #23]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	4413      	add	r3, r2
 8006d50:	2200      	movs	r2, #0
 8006d52:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e8      	bne.n	8006d2e <USBD_GetString+0x4e>
    }
  }
}
 8006d5c:	bf00      	nop
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006d70:	e005      	b.n	8006d7e <USBD_GetLen+0x1a>
  {
    len++;
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	3301      	adds	r3, #1
 8006d76:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1f5      	bne.n	8006d72 <USBD_GetLen+0xe>
  }

  return len;
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bc80      	pop	{r7}
 8006d90:	4770      	bx	lr

08006d92 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	60f8      	str	r0, [r7, #12]
 8006d9a:	60b9      	str	r1, [r7, #8]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006da8:	88fa      	ldrh	r2, [r7, #6]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006dae:	88fa      	ldrh	r2, [r7, #6]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006db4:	88fb      	ldrh	r3, [r7, #6]
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	2100      	movs	r1, #0
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f003 fa07 	bl	800a1ce <USBD_LL_Transmit>

  return USBD_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dd8:	88fb      	ldrh	r3, [r7, #6]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	2100      	movs	r1, #0
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f003 f9f5 	bl	800a1ce <USBD_LL_Transmit>

  return USBD_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	60f8      	str	r0, [r7, #12]
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2203      	movs	r2, #3
 8006e00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006e04:	88fa      	ldrh	r2, [r7, #6]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006e0c:	88fa      	ldrh	r2, [r7, #6]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e14:	88fb      	ldrh	r3, [r7, #6]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	2100      	movs	r1, #0
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f003 f9fa 	bl	800a214 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	4613      	mov	r3, r2
 8006e36:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e38:	88fb      	ldrh	r3, [r7, #6]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f003 f9e8 	bl	800a214 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2204      	movs	r2, #4
 8006e5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e5e:	2300      	movs	r3, #0
 8006e60:	2200      	movs	r2, #0
 8006e62:	2100      	movs	r1, #0
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f003 f9b2 	bl	800a1ce <USBD_LL_Transmit>

  return USBD_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2205      	movs	r2, #5
 8006e80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e84:	2300      	movs	r3, #0
 8006e86:	2200      	movs	r2, #0
 8006e88:	2100      	movs	r1, #0
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f003 f9c2 	bl	800a214 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
	...

08006e9c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ea2:	f3ef 8305 	mrs	r3, IPSR
 8006ea6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ea8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10f      	bne.n	8006ece <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eae:	f3ef 8310 	mrs	r3, PRIMASK
 8006eb2:	607b      	str	r3, [r7, #4]
  return(result);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d109      	bne.n	8006ece <osKernelInitialize+0x32>
 8006eba:	4b10      	ldr	r3, [pc, #64]	; (8006efc <osKernelInitialize+0x60>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d109      	bne.n	8006ed6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ec2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ec6:	603b      	str	r3, [r7, #0]
  return(result);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006ece:	f06f 0305 	mvn.w	r3, #5
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	e00c      	b.n	8006ef0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006ed6:	4b09      	ldr	r3, [pc, #36]	; (8006efc <osKernelInitialize+0x60>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d105      	bne.n	8006eea <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006ede:	4b07      	ldr	r3, [pc, #28]	; (8006efc <osKernelInitialize+0x60>)
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	e002      	b.n	8006ef0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006eea:	f04f 33ff 	mov.w	r3, #4294967295
 8006eee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bc80      	pop	{r7}
 8006efa:	4770      	bx	lr
 8006efc:	200001a0 	.word	0x200001a0

08006f00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f06:	f3ef 8305 	mrs	r3, IPSR
 8006f0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10f      	bne.n	8006f32 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f12:	f3ef 8310 	mrs	r3, PRIMASK
 8006f16:	607b      	str	r3, [r7, #4]
  return(result);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d109      	bne.n	8006f32 <osKernelStart+0x32>
 8006f1e:	4b11      	ldr	r3, [pc, #68]	; (8006f64 <osKernelStart+0x64>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d109      	bne.n	8006f3a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f26:	f3ef 8311 	mrs	r3, BASEPRI
 8006f2a:	603b      	str	r3, [r7, #0]
  return(result);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006f32:	f06f 0305 	mvn.w	r3, #5
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	e00e      	b.n	8006f58 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006f3a:	4b0a      	ldr	r3, [pc, #40]	; (8006f64 <osKernelStart+0x64>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d107      	bne.n	8006f52 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006f42:	4b08      	ldr	r3, [pc, #32]	; (8006f64 <osKernelStart+0x64>)
 8006f44:	2202      	movs	r2, #2
 8006f46:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006f48:	f001 f968 	bl	800821c <vTaskStartScheduler>
      stat = osOK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	e002      	b.n	8006f58 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006f52:	f04f 33ff 	mov.w	r3, #4294967295
 8006f56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006f58:	68fb      	ldr	r3, [r7, #12]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	200001a0 	.word	0x200001a0

08006f68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b092      	sub	sp, #72	; 0x48
 8006f6c:	af04      	add	r7, sp, #16
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f74:	2300      	movs	r3, #0
 8006f76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f78:	f3ef 8305 	mrs	r3, IPSR
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f040 8094 	bne.w	80070ae <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f86:	f3ef 8310 	mrs	r3, PRIMASK
 8006f8a:	623b      	str	r3, [r7, #32]
  return(result);
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f040 808d 	bne.w	80070ae <osThreadNew+0x146>
 8006f94:	4b48      	ldr	r3, [pc, #288]	; (80070b8 <osThreadNew+0x150>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d106      	bne.n	8006faa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f9c:	f3ef 8311 	mrs	r3, BASEPRI
 8006fa0:	61fb      	str	r3, [r7, #28]
  return(result);
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f040 8082 	bne.w	80070ae <osThreadNew+0x146>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d07e      	beq.n	80070ae <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006fb0:	2380      	movs	r3, #128	; 0x80
 8006fb2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006fb4:	2318      	movs	r3, #24
 8006fb6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006fb8:	2300      	movs	r3, #0
 8006fba:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006fbc:	f107 031b 	add.w	r3, r7, #27
 8006fc0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d045      	beq.n	800705a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <osThreadNew+0x74>
        name = attr->name;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d008      	beq.n	8007002 <osThreadNew+0x9a>
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff2:	2b38      	cmp	r3, #56	; 0x38
 8006ff4:	d805      	bhi.n	8007002 <osThreadNew+0x9a>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <osThreadNew+0x9e>
        return (NULL);
 8007002:	2300      	movs	r3, #0
 8007004:	e054      	b.n	80070b0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	089b      	lsrs	r3, r3, #2
 8007014:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00e      	beq.n	800703c <osThreadNew+0xd4>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	2b5b      	cmp	r3, #91	; 0x5b
 8007024:	d90a      	bls.n	800703c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800702a:	2b00      	cmp	r3, #0
 800702c:	d006      	beq.n	800703c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <osThreadNew+0xd4>
        mem = 1;
 8007036:	2301      	movs	r3, #1
 8007038:	62bb      	str	r3, [r7, #40]	; 0x28
 800703a:	e010      	b.n	800705e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10c      	bne.n	800705e <osThreadNew+0xf6>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d108      	bne.n	800705e <osThreadNew+0xf6>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d104      	bne.n	800705e <osThreadNew+0xf6>
          mem = 0;
 8007054:	2300      	movs	r3, #0
 8007056:	62bb      	str	r3, [r7, #40]	; 0x28
 8007058:	e001      	b.n	800705e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	2b01      	cmp	r3, #1
 8007062:	d110      	bne.n	8007086 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800706c:	9202      	str	r2, [sp, #8]
 800706e:	9301      	str	r3, [sp, #4]
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007078:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f000 fe12 	bl	8007ca4 <xTaskCreateStatic>
 8007080:	4603      	mov	r3, r0
 8007082:	617b      	str	r3, [r7, #20]
 8007084:	e013      	b.n	80070ae <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	2b00      	cmp	r3, #0
 800708a:	d110      	bne.n	80070ae <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	b29a      	uxth	r2, r3
 8007090:	f107 0314 	add.w	r3, r7, #20
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 fe5c 	bl	8007d5c <xTaskCreate>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d001      	beq.n	80070ae <osThreadNew+0x146>
          hTask = NULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80070ae:	697b      	ldr	r3, [r7, #20]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3738      	adds	r7, #56	; 0x38
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	200001a0 	.word	0x200001a0

080070bc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070c4:	f3ef 8305 	mrs	r3, IPSR
 80070c8:	613b      	str	r3, [r7, #16]
  return(result);
 80070ca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10f      	bne.n	80070f0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070d0:	f3ef 8310 	mrs	r3, PRIMASK
 80070d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d109      	bne.n	80070f0 <osDelay+0x34>
 80070dc:	4b0d      	ldr	r3, [pc, #52]	; (8007114 <osDelay+0x58>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d109      	bne.n	80070f8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070e4:	f3ef 8311 	mrs	r3, BASEPRI
 80070e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d003      	beq.n	80070f8 <osDelay+0x3c>
    stat = osErrorISR;
 80070f0:	f06f 0305 	mvn.w	r3, #5
 80070f4:	617b      	str	r3, [r7, #20]
 80070f6:	e007      	b.n	8007108 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80070f8:	2300      	movs	r3, #0
 80070fa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 f856 	bl	80081b4 <vTaskDelay>
    }
  }

  return (stat);
 8007108:	697b      	ldr	r3, [r7, #20]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3718      	adds	r7, #24
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	200001a0 	.word	0x200001a0

08007118 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4a06      	ldr	r2, [pc, #24]	; (8007140 <vApplicationGetIdleTaskMemory+0x28>)
 8007128:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	4a05      	ldr	r2, [pc, #20]	; (8007144 <vApplicationGetIdleTaskMemory+0x2c>)
 800712e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2280      	movs	r2, #128	; 0x80
 8007134:	601a      	str	r2, [r3, #0]
}
 8007136:	bf00      	nop
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	bc80      	pop	{r7}
 800713e:	4770      	bx	lr
 8007140:	200001a4 	.word	0x200001a4
 8007144:	20000200 	.word	0x20000200

08007148 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4a07      	ldr	r2, [pc, #28]	; (8007174 <vApplicationGetTimerTaskMemory+0x2c>)
 8007158:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	4a06      	ldr	r2, [pc, #24]	; (8007178 <vApplicationGetTimerTaskMemory+0x30>)
 800715e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007166:	601a      	str	r2, [r3, #0]
}
 8007168:	bf00      	nop
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	bc80      	pop	{r7}
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	20000400 	.word	0x20000400
 8007178:	2000045c 	.word	0x2000045c

0800717c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f103 0208 	add.w	r2, r3, #8
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f04f 32ff 	mov.w	r2, #4294967295
 8007194:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f103 0208 	add.w	r2, r3, #8
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f103 0208 	add.w	r2, r3, #8
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bc80      	pop	{r7}
 80071b8:	4770      	bx	lr

080071ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071ba:	b480      	push	{r7}
 80071bc:	b083      	sub	sp, #12
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bc80      	pop	{r7}
 80071d0:	4770      	bx	lr

080071d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071d2:	b480      	push	{r7}
 80071d4:	b085      	sub	sp, #20
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	1c5a      	adds	r2, r3, #1
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	601a      	str	r2, [r3, #0]
}
 800720e:	bf00      	nop
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	bc80      	pop	{r7}
 8007216:	4770      	bx	lr

08007218 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722e:	d103      	bne.n	8007238 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	60fb      	str	r3, [r7, #12]
 8007236:	e00c      	b.n	8007252 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3308      	adds	r3, #8
 800723c:	60fb      	str	r3, [r7, #12]
 800723e:	e002      	b.n	8007246 <vListInsert+0x2e>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	429a      	cmp	r2, r3
 8007250:	d2f6      	bcs.n	8007240 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	601a      	str	r2, [r3, #0]
}
 800727e:	bf00      	nop
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	bc80      	pop	{r7}
 8007286:	4770      	bx	lr

08007288 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	6892      	ldr	r2, [r2, #8]
 800729e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	6852      	ldr	r2, [r2, #4]
 80072a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d103      	bne.n	80072bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	1e5a      	subs	r2, r3, #1
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bc80      	pop	{r7}
 80072d8:	4770      	bx	lr
	...

080072dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10a      	bne.n	8007306 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007302:	bf00      	nop
 8007304:	e7fe      	b.n	8007304 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007306:	f002 f8b9 	bl	800947c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007312:	68f9      	ldr	r1, [r7, #12]
 8007314:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007316:	fb01 f303 	mul.w	r3, r1, r3
 800731a:	441a      	add	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007336:	3b01      	subs	r3, #1
 8007338:	68f9      	ldr	r1, [r7, #12]
 800733a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800733c:	fb01 f303 	mul.w	r3, r1, r3
 8007340:	441a      	add	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	22ff      	movs	r2, #255	; 0xff
 800734a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	22ff      	movs	r2, #255	; 0xff
 8007352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d114      	bne.n	8007386 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d01a      	beq.n	800739a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	3310      	adds	r3, #16
 8007368:	4618      	mov	r0, r3
 800736a:	f001 f9e1 	bl	8008730 <xTaskRemoveFromEventList>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d012      	beq.n	800739a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007374:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <xQueueGenericReset+0xcc>)
 8007376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	e009      	b.n	800739a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	3310      	adds	r3, #16
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff fef6 	bl	800717c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3324      	adds	r3, #36	; 0x24
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff fef1 	bl	800717c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800739a:	f002 f89f 	bl	80094dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800739e:	2301      	movs	r3, #1
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	e000ed04 	.word	0xe000ed04

080073ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08e      	sub	sp, #56	; 0x38
 80073b0:	af02      	add	r7, sp, #8
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10a      	bne.n	80073d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80073d2:	bf00      	nop
 80073d4:	e7fe      	b.n	80073d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <xQueueGenericCreateStatic+0x52>
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <xQueueGenericCreateStatic+0x56>
 80073fe:	2301      	movs	r3, #1
 8007400:	e000      	b.n	8007404 <xQueueGenericCreateStatic+0x58>
 8007402:	2300      	movs	r3, #0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10a      	bne.n	800741e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740c:	f383 8811 	msr	BASEPRI, r3
 8007410:	f3bf 8f6f 	isb	sy
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	623b      	str	r3, [r7, #32]
}
 800741a:	bf00      	nop
 800741c:	e7fe      	b.n	800741c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d102      	bne.n	800742a <xQueueGenericCreateStatic+0x7e>
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <xQueueGenericCreateStatic+0x82>
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <xQueueGenericCreateStatic+0x84>
 800742e:	2300      	movs	r3, #0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10a      	bne.n	800744a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007438:	f383 8811 	msr	BASEPRI, r3
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	61fb      	str	r3, [r7, #28]
}
 8007446:	bf00      	nop
 8007448:	e7fe      	b.n	8007448 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800744a:	2350      	movs	r3, #80	; 0x50
 800744c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2b50      	cmp	r3, #80	; 0x50
 8007452:	d00a      	beq.n	800746a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	61bb      	str	r3, [r7, #24]
}
 8007466:	bf00      	nop
 8007468:	e7fe      	b.n	8007468 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800746e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00d      	beq.n	8007490 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800747c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	4613      	mov	r3, r2
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	68b9      	ldr	r1, [r7, #8]
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f000 f805 	bl	800749a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007492:	4618      	mov	r0, r3
 8007494:	3730      	adds	r7, #48	; 0x30
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	60b9      	str	r1, [r7, #8]
 80074a4:	607a      	str	r2, [r7, #4]
 80074a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d103      	bne.n	80074b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	e002      	b.n	80074bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074c8:	2101      	movs	r1, #1
 80074ca:	69b8      	ldr	r0, [r7, #24]
 80074cc:	f7ff ff06 	bl	80072dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	78fa      	ldrb	r2, [r7, #3]
 80074d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074d8:	bf00      	nop
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08e      	sub	sp, #56	; 0x38
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074ee:	2300      	movs	r3, #0
 80074f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10a      	bne.n	8007512 <xQueueGenericSend+0x32>
	__asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800750e:	bf00      	nop
 8007510:	e7fe      	b.n	8007510 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d103      	bne.n	8007520 <xQueueGenericSend+0x40>
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751c:	2b00      	cmp	r3, #0
 800751e:	d101      	bne.n	8007524 <xQueueGenericSend+0x44>
 8007520:	2301      	movs	r3, #1
 8007522:	e000      	b.n	8007526 <xQueueGenericSend+0x46>
 8007524:	2300      	movs	r3, #0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10a      	bne.n	8007540 <xQueueGenericSend+0x60>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800753c:	bf00      	nop
 800753e:	e7fe      	b.n	800753e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b02      	cmp	r3, #2
 8007544:	d103      	bne.n	800754e <xQueueGenericSend+0x6e>
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754a:	2b01      	cmp	r3, #1
 800754c:	d101      	bne.n	8007552 <xQueueGenericSend+0x72>
 800754e:	2301      	movs	r3, #1
 8007550:	e000      	b.n	8007554 <xQueueGenericSend+0x74>
 8007552:	2300      	movs	r3, #0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10a      	bne.n	800756e <xQueueGenericSend+0x8e>
	__asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	623b      	str	r3, [r7, #32]
}
 800756a:	bf00      	nop
 800756c:	e7fe      	b.n	800756c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800756e:	f001 faa1 	bl	8008ab4 <xTaskGetSchedulerState>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d102      	bne.n	800757e <xQueueGenericSend+0x9e>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <xQueueGenericSend+0xa2>
 800757e:	2301      	movs	r3, #1
 8007580:	e000      	b.n	8007584 <xQueueGenericSend+0xa4>
 8007582:	2300      	movs	r3, #0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10a      	bne.n	800759e <xQueueGenericSend+0xbe>
	__asm volatile
 8007588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	61fb      	str	r3, [r7, #28]
}
 800759a:	bf00      	nop
 800759c:	e7fe      	b.n	800759c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800759e:	f001 ff6d 	bl	800947c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d302      	bcc.n	80075b4 <xQueueGenericSend+0xd4>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d129      	bne.n	8007608 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	68b9      	ldr	r1, [r7, #8]
 80075b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075ba:	f000 fa07 	bl	80079cc <prvCopyDataToQueue>
 80075be:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d010      	beq.n	80075ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ca:	3324      	adds	r3, #36	; 0x24
 80075cc:	4618      	mov	r0, r3
 80075ce:	f001 f8af 	bl	8008730 <xTaskRemoveFromEventList>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d013      	beq.n	8007600 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075d8:	4b3f      	ldr	r3, [pc, #252]	; (80076d8 <xQueueGenericSend+0x1f8>)
 80075da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075de:	601a      	str	r2, [r3, #0]
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	e00a      	b.n	8007600 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d007      	beq.n	8007600 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075f0:	4b39      	ldr	r3, [pc, #228]	; (80076d8 <xQueueGenericSend+0x1f8>)
 80075f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f6:	601a      	str	r2, [r3, #0]
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007600:	f001 ff6c 	bl	80094dc <vPortExitCritical>
				return pdPASS;
 8007604:	2301      	movs	r3, #1
 8007606:	e063      	b.n	80076d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d103      	bne.n	8007616 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800760e:	f001 ff65 	bl	80094dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007612:	2300      	movs	r3, #0
 8007614:	e05c      	b.n	80076d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007618:	2b00      	cmp	r3, #0
 800761a:	d106      	bne.n	800762a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800761c:	f107 0314 	add.w	r3, r7, #20
 8007620:	4618      	mov	r0, r3
 8007622:	f001 f8e9 	bl	80087f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007626:	2301      	movs	r3, #1
 8007628:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800762a:	f001 ff57 	bl	80094dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800762e:	f000 fe5b 	bl	80082e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007632:	f001 ff23 	bl	800947c <vPortEnterCritical>
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800763c:	b25b      	sxtb	r3, r3
 800763e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007642:	d103      	bne.n	800764c <xQueueGenericSend+0x16c>
 8007644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007652:	b25b      	sxtb	r3, r3
 8007654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007658:	d103      	bne.n	8007662 <xQueueGenericSend+0x182>
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007662:	f001 ff3b 	bl	80094dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007666:	1d3a      	adds	r2, r7, #4
 8007668:	f107 0314 	add.w	r3, r7, #20
 800766c:	4611      	mov	r1, r2
 800766e:	4618      	mov	r0, r3
 8007670:	f001 f8d8 	bl	8008824 <xTaskCheckForTimeOut>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d124      	bne.n	80076c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800767a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800767c:	f000 fa9e 	bl	8007bbc <prvIsQueueFull>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d018      	beq.n	80076b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	3310      	adds	r3, #16
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	4611      	mov	r1, r2
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fffe 	bl	8008690 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007696:	f000 fa29 	bl	8007aec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800769a:	f000 fe33 	bl	8008304 <xTaskResumeAll>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f47f af7c 	bne.w	800759e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80076a6:	4b0c      	ldr	r3, [pc, #48]	; (80076d8 <xQueueGenericSend+0x1f8>)
 80076a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	e772      	b.n	800759e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80076b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076ba:	f000 fa17 	bl	8007aec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076be:	f000 fe21 	bl	8008304 <xTaskResumeAll>
 80076c2:	e76c      	b.n	800759e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80076c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076c6:	f000 fa11 	bl	8007aec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076ca:	f000 fe1b 	bl	8008304 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80076ce:	2300      	movs	r3, #0
		}
	}
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3738      	adds	r7, #56	; 0x38
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	e000ed04 	.word	0xe000ed04

080076dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08e      	sub	sp, #56	; 0x38
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
 80076e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10a      	bne.n	800770a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007706:	bf00      	nop
 8007708:	e7fe      	b.n	8007708 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d103      	bne.n	8007718 <xQueueGenericSendFromISR+0x3c>
 8007710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007714:	2b00      	cmp	r3, #0
 8007716:	d101      	bne.n	800771c <xQueueGenericSendFromISR+0x40>
 8007718:	2301      	movs	r3, #1
 800771a:	e000      	b.n	800771e <xQueueGenericSendFromISR+0x42>
 800771c:	2300      	movs	r3, #0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10a      	bne.n	8007738 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	623b      	str	r3, [r7, #32]
}
 8007734:	bf00      	nop
 8007736:	e7fe      	b.n	8007736 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2b02      	cmp	r3, #2
 800773c:	d103      	bne.n	8007746 <xQueueGenericSendFromISR+0x6a>
 800773e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007742:	2b01      	cmp	r3, #1
 8007744:	d101      	bne.n	800774a <xQueueGenericSendFromISR+0x6e>
 8007746:	2301      	movs	r3, #1
 8007748:	e000      	b.n	800774c <xQueueGenericSendFromISR+0x70>
 800774a:	2300      	movs	r3, #0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10a      	bne.n	8007766 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	61fb      	str	r3, [r7, #28]
}
 8007762:	bf00      	nop
 8007764:	e7fe      	b.n	8007764 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007766:	f001 ff4b 	bl	8009600 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800776a:	f3ef 8211 	mrs	r2, BASEPRI
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	61ba      	str	r2, [r7, #24]
 8007780:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007782:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007784:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778e:	429a      	cmp	r2, r3
 8007790:	d302      	bcc.n	8007798 <xQueueGenericSendFromISR+0xbc>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b02      	cmp	r3, #2
 8007796:	d12c      	bne.n	80077f2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800779e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	68b9      	ldr	r1, [r7, #8]
 80077a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077a8:	f000 f910 	bl	80079cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80077ac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80077b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b4:	d112      	bne.n	80077dc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d016      	beq.n	80077ec <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	3324      	adds	r3, #36	; 0x24
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 ffb4 	bl	8008730 <xTaskRemoveFromEventList>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00e      	beq.n	80077ec <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00b      	beq.n	80077ec <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	e007      	b.n	80077ec <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077e0:	3301      	adds	r3, #1
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	b25a      	sxtb	r2, r3
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80077ec:	2301      	movs	r3, #1
 80077ee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80077f0:	e001      	b.n	80077f6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077f2:	2300      	movs	r3, #0
 80077f4:	637b      	str	r3, [r7, #52]	; 0x34
 80077f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007800:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007804:	4618      	mov	r0, r3
 8007806:	3738      	adds	r7, #56	; 0x38
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08c      	sub	sp, #48	; 0x30
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007818:	2300      	movs	r3, #0
 800781a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10a      	bne.n	800783c <xQueueReceive+0x30>
	__asm volatile
 8007826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	623b      	str	r3, [r7, #32]
}
 8007838:	bf00      	nop
 800783a:	e7fe      	b.n	800783a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d103      	bne.n	800784a <xQueueReceive+0x3e>
 8007842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <xQueueReceive+0x42>
 800784a:	2301      	movs	r3, #1
 800784c:	e000      	b.n	8007850 <xQueueReceive+0x44>
 800784e:	2300      	movs	r3, #0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10a      	bne.n	800786a <xQueueReceive+0x5e>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	61fb      	str	r3, [r7, #28]
}
 8007866:	bf00      	nop
 8007868:	e7fe      	b.n	8007868 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800786a:	f001 f923 	bl	8008ab4 <xTaskGetSchedulerState>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d102      	bne.n	800787a <xQueueReceive+0x6e>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <xQueueReceive+0x72>
 800787a:	2301      	movs	r3, #1
 800787c:	e000      	b.n	8007880 <xQueueReceive+0x74>
 800787e:	2300      	movs	r3, #0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10a      	bne.n	800789a <xQueueReceive+0x8e>
	__asm volatile
 8007884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	61bb      	str	r3, [r7, #24]
}
 8007896:	bf00      	nop
 8007898:	e7fe      	b.n	8007898 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800789a:	f001 fdef 	bl	800947c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d01f      	beq.n	80078ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078aa:	68b9      	ldr	r1, [r7, #8]
 80078ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ae:	f000 f8f7 	bl	8007aa0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	1e5a      	subs	r2, r3, #1
 80078b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00f      	beq.n	80078e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c4:	3310      	adds	r3, #16
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 ff32 	bl	8008730 <xTaskRemoveFromEventList>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d007      	beq.n	80078e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078d2:	4b3d      	ldr	r3, [pc, #244]	; (80079c8 <xQueueReceive+0x1bc>)
 80078d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078e2:	f001 fdfb 	bl	80094dc <vPortExitCritical>
				return pdPASS;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e069      	b.n	80079be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d103      	bne.n	80078f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078f0:	f001 fdf4 	bl	80094dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078f4:	2300      	movs	r3, #0
 80078f6:	e062      	b.n	80079be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d106      	bne.n	800790c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078fe:	f107 0310 	add.w	r3, r7, #16
 8007902:	4618      	mov	r0, r3
 8007904:	f000 ff78 	bl	80087f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007908:	2301      	movs	r3, #1
 800790a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800790c:	f001 fde6 	bl	80094dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007910:	f000 fcea 	bl	80082e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007914:	f001 fdb2 	bl	800947c <vPortEnterCritical>
 8007918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800791e:	b25b      	sxtb	r3, r3
 8007920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007924:	d103      	bne.n	800792e <xQueueReceive+0x122>
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800792e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007934:	b25b      	sxtb	r3, r3
 8007936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793a:	d103      	bne.n	8007944 <xQueueReceive+0x138>
 800793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007944:	f001 fdca 	bl	80094dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007948:	1d3a      	adds	r2, r7, #4
 800794a:	f107 0310 	add.w	r3, r7, #16
 800794e:	4611      	mov	r1, r2
 8007950:	4618      	mov	r0, r3
 8007952:	f000 ff67 	bl	8008824 <xTaskCheckForTimeOut>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d123      	bne.n	80079a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800795c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800795e:	f000 f917 	bl	8007b90 <prvIsQueueEmpty>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d017      	beq.n	8007998 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796a:	3324      	adds	r3, #36	; 0x24
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	4611      	mov	r1, r2
 8007970:	4618      	mov	r0, r3
 8007972:	f000 fe8d 	bl	8008690 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007976:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007978:	f000 f8b8 	bl	8007aec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800797c:	f000 fcc2 	bl	8008304 <xTaskResumeAll>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d189      	bne.n	800789a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007986:	4b10      	ldr	r3, [pc, #64]	; (80079c8 <xQueueReceive+0x1bc>)
 8007988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	e780      	b.n	800789a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800799a:	f000 f8a7 	bl	8007aec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800799e:	f000 fcb1 	bl	8008304 <xTaskResumeAll>
 80079a2:	e77a      	b.n	800789a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80079a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079a6:	f000 f8a1 	bl	8007aec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079aa:	f000 fcab 	bl	8008304 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079b0:	f000 f8ee 	bl	8007b90 <prvIsQueueEmpty>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f43f af6f 	beq.w	800789a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3730      	adds	r7, #48	; 0x30
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	e000ed04 	.word	0xe000ed04

080079cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80079d8:	2300      	movs	r3, #0
 80079da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10d      	bne.n	8007a06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d14d      	bne.n	8007a8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f001 f87a 	bl	8008af0 <xTaskPriorityDisinherit>
 80079fc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	605a      	str	r2, [r3, #4]
 8007a04:	e043      	b.n	8007a8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d119      	bne.n	8007a40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6898      	ldr	r0, [r3, #8]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a14:	461a      	mov	r2, r3
 8007a16:	68b9      	ldr	r1, [r7, #8]
 8007a18:	f002 fca2 	bl	800a360 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a24:	441a      	add	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	689a      	ldr	r2, [r3, #8]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d32b      	bcc.n	8007a8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	609a      	str	r2, [r3, #8]
 8007a3e:	e026      	b.n	8007a8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	68d8      	ldr	r0, [r3, #12]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a48:	461a      	mov	r2, r3
 8007a4a:	68b9      	ldr	r1, [r7, #8]
 8007a4c:	f002 fc88 	bl	800a360 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	68da      	ldr	r2, [r3, #12]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a58:	425b      	negs	r3, r3
 8007a5a:	441a      	add	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	68da      	ldr	r2, [r3, #12]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d207      	bcs.n	8007a7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a74:	425b      	negs	r3, r3
 8007a76:	441a      	add	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d105      	bne.n	8007a8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d002      	beq.n	8007a8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	1c5a      	adds	r2, r3, #1
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a96:	697b      	ldr	r3, [r7, #20]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d018      	beq.n	8007ae4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	441a      	add	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d303      	bcc.n	8007ad4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68d9      	ldr	r1, [r3, #12]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007adc:	461a      	mov	r2, r3
 8007ade:	6838      	ldr	r0, [r7, #0]
 8007ae0:	f002 fc3e 	bl	800a360 <memcpy>
	}
}
 8007ae4:	bf00      	nop
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007af4:	f001 fcc2 	bl	800947c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007afe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b00:	e011      	b.n	8007b26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d012      	beq.n	8007b30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3324      	adds	r3, #36	; 0x24
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fe0e 	bl	8008730 <xTaskRemoveFromEventList>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b1a:	f000 fee5 	bl	80088e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
 8007b20:	3b01      	subs	r3, #1
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	dce9      	bgt.n	8007b02 <prvUnlockQueue+0x16>
 8007b2e:	e000      	b.n	8007b32 <prvUnlockQueue+0x46>
					break;
 8007b30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	22ff      	movs	r2, #255	; 0xff
 8007b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007b3a:	f001 fccf 	bl	80094dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b3e:	f001 fc9d 	bl	800947c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b4a:	e011      	b.n	8007b70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d012      	beq.n	8007b7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	3310      	adds	r3, #16
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 fde9 	bl	8008730 <xTaskRemoveFromEventList>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b64:	f000 fec0 	bl	80088e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b68:	7bbb      	ldrb	r3, [r7, #14]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	dce9      	bgt.n	8007b4c <prvUnlockQueue+0x60>
 8007b78:	e000      	b.n	8007b7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	22ff      	movs	r2, #255	; 0xff
 8007b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b84:	f001 fcaa 	bl	80094dc <vPortExitCritical>
}
 8007b88:	bf00      	nop
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b98:	f001 fc70 	bl	800947c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d102      	bne.n	8007baa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	e001      	b.n	8007bae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007baa:	2300      	movs	r3, #0
 8007bac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bae:	f001 fc95 	bl	80094dc <vPortExitCritical>

	return xReturn;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bc4:	f001 fc5a 	bl	800947c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d102      	bne.n	8007bda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	e001      	b.n	8007bde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bde:	f001 fc7d 	bl	80094dc <vPortExitCritical>

	return xReturn;
 8007be2:	68fb      	ldr	r3, [r7, #12]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60fb      	str	r3, [r7, #12]
 8007bfa:	e014      	b.n	8007c26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007bfc:	4a0e      	ldr	r2, [pc, #56]	; (8007c38 <vQueueAddToRegistry+0x4c>)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10b      	bne.n	8007c20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c08:	490b      	ldr	r1, [pc, #44]	; (8007c38 <vQueueAddToRegistry+0x4c>)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007c12:	4a09      	ldr	r2, [pc, #36]	; (8007c38 <vQueueAddToRegistry+0x4c>)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	4413      	add	r3, r2
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c1e:	e006      	b.n	8007c2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3301      	adds	r3, #1
 8007c24:	60fb      	str	r3, [r7, #12]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2b07      	cmp	r3, #7
 8007c2a:	d9e7      	bls.n	8007bfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c2c:	bf00      	nop
 8007c2e:	bf00      	nop
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bc80      	pop	{r7}
 8007c36:	4770      	bx	lr
 8007c38:	20001d1c 	.word	0x20001d1c

08007c3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c4c:	f001 fc16 	bl	800947c <vPortEnterCritical>
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c56:	b25b      	sxtb	r3, r3
 8007c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5c:	d103      	bne.n	8007c66 <vQueueWaitForMessageRestricted+0x2a>
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c6c:	b25b      	sxtb	r3, r3
 8007c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c72:	d103      	bne.n	8007c7c <vQueueWaitForMessageRestricted+0x40>
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c7c:	f001 fc2e 	bl	80094dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d106      	bne.n	8007c96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	3324      	adds	r3, #36	; 0x24
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	68b9      	ldr	r1, [r7, #8]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 fd21 	bl	80086d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c96:	6978      	ldr	r0, [r7, #20]
 8007c98:	f7ff ff28 	bl	8007aec <prvUnlockQueue>
	}
 8007c9c:	bf00      	nop
 8007c9e:	3718      	adds	r7, #24
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08e      	sub	sp, #56	; 0x38
 8007ca8:	af04      	add	r7, sp, #16
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
 8007cb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10a      	bne.n	8007cce <xTaskCreateStatic+0x2a>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	623b      	str	r3, [r7, #32]
}
 8007cca:	bf00      	nop
 8007ccc:	e7fe      	b.n	8007ccc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10a      	bne.n	8007cea <xTaskCreateStatic+0x46>
	__asm volatile
 8007cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	61fb      	str	r3, [r7, #28]
}
 8007ce6:	bf00      	nop
 8007ce8:	e7fe      	b.n	8007ce8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cea:	235c      	movs	r3, #92	; 0x5c
 8007cec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	2b5c      	cmp	r3, #92	; 0x5c
 8007cf2:	d00a      	beq.n	8007d0a <xTaskCreateStatic+0x66>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	61bb      	str	r3, [r7, #24]
}
 8007d06:	bf00      	nop
 8007d08:	e7fe      	b.n	8007d08 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d01e      	beq.n	8007d4e <xTaskCreateStatic+0xaa>
 8007d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d01b      	beq.n	8007d4e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d18:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d1e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	2202      	movs	r2, #2
 8007d24:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d28:	2300      	movs	r3, #0
 8007d2a:	9303      	str	r3, [sp, #12]
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	9302      	str	r3, [sp, #8]
 8007d30:	f107 0314 	add.w	r3, r7, #20
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	68b9      	ldr	r1, [r7, #8]
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 f850 	bl	8007de6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d48:	f000 f8d4 	bl	8007ef4 <prvAddNewTaskToReadyList>
 8007d4c:	e001      	b.n	8007d52 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d52:	697b      	ldr	r3, [r7, #20]
	}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3728      	adds	r7, #40	; 0x28
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b08c      	sub	sp, #48	; 0x30
 8007d60:	af04      	add	r7, sp, #16
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d6c:	88fb      	ldrh	r3, [r7, #6]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4618      	mov	r0, r3
 8007d72:	f001 fc83 	bl	800967c <pvPortMalloc>
 8007d76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00e      	beq.n	8007d9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007d7e:	205c      	movs	r0, #92	; 0x5c
 8007d80:	f001 fc7c 	bl	800967c <pvPortMalloc>
 8007d84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	631a      	str	r2, [r3, #48]	; 0x30
 8007d92:	e005      	b.n	8007da0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d94:	6978      	ldr	r0, [r7, #20]
 8007d96:	f001 fd35 	bl	8009804 <vPortFree>
 8007d9a:	e001      	b.n	8007da0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d017      	beq.n	8007dd6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007dae:	88fa      	ldrh	r2, [r7, #6]
 8007db0:	2300      	movs	r3, #0
 8007db2:	9303      	str	r3, [sp, #12]
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	9302      	str	r3, [sp, #8]
 8007db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dba:	9301      	str	r3, [sp, #4]
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	68b9      	ldr	r1, [r7, #8]
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 f80e 	bl	8007de6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007dca:	69f8      	ldr	r0, [r7, #28]
 8007dcc:	f000 f892 	bl	8007ef4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	61bb      	str	r3, [r7, #24]
 8007dd4:	e002      	b.n	8007ddc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ddc:	69bb      	ldr	r3, [r7, #24]
	}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3720      	adds	r7, #32
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b088      	sub	sp, #32
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	60f8      	str	r0, [r7, #12]
 8007dee:	60b9      	str	r1, [r7, #8]
 8007df0:	607a      	str	r2, [r7, #4]
 8007df2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	21a5      	movs	r1, #165	; 0xa5
 8007e00:	f002 fabc 	bl	800a37c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	f023 0307 	bic.w	r3, r3, #7
 8007e1c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	f003 0307 	and.w	r3, r3, #7
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00a      	beq.n	8007e3e <prvInitialiseNewTask+0x58>
	__asm volatile
 8007e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2c:	f383 8811 	msr	BASEPRI, r3
 8007e30:	f3bf 8f6f 	isb	sy
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	617b      	str	r3, [r7, #20]
}
 8007e3a:	bf00      	nop
 8007e3c:	e7fe      	b.n	8007e3c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e3e:	2300      	movs	r3, #0
 8007e40:	61fb      	str	r3, [r7, #28]
 8007e42:	e012      	b.n	8007e6a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	4413      	add	r3, r2
 8007e4a:	7819      	ldrb	r1, [r3, #0]
 8007e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	4413      	add	r3, r2
 8007e52:	3334      	adds	r3, #52	; 0x34
 8007e54:	460a      	mov	r2, r1
 8007e56:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d006      	beq.n	8007e72 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	3301      	adds	r3, #1
 8007e68:	61fb      	str	r3, [r7, #28]
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	2b0f      	cmp	r3, #15
 8007e6e:	d9e9      	bls.n	8007e44 <prvInitialiseNewTask+0x5e>
 8007e70:	e000      	b.n	8007e74 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007e72:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7e:	2b37      	cmp	r3, #55	; 0x37
 8007e80:	d901      	bls.n	8007e86 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e82:	2337      	movs	r3, #55	; 0x37
 8007e84:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e8a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e90:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e94:	2200      	movs	r2, #0
 8007e96:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7ff f98c 	bl	80071ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea4:	3318      	adds	r3, #24
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7ff f987 	bl	80071ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eb0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ec0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	68f9      	ldr	r1, [r7, #12]
 8007ed4:	69b8      	ldr	r0, [r7, #24]
 8007ed6:	f001 f9df 	bl	8009298 <pxPortInitialiseStack>
 8007eda:	4602      	mov	r2, r0
 8007edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ede:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007eec:	bf00      	nop
 8007eee:	3720      	adds	r7, #32
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007efc:	f001 fabe 	bl	800947c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f00:	4b2d      	ldr	r3, [pc, #180]	; (8007fb8 <prvAddNewTaskToReadyList+0xc4>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3301      	adds	r3, #1
 8007f06:	4a2c      	ldr	r2, [pc, #176]	; (8007fb8 <prvAddNewTaskToReadyList+0xc4>)
 8007f08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f0a:	4b2c      	ldr	r3, [pc, #176]	; (8007fbc <prvAddNewTaskToReadyList+0xc8>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d109      	bne.n	8007f26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f12:	4a2a      	ldr	r2, [pc, #168]	; (8007fbc <prvAddNewTaskToReadyList+0xc8>)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f18:	4b27      	ldr	r3, [pc, #156]	; (8007fb8 <prvAddNewTaskToReadyList+0xc4>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d110      	bne.n	8007f42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f20:	f000 fd06 	bl	8008930 <prvInitialiseTaskLists>
 8007f24:	e00d      	b.n	8007f42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f26:	4b26      	ldr	r3, [pc, #152]	; (8007fc0 <prvAddNewTaskToReadyList+0xcc>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d109      	bne.n	8007f42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f2e:	4b23      	ldr	r3, [pc, #140]	; (8007fbc <prvAddNewTaskToReadyList+0xc8>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d802      	bhi.n	8007f42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f3c:	4a1f      	ldr	r2, [pc, #124]	; (8007fbc <prvAddNewTaskToReadyList+0xc8>)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f42:	4b20      	ldr	r3, [pc, #128]	; (8007fc4 <prvAddNewTaskToReadyList+0xd0>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3301      	adds	r3, #1
 8007f48:	4a1e      	ldr	r2, [pc, #120]	; (8007fc4 <prvAddNewTaskToReadyList+0xd0>)
 8007f4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f4c:	4b1d      	ldr	r3, [pc, #116]	; (8007fc4 <prvAddNewTaskToReadyList+0xd0>)
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f58:	4b1b      	ldr	r3, [pc, #108]	; (8007fc8 <prvAddNewTaskToReadyList+0xd4>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d903      	bls.n	8007f68 <prvAddNewTaskToReadyList+0x74>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f64:	4a18      	ldr	r2, [pc, #96]	; (8007fc8 <prvAddNewTaskToReadyList+0xd4>)
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4a15      	ldr	r2, [pc, #84]	; (8007fcc <prvAddNewTaskToReadyList+0xd8>)
 8007f76:	441a      	add	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	4610      	mov	r0, r2
 8007f80:	f7ff f927 	bl	80071d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f84:	f001 faaa 	bl	80094dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f88:	4b0d      	ldr	r3, [pc, #52]	; (8007fc0 <prvAddNewTaskToReadyList+0xcc>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00e      	beq.n	8007fae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f90:	4b0a      	ldr	r3, [pc, #40]	; (8007fbc <prvAddNewTaskToReadyList+0xc8>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d207      	bcs.n	8007fae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f9e:	4b0c      	ldr	r3, [pc, #48]	; (8007fd0 <prvAddNewTaskToReadyList+0xdc>)
 8007fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fae:	bf00      	nop
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20000d30 	.word	0x20000d30
 8007fbc:	2000085c 	.word	0x2000085c
 8007fc0:	20000d3c 	.word	0x20000d3c
 8007fc4:	20000d4c 	.word	0x20000d4c
 8007fc8:	20000d38 	.word	0x20000d38
 8007fcc:	20000860 	.word	0x20000860
 8007fd0:	e000ed04 	.word	0xe000ed04

08007fd4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007fdc:	f001 fa4e 	bl	800947c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d102      	bne.n	8007fec <vTaskDelete+0x18>
 8007fe6:	4b2c      	ldr	r3, [pc, #176]	; (8008098 <vTaskDelete+0xc4>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	e000      	b.n	8007fee <vTaskDelete+0x1a>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7ff f947 	bl	8007288 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d004      	beq.n	800800c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3318      	adds	r3, #24
 8008006:	4618      	mov	r0, r3
 8008008:	f7ff f93e 	bl	8007288 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800800c:	4b23      	ldr	r3, [pc, #140]	; (800809c <vTaskDelete+0xc8>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3301      	adds	r3, #1
 8008012:	4a22      	ldr	r2, [pc, #136]	; (800809c <vTaskDelete+0xc8>)
 8008014:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008016:	4b20      	ldr	r3, [pc, #128]	; (8008098 <vTaskDelete+0xc4>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	429a      	cmp	r2, r3
 800801e:	d10b      	bne.n	8008038 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3304      	adds	r3, #4
 8008024:	4619      	mov	r1, r3
 8008026:	481e      	ldr	r0, [pc, #120]	; (80080a0 <vTaskDelete+0xcc>)
 8008028:	f7ff f8d3 	bl	80071d2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800802c:	4b1d      	ldr	r3, [pc, #116]	; (80080a4 <vTaskDelete+0xd0>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	3301      	adds	r3, #1
 8008032:	4a1c      	ldr	r2, [pc, #112]	; (80080a4 <vTaskDelete+0xd0>)
 8008034:	6013      	str	r3, [r2, #0]
 8008036:	e009      	b.n	800804c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008038:	4b1b      	ldr	r3, [pc, #108]	; (80080a8 <vTaskDelete+0xd4>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	3b01      	subs	r3, #1
 800803e:	4a1a      	ldr	r2, [pc, #104]	; (80080a8 <vTaskDelete+0xd4>)
 8008040:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 fce2 	bl	8008a0c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008048:	f000 fd10 	bl	8008a6c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800804c:	f001 fa46 	bl	80094dc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008050:	4b16      	ldr	r3, [pc, #88]	; (80080ac <vTaskDelete+0xd8>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d01b      	beq.n	8008090 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8008058:	4b0f      	ldr	r3, [pc, #60]	; (8008098 <vTaskDelete+0xc4>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	429a      	cmp	r2, r3
 8008060:	d116      	bne.n	8008090 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008062:	4b13      	ldr	r3, [pc, #76]	; (80080b0 <vTaskDelete+0xdc>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00a      	beq.n	8008080 <vTaskDelete+0xac>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	60bb      	str	r3, [r7, #8]
}
 800807c:	bf00      	nop
 800807e:	e7fe      	b.n	800807e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8008080:	4b0c      	ldr	r3, [pc, #48]	; (80080b4 <vTaskDelete+0xe0>)
 8008082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008086:	601a      	str	r2, [r3, #0]
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008090:	bf00      	nop
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	2000085c 	.word	0x2000085c
 800809c:	20000d4c 	.word	0x20000d4c
 80080a0:	20000d04 	.word	0x20000d04
 80080a4:	20000d18 	.word	0x20000d18
 80080a8:	20000d30 	.word	0x20000d30
 80080ac:	20000d3c 	.word	0x20000d3c
 80080b0:	20000d58 	.word	0x20000d58
 80080b4:	e000ed04 	.word	0xe000ed04

080080b8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b08a      	sub	sp, #40	; 0x28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80080c2:	2300      	movs	r3, #0
 80080c4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10a      	bne.n	80080e2 <vTaskDelayUntil+0x2a>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	617b      	str	r3, [r7, #20]
}
 80080de:	bf00      	nop
 80080e0:	e7fe      	b.n	80080e0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10a      	bne.n	80080fe <vTaskDelayUntil+0x46>
	__asm volatile
 80080e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ec:	f383 8811 	msr	BASEPRI, r3
 80080f0:	f3bf 8f6f 	isb	sy
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	613b      	str	r3, [r7, #16]
}
 80080fa:	bf00      	nop
 80080fc:	e7fe      	b.n	80080fc <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80080fe:	4b2a      	ldr	r3, [pc, #168]	; (80081a8 <vTaskDelayUntil+0xf0>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00a      	beq.n	800811c <vTaskDelayUntil+0x64>
	__asm volatile
 8008106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	60fb      	str	r3, [r7, #12]
}
 8008118:	bf00      	nop
 800811a:	e7fe      	b.n	800811a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800811c:	f000 f8e4 	bl	80082e8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008120:	4b22      	ldr	r3, [pc, #136]	; (80081ac <vTaskDelayUntil+0xf4>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	4413      	add	r3, r2
 800812e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6a3a      	ldr	r2, [r7, #32]
 8008136:	429a      	cmp	r2, r3
 8008138:	d20b      	bcs.n	8008152 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	69fa      	ldr	r2, [r7, #28]
 8008140:	429a      	cmp	r2, r3
 8008142:	d211      	bcs.n	8008168 <vTaskDelayUntil+0xb0>
 8008144:	69fa      	ldr	r2, [r7, #28]
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	429a      	cmp	r2, r3
 800814a:	d90d      	bls.n	8008168 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800814c:	2301      	movs	r3, #1
 800814e:	627b      	str	r3, [r7, #36]	; 0x24
 8008150:	e00a      	b.n	8008168 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	69fa      	ldr	r2, [r7, #28]
 8008158:	429a      	cmp	r2, r3
 800815a:	d303      	bcc.n	8008164 <vTaskDelayUntil+0xac>
 800815c:	69fa      	ldr	r2, [r7, #28]
 800815e:	6a3b      	ldr	r3, [r7, #32]
 8008160:	429a      	cmp	r2, r3
 8008162:	d901      	bls.n	8008168 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008164:	2301      	movs	r3, #1
 8008166:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	69fa      	ldr	r2, [r7, #28]
 800816c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008170:	2b00      	cmp	r3, #0
 8008172:	d006      	beq.n	8008182 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008174:	69fa      	ldr	r2, [r7, #28]
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	2100      	movs	r1, #0
 800817c:	4618      	mov	r0, r3
 800817e:	f000 fd25 	bl	8008bcc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008182:	f000 f8bf 	bl	8008304 <xTaskResumeAll>
 8008186:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d107      	bne.n	800819e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800818e:	4b08      	ldr	r3, [pc, #32]	; (80081b0 <vTaskDelayUntil+0xf8>)
 8008190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800819e:	bf00      	nop
 80081a0:	3728      	adds	r7, #40	; 0x28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	20000d58 	.word	0x20000d58
 80081ac:	20000d34 	.word	0x20000d34
 80081b0:	e000ed04 	.word	0xe000ed04

080081b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80081bc:	2300      	movs	r3, #0
 80081be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d017      	beq.n	80081f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80081c6:	4b13      	ldr	r3, [pc, #76]	; (8008214 <vTaskDelay+0x60>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00a      	beq.n	80081e4 <vTaskDelay+0x30>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	60bb      	str	r3, [r7, #8]
}
 80081e0:	bf00      	nop
 80081e2:	e7fe      	b.n	80081e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80081e4:	f000 f880 	bl	80082e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80081e8:	2100      	movs	r1, #0
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fcee 	bl	8008bcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80081f0:	f000 f888 	bl	8008304 <xTaskResumeAll>
 80081f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d107      	bne.n	800820c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80081fc:	4b06      	ldr	r3, [pc, #24]	; (8008218 <vTaskDelay+0x64>)
 80081fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800820c:	bf00      	nop
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	20000d58 	.word	0x20000d58
 8008218:	e000ed04 	.word	0xe000ed04

0800821c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b08a      	sub	sp, #40	; 0x28
 8008220:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008222:	2300      	movs	r3, #0
 8008224:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008226:	2300      	movs	r3, #0
 8008228:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800822a:	463a      	mov	r2, r7
 800822c:	1d39      	adds	r1, r7, #4
 800822e:	f107 0308 	add.w	r3, r7, #8
 8008232:	4618      	mov	r0, r3
 8008234:	f7fe ff70 	bl	8007118 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	9202      	str	r2, [sp, #8]
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	2300      	movs	r3, #0
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	2300      	movs	r3, #0
 8008248:	460a      	mov	r2, r1
 800824a:	4921      	ldr	r1, [pc, #132]	; (80082d0 <vTaskStartScheduler+0xb4>)
 800824c:	4821      	ldr	r0, [pc, #132]	; (80082d4 <vTaskStartScheduler+0xb8>)
 800824e:	f7ff fd29 	bl	8007ca4 <xTaskCreateStatic>
 8008252:	4603      	mov	r3, r0
 8008254:	4a20      	ldr	r2, [pc, #128]	; (80082d8 <vTaskStartScheduler+0xbc>)
 8008256:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008258:	4b1f      	ldr	r3, [pc, #124]	; (80082d8 <vTaskStartScheduler+0xbc>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008260:	2301      	movs	r3, #1
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	e001      	b.n	800826a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008266:	2300      	movs	r3, #0
 8008268:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d102      	bne.n	8008276 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008270:	f000 fd00 	bl	8008c74 <xTimerCreateTimerTask>
 8008274:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d116      	bne.n	80082aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	613b      	str	r3, [r7, #16]
}
 800828e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008290:	4b12      	ldr	r3, [pc, #72]	; (80082dc <vTaskStartScheduler+0xc0>)
 8008292:	f04f 32ff 	mov.w	r2, #4294967295
 8008296:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008298:	4b11      	ldr	r3, [pc, #68]	; (80082e0 <vTaskStartScheduler+0xc4>)
 800829a:	2201      	movs	r2, #1
 800829c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800829e:	4b11      	ldr	r3, [pc, #68]	; (80082e4 <vTaskStartScheduler+0xc8>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80082a4:	f001 f878 	bl	8009398 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80082a8:	e00e      	b.n	80082c8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b0:	d10a      	bne.n	80082c8 <vTaskStartScheduler+0xac>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	60fb      	str	r3, [r7, #12]
}
 80082c4:	bf00      	nop
 80082c6:	e7fe      	b.n	80082c6 <vTaskStartScheduler+0xaa>
}
 80082c8:	bf00      	nop
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	0800a3d0 	.word	0x0800a3d0
 80082d4:	08008901 	.word	0x08008901
 80082d8:	20000d54 	.word	0x20000d54
 80082dc:	20000d50 	.word	0x20000d50
 80082e0:	20000d3c 	.word	0x20000d3c
 80082e4:	20000d34 	.word	0x20000d34

080082e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80082e8:	b480      	push	{r7}
 80082ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80082ec:	4b04      	ldr	r3, [pc, #16]	; (8008300 <vTaskSuspendAll+0x18>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	3301      	adds	r3, #1
 80082f2:	4a03      	ldr	r2, [pc, #12]	; (8008300 <vTaskSuspendAll+0x18>)
 80082f4:	6013      	str	r3, [r2, #0]
}
 80082f6:	bf00      	nop
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bc80      	pop	{r7}
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	20000d58 	.word	0x20000d58

08008304 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800830a:	2300      	movs	r3, #0
 800830c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800830e:	2300      	movs	r3, #0
 8008310:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008312:	4b42      	ldr	r3, [pc, #264]	; (800841c <xTaskResumeAll+0x118>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10a      	bne.n	8008330 <xTaskResumeAll+0x2c>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	603b      	str	r3, [r7, #0]
}
 800832c:	bf00      	nop
 800832e:	e7fe      	b.n	800832e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008330:	f001 f8a4 	bl	800947c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008334:	4b39      	ldr	r3, [pc, #228]	; (800841c <xTaskResumeAll+0x118>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	3b01      	subs	r3, #1
 800833a:	4a38      	ldr	r2, [pc, #224]	; (800841c <xTaskResumeAll+0x118>)
 800833c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800833e:	4b37      	ldr	r3, [pc, #220]	; (800841c <xTaskResumeAll+0x118>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d162      	bne.n	800840c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008346:	4b36      	ldr	r3, [pc, #216]	; (8008420 <xTaskResumeAll+0x11c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d05e      	beq.n	800840c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800834e:	e02f      	b.n	80083b0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008350:	4b34      	ldr	r3, [pc, #208]	; (8008424 <xTaskResumeAll+0x120>)
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	3318      	adds	r3, #24
 800835c:	4618      	mov	r0, r3
 800835e:	f7fe ff93 	bl	8007288 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3304      	adds	r3, #4
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe ff8e 	bl	8007288 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008370:	4b2d      	ldr	r3, [pc, #180]	; (8008428 <xTaskResumeAll+0x124>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	429a      	cmp	r2, r3
 8008376:	d903      	bls.n	8008380 <xTaskResumeAll+0x7c>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837c:	4a2a      	ldr	r2, [pc, #168]	; (8008428 <xTaskResumeAll+0x124>)
 800837e:	6013      	str	r3, [r2, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008384:	4613      	mov	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4a27      	ldr	r2, [pc, #156]	; (800842c <xTaskResumeAll+0x128>)
 800838e:	441a      	add	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3304      	adds	r3, #4
 8008394:	4619      	mov	r1, r3
 8008396:	4610      	mov	r0, r2
 8008398:	f7fe ff1b 	bl	80071d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a0:	4b23      	ldr	r3, [pc, #140]	; (8008430 <xTaskResumeAll+0x12c>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d302      	bcc.n	80083b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80083aa:	4b22      	ldr	r3, [pc, #136]	; (8008434 <xTaskResumeAll+0x130>)
 80083ac:	2201      	movs	r2, #1
 80083ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083b0:	4b1c      	ldr	r3, [pc, #112]	; (8008424 <xTaskResumeAll+0x120>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1cb      	bne.n	8008350 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d001      	beq.n	80083c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80083be:	f000 fb55 	bl	8008a6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80083c2:	4b1d      	ldr	r3, [pc, #116]	; (8008438 <xTaskResumeAll+0x134>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d010      	beq.n	80083f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80083ce:	f000 f845 	bl	800845c <xTaskIncrementTick>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80083d8:	4b16      	ldr	r3, [pc, #88]	; (8008434 <xTaskResumeAll+0x130>)
 80083da:	2201      	movs	r2, #1
 80083dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	3b01      	subs	r3, #1
 80083e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1f1      	bne.n	80083ce <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80083ea:	4b13      	ldr	r3, [pc, #76]	; (8008438 <xTaskResumeAll+0x134>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80083f0:	4b10      	ldr	r3, [pc, #64]	; (8008434 <xTaskResumeAll+0x130>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d009      	beq.n	800840c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80083f8:	2301      	movs	r3, #1
 80083fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80083fc:	4b0f      	ldr	r3, [pc, #60]	; (800843c <xTaskResumeAll+0x138>)
 80083fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800840c:	f001 f866 	bl	80094dc <vPortExitCritical>

	return xAlreadyYielded;
 8008410:	68bb      	ldr	r3, [r7, #8]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	20000d58 	.word	0x20000d58
 8008420:	20000d30 	.word	0x20000d30
 8008424:	20000cf0 	.word	0x20000cf0
 8008428:	20000d38 	.word	0x20000d38
 800842c:	20000860 	.word	0x20000860
 8008430:	2000085c 	.word	0x2000085c
 8008434:	20000d44 	.word	0x20000d44
 8008438:	20000d40 	.word	0x20000d40
 800843c:	e000ed04 	.word	0xe000ed04

08008440 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008446:	4b04      	ldr	r3, [pc, #16]	; (8008458 <xTaskGetTickCount+0x18>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800844c:	687b      	ldr	r3, [r7, #4]
}
 800844e:	4618      	mov	r0, r3
 8008450:	370c      	adds	r7, #12
 8008452:	46bd      	mov	sp, r7
 8008454:	bc80      	pop	{r7}
 8008456:	4770      	bx	lr
 8008458:	20000d34 	.word	0x20000d34

0800845c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008462:	2300      	movs	r3, #0
 8008464:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008466:	4b51      	ldr	r3, [pc, #324]	; (80085ac <xTaskIncrementTick+0x150>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	f040 808e 	bne.w	800858c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008470:	4b4f      	ldr	r3, [pc, #316]	; (80085b0 <xTaskIncrementTick+0x154>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3301      	adds	r3, #1
 8008476:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008478:	4a4d      	ldr	r2, [pc, #308]	; (80085b0 <xTaskIncrementTick+0x154>)
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d120      	bne.n	80084c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008484:	4b4b      	ldr	r3, [pc, #300]	; (80085b4 <xTaskIncrementTick+0x158>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00a      	beq.n	80084a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	603b      	str	r3, [r7, #0]
}
 80084a0:	bf00      	nop
 80084a2:	e7fe      	b.n	80084a2 <xTaskIncrementTick+0x46>
 80084a4:	4b43      	ldr	r3, [pc, #268]	; (80085b4 <xTaskIncrementTick+0x158>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	60fb      	str	r3, [r7, #12]
 80084aa:	4b43      	ldr	r3, [pc, #268]	; (80085b8 <xTaskIncrementTick+0x15c>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a41      	ldr	r2, [pc, #260]	; (80085b4 <xTaskIncrementTick+0x158>)
 80084b0:	6013      	str	r3, [r2, #0]
 80084b2:	4a41      	ldr	r2, [pc, #260]	; (80085b8 <xTaskIncrementTick+0x15c>)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6013      	str	r3, [r2, #0]
 80084b8:	4b40      	ldr	r3, [pc, #256]	; (80085bc <xTaskIncrementTick+0x160>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3301      	adds	r3, #1
 80084be:	4a3f      	ldr	r2, [pc, #252]	; (80085bc <xTaskIncrementTick+0x160>)
 80084c0:	6013      	str	r3, [r2, #0]
 80084c2:	f000 fad3 	bl	8008a6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80084c6:	4b3e      	ldr	r3, [pc, #248]	; (80085c0 <xTaskIncrementTick+0x164>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d34e      	bcc.n	800856e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084d0:	4b38      	ldr	r3, [pc, #224]	; (80085b4 <xTaskIncrementTick+0x158>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <xTaskIncrementTick+0x82>
 80084da:	2301      	movs	r3, #1
 80084dc:	e000      	b.n	80084e0 <xTaskIncrementTick+0x84>
 80084de:	2300      	movs	r3, #0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d004      	beq.n	80084ee <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084e4:	4b36      	ldr	r3, [pc, #216]	; (80085c0 <xTaskIncrementTick+0x164>)
 80084e6:	f04f 32ff 	mov.w	r2, #4294967295
 80084ea:	601a      	str	r2, [r3, #0]
					break;
 80084ec:	e03f      	b.n	800856e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80084ee:	4b31      	ldr	r3, [pc, #196]	; (80085b4 <xTaskIncrementTick+0x158>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	429a      	cmp	r2, r3
 8008504:	d203      	bcs.n	800850e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008506:	4a2e      	ldr	r2, [pc, #184]	; (80085c0 <xTaskIncrementTick+0x164>)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6013      	str	r3, [r2, #0]
						break;
 800850c:	e02f      	b.n	800856e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	3304      	adds	r3, #4
 8008512:	4618      	mov	r0, r3
 8008514:	f7fe feb8 	bl	8007288 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851c:	2b00      	cmp	r3, #0
 800851e:	d004      	beq.n	800852a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	3318      	adds	r3, #24
 8008524:	4618      	mov	r0, r3
 8008526:	f7fe feaf 	bl	8007288 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800852e:	4b25      	ldr	r3, [pc, #148]	; (80085c4 <xTaskIncrementTick+0x168>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	429a      	cmp	r2, r3
 8008534:	d903      	bls.n	800853e <xTaskIncrementTick+0xe2>
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853a:	4a22      	ldr	r2, [pc, #136]	; (80085c4 <xTaskIncrementTick+0x168>)
 800853c:	6013      	str	r3, [r2, #0]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008542:	4613      	mov	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4a1f      	ldr	r2, [pc, #124]	; (80085c8 <xTaskIncrementTick+0x16c>)
 800854c:	441a      	add	r2, r3
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	3304      	adds	r3, #4
 8008552:	4619      	mov	r1, r3
 8008554:	4610      	mov	r0, r2
 8008556:	f7fe fe3c 	bl	80071d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855e:	4b1b      	ldr	r3, [pc, #108]	; (80085cc <xTaskIncrementTick+0x170>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008564:	429a      	cmp	r2, r3
 8008566:	d3b3      	bcc.n	80084d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008568:	2301      	movs	r3, #1
 800856a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800856c:	e7b0      	b.n	80084d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800856e:	4b17      	ldr	r3, [pc, #92]	; (80085cc <xTaskIncrementTick+0x170>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008574:	4914      	ldr	r1, [pc, #80]	; (80085c8 <xTaskIncrementTick+0x16c>)
 8008576:	4613      	mov	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	440b      	add	r3, r1
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d907      	bls.n	8008596 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008586:	2301      	movs	r3, #1
 8008588:	617b      	str	r3, [r7, #20]
 800858a:	e004      	b.n	8008596 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800858c:	4b10      	ldr	r3, [pc, #64]	; (80085d0 <xTaskIncrementTick+0x174>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3301      	adds	r3, #1
 8008592:	4a0f      	ldr	r2, [pc, #60]	; (80085d0 <xTaskIncrementTick+0x174>)
 8008594:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008596:	4b0f      	ldr	r3, [pc, #60]	; (80085d4 <xTaskIncrementTick+0x178>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800859e:	2301      	movs	r3, #1
 80085a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80085a2:	697b      	ldr	r3, [r7, #20]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3718      	adds	r7, #24
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	20000d58 	.word	0x20000d58
 80085b0:	20000d34 	.word	0x20000d34
 80085b4:	20000ce8 	.word	0x20000ce8
 80085b8:	20000cec 	.word	0x20000cec
 80085bc:	20000d48 	.word	0x20000d48
 80085c0:	20000d50 	.word	0x20000d50
 80085c4:	20000d38 	.word	0x20000d38
 80085c8:	20000860 	.word	0x20000860
 80085cc:	2000085c 	.word	0x2000085c
 80085d0:	20000d40 	.word	0x20000d40
 80085d4:	20000d44 	.word	0x20000d44

080085d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80085de:	4b27      	ldr	r3, [pc, #156]	; (800867c <vTaskSwitchContext+0xa4>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d003      	beq.n	80085ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80085e6:	4b26      	ldr	r3, [pc, #152]	; (8008680 <vTaskSwitchContext+0xa8>)
 80085e8:	2201      	movs	r2, #1
 80085ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80085ec:	e041      	b.n	8008672 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80085ee:	4b24      	ldr	r3, [pc, #144]	; (8008680 <vTaskSwitchContext+0xa8>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80085f4:	4b23      	ldr	r3, [pc, #140]	; (8008684 <vTaskSwitchContext+0xac>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	60fb      	str	r3, [r7, #12]
 80085fa:	e010      	b.n	800861e <vTaskSwitchContext+0x46>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10a      	bne.n	8008618 <vTaskSwitchContext+0x40>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	607b      	str	r3, [r7, #4]
}
 8008614:	bf00      	nop
 8008616:	e7fe      	b.n	8008616 <vTaskSwitchContext+0x3e>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	3b01      	subs	r3, #1
 800861c:	60fb      	str	r3, [r7, #12]
 800861e:	491a      	ldr	r1, [pc, #104]	; (8008688 <vTaskSwitchContext+0xb0>)
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	4613      	mov	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	440b      	add	r3, r1
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d0e4      	beq.n	80085fc <vTaskSwitchContext+0x24>
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	4613      	mov	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4413      	add	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4a12      	ldr	r2, [pc, #72]	; (8008688 <vTaskSwitchContext+0xb0>)
 800863e:	4413      	add	r3, r2
 8008640:	60bb      	str	r3, [r7, #8]
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	605a      	str	r2, [r3, #4]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	3308      	adds	r3, #8
 8008654:	429a      	cmp	r2, r3
 8008656:	d104      	bne.n	8008662 <vTaskSwitchContext+0x8a>
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	685a      	ldr	r2, [r3, #4]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	605a      	str	r2, [r3, #4]
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	4a08      	ldr	r2, [pc, #32]	; (800868c <vTaskSwitchContext+0xb4>)
 800866a:	6013      	str	r3, [r2, #0]
 800866c:	4a05      	ldr	r2, [pc, #20]	; (8008684 <vTaskSwitchContext+0xac>)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6013      	str	r3, [r2, #0]
}
 8008672:	bf00      	nop
 8008674:	3714      	adds	r7, #20
 8008676:	46bd      	mov	sp, r7
 8008678:	bc80      	pop	{r7}
 800867a:	4770      	bx	lr
 800867c:	20000d58 	.word	0x20000d58
 8008680:	20000d44 	.word	0x20000d44
 8008684:	20000d38 	.word	0x20000d38
 8008688:	20000860 	.word	0x20000860
 800868c:	2000085c 	.word	0x2000085c

08008690 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10a      	bne.n	80086b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	60fb      	str	r3, [r7, #12]
}
 80086b2:	bf00      	nop
 80086b4:	e7fe      	b.n	80086b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086b6:	4b07      	ldr	r3, [pc, #28]	; (80086d4 <vTaskPlaceOnEventList+0x44>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3318      	adds	r3, #24
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7fe fdaa 	bl	8007218 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80086c4:	2101      	movs	r1, #1
 80086c6:	6838      	ldr	r0, [r7, #0]
 80086c8:	f000 fa80 	bl	8008bcc <prvAddCurrentTaskToDelayedList>
}
 80086cc:	bf00      	nop
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	2000085c 	.word	0x2000085c

080086d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10a      	bne.n	8008700 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	617b      	str	r3, [r7, #20]
}
 80086fc:	bf00      	nop
 80086fe:	e7fe      	b.n	80086fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008700:	4b0a      	ldr	r3, [pc, #40]	; (800872c <vTaskPlaceOnEventListRestricted+0x54>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3318      	adds	r3, #24
 8008706:	4619      	mov	r1, r3
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f7fe fd62 	bl	80071d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008714:	f04f 33ff 	mov.w	r3, #4294967295
 8008718:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	68b8      	ldr	r0, [r7, #8]
 800871e:	f000 fa55 	bl	8008bcc <prvAddCurrentTaskToDelayedList>
	}
 8008722:	bf00      	nop
 8008724:	3718      	adds	r7, #24
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	2000085c 	.word	0x2000085c

08008730 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10a      	bne.n	800875c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874a:	f383 8811 	msr	BASEPRI, r3
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	60fb      	str	r3, [r7, #12]
}
 8008758:	bf00      	nop
 800875a:	e7fe      	b.n	800875a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	3318      	adds	r3, #24
 8008760:	4618      	mov	r0, r3
 8008762:	f7fe fd91 	bl	8007288 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008766:	4b1e      	ldr	r3, [pc, #120]	; (80087e0 <xTaskRemoveFromEventList+0xb0>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d11d      	bne.n	80087aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	3304      	adds	r3, #4
 8008772:	4618      	mov	r0, r3
 8008774:	f7fe fd88 	bl	8007288 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800877c:	4b19      	ldr	r3, [pc, #100]	; (80087e4 <xTaskRemoveFromEventList+0xb4>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	429a      	cmp	r2, r3
 8008782:	d903      	bls.n	800878c <xTaskRemoveFromEventList+0x5c>
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008788:	4a16      	ldr	r2, [pc, #88]	; (80087e4 <xTaskRemoveFromEventList+0xb4>)
 800878a:	6013      	str	r3, [r2, #0]
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008790:	4613      	mov	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4a13      	ldr	r2, [pc, #76]	; (80087e8 <xTaskRemoveFromEventList+0xb8>)
 800879a:	441a      	add	r2, r3
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	3304      	adds	r3, #4
 80087a0:	4619      	mov	r1, r3
 80087a2:	4610      	mov	r0, r2
 80087a4:	f7fe fd15 	bl	80071d2 <vListInsertEnd>
 80087a8:	e005      	b.n	80087b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	3318      	adds	r3, #24
 80087ae:	4619      	mov	r1, r3
 80087b0:	480e      	ldr	r0, [pc, #56]	; (80087ec <xTaskRemoveFromEventList+0xbc>)
 80087b2:	f7fe fd0e 	bl	80071d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ba:	4b0d      	ldr	r3, [pc, #52]	; (80087f0 <xTaskRemoveFromEventList+0xc0>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d905      	bls.n	80087d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80087c4:	2301      	movs	r3, #1
 80087c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80087c8:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <xTaskRemoveFromEventList+0xc4>)
 80087ca:	2201      	movs	r2, #1
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	e001      	b.n	80087d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80087d0:	2300      	movs	r3, #0
 80087d2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80087d4:	697b      	ldr	r3, [r7, #20]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3718      	adds	r7, #24
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	20000d58 	.word	0x20000d58
 80087e4:	20000d38 	.word	0x20000d38
 80087e8:	20000860 	.word	0x20000860
 80087ec:	20000cf0 	.word	0x20000cf0
 80087f0:	2000085c 	.word	0x2000085c
 80087f4:	20000d44 	.word	0x20000d44

080087f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008800:	4b06      	ldr	r3, [pc, #24]	; (800881c <vTaskInternalSetTimeOutState+0x24>)
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008808:	4b05      	ldr	r3, [pc, #20]	; (8008820 <vTaskInternalSetTimeOutState+0x28>)
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	605a      	str	r2, [r3, #4]
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	bc80      	pop	{r7}
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	20000d48 	.word	0x20000d48
 8008820:	20000d34 	.word	0x20000d34

08008824 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b088      	sub	sp, #32
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10a      	bne.n	800884a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008838:	f383 8811 	msr	BASEPRI, r3
 800883c:	f3bf 8f6f 	isb	sy
 8008840:	f3bf 8f4f 	dsb	sy
 8008844:	613b      	str	r3, [r7, #16]
}
 8008846:	bf00      	nop
 8008848:	e7fe      	b.n	8008848 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10a      	bne.n	8008866 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	60fb      	str	r3, [r7, #12]
}
 8008862:	bf00      	nop
 8008864:	e7fe      	b.n	8008864 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008866:	f000 fe09 	bl	800947c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800886a:	4b1d      	ldr	r3, [pc, #116]	; (80088e0 <xTaskCheckForTimeOut+0xbc>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	69ba      	ldr	r2, [r7, #24]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008882:	d102      	bne.n	800888a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008884:	2300      	movs	r3, #0
 8008886:	61fb      	str	r3, [r7, #28]
 8008888:	e023      	b.n	80088d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	4b15      	ldr	r3, [pc, #84]	; (80088e4 <xTaskCheckForTimeOut+0xc0>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	429a      	cmp	r2, r3
 8008894:	d007      	beq.n	80088a6 <xTaskCheckForTimeOut+0x82>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	69ba      	ldr	r2, [r7, #24]
 800889c:	429a      	cmp	r2, r3
 800889e:	d302      	bcc.n	80088a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80088a0:	2301      	movs	r3, #1
 80088a2:	61fb      	str	r3, [r7, #28]
 80088a4:	e015      	b.n	80088d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d20b      	bcs.n	80088c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	1ad2      	subs	r2, r2, r3
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7ff ff9b 	bl	80087f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80088c2:	2300      	movs	r3, #0
 80088c4:	61fb      	str	r3, [r7, #28]
 80088c6:	e004      	b.n	80088d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	2200      	movs	r2, #0
 80088cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80088ce:	2301      	movs	r3, #1
 80088d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80088d2:	f000 fe03 	bl	80094dc <vPortExitCritical>

	return xReturn;
 80088d6:	69fb      	ldr	r3, [r7, #28]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3720      	adds	r7, #32
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	20000d34 	.word	0x20000d34
 80088e4:	20000d48 	.word	0x20000d48

080088e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80088e8:	b480      	push	{r7}
 80088ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80088ec:	4b03      	ldr	r3, [pc, #12]	; (80088fc <vTaskMissedYield+0x14>)
 80088ee:	2201      	movs	r2, #1
 80088f0:	601a      	str	r2, [r3, #0]
}
 80088f2:	bf00      	nop
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bc80      	pop	{r7}
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	20000d44 	.word	0x20000d44

08008900 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008908:	f000 f852 	bl	80089b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800890c:	4b06      	ldr	r3, [pc, #24]	; (8008928 <prvIdleTask+0x28>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d9f9      	bls.n	8008908 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008914:	4b05      	ldr	r3, [pc, #20]	; (800892c <prvIdleTask+0x2c>)
 8008916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008924:	e7f0      	b.n	8008908 <prvIdleTask+0x8>
 8008926:	bf00      	nop
 8008928:	20000860 	.word	0x20000860
 800892c:	e000ed04 	.word	0xe000ed04

08008930 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008936:	2300      	movs	r3, #0
 8008938:	607b      	str	r3, [r7, #4]
 800893a:	e00c      	b.n	8008956 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4a12      	ldr	r2, [pc, #72]	; (8008990 <prvInitialiseTaskLists+0x60>)
 8008948:	4413      	add	r3, r2
 800894a:	4618      	mov	r0, r3
 800894c:	f7fe fc16 	bl	800717c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3301      	adds	r3, #1
 8008954:	607b      	str	r3, [r7, #4]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b37      	cmp	r3, #55	; 0x37
 800895a:	d9ef      	bls.n	800893c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800895c:	480d      	ldr	r0, [pc, #52]	; (8008994 <prvInitialiseTaskLists+0x64>)
 800895e:	f7fe fc0d 	bl	800717c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008962:	480d      	ldr	r0, [pc, #52]	; (8008998 <prvInitialiseTaskLists+0x68>)
 8008964:	f7fe fc0a 	bl	800717c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008968:	480c      	ldr	r0, [pc, #48]	; (800899c <prvInitialiseTaskLists+0x6c>)
 800896a:	f7fe fc07 	bl	800717c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800896e:	480c      	ldr	r0, [pc, #48]	; (80089a0 <prvInitialiseTaskLists+0x70>)
 8008970:	f7fe fc04 	bl	800717c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008974:	480b      	ldr	r0, [pc, #44]	; (80089a4 <prvInitialiseTaskLists+0x74>)
 8008976:	f7fe fc01 	bl	800717c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800897a:	4b0b      	ldr	r3, [pc, #44]	; (80089a8 <prvInitialiseTaskLists+0x78>)
 800897c:	4a05      	ldr	r2, [pc, #20]	; (8008994 <prvInitialiseTaskLists+0x64>)
 800897e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008980:	4b0a      	ldr	r3, [pc, #40]	; (80089ac <prvInitialiseTaskLists+0x7c>)
 8008982:	4a05      	ldr	r2, [pc, #20]	; (8008998 <prvInitialiseTaskLists+0x68>)
 8008984:	601a      	str	r2, [r3, #0]
}
 8008986:	bf00      	nop
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	20000860 	.word	0x20000860
 8008994:	20000cc0 	.word	0x20000cc0
 8008998:	20000cd4 	.word	0x20000cd4
 800899c:	20000cf0 	.word	0x20000cf0
 80089a0:	20000d04 	.word	0x20000d04
 80089a4:	20000d1c 	.word	0x20000d1c
 80089a8:	20000ce8 	.word	0x20000ce8
 80089ac:	20000cec 	.word	0x20000cec

080089b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089b6:	e019      	b.n	80089ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80089b8:	f000 fd60 	bl	800947c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80089bc:	4b10      	ldr	r3, [pc, #64]	; (8008a00 <prvCheckTasksWaitingTermination+0x50>)
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	3304      	adds	r3, #4
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7fe fc5d 	bl	8007288 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80089ce:	4b0d      	ldr	r3, [pc, #52]	; (8008a04 <prvCheckTasksWaitingTermination+0x54>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	4a0b      	ldr	r2, [pc, #44]	; (8008a04 <prvCheckTasksWaitingTermination+0x54>)
 80089d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80089d8:	4b0b      	ldr	r3, [pc, #44]	; (8008a08 <prvCheckTasksWaitingTermination+0x58>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	3b01      	subs	r3, #1
 80089de:	4a0a      	ldr	r2, [pc, #40]	; (8008a08 <prvCheckTasksWaitingTermination+0x58>)
 80089e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80089e2:	f000 fd7b 	bl	80094dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f810 	bl	8008a0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089ec:	4b06      	ldr	r3, [pc, #24]	; (8008a08 <prvCheckTasksWaitingTermination+0x58>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1e1      	bne.n	80089b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20000d04 	.word	0x20000d04
 8008a04:	20000d30 	.word	0x20000d30
 8008a08:	20000d18 	.word	0x20000d18

08008a0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d108      	bne.n	8008a30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 feee 	bl	8009804 <vPortFree>
				vPortFree( pxTCB );
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 feeb 	bl	8009804 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a2e:	e018      	b.n	8008a62 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d103      	bne.n	8008a42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fee2 	bl	8009804 <vPortFree>
	}
 8008a40:	e00f      	b.n	8008a62 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d00a      	beq.n	8008a62 <prvDeleteTCB+0x56>
	__asm volatile
 8008a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a50:	f383 8811 	msr	BASEPRI, r3
 8008a54:	f3bf 8f6f 	isb	sy
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	60fb      	str	r3, [r7, #12]
}
 8008a5e:	bf00      	nop
 8008a60:	e7fe      	b.n	8008a60 <prvDeleteTCB+0x54>
	}
 8008a62:	bf00      	nop
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
	...

08008a6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a72:	4b0e      	ldr	r3, [pc, #56]	; (8008aac <prvResetNextTaskUnblockTime+0x40>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <prvResetNextTaskUnblockTime+0x14>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e000      	b.n	8008a82 <prvResetNextTaskUnblockTime+0x16>
 8008a80:	2300      	movs	r3, #0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d004      	beq.n	8008a90 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a86:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <prvResetNextTaskUnblockTime+0x44>)
 8008a88:	f04f 32ff 	mov.w	r2, #4294967295
 8008a8c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a8e:	e008      	b.n	8008aa2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008a90:	4b06      	ldr	r3, [pc, #24]	; (8008aac <prvResetNextTaskUnblockTime+0x40>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	4a04      	ldr	r2, [pc, #16]	; (8008ab0 <prvResetNextTaskUnblockTime+0x44>)
 8008aa0:	6013      	str	r3, [r2, #0]
}
 8008aa2:	bf00      	nop
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bc80      	pop	{r7}
 8008aaa:	4770      	bx	lr
 8008aac:	20000ce8 	.word	0x20000ce8
 8008ab0:	20000d50 	.word	0x20000d50

08008ab4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008aba:	4b0b      	ldr	r3, [pc, #44]	; (8008ae8 <xTaskGetSchedulerState+0x34>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d102      	bne.n	8008ac8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	607b      	str	r3, [r7, #4]
 8008ac6:	e008      	b.n	8008ada <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ac8:	4b08      	ldr	r3, [pc, #32]	; (8008aec <xTaskGetSchedulerState+0x38>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d102      	bne.n	8008ad6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	607b      	str	r3, [r7, #4]
 8008ad4:	e001      	b.n	8008ada <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ada:	687b      	ldr	r3, [r7, #4]
	}
 8008adc:	4618      	mov	r0, r3
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bc80      	pop	{r7}
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	20000d3c 	.word	0x20000d3c
 8008aec:	20000d58 	.word	0x20000d58

08008af0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b086      	sub	sp, #24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008afc:	2300      	movs	r3, #0
 8008afe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d056      	beq.n	8008bb4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b06:	4b2e      	ldr	r3, [pc, #184]	; (8008bc0 <xTaskPriorityDisinherit+0xd0>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d00a      	beq.n	8008b26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	60fb      	str	r3, [r7, #12]
}
 8008b22:	bf00      	nop
 8008b24:	e7fe      	b.n	8008b24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10a      	bne.n	8008b44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	60bb      	str	r3, [r7, #8]
}
 8008b40:	bf00      	nop
 8008b42:	e7fe      	b.n	8008b42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b48:	1e5a      	subs	r2, r3, #1
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d02c      	beq.n	8008bb4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d128      	bne.n	8008bb4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	3304      	adds	r3, #4
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fe fb8e 	bl	8007288 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b84:	4b0f      	ldr	r3, [pc, #60]	; (8008bc4 <xTaskPriorityDisinherit+0xd4>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d903      	bls.n	8008b94 <xTaskPriorityDisinherit+0xa4>
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b90:	4a0c      	ldr	r2, [pc, #48]	; (8008bc4 <xTaskPriorityDisinherit+0xd4>)
 8008b92:	6013      	str	r3, [r2, #0]
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b98:	4613      	mov	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4a09      	ldr	r2, [pc, #36]	; (8008bc8 <xTaskPriorityDisinherit+0xd8>)
 8008ba2:	441a      	add	r2, r3
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4610      	mov	r0, r2
 8008bac:	f7fe fb11 	bl	80071d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008bb4:	697b      	ldr	r3, [r7, #20]
	}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3718      	adds	r7, #24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	2000085c 	.word	0x2000085c
 8008bc4:	20000d38 	.word	0x20000d38
 8008bc8:	20000860 	.word	0x20000860

08008bcc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008bd6:	4b21      	ldr	r3, [pc, #132]	; (8008c5c <prvAddCurrentTaskToDelayedList+0x90>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bdc:	4b20      	ldr	r3, [pc, #128]	; (8008c60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3304      	adds	r3, #4
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7fe fb50 	bl	8007288 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bee:	d10a      	bne.n	8008c06 <prvAddCurrentTaskToDelayedList+0x3a>
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d007      	beq.n	8008c06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bf6:	4b1a      	ldr	r3, [pc, #104]	; (8008c60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4819      	ldr	r0, [pc, #100]	; (8008c64 <prvAddCurrentTaskToDelayedList+0x98>)
 8008c00:	f7fe fae7 	bl	80071d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c04:	e026      	b.n	8008c54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c0e:	4b14      	ldr	r3, [pc, #80]	; (8008c60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d209      	bcs.n	8008c32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c1e:	4b12      	ldr	r3, [pc, #72]	; (8008c68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	4b0f      	ldr	r3, [pc, #60]	; (8008c60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	3304      	adds	r3, #4
 8008c28:	4619      	mov	r1, r3
 8008c2a:	4610      	mov	r0, r2
 8008c2c:	f7fe faf4 	bl	8007218 <vListInsert>
}
 8008c30:	e010      	b.n	8008c54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c32:	4b0e      	ldr	r3, [pc, #56]	; (8008c6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	4b0a      	ldr	r3, [pc, #40]	; (8008c60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	3304      	adds	r3, #4
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	4610      	mov	r0, r2
 8008c40:	f7fe faea 	bl	8007218 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c44:	4b0a      	ldr	r3, [pc, #40]	; (8008c70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d202      	bcs.n	8008c54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008c4e:	4a08      	ldr	r2, [pc, #32]	; (8008c70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	6013      	str	r3, [r2, #0]
}
 8008c54:	bf00      	nop
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	20000d34 	.word	0x20000d34
 8008c60:	2000085c 	.word	0x2000085c
 8008c64:	20000d1c 	.word	0x20000d1c
 8008c68:	20000cec 	.word	0x20000cec
 8008c6c:	20000ce8 	.word	0x20000ce8
 8008c70:	20000d50 	.word	0x20000d50

08008c74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b08a      	sub	sp, #40	; 0x28
 8008c78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c7e:	f000 facb 	bl	8009218 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c82:	4b1c      	ldr	r3, [pc, #112]	; (8008cf4 <xTimerCreateTimerTask+0x80>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d021      	beq.n	8008cce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c92:	1d3a      	adds	r2, r7, #4
 8008c94:	f107 0108 	add.w	r1, r7, #8
 8008c98:	f107 030c 	add.w	r3, r7, #12
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7fe fa53 	bl	8007148 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008ca2:	6879      	ldr	r1, [r7, #4]
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	9202      	str	r2, [sp, #8]
 8008caa:	9301      	str	r3, [sp, #4]
 8008cac:	2302      	movs	r3, #2
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	460a      	mov	r2, r1
 8008cb4:	4910      	ldr	r1, [pc, #64]	; (8008cf8 <xTimerCreateTimerTask+0x84>)
 8008cb6:	4811      	ldr	r0, [pc, #68]	; (8008cfc <xTimerCreateTimerTask+0x88>)
 8008cb8:	f7fe fff4 	bl	8007ca4 <xTaskCreateStatic>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	4a10      	ldr	r2, [pc, #64]	; (8008d00 <xTimerCreateTimerTask+0x8c>)
 8008cc0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008cc2:	4b0f      	ldr	r3, [pc, #60]	; (8008d00 <xTimerCreateTimerTask+0x8c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10a      	bne.n	8008cea <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	613b      	str	r3, [r7, #16]
}
 8008ce6:	bf00      	nop
 8008ce8:	e7fe      	b.n	8008ce8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008cea:	697b      	ldr	r3, [r7, #20]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3718      	adds	r7, #24
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	20000d8c 	.word	0x20000d8c
 8008cf8:	0800a3d8 	.word	0x0800a3d8
 8008cfc:	08008e21 	.word	0x08008e21
 8008d00:	20000d90 	.word	0x20000d90

08008d04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08a      	sub	sp, #40	; 0x28
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
 8008d10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008d12:	2300      	movs	r3, #0
 8008d14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10a      	bne.n	8008d32 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d20:	f383 8811 	msr	BASEPRI, r3
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	623b      	str	r3, [r7, #32]
}
 8008d2e:	bf00      	nop
 8008d30:	e7fe      	b.n	8008d30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008d32:	4b1a      	ldr	r3, [pc, #104]	; (8008d9c <xTimerGenericCommand+0x98>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d02a      	beq.n	8008d90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	2b05      	cmp	r3, #5
 8008d4a:	dc18      	bgt.n	8008d7e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d4c:	f7ff feb2 	bl	8008ab4 <xTaskGetSchedulerState>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d109      	bne.n	8008d6a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d56:	4b11      	ldr	r3, [pc, #68]	; (8008d9c <xTimerGenericCommand+0x98>)
 8008d58:	6818      	ldr	r0, [r3, #0]
 8008d5a:	f107 0110 	add.w	r1, r7, #16
 8008d5e:	2300      	movs	r3, #0
 8008d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d62:	f7fe fbbd 	bl	80074e0 <xQueueGenericSend>
 8008d66:	6278      	str	r0, [r7, #36]	; 0x24
 8008d68:	e012      	b.n	8008d90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d6a:	4b0c      	ldr	r3, [pc, #48]	; (8008d9c <xTimerGenericCommand+0x98>)
 8008d6c:	6818      	ldr	r0, [r3, #0]
 8008d6e:	f107 0110 	add.w	r1, r7, #16
 8008d72:	2300      	movs	r3, #0
 8008d74:	2200      	movs	r2, #0
 8008d76:	f7fe fbb3 	bl	80074e0 <xQueueGenericSend>
 8008d7a:	6278      	str	r0, [r7, #36]	; 0x24
 8008d7c:	e008      	b.n	8008d90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d7e:	4b07      	ldr	r3, [pc, #28]	; (8008d9c <xTimerGenericCommand+0x98>)
 8008d80:	6818      	ldr	r0, [r3, #0]
 8008d82:	f107 0110 	add.w	r1, r7, #16
 8008d86:	2300      	movs	r3, #0
 8008d88:	683a      	ldr	r2, [r7, #0]
 8008d8a:	f7fe fca7 	bl	80076dc <xQueueGenericSendFromISR>
 8008d8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3728      	adds	r7, #40	; 0x28
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20000d8c 	.word	0x20000d8c

08008da0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af02      	add	r7, sp, #8
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008daa:	4b1c      	ldr	r3, [pc, #112]	; (8008e1c <prvProcessExpiredTimer+0x7c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	3304      	adds	r3, #4
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fe fa65 	bl	8007288 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	69db      	ldr	r3, [r3, #28]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d122      	bne.n	8008e0c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	699a      	ldr	r2, [r3, #24]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	18d1      	adds	r1, r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	6978      	ldr	r0, [r7, #20]
 8008dd4:	f000 f8c8 	bl	8008f68 <prvInsertTimerInActiveList>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d016      	beq.n	8008e0c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008dde:	2300      	movs	r3, #0
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	2300      	movs	r3, #0
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	2100      	movs	r1, #0
 8008de8:	6978      	ldr	r0, [r7, #20]
 8008dea:	f7ff ff8b 	bl	8008d04 <xTimerGenericCommand>
 8008dee:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10a      	bne.n	8008e0c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	60fb      	str	r3, [r7, #12]
}
 8008e08:	bf00      	nop
 8008e0a:	e7fe      	b.n	8008e0a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e10:	6978      	ldr	r0, [r7, #20]
 8008e12:	4798      	blx	r3
}
 8008e14:	bf00      	nop
 8008e16:	3718      	adds	r7, #24
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	20000d84 	.word	0x20000d84

08008e20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e28:	f107 0308 	add.w	r3, r7, #8
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 f857 	bl	8008ee0 <prvGetNextExpireTime>
 8008e32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	4619      	mov	r1, r3
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f000 f803 	bl	8008e44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008e3e:	f000 f8d5 	bl	8008fec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e42:	e7f1      	b.n	8008e28 <prvTimerTask+0x8>

08008e44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e4e:	f7ff fa4b 	bl	80082e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e52:	f107 0308 	add.w	r3, r7, #8
 8008e56:	4618      	mov	r0, r3
 8008e58:	f000 f866 	bl	8008f28 <prvSampleTimeNow>
 8008e5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d130      	bne.n	8008ec6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10a      	bne.n	8008e80 <prvProcessTimerOrBlockTask+0x3c>
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d806      	bhi.n	8008e80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e72:	f7ff fa47 	bl	8008304 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e76:	68f9      	ldr	r1, [r7, #12]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7ff ff91 	bl	8008da0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e7e:	e024      	b.n	8008eca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d008      	beq.n	8008e98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e86:	4b13      	ldr	r3, [pc, #76]	; (8008ed4 <prvProcessTimerOrBlockTask+0x90>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	bf0c      	ite	eq
 8008e90:	2301      	moveq	r3, #1
 8008e92:	2300      	movne	r3, #0
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e98:	4b0f      	ldr	r3, [pc, #60]	; (8008ed8 <prvProcessTimerOrBlockTask+0x94>)
 8008e9a:	6818      	ldr	r0, [r3, #0]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	f7fe fec9 	bl	8007c3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008eaa:	f7ff fa2b 	bl	8008304 <xTaskResumeAll>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10a      	bne.n	8008eca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008eb4:	4b09      	ldr	r3, [pc, #36]	; (8008edc <prvProcessTimerOrBlockTask+0x98>)
 8008eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	f3bf 8f6f 	isb	sy
}
 8008ec4:	e001      	b.n	8008eca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008ec6:	f7ff fa1d 	bl	8008304 <xTaskResumeAll>
}
 8008eca:	bf00      	nop
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	20000d88 	.word	0x20000d88
 8008ed8:	20000d8c 	.word	0x20000d8c
 8008edc:	e000ed04 	.word	0xe000ed04

08008ee0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ee8:	4b0e      	ldr	r3, [pc, #56]	; (8008f24 <prvGetNextExpireTime+0x44>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	bf0c      	ite	eq
 8008ef2:	2301      	moveq	r3, #1
 8008ef4:	2300      	movne	r3, #0
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	461a      	mov	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d105      	bne.n	8008f12 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f06:	4b07      	ldr	r3, [pc, #28]	; (8008f24 <prvGetNextExpireTime+0x44>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	e001      	b.n	8008f16 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008f16:	68fb      	ldr	r3, [r7, #12]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3714      	adds	r7, #20
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bc80      	pop	{r7}
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	20000d84 	.word	0x20000d84

08008f28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008f30:	f7ff fa86 	bl	8008440 <xTaskGetTickCount>
 8008f34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008f36:	4b0b      	ldr	r3, [pc, #44]	; (8008f64 <prvSampleTimeNow+0x3c>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d205      	bcs.n	8008f4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008f40:	f000 f908 	bl	8009154 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	601a      	str	r2, [r3, #0]
 8008f4a:	e002      	b.n	8008f52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f52:	4a04      	ldr	r2, [pc, #16]	; (8008f64 <prvSampleTimeNow+0x3c>)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f58:	68fb      	ldr	r3, [r7, #12]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20000d94 	.word	0x20000d94

08008f68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
 8008f74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f76:	2300      	movs	r3, #0
 8008f78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d812      	bhi.n	8008fb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	1ad2      	subs	r2, r2, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d302      	bcc.n	8008fa2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	617b      	str	r3, [r7, #20]
 8008fa0:	e01b      	b.n	8008fda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008fa2:	4b10      	ldr	r3, [pc, #64]	; (8008fe4 <prvInsertTimerInActiveList+0x7c>)
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	3304      	adds	r3, #4
 8008faa:	4619      	mov	r1, r3
 8008fac:	4610      	mov	r0, r2
 8008fae:	f7fe f933 	bl	8007218 <vListInsert>
 8008fb2:	e012      	b.n	8008fda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d206      	bcs.n	8008fca <prvInsertTimerInActiveList+0x62>
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d302      	bcc.n	8008fca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	617b      	str	r3, [r7, #20]
 8008fc8:	e007      	b.n	8008fda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008fca:	4b07      	ldr	r3, [pc, #28]	; (8008fe8 <prvInsertTimerInActiveList+0x80>)
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	4610      	mov	r0, r2
 8008fd6:	f7fe f91f 	bl	8007218 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008fda:	697b      	ldr	r3, [r7, #20]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3718      	adds	r7, #24
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	20000d88 	.word	0x20000d88
 8008fe8:	20000d84 	.word	0x20000d84

08008fec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b08e      	sub	sp, #56	; 0x38
 8008ff0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ff2:	e09d      	b.n	8009130 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	da18      	bge.n	800902c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ffa:	1d3b      	adds	r3, r7, #4
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10a      	bne.n	800901c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	61fb      	str	r3, [r7, #28]
}
 8009018:	bf00      	nop
 800901a:	e7fe      	b.n	800901a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800901c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009022:	6850      	ldr	r0, [r2, #4]
 8009024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009026:	6892      	ldr	r2, [r2, #8]
 8009028:	4611      	mov	r1, r2
 800902a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	db7d      	blt.n	800912e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009038:	695b      	ldr	r3, [r3, #20]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d004      	beq.n	8009048 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800903e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009040:	3304      	adds	r3, #4
 8009042:	4618      	mov	r0, r3
 8009044:	f7fe f920 	bl	8007288 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009048:	463b      	mov	r3, r7
 800904a:	4618      	mov	r0, r3
 800904c:	f7ff ff6c 	bl	8008f28 <prvSampleTimeNow>
 8009050:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b09      	cmp	r3, #9
 8009056:	d86b      	bhi.n	8009130 <prvProcessReceivedCommands+0x144>
 8009058:	a201      	add	r2, pc, #4	; (adr r2, 8009060 <prvProcessReceivedCommands+0x74>)
 800905a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905e:	bf00      	nop
 8009060:	08009089 	.word	0x08009089
 8009064:	08009089 	.word	0x08009089
 8009068:	08009089 	.word	0x08009089
 800906c:	08009131 	.word	0x08009131
 8009070:	080090e5 	.word	0x080090e5
 8009074:	0800911d 	.word	0x0800911d
 8009078:	08009089 	.word	0x08009089
 800907c:	08009089 	.word	0x08009089
 8009080:	08009131 	.word	0x08009131
 8009084:	080090e5 	.word	0x080090e5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908c:	699b      	ldr	r3, [r3, #24]
 800908e:	18d1      	adds	r1, r2, r3
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009096:	f7ff ff67 	bl	8008f68 <prvInsertTimerInActiveList>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d047      	beq.n	8009130 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090a6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80090a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d13f      	bne.n	8009130 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	441a      	add	r2, r3
 80090b8:	2300      	movs	r3, #0
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	2300      	movs	r3, #0
 80090be:	2100      	movs	r1, #0
 80090c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090c2:	f7ff fe1f 	bl	8008d04 <xTimerGenericCommand>
 80090c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80090c8:	6a3b      	ldr	r3, [r7, #32]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d130      	bne.n	8009130 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80090ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	61bb      	str	r3, [r7, #24]
}
 80090e0:	bf00      	nop
 80090e2:	e7fe      	b.n	80090e2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10a      	bne.n	8009108 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	617b      	str	r3, [r7, #20]
}
 8009104:	bf00      	nop
 8009106:	e7fe      	b.n	8009106 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910a:	699a      	ldr	r2, [r3, #24]
 800910c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910e:	18d1      	adds	r1, r2, r3
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009116:	f7ff ff27 	bl	8008f68 <prvInsertTimerInActiveList>
					break;
 800911a:	e009      	b.n	8009130 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009122:	2b00      	cmp	r3, #0
 8009124:	d104      	bne.n	8009130 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8009126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009128:	f000 fb6c 	bl	8009804 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800912c:	e000      	b.n	8009130 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800912e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009130:	4b07      	ldr	r3, [pc, #28]	; (8009150 <prvProcessReceivedCommands+0x164>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	1d39      	adds	r1, r7, #4
 8009136:	2200      	movs	r2, #0
 8009138:	4618      	mov	r0, r3
 800913a:	f7fe fb67 	bl	800780c <xQueueReceive>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	f47f af57 	bne.w	8008ff4 <prvProcessReceivedCommands+0x8>
	}
}
 8009146:	bf00      	nop
 8009148:	bf00      	nop
 800914a:	3730      	adds	r7, #48	; 0x30
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	20000d8c 	.word	0x20000d8c

08009154 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b088      	sub	sp, #32
 8009158:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800915a:	e045      	b.n	80091e8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800915c:	4b2c      	ldr	r3, [pc, #176]	; (8009210 <prvSwitchTimerLists+0xbc>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009166:	4b2a      	ldr	r3, [pc, #168]	; (8009210 <prvSwitchTimerLists+0xbc>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	3304      	adds	r3, #4
 8009174:	4618      	mov	r0, r3
 8009176:	f7fe f887 	bl	8007288 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d12e      	bne.n	80091e8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	693a      	ldr	r2, [r7, #16]
 8009190:	4413      	add	r3, r2
 8009192:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	429a      	cmp	r2, r3
 800919a:	d90e      	bls.n	80091ba <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091a8:	4b19      	ldr	r3, [pc, #100]	; (8009210 <prvSwitchTimerLists+0xbc>)
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	3304      	adds	r3, #4
 80091b0:	4619      	mov	r1, r3
 80091b2:	4610      	mov	r0, r2
 80091b4:	f7fe f830 	bl	8007218 <vListInsert>
 80091b8:	e016      	b.n	80091e8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091ba:	2300      	movs	r3, #0
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	2300      	movs	r3, #0
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	2100      	movs	r1, #0
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f7ff fd9d 	bl	8008d04 <xTimerGenericCommand>
 80091ca:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d10a      	bne.n	80091e8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80091d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d6:	f383 8811 	msr	BASEPRI, r3
 80091da:	f3bf 8f6f 	isb	sy
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	603b      	str	r3, [r7, #0]
}
 80091e4:	bf00      	nop
 80091e6:	e7fe      	b.n	80091e6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091e8:	4b09      	ldr	r3, [pc, #36]	; (8009210 <prvSwitchTimerLists+0xbc>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1b4      	bne.n	800915c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80091f2:	4b07      	ldr	r3, [pc, #28]	; (8009210 <prvSwitchTimerLists+0xbc>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80091f8:	4b06      	ldr	r3, [pc, #24]	; (8009214 <prvSwitchTimerLists+0xc0>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a04      	ldr	r2, [pc, #16]	; (8009210 <prvSwitchTimerLists+0xbc>)
 80091fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009200:	4a04      	ldr	r2, [pc, #16]	; (8009214 <prvSwitchTimerLists+0xc0>)
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	6013      	str	r3, [r2, #0]
}
 8009206:	bf00      	nop
 8009208:	3718      	adds	r7, #24
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	20000d84 	.word	0x20000d84
 8009214:	20000d88 	.word	0x20000d88

08009218 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800921e:	f000 f92d 	bl	800947c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009222:	4b15      	ldr	r3, [pc, #84]	; (8009278 <prvCheckForValidListAndQueue+0x60>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d120      	bne.n	800926c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800922a:	4814      	ldr	r0, [pc, #80]	; (800927c <prvCheckForValidListAndQueue+0x64>)
 800922c:	f7fd ffa6 	bl	800717c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009230:	4813      	ldr	r0, [pc, #76]	; (8009280 <prvCheckForValidListAndQueue+0x68>)
 8009232:	f7fd ffa3 	bl	800717c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009236:	4b13      	ldr	r3, [pc, #76]	; (8009284 <prvCheckForValidListAndQueue+0x6c>)
 8009238:	4a10      	ldr	r2, [pc, #64]	; (800927c <prvCheckForValidListAndQueue+0x64>)
 800923a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800923c:	4b12      	ldr	r3, [pc, #72]	; (8009288 <prvCheckForValidListAndQueue+0x70>)
 800923e:	4a10      	ldr	r2, [pc, #64]	; (8009280 <prvCheckForValidListAndQueue+0x68>)
 8009240:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009242:	2300      	movs	r3, #0
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	4b11      	ldr	r3, [pc, #68]	; (800928c <prvCheckForValidListAndQueue+0x74>)
 8009248:	4a11      	ldr	r2, [pc, #68]	; (8009290 <prvCheckForValidListAndQueue+0x78>)
 800924a:	2110      	movs	r1, #16
 800924c:	200a      	movs	r0, #10
 800924e:	f7fe f8ad 	bl	80073ac <xQueueGenericCreateStatic>
 8009252:	4603      	mov	r3, r0
 8009254:	4a08      	ldr	r2, [pc, #32]	; (8009278 <prvCheckForValidListAndQueue+0x60>)
 8009256:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009258:	4b07      	ldr	r3, [pc, #28]	; (8009278 <prvCheckForValidListAndQueue+0x60>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d005      	beq.n	800926c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009260:	4b05      	ldr	r3, [pc, #20]	; (8009278 <prvCheckForValidListAndQueue+0x60>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	490b      	ldr	r1, [pc, #44]	; (8009294 <prvCheckForValidListAndQueue+0x7c>)
 8009266:	4618      	mov	r0, r3
 8009268:	f7fe fcc0 	bl	8007bec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800926c:	f000 f936 	bl	80094dc <vPortExitCritical>
}
 8009270:	bf00      	nop
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	20000d8c 	.word	0x20000d8c
 800927c:	20000d5c 	.word	0x20000d5c
 8009280:	20000d70 	.word	0x20000d70
 8009284:	20000d84 	.word	0x20000d84
 8009288:	20000d88 	.word	0x20000d88
 800928c:	20000e38 	.word	0x20000e38
 8009290:	20000d98 	.word	0x20000d98
 8009294:	0800a3e0 	.word	0x0800a3e0

08009298 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3b04      	subs	r3, #4
 80092a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80092b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	3b04      	subs	r3, #4
 80092b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	f023 0201 	bic.w	r2, r3, #1
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3b04      	subs	r3, #4
 80092c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092c8:	4a08      	ldr	r2, [pc, #32]	; (80092ec <pxPortInitialiseStack+0x54>)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	3b14      	subs	r3, #20
 80092d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	3b20      	subs	r3, #32
 80092de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092e0:	68fb      	ldr	r3, [r7, #12]
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3714      	adds	r7, #20
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bc80      	pop	{r7}
 80092ea:	4770      	bx	lr
 80092ec:	080092f1 	.word	0x080092f1

080092f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80092f6:	2300      	movs	r3, #0
 80092f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80092fa:	4b12      	ldr	r3, [pc, #72]	; (8009344 <prvTaskExitError+0x54>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009302:	d00a      	beq.n	800931a <prvTaskExitError+0x2a>
	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	60fb      	str	r3, [r7, #12]
}
 8009316:	bf00      	nop
 8009318:	e7fe      	b.n	8009318 <prvTaskExitError+0x28>
	__asm volatile
 800931a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	60bb      	str	r3, [r7, #8]
}
 800932c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800932e:	bf00      	nop
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d0fc      	beq.n	8009330 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009336:	bf00      	nop
 8009338:	bf00      	nop
 800933a:	3714      	adds	r7, #20
 800933c:	46bd      	mov	sp, r7
 800933e:	bc80      	pop	{r7}
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	2000011c 	.word	0x2000011c
	...

08009350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009350:	4b07      	ldr	r3, [pc, #28]	; (8009370 <pxCurrentTCBConst2>)
 8009352:	6819      	ldr	r1, [r3, #0]
 8009354:	6808      	ldr	r0, [r1, #0]
 8009356:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800935a:	f380 8809 	msr	PSP, r0
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f04f 0000 	mov.w	r0, #0
 8009366:	f380 8811 	msr	BASEPRI, r0
 800936a:	f04e 0e0d 	orr.w	lr, lr, #13
 800936e:	4770      	bx	lr

08009370 <pxCurrentTCBConst2>:
 8009370:	2000085c 	.word	0x2000085c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009374:	bf00      	nop
 8009376:	bf00      	nop

08009378 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009378:	4806      	ldr	r0, [pc, #24]	; (8009394 <prvPortStartFirstTask+0x1c>)
 800937a:	6800      	ldr	r0, [r0, #0]
 800937c:	6800      	ldr	r0, [r0, #0]
 800937e:	f380 8808 	msr	MSP, r0
 8009382:	b662      	cpsie	i
 8009384:	b661      	cpsie	f
 8009386:	f3bf 8f4f 	dsb	sy
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	df00      	svc	0
 8009390:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009392:	bf00      	nop
 8009394:	e000ed08 	.word	0xe000ed08

08009398 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800939e:	4b32      	ldr	r3, [pc, #200]	; (8009468 <xPortStartScheduler+0xd0>)
 80093a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	22ff      	movs	r2, #255	; 0xff
 80093ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093b8:	78fb      	ldrb	r3, [r7, #3]
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093c0:	b2da      	uxtb	r2, r3
 80093c2:	4b2a      	ldr	r3, [pc, #168]	; (800946c <xPortStartScheduler+0xd4>)
 80093c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093c6:	4b2a      	ldr	r3, [pc, #168]	; (8009470 <xPortStartScheduler+0xd8>)
 80093c8:	2207      	movs	r2, #7
 80093ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093cc:	e009      	b.n	80093e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80093ce:	4b28      	ldr	r3, [pc, #160]	; (8009470 <xPortStartScheduler+0xd8>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3b01      	subs	r3, #1
 80093d4:	4a26      	ldr	r2, [pc, #152]	; (8009470 <xPortStartScheduler+0xd8>)
 80093d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80093d8:	78fb      	ldrb	r3, [r7, #3]
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	005b      	lsls	r3, r3, #1
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093e2:	78fb      	ldrb	r3, [r7, #3]
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ea:	2b80      	cmp	r3, #128	; 0x80
 80093ec:	d0ef      	beq.n	80093ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80093ee:	4b20      	ldr	r3, [pc, #128]	; (8009470 <xPortStartScheduler+0xd8>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f1c3 0307 	rsb	r3, r3, #7
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	d00a      	beq.n	8009410 <xPortStartScheduler+0x78>
	__asm volatile
 80093fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fe:	f383 8811 	msr	BASEPRI, r3
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	60bb      	str	r3, [r7, #8]
}
 800940c:	bf00      	nop
 800940e:	e7fe      	b.n	800940e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009410:	4b17      	ldr	r3, [pc, #92]	; (8009470 <xPortStartScheduler+0xd8>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	021b      	lsls	r3, r3, #8
 8009416:	4a16      	ldr	r2, [pc, #88]	; (8009470 <xPortStartScheduler+0xd8>)
 8009418:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800941a:	4b15      	ldr	r3, [pc, #84]	; (8009470 <xPortStartScheduler+0xd8>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009422:	4a13      	ldr	r2, [pc, #76]	; (8009470 <xPortStartScheduler+0xd8>)
 8009424:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	b2da      	uxtb	r2, r3
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800942e:	4b11      	ldr	r3, [pc, #68]	; (8009474 <xPortStartScheduler+0xdc>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a10      	ldr	r2, [pc, #64]	; (8009474 <xPortStartScheduler+0xdc>)
 8009434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009438:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800943a:	4b0e      	ldr	r3, [pc, #56]	; (8009474 <xPortStartScheduler+0xdc>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a0d      	ldr	r2, [pc, #52]	; (8009474 <xPortStartScheduler+0xdc>)
 8009440:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009444:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009446:	f000 f8b9 	bl	80095bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800944a:	4b0b      	ldr	r3, [pc, #44]	; (8009478 <xPortStartScheduler+0xe0>)
 800944c:	2200      	movs	r2, #0
 800944e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009450:	f7ff ff92 	bl	8009378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009454:	f7ff f8c0 	bl	80085d8 <vTaskSwitchContext>
	prvTaskExitError();
 8009458:	f7ff ff4a 	bl	80092f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	e000e400 	.word	0xe000e400
 800946c:	20000e88 	.word	0x20000e88
 8009470:	20000e8c 	.word	0x20000e8c
 8009474:	e000ed20 	.word	0xe000ed20
 8009478:	2000011c 	.word	0x2000011c

0800947c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
	__asm volatile
 8009482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009486:	f383 8811 	msr	BASEPRI, r3
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	f3bf 8f4f 	dsb	sy
 8009492:	607b      	str	r3, [r7, #4]
}
 8009494:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009496:	4b0f      	ldr	r3, [pc, #60]	; (80094d4 <vPortEnterCritical+0x58>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3301      	adds	r3, #1
 800949c:	4a0d      	ldr	r2, [pc, #52]	; (80094d4 <vPortEnterCritical+0x58>)
 800949e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094a0:	4b0c      	ldr	r3, [pc, #48]	; (80094d4 <vPortEnterCritical+0x58>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d10f      	bne.n	80094c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094a8:	4b0b      	ldr	r3, [pc, #44]	; (80094d8 <vPortEnterCritical+0x5c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00a      	beq.n	80094c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	603b      	str	r3, [r7, #0]
}
 80094c4:	bf00      	nop
 80094c6:	e7fe      	b.n	80094c6 <vPortEnterCritical+0x4a>
	}
}
 80094c8:	bf00      	nop
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bc80      	pop	{r7}
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	2000011c 	.word	0x2000011c
 80094d8:	e000ed04 	.word	0xe000ed04

080094dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80094e2:	4b11      	ldr	r3, [pc, #68]	; (8009528 <vPortExitCritical+0x4c>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10a      	bne.n	8009500 <vPortExitCritical+0x24>
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	607b      	str	r3, [r7, #4]
}
 80094fc:	bf00      	nop
 80094fe:	e7fe      	b.n	80094fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009500:	4b09      	ldr	r3, [pc, #36]	; (8009528 <vPortExitCritical+0x4c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	3b01      	subs	r3, #1
 8009506:	4a08      	ldr	r2, [pc, #32]	; (8009528 <vPortExitCritical+0x4c>)
 8009508:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800950a:	4b07      	ldr	r3, [pc, #28]	; (8009528 <vPortExitCritical+0x4c>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d105      	bne.n	800951e <vPortExitCritical+0x42>
 8009512:	2300      	movs	r3, #0
 8009514:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	f383 8811 	msr	BASEPRI, r3
}
 800951c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800951e:	bf00      	nop
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	bc80      	pop	{r7}
 8009526:	4770      	bx	lr
 8009528:	2000011c 	.word	0x2000011c
 800952c:	00000000 	.word	0x00000000

08009530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009530:	f3ef 8009 	mrs	r0, PSP
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	4b0d      	ldr	r3, [pc, #52]	; (8009570 <pxCurrentTCBConst>)
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009540:	6010      	str	r0, [r2, #0]
 8009542:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009546:	f04f 0050 	mov.w	r0, #80	; 0x50
 800954a:	f380 8811 	msr	BASEPRI, r0
 800954e:	f7ff f843 	bl	80085d8 <vTaskSwitchContext>
 8009552:	f04f 0000 	mov.w	r0, #0
 8009556:	f380 8811 	msr	BASEPRI, r0
 800955a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800955e:	6819      	ldr	r1, [r3, #0]
 8009560:	6808      	ldr	r0, [r1, #0]
 8009562:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009566:	f380 8809 	msr	PSP, r0
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	4770      	bx	lr

08009570 <pxCurrentTCBConst>:
 8009570:	2000085c 	.word	0x2000085c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009574:	bf00      	nop
 8009576:	bf00      	nop

08009578 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
	__asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	607b      	str	r3, [r7, #4]
}
 8009590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009592:	f7fe ff63 	bl	800845c <xTaskIncrementTick>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d003      	beq.n	80095a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800959c:	4b06      	ldr	r3, [pc, #24]	; (80095b8 <SysTick_Handler+0x40>)
 800959e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	2300      	movs	r3, #0
 80095a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	f383 8811 	msr	BASEPRI, r3
}
 80095ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80095b0:	bf00      	nop
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	e000ed04 	.word	0xe000ed04

080095bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80095bc:	b480      	push	{r7}
 80095be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80095c0:	4b0a      	ldr	r3, [pc, #40]	; (80095ec <vPortSetupTimerInterrupt+0x30>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80095c6:	4b0a      	ldr	r3, [pc, #40]	; (80095f0 <vPortSetupTimerInterrupt+0x34>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80095cc:	4b09      	ldr	r3, [pc, #36]	; (80095f4 <vPortSetupTimerInterrupt+0x38>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a09      	ldr	r2, [pc, #36]	; (80095f8 <vPortSetupTimerInterrupt+0x3c>)
 80095d2:	fba2 2303 	umull	r2, r3, r2, r3
 80095d6:	099b      	lsrs	r3, r3, #6
 80095d8:	4a08      	ldr	r2, [pc, #32]	; (80095fc <vPortSetupTimerInterrupt+0x40>)
 80095da:	3b01      	subs	r3, #1
 80095dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80095de:	4b03      	ldr	r3, [pc, #12]	; (80095ec <vPortSetupTimerInterrupt+0x30>)
 80095e0:	2207      	movs	r2, #7
 80095e2:	601a      	str	r2, [r3, #0]
}
 80095e4:	bf00      	nop
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bc80      	pop	{r7}
 80095ea:	4770      	bx	lr
 80095ec:	e000e010 	.word	0xe000e010
 80095f0:	e000e018 	.word	0xe000e018
 80095f4:	20000000 	.word	0x20000000
 80095f8:	10624dd3 	.word	0x10624dd3
 80095fc:	e000e014 	.word	0xe000e014

08009600 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009600:	b480      	push	{r7}
 8009602:	b085      	sub	sp, #20
 8009604:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009606:	f3ef 8305 	mrs	r3, IPSR
 800960a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2b0f      	cmp	r3, #15
 8009610:	d914      	bls.n	800963c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009612:	4a16      	ldr	r2, [pc, #88]	; (800966c <vPortValidateInterruptPriority+0x6c>)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	4413      	add	r3, r2
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800961c:	4b14      	ldr	r3, [pc, #80]	; (8009670 <vPortValidateInterruptPriority+0x70>)
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	7afa      	ldrb	r2, [r7, #11]
 8009622:	429a      	cmp	r2, r3
 8009624:	d20a      	bcs.n	800963c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962a:	f383 8811 	msr	BASEPRI, r3
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	607b      	str	r3, [r7, #4]
}
 8009638:	bf00      	nop
 800963a:	e7fe      	b.n	800963a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800963c:	4b0d      	ldr	r3, [pc, #52]	; (8009674 <vPortValidateInterruptPriority+0x74>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009644:	4b0c      	ldr	r3, [pc, #48]	; (8009678 <vPortValidateInterruptPriority+0x78>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	429a      	cmp	r2, r3
 800964a:	d90a      	bls.n	8009662 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800964c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009650:	f383 8811 	msr	BASEPRI, r3
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	603b      	str	r3, [r7, #0]
}
 800965e:	bf00      	nop
 8009660:	e7fe      	b.n	8009660 <vPortValidateInterruptPriority+0x60>
	}
 8009662:	bf00      	nop
 8009664:	3714      	adds	r7, #20
 8009666:	46bd      	mov	sp, r7
 8009668:	bc80      	pop	{r7}
 800966a:	4770      	bx	lr
 800966c:	e000e3f0 	.word	0xe000e3f0
 8009670:	20000e88 	.word	0x20000e88
 8009674:	e000ed0c 	.word	0xe000ed0c
 8009678:	20000e8c 	.word	0x20000e8c

0800967c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b08a      	sub	sp, #40	; 0x28
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009684:	2300      	movs	r3, #0
 8009686:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009688:	f7fe fe2e 	bl	80082e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800968c:	4b58      	ldr	r3, [pc, #352]	; (80097f0 <pvPortMalloc+0x174>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d101      	bne.n	8009698 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009694:	f000 f910 	bl	80098b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009698:	4b56      	ldr	r3, [pc, #344]	; (80097f4 <pvPortMalloc+0x178>)
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4013      	ands	r3, r2
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f040 808e 	bne.w	80097c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d01d      	beq.n	80096e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80096ac:	2208      	movs	r2, #8
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4413      	add	r3, r2
 80096b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f003 0307 	and.w	r3, r3, #7
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d014      	beq.n	80096e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f023 0307 	bic.w	r3, r3, #7
 80096c4:	3308      	adds	r3, #8
 80096c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f003 0307 	and.w	r3, r3, #7
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00a      	beq.n	80096e8 <pvPortMalloc+0x6c>
	__asm volatile
 80096d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	617b      	str	r3, [r7, #20]
}
 80096e4:	bf00      	nop
 80096e6:	e7fe      	b.n	80096e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d069      	beq.n	80097c2 <pvPortMalloc+0x146>
 80096ee:	4b42      	ldr	r3, [pc, #264]	; (80097f8 <pvPortMalloc+0x17c>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d864      	bhi.n	80097c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096f8:	4b40      	ldr	r3, [pc, #256]	; (80097fc <pvPortMalloc+0x180>)
 80096fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80096fc:	4b3f      	ldr	r3, [pc, #252]	; (80097fc <pvPortMalloc+0x180>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009702:	e004      	b.n	800970e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009706:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	429a      	cmp	r2, r3
 8009716:	d903      	bls.n	8009720 <pvPortMalloc+0xa4>
 8009718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d1f1      	bne.n	8009704 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009720:	4b33      	ldr	r3, [pc, #204]	; (80097f0 <pvPortMalloc+0x174>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009726:	429a      	cmp	r2, r3
 8009728:	d04b      	beq.n	80097c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2208      	movs	r2, #8
 8009730:	4413      	add	r3, r2
 8009732:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973e:	685a      	ldr	r2, [r3, #4]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	1ad2      	subs	r2, r2, r3
 8009744:	2308      	movs	r3, #8
 8009746:	005b      	lsls	r3, r3, #1
 8009748:	429a      	cmp	r2, r3
 800974a:	d91f      	bls.n	800978c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800974c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4413      	add	r3, r2
 8009752:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	f003 0307 	and.w	r3, r3, #7
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00a      	beq.n	8009774 <pvPortMalloc+0xf8>
	__asm volatile
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	613b      	str	r3, [r7, #16]
}
 8009770:	bf00      	nop
 8009772:	e7fe      	b.n	8009772 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	685a      	ldr	r2, [r3, #4]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	1ad2      	subs	r2, r2, r3
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009786:	69b8      	ldr	r0, [r7, #24]
 8009788:	f000 f8f8 	bl	800997c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800978c:	4b1a      	ldr	r3, [pc, #104]	; (80097f8 <pvPortMalloc+0x17c>)
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	4a18      	ldr	r2, [pc, #96]	; (80097f8 <pvPortMalloc+0x17c>)
 8009798:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800979a:	4b17      	ldr	r3, [pc, #92]	; (80097f8 <pvPortMalloc+0x17c>)
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	4b18      	ldr	r3, [pc, #96]	; (8009800 <pvPortMalloc+0x184>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d203      	bcs.n	80097ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80097a6:	4b14      	ldr	r3, [pc, #80]	; (80097f8 <pvPortMalloc+0x17c>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a15      	ldr	r2, [pc, #84]	; (8009800 <pvPortMalloc+0x184>)
 80097ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80097ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b0:	685a      	ldr	r2, [r3, #4]
 80097b2:	4b10      	ldr	r3, [pc, #64]	; (80097f4 <pvPortMalloc+0x178>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	431a      	orrs	r2, r3
 80097b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80097bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097be:	2200      	movs	r2, #0
 80097c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80097c2:	f7fe fd9f 	bl	8008304 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	f003 0307 	and.w	r3, r3, #7
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00a      	beq.n	80097e6 <pvPortMalloc+0x16a>
	__asm volatile
 80097d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	60fb      	str	r3, [r7, #12]
}
 80097e2:	bf00      	nop
 80097e4:	e7fe      	b.n	80097e4 <pvPortMalloc+0x168>
	return pvReturn;
 80097e6:	69fb      	ldr	r3, [r7, #28]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3728      	adds	r7, #40	; 0x28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	20001a98 	.word	0x20001a98
 80097f4:	20001aa4 	.word	0x20001aa4
 80097f8:	20001a9c 	.word	0x20001a9c
 80097fc:	20001a90 	.word	0x20001a90
 8009800:	20001aa0 	.word	0x20001aa0

08009804 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d048      	beq.n	80098a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009816:	2308      	movs	r3, #8
 8009818:	425b      	negs	r3, r3
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	4413      	add	r3, r2
 800981e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	4b21      	ldr	r3, [pc, #132]	; (80098b0 <vPortFree+0xac>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4013      	ands	r3, r2
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10a      	bne.n	8009848 <vPortFree+0x44>
	__asm volatile
 8009832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009836:	f383 8811 	msr	BASEPRI, r3
 800983a:	f3bf 8f6f 	isb	sy
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	60fb      	str	r3, [r7, #12]
}
 8009844:	bf00      	nop
 8009846:	e7fe      	b.n	8009846 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00a      	beq.n	8009866 <vPortFree+0x62>
	__asm volatile
 8009850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009854:	f383 8811 	msr	BASEPRI, r3
 8009858:	f3bf 8f6f 	isb	sy
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	60bb      	str	r3, [r7, #8]
}
 8009862:	bf00      	nop
 8009864:	e7fe      	b.n	8009864 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	685a      	ldr	r2, [r3, #4]
 800986a:	4b11      	ldr	r3, [pc, #68]	; (80098b0 <vPortFree+0xac>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4013      	ands	r3, r2
 8009870:	2b00      	cmp	r3, #0
 8009872:	d019      	beq.n	80098a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d115      	bne.n	80098a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	685a      	ldr	r2, [r3, #4]
 8009880:	4b0b      	ldr	r3, [pc, #44]	; (80098b0 <vPortFree+0xac>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	43db      	mvns	r3, r3
 8009886:	401a      	ands	r2, r3
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800988c:	f7fe fd2c 	bl	80082e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	4b07      	ldr	r3, [pc, #28]	; (80098b4 <vPortFree+0xb0>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4413      	add	r3, r2
 800989a:	4a06      	ldr	r2, [pc, #24]	; (80098b4 <vPortFree+0xb0>)
 800989c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800989e:	6938      	ldr	r0, [r7, #16]
 80098a0:	f000 f86c 	bl	800997c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80098a4:	f7fe fd2e 	bl	8008304 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098a8:	bf00      	nop
 80098aa:	3718      	adds	r7, #24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	20001aa4 	.word	0x20001aa4
 80098b4:	20001a9c 	.word	0x20001a9c

080098b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80098be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80098c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80098c4:	4b27      	ldr	r3, [pc, #156]	; (8009964 <prvHeapInit+0xac>)
 80098c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f003 0307 	and.w	r3, r3, #7
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00c      	beq.n	80098ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	3307      	adds	r3, #7
 80098d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f023 0307 	bic.w	r3, r3, #7
 80098de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	4a1f      	ldr	r2, [pc, #124]	; (8009964 <prvHeapInit+0xac>)
 80098e8:	4413      	add	r3, r2
 80098ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098f0:	4a1d      	ldr	r2, [pc, #116]	; (8009968 <prvHeapInit+0xb0>)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098f6:	4b1c      	ldr	r3, [pc, #112]	; (8009968 <prvHeapInit+0xb0>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	4413      	add	r3, r2
 8009902:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009904:	2208      	movs	r2, #8
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	1a9b      	subs	r3, r3, r2
 800990a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f023 0307 	bic.w	r3, r3, #7
 8009912:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	4a15      	ldr	r2, [pc, #84]	; (800996c <prvHeapInit+0xb4>)
 8009918:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800991a:	4b14      	ldr	r3, [pc, #80]	; (800996c <prvHeapInit+0xb4>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2200      	movs	r2, #0
 8009920:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009922:	4b12      	ldr	r3, [pc, #72]	; (800996c <prvHeapInit+0xb4>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2200      	movs	r2, #0
 8009928:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	1ad2      	subs	r2, r2, r3
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009938:	4b0c      	ldr	r3, [pc, #48]	; (800996c <prvHeapInit+0xb4>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	4a0a      	ldr	r2, [pc, #40]	; (8009970 <prvHeapInit+0xb8>)
 8009946:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	4a09      	ldr	r2, [pc, #36]	; (8009974 <prvHeapInit+0xbc>)
 800994e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009950:	4b09      	ldr	r3, [pc, #36]	; (8009978 <prvHeapInit+0xc0>)
 8009952:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009956:	601a      	str	r2, [r3, #0]
}
 8009958:	bf00      	nop
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	bc80      	pop	{r7}
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	20000e90 	.word	0x20000e90
 8009968:	20001a90 	.word	0x20001a90
 800996c:	20001a98 	.word	0x20001a98
 8009970:	20001aa0 	.word	0x20001aa0
 8009974:	20001a9c 	.word	0x20001a9c
 8009978:	20001aa4 	.word	0x20001aa4

0800997c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009984:	4b27      	ldr	r3, [pc, #156]	; (8009a24 <prvInsertBlockIntoFreeList+0xa8>)
 8009986:	60fb      	str	r3, [r7, #12]
 8009988:	e002      	b.n	8009990 <prvInsertBlockIntoFreeList+0x14>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	60fb      	str	r3, [r7, #12]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	429a      	cmp	r2, r3
 8009998:	d8f7      	bhi.n	800998a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	4413      	add	r3, r2
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d108      	bne.n	80099be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	685a      	ldr	r2, [r3, #4]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	441a      	add	r2, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	441a      	add	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d118      	bne.n	8009a04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	4b14      	ldr	r3, [pc, #80]	; (8009a28 <prvInsertBlockIntoFreeList+0xac>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d00d      	beq.n	80099fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	685a      	ldr	r2, [r3, #4]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	441a      	add	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	601a      	str	r2, [r3, #0]
 80099f8:	e008      	b.n	8009a0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099fa:	4b0b      	ldr	r3, [pc, #44]	; (8009a28 <prvInsertBlockIntoFreeList+0xac>)
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	601a      	str	r2, [r3, #0]
 8009a02:	e003      	b.n	8009a0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d002      	beq.n	8009a1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a1a:	bf00      	nop
 8009a1c:	3714      	adds	r7, #20
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bc80      	pop	{r7}
 8009a22:	4770      	bx	lr
 8009a24:	20001a90 	.word	0x20001a90
 8009a28:	20001a98 	.word	0x20001a98

08009a2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a30:	2200      	movs	r2, #0
 8009a32:	4912      	ldr	r1, [pc, #72]	; (8009a7c <MX_USB_DEVICE_Init+0x50>)
 8009a34:	4812      	ldr	r0, [pc, #72]	; (8009a80 <MX_USB_DEVICE_Init+0x54>)
 8009a36:	f7fc f997 	bl	8005d68 <USBD_Init>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d001      	beq.n	8009a44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a40:	f7f6 fcb4 	bl	80003ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a44:	490f      	ldr	r1, [pc, #60]	; (8009a84 <MX_USB_DEVICE_Init+0x58>)
 8009a46:	480e      	ldr	r0, [pc, #56]	; (8009a80 <MX_USB_DEVICE_Init+0x54>)
 8009a48:	f7fc f9b9 	bl	8005dbe <USBD_RegisterClass>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d001      	beq.n	8009a56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a52:	f7f6 fcab 	bl	80003ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009a56:	490c      	ldr	r1, [pc, #48]	; (8009a88 <MX_USB_DEVICE_Init+0x5c>)
 8009a58:	4809      	ldr	r0, [pc, #36]	; (8009a80 <MX_USB_DEVICE_Init+0x54>)
 8009a5a:	f7fc f919 	bl	8005c90 <USBD_CDC_RegisterInterface>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d001      	beq.n	8009a68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a64:	f7f6 fca2 	bl	80003ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009a68:	4805      	ldr	r0, [pc, #20]	; (8009a80 <MX_USB_DEVICE_Init+0x54>)
 8009a6a:	f7fc f9c1 	bl	8005df0 <USBD_Start>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d001      	beq.n	8009a78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009a74:	f7f6 fc9a 	bl	80003ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a78:	bf00      	nop
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	20000130 	.word	0x20000130
 8009a80:	20001d5c 	.word	0x20001d5c
 8009a84:	20000018 	.word	0x20000018
 8009a88:	20000120 	.word	0x20000120

08009a8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a90:	2200      	movs	r2, #0
 8009a92:	4905      	ldr	r1, [pc, #20]	; (8009aa8 <CDC_Init_FS+0x1c>)
 8009a94:	4805      	ldr	r0, [pc, #20]	; (8009aac <CDC_Init_FS+0x20>)
 8009a96:	f7fc f911 	bl	8005cbc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a9a:	4905      	ldr	r1, [pc, #20]	; (8009ab0 <CDC_Init_FS+0x24>)
 8009a9c:	4803      	ldr	r0, [pc, #12]	; (8009aac <CDC_Init_FS+0x20>)
 8009a9e:	f7fc f926 	bl	8005cee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009aa2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	20002408 	.word	0x20002408
 8009aac:	20001d5c 	.word	0x20001d5c
 8009ab0:	20002020 	.word	0x20002020

08009ab4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ab8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bc80      	pop	{r7}
 8009ac0:	4770      	bx	lr
	...

08009ac4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	4603      	mov	r3, r0
 8009acc:	6039      	str	r1, [r7, #0]
 8009ace:	71fb      	strb	r3, [r7, #7]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009ad4:	79fb      	ldrb	r3, [r7, #7]
 8009ad6:	2b23      	cmp	r3, #35	; 0x23
 8009ad8:	d84a      	bhi.n	8009b70 <CDC_Control_FS+0xac>
 8009ada:	a201      	add	r2, pc, #4	; (adr r2, 8009ae0 <CDC_Control_FS+0x1c>)
 8009adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae0:	08009b71 	.word	0x08009b71
 8009ae4:	08009b71 	.word	0x08009b71
 8009ae8:	08009b71 	.word	0x08009b71
 8009aec:	08009b71 	.word	0x08009b71
 8009af0:	08009b71 	.word	0x08009b71
 8009af4:	08009b71 	.word	0x08009b71
 8009af8:	08009b71 	.word	0x08009b71
 8009afc:	08009b71 	.word	0x08009b71
 8009b00:	08009b71 	.word	0x08009b71
 8009b04:	08009b71 	.word	0x08009b71
 8009b08:	08009b71 	.word	0x08009b71
 8009b0c:	08009b71 	.word	0x08009b71
 8009b10:	08009b71 	.word	0x08009b71
 8009b14:	08009b71 	.word	0x08009b71
 8009b18:	08009b71 	.word	0x08009b71
 8009b1c:	08009b71 	.word	0x08009b71
 8009b20:	08009b71 	.word	0x08009b71
 8009b24:	08009b71 	.word	0x08009b71
 8009b28:	08009b71 	.word	0x08009b71
 8009b2c:	08009b71 	.word	0x08009b71
 8009b30:	08009b71 	.word	0x08009b71
 8009b34:	08009b71 	.word	0x08009b71
 8009b38:	08009b71 	.word	0x08009b71
 8009b3c:	08009b71 	.word	0x08009b71
 8009b40:	08009b71 	.word	0x08009b71
 8009b44:	08009b71 	.word	0x08009b71
 8009b48:	08009b71 	.word	0x08009b71
 8009b4c:	08009b71 	.word	0x08009b71
 8009b50:	08009b71 	.word	0x08009b71
 8009b54:	08009b71 	.word	0x08009b71
 8009b58:	08009b71 	.word	0x08009b71
 8009b5c:	08009b71 	.word	0x08009b71
 8009b60:	08009b71 	.word	0x08009b71
 8009b64:	08009b71 	.word	0x08009b71
 8009b68:	08009b71 	.word	0x08009b71
 8009b6c:	08009b71 	.word	0x08009b71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b70:	bf00      	nop
  }

  return (USBD_OK);
 8009b72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bc80      	pop	{r7}
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop

08009b80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b8a:	6879      	ldr	r1, [r7, #4]
 8009b8c:	4805      	ldr	r0, [pc, #20]	; (8009ba4 <CDC_Receive_FS+0x24>)
 8009b8e:	f7fc f8ae 	bl	8005cee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b92:	4804      	ldr	r0, [pc, #16]	; (8009ba4 <CDC_Receive_FS+0x24>)
 8009b94:	f7fc f8be 	bl	8005d14 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009b98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	20001d5c 	.word	0x20001d5c

08009ba8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	4603      	mov	r3, r0
 8009bb0:	6039      	str	r1, [r7, #0]
 8009bb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2212      	movs	r2, #18
 8009bb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009bba:	4b03      	ldr	r3, [pc, #12]	; (8009bc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bc80      	pop	{r7}
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	2000014c 	.word	0x2000014c

08009bcc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	6039      	str	r1, [r7, #0]
 8009bd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	2204      	movs	r2, #4
 8009bdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009bde:	4b03      	ldr	r3, [pc, #12]	; (8009bec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bc80      	pop	{r7}
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	20000160 	.word	0x20000160

08009bf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	6039      	str	r1, [r7, #0]
 8009bfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bfc:	79fb      	ldrb	r3, [r7, #7]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d105      	bne.n	8009c0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	4907      	ldr	r1, [pc, #28]	; (8009c24 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c06:	4808      	ldr	r0, [pc, #32]	; (8009c28 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c08:	f7fd f86a 	bl	8006ce0 <USBD_GetString>
 8009c0c:	e004      	b.n	8009c18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	4904      	ldr	r1, [pc, #16]	; (8009c24 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c12:	4805      	ldr	r0, [pc, #20]	; (8009c28 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c14:	f7fd f864 	bl	8006ce0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c18:	4b02      	ldr	r3, [pc, #8]	; (8009c24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	200027f0 	.word	0x200027f0
 8009c28:	0800a3e8 	.word	0x0800a3e8

08009c2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	4603      	mov	r3, r0
 8009c34:	6039      	str	r1, [r7, #0]
 8009c36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c38:	683a      	ldr	r2, [r7, #0]
 8009c3a:	4904      	ldr	r1, [pc, #16]	; (8009c4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c3c:	4804      	ldr	r0, [pc, #16]	; (8009c50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c3e:	f7fd f84f 	bl	8006ce0 <USBD_GetString>
  return USBD_StrDesc;
 8009c42:	4b02      	ldr	r3, [pc, #8]	; (8009c4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3708      	adds	r7, #8
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	200027f0 	.word	0x200027f0
 8009c50:	0800a3f4 	.word	0x0800a3f4

08009c54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	6039      	str	r1, [r7, #0]
 8009c5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	221a      	movs	r2, #26
 8009c64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c66:	f000 f843 	bl	8009cf0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c6a:	4b02      	ldr	r3, [pc, #8]	; (8009c74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	20000164 	.word	0x20000164

08009c78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	4603      	mov	r3, r0
 8009c80:	6039      	str	r1, [r7, #0]
 8009c82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c84:	79fb      	ldrb	r3, [r7, #7]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d105      	bne.n	8009c96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	4907      	ldr	r1, [pc, #28]	; (8009cac <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c8e:	4808      	ldr	r0, [pc, #32]	; (8009cb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c90:	f7fd f826 	bl	8006ce0 <USBD_GetString>
 8009c94:	e004      	b.n	8009ca0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c96:	683a      	ldr	r2, [r7, #0]
 8009c98:	4904      	ldr	r1, [pc, #16]	; (8009cac <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c9a:	4805      	ldr	r0, [pc, #20]	; (8009cb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c9c:	f7fd f820 	bl	8006ce0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ca0:	4b02      	ldr	r3, [pc, #8]	; (8009cac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	200027f0 	.word	0x200027f0
 8009cb0:	0800a408 	.word	0x0800a408

08009cb4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	4603      	mov	r3, r0
 8009cbc:	6039      	str	r1, [r7, #0]
 8009cbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009cc0:	79fb      	ldrb	r3, [r7, #7]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d105      	bne.n	8009cd2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cc6:	683a      	ldr	r2, [r7, #0]
 8009cc8:	4907      	ldr	r1, [pc, #28]	; (8009ce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009cca:	4808      	ldr	r0, [pc, #32]	; (8009cec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ccc:	f7fd f808 	bl	8006ce0 <USBD_GetString>
 8009cd0:	e004      	b.n	8009cdc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cd2:	683a      	ldr	r2, [r7, #0]
 8009cd4:	4904      	ldr	r1, [pc, #16]	; (8009ce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009cd6:	4805      	ldr	r0, [pc, #20]	; (8009cec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009cd8:	f7fd f802 	bl	8006ce0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cdc:	4b02      	ldr	r3, [pc, #8]	; (8009ce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	200027f0 	.word	0x200027f0
 8009cec:	0800a414 	.word	0x0800a414

08009cf0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009cf6:	4b0f      	ldr	r3, [pc, #60]	; (8009d34 <Get_SerialNum+0x44>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009cfc:	4b0e      	ldr	r3, [pc, #56]	; (8009d38 <Get_SerialNum+0x48>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d02:	4b0e      	ldr	r3, [pc, #56]	; (8009d3c <Get_SerialNum+0x4c>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d009      	beq.n	8009d2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d16:	2208      	movs	r2, #8
 8009d18:	4909      	ldr	r1, [pc, #36]	; (8009d40 <Get_SerialNum+0x50>)
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f000 f814 	bl	8009d48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d20:	2204      	movs	r2, #4
 8009d22:	4908      	ldr	r1, [pc, #32]	; (8009d44 <Get_SerialNum+0x54>)
 8009d24:	68b8      	ldr	r0, [r7, #8]
 8009d26:	f000 f80f 	bl	8009d48 <IntToUnicode>
  }
}
 8009d2a:	bf00      	nop
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	1ffff7e8 	.word	0x1ffff7e8
 8009d38:	1ffff7ec 	.word	0x1ffff7ec
 8009d3c:	1ffff7f0 	.word	0x1ffff7f0
 8009d40:	20000166 	.word	0x20000166
 8009d44:	20000176 	.word	0x20000176

08009d48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b087      	sub	sp, #28
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	4613      	mov	r3, r2
 8009d54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d56:	2300      	movs	r3, #0
 8009d58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	75fb      	strb	r3, [r7, #23]
 8009d5e:	e027      	b.n	8009db0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	0f1b      	lsrs	r3, r3, #28
 8009d64:	2b09      	cmp	r3, #9
 8009d66:	d80b      	bhi.n	8009d80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	0f1b      	lsrs	r3, r3, #28
 8009d6c:	b2da      	uxtb	r2, r3
 8009d6e:	7dfb      	ldrb	r3, [r7, #23]
 8009d70:	005b      	lsls	r3, r3, #1
 8009d72:	4619      	mov	r1, r3
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	440b      	add	r3, r1
 8009d78:	3230      	adds	r2, #48	; 0x30
 8009d7a:	b2d2      	uxtb	r2, r2
 8009d7c:	701a      	strb	r2, [r3, #0]
 8009d7e:	e00a      	b.n	8009d96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	0f1b      	lsrs	r3, r3, #28
 8009d84:	b2da      	uxtb	r2, r3
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	005b      	lsls	r3, r3, #1
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	440b      	add	r3, r1
 8009d90:	3237      	adds	r2, #55	; 0x37
 8009d92:	b2d2      	uxtb	r2, r2
 8009d94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	011b      	lsls	r3, r3, #4
 8009d9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d9c:	7dfb      	ldrb	r3, [r7, #23]
 8009d9e:	005b      	lsls	r3, r3, #1
 8009da0:	3301      	adds	r3, #1
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	4413      	add	r3, r2
 8009da6:	2200      	movs	r2, #0
 8009da8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009daa:	7dfb      	ldrb	r3, [r7, #23]
 8009dac:	3301      	adds	r3, #1
 8009dae:	75fb      	strb	r3, [r7, #23]
 8009db0:	7dfa      	ldrb	r2, [r7, #23]
 8009db2:	79fb      	ldrb	r3, [r7, #7]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d3d3      	bcc.n	8009d60 <IntToUnicode+0x18>
  }
}
 8009db8:	bf00      	nop
 8009dba:	bf00      	nop
 8009dbc:	371c      	adds	r7, #28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bc80      	pop	{r7}
 8009dc2:	4770      	bx	lr

08009dc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a0d      	ldr	r2, [pc, #52]	; (8009e08 <HAL_PCD_MspInit+0x44>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d113      	bne.n	8009dfe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009dd6:	4b0d      	ldr	r3, [pc, #52]	; (8009e0c <HAL_PCD_MspInit+0x48>)
 8009dd8:	69db      	ldr	r3, [r3, #28]
 8009dda:	4a0c      	ldr	r2, [pc, #48]	; (8009e0c <HAL_PCD_MspInit+0x48>)
 8009ddc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009de0:	61d3      	str	r3, [r2, #28]
 8009de2:	4b0a      	ldr	r3, [pc, #40]	; (8009e0c <HAL_PCD_MspInit+0x48>)
 8009de4:	69db      	ldr	r3, [r3, #28]
 8009de6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8009dee:	2200      	movs	r2, #0
 8009df0:	2105      	movs	r1, #5
 8009df2:	2014      	movs	r0, #20
 8009df4:	f7f6 fcab 	bl	800074e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009df8:	2014      	movs	r0, #20
 8009dfa:	f7f6 fcc4 	bl	8000786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009dfe:	bf00      	nop
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	40005c00 	.word	0x40005c00
 8009e0c:	40021000 	.word	0x40021000

08009e10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009e24:	4619      	mov	r1, r3
 8009e26:	4610      	mov	r0, r2
 8009e28:	f7fc f82a 	bl	8005e80 <USBD_LL_SetupStage>
}
 8009e2c:	bf00      	nop
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009e46:	78fa      	ldrb	r2, [r7, #3]
 8009e48:	6879      	ldr	r1, [r7, #4]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	00db      	lsls	r3, r3, #3
 8009e52:	440b      	add	r3, r1
 8009e54:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	78fb      	ldrb	r3, [r7, #3]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	f7fc f85c 	bl	8005f1a <USBD_LL_DataOutStage>
}
 8009e62:	bf00      	nop
 8009e64:	3708      	adds	r7, #8
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b082      	sub	sp, #8
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	460b      	mov	r3, r1
 8009e74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009e7c:	78fa      	ldrb	r2, [r7, #3]
 8009e7e:	6879      	ldr	r1, [r7, #4]
 8009e80:	4613      	mov	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	00db      	lsls	r3, r3, #3
 8009e88:	440b      	add	r3, r1
 8009e8a:	333c      	adds	r3, #60	; 0x3c
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	78fb      	ldrb	r3, [r7, #3]
 8009e90:	4619      	mov	r1, r3
 8009e92:	f7fc f8b3 	bl	8005ffc <USBD_LL_DataInStage>
}
 8009e96:	bf00      	nop
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b082      	sub	sp, #8
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7fc f9c3 	bl	8006238 <USBD_LL_SOF>
}
 8009eb2:	bf00      	nop
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b084      	sub	sp, #16
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	2b02      	cmp	r3, #2
 8009ecc:	d001      	beq.n	8009ed2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009ece:	f7f6 fa6d 	bl	80003ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ed8:	7bfa      	ldrb	r2, [r7, #15]
 8009eda:	4611      	mov	r1, r2
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fc f973 	bl	80061c8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fc f92c 	bl	8006146 <USBD_LL_Reset>
}
 8009eee:	bf00      	nop
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
	...

08009ef8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fc f96d 	bl	80061e6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d005      	beq.n	8009f20 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f14:	4b04      	ldr	r3, [pc, #16]	; (8009f28 <HAL_PCD_SuspendCallback+0x30>)
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	4a03      	ldr	r2, [pc, #12]	; (8009f28 <HAL_PCD_SuspendCallback+0x30>)
 8009f1a:	f043 0306 	orr.w	r3, r3, #6
 8009f1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f20:	bf00      	nop
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	e000ed00 	.word	0xe000ed00

08009f2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7fc f967 	bl	800620e <USBD_LL_Resume>
}
 8009f40:	bf00      	nop
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009f50:	4a28      	ldr	r2, [pc, #160]	; (8009ff4 <USBD_LL_Init+0xac>)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a26      	ldr	r2, [pc, #152]	; (8009ff4 <USBD_LL_Init+0xac>)
 8009f5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009f60:	4b24      	ldr	r3, [pc, #144]	; (8009ff4 <USBD_LL_Init+0xac>)
 8009f62:	4a25      	ldr	r2, [pc, #148]	; (8009ff8 <USBD_LL_Init+0xb0>)
 8009f64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009f66:	4b23      	ldr	r3, [pc, #140]	; (8009ff4 <USBD_LL_Init+0xac>)
 8009f68:	2208      	movs	r2, #8
 8009f6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009f6c:	4b21      	ldr	r3, [pc, #132]	; (8009ff4 <USBD_LL_Init+0xac>)
 8009f6e:	2202      	movs	r2, #2
 8009f70:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009f72:	4b20      	ldr	r3, [pc, #128]	; (8009ff4 <USBD_LL_Init+0xac>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009f78:	4b1e      	ldr	r3, [pc, #120]	; (8009ff4 <USBD_LL_Init+0xac>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009f7e:	4b1d      	ldr	r3, [pc, #116]	; (8009ff4 <USBD_LL_Init+0xac>)
 8009f80:	2200      	movs	r2, #0
 8009f82:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009f84:	481b      	ldr	r0, [pc, #108]	; (8009ff4 <USBD_LL_Init+0xac>)
 8009f86:	f7f6 fdc2 	bl	8000b0e <HAL_PCD_Init>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d001      	beq.n	8009f94 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009f90:	f7f6 fa0c 	bl	80003ac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f9a:	2318      	movs	r3, #24
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	f7f8 fa38 	bl	8002414 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009faa:	2358      	movs	r3, #88	; 0x58
 8009fac:	2200      	movs	r2, #0
 8009fae:	2180      	movs	r1, #128	; 0x80
 8009fb0:	f7f8 fa30 	bl	8002414 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009fba:	23c0      	movs	r3, #192	; 0xc0
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2181      	movs	r1, #129	; 0x81
 8009fc0:	f7f8 fa28 	bl	8002414 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009fca:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009fce:	2200      	movs	r2, #0
 8009fd0:	2101      	movs	r1, #1
 8009fd2:	f7f8 fa1f 	bl	8002414 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009fdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	2182      	movs	r1, #130	; 0x82
 8009fe4:	f7f8 fa16 	bl	8002414 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	200029f0 	.word	0x200029f0
 8009ff8:	40005c00 	.word	0x40005c00

08009ffc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a004:	2300      	movs	r3, #0
 800a006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a012:	4618      	mov	r0, r3
 800a014:	f7f6 fe86 	bl	8000d24 <HAL_PCD_Start>
 800a018:	4603      	mov	r3, r0
 800a01a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 f94e 	bl	800a2c0 <USBD_Get_USB_Status>
 800a024:	4603      	mov	r3, r0
 800a026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a028:	7bbb      	ldrb	r3, [r7, #14]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b084      	sub	sp, #16
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	4608      	mov	r0, r1
 800a03c:	4611      	mov	r1, r2
 800a03e:	461a      	mov	r2, r3
 800a040:	4603      	mov	r3, r0
 800a042:	70fb      	strb	r3, [r7, #3]
 800a044:	460b      	mov	r3, r1
 800a046:	70bb      	strb	r3, [r7, #2]
 800a048:	4613      	mov	r3, r2
 800a04a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a050:	2300      	movs	r3, #0
 800a052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a05a:	78bb      	ldrb	r3, [r7, #2]
 800a05c:	883a      	ldrh	r2, [r7, #0]
 800a05e:	78f9      	ldrb	r1, [r7, #3]
 800a060:	f7f7 f800 	bl	8001064 <HAL_PCD_EP_Open>
 800a064:	4603      	mov	r3, r0
 800a066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a068:	7bfb      	ldrb	r3, [r7, #15]
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 f928 	bl	800a2c0 <USBD_Get_USB_Status>
 800a070:	4603      	mov	r3, r0
 800a072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a074:	7bbb      	ldrb	r3, [r7, #14]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b084      	sub	sp, #16
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
 800a086:	460b      	mov	r3, r1
 800a088:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a08a:	2300      	movs	r3, #0
 800a08c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a098:	78fa      	ldrb	r2, [r7, #3]
 800a09a:	4611      	mov	r1, r2
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7f7 f847 	bl	8001130 <HAL_PCD_EP_Close>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0a6:	7bfb      	ldrb	r3, [r7, #15]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f000 f909 	bl	800a2c0 <USBD_Get_USB_Status>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0d6:	78fa      	ldrb	r2, [r7, #3]
 800a0d8:	4611      	mov	r1, r2
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7f7 f907 	bl	80012ee <HAL_PCD_EP_SetStall>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 f8ea 	bl	800a2c0 <USBD_Get_USB_Status>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b084      	sub	sp, #16
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
 800a102:	460b      	mov	r3, r1
 800a104:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a10a:	2300      	movs	r3, #0
 800a10c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a114:	78fa      	ldrb	r2, [r7, #3]
 800a116:	4611      	mov	r1, r2
 800a118:	4618      	mov	r0, r3
 800a11a:	f7f7 f948 	bl	80013ae <HAL_PCD_EP_ClrStall>
 800a11e:	4603      	mov	r3, r0
 800a120:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a122:	7bfb      	ldrb	r3, [r7, #15]
 800a124:	4618      	mov	r0, r3
 800a126:	f000 f8cb 	bl	800a2c0 <USBD_Get_USB_Status>
 800a12a:	4603      	mov	r3, r0
 800a12c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a12e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	460b      	mov	r3, r1
 800a142:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a14a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a14c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a150:	2b00      	cmp	r3, #0
 800a152:	da0c      	bge.n	800a16e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a154:	78fb      	ldrb	r3, [r7, #3]
 800a156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a15a:	68f9      	ldr	r1, [r7, #12]
 800a15c:	1c5a      	adds	r2, r3, #1
 800a15e:	4613      	mov	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	4413      	add	r3, r2
 800a164:	00db      	lsls	r3, r3, #3
 800a166:	440b      	add	r3, r1
 800a168:	3302      	adds	r3, #2
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	e00b      	b.n	800a186 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a16e:	78fb      	ldrb	r3, [r7, #3]
 800a170:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a174:	68f9      	ldr	r1, [r7, #12]
 800a176:	4613      	mov	r3, r2
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	4413      	add	r3, r2
 800a17c:	00db      	lsls	r3, r3, #3
 800a17e:	440b      	add	r3, r1
 800a180:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a184:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a186:	4618      	mov	r0, r3
 800a188:	3714      	adds	r7, #20
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bc80      	pop	{r7}
 800a18e:	4770      	bx	lr

0800a190 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	460b      	mov	r3, r1
 800a19a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1aa:	78fa      	ldrb	r2, [r7, #3]
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7f6 ff33 	bl	800101a <HAL_PCD_SetAddress>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f000 f880 	bl	800a2c0 <USBD_Get_USB_Status>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b086      	sub	sp, #24
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	60f8      	str	r0, [r7, #12]
 800a1d6:	607a      	str	r2, [r7, #4]
 800a1d8:	461a      	mov	r2, r3
 800a1da:	460b      	mov	r3, r1
 800a1dc:	72fb      	strb	r3, [r7, #11]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a1f0:	893b      	ldrh	r3, [r7, #8]
 800a1f2:	7af9      	ldrb	r1, [r7, #11]
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	f7f7 f837 	bl	8001268 <HAL_PCD_EP_Transmit>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1fe:	7dfb      	ldrb	r3, [r7, #23]
 800a200:	4618      	mov	r0, r3
 800a202:	f000 f85d 	bl	800a2c0 <USBD_Get_USB_Status>
 800a206:	4603      	mov	r3, r0
 800a208:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a20a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3718      	adds	r7, #24
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	607a      	str	r2, [r7, #4]
 800a21e:	461a      	mov	r2, r3
 800a220:	460b      	mov	r3, r1
 800a222:	72fb      	strb	r3, [r7, #11]
 800a224:	4613      	mov	r3, r2
 800a226:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a22c:	2300      	movs	r3, #0
 800a22e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a236:	893b      	ldrh	r3, [r7, #8]
 800a238:	7af9      	ldrb	r1, [r7, #11]
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	f7f6 ffc0 	bl	80011c0 <HAL_PCD_EP_Receive>
 800a240:	4603      	mov	r3, r0
 800a242:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a244:	7dfb      	ldrb	r3, [r7, #23]
 800a246:	4618      	mov	r0, r3
 800a248:	f000 f83a 	bl	800a2c0 <USBD_Get_USB_Status>
 800a24c:	4603      	mov	r3, r0
 800a24e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a250:	7dbb      	ldrb	r3, [r7, #22]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3718      	adds	r7, #24
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b082      	sub	sp, #8
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	460b      	mov	r3, r1
 800a264:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a26c:	78fa      	ldrb	r2, [r7, #3]
 800a26e:	4611      	mov	r1, r2
 800a270:	4618      	mov	r0, r3
 800a272:	f7f6 ffe2 	bl	800123a <HAL_PCD_EP_GetRxCount>
 800a276:	4603      	mov	r3, r0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a288:	4b02      	ldr	r3, [pc, #8]	; (800a294 <USBD_static_malloc+0x14>)
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	370c      	adds	r7, #12
 800a28e:	46bd      	mov	sp, r7
 800a290:	bc80      	pop	{r7}
 800a292:	4770      	bx	lr
 800a294:	20001aa8 	.word	0x20001aa8

0800a298 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]

}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bc80      	pop	{r7}
 800a2a8:	4770      	bx	lr

0800a2aa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2aa:	b480      	push	{r7}
 800a2ac:	b083      	sub	sp, #12
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a2b6:	bf00      	nop
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bc80      	pop	{r7}
 800a2be:	4770      	bx	lr

0800a2c0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a2ce:	79fb      	ldrb	r3, [r7, #7]
 800a2d0:	2b03      	cmp	r3, #3
 800a2d2:	d817      	bhi.n	800a304 <USBD_Get_USB_Status+0x44>
 800a2d4:	a201      	add	r2, pc, #4	; (adr r2, 800a2dc <USBD_Get_USB_Status+0x1c>)
 800a2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2da:	bf00      	nop
 800a2dc:	0800a2ed 	.word	0x0800a2ed
 800a2e0:	0800a2f3 	.word	0x0800a2f3
 800a2e4:	0800a2f9 	.word	0x0800a2f9
 800a2e8:	0800a2ff 	.word	0x0800a2ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a2f0:	e00b      	b.n	800a30a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a2f6:	e008      	b.n	800a30a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a2fc:	e005      	b.n	800a30a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2fe:	2302      	movs	r3, #2
 800a300:	73fb      	strb	r3, [r7, #15]
    break;
 800a302:	e002      	b.n	800a30a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a304:	2302      	movs	r3, #2
 800a306:	73fb      	strb	r3, [r7, #15]
    break;
 800a308:	bf00      	nop
  }
  return usb_status;
 800a30a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	bc80      	pop	{r7}
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop

0800a318 <__libc_init_array>:
 800a318:	b570      	push	{r4, r5, r6, lr}
 800a31a:	2600      	movs	r6, #0
 800a31c:	4d0c      	ldr	r5, [pc, #48]	; (800a350 <__libc_init_array+0x38>)
 800a31e:	4c0d      	ldr	r4, [pc, #52]	; (800a354 <__libc_init_array+0x3c>)
 800a320:	1b64      	subs	r4, r4, r5
 800a322:	10a4      	asrs	r4, r4, #2
 800a324:	42a6      	cmp	r6, r4
 800a326:	d109      	bne.n	800a33c <__libc_init_array+0x24>
 800a328:	f000 f830 	bl	800a38c <_init>
 800a32c:	2600      	movs	r6, #0
 800a32e:	4d0a      	ldr	r5, [pc, #40]	; (800a358 <__libc_init_array+0x40>)
 800a330:	4c0a      	ldr	r4, [pc, #40]	; (800a35c <__libc_init_array+0x44>)
 800a332:	1b64      	subs	r4, r4, r5
 800a334:	10a4      	asrs	r4, r4, #2
 800a336:	42a6      	cmp	r6, r4
 800a338:	d105      	bne.n	800a346 <__libc_init_array+0x2e>
 800a33a:	bd70      	pop	{r4, r5, r6, pc}
 800a33c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a340:	4798      	blx	r3
 800a342:	3601      	adds	r6, #1
 800a344:	e7ee      	b.n	800a324 <__libc_init_array+0xc>
 800a346:	f855 3b04 	ldr.w	r3, [r5], #4
 800a34a:	4798      	blx	r3
 800a34c:	3601      	adds	r6, #1
 800a34e:	e7f2      	b.n	800a336 <__libc_init_array+0x1e>
 800a350:	0800a484 	.word	0x0800a484
 800a354:	0800a484 	.word	0x0800a484
 800a358:	0800a484 	.word	0x0800a484
 800a35c:	0800a488 	.word	0x0800a488

0800a360 <memcpy>:
 800a360:	440a      	add	r2, r1
 800a362:	4291      	cmp	r1, r2
 800a364:	f100 33ff 	add.w	r3, r0, #4294967295
 800a368:	d100      	bne.n	800a36c <memcpy+0xc>
 800a36a:	4770      	bx	lr
 800a36c:	b510      	push	{r4, lr}
 800a36e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a372:	4291      	cmp	r1, r2
 800a374:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a378:	d1f9      	bne.n	800a36e <memcpy+0xe>
 800a37a:	bd10      	pop	{r4, pc}

0800a37c <memset>:
 800a37c:	4603      	mov	r3, r0
 800a37e:	4402      	add	r2, r0
 800a380:	4293      	cmp	r3, r2
 800a382:	d100      	bne.n	800a386 <memset+0xa>
 800a384:	4770      	bx	lr
 800a386:	f803 1b01 	strb.w	r1, [r3], #1
 800a38a:	e7f9      	b.n	800a380 <memset+0x4>

0800a38c <_init>:
 800a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38e:	bf00      	nop
 800a390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a392:	bc08      	pop	{r3}
 800a394:	469e      	mov	lr, r3
 800a396:	4770      	bx	lr

0800a398 <_fini>:
 800a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39a:	bf00      	nop
 800a39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a39e:	bc08      	pop	{r3}
 800a3a0:	469e      	mov	lr, r3
 800a3a2:	4770      	bx	lr
